
FW_frtos_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c81c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000438c  0801ca1c  0801ca1c  0002ca1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020da8  08020da8  00040084  2**0
                  CONTENTS
  4 .ARM          00000008  08020da8  08020da8  00030da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020db0  08020db0  00040084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020db0  08020db0  00030db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020db4  08020db4  00030db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08020db8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010638  20000084  08020e3c  00040084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200106bc  08020e3c  000406bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005b4e0  00000000  00000000  000400b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000aa21  00000000  00000000  0009b592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bc8  00000000  00000000  000a5fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a58  00000000  00000000  000a8b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dc4c  00000000  00000000  000ab5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046b09  00000000  00000000  000e9224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001275ca  00000000  00000000  0012fd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002572f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bcc0  00000000  00000000  0025734c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	0801ca04 	.word	0x0801ca04

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	0801ca04 	.word	0x0801ca04

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	//HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);


}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <vApplicationGetIdleTaskMemory+0x2c>)
 8000630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <vApplicationGetIdleTaskMemory+0x30>)
 8000636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	200000a0 	.word	0x200000a0
 8000650:	200000f4 	.word	0x200000f4

08000654 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_FREERTOS_Init+0x30>)
 800065c:	1d3c      	adds	r4, r7, #4
 800065e:	461d      	mov	r5, r3
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f005 fae2 	bl	8005c3a <osThreadCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a03      	ldr	r2, [pc, #12]	; (8000688 <MX_FREERTOS_Init+0x34>)
 800067a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bdb0      	pop	{r4, r5, r7, pc}
 8000684:	0801ca50 	.word	0x0801ca50
 8000688:	20008c38 	.word	0x20008c38

0800068c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b090      	sub	sp, #64	; 0x40
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000694:	f004 fdfe 	bl	8005294 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  	osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE); //subscribe task
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <StartDefaultTask+0x64>)
 800069a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE); //publish task
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <StartDefaultTask+0x68>)
 80006ae:	f107 0408 	add.w	r4, r7, #8
 80006b2:	461d      	mov	r5, r3
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 80006c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 fab7 	bl	8005c3a <osThreadCreate>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <StartDefaultTask+0x6c>)
 80006d0:	6013      	str	r3, [r2, #0]
  	mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f005 faae 	bl	8005c3a <osThreadCreate>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <StartDefaultTask+0x70>)
 80006e2:	6013      	str	r3, [r2, #0]

  	/* Infinite loop */
  	for(;;)
  	{
  		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //toggle running led
  		osDelay(500);
 80006e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e8:	f005 faf3 	bl	8005cd2 <osDelay>
 80006ec:	e7fa      	b.n	80006e4 <StartDefaultTask+0x58>
 80006ee:	bf00      	nop
 80006f0:	0801ca6c 	.word	0x0801ca6c
 80006f4:	0801ca88 	.word	0x0801ca88
 80006f8:	200098b8 	.word	0x200098b8
 80006fc:	200094b4 	.word	0x200094b4

08000700 <MqttClientSubTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MqttClientSubTask(void const *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MqttClientSubTask+0x60>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d007      	beq.n	8000720 <MqttClientSubTask+0x20>
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MqttClientSubTask+0x60>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <MqttClientSubTask+0x20>
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MqttClientSubTask+0x60>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d104      	bne.n	800072a <MqttClientSubTask+0x2a>
		{
			osDelay(1000);
 8000720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000724:	f005 fad5 	bl	8005cd2 <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000728:	e7ee      	b.n	8000708 <MqttClientSubTask+0x8>
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <MqttClientSubTask+0x64>)
 800072c:	f01b f94e 	bl	801b9cc <puts>
			break;
 8000730:	bf00      	nop
		}
	}

	while(1)
	{
		if(!mqttClient.isconnected)
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MqttClientSubTask+0x68>)
 8000734:	6a1b      	ldr	r3, [r3, #32]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d109      	bne.n	800074e <MqttClientSubTask+0x4e>
		{
			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <MqttClientSubTask+0x68>)
 800073c:	f01a f879 	bl	801a832 <MQTTDisconnect>
			MqttConnectBroker();
 8000740:	f000 f838 	bl	80007b4 <MqttConnectBroker>
			osDelay(1000);
 8000744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000748:	f005 fac3 	bl	8005cd2 <osDelay>
 800074c:	e7f1      	b.n	8000732 <MqttClientSubTask+0x32>
		}
		else
		{
			MQTTYield(&mqttClient, 1000); //handle timer
 800074e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MqttClientSubTask+0x68>)
 8000754:	f019 fda6 	bl	801a2a4 <MQTTYield>
			osDelay(100);
 8000758:	2064      	movs	r0, #100	; 0x64
 800075a:	f005 faba 	bl	8005cd2 <osDelay>
		if(!mqttClient.isconnected)
 800075e:	e7e8      	b.n	8000732 <MqttClientSubTask+0x32>
 8000760:	20009d9c 	.word	0x20009d9c
 8000764:	0801caa4 	.word	0x0801caa4
 8000768:	20008c3c 	.word	0x20008c3c

0800076c <MqttClientPubTask>:
		}
	}
}

void MqttClientPubTask(void const *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	const char* str = "MQTT message from STM32";
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MqttClientPubTask+0x3c>)
 8000776:	61fb      	str	r3, [r7, #28]
	MQTTMessage message;

	while(1)
	{
		if(mqttClient.isconnected)
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MqttClientPubTask+0x40>)
 800077a:	6a1b      	ldr	r3, [r3, #32]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00d      	beq.n	800079c <MqttClientPubTask+0x30>
		{
			message.payload = (void*)str;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	617b      	str	r3, [r7, #20]
			message.payloadlen = strlen(str);
 8000784:	69f8      	ldr	r0, [r7, #28]
 8000786:	f7ff fd65 	bl	8000254 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	61bb      	str	r3, [r7, #24]

			MQTTPublish(&mqttClient, "test", &message); //publish a message
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	461a      	mov	r2, r3
 8000794:	4906      	ldr	r1, [pc, #24]	; (80007b0 <MqttClientPubTask+0x44>)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MqttClientPubTask+0x40>)
 8000798:	f019 ff85 	bl	801a6a6 <MQTTPublish>
		}

		osDelay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f005 fa97 	bl	8005cd2 <osDelay>
		if(mqttClient.isconnected)
 80007a4:	e7e8      	b.n	8000778 <MqttClientPubTask+0xc>
 80007a6:	bf00      	nop
 80007a8:	0801cab8 	.word	0x0801cab8
 80007ac:	20008c3c 	.word	0x20008c3c
 80007b0:	0801cad0 	.word	0x0801cad0

080007b4 <MqttConnectBroker>:
	}
}


int MqttConnectBroker()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09c      	sub	sp, #112	; 0x70
 80007b8:	af04      	add	r7, sp, #16
	int ret;

	NewNetwork(&net);
 80007ba:	482e      	ldr	r0, [pc, #184]	; (8000874 <MqttConnectBroker+0xc0>)
 80007bc:	f01a f8d2 	bl	801a964 <NewNetwork>
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 80007c0:	f240 725b 	movw	r2, #1883	; 0x75b
 80007c4:	492c      	ldr	r1, [pc, #176]	; (8000878 <MqttConnectBroker+0xc4>)
 80007c6:	482b      	ldr	r0, [pc, #172]	; (8000874 <MqttConnectBroker+0xc0>)
 80007c8:	f01a f8e8 	bl	801a99c <ConnectNetwork>
 80007cc:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 80007ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d005      	beq.n	80007e0 <MqttConnectBroker+0x2c>
	{
		printf("ConnectNetwork failed.\n");
 80007d4:	4829      	ldr	r0, [pc, #164]	; (800087c <MqttConnectBroker+0xc8>)
 80007d6:	f01b f8f9 	bl	801b9cc <puts>
		return -1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007de:	e044      	b.n	800086a <MqttConnectBroker+0xb6>
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	9302      	str	r3, [sp, #8]
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MqttConnectBroker+0xcc>)
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <MqttConnectBroker+0xd0>)
 80007f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f6:	491f      	ldr	r1, [pc, #124]	; (8000874 <MqttConnectBroker+0xc0>)
 80007f8:	4823      	ldr	r0, [pc, #140]	; (8000888 <MqttConnectBroker+0xd4>)
 80007fa:	f019 f9f3 	bl	8019be4 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 80007fe:	4a23      	ldr	r2, [pc, #140]	; (800088c <MqttConnectBroker+0xd8>)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4611      	mov	r1, r2
 8000804:	2258      	movs	r2, #88	; 0x58
 8000806:	4618      	mov	r0, r3
 8000808:	f01b f844 	bl	801b894 <memcpy>
	data.willFlag = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	77fb      	strb	r3, [r7, #31]
	data.MQTTVersion = 3;
 8000810:	2303      	movs	r3, #3
 8000812:	733b      	strb	r3, [r7, #12]
	data.clientID.cstring = "STM32F7";
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MqttConnectBroker+0xdc>)
 8000816:	613b      	str	r3, [r7, #16]
	data.username.cstring = "STM32F7";
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MqttConnectBroker+0xdc>)
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
	data.password.cstring = "";
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MqttConnectBroker+0xe0>)
 800081e:	653b      	str	r3, [r7, #80]	; 0x50
	data.keepAliveInterval = 60;
 8000820:	233c      	movs	r3, #60	; 0x3c
 8000822:	83bb      	strh	r3, [r7, #28]
	data.cleansession = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	77bb      	strb	r3, [r7, #30]

	ret = MQTTConnect(&mqttClient, &data);
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <MqttConnectBroker+0xd4>)
 800082e:	f019 fe1b 	bl	801a468 <MQTTConnect>
 8000832:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 8000834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000836:	2b00      	cmp	r3, #0
 8000838:	d004      	beq.n	8000844 <MqttConnectBroker+0x90>
	{
		printf("MQTTConnect failed.\n");
 800083a:	4817      	ldr	r0, [pc, #92]	; (8000898 <MqttConnectBroker+0xe4>)
 800083c:	f01b f8c6 	bl	801b9cc <puts>
		return ret;
 8000840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000842:	e012      	b.n	800086a <MqttConnectBroker+0xb6>
	}

	ret = MQTTSubscribe(&mqttClient, "/status/get", QOS0, MqttMessageArrived);
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MqttConnectBroker+0xe8>)
 8000846:	2200      	movs	r2, #0
 8000848:	4915      	ldr	r1, [pc, #84]	; (80008a0 <MqttConnectBroker+0xec>)
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <MqttConnectBroker+0xd4>)
 800084c:	f019 ff15 	bl	801a67a <MQTTSubscribe>
 8000850:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 8000852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000854:	2b00      	cmp	r3, #0
 8000856:	d004      	beq.n	8000862 <MqttConnectBroker+0xae>
	{
		printf("MQTTSubscribe failed.\n");
 8000858:	4812      	ldr	r0, [pc, #72]	; (80008a4 <MqttConnectBroker+0xf0>)
 800085a:	f01b f8b7 	bl	801b9cc <puts>
		return ret;
 800085e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000860:	e003      	b.n	800086a <MqttConnectBroker+0xb6>
	}

	printf("MQTT_ConnectBroker O.K.\n");
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MqttConnectBroker+0xf4>)
 8000864:	f01b f8b2 	bl	801b9cc <puts>
	return MQTT_SUCCESS;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3760      	adds	r7, #96	; 0x60
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20008ca4 	.word	0x20008ca4
 8000878:	0801cad8 	.word	0x0801cad8
 800087c:	0801cae8 	.word	0x0801cae8
 8000880:	200094b8 	.word	0x200094b8
 8000884:	200090b4 	.word	0x200090b4
 8000888:	20008c3c 	.word	0x20008c3c
 800088c:	0801cb5c 	.word	0x0801cb5c
 8000890:	0801cb00 	.word	0x0801cb00
 8000894:	0801cb08 	.word	0x0801cb08
 8000898:	0801cb0c 	.word	0x0801cb0c
 800089c:	080008ad 	.word	0x080008ad
 80008a0:	0801cb20 	.word	0x0801cb20
 80008a4:	0801cb2c 	.word	0x0801cb2c
 80008a8:	0801cb44 	.word	0x0801cb44

080008ac <MqttMessageArrived>:

void MqttMessageArrived(MessageData* msg)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); //toggle pin when new message arrived
 	MQTTMessage* message = msg->message;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
	memset(msgBuffer, 0, sizeof(msgBuffer));
 80008ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008be:	2100      	movs	r1, #0
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <MqttMessageArrived+0x40>)
 80008c2:	f01a fff5 	bl	801b8b0 <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6899      	ldr	r1, [r3, #8]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <MqttMessageArrived+0x40>)
 80008d2:	f01a ffdf 	bl	801b894 <memcpy>

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <MqttMessageArrived+0x40>)
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MqttMessageArrived+0x44>)
 80008e0:	f01a ffee 	bl	801b8c0 <iprintf>
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20008cb4 	.word	0x20008cb4
 80008f0:	0801cbb4 	.word	0x0801cbb4

080008f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b46      	ldr	r3, [pc, #280]	; (8000a24 <MX_GPIO_Init+0x130>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a45      	ldr	r2, [pc, #276]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	4b40      	ldr	r3, [pc, #256]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a3f      	ldr	r2, [pc, #252]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <MX_GPIO_Init+0x130>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a39      	ldr	r2, [pc, #228]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b37      	ldr	r3, [pc, #220]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a33      	ldr	r2, [pc, #204]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <MX_GPIO_Init+0x130>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a2d      	ldr	r2, [pc, #180]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a27      	ldr	r2, [pc, #156]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <MX_GPIO_Init+0x130>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a0:	4821      	ldr	r0, [pc, #132]	; (8000a28 <MX_GPIO_Init+0x134>)
 80009a2:	f002 f84b 	bl	8002a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	4820      	ldr	r0, [pc, #128]	; (8000a2c <MX_GPIO_Init+0x138>)
 80009ac:	f002 f846 	bl	8002a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_GPIO_Init+0x13c>)
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	481b      	ldr	r0, [pc, #108]	; (8000a34 <MX_GPIO_Init+0x140>)
 80009c6:	f001 fe8d 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ca:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4811      	ldr	r0, [pc, #68]	; (8000a28 <MX_GPIO_Init+0x134>)
 80009e4:	f001 fe7e 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	480b      	ldr	r0, [pc, #44]	; (8000a2c <MX_GPIO_Init+0x138>)
 8000a00:	f001 fe70 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_GPIO_Init+0x138>)
 8000a18:	f001 fe64 	bl	80026e4 <HAL_GPIO_Init>

}
 8000a1c:	bf00      	nop
 8000a1e:	3730      	adds	r7, #48	; 0x30
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40021800 	.word	0x40021800
 8000a30:	10110000 	.word	0x10110000
 8000a34:	40020800 	.word	0x40020800

08000a38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d013      	beq.n	8000a78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d00b      	beq.n	8000a78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a60:	e000      	b.n	8000a64 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0f9      	beq.n	8000a62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	e009      	b.n	8000aac <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	60ba      	str	r2, [r7, #8]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ffc9 	bl	8000a38 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf1      	blt.n	8000a98 <_write+0x12>
  }
  return len;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac4:	f000 fb57 	bl	8001176 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac8:	f000 f810 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000acc:	f7ff ff12 	bl	80008f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ad0:	f000 fa2a 	bl	8000f28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ad4:	f000 fa9c 	bl	8001010 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("Don't remove this printf to prevent hard fault.\r\n");
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <main+0x28>)
 8000ada:	f01a ff77 	bl	801b9cc <puts>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ade:	f7ff fdb9 	bl	8000654 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ae2:	f005 f893 	bl	8005c0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <main+0x26>
 8000ae8:	0801cbc8 	.word	0x0801cbc8

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0b8      	sub	sp, #224	; 0xe0
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000af6:	2234      	movs	r2, #52	; 0x34
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f01a fed8 	bl	801b8b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2290      	movs	r2, #144	; 0x90
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f01a fec9 	bl	801b8b0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b1e:	f002 f8ef 	bl	8002d00 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <SystemClock_Config+0x114>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a36      	ldr	r2, [pc, #216]	; (8000c00 <SystemClock_Config+0x114>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <SystemClock_Config+0x114>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <SystemClock_Config+0x118>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b42:	4a30      	ldr	r2, [pc, #192]	; (8000c04 <SystemClock_Config+0x118>)
 8000b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <SystemClock_Config+0x118>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b56:	2301      	movs	r3, #1
 8000b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	2302      	movs	r3, #2
 8000b66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b78:	23a8      	movs	r3, #168	; 0xa8
 8000b7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b84:	2307      	movs	r3, #7
 8000b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 f8c6 	bl	8002d20 <HAL_RCC_OscConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b9a:	f000 f855 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bc0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bc4:	2105      	movs	r1, #5
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fb58 	bl	800327c <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000bd2:	f000 f839 	bl	8000c48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <SystemClock_Config+0x11c>)
 8000bd8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 fd7b 	bl	80036e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000bf4:	f000 f828 	bl	8000c48 <Error_Handler>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	37e0      	adds	r7, #224	; 0xe0
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40007000 	.word	0x40007000
 8000c08:	00200100 	.word	0x00200100

08000c0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d101      	bne.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c1e:	f000 fab7 	bl	8001190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d104      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x2a>
      MilliTimer++;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c34:	6013      	str	r3, [r2, #0]
    }


  /* USER CODE END Callback 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40001000 	.word	0x40001000
 8000c44:	200106ac 	.word	0x200106ac

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	f06f 0001 	mvn.w	r0, #1
 8000c92:	f000 fb79 	bl	8001388 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	; 0x30
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	2036      	movs	r0, #54	; 0x36
 8000cba:	f000 fb65 	bl	8001388 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f000 fb7e 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_InitTick+0xa0>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a1e      	ldr	r2, [pc, #120]	; (8000d44 <HAL_InitTick+0xa0>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_InitTick+0xa0>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cdc:	f107 0210 	add.w	r2, r7, #16
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f002 fcca 	bl	8003680 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cec:	f002 fca0 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf8:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <HAL_InitTick+0xa4>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	0c9b      	lsrs	r3, r3, #18
 8000d00:	3b01      	subs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_InitTick+0xa8>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <HAL_InitTick+0xac>)
 8000d08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_InitTick+0xa8>)
 8000d0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_InitTick+0xa8>)
 8000d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_InitTick+0xa8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_InitTick+0xa8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d24:	4809      	ldr	r0, [pc, #36]	; (8000d4c <HAL_InitTick+0xa8>)
 8000d26:	f003 f905 	bl	8003f34 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d104      	bne.n	8000d3a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d30:	4806      	ldr	r0, [pc, #24]	; (8000d4c <HAL_InitTick+0xa8>)
 8000d32:	f003 f961 	bl	8003ff8 <HAL_TIM_Base_Start_IT>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3730      	adds	r7, #48	; 0x30
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	431bde83 	.word	0x431bde83
 8000d4c:	200098bc 	.word	0x200098bc
 8000d50:	40001000 	.word	0x40001000

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <TIM6_DAC_IRQHandler+0x10>)
 8000d86:	f003 f9af 	bl	80040e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200098bc 	.word	0x200098bc

08000d94 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <ETH_IRQHandler+0x10>)
 8000d9a:	f000 ff01 	bl	8001ba0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000b6b0 	.word	0x2000b6b0

08000da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	return 1;
 8000dac:	2301      	movs	r3, #1
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_kill>:

int _kill(int pid, int sig)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <_kill+0x20>)
 8000dc4:	2216      	movs	r2, #22
 8000dc6:	601a      	str	r2, [r3, #0]
	return -1;
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	200106a4 	.word	0x200106a4

08000ddc <_exit>:

void _exit (int status)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ffe5 	bl	8000db8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dee:	e7fe      	b.n	8000dee <_exit+0x12>

08000df0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e00a      	b.n	8000e18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e02:	f3af 8000 	nop.w
 8000e06:	4601      	mov	r1, r0
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	b2ca      	uxtb	r2, r1
 8000e10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf0      	blt.n	8000e02 <_read+0x12>
	}

return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
	return -1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
	return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_isatty>:

int _isatty(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	return 1;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d205      	bcs.n	8000ed0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <_sbrk+0x6c>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	20080000 	.word	0x20080000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	200008f4 	.word	0x200008f4
 8000efc:	200106c0 	.word	0x200106c0
 8000f00:	200106a4 	.word	0x200106a4

08000f04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <MX_USART3_UART_Init+0x5c>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_USART3_UART_Init+0x58>)
 8000f6c:	f003 fac2 	bl	80044f4 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f76:	f7ff fe67 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20009908 	.word	0x20009908
 8000f84:	40004800 	.word	0x40004800

08000f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a17      	ldr	r2, [pc, #92]	; (8001004 <HAL_UART_MspInit+0x7c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d128      	bne.n	8000ffc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_UART_MspInit+0x80>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a16      	ldr	r2, [pc, #88]	; (8001008 <HAL_UART_MspInit+0x80>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_UART_MspInit+0x80>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_UART_MspInit+0x80>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <HAL_UART_MspInit+0x80>)
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_UART_MspInit+0x80>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fec:	2307      	movs	r3, #7
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <HAL_UART_MspInit+0x84>)
 8000ff8:	f001 fb74 	bl	80026e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40004800 	.word	0x40004800
 8001008:	40023800 	.word	0x40023800
 800100c:	40020c00 	.word	0x40020c00

08001010 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800101a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101e:	2206      	movs	r2, #6
 8001020:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001024:	2202      	movs	r2, #2
 8001026:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001030:	2202      	movs	r2, #2
 8001032:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001036:	2201      	movs	r2, #1
 8001038:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001048:	2201      	movs	r2, #1
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001054:	f001 fd0b 	bl	8002a6e <HAL_PCD_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800105e:	f7ff fdf3 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000998c 	.word	0x2000998c

0800106c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800108c:	d141      	bne.n	8001112 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_PCD_MspInit+0xb0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a22      	ldr	r2, [pc, #136]	; (800111c <HAL_PCD_MspInit+0xb0>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_PCD_MspInit+0xb0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010a6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010b8:	230a      	movs	r3, #10
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4817      	ldr	r0, [pc, #92]	; (8001120 <HAL_PCD_MspInit+0xb4>)
 80010c4:	f001 fb0e 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4810      	ldr	r0, [pc, #64]	; (8001120 <HAL_PCD_MspInit+0xb4>)
 80010de:	f001 fb01 	bl	80026e4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_PCD_MspInit+0xb0>)
 80010e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e6:	4a0d      	ldr	r2, [pc, #52]	; (800111c <HAL_PCD_MspInit+0xb0>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6353      	str	r3, [r2, #52]	; 0x34
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_PCD_MspInit+0xb0>)
 80010f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_PCD_MspInit+0xb0>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_PCD_MspInit+0xb0>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_PCD_MspInit+0xb0>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001140:	4c0b      	ldr	r4, [pc, #44]	; (8001170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800114e:	f7ff fed9 	bl	8000f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f01a fb6d 	bl	801b830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fcb3 	bl	8000ac0 <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001168:	08020db8 	.word	0x08020db8
  ldr r2, =_sbss
 800116c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001170:	200106bc 	.word	0x200106bc

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>

08001176 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117a:	2003      	movs	r0, #3
 800117c:	f000 f8f9 	bl	8001372 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fd8f 	bl	8000ca4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fd65 	bl	8000c54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20009d90 	.word	0x20009d90

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20009d90 	.word	0x20009d90

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <__NVIC_SetPriorityGrouping>:
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <__NVIC_SetPriorityGrouping+0x40>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	4313      	orrs	r3, r2
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <__NVIC_SetPriorityGrouping+0x40>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00
 800125c:	05fa0000 	.word	0x05fa0000

08001260 <__NVIC_GetPriorityGrouping>:
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <__NVIC_EnableIRQ+0x38>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff4c 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139a:	f7ff ff61 	bl	8001260 <__NVIC_GetPriorityGrouping>
 800139e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	6978      	ldr	r0, [r7, #20]
 80013a6:	f7ff ffb1 	bl	800130c <NVIC_EncodePriority>
 80013aa:	4602      	mov	r2, r0
 80013ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff80 	bl	80012b8 <__NVIC_SetPriority>
}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff54 	bl	800127c <__NVIC_EnableIRQ>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80013ec:	4ba9      	ldr	r3, [pc, #676]	; (8001694 <HAL_ETH_Init+0x2b8>)
 80013ee:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e181      	b.n	8001706 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f003 ffac 	bl	8005374 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	4b9e      	ldr	r3, [pc, #632]	; (8001698 <HAL_ETH_Init+0x2bc>)
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	4a9d      	ldr	r2, [pc, #628]	; (8001698 <HAL_ETH_Init+0x2bc>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001426:	6453      	str	r3, [r2, #68]	; 0x44
 8001428:	4b9b      	ldr	r3, [pc, #620]	; (8001698 <HAL_ETH_Init+0x2bc>)
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001434:	4b99      	ldr	r3, [pc, #612]	; (800169c <HAL_ETH_Init+0x2c0>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a98      	ldr	r2, [pc, #608]	; (800169c <HAL_ETH_Init+0x2c0>)
 800143a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800143e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001440:	4b96      	ldr	r3, [pc, #600]	; (800169c <HAL_ETH_Init+0x2c0>)
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4994      	ldr	r1, [pc, #592]	; (800169c <HAL_ETH_Init+0x2c0>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001464:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001466:	f7ff fea7 	bl	80011b8 <HAL_GetTick>
 800146a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800146c:	e011      	b.n	8001492 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800146e:	f7ff fea3 	bl	80011b8 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800147c:	d909      	bls.n	8001492 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2203      	movs	r2, #3
 8001482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e139      	b.n	8001706 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1e4      	bne.n	800146e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f023 031c 	bic.w	r3, r3, #28
 80014b2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014b4:	f002 f8b0 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 80014b8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	4a78      	ldr	r2, [pc, #480]	; (80016a0 <HAL_ETH_Init+0x2c4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d908      	bls.n	80014d4 <HAL_ETH_Init+0xf8>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4a77      	ldr	r2, [pc, #476]	; (80016a4 <HAL_ETH_Init+0x2c8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d804      	bhi.n	80014d4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	e027      	b.n	8001524 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	4a73      	ldr	r2, [pc, #460]	; (80016a4 <HAL_ETH_Init+0x2c8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d908      	bls.n	80014ee <HAL_ETH_Init+0x112>
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4a6d      	ldr	r2, [pc, #436]	; (8001694 <HAL_ETH_Init+0x2b8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d204      	bcs.n	80014ee <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f043 030c 	orr.w	r3, r3, #12
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	e01a      	b.n	8001524 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4a68      	ldr	r2, [pc, #416]	; (8001694 <HAL_ETH_Init+0x2b8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d303      	bcc.n	80014fe <HAL_ETH_Init+0x122>
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4a6b      	ldr	r2, [pc, #428]	; (80016a8 <HAL_ETH_Init+0x2cc>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d911      	bls.n	8001522 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4a69      	ldr	r2, [pc, #420]	; (80016a8 <HAL_ETH_Init+0x2cc>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d908      	bls.n	8001518 <HAL_ETH_Init+0x13c>
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4a68      	ldr	r2, [pc, #416]	; (80016ac <HAL_ETH_Init+0x2d0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d804      	bhi.n	8001518 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e005      	b.n	8001524 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	e000      	b.n	8001524 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001522:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800152c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001530:	2100      	movs	r1, #0
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 fc17 	bl	8001d66 <HAL_ETH_WritePHYRegister>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001542:	6939      	ldr	r1, [r7, #16]
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 fdcd 	bl	80020e4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0d7      	b.n	8001706 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001556:	20ff      	movs	r0, #255	; 0xff
 8001558:	f7ff fe3a 	bl	80011d0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80a5 	beq.w	80016b0 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001566:	f7ff fe27 	bl	80011b8 <HAL_GetTick>
 800156a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	461a      	mov	r2, r3
 8001572:	2101      	movs	r1, #1
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fb8e 	bl	8001c96 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800157a:	f7ff fe1d 	bl	80011b8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d90f      	bls.n	80015ac <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 fda6 	bl	80020e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0ac      	b.n	8001706 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0da      	beq.n	800156c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ba:	2100      	movs	r1, #0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fbd2 	bl	8001d66 <HAL_ETH_WritePHYRegister>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00b      	beq.n	80015e0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015cc:	6939      	ldr	r1, [r7, #16]
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fd88 	bl	80020e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015dc:	2301      	movs	r3, #1
 80015de:	e092      	b.n	8001706 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80015e0:	f7ff fdea 	bl	80011b8 <HAL_GetTick>
 80015e4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	461a      	mov	r2, r3
 80015ec:	2101      	movs	r1, #1
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fb51 	bl	8001c96 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015f4:	f7ff fde0 	bl	80011b8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d90f      	bls.n	8001626 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800160a:	6939      	ldr	r1, [r7, #16]
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fd69 	bl	80020e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e06f      	b.n	8001706 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0da      	beq.n	80015e6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	461a      	mov	r2, r3
 8001636:	2110      	movs	r1, #16
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fb2c 	bl	8001c96 <HAL_ETH_ReadPHYRegister>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00b      	beq.n	800165c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001648:	6939      	ldr	r1, [r7, #16]
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fd4a 	bl	80020e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001658:	2301      	movs	r3, #1
 800165a:	e054      	b.n	8001706 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b00      	cmp	r3, #0
 8001664:	d004      	beq.n	8001670 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	e002      	b.n	8001676 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	e035      	b.n	80016f4 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	e030      	b.n	80016f4 <HAL_ETH_Init+0x318>
 8001692:	bf00      	nop
 8001694:	03938700 	.word	0x03938700
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800
 80016a0:	01312cff 	.word	0x01312cff
 80016a4:	02160ebf 	.word	0x02160ebf
 80016a8:	05f5e0ff 	.word	0x05f5e0ff
 80016ac:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fb4c 	bl	8001d66 <HAL_ETH_WritePHYRegister>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016d8:	6939      	ldr	r1, [r7, #16]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fd02 	bl	80020e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e00c      	b.n	8001706 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016ec:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016f0:	f7ff fd6e 	bl	80011d0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016f4:	6939      	ldr	r1, [r7, #16]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fcf4 	bl	80020e4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop

08001710 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_ETH_DMATxDescListInit+0x20>
 800172c:	2302      	movs	r3, #2
 800172e:	e052      	b.n	80017d6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e030      	b.n	80017ae <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	4413      	add	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800175c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001764:	fb02 f303 	mul.w	r3, r2, r3
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	461a      	mov	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d105      	bne.n	8001786 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	429a      	cmp	r2, r3
 800178e:	d208      	bcs.n	80017a2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	015b      	lsls	r3, r3, #5
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	4413      	add	r3, r2
 800179a:	461a      	mov	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	e002      	b.n	80017a8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3ca      	bcc.n	800174c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f241 0310 	movw	r3, #4112	; 0x1010
 80017c0:	440b      	add	r3, r1
 80017c2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b087      	sub	sp, #28
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_ETH_DMARxDescListInit+0x20>
 80017fe:	2302      	movs	r3, #2
 8001800:	e056      	b.n	80018b0 <HAL_ETH_DMARxDescListInit+0xce>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2202      	movs	r2, #2
 800180e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	e034      	b.n	8001888 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	015b      	lsls	r3, r3, #5
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	4413      	add	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800182e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001836:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	461a      	mov	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	3b01      	subs	r3, #1
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	429a      	cmp	r2, r3
 8001868:	d208      	bcs.n	800187c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	015b      	lsls	r3, r3, #5
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	4413      	add	r3, r2
 8001874:	461a      	mov	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	e002      	b.n	8001882 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3c6      	bcc.n	800181e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	f241 030c 	movw	r3, #4108	; 0x100c
 800189a:	440b      	add	r3, r1
 800189c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ETH_TransmitFrame+0x24>
 80018dc:	2302      	movs	r3, #2
 80018de:	e0cd      	b.n	8001a7c <HAL_ETH_TransmitFrame+0x1c0>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001906:	2301      	movs	r3, #1
 8001908:	e0b8      	b.n	8001a7c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	da09      	bge.n	8001928 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2212      	movs	r2, #18
 8001918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0a9      	b.n	8001a7c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800192e:	4293      	cmp	r3, r2
 8001930:	d915      	bls.n	800195e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	4a54      	ldr	r2, [pc, #336]	; (8001a88 <HAL_ETH_TransmitFrame+0x1cc>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0a9b      	lsrs	r3, r3, #10
 800193c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <HAL_ETH_TransmitFrame+0x1cc>)
 8001942:	fba3 1302 	umull	r1, r3, r3, r2
 8001946:	0a9b      	lsrs	r3, r3, #10
 8001948:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e001      	b.n	8001962 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800195e:	2301      	movs	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d11c      	bne.n	80019a2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001976:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001982:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001992:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
 80019a0:	e04b      	b.n	8001a3a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e044      	b.n	8001a32 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d107      	bne.n	80019ce <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019cc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019d6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3b01      	subs	r3, #1
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d116      	bne.n	8001a10 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019f0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4a25      	ldr	r2, [pc, #148]	; (8001a8c <HAL_ETH_TransmitFrame+0x1d0>)
 80019f6:	fb02 f203 	mul.w	r2, r2, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a02:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a0e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a1e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	461a      	mov	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d3b6      	bcc.n	80019a8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a42:	4413      	add	r3, r2
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00d      	beq.n	8001a6a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a56:	4413      	add	r3, r2
 8001a58:	2204      	movs	r2, #4
 8001a5a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a64:	4413      	add	r3, r2
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	ac02b00b 	.word	0xac02b00b
 8001a8c:	fffffa0c 	.word	0xfffffa0c

08001a90 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e074      	b.n	8001b94 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001aba:	e05a      	b.n	8001b72 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad0:	d10d      	bne.n	8001aee <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
 8001aec:	e041      	b.n	8001b72 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10b      	bne.n	8001b14 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
 8001b12:	e02e      	b.n	8001b72 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d103      	bne.n	8001b36 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b42:	1f1a      	subs	r2, r3, #4
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e010      	b.n	8001b94 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db02      	blt.n	8001b82 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d99c      	bls.n	8001abc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bb0:	4413      	add	r3, r2
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb8:	2b40      	cmp	r3, #64	; 0x40
 8001bba:	d112      	bne.n	8001be2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f003 fc99 	bl	80054f4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bca:	4413      	add	r3, r2
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001be0:	e01b      	b.n	8001c1a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bea:	4413      	add	r3, r2
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d111      	bne.n	8001c1a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f839 	bl	8001c6e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c04:	4413      	add	r3, r2
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c22:	4413      	add	r3, r2
 8001c24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c28:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c32:	4413      	add	r3, r2
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3e:	d112      	bne.n	8001c66 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f81e 	bl	8001c82 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c4e:	4413      	add	r3, r2
 8001c50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c54:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b82      	cmp	r3, #130	; 0x82
 8001cb6:	d101      	bne.n	8001cbc <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e050      	b.n	8001d5e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2282      	movs	r2, #130	; 0x82
 8001cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 031c 	and.w	r3, r3, #28
 8001cd2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8a1b      	ldrh	r3, [r3, #16]
 8001cd8:	02db      	lsls	r3, r3, #11
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ce2:	897b      	ldrh	r3, [r7, #10]
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f023 0302 	bic.w	r3, r3, #2
 8001cf6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d08:	f7ff fa56 	bl	80011b8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d0e:	e015      	b.n	8001d3c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d10:	f7ff fa52 	bl	80011b8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1e:	d309      	bcc.n	8001d34 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e014      	b.n	8001d5e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1e4      	bne.n	8001d10 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b42      	cmp	r3, #66	; 0x42
 8001d86:	d101      	bne.n	8001d8c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e04e      	b.n	8001e2a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2242      	movs	r2, #66	; 0x42
 8001d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 031c 	and.w	r3, r3, #28
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8a1b      	ldrh	r3, [r3, #16]
 8001da8:	02db      	lsls	r3, r3, #11
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001de2:	f7ff f9e9 	bl	80011b8 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001de8:	e015      	b.n	8001e16 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001dea:	f7ff f9e5 	bl	80011b8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d309      	bcc.n	8001e0e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e00d      	b.n	8001e2a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e4      	bne.n	8001dea <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_ETH_Start+0x16>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e01f      	b.n	8001e88 <HAL_ETH_Start+0x56>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fb45 	bl	80024e8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fb7c 	bl	800255c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fc13 	bl	8002690 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fbb0 	bl	80025d0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fbdd 	bl	8002630 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ETH_Stop+0x16>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e01f      	b.n	8001ee6 <HAL_ETH_Stop+0x56>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fba2 	bl	8002600 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fbcf 	bl	8002660 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fb67 	bl	8002596 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fbe1 	bl	8002690 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fb27 	bl	8002522 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_ETH_ConfigMAC+0x1c>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e0e4      	b.n	80020d6 <HAL_ETH_ConfigMAC+0x1e6>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80b1 	beq.w	8002086 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4b6c      	ldr	r3, [pc, #432]	; (80020e0 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f3c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f42:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f48:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f4e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f54:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f5a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f60:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f66:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001f6c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001f72:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001f78:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001f7e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7ff f91a 	bl	80011d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fac:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001fb2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001fb8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001fbe:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001fc4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001fca:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001fd6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fd8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f7ff f8f4 	bl	80011d0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ff8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002002:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002012:	4013      	ands	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002020:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002026:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800202c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002032:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002038:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff f8bd 	bl	80011d0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002076:	2001      	movs	r0, #1
 8002078:	f7ff f8aa 	bl	80011d0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	61da      	str	r2, [r3, #28]
 8002084:	e01e      	b.n	80020c4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002094:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7ff f88a 	bl	80011d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	ff20810f 	.word	0xff20810f

080020e4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b0b0      	sub	sp, #192	; 0xc0
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002100:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002108:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002112:	2300      	movs	r3, #0
 8002114:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800212a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212e:	663b      	str	r3, [r7, #96]	; 0x60
 8002130:	e001      	b.n	8002136 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800213a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002140:	2300      	movs	r3, #0
 8002142:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002150:	2340      	movs	r3, #64	; 0x40
 8002152:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800217e:	2300      	movs	r3, #0
 8002180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80021b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021bc:	4bab      	ldr	r3, [pc, #684]	; (800246c <ETH_MACDMAConfig+0x388>)
 80021be:	4013      	ands	r3, r2
 80021c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80021c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021c8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80021ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80021cc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80021ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80021d0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80021d6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80021d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80021da:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80021dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80021de:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80021e4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80021e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80021e8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80021ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80021ec:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80021ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021f0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021f4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80021f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002218:	2001      	movs	r0, #1
 800221a:	f7fe ffd9 	bl	80011d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002226:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002228:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800222a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800222c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800222e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002230:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002232:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002236:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800223c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800223e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002242:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002248:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800224c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002254:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002256:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002262:	2001      	movs	r0, #1
 8002264:	f7fe ffb4 	bl	80011d0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002270:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800227a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002284:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002294:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002298:	4013      	ands	r3, r2
 800229a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800229e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022a8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022ae:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022b4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022ba:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80022bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80022c0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7fe ff75 	bl	80011d0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ee:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022f0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800230a:	2001      	movs	r0, #1
 800230c:	f7fe ff60 	bl	80011d0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002318:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800231e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002322:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002328:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800232c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800233e:	2304      	movs	r3, #4
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800234e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002358:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800235e:	2300      	movs	r3, #0
 8002360:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002362:	2300      	movs	r3, #0
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	f241 0318 	movw	r3, #4120	; 0x1018
 800236e:	4413      	add	r3, r2
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002376:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <ETH_MACDMAConfig+0x38c>)
 800237c:	4013      	ands	r3, r2
 800237e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002382:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002384:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002386:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002388:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800238a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800238c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800238e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002390:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002392:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002394:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002396:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002398:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800239a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800239e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023a2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	f241 0318 	movw	r3, #4120	; 0x1018
 80023b6:	4413      	add	r3, r2
 80023b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023bc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f241 0318 	movw	r3, #4120	; 0x1018
 80023c6:	4413      	add	r3, r2
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7fe fefe 	bl	80011d0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80023dc:	4413      	add	r3, r2
 80023de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023e8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80023ec:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023f0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80023f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023f4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80023f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80023fa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80023fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80023fe:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800241c:	2001      	movs	r0, #1
 800241e:	f7fe fed7 	bl	80011d0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800242e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10d      	bne.n	8002454 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002440:	4413      	add	r3, r2
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6811      	ldr	r1, [r2, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <ETH_MACDMAConfig+0x390>)
 800244a:	431a      	orrs	r2, r3
 800244c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002450:	440b      	add	r3, r1
 8002452:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	461a      	mov	r2, r3
 800245a:	2100      	movs	r1, #0
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f80b 	bl	8002478 <ETH_MACAddressConfig>
}
 8002462:	bf00      	nop
 8002464:	37c0      	adds	r7, #192	; 0xc0
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	ff20810f 	.word	0xff20810f
 8002470:	f8de3f23 	.word	0xf8de3f23
 8002474:	00010040 	.word	0x00010040

08002478 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3305      	adds	r3, #5
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	3204      	adds	r2, #4
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <ETH_MACAddressConfig+0x68>)
 800249a:	4413      	add	r3, r2
 800249c:	461a      	mov	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3303      	adds	r3, #3
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	061a      	lsls	r2, r3, #24
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3302      	adds	r3, #2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3301      	adds	r3, #1
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	4313      	orrs	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <ETH_MACAddressConfig+0x6c>)
 80024ca:	4413      	add	r3, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	6013      	str	r3, [r2, #0]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40028040 	.word	0x40028040
 80024e4:	40028044 	.word	0x40028044

080024e8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0208 	orr.w	r2, r2, #8
 8002502:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800250c:	2001      	movs	r0, #1
 800250e:	f7fe fe5f 	bl	80011d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	601a      	str	r2, [r3, #0]
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0208 	bic.w	r2, r2, #8
 800253c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002546:	2001      	movs	r0, #1
 8002548:	f7fe fe42 	bl	80011d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	601a      	str	r2, [r3, #0]
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0204 	orr.w	r2, r2, #4
 8002576:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002580:	2001      	movs	r0, #1
 8002582:	f7fe fe25 	bl	80011d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0204 	bic.w	r2, r2, #4
 80025b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7fe fe08 	bl	80011d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	601a      	str	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80025e0:	4413      	add	r3, r2
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6811      	ldr	r1, [r2, #0]
 80025e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80025f0:	440b      	add	r3, r1
 80025f2:	601a      	str	r2, [r3, #0]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002610:	4413      	add	r3, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6811      	ldr	r1, [r2, #0]
 8002618:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800261c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002620:	440b      	add	r3, r1
 8002622:	601a      	str	r2, [r3, #0]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002640:	4413      	add	r3, r2
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6811      	ldr	r1, [r2, #0]
 8002648:	f043 0202 	orr.w	r2, r3, #2
 800264c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002650:	440b      	add	r3, r1
 8002652:	601a      	str	r2, [r3, #0]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002670:	4413      	add	r3, r2
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6811      	ldr	r1, [r2, #0]
 8002678:	f023 0202 	bic.w	r2, r3, #2
 800267c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002680:	440b      	add	r3, r1
 8002682:	601a      	str	r2, [r3, #0]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80026a4:	4413      	add	r3, r2
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6811      	ldr	r1, [r2, #0]
 80026ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80026b4:	440b      	add	r3, r1
 80026b6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80026c0:	4413      	add	r3, r2
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7fe fd82 	bl	80011d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	f241 0318 	movw	r3, #4120	; 0x1018
 80026d6:	440b      	add	r3, r1
 80026d8:	601a      	str	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e175      	b.n	80029f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002704:	2201      	movs	r2, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	429a      	cmp	r2, r3
 800271e:	f040 8164 	bne.w	80029ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d00b      	beq.n	8002742 <HAL_GPIO_Init+0x5e>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d007      	beq.n	8002742 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002736:	2b11      	cmp	r3, #17
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b12      	cmp	r3, #18
 8002740:	d130      	bne.n	80027a4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002778:	2201      	movs	r2, #1
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 0201 	and.w	r2, r3, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x100>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b12      	cmp	r3, #18
 80027e2:	d123      	bne.n	800282c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	08da      	lsrs	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3208      	adds	r2, #8
 80027ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	220f      	movs	r2, #15
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	08da      	lsrs	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3208      	adds	r2, #8
 8002826:	69b9      	ldr	r1, [r7, #24]
 8002828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0203 	and.w	r2, r3, #3
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80be 	beq.w	80029ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <HAL_GPIO_Init+0x324>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a65      	ldr	r2, [pc, #404]	; (8002a08 <HAL_GPIO_Init+0x324>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b63      	ldr	r3, [pc, #396]	; (8002a08 <HAL_GPIO_Init+0x324>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002886:	4a61      	ldr	r2, [pc, #388]	; (8002a0c <HAL_GPIO_Init+0x328>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <HAL_GPIO_Init+0x32c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d037      	beq.n	8002922 <HAL_GPIO_Init+0x23e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a57      	ldr	r2, [pc, #348]	; (8002a14 <HAL_GPIO_Init+0x330>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d031      	beq.n	800291e <HAL_GPIO_Init+0x23a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a56      	ldr	r2, [pc, #344]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d02b      	beq.n	800291a <HAL_GPIO_Init+0x236>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a55      	ldr	r2, [pc, #340]	; (8002a1c <HAL_GPIO_Init+0x338>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d025      	beq.n	8002916 <HAL_GPIO_Init+0x232>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a54      	ldr	r2, [pc, #336]	; (8002a20 <HAL_GPIO_Init+0x33c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d01f      	beq.n	8002912 <HAL_GPIO_Init+0x22e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a53      	ldr	r2, [pc, #332]	; (8002a24 <HAL_GPIO_Init+0x340>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d019      	beq.n	800290e <HAL_GPIO_Init+0x22a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_GPIO_Init+0x344>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_GPIO_Init+0x226>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a51      	ldr	r2, [pc, #324]	; (8002a2c <HAL_GPIO_Init+0x348>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00d      	beq.n	8002906 <HAL_GPIO_Init+0x222>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a50      	ldr	r2, [pc, #320]	; (8002a30 <HAL_GPIO_Init+0x34c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <HAL_GPIO_Init+0x21e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4f      	ldr	r2, [pc, #316]	; (8002a34 <HAL_GPIO_Init+0x350>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d101      	bne.n	80028fe <HAL_GPIO_Init+0x21a>
 80028fa:	2309      	movs	r3, #9
 80028fc:	e012      	b.n	8002924 <HAL_GPIO_Init+0x240>
 80028fe:	230a      	movs	r3, #10
 8002900:	e010      	b.n	8002924 <HAL_GPIO_Init+0x240>
 8002902:	2308      	movs	r3, #8
 8002904:	e00e      	b.n	8002924 <HAL_GPIO_Init+0x240>
 8002906:	2307      	movs	r3, #7
 8002908:	e00c      	b.n	8002924 <HAL_GPIO_Init+0x240>
 800290a:	2306      	movs	r3, #6
 800290c:	e00a      	b.n	8002924 <HAL_GPIO_Init+0x240>
 800290e:	2305      	movs	r3, #5
 8002910:	e008      	b.n	8002924 <HAL_GPIO_Init+0x240>
 8002912:	2304      	movs	r3, #4
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x240>
 8002916:	2303      	movs	r3, #3
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x240>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x240>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x240>
 8002922:	2300      	movs	r3, #0
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002934:	4935      	ldr	r1, [pc, #212]	; (8002a0c <HAL_GPIO_Init+0x328>)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002942:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_GPIO_Init+0x354>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002966:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <HAL_GPIO_Init+0x354>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800296c:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <HAL_GPIO_Init+0x354>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002990:	4a29      	ldr	r2, [pc, #164]	; (8002a38 <HAL_GPIO_Init+0x354>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002996:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <HAL_GPIO_Init+0x354>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_GPIO_Init+0x354>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <HAL_GPIO_Init+0x354>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_GPIO_Init+0x354>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	f67f ae86 	bls.w	8002704 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40013800 	.word	0x40013800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40020800 	.word	0x40020800
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40021400 	.word	0x40021400
 8002a28:	40021800 	.word	0x40021800
 8002a2c:	40021c00 	.word	0x40021c00
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40022400 	.word	0x40022400
 8002a38:	40013c00 	.word	0x40013c00

08002a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a4c:	787b      	ldrb	r3, [r7, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a58:	e003      	b.n	8002a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	041a      	lsls	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	619a      	str	r2, [r3, #24]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a70:	b08f      	sub	sp, #60	; 0x3c
 8002a72:	af0a      	add	r7, sp, #40	; 0x28
 8002a74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e116      	b.n	8002cae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fae6 	bl	800106c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 f988 	bl	8004dd4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	687e      	ldr	r6, [r7, #4]
 8002acc:	466d      	mov	r5, sp
 8002ace:	f106 0410 	add.w	r4, r6, #16
 8002ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ada:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ade:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae2:	1d33      	adds	r3, r6, #4
 8002ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae6:	6838      	ldr	r0, [r7, #0]
 8002ae8:	f002 f91c 	bl	8004d24 <USB_CoreInit>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0d7      	b.n	8002cae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f002 f976 	bl	8004df6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	e04a      	b.n	8002ba6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	333d      	adds	r3, #61	; 0x3d
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	333c      	adds	r3, #60	; 0x3c
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	b298      	uxth	r0, r3
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3342      	adds	r3, #66	; 0x42
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	333f      	adds	r3, #63	; 0x3f
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3344      	adds	r3, #68	; 0x44
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	3348      	adds	r3, #72	; 0x48
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	3350      	adds	r3, #80	; 0x50
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3af      	bcc.n	8002b10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e044      	b.n	8002c40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3b5      	bcc.n	8002bb6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	687e      	ldr	r6, [r7, #4]
 8002c52:	466d      	mov	r5, sp
 8002c54:	f106 0410 	add.w	r4, r6, #16
 8002c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c64:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c68:	1d33      	adds	r3, r6, #4
 8002c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6c:	6838      	ldr	r0, [r7, #0]
 8002c6e:	f002 f8ed 	bl	8004e4c <USB_DevInit>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e014      	b.n	8002cae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f80b 	bl	8002cb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 fa9f 	bl	80051ea <USB_DevDisconnect>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002cb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_PCDEx_ActivateLPM+0x44>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	10000003 	.word	0x10000003

08002d00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40007000 	.word	0x40007000

08002d20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e29b      	b.n	800326e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 8087 	beq.w	8002e52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d44:	4b96      	ldr	r3, [pc, #600]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d00c      	beq.n	8002d6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d50:	4b93      	ldr	r3, [pc, #588]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d112      	bne.n	8002d82 <HAL_RCC_OscConfig+0x62>
 8002d5c:	4b90      	ldr	r3, [pc, #576]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d68:	d10b      	bne.n	8002d82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6a:	4b8d      	ldr	r3, [pc, #564]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d06c      	beq.n	8002e50 <HAL_RCC_OscConfig+0x130>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d168      	bne.n	8002e50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e275      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCC_OscConfig+0x7a>
 8002d8c:	4b84      	ldr	r3, [pc, #528]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a83      	ldr	r2, [pc, #524]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e02e      	b.n	8002df8 <HAL_RCC_OscConfig+0xd8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x9c>
 8002da2:	4b7f      	ldr	r3, [pc, #508]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a7e      	ldr	r2, [pc, #504]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b7c      	ldr	r3, [pc, #496]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a7b      	ldr	r2, [pc, #492]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e01d      	b.n	8002df8 <HAL_RCC_OscConfig+0xd8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0xc0>
 8002dc6:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a75      	ldr	r2, [pc, #468]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a72      	ldr	r2, [pc, #456]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0xd8>
 8002de0:	4b6f      	ldr	r3, [pc, #444]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a6e      	ldr	r2, [pc, #440]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b6c      	ldr	r3, [pc, #432]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6b      	ldr	r2, [pc, #428]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d013      	beq.n	8002e28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe f9da 	bl	80011b8 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe f9d6 	bl	80011b8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e229      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0xe8>
 8002e26:	e014      	b.n	8002e52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f9c6 	bl	80011b8 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe f9c2 	bl	80011b8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e215      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	4b57      	ldr	r3, [pc, #348]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x110>
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d069      	beq.n	8002f32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e5e:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6a:	4b4d      	ldr	r3, [pc, #308]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d11c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x190>
 8002e76:	4b4a      	ldr	r3, [pc, #296]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d116      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e82:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <HAL_RCC_OscConfig+0x17a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e1e9      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9a:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	493d      	ldr	r1, [pc, #244]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	e040      	b.n	8002f32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d023      	beq.n	8002f00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb8:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a38      	ldr	r2, [pc, #224]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f978 	bl	80011b8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ecc:	f7fe f974 	bl	80011b8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1c7      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ede:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eea:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4929      	ldr	r1, [pc, #164]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
 8002efe:	e018      	b.n	8002f32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a26      	ldr	r2, [pc, #152]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe f954 	bl	80011b8 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f14:	f7fe f950 	bl	80011b8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1a3      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d038      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d019      	beq.n	8002f7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4a:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f52:	f7fe f931 	bl	80011b8 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5a:	f7fe f92d 	bl	80011b8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e180      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x23a>
 8002f78:	e01a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <HAL_RCC_OscConfig+0x280>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe f917 	bl	80011b8 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7fe f913 	bl	80011b8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d903      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e166      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
 8002fa0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	4b92      	ldr	r3, [pc, #584]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ee      	bne.n	8002f8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80a4 	beq.w	8003106 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fbe:	4b8c      	ldr	r3, [pc, #560]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	4b89      	ldr	r3, [pc, #548]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a88      	ldr	r2, [pc, #544]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd6:	4b86      	ldr	r3, [pc, #536]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe6:	4b83      	ldr	r3, [pc, #524]	; (80031f4 <HAL_RCC_OscConfig+0x4d4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d118      	bne.n	8003024 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ff2:	4b80      	ldr	r3, [pc, #512]	; (80031f4 <HAL_RCC_OscConfig+0x4d4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7f      	ldr	r2, [pc, #508]	; (80031f4 <HAL_RCC_OscConfig+0x4d4>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe f8db 	bl	80011b8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003006:	f7fe f8d7 	bl	80011b8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b64      	cmp	r3, #100	; 0x64
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e12a      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003018:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <HAL_RCC_OscConfig+0x4d4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x31a>
 800302c:	4b70      	ldr	r3, [pc, #448]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a6f      	ldr	r2, [pc, #444]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
 8003038:	e02d      	b.n	8003096 <HAL_RCC_OscConfig+0x376>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x33c>
 8003042:	4b6b      	ldr	r3, [pc, #428]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	4a6a      	ldr	r2, [pc, #424]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6713      	str	r3, [r2, #112]	; 0x70
 800304e:	4b68      	ldr	r3, [pc, #416]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a67      	ldr	r2, [pc, #412]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
 800305a:	e01c      	b.n	8003096 <HAL_RCC_OscConfig+0x376>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b05      	cmp	r3, #5
 8003062:	d10c      	bne.n	800307e <HAL_RCC_OscConfig+0x35e>
 8003064:	4b62      	ldr	r3, [pc, #392]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a61      	ldr	r2, [pc, #388]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
 8003070:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a5e      	ldr	r2, [pc, #376]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
 800307c:	e00b      	b.n	8003096 <HAL_RCC_OscConfig+0x376>
 800307e:	4b5c      	ldr	r3, [pc, #368]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a5b      	ldr	r2, [pc, #364]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
 800308a:	4b59      	ldr	r3, [pc, #356]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a58      	ldr	r2, [pc, #352]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003090:	f023 0304 	bic.w	r3, r3, #4
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d015      	beq.n	80030ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309e:	f7fe f88b 	bl	80011b8 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe f887 	bl	80011b8 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e0d8      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030bc:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ee      	beq.n	80030a6 <HAL_RCC_OscConfig+0x386>
 80030c8:	e014      	b.n	80030f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe f875 	bl	80011b8 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe f871 	bl	80011b8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0c2      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e8:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ee      	bne.n	80030d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d105      	bne.n	8003106 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fa:	4b3d      	ldr	r3, [pc, #244]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a3c      	ldr	r2, [pc, #240]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80ae 	beq.w	800326c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003110:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b08      	cmp	r3, #8
 800311a:	d06d      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d14b      	bne.n	80031bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003124:	4b32      	ldr	r3, [pc, #200]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a31      	ldr	r2, [pc, #196]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 800312a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe f842 	bl	80011b8 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe f83e 	bl	80011b8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e091      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	3b01      	subs	r3, #1
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	071b      	lsls	r3, r3, #28
 8003182:	491b      	ldr	r1, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 800318e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe f810 	bl	80011b8 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7fe f80c 	bl	80011b8 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e05f      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x47c>
 80031ba:	e057      	b.n	800326c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 80031c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fd fff6 	bl	80011b8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fd fff2 	bl	80011b8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e045      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <HAL_RCC_OscConfig+0x4d0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4b0>
 80031ee:	e03d      	b.n	800326c <HAL_RCC_OscConfig+0x54c>
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031f8:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <HAL_RCC_OscConfig+0x558>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d030      	beq.n	8003268 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d129      	bne.n	8003268 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d122      	bne.n	8003268 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800322e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003230:	4293      	cmp	r3, r2
 8003232:	d119      	bne.n	8003268 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	3b01      	subs	r3, #1
 8003242:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d10f      	bne.n	8003268 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d107      	bne.n	8003268 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800

0800327c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0d0      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003294:	4b6a      	ldr	r3, [pc, #424]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d910      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b67      	ldr	r3, [pc, #412]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 020f 	bic.w	r2, r3, #15
 80032aa:	4965      	ldr	r1, [pc, #404]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0b8      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032dc:	4b59      	ldr	r3, [pc, #356]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 80032e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	494d      	ldr	r1, [pc, #308]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d040      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d115      	bne.n	800335e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07f      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e073      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06b      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335e:	4b39      	ldr	r3, [pc, #228]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4936      	ldr	r1, [pc, #216]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	4313      	orrs	r3, r2
 800336e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003370:	f7fd ff22 	bl	80011b8 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fd ff1e 	bl	80011b8 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e053      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 020c 	and.w	r2, r3, #12
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	429a      	cmp	r2, r3
 800339e:	d1eb      	bne.n	8003378 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a0:	4b27      	ldr	r3, [pc, #156]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d210      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 020f 	bic.w	r2, r3, #15
 80033b6:	4922      	ldr	r1, [pc, #136]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e032      	b.n	8003436 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4916      	ldr	r1, [pc, #88]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	490e      	ldr	r1, [pc, #56]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800340e:	f000 f821 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8003412:	4602      	mov	r2, r0
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	490a      	ldr	r1, [pc, #40]	; (8003448 <HAL_RCC_ClockConfig+0x1cc>)
 8003420:	5ccb      	ldrb	r3, [r1, r3]
 8003422:	fa22 f303 	lsr.w	r3, r2, r3
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1d0>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1d4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fc38 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023c00 	.word	0x40023c00
 8003444:	40023800 	.word	0x40023800
 8003448:	080209b8 	.word	0x080209b8
 800344c:	20000000 	.word	0x20000000
 8003450:	20000004 	.word	0x20000004

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	2300      	movs	r3, #0
 8003466:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800346c:	4b67      	ldr	r3, [pc, #412]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	d00d      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x40>
 8003478:	2b08      	cmp	r3, #8
 800347a:	f200 80bd 	bhi.w	80035f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x34>
 8003482:	2b04      	cmp	r3, #4
 8003484:	d003      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x3a>
 8003486:	e0b7      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b61      	ldr	r3, [pc, #388]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800348a:	60bb      	str	r3, [r7, #8]
      break;
 800348c:	e0b7      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800348e:	4b61      	ldr	r3, [pc, #388]	; (8003614 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003490:	60bb      	str	r3, [r7, #8]
      break;
 8003492:	e0b4      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003494:	4b5d      	ldr	r3, [pc, #372]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800349c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800349e:	4b5b      	ldr	r3, [pc, #364]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d04d      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034aa:	4b58      	ldr	r3, [pc, #352]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	099b      	lsrs	r3, r3, #6
 80034b0:	461a      	mov	r2, r3
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	ea02 0800 	and.w	r8, r2, r0
 80034c2:	ea03 0901 	and.w	r9, r3, r1
 80034c6:	4640      	mov	r0, r8
 80034c8:	4649      	mov	r1, r9
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	014b      	lsls	r3, r1, #5
 80034d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034d8:	0142      	lsls	r2, r0, #5
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	ebb0 0008 	subs.w	r0, r0, r8
 80034e2:	eb61 0109 	sbc.w	r1, r1, r9
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	018b      	lsls	r3, r1, #6
 80034f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034f4:	0182      	lsls	r2, r0, #6
 80034f6:	1a12      	subs	r2, r2, r0
 80034f8:	eb63 0301 	sbc.w	r3, r3, r1
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	00d9      	lsls	r1, r3, #3
 8003506:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800350a:	00d0      	lsls	r0, r2, #3
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	eb12 0208 	adds.w	r2, r2, r8
 8003514:	eb43 0309 	adc.w	r3, r3, r9
 8003518:	f04f 0000 	mov.w	r0, #0
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	0259      	lsls	r1, r3, #9
 8003522:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003526:	0250      	lsls	r0, r2, #9
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	461a      	mov	r2, r3
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	f7fc feea 	bl	8000310 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e04a      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	461a      	mov	r2, r3
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	ea02 0400 	and.w	r4, r2, r0
 800355e:	ea03 0501 	and.w	r5, r3, r1
 8003562:	4620      	mov	r0, r4
 8003564:	4629      	mov	r1, r5
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	014b      	lsls	r3, r1, #5
 8003570:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003574:	0142      	lsls	r2, r0, #5
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	1b00      	subs	r0, r0, r4
 800357c:	eb61 0105 	sbc.w	r1, r1, r5
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	018b      	lsls	r3, r1, #6
 800358a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800358e:	0182      	lsls	r2, r0, #6
 8003590:	1a12      	subs	r2, r2, r0
 8003592:	eb63 0301 	sbc.w	r3, r3, r1
 8003596:	f04f 0000 	mov.w	r0, #0
 800359a:	f04f 0100 	mov.w	r1, #0
 800359e:	00d9      	lsls	r1, r3, #3
 80035a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a4:	00d0      	lsls	r0, r2, #3
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	1912      	adds	r2, r2, r4
 80035ac:	eb45 0303 	adc.w	r3, r5, r3
 80035b0:	f04f 0000 	mov.w	r0, #0
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	0299      	lsls	r1, r3, #10
 80035ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035be:	0290      	lsls	r0, r2, #10
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f7fc fe9e 	bl	8000310 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	60bb      	str	r3, [r7, #8]
      break;
 80035f6:	e002      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035fa:	60bb      	str	r3, [r7, #8]
      break;
 80035fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fe:	68bb      	ldr	r3, [r7, #8]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	007a1200 	.word	0x007a1200

08003618 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800361c:	4b03      	ldr	r3, [pc, #12]	; (800362c <HAL_RCC_GetHCLKFreq+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000000 	.word	0x20000000

08003630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003634:	f7ff fff0 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	080209c8 	.word	0x080209c8

08003658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800365c:	f7ff ffdc 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0b5b      	lsrs	r3, r3, #13
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	; (800367c <HAL_RCC_GetPCLK2Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	080209c8 	.word	0x080209c8

08003680 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	220f      	movs	r2, #15
 800368e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0203 	and.w	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	08db      	lsrs	r3, r3, #3
 80036ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCC_GetClockConfig+0x60>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 020f 	and.w	r2, r3, #15
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40023c00 	.word	0x40023c00

080036e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d012      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800370c:	4b69      	ldr	r3, [pc, #420]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a68      	ldr	r2, [pc, #416]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003712:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003716:	6093      	str	r3, [r2, #8]
 8003718:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003720:	4964      	ldr	r1, [pc, #400]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800372e:	2301      	movs	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d017      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800373e:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	4959      	ldr	r1, [pc, #356]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375c:	d101      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800375e:	2301      	movs	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800376a:	2301      	movs	r3, #1
 800376c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d017      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800377a:	4b4e      	ldr	r3, [pc, #312]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003780:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	494a      	ldr	r1, [pc, #296]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003798:	d101      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800379a:	2301      	movs	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 808b 	beq.w	80038de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c8:	4b3a      	ldr	r3, [pc, #232]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	4a39      	ldr	r2, [pc, #228]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6413      	str	r3, [r2, #64]	; 0x40
 80037d4:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037e0:	4b35      	ldr	r3, [pc, #212]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a34      	ldr	r2, [pc, #208]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7fd fce4 	bl	80011b8 <HAL_GetTick>
 80037f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f4:	f7fd fce0 	bl	80011b8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e38f      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003806:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003812:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d035      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d02e      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003830:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003838:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383a:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003850:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003852:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003858:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d114      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd fca8 	bl	80011b8 <HAL_GetTick>
 8003868:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fd fca4 	bl	80011b8 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e351      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ee      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800389a:	d111      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038aa:	400b      	ands	r3, r1
 80038ac:	4901      	ldr	r1, [pc, #4]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
 80038b2:	e00b      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40007000 	.word	0x40007000
 80038bc:	0ffffcff 	.word	0x0ffffcff
 80038c0:	4bb3      	ldr	r3, [pc, #716]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4ab2      	ldr	r2, [pc, #712]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038ca:	6093      	str	r3, [r2, #8]
 80038cc:	4bb0      	ldr	r3, [pc, #704]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d8:	49ad      	ldr	r1, [pc, #692]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d010      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038ea:	4ba9      	ldr	r3, [pc, #676]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f0:	4aa7      	ldr	r2, [pc, #668]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038fa:	4ba5      	ldr	r3, [pc, #660]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	49a2      	ldr	r1, [pc, #648]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003918:	4b9d      	ldr	r3, [pc, #628]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003926:	499a      	ldr	r1, [pc, #616]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800393a:	4b95      	ldr	r3, [pc, #596]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003948:	4991      	ldr	r1, [pc, #580]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800395c:	4b8c      	ldr	r3, [pc, #560]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396a:	4989      	ldr	r1, [pc, #548]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800397e:	4b84      	ldr	r3, [pc, #528]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	4980      	ldr	r1, [pc, #512]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a0:	4b7b      	ldr	r3, [pc, #492]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	4978      	ldr	r1, [pc, #480]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c2:	4b73      	ldr	r3, [pc, #460]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	f023 020c 	bic.w	r2, r3, #12
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d0:	496f      	ldr	r1, [pc, #444]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e4:	4b6a      	ldr	r3, [pc, #424]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	4967      	ldr	r1, [pc, #412]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a06:	4b62      	ldr	r3, [pc, #392]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	495e      	ldr	r1, [pc, #376]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	4956      	ldr	r1, [pc, #344]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a4a:	4b51      	ldr	r3, [pc, #324]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	494d      	ldr	r1, [pc, #308]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a6c:	4b48      	ldr	r3, [pc, #288]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	4945      	ldr	r1, [pc, #276]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a8e:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9c:	493c      	ldr	r1, [pc, #240]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ab0:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003abe:	4934      	ldr	r1, [pc, #208]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d011      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ad2:	4b2f      	ldr	r3, [pc, #188]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae0:	492b      	ldr	r1, [pc, #172]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af0:	d101      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b20:	491b      	ldr	r1, [pc, #108]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b34:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b44:	4912      	ldr	r1, [pc, #72]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b68:	4909      	ldr	r1, [pc, #36]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00f      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b7c:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8c:	e002      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	4986      	ldr	r1, [pc, #536]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ba8:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb8:	497d      	ldr	r1, [pc, #500]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d006      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80d6 	beq.w	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bd4:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a75      	ldr	r2, [pc, #468]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be0:	f7fd faea 	bl	80011b8 <HAL_GetTick>
 8003be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003be8:	f7fd fae6 	bl	80011b8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e195      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bfa:	4b6d      	ldr	r3, [pc, #436]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d021      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11d      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c1a:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2e:	0e1b      	lsrs	r3, r3, #24
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	019a      	lsls	r2, r3, #6
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	071b      	lsls	r3, r3, #28
 8003c4e:	4958      	ldr	r1, [pc, #352]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d02e      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c80:	d129      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c82:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c90:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	0f1b      	lsrs	r3, r3, #28
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	019a      	lsls	r2, r3, #6
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	061b      	lsls	r3, r3, #24
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	071b      	lsls	r3, r3, #28
 8003cb6:	493e      	ldr	r1, [pc, #248]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cbe:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc4:	f023 021f 	bic.w	r2, r3, #31
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	4938      	ldr	r1, [pc, #224]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01d      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ce2:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce8:	0e1b      	lsrs	r3, r3, #24
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf6:	0f1b      	lsrs	r3, r3, #28
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	019a      	lsls	r2, r3, #6
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	061b      	lsls	r3, r3, #24
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	071b      	lsls	r3, r3, #28
 8003d16:	4926      	ldr	r1, [pc, #152]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d011      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	019a      	lsls	r2, r3, #6
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	071b      	lsls	r3, r3, #28
 8003d46:	491a      	ldr	r1, [pc, #104]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d4e:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5a:	f7fd fa2d 	bl	80011b8 <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d62:	f7fd fa29 	bl	80011b8 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b64      	cmp	r3, #100	; 0x64
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e0d8      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	f040 80ce 	bne.w	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d94:	f7fd fa10 	bl	80011b8 <HAL_GetTick>
 8003d98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d9c:	f7fd fa0c 	bl	80011b8 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d904      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0bb      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003db4:	4b5e      	ldr	r3, [pc, #376]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc0:	d0ec      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d02e      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d12a      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dea:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003df8:	4b4d      	ldr	r3, [pc, #308]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	0f1b      	lsrs	r3, r3, #28
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	019a      	lsls	r2, r3, #6
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	061b      	lsls	r3, r3, #24
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	071b      	lsls	r3, r3, #28
 8003e1e:	4944      	ldr	r1, [pc, #272]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e26:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	3b01      	subs	r3, #1
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	493d      	ldr	r1, [pc, #244]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d022      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e54:	d11d      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	0e1b      	lsrs	r3, r3, #24
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e64:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	0f1b      	lsrs	r3, r3, #28
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	019a      	lsls	r2, r3, #6
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	061b      	lsls	r3, r3, #24
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	071b      	lsls	r3, r3, #28
 8003e8a:	4929      	ldr	r1, [pc, #164]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d028      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	0e1b      	lsrs	r3, r3, #24
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	019a      	lsls	r2, r3, #6
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	071b      	lsls	r3, r3, #28
 8003ed2:	4917      	ldr	r1, [pc, #92]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4911      	ldr	r1, [pc, #68]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efc:	f7fd f95c 	bl	80011b8 <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f04:	f7fd f958 	bl	80011b8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e007      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f22:	d1ef      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800

08003f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e049      	b.n	8003fda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f841 	bl	8003fe2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f000 fa00 	bl	8004378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d001      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e054      	b.n	80040ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a26      	ldr	r2, [pc, #152]	; (80040c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d022      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403a:	d01d      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a22      	ldr	r2, [pc, #136]	; (80040cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_TIM_Base_Start_IT+0xe4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d115      	bne.n	80040a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <HAL_TIM_Base_Start_IT+0xec>)
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b06      	cmp	r3, #6
 8004088:	d015      	beq.n	80040b6 <HAL_TIM_Base_Start_IT+0xbe>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d011      	beq.n	80040b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a2:	e008      	b.n	80040b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e000      	b.n	80040b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40010400 	.word	0x40010400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40001800 	.word	0x40001800
 80040e4:	00010007 	.word	0x00010007

080040e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d122      	bne.n	8004144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0202 	mvn.w	r2, #2
 8004114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f905 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8f7 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f908 	bl	800434e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b04      	cmp	r3, #4
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b04      	cmp	r3, #4
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0204 	mvn.w	r2, #4
 8004168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8db 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8cd 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f8de 	bl	800434e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d122      	bne.n	80041ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0208 	mvn.w	r2, #8
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2204      	movs	r2, #4
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f8b1 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f8a3 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f8b4 	bl	800434e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b10      	cmp	r3, #16
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b10      	cmp	r3, #16
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0210 	mvn.w	r2, #16
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2208      	movs	r2, #8
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f887 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f879 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f88a 	bl	800434e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d10e      	bne.n	800426c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b01      	cmp	r3, #1
 800425a:	d107      	bne.n	800426c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0201 	mvn.w	r2, #1
 8004264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fc fcd0 	bl	8000c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d10e      	bne.n	8004298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b80      	cmp	r3, #128	; 0x80
 8004286:	d107      	bne.n	8004298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f91a 	bl	80044cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a6:	d10e      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b80      	cmp	r3, #128	; 0x80
 80042b4:	d107      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f90d 	bl	80044e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b40      	cmp	r3, #64	; 0x40
 80042d2:	d10e      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d107      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f838 	bl	8004362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d10e      	bne.n	800431e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b20      	cmp	r3, #32
 800430c:	d107      	bne.n	800431e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f06f 0220 	mvn.w	r2, #32
 8004316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f8cd 	bl	80044b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a40      	ldr	r2, [pc, #256]	; (800448c <TIM_Base_SetConfig+0x114>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d013      	beq.n	80043b8 <TIM_Base_SetConfig+0x40>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d00f      	beq.n	80043b8 <TIM_Base_SetConfig+0x40>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a3d      	ldr	r2, [pc, #244]	; (8004490 <TIM_Base_SetConfig+0x118>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00b      	beq.n	80043b8 <TIM_Base_SetConfig+0x40>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a3c      	ldr	r2, [pc, #240]	; (8004494 <TIM_Base_SetConfig+0x11c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d007      	beq.n	80043b8 <TIM_Base_SetConfig+0x40>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a3b      	ldr	r2, [pc, #236]	; (8004498 <TIM_Base_SetConfig+0x120>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_Base_SetConfig+0x40>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a3a      	ldr	r2, [pc, #232]	; (800449c <TIM_Base_SetConfig+0x124>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d108      	bne.n	80043ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a2f      	ldr	r2, [pc, #188]	; (800448c <TIM_Base_SetConfig+0x114>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d02b      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d8:	d027      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a2c      	ldr	r2, [pc, #176]	; (8004490 <TIM_Base_SetConfig+0x118>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d023      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a2b      	ldr	r2, [pc, #172]	; (8004494 <TIM_Base_SetConfig+0x11c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d01f      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a2a      	ldr	r2, [pc, #168]	; (8004498 <TIM_Base_SetConfig+0x120>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01b      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a29      	ldr	r2, [pc, #164]	; (800449c <TIM_Base_SetConfig+0x124>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d017      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a28      	ldr	r2, [pc, #160]	; (80044a0 <TIM_Base_SetConfig+0x128>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a27      	ldr	r2, [pc, #156]	; (80044a4 <TIM_Base_SetConfig+0x12c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00f      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <TIM_Base_SetConfig+0x130>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00b      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a25      	ldr	r2, [pc, #148]	; (80044ac <TIM_Base_SetConfig+0x134>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d007      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a24      	ldr	r2, [pc, #144]	; (80044b0 <TIM_Base_SetConfig+0x138>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d003      	beq.n	800442a <TIM_Base_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a23      	ldr	r2, [pc, #140]	; (80044b4 <TIM_Base_SetConfig+0x13c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d108      	bne.n	800443c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a0a      	ldr	r2, [pc, #40]	; (800448c <TIM_Base_SetConfig+0x114>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <TIM_Base_SetConfig+0xf8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a0c      	ldr	r2, [pc, #48]	; (800449c <TIM_Base_SetConfig+0x124>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d103      	bne.n	8004478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	615a      	str	r2, [r3, #20]
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40010400 	.word	0x40010400
 80044a0:	40014000 	.word	0x40014000
 80044a4:	40014400 	.word	0x40014400
 80044a8:	40014800 	.word	0x40014800
 80044ac:	40001800 	.word	0x40001800
 80044b0:	40001c00 	.word	0x40001c00
 80044b4:	40002000 	.word	0x40002000

080044b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e040      	b.n	8004588 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc fd36 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2224      	movs	r2, #36	; 0x24
 8004520:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0201 	bic.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f82c 	bl	8004590 <UART_SetConfig>
 8004538:	4603      	mov	r3, r0
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e022      	b.n	8004588 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fa82 	bl	8004a54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800455e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800456e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fb09 	bl	8004b98 <UART_CheckIdleState>
 8004586:	4603      	mov	r3, r0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4ba7      	ldr	r3, [pc, #668]	; (8004858 <UART_SetConfig+0x2c8>)
 80045bc:	4013      	ands	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	6979      	ldr	r1, [r7, #20]
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	430a      	orrs	r2, r1
 8004600:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a95      	ldr	r2, [pc, #596]	; (800485c <UART_SetConfig+0x2cc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d120      	bne.n	800464e <UART_SetConfig+0xbe>
 800460c:	4b94      	ldr	r3, [pc, #592]	; (8004860 <UART_SetConfig+0x2d0>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b03      	cmp	r3, #3
 8004618:	d816      	bhi.n	8004648 <UART_SetConfig+0xb8>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0x90>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004631 	.word	0x08004631
 8004624:	0800463d 	.word	0x0800463d
 8004628:	08004637 	.word	0x08004637
 800462c:	08004643 	.word	0x08004643
 8004630:	2301      	movs	r3, #1
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e14f      	b.n	80048d6 <UART_SetConfig+0x346>
 8004636:	2302      	movs	r3, #2
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e14c      	b.n	80048d6 <UART_SetConfig+0x346>
 800463c:	2304      	movs	r3, #4
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e149      	b.n	80048d6 <UART_SetConfig+0x346>
 8004642:	2308      	movs	r3, #8
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e146      	b.n	80048d6 <UART_SetConfig+0x346>
 8004648:	2310      	movs	r3, #16
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e143      	b.n	80048d6 <UART_SetConfig+0x346>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a84      	ldr	r2, [pc, #528]	; (8004864 <UART_SetConfig+0x2d4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d132      	bne.n	80046be <UART_SetConfig+0x12e>
 8004658:	4b81      	ldr	r3, [pc, #516]	; (8004860 <UART_SetConfig+0x2d0>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d828      	bhi.n	80046b8 <UART_SetConfig+0x128>
 8004666:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0xdc>)
 8004668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466c:	080046a1 	.word	0x080046a1
 8004670:	080046b9 	.word	0x080046b9
 8004674:	080046b9 	.word	0x080046b9
 8004678:	080046b9 	.word	0x080046b9
 800467c:	080046ad 	.word	0x080046ad
 8004680:	080046b9 	.word	0x080046b9
 8004684:	080046b9 	.word	0x080046b9
 8004688:	080046b9 	.word	0x080046b9
 800468c:	080046a7 	.word	0x080046a7
 8004690:	080046b9 	.word	0x080046b9
 8004694:	080046b9 	.word	0x080046b9
 8004698:	080046b9 	.word	0x080046b9
 800469c:	080046b3 	.word	0x080046b3
 80046a0:	2300      	movs	r3, #0
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e117      	b.n	80048d6 <UART_SetConfig+0x346>
 80046a6:	2302      	movs	r3, #2
 80046a8:	77fb      	strb	r3, [r7, #31]
 80046aa:	e114      	b.n	80048d6 <UART_SetConfig+0x346>
 80046ac:	2304      	movs	r3, #4
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e111      	b.n	80048d6 <UART_SetConfig+0x346>
 80046b2:	2308      	movs	r3, #8
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e10e      	b.n	80048d6 <UART_SetConfig+0x346>
 80046b8:	2310      	movs	r3, #16
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e10b      	b.n	80048d6 <UART_SetConfig+0x346>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a69      	ldr	r2, [pc, #420]	; (8004868 <UART_SetConfig+0x2d8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d120      	bne.n	800470a <UART_SetConfig+0x17a>
 80046c8:	4b65      	ldr	r3, [pc, #404]	; (8004860 <UART_SetConfig+0x2d0>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046d2:	2b30      	cmp	r3, #48	; 0x30
 80046d4:	d013      	beq.n	80046fe <UART_SetConfig+0x16e>
 80046d6:	2b30      	cmp	r3, #48	; 0x30
 80046d8:	d814      	bhi.n	8004704 <UART_SetConfig+0x174>
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d009      	beq.n	80046f2 <UART_SetConfig+0x162>
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d810      	bhi.n	8004704 <UART_SetConfig+0x174>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <UART_SetConfig+0x15c>
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d006      	beq.n	80046f8 <UART_SetConfig+0x168>
 80046ea:	e00b      	b.n	8004704 <UART_SetConfig+0x174>
 80046ec:	2300      	movs	r3, #0
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e0f1      	b.n	80048d6 <UART_SetConfig+0x346>
 80046f2:	2302      	movs	r3, #2
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e0ee      	b.n	80048d6 <UART_SetConfig+0x346>
 80046f8:	2304      	movs	r3, #4
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e0eb      	b.n	80048d6 <UART_SetConfig+0x346>
 80046fe:	2308      	movs	r3, #8
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e0e8      	b.n	80048d6 <UART_SetConfig+0x346>
 8004704:	2310      	movs	r3, #16
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e0e5      	b.n	80048d6 <UART_SetConfig+0x346>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a57      	ldr	r2, [pc, #348]	; (800486c <UART_SetConfig+0x2dc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d120      	bne.n	8004756 <UART_SetConfig+0x1c6>
 8004714:	4b52      	ldr	r3, [pc, #328]	; (8004860 <UART_SetConfig+0x2d0>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800471e:	2bc0      	cmp	r3, #192	; 0xc0
 8004720:	d013      	beq.n	800474a <UART_SetConfig+0x1ba>
 8004722:	2bc0      	cmp	r3, #192	; 0xc0
 8004724:	d814      	bhi.n	8004750 <UART_SetConfig+0x1c0>
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d009      	beq.n	800473e <UART_SetConfig+0x1ae>
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d810      	bhi.n	8004750 <UART_SetConfig+0x1c0>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <UART_SetConfig+0x1a8>
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d006      	beq.n	8004744 <UART_SetConfig+0x1b4>
 8004736:	e00b      	b.n	8004750 <UART_SetConfig+0x1c0>
 8004738:	2300      	movs	r3, #0
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e0cb      	b.n	80048d6 <UART_SetConfig+0x346>
 800473e:	2302      	movs	r3, #2
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e0c8      	b.n	80048d6 <UART_SetConfig+0x346>
 8004744:	2304      	movs	r3, #4
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e0c5      	b.n	80048d6 <UART_SetConfig+0x346>
 800474a:	2308      	movs	r3, #8
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e0c2      	b.n	80048d6 <UART_SetConfig+0x346>
 8004750:	2310      	movs	r3, #16
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e0bf      	b.n	80048d6 <UART_SetConfig+0x346>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a45      	ldr	r2, [pc, #276]	; (8004870 <UART_SetConfig+0x2e0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d125      	bne.n	80047ac <UART_SetConfig+0x21c>
 8004760:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <UART_SetConfig+0x2d0>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476e:	d017      	beq.n	80047a0 <UART_SetConfig+0x210>
 8004770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004774:	d817      	bhi.n	80047a6 <UART_SetConfig+0x216>
 8004776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477a:	d00b      	beq.n	8004794 <UART_SetConfig+0x204>
 800477c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004780:	d811      	bhi.n	80047a6 <UART_SetConfig+0x216>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <UART_SetConfig+0x1fe>
 8004786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478a:	d006      	beq.n	800479a <UART_SetConfig+0x20a>
 800478c:	e00b      	b.n	80047a6 <UART_SetConfig+0x216>
 800478e:	2300      	movs	r3, #0
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e0a0      	b.n	80048d6 <UART_SetConfig+0x346>
 8004794:	2302      	movs	r3, #2
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e09d      	b.n	80048d6 <UART_SetConfig+0x346>
 800479a:	2304      	movs	r3, #4
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e09a      	b.n	80048d6 <UART_SetConfig+0x346>
 80047a0:	2308      	movs	r3, #8
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e097      	b.n	80048d6 <UART_SetConfig+0x346>
 80047a6:	2310      	movs	r3, #16
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e094      	b.n	80048d6 <UART_SetConfig+0x346>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a30      	ldr	r2, [pc, #192]	; (8004874 <UART_SetConfig+0x2e4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d125      	bne.n	8004802 <UART_SetConfig+0x272>
 80047b6:	4b2a      	ldr	r3, [pc, #168]	; (8004860 <UART_SetConfig+0x2d0>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c4:	d017      	beq.n	80047f6 <UART_SetConfig+0x266>
 80047c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ca:	d817      	bhi.n	80047fc <UART_SetConfig+0x26c>
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d0:	d00b      	beq.n	80047ea <UART_SetConfig+0x25a>
 80047d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d6:	d811      	bhi.n	80047fc <UART_SetConfig+0x26c>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <UART_SetConfig+0x254>
 80047dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e0:	d006      	beq.n	80047f0 <UART_SetConfig+0x260>
 80047e2:	e00b      	b.n	80047fc <UART_SetConfig+0x26c>
 80047e4:	2301      	movs	r3, #1
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e075      	b.n	80048d6 <UART_SetConfig+0x346>
 80047ea:	2302      	movs	r3, #2
 80047ec:	77fb      	strb	r3, [r7, #31]
 80047ee:	e072      	b.n	80048d6 <UART_SetConfig+0x346>
 80047f0:	2304      	movs	r3, #4
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e06f      	b.n	80048d6 <UART_SetConfig+0x346>
 80047f6:	2308      	movs	r3, #8
 80047f8:	77fb      	strb	r3, [r7, #31]
 80047fa:	e06c      	b.n	80048d6 <UART_SetConfig+0x346>
 80047fc:	2310      	movs	r3, #16
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e069      	b.n	80048d6 <UART_SetConfig+0x346>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1c      	ldr	r2, [pc, #112]	; (8004878 <UART_SetConfig+0x2e8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d137      	bne.n	800487c <UART_SetConfig+0x2ec>
 800480c:	4b14      	ldr	r3, [pc, #80]	; (8004860 <UART_SetConfig+0x2d0>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004816:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800481a:	d017      	beq.n	800484c <UART_SetConfig+0x2bc>
 800481c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004820:	d817      	bhi.n	8004852 <UART_SetConfig+0x2c2>
 8004822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004826:	d00b      	beq.n	8004840 <UART_SetConfig+0x2b0>
 8004828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482c:	d811      	bhi.n	8004852 <UART_SetConfig+0x2c2>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <UART_SetConfig+0x2aa>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004836:	d006      	beq.n	8004846 <UART_SetConfig+0x2b6>
 8004838:	e00b      	b.n	8004852 <UART_SetConfig+0x2c2>
 800483a:	2300      	movs	r3, #0
 800483c:	77fb      	strb	r3, [r7, #31]
 800483e:	e04a      	b.n	80048d6 <UART_SetConfig+0x346>
 8004840:	2302      	movs	r3, #2
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e047      	b.n	80048d6 <UART_SetConfig+0x346>
 8004846:	2304      	movs	r3, #4
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e044      	b.n	80048d6 <UART_SetConfig+0x346>
 800484c:	2308      	movs	r3, #8
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e041      	b.n	80048d6 <UART_SetConfig+0x346>
 8004852:	2310      	movs	r3, #16
 8004854:	77fb      	strb	r3, [r7, #31]
 8004856:	e03e      	b.n	80048d6 <UART_SetConfig+0x346>
 8004858:	efff69f3 	.word	0xefff69f3
 800485c:	40011000 	.word	0x40011000
 8004860:	40023800 	.word	0x40023800
 8004864:	40004400 	.word	0x40004400
 8004868:	40004800 	.word	0x40004800
 800486c:	40004c00 	.word	0x40004c00
 8004870:	40005000 	.word	0x40005000
 8004874:	40011400 	.word	0x40011400
 8004878:	40007800 	.word	0x40007800
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a71      	ldr	r2, [pc, #452]	; (8004a48 <UART_SetConfig+0x4b8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d125      	bne.n	80048d2 <UART_SetConfig+0x342>
 8004886:	4b71      	ldr	r3, [pc, #452]	; (8004a4c <UART_SetConfig+0x4bc>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004890:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004894:	d017      	beq.n	80048c6 <UART_SetConfig+0x336>
 8004896:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800489a:	d817      	bhi.n	80048cc <UART_SetConfig+0x33c>
 800489c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a0:	d00b      	beq.n	80048ba <UART_SetConfig+0x32a>
 80048a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a6:	d811      	bhi.n	80048cc <UART_SetConfig+0x33c>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <UART_SetConfig+0x324>
 80048ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b0:	d006      	beq.n	80048c0 <UART_SetConfig+0x330>
 80048b2:	e00b      	b.n	80048cc <UART_SetConfig+0x33c>
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e00d      	b.n	80048d6 <UART_SetConfig+0x346>
 80048ba:	2302      	movs	r3, #2
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e00a      	b.n	80048d6 <UART_SetConfig+0x346>
 80048c0:	2304      	movs	r3, #4
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e007      	b.n	80048d6 <UART_SetConfig+0x346>
 80048c6:	2308      	movs	r3, #8
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e004      	b.n	80048d6 <UART_SetConfig+0x346>
 80048cc:	2310      	movs	r3, #16
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e001      	b.n	80048d6 <UART_SetConfig+0x346>
 80048d2:	2310      	movs	r3, #16
 80048d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048de:	d15b      	bne.n	8004998 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80048e0:	7ffb      	ldrb	r3, [r7, #31]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d827      	bhi.n	8004936 <UART_SetConfig+0x3a6>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x35c>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004937 	.word	0x08004937
 8004904:	08004937 	.word	0x08004937
 8004908:	08004937 	.word	0x08004937
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fe fe8e 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 8004914:	61b8      	str	r0, [r7, #24]
        break;
 8004916:	e013      	b.n	8004940 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe fe9e 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 800491c:	61b8      	str	r0, [r7, #24]
        break;
 800491e:	e00f      	b.n	8004940 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b4b      	ldr	r3, [pc, #300]	; (8004a50 <UART_SetConfig+0x4c0>)
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e00c      	b.n	8004940 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe fd95 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 800492a:	61b8      	str	r0, [r7, #24]
        break;
 800492c:	e008      	b.n	8004940 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	61bb      	str	r3, [r7, #24]
        break;
 8004934:	e004      	b.n	8004940 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	77bb      	strb	r3, [r7, #30]
        break;
 800493e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d074      	beq.n	8004a30 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	005a      	lsls	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b0f      	cmp	r3, #15
 8004962:	d916      	bls.n	8004992 <UART_SetConfig+0x402>
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496a:	d212      	bcs.n	8004992 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f023 030f 	bic.w	r3, r3, #15
 8004974:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	b29b      	uxth	r3, r3
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	b29a      	uxth	r2, r3
 8004982:	89fb      	ldrh	r3, [r7, #14]
 8004984:	4313      	orrs	r3, r2
 8004986:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	89fa      	ldrh	r2, [r7, #14]
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	e04e      	b.n	8004a30 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	77bb      	strb	r3, [r7, #30]
 8004996:	e04b      	b.n	8004a30 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004998:	7ffb      	ldrb	r3, [r7, #31]
 800499a:	2b08      	cmp	r3, #8
 800499c:	d827      	bhi.n	80049ee <UART_SetConfig+0x45e>
 800499e:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0x414>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	080049ef 	.word	0x080049ef
 80049b4:	080049df 	.word	0x080049df
 80049b8:	080049ef 	.word	0x080049ef
 80049bc:	080049ef 	.word	0x080049ef
 80049c0:	080049ef 	.word	0x080049ef
 80049c4:	080049e7 	.word	0x080049e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c8:	f7fe fe32 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 80049cc:	61b8      	str	r0, [r7, #24]
        break;
 80049ce:	e013      	b.n	80049f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d0:	f7fe fe42 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 80049d4:	61b8      	str	r0, [r7, #24]
        break;
 80049d6:	e00f      	b.n	80049f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d8:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <UART_SetConfig+0x4c0>)
 80049da:	61bb      	str	r3, [r7, #24]
        break;
 80049dc:	e00c      	b.n	80049f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049de:	f7fe fd39 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 80049e2:	61b8      	str	r0, [r7, #24]
        break;
 80049e4:	e008      	b.n	80049f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ea:	61bb      	str	r3, [r7, #24]
        break;
 80049ec:	e004      	b.n	80049f8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	77bb      	strb	r3, [r7, #30]
        break;
 80049f6:	bf00      	nop
    }

    if (pclk != 0U)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	085a      	lsrs	r2, r3, #1
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	441a      	add	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b0f      	cmp	r3, #15
 8004a18:	d908      	bls.n	8004a2c <UART_SetConfig+0x49c>
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a20:	d204      	bcs.n	8004a2c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	e001      	b.n	8004a30 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40007c00 	.word	0x40007c00
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	00f42400 	.word	0x00f42400

08004a54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01a      	beq.n	8004b6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b52:	d10a      	bne.n	8004b6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba8:	f7fc fb06 	bl	80011b8 <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d10e      	bne.n	8004bda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f82d 	bl	8004c2a <UART_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e023      	b.n	8004c22 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d10e      	bne.n	8004c06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f817 	bl	8004c2a <UART_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e00d      	b.n	8004c22 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	4613      	mov	r3, r2
 8004c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3a:	e05e      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c42:	d05a      	beq.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c44:	f7fc fab8 	bl	80011b8 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d302      	bcc.n	8004c5a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d11b      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e043      	b.n	8004d1a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d02c      	beq.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cae:	d124      	bne.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cc8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e00f      	b.n	8004d1a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4013      	ands	r3, r2
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	bf0c      	ite	eq
 8004d0a:	2301      	moveq	r3, #1
 8004d0c:	2300      	movne	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d091      	beq.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d24:	b084      	sub	sp, #16
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	f107 001c 	add.w	r0, r7, #28
 8004d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d120      	bne.n	8004d7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <USB_CoreInit+0xac>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d105      	bne.n	8004d72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa5a 	bl	800522c <USB_CoreReset>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	73fb      	strb	r3, [r7, #15]
 8004d7c:	e010      	b.n	8004da0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fa4e 	bl	800522c <USB_CoreReset>
 8004d90:	4603      	mov	r3, r0
 8004d92:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d10b      	bne.n	8004dbe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f043 0206 	orr.w	r2, r3, #6
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dca:	b004      	add	sp, #16
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	ffbdffbf 	.word	0xffbdffbf

08004dd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f023 0201 	bic.w	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d106      	bne.n	8004e22 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	e00b      	b.n	8004e3a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d106      	bne.n	8004e36 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	e001      	b.n	8004e3a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e003      	b.n	8004e42 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e3a:	2032      	movs	r0, #50	; 0x32
 8004e3c:	f7fc f9c8 	bl	80011d0 <HAL_Delay>

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e009      	b.n	8004e80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	3340      	adds	r3, #64	; 0x40
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b0e      	cmp	r3, #14
 8004e84:	d9f2      	bls.n	8004e6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11c      	bne.n	8004ec6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e9a:	f043 0302 	orr.w	r3, r3, #2
 8004e9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e005      	b.n	8004ed2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2300      	movs	r3, #0
 8004edc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eec:	461a      	mov	r2, r3
 8004eee:	680b      	ldr	r3, [r1, #0]
 8004ef0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d10c      	bne.n	8004f12 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004efe:	2100      	movs	r1, #0
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f959 	bl	80051b8 <USB_SetDevSpeed>
 8004f06:	e018      	b.n	8004f3a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f08:	2101      	movs	r1, #1
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f954 	bl	80051b8 <USB_SetDevSpeed>
 8004f10:	e013      	b.n	8004f3a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d10c      	bne.n	8004f32 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d104      	bne.n	8004f28 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f1e:	2100      	movs	r1, #0
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f949 	bl	80051b8 <USB_SetDevSpeed>
 8004f26:	e008      	b.n	8004f3a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f28:	2101      	movs	r1, #1
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f944 	bl	80051b8 <USB_SetDevSpeed>
 8004f30:	e003      	b.n	8004f3a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f32:	2103      	movs	r1, #3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f93f 	bl	80051b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f3a:	2110      	movs	r1, #16
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f8f3 	bl	8005128 <USB_FlushTxFifo>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f911 	bl	8005174 <USB_FlushRxFifo>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f62:	461a      	mov	r2, r3
 8004f64:	2300      	movs	r3, #0
 8004f66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	461a      	mov	r2, r3
 8004f70:	2300      	movs	r3, #0
 8004f72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	e043      	b.n	800500e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f9c:	d118      	bne.n	8004fd0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	e013      	b.n	8004fe2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e008      	b.n	8004fe2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	461a      	mov	r2, r3
 8005002:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005006:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	3301      	adds	r3, #1
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	429a      	cmp	r2, r3
 8005014:	d3b7      	bcc.n	8004f86 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	e043      	b.n	80050a4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800502e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005032:	d118      	bne.n	8005066 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10a      	bne.n	8005050 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	461a      	mov	r2, r3
 8005048:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	e013      	b.n	8005078 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505c:	461a      	mov	r2, r3
 800505e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e008      	b.n	8005078 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	461a      	mov	r2, r3
 8005074:	2300      	movs	r3, #0
 8005076:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	461a      	mov	r2, r3
 8005086:	2300      	movs	r3, #0
 8005088:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	461a      	mov	r2, r3
 8005098:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800509c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3301      	adds	r3, #1
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d3b7      	bcc.n	800501c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f043 0210 	orr.w	r2, r3, #16
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <USB_DevInit+0x2d4>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f043 0208 	orr.w	r2, r3, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005100:	2b01      	cmp	r3, #1
 8005102:	d105      	bne.n	8005110 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <USB_DevInit+0x2d8>)
 800510a:	4313      	orrs	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005110:	7dfb      	ldrb	r3, [r7, #23]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800511c:	b004      	add	sp, #16
 800511e:	4770      	bx	lr
 8005120:	803c3800 	.word	0x803c3800
 8005124:	40000004 	.word	0x40000004

08005128 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	019b      	lsls	r3, r3, #6
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a09      	ldr	r2, [pc, #36]	; (8005170 <USB_FlushTxFifo+0x48>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e006      	b.n	8005162 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b20      	cmp	r3, #32
 800515e:	d0f0      	beq.n	8005142 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	00030d40 	.word	0x00030d40

08005174 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2210      	movs	r2, #16
 8005184:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <USB_FlushRxFifo+0x40>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e006      	b.n	80051a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d0f0      	beq.n	8005186 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	00030d40 	.word	0x00030d40

080051b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d8:	4313      	orrs	r3, r2
 80051da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005204:	f023 0303 	bic.w	r3, r3, #3
 8005208:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005218:	f043 0302 	orr.w	r3, r3, #2
 800521c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3301      	adds	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <USB_CoreReset+0x64>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d901      	bls.n	800524a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e01b      	b.n	8005282 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	daf2      	bge.n	8005238 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f043 0201 	orr.w	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4a09      	ldr	r2, [pc, #36]	; (8005290 <USB_CoreReset+0x64>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e006      	b.n	8005282 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d0f0      	beq.n	8005262 <USB_CoreReset+0x36>

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	00030d40 	.word	0x00030d40

08005294 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005294:	b5b0      	push	{r4, r5, r7, lr}
 8005296:	b08e      	sub	sp, #56	; 0x38
 8005298:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800529a:	2100      	movs	r1, #0
 800529c:	2000      	movs	r0, #0
 800529e:	f007 f987 	bl	800c5b0 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80052a2:	4b2a      	ldr	r3, [pc, #168]	; (800534c <MX_LWIP_Init+0xb8>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80052a8:	4b29      	ldr	r3, [pc, #164]	; (8005350 <MX_LWIP_Init+0xbc>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80052ae:	4b29      	ldr	r3, [pc, #164]	; (8005354 <MX_LWIP_Init+0xc0>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80052b4:	4b28      	ldr	r3, [pc, #160]	; (8005358 <MX_LWIP_Init+0xc4>)
 80052b6:	9302      	str	r3, [sp, #8]
 80052b8:	4b28      	ldr	r3, [pc, #160]	; (800535c <MX_LWIP_Init+0xc8>)
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	2300      	movs	r3, #0
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	4b24      	ldr	r3, [pc, #144]	; (8005354 <MX_LWIP_Init+0xc0>)
 80052c2:	4a23      	ldr	r2, [pc, #140]	; (8005350 <MX_LWIP_Init+0xbc>)
 80052c4:	4921      	ldr	r1, [pc, #132]	; (800534c <MX_LWIP_Init+0xb8>)
 80052c6:	4826      	ldr	r0, [pc, #152]	; (8005360 <MX_LWIP_Init+0xcc>)
 80052c8:	f007 fef6 	bl	800d0b8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80052cc:	4824      	ldr	r0, [pc, #144]	; (8005360 <MX_LWIP_Init+0xcc>)
 80052ce:	f008 f8ad 	bl	800d42c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80052d2:	4b23      	ldr	r3, [pc, #140]	; (8005360 <MX_LWIP_Init+0xcc>)
 80052d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052d8:	089b      	lsrs	r3, r3, #2
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80052e4:	481e      	ldr	r0, [pc, #120]	; (8005360 <MX_LWIP_Init+0xcc>)
 80052e6:	f008 f8b1 	bl	800d44c <netif_set_up>
 80052ea:	e002      	b.n	80052f2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80052ec:	481c      	ldr	r0, [pc, #112]	; (8005360 <MX_LWIP_Init+0xcc>)
 80052ee:	f008 f919 	bl	800d524 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80052f2:	491c      	ldr	r1, [pc, #112]	; (8005364 <MX_LWIP_Init+0xd0>)
 80052f4:	481a      	ldr	r0, [pc, #104]	; (8005360 <MX_LWIP_Init+0xcc>)
 80052f6:	f008 f9af 	bl	800d658 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80052fa:	2300      	movs	r3, #0
 80052fc:	623b      	str	r3, [r7, #32]
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8005302:	f107 0320 	add.w	r3, r7, #32
 8005306:	2101      	movs	r1, #1
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fd93 	bl	8005e34 <osSemaphoreCreate>
 800530e:	4603      	mov	r3, r0
 8005310:	4a15      	ldr	r2, [pc, #84]	; (8005368 <MX_LWIP_Init+0xd4>)
 8005312:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005314:	4b15      	ldr	r3, [pc, #84]	; (800536c <MX_LWIP_Init+0xd8>)
 8005316:	4a12      	ldr	r2, [pc, #72]	; (8005360 <MX_LWIP_Init+0xcc>)
 8005318:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800531a:	4b13      	ldr	r3, [pc, #76]	; (8005368 <MX_LWIP_Init+0xd4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a13      	ldr	r2, [pc, #76]	; (800536c <MX_LWIP_Init+0xd8>)
 8005320:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8005322:	4b13      	ldr	r3, [pc, #76]	; (8005370 <MX_LWIP_Init+0xdc>)
 8005324:	1d3c      	adds	r4, r7, #4
 8005326:	461d      	mov	r5, r3
 8005328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800532a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800532c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005330:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	490d      	ldr	r1, [pc, #52]	; (800536c <MX_LWIP_Init+0xd8>)
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fc7e 	bl	8005c3a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800533e:	4808      	ldr	r0, [pc, #32]	; (8005360 <MX_LWIP_Init+0xcc>)
 8005340:	f010 fac4 	bl	80158cc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005344:	bf00      	nop
 8005346:	3728      	adds	r7, #40	; 0x28
 8005348:	46bd      	mov	sp, r7
 800534a:	bdb0      	pop	{r4, r5, r7, pc}
 800534c:	20009dd4 	.word	0x20009dd4
 8005350:	20009dd8 	.word	0x20009dd8
 8005354:	20009ddc 	.word	0x20009ddc
 8005358:	0800c4c1 	.word	0x0800c4c1
 800535c:	080059c9 	.word	0x080059c9
 8005360:	20009d9c 	.word	0x20009d9c
 8005364:	08005aad 	.word	0x08005aad
 8005368:	200008f8 	.word	0x200008f8
 800536c:	20009d94 	.word	0x20009d94
 8005370:	0801cc04 	.word	0x0801cc04

08005374 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08e      	sub	sp, #56	; 0x38
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800537c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	609a      	str	r2, [r3, #8]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a52      	ldr	r2, [pc, #328]	; (80054dc <HAL_ETH_MspInit+0x168>)
 8005392:	4293      	cmp	r3, r2
 8005394:	f040 809e 	bne.w	80054d4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005398:	4b51      	ldr	r3, [pc, #324]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	4a50      	ldr	r2, [pc, #320]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 800539e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053a2:	6313      	str	r3, [r2, #48]	; 0x30
 80053a4:	4b4e      	ldr	r3, [pc, #312]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	623b      	str	r3, [r7, #32]
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	4b4b      	ldr	r3, [pc, #300]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	4a4a      	ldr	r2, [pc, #296]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053ba:	6313      	str	r3, [r2, #48]	; 0x30
 80053bc:	4b48      	ldr	r3, [pc, #288]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4b45      	ldr	r3, [pc, #276]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	4a44      	ldr	r2, [pc, #272]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053d2:	6313      	str	r3, [r2, #48]	; 0x30
 80053d4:	4b42      	ldr	r3, [pc, #264]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053e0:	4b3f      	ldr	r3, [pc, #252]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	4a3e      	ldr	r2, [pc, #248]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053e6:	f043 0304 	orr.w	r3, r3, #4
 80053ea:	6313      	str	r3, [r2, #48]	; 0x30
 80053ec:	4b3c      	ldr	r3, [pc, #240]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053f8:	4b39      	ldr	r3, [pc, #228]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	4a38      	ldr	r2, [pc, #224]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	6313      	str	r3, [r2, #48]	; 0x30
 8005404:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005410:	4b33      	ldr	r3, [pc, #204]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	4a32      	ldr	r2, [pc, #200]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 8005416:	f043 0302 	orr.w	r3, r3, #2
 800541a:	6313      	str	r3, [r2, #48]	; 0x30
 800541c:	4b30      	ldr	r3, [pc, #192]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 800541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005428:	4b2d      	ldr	r3, [pc, #180]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	4a2c      	ldr	r2, [pc, #176]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 800542e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005432:	6313      	str	r3, [r2, #48]	; 0x30
 8005434:	4b2a      	ldr	r3, [pc, #168]	; (80054e0 <HAL_ETH_MspInit+0x16c>)
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005440:	2332      	movs	r3, #50	; 0x32
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005444:	2302      	movs	r3, #2
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005448:	2300      	movs	r3, #0
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800544c:	2303      	movs	r3, #3
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005450:	230b      	movs	r3, #11
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005458:	4619      	mov	r1, r3
 800545a:	4822      	ldr	r0, [pc, #136]	; (80054e4 <HAL_ETH_MspInit+0x170>)
 800545c:	f7fd f942 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005460:	2386      	movs	r3, #134	; 0x86
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005464:	2302      	movs	r3, #2
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005468:	2300      	movs	r3, #0
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800546c:	2303      	movs	r3, #3
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005470:	230b      	movs	r3, #11
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005478:	4619      	mov	r1, r3
 800547a:	481b      	ldr	r0, [pc, #108]	; (80054e8 <HAL_ETH_MspInit+0x174>)
 800547c:	f7fd f932 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005486:	2302      	movs	r3, #2
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548a:	2300      	movs	r3, #0
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800548e:	2303      	movs	r3, #3
 8005490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005492:	230b      	movs	r3, #11
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800549a:	4619      	mov	r1, r3
 800549c:	4813      	ldr	r0, [pc, #76]	; (80054ec <HAL_ETH_MspInit+0x178>)
 800549e:	f7fd f921 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80054a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a8:	2302      	movs	r3, #2
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ac:	2300      	movs	r3, #0
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054b0:	2303      	movs	r3, #3
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054b4:	230b      	movs	r3, #11
 80054b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80054b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054bc:	4619      	mov	r1, r3
 80054be:	480c      	ldr	r0, [pc, #48]	; (80054f0 <HAL_ETH_MspInit+0x17c>)
 80054c0:	f7fd f910 	bl	80026e4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80054c4:	2200      	movs	r2, #0
 80054c6:	2105      	movs	r1, #5
 80054c8:	203d      	movs	r0, #61	; 0x3d
 80054ca:	f7fb ff5d 	bl	8001388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80054ce:	203d      	movs	r0, #61	; 0x3d
 80054d0:	f7fb ff76 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80054d4:	bf00      	nop
 80054d6:	3738      	adds	r7, #56	; 0x38
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40028000 	.word	0x40028000
 80054e0:	40023800 	.word	0x40023800
 80054e4:	40020800 	.word	0x40020800
 80054e8:	40020000 	.word	0x40020000
 80054ec:	40020400 	.word	0x40020400
 80054f0:	40021800 	.word	0x40021800

080054f4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <HAL_ETH_RxCpltCallback+0x1c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fd17 	bl	8005f34 <osSemaphoreRelease>
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	200008fc 	.word	0x200008fc

08005514 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005514:	b5b0      	push	{r4, r5, r7, lr}
 8005516:	b090      	sub	sp, #64	; 0x40
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005520:	4b60      	ldr	r3, [pc, #384]	; (80056a4 <low_level_init+0x190>)
 8005522:	4a61      	ldr	r2, [pc, #388]	; (80056a8 <low_level_init+0x194>)
 8005524:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005526:	4b5f      	ldr	r3, [pc, #380]	; (80056a4 <low_level_init+0x190>)
 8005528:	2201      	movs	r2, #1
 800552a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800552c:	4b5d      	ldr	r3, [pc, #372]	; (80056a4 <low_level_init+0x190>)
 800552e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005532:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005534:	4b5b      	ldr	r3, [pc, #364]	; (80056a4 <low_level_init+0x190>)
 8005536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800553a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800553c:	4b59      	ldr	r3, [pc, #356]	; (80056a4 <low_level_init+0x190>)
 800553e:	2200      	movs	r2, #0
 8005540:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800554e:	23e1      	movs	r3, #225	; 0xe1
 8005550:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8005554:	2300      	movs	r3, #0
 8005556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800555a:	2300      	movs	r3, #0
 800555c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8005566:	4a4f      	ldr	r2, [pc, #316]	; (80056a4 <low_level_init+0x190>)
 8005568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800556c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800556e:	4b4d      	ldr	r3, [pc, #308]	; (80056a4 <low_level_init+0x190>)
 8005570:	2201      	movs	r2, #1
 8005572:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005574:	4b4b      	ldr	r3, [pc, #300]	; (80056a4 <low_level_init+0x190>)
 8005576:	2200      	movs	r2, #0
 8005578:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800557a:	4b4a      	ldr	r3, [pc, #296]	; (80056a4 <low_level_init+0x190>)
 800557c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005580:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005582:	4848      	ldr	r0, [pc, #288]	; (80056a4 <low_level_init+0x190>)
 8005584:	f7fb ff2a 	bl	80013dc <HAL_ETH_Init>
 8005588:	4603      	mov	r3, r0
 800558a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800558e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005592:	2b00      	cmp	r3, #0
 8005594:	d108      	bne.n	80055a8 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800559c:	f043 0304 	orr.w	r3, r3, #4
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80055a8:	2304      	movs	r3, #4
 80055aa:	4a40      	ldr	r2, [pc, #256]	; (80056ac <low_level_init+0x198>)
 80055ac:	4940      	ldr	r1, [pc, #256]	; (80056b0 <low_level_init+0x19c>)
 80055ae:	483d      	ldr	r0, [pc, #244]	; (80056a4 <low_level_init+0x190>)
 80055b0:	f7fc f8ae 	bl	8001710 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80055b4:	2304      	movs	r3, #4
 80055b6:	4a3f      	ldr	r2, [pc, #252]	; (80056b4 <low_level_init+0x1a0>)
 80055b8:	493f      	ldr	r1, [pc, #252]	; (80056b8 <low_level_init+0x1a4>)
 80055ba:	483a      	ldr	r0, [pc, #232]	; (80056a4 <low_level_init+0x190>)
 80055bc:	f7fc f911 	bl	80017e2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2206      	movs	r2, #6
 80055c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80055c8:	4b36      	ldr	r3, [pc, #216]	; (80056a4 <low_level_init+0x190>)
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80055d4:	4b33      	ldr	r3, [pc, #204]	; (80056a4 <low_level_init+0x190>)
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	785a      	ldrb	r2, [r3, #1]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80055e0:	4b30      	ldr	r3, [pc, #192]	; (80056a4 <low_level_init+0x190>)
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	789a      	ldrb	r2, [r3, #2]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80055ec:	4b2d      	ldr	r3, [pc, #180]	; (80056a4 <low_level_init+0x190>)
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	78da      	ldrb	r2, [r3, #3]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80055f8:	4b2a      	ldr	r3, [pc, #168]	; (80056a4 <low_level_init+0x190>)
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	791a      	ldrb	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005604:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <low_level_init+0x190>)
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	795a      	ldrb	r2, [r3, #5]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005616:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800561e:	f043 030a 	orr.w	r3, r3, #10
 8005622:	b2da      	uxtb	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800562a:	2300      	movs	r3, #0
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
 800562e:	2300      	movs	r3, #0
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8005632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005636:	2101      	movs	r1, #1
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fbfb 	bl	8005e34 <osSemaphoreCreate>
 800563e:	4603      	mov	r3, r0
 8005640:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <low_level_init+0x1a8>)
 8005642:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005644:	4b1e      	ldr	r3, [pc, #120]	; (80056c0 <low_level_init+0x1ac>)
 8005646:	f107 040c 	add.w	r4, r7, #12
 800564a:	461d      	mov	r5, r3
 800564c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800564e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 faeb 	bl	8005c3a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005664:	480f      	ldr	r0, [pc, #60]	; (80056a4 <low_level_init+0x190>)
 8005666:	f7fc fbe4 	bl	8001e32 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800566a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800566e:	461a      	mov	r2, r3
 8005670:	211d      	movs	r1, #29
 8005672:	480c      	ldr	r0, [pc, #48]	; (80056a4 <low_level_init+0x190>)
 8005674:	f7fc fb0f 	bl	8001c96 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	f043 030b 	orr.w	r3, r3, #11
 800567e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	461a      	mov	r2, r3
 8005684:	211d      	movs	r1, #29
 8005686:	4807      	ldr	r0, [pc, #28]	; (80056a4 <low_level_init+0x190>)
 8005688:	f7fc fb6d 	bl	8001d66 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800568c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005690:	461a      	mov	r2, r3
 8005692:	211d      	movs	r1, #29
 8005694:	4803      	ldr	r0, [pc, #12]	; (80056a4 <low_level_init+0x190>)
 8005696:	f7fc fafe 	bl	8001c96 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800569a:	bf00      	nop
 800569c:	3740      	adds	r7, #64	; 0x40
 800569e:	46bd      	mov	sp, r7
 80056a0:	bdb0      	pop	{r4, r5, r7, pc}
 80056a2:	bf00      	nop
 80056a4:	2000b6b0 	.word	0x2000b6b0
 80056a8:	40028000 	.word	0x40028000
 80056ac:	2000b6f8 	.word	0x2000b6f8
 80056b0:	20009de0 	.word	0x20009de0
 80056b4:	20009e60 	.word	0x20009e60
 80056b8:	2000b630 	.word	0x2000b630
 80056bc:	200008fc 	.word	0x200008fc
 80056c0:	0801cc28 	.word	0x0801cc28

080056c4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	; 0x28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80056ce:	4b4b      	ldr	r3, [pc, #300]	; (80057fc <low_level_output+0x138>)
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80056e6:	4b45      	ldr	r3, [pc, #276]	; (80057fc <low_level_output+0x138>)
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	623b      	str	r3, [r7, #32]
 80056f4:	e05a      	b.n	80057ac <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	da03      	bge.n	8005706 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80056fe:	23f8      	movs	r3, #248	; 0xf8
 8005700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005704:	e05c      	b.n	80057c0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	895b      	ldrh	r3, [r3, #10]
 800570a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005710:	e02f      	b.n	8005772 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	18d0      	adds	r0, r2, r3
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	18d1      	adds	r1, r2, r3
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	461a      	mov	r2, r3
 800572a:	f016 f8b3 	bl	801b894 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	da03      	bge.n	8005744 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800573c:	23f8      	movs	r3, #248	; 0xf8
 800573e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005742:	e03d      	b.n	80057c0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005754:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005760:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800576c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800577c:	4293      	cmp	r3, r2
 800577e:	d8c8      	bhi.n	8005712 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	18d0      	adds	r0, r2, r3
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4413      	add	r3, r2
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4619      	mov	r1, r3
 8005792:	f016 f87f 	bl	801b894 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	623b      	str	r3, [r7, #32]
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1a1      	bne.n	80056f6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	4811      	ldr	r0, [pc, #68]	; (80057fc <low_level_output+0x138>)
 80057b6:	f7fc f881 	bl	80018bc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80057c0:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <low_level_output+0x138>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	f241 0314 	movw	r3, #4116	; 0x1014
 80057c8:	4413      	add	r3, r2
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <low_level_output+0x138>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80057dc:	4413      	add	r3, r2
 80057de:	2220      	movs	r2, #32
 80057e0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <low_level_output+0x138>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	f241 0304 	movw	r3, #4100	; 0x1004
 80057ea:	4413      	add	r3, r2
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80057f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3728      	adds	r7, #40	; 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	2000b6b0 	.word	0x2000b6b0

08005800 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08c      	sub	sp, #48	; 0x30
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005808:	2300      	movs	r3, #0
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005820:	2300      	movs	r3, #0
 8005822:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005824:	484f      	ldr	r0, [pc, #316]	; (8005964 <low_level_input+0x164>)
 8005826:	f7fc f933 	bl	8001a90 <HAL_ETH_GetReceivedFrame_IT>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <low_level_input+0x34>

    return NULL;
 8005830:	2300      	movs	r3, #0
 8005832:	e092      	b.n	800595a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005834:	4b4b      	ldr	r3, [pc, #300]	; (8005964 <low_level_input+0x164>)
 8005836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005838:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800583a:	4b4a      	ldr	r3, [pc, #296]	; (8005964 <low_level_input+0x164>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005840:	89fb      	ldrh	r3, [r7, #14]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005846:	89fb      	ldrh	r3, [r7, #14]
 8005848:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800584c:	4619      	mov	r1, r3
 800584e:	2000      	movs	r0, #0
 8005850:	f007 ffcc 	bl	800d7ec <pbuf_alloc>
 8005854:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d04b      	beq.n	80058f4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800585c:	4b41      	ldr	r3, [pc, #260]	; (8005964 <low_level_input+0x164>)
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
 800586a:	e040      	b.n	80058ee <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	895b      	ldrh	r3, [r3, #10]
 8005870:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005876:	e021      	b.n	80058bc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	18d0      	adds	r0, r2, r3
 8005880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	18d1      	adds	r1, r2, r3
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	461a      	mov	r2, r3
 8005890:	f016 f800 	bl	801b894 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	4413      	add	r3, r2
 80058a6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80058aa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80058b6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d8d6      	bhi.n	8005878 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	18d0      	adds	r0, r2, r3
 80058d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4619      	mov	r1, r3
 80058dc:	f015 ffda 	bl	801b894 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	4413      	add	r3, r2
 80058e6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1bb      	bne.n	800586c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <low_level_input+0x164>)
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	e00b      	b.n	8005918 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3301      	adds	r3, #1
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	4b12      	ldr	r3, [pc, #72]	; (8005964 <low_level_input+0x164>)
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	429a      	cmp	r2, r3
 8005920:	d3ee      	bcc.n	8005900 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005922:	4b10      	ldr	r3, [pc, #64]	; (8005964 <low_level_input+0x164>)
 8005924:	2200      	movs	r2, #0
 8005926:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005928:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <low_level_input+0x164>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005930:	4413      	add	r3, r2
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800593c:	4b09      	ldr	r3, [pc, #36]	; (8005964 <low_level_input+0x164>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	f241 0314 	movw	r3, #4116	; 0x1014
 8005944:	4413      	add	r3, r2
 8005946:	2280      	movs	r2, #128	; 0x80
 8005948:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <low_level_input+0x164>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	f241 0308 	movw	r3, #4104	; 0x1008
 8005952:	4413      	add	r3, r2
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800595a:	4618      	mov	r0, r3
 800595c:	3730      	adds	r7, #48	; 0x30
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	2000b6b0 	.word	0x2000b6b0

08005968 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005974:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <ethernetif_input+0x58>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fa8b 	bl	8005e98 <osSemaphoreWait>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f5      	bne.n	8005974 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005988:	480e      	ldr	r0, [pc, #56]	; (80059c4 <ethernetif_input+0x5c>)
 800598a:	f014 f857 	bl	8019a3c <sys_mutex_lock>
        p = low_level_input( netif );
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7ff ff36 	bl	8005800 <low_level_input>
 8005994:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	68f9      	ldr	r1, [r7, #12]
 80059a2:	68b8      	ldr	r0, [r7, #8]
 80059a4:	4798      	blx	r3
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80059ac:	68b8      	ldr	r0, [r7, #8]
 80059ae:	f008 fa33 	bl	800de18 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80059b2:	4804      	ldr	r0, [pc, #16]	; (80059c4 <ethernetif_input+0x5c>)
 80059b4:	f014 f851 	bl	8019a5a <sys_mutex_unlock>
      } while(p!=NULL);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e4      	bne.n	8005988 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80059be:	e7d9      	b.n	8005974 <ethernetif_input+0xc>
 80059c0:	200008fc 	.word	0x200008fc
 80059c4:	2000cf08 	.word	0x2000cf08

080059c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <ethernetif_init+0x1c>
 80059d6:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <ethernetif_init+0x48>)
 80059d8:	f240 2235 	movw	r2, #565	; 0x235
 80059dc:	490d      	ldr	r1, [pc, #52]	; (8005a14 <ethernetif_init+0x4c>)
 80059de:	480e      	ldr	r0, [pc, #56]	; (8005a18 <ethernetif_init+0x50>)
 80059e0:	f015 ff6e 	bl	801b8c0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2273      	movs	r2, #115	; 0x73
 80059e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2274      	movs	r2, #116	; 0x74
 80059f0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <ethernetif_init+0x54>)
 80059f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <ethernetif_init+0x58>)
 80059fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff fd87 	bl	8005514 <low_level_init>

  return ERR_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	0801cc44 	.word	0x0801cc44
 8005a14:	0801cc60 	.word	0x0801cc60
 8005a18:	0801cc70 	.word	0x0801cc70
 8005a1c:	08017799 	.word	0x08017799
 8005a20:	080056c5 	.word	0x080056c5

08005a24 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005a28:	f7fb fbc6 	bl	80011b8 <HAL_GetTick>
 8005a2c:	4603      	mov	r3, r0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005a44:	f107 0308 	add.w	r3, r7, #8
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	4816      	ldr	r0, [pc, #88]	; (8005aa8 <ethernetif_set_link+0x74>)
 8005a4e:	f7fc f922 	bl	8001c96 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d108      	bne.n	8005a7c <ethernetif_set_link+0x48>
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f007 fd87 	bl	800d588 <netif_set_link_up>
 8005a7a:	e011      	b.n	8005aa0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a84:	089b      	lsrs	r3, r3, #2
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <ethernetif_set_link+0x6c>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f007 fdac 	bl	800d5f8 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005aa0:	20c8      	movs	r0, #200	; 0xc8
 8005aa2:	f000 f916 	bl	8005cd2 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005aa6:	e7cd      	b.n	8005a44 <ethernetif_set_link+0x10>
 8005aa8:	2000b6b0 	.word	0x2000b6b0

08005aac <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ac2:	089b      	lsrs	r3, r3, #2
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d05d      	beq.n	8005b8a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005ace:	4b34      	ldr	r3, [pc, #208]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d03f      	beq.n	8005b56 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005ad6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ada:	2100      	movs	r1, #0
 8005adc:	4830      	ldr	r0, [pc, #192]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005ade:	f7fc f942 	bl	8001d66 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005ae2:	f7fb fb69 	bl	80011b8 <HAL_GetTick>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005aea:	f107 0308 	add.w	r3, r7, #8
 8005aee:	461a      	mov	r2, r3
 8005af0:	2101      	movs	r1, #1
 8005af2:	482b      	ldr	r0, [pc, #172]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005af4:	f7fc f8cf 	bl	8001c96 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005af8:	f7fb fb5e 	bl	80011b8 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b06:	d828      	bhi.n	8005b5a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0eb      	beq.n	8005aea <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005b12:	f107 0308 	add.w	r3, r7, #8
 8005b16:	461a      	mov	r2, r3
 8005b18:	2110      	movs	r1, #16
 8005b1a:	4821      	ldr	r0, [pc, #132]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b1c:	f7fc f8bb 	bl	8001c96 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d004      	beq.n	8005b34 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005b2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	e002      	b.n	8005b3a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005b34:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005b44:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]
 8005b4a:	e016      	b.n	8005b7a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005b4c:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	e011      	b.n	8005b7a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005b56:	bf00      	nop
 8005b58:	e000      	b.n	8005b5c <ethernetif_update_config+0xb0>
          goto error;
 8005b5a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005b5c:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	08db      	lsrs	r3, r3, #3
 8005b62:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005b64:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	085b      	lsrs	r3, r3, #1
 8005b6a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	2100      	movs	r1, #0
 8005b74:	480a      	ldr	r0, [pc, #40]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b76:	f7fc f8f6 	bl	8001d66 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4808      	ldr	r0, [pc, #32]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b7e:	f7fc f9b7 	bl	8001ef0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005b82:	4807      	ldr	r0, [pc, #28]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b84:	f7fc f955 	bl	8001e32 <HAL_ETH_Start>
 8005b88:	e002      	b.n	8005b90 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005b8a:	4805      	ldr	r0, [pc, #20]	; (8005ba0 <ethernetif_update_config+0xf4>)
 8005b8c:	f7fc f980 	bl	8001e90 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f807 	bl	8005ba4 <ethernetif_notify_conn_changed>
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	2000b6b0 	.word	0x2000b6b0

08005ba4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bca:	2b84      	cmp	r3, #132	; 0x84
 8005bcc:	d005      	beq.n	8005bda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005bce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	3303      	adds	r3, #3
 8005bd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005bda:	68fb      	ldr	r3, [r7, #12]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	607b      	str	r3, [r7, #4]
  return(result);
 8005bf4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	bf14      	ite	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	2300      	moveq	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c10:	f001 fd7c 	bl	800770c <vTaskStartScheduler>
  
  return osOK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005c1e:	f7ff ffe3 	bl	8005be8 <inHandlerMode>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005c28:	f001 fe90 	bl	800794c <xTaskGetTickCountFromISR>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	e002      	b.n	8005c36 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005c30:	f001 fe7c 	bl	800792c <xTaskGetTickCount>
 8005c34:	4603      	mov	r3, r0
  }
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3c:	b089      	sub	sp, #36	; 0x24
 8005c3e:	af04      	add	r7, sp, #16
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d020      	beq.n	8005c8e <osThreadCreate+0x54>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01c      	beq.n	8005c8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685c      	ldr	r4, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681d      	ldr	r5, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691e      	ldr	r6, [r3, #16]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff ffa6 	bl	8005bb8 <makeFreeRtosPriority>
 8005c6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c76:	9202      	str	r2, [sp, #8]
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	9100      	str	r1, [sp, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	4632      	mov	r2, r6
 8005c80:	4629      	mov	r1, r5
 8005c82:	4620      	mov	r0, r4
 8005c84:	f001 fb68 	bl	8007358 <xTaskCreateStatic>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	e01c      	b.n	8005cc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685c      	ldr	r4, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c9a:	b29e      	uxth	r6, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff ff88 	bl	8005bb8 <makeFreeRtosPriority>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	f107 030c 	add.w	r3, r7, #12
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	9200      	str	r2, [sp, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f001 fbb0 	bl	800741e <xTaskCreate>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d001      	beq.n	8005cc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e000      	b.n	8005cca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <osDelay+0x16>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	e000      	b.n	8005cea <osDelay+0x18>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 fcd8 	bl	80076a0 <vTaskDelay>
  
  return osOK;
 8005cf0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	2001      	movs	r0, #1
 8005d12:	f000 fc92 	bl	800663a <xQueueCreateMutexStatic>
 8005d16:	4603      	mov	r3, r0
 8005d18:	e003      	b.n	8005d22 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	f000 fc75 	bl	800660a <xQueueCreateMutex>
 8005d20:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <osMutexWait+0x18>
    return osErrorParameter;
 8005d40:	2380      	movs	r3, #128	; 0x80
 8005d42:	e03a      	b.n	8005dba <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d4e:	d103      	bne.n	8005d58 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	e009      	b.n	8005d6c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <osMutexWait+0x40>
      ticks = 1;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005d6c:	f7ff ff3c 	bl	8005be8 <inHandlerMode>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d017      	beq.n	8005da6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005d76:	f107 0308 	add.w	r3, r7, #8
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 f8ac 	bl	8006edc <xQueueReceiveFromISR>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d001      	beq.n	8005d8e <osMutexWait+0x62>
      return osErrorOS;
 8005d8a:	23ff      	movs	r3, #255	; 0xff
 8005d8c:	e015      	b.n	8005dba <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d011      	beq.n	8005db8 <osMutexWait+0x8c>
 8005d94:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <osMutexWait+0x98>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	e008      	b.n	8005db8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005da6:	68f9      	ldr	r1, [r7, #12]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 ff83 	bl	8006cb4 <xQueueSemaphoreTake>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d001      	beq.n	8005db8 <osMutexWait+0x8c>
    return osErrorOS;
 8005db4:	23ff      	movs	r3, #255	; 0xff
 8005db6:	e000      	b.n	8005dba <osMutexWait+0x8e>
  }
  
  return osOK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005dd8:	f7ff ff06 	bl	8005be8 <inHandlerMode>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d016      	beq.n	8005e10 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005de2:	f107 0308 	add.w	r3, r7, #8
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fde7 	bl	80069bc <xQueueGiveFromISR>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d001      	beq.n	8005df8 <osMutexRelease+0x30>
      return osErrorOS;
 8005df4:	23ff      	movs	r3, #255	; 0xff
 8005df6:	e017      	b.n	8005e28 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d013      	beq.n	8005e26 <osMutexRelease+0x5e>
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <osMutexRelease+0x68>)
 8005e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	e00a      	b.n	8005e26 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005e10:	2300      	movs	r3, #0
 8005e12:	2200      	movs	r2, #0
 8005e14:	2100      	movs	r1, #0
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fc2a 	bl	8006670 <xQueueGenericSend>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d001      	beq.n	8005e26 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005e22:	23ff      	movs	r3, #255	; 0xff
 8005e24:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00f      	beq.n	8005e66 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d10a      	bne.n	8005e62 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2203      	movs	r2, #3
 8005e52:	9200      	str	r2, [sp, #0]
 8005e54:	2200      	movs	r2, #0
 8005e56:	2100      	movs	r1, #0
 8005e58:	2001      	movs	r0, #1
 8005e5a:	f000 fad9 	bl	8006410 <xQueueGenericCreateStatic>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	e016      	b.n	8005e90 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e014      	b.n	8005e90 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d110      	bne.n	8005e8e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	2100      	movs	r1, #0
 8005e70:	2001      	movs	r0, #1
 8005e72:	f000 fb4f 	bl	8006514 <xQueueGenericCreate>
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d005      	beq.n	8005e8a <osSemaphoreCreate+0x56>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2200      	movs	r2, #0
 8005e82:	2100      	movs	r1, #0
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fbf3 	bl	8006670 <xQueueGenericSend>
      return sema;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	e000      	b.n	8005e90 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005e8e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	e03a      	b.n	8005f26 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eba:	d103      	bne.n	8005ec4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e009      	b.n	8005ed8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d006      	beq.n	8005ed8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <osSemaphoreWait+0x40>
      ticks = 1;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005ed8:	f7ff fe86 	bl	8005be8 <inHandlerMode>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d017      	beq.n	8005f12 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005ee2:	f107 0308 	add.w	r3, r7, #8
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2100      	movs	r1, #0
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fff6 	bl	8006edc <xQueueReceiveFromISR>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d001      	beq.n	8005efa <osSemaphoreWait+0x62>
      return osErrorOS;
 8005ef6:	23ff      	movs	r3, #255	; 0xff
 8005ef8:	e015      	b.n	8005f26 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d011      	beq.n	8005f24 <osSemaphoreWait+0x8c>
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <osSemaphoreWait+0x98>)
 8005f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	e008      	b.n	8005f24 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fecd 	bl	8006cb4 <xQueueSemaphoreTake>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d001      	beq.n	8005f24 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005f20:	23ff      	movs	r3, #255	; 0xff
 8005f22:	e000      	b.n	8005f26 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005f44:	f7ff fe50 	bl	8005be8 <inHandlerMode>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d016      	beq.n	8005f7c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005f4e:	f107 0308 	add.w	r3, r7, #8
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fd31 	bl	80069bc <xQueueGiveFromISR>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d001      	beq.n	8005f64 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005f60:	23ff      	movs	r3, #255	; 0xff
 8005f62:	e017      	b.n	8005f94 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d013      	beq.n	8005f92 <osSemaphoreRelease+0x5e>
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <osSemaphoreRelease+0x68>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	e00a      	b.n	8005f92 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2100      	movs	r1, #0
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb74 	bl	8006670 <xQueueGenericSend>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d001      	beq.n	8005f92 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005f8e:	23ff      	movs	r3, #255	; 0xff
 8005f90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005f92:	68fb      	ldr	r3, [r7, #12]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005fa8:	f7ff fe1e 	bl	8005be8 <inHandlerMode>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005fb2:	2382      	movs	r3, #130	; 0x82
 8005fb4:	e003      	b.n	8005fbe <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 f856 	bl	8007068 <vQueueDelete>

  return osOK; 
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005fc6:	b590      	push	{r4, r7, lr}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af02      	add	r7, sp, #8
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d011      	beq.n	8005ffc <osMessageCreate+0x36>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00d      	beq.n	8005ffc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6859      	ldr	r1, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	2400      	movs	r4, #0
 8005ff2:	9400      	str	r4, [sp, #0]
 8005ff4:	f000 fa0c 	bl	8006410 <xQueueGenericCreateStatic>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	e008      	b.n	800600e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	4619      	mov	r1, r3
 8006008:	f000 fa84 	bl	8006514 <xQueueGenericCreate>
 800600c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800600e:	4618      	mov	r0, r3
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	bd90      	pop	{r4, r7, pc}
	...

08006018 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006024:	2300      	movs	r3, #0
 8006026:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <osMessagePut+0x1e>
    ticks = 1;
 8006032:	2301      	movs	r3, #1
 8006034:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006036:	f7ff fdd7 	bl	8005be8 <inHandlerMode>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d018      	beq.n	8006072 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006040:	f107 0210 	add.w	r2, r7, #16
 8006044:	f107 0108 	add.w	r1, r7, #8
 8006048:	2300      	movs	r3, #0
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fc16 	bl	800687c <xQueueGenericSendFromISR>
 8006050:	4603      	mov	r3, r0
 8006052:	2b01      	cmp	r3, #1
 8006054:	d001      	beq.n	800605a <osMessagePut+0x42>
      return osErrorOS;
 8006056:	23ff      	movs	r3, #255	; 0xff
 8006058:	e018      	b.n	800608c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d014      	beq.n	800608a <osMessagePut+0x72>
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <osMessagePut+0x7c>)
 8006062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	e00b      	b.n	800608a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006072:	f107 0108 	add.w	r1, r7, #8
 8006076:	2300      	movs	r3, #0
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 faf8 	bl	8006670 <xQueueGenericSend>
 8006080:	4603      	mov	r3, r0
 8006082:	2b01      	cmp	r3, #1
 8006084:	d001      	beq.n	800608a <osMessagePut+0x72>
      return osErrorOS;
 8006086:	23ff      	movs	r3, #255	; 0xff
 8006088:	e000      	b.n	800608c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b08b      	sub	sp, #44	; 0x2c
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	617b      	str	r3, [r7, #20]
    return event;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	461c      	mov	r4, r3
 80060ba:	f107 0314 	add.w	r3, r7, #20
 80060be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060c6:	e054      	b.n	8006172 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d6:	d103      	bne.n	80060e0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80060d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
 80060de:	e009      	b.n	80060f4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d006      	beq.n	80060f4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <osMessageGet+0x5c>
      ticks = 1;
 80060f0:	2301      	movs	r3, #1
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80060f4:	f7ff fd78 	bl	8005be8 <inHandlerMode>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d01c      	beq.n	8006138 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80060fe:	f107 0220 	add.w	r2, r7, #32
 8006102:	f107 0314 	add.w	r3, r7, #20
 8006106:	3304      	adds	r3, #4
 8006108:	4619      	mov	r1, r3
 800610a:	68b8      	ldr	r0, [r7, #8]
 800610c:	f000 fee6 	bl	8006edc <xQueueReceiveFromISR>
 8006110:	4603      	mov	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d102      	bne.n	800611c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006116:	2310      	movs	r3, #16
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e001      	b.n	8006120 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01d      	beq.n	8006162 <osMessageGet+0xca>
 8006126:	4b15      	ldr	r3, [pc, #84]	; (800617c <osMessageGet+0xe4>)
 8006128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	e014      	b.n	8006162 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006138:	f107 0314 	add.w	r3, r7, #20
 800613c:	3304      	adds	r3, #4
 800613e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006140:	4619      	mov	r1, r3
 8006142:	68b8      	ldr	r0, [r7, #8]
 8006144:	f000 fcd0 	bl	8006ae8 <xQueueReceive>
 8006148:	4603      	mov	r3, r0
 800614a:	2b01      	cmp	r3, #1
 800614c:	d102      	bne.n	8006154 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800614e:	2310      	movs	r3, #16
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e006      	b.n	8006162 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <osMessageGet+0xc6>
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <osMessageGet+0xc8>
 800615e:	2340      	movs	r3, #64	; 0x40
 8006160:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	461c      	mov	r4, r3
 8006166:	f107 0314 	add.w	r3, r7, #20
 800616a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800616e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	372c      	adds	r7, #44	; 0x2c
 8006176:	46bd      	mov	sp, r7
 8006178:	bd90      	pop	{r4, r7, pc}
 800617a:	bf00      	nop
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006188:	f7ff fd2e 	bl	8005be8 <inHandlerMode>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 ff48 	bl	8007028 <uxQueueMessagesWaitingFromISR>
 8006198:	4603      	mov	r3, r0
 800619a:	e003      	b.n	80061a4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 ff23 	bl	8006fe8 <uxQueueMessagesWaiting>
 80061a2:	4603      	mov	r3, r0
  }
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80061b4:	f7ff fd18 	bl	8005be8 <inHandlerMode>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <osMessageDelete+0x16>
    return osErrorISR;
 80061be:	2382      	movs	r3, #130	; 0x82
 80061c0:	e003      	b.n	80061ca <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 ff50 	bl	8007068 <vQueueDelete>

  return osOK; 
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f103 0208 	add.w	r2, r3, #8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f103 0208 	add.w	r2, r3, #8
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f103 0208 	add.w	r2, r3, #8
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]
}
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800628a:	d103      	bne.n	8006294 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e00c      	b.n	80062ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3308      	adds	r3, #8
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	e002      	b.n	80062a2 <vListInsert+0x2e>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d2f6      	bcs.n	800629c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
}
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6892      	ldr	r2, [r2, #8]
 80062fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6852      	ldr	r2, [r2, #4]
 8006306:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	429a      	cmp	r2, r3
 8006310:	d103      	bne.n	800631a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	1e5a      	subs	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
	...

0800633c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10c      	bne.n	800636a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	b672      	cpsid	i
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	b662      	cpsie	i
 8006364:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800636a:	f002 f977 	bl	800865c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006376:	68f9      	ldr	r1, [r7, #12]
 8006378:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800637a:	fb01 f303 	mul.w	r3, r1, r3
 800637e:	441a      	add	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	3b01      	subs	r3, #1
 800639c:	68f9      	ldr	r1, [r7, #12]
 800639e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	441a      	add	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	22ff      	movs	r2, #255	; 0xff
 80063ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	22ff      	movs	r2, #255	; 0xff
 80063b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d114      	bne.n	80063ea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01a      	beq.n	80063fe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3310      	adds	r3, #16
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 fc31 	bl	8007c34 <xTaskRemoveFromEventList>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d012      	beq.n	80063fe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063d8:	4b0c      	ldr	r3, [pc, #48]	; (800640c <xQueueGenericReset+0xd0>)
 80063da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	e009      	b.n	80063fe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3310      	adds	r3, #16
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff feef 	bl	80061d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3324      	adds	r3, #36	; 0x24
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff feea 	bl	80061d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063fe:	f002 f961 	bl	80086c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006402:	2301      	movs	r3, #1
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	e000ed04 	.word	0xe000ed04

08006410 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08e      	sub	sp, #56	; 0x38
 8006414:	af02      	add	r7, sp, #8
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10c      	bne.n	800643e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	b672      	cpsid	i
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	b662      	cpsie	i
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10c      	bne.n	800645e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	b672      	cpsid	i
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	b662      	cpsie	i
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <xQueueGenericCreateStatic+0x5a>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <xQueueGenericCreateStatic+0x5e>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <xQueueGenericCreateStatic+0x60>
 800646e:	2300      	movs	r3, #0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10c      	bne.n	800648e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	b672      	cpsid	i
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	b662      	cpsie	i
 8006488:	623b      	str	r3, [r7, #32]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <xQueueGenericCreateStatic+0x8a>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <xQueueGenericCreateStatic+0x8e>
 800649a:	2301      	movs	r3, #1
 800649c:	e000      	b.n	80064a0 <xQueueGenericCreateStatic+0x90>
 800649e:	2300      	movs	r3, #0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10c      	bne.n	80064be <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	b672      	cpsid	i
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	b662      	cpsie	i
 80064b8:	61fb      	str	r3, [r7, #28]
}
 80064ba:	bf00      	nop
 80064bc:	e7fe      	b.n	80064bc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064be:	2348      	movs	r3, #72	; 0x48
 80064c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b48      	cmp	r3, #72	; 0x48
 80064c6:	d00c      	beq.n	80064e2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	b672      	cpsid	i
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	b662      	cpsie	i
 80064dc:	61bb      	str	r3, [r7, #24]
}
 80064de:	bf00      	nop
 80064e0:	e7fe      	b.n	80064e0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	4613      	mov	r3, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f847 	bl	8006598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800650c:	4618      	mov	r0, r3
 800650e:	3730      	adds	r7, #48	; 0x30
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	; 0x28
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	4613      	mov	r3, r2
 8006520:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10c      	bne.n	8006542 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652c:	b672      	cpsid	i
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	b662      	cpsie	i
 800653c:	613b      	str	r3, [r7, #16]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006548:	2300      	movs	r3, #0
 800654a:	61fb      	str	r3, [r7, #28]
 800654c:	e004      	b.n	8006558 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3348      	adds	r3, #72	; 0x48
 800655c:	4618      	mov	r0, r3
 800655e:	f002 f9a9 	bl	80088b4 <pvPortMalloc>
 8006562:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d011      	beq.n	800658e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	3348      	adds	r3, #72	; 0x48
 8006572:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800657c:	79fa      	ldrb	r2, [r7, #7]
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	4613      	mov	r3, r2
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f805 	bl	8006598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800658e:	69bb      	ldr	r3, [r7, #24]
	}
 8006590:	4618      	mov	r0, r3
 8006592:	3720      	adds	r7, #32
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e002      	b.n	80065ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065c6:	2101      	movs	r1, #1
 80065c8:	69b8      	ldr	r0, [r7, #24]
 80065ca:	f7ff feb7 	bl	800633c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00e      	beq.n	8006602 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80065f6:	2300      	movs	r3, #0
 80065f8:	2200      	movs	r2, #0
 80065fa:	2100      	movs	r1, #0
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f837 	bl	8006670 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006602:	bf00      	nop
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800660a:	b580      	push	{r7, lr}
 800660c:	b086      	sub	sp, #24
 800660e:	af00      	add	r7, sp, #0
 8006610:	4603      	mov	r3, r0
 8006612:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006614:	2301      	movs	r3, #1
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	2300      	movs	r3, #0
 800661a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	461a      	mov	r2, r3
 8006620:	6939      	ldr	r1, [r7, #16]
 8006622:	6978      	ldr	r0, [r7, #20]
 8006624:	f7ff ff76 	bl	8006514 <xQueueGenericCreate>
 8006628:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f7ff ffd3 	bl	80065d6 <prvInitialiseMutex>

		return xNewQueue;
 8006630:	68fb      	ldr	r3, [r7, #12]
	}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800663a:	b580      	push	{r7, lr}
 800663c:	b088      	sub	sp, #32
 800663e:	af02      	add	r7, sp, #8
 8006640:	4603      	mov	r3, r0
 8006642:	6039      	str	r1, [r7, #0]
 8006644:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006646:	2301      	movs	r3, #1
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	6939      	ldr	r1, [r7, #16]
 8006658:	6978      	ldr	r0, [r7, #20]
 800665a:	f7ff fed9 	bl	8006410 <xQueueGenericCreateStatic>
 800665e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff ffb8 	bl	80065d6 <prvInitialiseMutex>

		return xNewQueue;
 8006666:	68fb      	ldr	r3, [r7, #12]
	}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08e      	sub	sp, #56	; 0x38
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800667e:	2300      	movs	r3, #0
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10c      	bne.n	80066a6 <xQueueGenericSend+0x36>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	b672      	cpsid	i
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	b662      	cpsie	i
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066a2:	bf00      	nop
 80066a4:	e7fe      	b.n	80066a4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d103      	bne.n	80066b4 <xQueueGenericSend+0x44>
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <xQueueGenericSend+0x48>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <xQueueGenericSend+0x4a>
 80066b8:	2300      	movs	r3, #0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10c      	bne.n	80066d8 <xQueueGenericSend+0x68>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	b672      	cpsid	i
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	b662      	cpsie	i
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066d4:	bf00      	nop
 80066d6:	e7fe      	b.n	80066d6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d103      	bne.n	80066e6 <xQueueGenericSend+0x76>
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <xQueueGenericSend+0x7a>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <xQueueGenericSend+0x7c>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10c      	bne.n	800670a <xQueueGenericSend+0x9a>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	b672      	cpsid	i
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	b662      	cpsie	i
 8006704:	623b      	str	r3, [r7, #32]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800670a:	f001 fc57 	bl	8007fbc <xTaskGetSchedulerState>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d102      	bne.n	800671a <xQueueGenericSend+0xaa>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <xQueueGenericSend+0xae>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <xQueueGenericSend+0xb0>
 800671e:	2300      	movs	r3, #0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10c      	bne.n	800673e <xQueueGenericSend+0xce>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	b672      	cpsid	i
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	b662      	cpsie	i
 8006738:	61fb      	str	r3, [r7, #28]
}
 800673a:	bf00      	nop
 800673c:	e7fe      	b.n	800673c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800673e:	f001 ff8d 	bl	800865c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <xQueueGenericSend+0xe4>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d129      	bne.n	80067a8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800675a:	f000 fcc2 	bl	80070e2 <prvCopyDataToQueue>
 800675e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d010      	beq.n	800678a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	3324      	adds	r3, #36	; 0x24
 800676c:	4618      	mov	r0, r3
 800676e:	f001 fa61 	bl	8007c34 <xTaskRemoveFromEventList>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d013      	beq.n	80067a0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006778:	4b3f      	ldr	r3, [pc, #252]	; (8006878 <xQueueGenericSend+0x208>)
 800677a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	e00a      	b.n	80067a0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006790:	4b39      	ldr	r3, [pc, #228]	; (8006878 <xQueueGenericSend+0x208>)
 8006792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067a0:	f001 ff90 	bl	80086c4 <vPortExitCritical>
				return pdPASS;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e063      	b.n	8006870 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067ae:	f001 ff89 	bl	80086c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e05c      	b.n	8006870 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d106      	bne.n	80067ca <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067bc:	f107 0314 	add.w	r3, r7, #20
 80067c0:	4618      	mov	r0, r3
 80067c2:	f001 fa9b 	bl	8007cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067c6:	2301      	movs	r3, #1
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067ca:	f001 ff7b 	bl	80086c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ce:	f001 f801 	bl	80077d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067d2:	f001 ff43 	bl	800865c <vPortEnterCritical>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067dc:	b25b      	sxtb	r3, r3
 80067de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e2:	d103      	bne.n	80067ec <xQueueGenericSend+0x17c>
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067f2:	b25b      	sxtb	r3, r3
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f8:	d103      	bne.n	8006802 <xQueueGenericSend+0x192>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006802:	f001 ff5f 	bl	80086c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006806:	1d3a      	adds	r2, r7, #4
 8006808:	f107 0314 	add.w	r3, r7, #20
 800680c:	4611      	mov	r1, r2
 800680e:	4618      	mov	r0, r3
 8006810:	f001 fa8a 	bl	8007d28 <xTaskCheckForTimeOut>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d124      	bne.n	8006864 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800681a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800681c:	f000 fd59 	bl	80072d2 <prvIsQueueFull>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d018      	beq.n	8006858 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	3310      	adds	r3, #16
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4611      	mov	r1, r2
 800682e:	4618      	mov	r0, r3
 8006830:	f001 f9da 	bl	8007be8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006836:	f000 fce4 	bl	8007202 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800683a:	f000 ffd9 	bl	80077f0 <xTaskResumeAll>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	f47f af7c 	bne.w	800673e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006846:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <xQueueGenericSend+0x208>)
 8006848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	e772      	b.n	800673e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800685a:	f000 fcd2 	bl	8007202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800685e:	f000 ffc7 	bl	80077f0 <xTaskResumeAll>
 8006862:	e76c      	b.n	800673e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006866:	f000 fccc 	bl	8007202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800686a:	f000 ffc1 	bl	80077f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800686e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006870:	4618      	mov	r0, r3
 8006872:	3738      	adds	r7, #56	; 0x38
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08e      	sub	sp, #56	; 0x38
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10c      	bne.n	80068ae <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	b672      	cpsid	i
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	b662      	cpsie	i
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d103      	bne.n	80068bc <xQueueGenericSendFromISR+0x40>
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <xQueueGenericSendFromISR+0x44>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <xQueueGenericSendFromISR+0x46>
 80068c0:	2300      	movs	r3, #0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10c      	bne.n	80068e0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	b672      	cpsid	i
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	b662      	cpsie	i
 80068da:	623b      	str	r3, [r7, #32]
}
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d103      	bne.n	80068ee <xQueueGenericSendFromISR+0x72>
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <xQueueGenericSendFromISR+0x76>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <xQueueGenericSendFromISR+0x78>
 80068f2:	2300      	movs	r3, #0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10c      	bne.n	8006912 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	b672      	cpsid	i
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	b662      	cpsie	i
 800690c:	61fb      	str	r3, [r7, #28]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006912:	f001 ff8b 	bl	800882c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006916:	f3ef 8211 	mrs	r2, BASEPRI
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	b672      	cpsid	i
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	b662      	cpsie	i
 800692e:	61ba      	str	r2, [r7, #24]
 8006930:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006932:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006934:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693e:	429a      	cmp	r2, r3
 8006940:	d302      	bcc.n	8006948 <xQueueGenericSendFromISR+0xcc>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d12c      	bne.n	80069a2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006958:	f000 fbc3 	bl	80070e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800695c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006964:	d112      	bne.n	800698c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	2b00      	cmp	r3, #0
 800696c:	d016      	beq.n	800699c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	3324      	adds	r3, #36	; 0x24
 8006972:	4618      	mov	r0, r3
 8006974:	f001 f95e 	bl	8007c34 <xTaskRemoveFromEventList>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00e      	beq.n	800699c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	e007      	b.n	800699c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800698c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006990:	3301      	adds	r3, #1
 8006992:	b2db      	uxtb	r3, r3
 8006994:	b25a      	sxtb	r2, r3
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800699c:	2301      	movs	r3, #1
 800699e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80069a0:	e001      	b.n	80069a6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3738      	adds	r7, #56	; 0x38
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08e      	sub	sp, #56	; 0x38
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10c      	bne.n	80069ea <xQueueGiveFromISR+0x2e>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	b672      	cpsid	i
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	b662      	cpsie	i
 80069e4:	623b      	str	r3, [r7, #32]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00c      	beq.n	8006a0c <xQueueGiveFromISR+0x50>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	b672      	cpsid	i
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	b662      	cpsie	i
 8006a06:	61fb      	str	r3, [r7, #28]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <xQueueGiveFromISR+0x60>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <xQueueGiveFromISR+0x64>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <xQueueGiveFromISR+0x66>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10c      	bne.n	8006a40 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	b672      	cpsid	i
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	b662      	cpsie	i
 8006a3a:	61bb      	str	r3, [r7, #24]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a40:	f001 fef4 	bl	800882c <vPortValidateInterruptPriority>
	__asm volatile
 8006a44:	f3ef 8211 	mrs	r2, BASEPRI
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	b672      	cpsid	i
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	b662      	cpsie	i
 8006a5c:	617a      	str	r2, [r7, #20]
 8006a5e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006a60:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d22b      	bcs.n	8006acc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a8e:	d112      	bne.n	8006ab6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d016      	beq.n	8006ac6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	3324      	adds	r3, #36	; 0x24
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 f8c9 	bl	8007c34 <xTaskRemoveFromEventList>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00e      	beq.n	8006ac6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00b      	beq.n	8006ac6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e007      	b.n	8006ac6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aba:	3301      	adds	r3, #1
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	b25a      	sxtb	r2, r3
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aca:	e001      	b.n	8006ad0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f383 8811 	msr	BASEPRI, r3
}
 8006ada:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3738      	adds	r7, #56	; 0x38
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08c      	sub	sp, #48	; 0x30
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10c      	bne.n	8006b1c <xQueueReceive+0x34>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	b672      	cpsid	i
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	b662      	cpsie	i
 8006b16:	623b      	str	r3, [r7, #32]
}
 8006b18:	bf00      	nop
 8006b1a:	e7fe      	b.n	8006b1a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d103      	bne.n	8006b2a <xQueueReceive+0x42>
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <xQueueReceive+0x46>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <xQueueReceive+0x48>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10c      	bne.n	8006b4e <xQueueReceive+0x66>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	b672      	cpsid	i
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	b662      	cpsie	i
 8006b48:	61fb      	str	r3, [r7, #28]
}
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b4e:	f001 fa35 	bl	8007fbc <xTaskGetSchedulerState>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d102      	bne.n	8006b5e <xQueueReceive+0x76>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <xQueueReceive+0x7a>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <xQueueReceive+0x7c>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10c      	bne.n	8006b82 <xQueueReceive+0x9a>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	b672      	cpsid	i
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	b662      	cpsie	i
 8006b7c:	61bb      	str	r3, [r7, #24]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b82:	f001 fd6b 	bl	800865c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d01f      	beq.n	8006bd2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b96:	f000 fb0e 	bl	80071b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	1e5a      	subs	r2, r3, #1
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00f      	beq.n	8006bca <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	3310      	adds	r3, #16
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 f840 	bl	8007c34 <xTaskRemoveFromEventList>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bba:	4b3d      	ldr	r3, [pc, #244]	; (8006cb0 <xQueueReceive+0x1c8>)
 8006bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bca:	f001 fd7b 	bl	80086c4 <vPortExitCritical>
				return pdPASS;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e069      	b.n	8006ca6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d103      	bne.n	8006be0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bd8:	f001 fd74 	bl	80086c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e062      	b.n	8006ca6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006be6:	f107 0310 	add.w	r3, r7, #16
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 f886 	bl	8007cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bf4:	f001 fd66 	bl	80086c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bf8:	f000 fdec 	bl	80077d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bfc:	f001 fd2e 	bl	800865c <vPortEnterCritical>
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c06:	b25b      	sxtb	r3, r3
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c0c:	d103      	bne.n	8006c16 <xQueueReceive+0x12e>
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c1c:	b25b      	sxtb	r3, r3
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c22:	d103      	bne.n	8006c2c <xQueueReceive+0x144>
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c2c:	f001 fd4a 	bl	80086c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c30:	1d3a      	adds	r2, r7, #4
 8006c32:	f107 0310 	add.w	r3, r7, #16
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f001 f875 	bl	8007d28 <xTaskCheckForTimeOut>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d123      	bne.n	8006c8c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c46:	f000 fb2e 	bl	80072a6 <prvIsQueueEmpty>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d017      	beq.n	8006c80 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	3324      	adds	r3, #36	; 0x24
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	4611      	mov	r1, r2
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 ffc5 	bl	8007be8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c60:	f000 facf 	bl	8007202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c64:	f000 fdc4 	bl	80077f0 <xTaskResumeAll>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d189      	bne.n	8006b82 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006c6e:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <xQueueReceive+0x1c8>)
 8006c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	e780      	b.n	8006b82 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c82:	f000 fabe 	bl	8007202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c86:	f000 fdb3 	bl	80077f0 <xTaskResumeAll>
 8006c8a:	e77a      	b.n	8006b82 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c8e:	f000 fab8 	bl	8007202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c92:	f000 fdad 	bl	80077f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c98:	f000 fb05 	bl	80072a6 <prvIsQueueEmpty>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f43f af6f 	beq.w	8006b82 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ca4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3730      	adds	r7, #48	; 0x30
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	e000ed04 	.word	0xe000ed04

08006cb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08e      	sub	sp, #56	; 0x38
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10c      	bne.n	8006cea <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	b672      	cpsid	i
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	b662      	cpsie	i
 8006ce4:	623b      	str	r3, [r7, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00c      	beq.n	8006d0c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	b672      	cpsid	i
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	b662      	cpsie	i
 8006d06:	61fb      	str	r3, [r7, #28]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d0c:	f001 f956 	bl	8007fbc <xTaskGetSchedulerState>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <xQueueSemaphoreTake+0x68>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <xQueueSemaphoreTake+0x6c>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <xQueueSemaphoreTake+0x6e>
 8006d20:	2300      	movs	r3, #0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10c      	bne.n	8006d40 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	b672      	cpsid	i
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	b662      	cpsie	i
 8006d3a:	61bb      	str	r3, [r7, #24]
}
 8006d3c:	bf00      	nop
 8006d3e:	e7fe      	b.n	8006d3e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d40:	f001 fc8c 	bl	800865c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d024      	beq.n	8006d9a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	1e5a      	subs	r2, r3, #1
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d104      	bne.n	8006d6a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006d60:	f001 faf2 	bl	8008348 <pvTaskIncrementMutexHeldCount>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00f      	beq.n	8006d92 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	3310      	adds	r3, #16
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 ff5c 	bl	8007c34 <xTaskRemoveFromEventList>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d82:	4b55      	ldr	r3, [pc, #340]	; (8006ed8 <xQueueSemaphoreTake+0x224>)
 8006d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d92:	f001 fc97 	bl	80086c4 <vPortExitCritical>
				return pdPASS;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e099      	b.n	8006ece <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d113      	bne.n	8006dc8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00c      	beq.n	8006dc0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	b672      	cpsid	i
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	b662      	cpsie	i
 8006dba:	617b      	str	r3, [r7, #20]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006dc0:	f001 fc80 	bl	80086c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e082      	b.n	8006ece <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 ff92 	bl	8007cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ddc:	f001 fc72 	bl	80086c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006de0:	f000 fcf8 	bl	80077d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006de4:	f001 fc3a 	bl	800865c <vPortEnterCritical>
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dee:	b25b      	sxtb	r3, r3
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df4:	d103      	bne.n	8006dfe <xQueueSemaphoreTake+0x14a>
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e04:	b25b      	sxtb	r3, r3
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e0a:	d103      	bne.n	8006e14 <xQueueSemaphoreTake+0x160>
 8006e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e14:	f001 fc56 	bl	80086c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e18:	463a      	mov	r2, r7
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	4611      	mov	r1, r2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 ff81 	bl	8007d28 <xTaskCheckForTimeOut>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d132      	bne.n	8006e92 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e2e:	f000 fa3a 	bl	80072a6 <prvIsQueueEmpty>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d026      	beq.n	8006e86 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d109      	bne.n	8006e54 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006e40:	f001 fc0c 	bl	800865c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 f8d5 	bl	8007ff8 <xTaskPriorityInherit>
 8006e4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006e50:	f001 fc38 	bl	80086c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	3324      	adds	r3, #36	; 0x24
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fec3 	bl	8007be8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e64:	f000 f9cd 	bl	8007202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e68:	f000 fcc2 	bl	80077f0 <xTaskResumeAll>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f47f af66 	bne.w	8006d40 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006e74:	4b18      	ldr	r3, [pc, #96]	; (8006ed8 <xQueueSemaphoreTake+0x224>)
 8006e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	e75c      	b.n	8006d40 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e88:	f000 f9bb 	bl	8007202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e8c:	f000 fcb0 	bl	80077f0 <xTaskResumeAll>
 8006e90:	e756      	b.n	8006d40 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e94:	f000 f9b5 	bl	8007202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e98:	f000 fcaa 	bl	80077f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e9e:	f000 fa02 	bl	80072a6 <prvIsQueueEmpty>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f43f af4b 	beq.w	8006d40 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00d      	beq.n	8006ecc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006eb0:	f001 fbd4 	bl	800865c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006eb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eb6:	f000 f8fc 	bl	80070b2 <prvGetDisinheritPriorityAfterTimeout>
 8006eba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 f9a2 	bl	800820c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006ec8:	f001 fbfc 	bl	80086c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ecc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3738      	adds	r7, #56	; 0x38
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08e      	sub	sp, #56	; 0x38
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10c      	bne.n	8006f0c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	b672      	cpsid	i
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	b662      	cpsie	i
 8006f06:	623b      	str	r3, [r7, #32]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d103      	bne.n	8006f1a <xQueueReceiveFromISR+0x3e>
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <xQueueReceiveFromISR+0x42>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <xQueueReceiveFromISR+0x44>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10c      	bne.n	8006f3e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f28:	b672      	cpsid	i
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	b662      	cpsie	i
 8006f38:	61fb      	str	r3, [r7, #28]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f3e:	f001 fc75 	bl	800882c <vPortValidateInterruptPriority>
	__asm volatile
 8006f42:	f3ef 8211 	mrs	r2, BASEPRI
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	b672      	cpsid	i
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	b662      	cpsie	i
 8006f5a:	61ba      	str	r2, [r7, #24]
 8006f5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d02f      	beq.n	8006fce <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f7c:	f000 f91b 	bl	80071b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	1e5a      	subs	r2, r3, #1
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f90:	d112      	bne.n	8006fb8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d016      	beq.n	8006fc8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	3310      	adds	r3, #16
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fe48 	bl	8007c34 <xTaskRemoveFromEventList>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00e      	beq.n	8006fc8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00b      	beq.n	8006fc8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e007      	b.n	8006fc8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	b25a      	sxtb	r2, r3
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	637b      	str	r3, [r7, #52]	; 0x34
 8006fcc:	e001      	b.n	8006fd2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f383 8811 	msr	BASEPRI, r3
}
 8006fdc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3738      	adds	r7, #56	; 0x38
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10c      	bne.n	8007010 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	b672      	cpsid	i
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	b662      	cpsie	i
 800700a:	60bb      	str	r3, [r7, #8]
}
 800700c:	bf00      	nop
 800700e:	e7fe      	b.n	800700e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007010:	f001 fb24 	bl	800865c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800701a:	f001 fb53 	bl	80086c4 <vPortExitCritical>

	return uxReturn;
 800701e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10c      	bne.n	8007054 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	b672      	cpsid	i
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	b662      	cpsie	i
 800704e:	60fb      	str	r3, [r7, #12]
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800705a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800705c:	4618      	mov	r0, r3
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10c      	bne.n	8007094 <vQueueDelete+0x2c>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	b672      	cpsid	i
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	b662      	cpsie	i
 800708e:	60bb      	str	r3, [r7, #8]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f935 	bl	8007304 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d102      	bne.n	80070aa <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f001 fccf 	bl	8008a48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d006      	beq.n	80070d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f1c3 0307 	rsb	r3, r3, #7
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e001      	b.n	80070d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070d4:	68fb      	ldr	r3, [r7, #12]
	}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b086      	sub	sp, #24
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10d      	bne.n	800711c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d14d      	bne.n	80071a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fff3 	bl	80080f8 <xTaskPriorityDisinherit>
 8007112:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	609a      	str	r2, [r3, #8]
 800711a:	e043      	b.n	80071a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d119      	bne.n	8007156 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6858      	ldr	r0, [r3, #4]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	461a      	mov	r2, r3
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	f014 fbb1 	bl	801b894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	441a      	add	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	429a      	cmp	r2, r3
 800714a:	d32b      	bcc.n	80071a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	605a      	str	r2, [r3, #4]
 8007154:	e026      	b.n	80071a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68d8      	ldr	r0, [r3, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	461a      	mov	r2, r3
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	f014 fb97 	bl	801b894 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	425b      	negs	r3, r3
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d207      	bcs.n	8007192 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	425b      	negs	r3, r3
 800718c:	441a      	add	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d105      	bne.n	80071a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071ac:	697b      	ldr	r3, [r7, #20]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d018      	beq.n	80071fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	441a      	add	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d303      	bcc.n	80071ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68d9      	ldr	r1, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	461a      	mov	r2, r3
 80071f4:	6838      	ldr	r0, [r7, #0]
 80071f6:	f014 fb4d 	bl	801b894 <memcpy>
	}
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800720a:	f001 fa27 	bl	800865c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007214:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007216:	e011      	b.n	800723c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d012      	beq.n	8007246 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3324      	adds	r3, #36	; 0x24
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fd05 	bl	8007c34 <xTaskRemoveFromEventList>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007230:	f000 fde0 	bl	8007df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	3b01      	subs	r3, #1
 8007238:	b2db      	uxtb	r3, r3
 800723a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800723c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007240:	2b00      	cmp	r3, #0
 8007242:	dce9      	bgt.n	8007218 <prvUnlockQueue+0x16>
 8007244:	e000      	b.n	8007248 <prvUnlockQueue+0x46>
					break;
 8007246:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	22ff      	movs	r2, #255	; 0xff
 800724c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007250:	f001 fa38 	bl	80086c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007254:	f001 fa02 	bl	800865c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800725e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007260:	e011      	b.n	8007286 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d012      	beq.n	8007290 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3310      	adds	r3, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fce0 	bl	8007c34 <xTaskRemoveFromEventList>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800727a:	f000 fdbb 	bl	8007df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	3b01      	subs	r3, #1
 8007282:	b2db      	uxtb	r3, r3
 8007284:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800728a:	2b00      	cmp	r3, #0
 800728c:	dce9      	bgt.n	8007262 <prvUnlockQueue+0x60>
 800728e:	e000      	b.n	8007292 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007290:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	22ff      	movs	r2, #255	; 0xff
 8007296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800729a:	f001 fa13 	bl	80086c4 <vPortExitCritical>
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072ae:	f001 f9d5 	bl	800865c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072ba:	2301      	movs	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	e001      	b.n	80072c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072c4:	f001 f9fe 	bl	80086c4 <vPortExitCritical>

	return xReturn;
 80072c8:	68fb      	ldr	r3, [r7, #12]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072da:	f001 f9bf 	bl	800865c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d102      	bne.n	80072f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072ea:	2301      	movs	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e001      	b.n	80072f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072f4:	f001 f9e6 	bl	80086c4 <vPortExitCritical>

	return xReturn;
 80072f8:	68fb      	ldr	r3, [r7, #12]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e016      	b.n	8007340 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007312:	4a10      	ldr	r2, [pc, #64]	; (8007354 <vQueueUnregisterQueue+0x50>)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	4413      	add	r3, r2
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	429a      	cmp	r2, r3
 8007320:	d10b      	bne.n	800733a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007322:	4a0c      	ldr	r2, [pc, #48]	; (8007354 <vQueueUnregisterQueue+0x50>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2100      	movs	r1, #0
 8007328:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800732c:	4a09      	ldr	r2, [pc, #36]	; (8007354 <vQueueUnregisterQueue+0x50>)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	4413      	add	r3, r2
 8007334:	2200      	movs	r2, #0
 8007336:	605a      	str	r2, [r3, #4]
				break;
 8007338:	e006      	b.n	8007348 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3301      	adds	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b07      	cmp	r3, #7
 8007344:	d9e5      	bls.n	8007312 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	2000cec8 	.word	0x2000cec8

08007358 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	; 0x38
 800735c:	af04      	add	r7, sp, #16
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10c      	bne.n	8007386 <xTaskCreateStatic+0x2e>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	b672      	cpsid	i
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	b662      	cpsie	i
 8007380:	623b      	str	r3, [r7, #32]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10c      	bne.n	80073a6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	b672      	cpsid	i
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	b662      	cpsie	i
 80073a0:	61fb      	str	r3, [r7, #28]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073a6:	2354      	movs	r3, #84	; 0x54
 80073a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b54      	cmp	r3, #84	; 0x54
 80073ae:	d00c      	beq.n	80073ca <xTaskCreateStatic+0x72>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	b672      	cpsid	i
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	b662      	cpsie	i
 80073c4:	61bb      	str	r3, [r7, #24]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01e      	beq.n	8007410 <xTaskCreateStatic+0xb8>
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01b      	beq.n	8007410 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	2202      	movs	r2, #2
 80073e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073ea:	2300      	movs	r3, #0
 80073ec:	9303      	str	r3, [sp, #12]
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	9302      	str	r3, [sp, #8]
 80073f2:	f107 0314 	add.w	r3, r7, #20
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 f850 	bl	80074a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800740a:	f000 f8df 	bl	80075cc <prvAddNewTaskToReadyList>
 800740e:	e001      	b.n	8007414 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007410:	2300      	movs	r3, #0
 8007412:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007414:	697b      	ldr	r3, [r7, #20]
	}
 8007416:	4618      	mov	r0, r3
 8007418:	3728      	adds	r7, #40	; 0x28
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800741e:	b580      	push	{r7, lr}
 8007420:	b08c      	sub	sp, #48	; 0x30
 8007422:	af04      	add	r7, sp, #16
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	603b      	str	r3, [r7, #0]
 800742a:	4613      	mov	r3, r2
 800742c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4618      	mov	r0, r3
 8007434:	f001 fa3e 	bl	80088b4 <pvPortMalloc>
 8007438:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00e      	beq.n	800745e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007440:	2054      	movs	r0, #84	; 0x54
 8007442:	f001 fa37 	bl	80088b4 <pvPortMalloc>
 8007446:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
 8007454:	e005      	b.n	8007462 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007456:	6978      	ldr	r0, [r7, #20]
 8007458:	f001 faf6 	bl	8008a48 <vPortFree>
 800745c:	e001      	b.n	8007462 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d017      	beq.n	8007498 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007470:	88fa      	ldrh	r2, [r7, #6]
 8007472:	2300      	movs	r3, #0
 8007474:	9303      	str	r3, [sp, #12]
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	9302      	str	r3, [sp, #8]
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f80e 	bl	80074a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800748c:	69f8      	ldr	r0, [r7, #28]
 800748e:	f000 f89d 	bl	80075cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007492:	2301      	movs	r3, #1
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	e002      	b.n	800749e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800749c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800749e:	69bb      	ldr	r3, [r7, #24]
	}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	461a      	mov	r2, r3
 80074c0:	21a5      	movs	r1, #165	; 0xa5
 80074c2:	f014 f9f5 	bl	801b8b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80074d0:	440b      	add	r3, r1
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	f023 0307 	bic.w	r3, r3, #7
 80074de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00c      	beq.n	8007504 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	b672      	cpsid	i
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	b662      	cpsie	i
 80074fe:	617b      	str	r3, [r7, #20]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d01f      	beq.n	800754a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	e012      	b.n	8007536 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	4413      	add	r3, r2
 8007516:	7819      	ldrb	r1, [r3, #0]
 8007518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	3334      	adds	r3, #52	; 0x34
 8007520:	460a      	mov	r2, r1
 8007522:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	3301      	adds	r3, #1
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	2b0f      	cmp	r3, #15
 800753a:	d9e9      	bls.n	8007510 <prvInitialiseNewTask+0x68>
 800753c:	e000      	b.n	8007540 <prvInitialiseNewTask+0x98>
			{
				break;
 800753e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007548:	e003      	b.n	8007552 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	2b06      	cmp	r3, #6
 8007556:	d901      	bls.n	800755c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007558:	2306      	movs	r3, #6
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007560:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007566:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	2200      	movs	r2, #0
 800756c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	3304      	adds	r3, #4
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fe4d 	bl	8006212 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	3318      	adds	r3, #24
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe fe48 	bl	8006212 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007586:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	f1c3 0207 	rsb	r2, r3, #7
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007596:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2200      	movs	r2, #0
 800759c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	68f9      	ldr	r1, [r7, #12]
 80075aa:	69b8      	ldr	r0, [r7, #24]
 80075ac:	f000 ff46 	bl	800843c <pxPortInitialiseStack>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075c2:	bf00      	nop
 80075c4:	3720      	adds	r7, #32
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075d4:	f001 f842 	bl	800865c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075d8:	4b2a      	ldr	r3, [pc, #168]	; (8007684 <prvAddNewTaskToReadyList+0xb8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3301      	adds	r3, #1
 80075de:	4a29      	ldr	r2, [pc, #164]	; (8007684 <prvAddNewTaskToReadyList+0xb8>)
 80075e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075e2:	4b29      	ldr	r3, [pc, #164]	; (8007688 <prvAddNewTaskToReadyList+0xbc>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075ea:	4a27      	ldr	r2, [pc, #156]	; (8007688 <prvAddNewTaskToReadyList+0xbc>)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075f0:	4b24      	ldr	r3, [pc, #144]	; (8007684 <prvAddNewTaskToReadyList+0xb8>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d110      	bne.n	800761a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075f8:	f000 fc20 	bl	8007e3c <prvInitialiseTaskLists>
 80075fc:	e00d      	b.n	800761a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075fe:	4b23      	ldr	r3, [pc, #140]	; (800768c <prvAddNewTaskToReadyList+0xc0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007606:	4b20      	ldr	r3, [pc, #128]	; (8007688 <prvAddNewTaskToReadyList+0xbc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	429a      	cmp	r2, r3
 8007612:	d802      	bhi.n	800761a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007614:	4a1c      	ldr	r2, [pc, #112]	; (8007688 <prvAddNewTaskToReadyList+0xbc>)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800761a:	4b1d      	ldr	r3, [pc, #116]	; (8007690 <prvAddNewTaskToReadyList+0xc4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	4a1b      	ldr	r2, [pc, #108]	; (8007690 <prvAddNewTaskToReadyList+0xc4>)
 8007622:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	2201      	movs	r2, #1
 800762a:	409a      	lsls	r2, r3
 800762c:	4b19      	ldr	r3, [pc, #100]	; (8007694 <prvAddNewTaskToReadyList+0xc8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4313      	orrs	r3, r2
 8007632:	4a18      	ldr	r2, [pc, #96]	; (8007694 <prvAddNewTaskToReadyList+0xc8>)
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4a15      	ldr	r2, [pc, #84]	; (8007698 <prvAddNewTaskToReadyList+0xcc>)
 8007644:	441a      	add	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3304      	adds	r3, #4
 800764a:	4619      	mov	r1, r3
 800764c:	4610      	mov	r0, r2
 800764e:	f7fe fded 	bl	800622c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007652:	f001 f837 	bl	80086c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007656:	4b0d      	ldr	r3, [pc, #52]	; (800768c <prvAddNewTaskToReadyList+0xc0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800765e:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <prvAddNewTaskToReadyList+0xbc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	429a      	cmp	r2, r3
 800766a:	d207      	bcs.n	800767c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800766c:	4b0b      	ldr	r3, [pc, #44]	; (800769c <prvAddNewTaskToReadyList+0xd0>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20000a00 	.word	0x20000a00
 8007688:	20000900 	.word	0x20000900
 800768c:	20000a0c 	.word	0x20000a0c
 8007690:	20000a1c 	.word	0x20000a1c
 8007694:	20000a08 	.word	0x20000a08
 8007698:	20000904 	.word	0x20000904
 800769c:	e000ed04 	.word	0xe000ed04

080076a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d019      	beq.n	80076e6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076b2:	4b14      	ldr	r3, [pc, #80]	; (8007704 <vTaskDelay+0x64>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00c      	beq.n	80076d4 <vTaskDelay+0x34>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	b672      	cpsid	i
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	b662      	cpsie	i
 80076ce:	60bb      	str	r3, [r7, #8]
}
 80076d0:	bf00      	nop
 80076d2:	e7fe      	b.n	80076d2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80076d4:	f000 f87e 	bl	80077d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076d8:	2100      	movs	r1, #0
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fe48 	bl	8008370 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076e0:	f000 f886 	bl	80077f0 <xTaskResumeAll>
 80076e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d107      	bne.n	80076fc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <vTaskDelay+0x68>)
 80076ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076fc:	bf00      	nop
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000a28 	.word	0x20000a28
 8007708:	e000ed04 	.word	0xe000ed04

0800770c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08a      	sub	sp, #40	; 0x28
 8007710:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007712:	2300      	movs	r3, #0
 8007714:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800771a:	463a      	mov	r2, r7
 800771c:	1d39      	adds	r1, r7, #4
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	4618      	mov	r0, r3
 8007724:	f7f8 ff7c 	bl	8000620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	9202      	str	r2, [sp, #8]
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	2300      	movs	r3, #0
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	2300      	movs	r3, #0
 8007738:	460a      	mov	r2, r1
 800773a:	4920      	ldr	r1, [pc, #128]	; (80077bc <vTaskStartScheduler+0xb0>)
 800773c:	4820      	ldr	r0, [pc, #128]	; (80077c0 <vTaskStartScheduler+0xb4>)
 800773e:	f7ff fe0b 	bl	8007358 <xTaskCreateStatic>
 8007742:	4603      	mov	r3, r0
 8007744:	4a1f      	ldr	r2, [pc, #124]	; (80077c4 <vTaskStartScheduler+0xb8>)
 8007746:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007748:	4b1e      	ldr	r3, [pc, #120]	; (80077c4 <vTaskStartScheduler+0xb8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007750:	2301      	movs	r3, #1
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	e001      	b.n	800775a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007756:	2300      	movs	r3, #0
 8007758:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d118      	bne.n	8007792 <vTaskStartScheduler+0x86>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	b672      	cpsid	i
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	b662      	cpsie	i
 8007774:	613b      	str	r3, [r7, #16]
}
 8007776:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007778:	4b13      	ldr	r3, [pc, #76]	; (80077c8 <vTaskStartScheduler+0xbc>)
 800777a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800777e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007780:	4b12      	ldr	r3, [pc, #72]	; (80077cc <vTaskStartScheduler+0xc0>)
 8007782:	2201      	movs	r2, #1
 8007784:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007786:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <vTaskStartScheduler+0xc4>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800778c:	f000 fee8 	bl	8008560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007790:	e010      	b.n	80077b4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007798:	d10c      	bne.n	80077b4 <vTaskStartScheduler+0xa8>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	b672      	cpsid	i
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	b662      	cpsie	i
 80077ae:	60fb      	str	r3, [r7, #12]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <vTaskStartScheduler+0xa6>
}
 80077b4:	bf00      	nop
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	0801cc98 	.word	0x0801cc98
 80077c0:	08007e0d 	.word	0x08007e0d
 80077c4:	20000a24 	.word	0x20000a24
 80077c8:	20000a20 	.word	0x20000a20
 80077cc:	20000a0c 	.word	0x20000a0c
 80077d0:	20000a04 	.word	0x20000a04

080077d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80077d8:	4b04      	ldr	r3, [pc, #16]	; (80077ec <vTaskSuspendAll+0x18>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3301      	adds	r3, #1
 80077de:	4a03      	ldr	r2, [pc, #12]	; (80077ec <vTaskSuspendAll+0x18>)
 80077e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80077e2:	bf00      	nop
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	20000a28 	.word	0x20000a28

080077f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077fe:	4b42      	ldr	r3, [pc, #264]	; (8007908 <xTaskResumeAll+0x118>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10c      	bne.n	8007820 <xTaskResumeAll+0x30>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780a:	b672      	cpsid	i
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	b662      	cpsie	i
 800781a:	603b      	str	r3, [r7, #0]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007820:	f000 ff1c 	bl	800865c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007824:	4b38      	ldr	r3, [pc, #224]	; (8007908 <xTaskResumeAll+0x118>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3b01      	subs	r3, #1
 800782a:	4a37      	ldr	r2, [pc, #220]	; (8007908 <xTaskResumeAll+0x118>)
 800782c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800782e:	4b36      	ldr	r3, [pc, #216]	; (8007908 <xTaskResumeAll+0x118>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d161      	bne.n	80078fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007836:	4b35      	ldr	r3, [pc, #212]	; (800790c <xTaskResumeAll+0x11c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d05d      	beq.n	80078fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800783e:	e02e      	b.n	800789e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007840:	4b33      	ldr	r3, [pc, #204]	; (8007910 <xTaskResumeAll+0x120>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3318      	adds	r3, #24
 800784c:	4618      	mov	r0, r3
 800784e:	f7fe fd4a 	bl	80062e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3304      	adds	r3, #4
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fd45 	bl	80062e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	2201      	movs	r2, #1
 8007862:	409a      	lsls	r2, r3
 8007864:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <xTaskResumeAll+0x124>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4313      	orrs	r3, r2
 800786a:	4a2a      	ldr	r2, [pc, #168]	; (8007914 <xTaskResumeAll+0x124>)
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4a27      	ldr	r2, [pc, #156]	; (8007918 <xTaskResumeAll+0x128>)
 800787c:	441a      	add	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3304      	adds	r3, #4
 8007882:	4619      	mov	r1, r3
 8007884:	4610      	mov	r0, r2
 8007886:	f7fe fcd1 	bl	800622c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788e:	4b23      	ldr	r3, [pc, #140]	; (800791c <xTaskResumeAll+0x12c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	429a      	cmp	r2, r3
 8007896:	d302      	bcc.n	800789e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007898:	4b21      	ldr	r3, [pc, #132]	; (8007920 <xTaskResumeAll+0x130>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800789e:	4b1c      	ldr	r3, [pc, #112]	; (8007910 <xTaskResumeAll+0x120>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1cc      	bne.n	8007840 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078ac:	f000 fb66 	bl	8007f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80078b0:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <xTaskResumeAll+0x134>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d010      	beq.n	80078de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078bc:	f000 f858 	bl	8007970 <xTaskIncrementTick>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80078c6:	4b16      	ldr	r3, [pc, #88]	; (8007920 <xTaskResumeAll+0x130>)
 80078c8:	2201      	movs	r2, #1
 80078ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1f1      	bne.n	80078bc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80078d8:	4b12      	ldr	r3, [pc, #72]	; (8007924 <xTaskResumeAll+0x134>)
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078de:	4b10      	ldr	r3, [pc, #64]	; (8007920 <xTaskResumeAll+0x130>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078e6:	2301      	movs	r3, #1
 80078e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <xTaskResumeAll+0x138>)
 80078ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078fa:	f000 fee3 	bl	80086c4 <vPortExitCritical>

	return xAlreadyYielded;
 80078fe:	68bb      	ldr	r3, [r7, #8]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20000a28 	.word	0x20000a28
 800790c:	20000a00 	.word	0x20000a00
 8007910:	200009c0 	.word	0x200009c0
 8007914:	20000a08 	.word	0x20000a08
 8007918:	20000904 	.word	0x20000904
 800791c:	20000900 	.word	0x20000900
 8007920:	20000a14 	.word	0x20000a14
 8007924:	20000a10 	.word	0x20000a10
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007932:	4b05      	ldr	r3, [pc, #20]	; (8007948 <xTaskGetTickCount+0x1c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007938:	687b      	ldr	r3, [r7, #4]
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20000a04 	.word	0x20000a04

0800794c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007952:	f000 ff6b 	bl	800882c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007956:	2300      	movs	r3, #0
 8007958:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800795a:	4b04      	ldr	r3, [pc, #16]	; (800796c <xTaskGetTickCountFromISR+0x20>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007960:	683b      	ldr	r3, [r7, #0]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20000a04 	.word	0x20000a04

08007970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800797a:	4b4f      	ldr	r3, [pc, #316]	; (8007ab8 <xTaskIncrementTick+0x148>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	f040 808a 	bne.w	8007a98 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007984:	4b4d      	ldr	r3, [pc, #308]	; (8007abc <xTaskIncrementTick+0x14c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3301      	adds	r3, #1
 800798a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800798c:	4a4b      	ldr	r2, [pc, #300]	; (8007abc <xTaskIncrementTick+0x14c>)
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d122      	bne.n	80079de <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007998:	4b49      	ldr	r3, [pc, #292]	; (8007ac0 <xTaskIncrementTick+0x150>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00c      	beq.n	80079bc <xTaskIncrementTick+0x4c>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	b672      	cpsid	i
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	b662      	cpsie	i
 80079b6:	603b      	str	r3, [r7, #0]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <xTaskIncrementTick+0x4a>
 80079bc:	4b40      	ldr	r3, [pc, #256]	; (8007ac0 <xTaskIncrementTick+0x150>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	4b40      	ldr	r3, [pc, #256]	; (8007ac4 <xTaskIncrementTick+0x154>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a3e      	ldr	r2, [pc, #248]	; (8007ac0 <xTaskIncrementTick+0x150>)
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	4a3e      	ldr	r2, [pc, #248]	; (8007ac4 <xTaskIncrementTick+0x154>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	4b3d      	ldr	r3, [pc, #244]	; (8007ac8 <xTaskIncrementTick+0x158>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	4a3c      	ldr	r2, [pc, #240]	; (8007ac8 <xTaskIncrementTick+0x158>)
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	f000 facf 	bl	8007f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079de:	4b3b      	ldr	r3, [pc, #236]	; (8007acc <xTaskIncrementTick+0x15c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d348      	bcc.n	8007a7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079e8:	4b35      	ldr	r3, [pc, #212]	; (8007ac0 <xTaskIncrementTick+0x150>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d104      	bne.n	80079fc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f2:	4b36      	ldr	r3, [pc, #216]	; (8007acc <xTaskIncrementTick+0x15c>)
 80079f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079f8:	601a      	str	r2, [r3, #0]
					break;
 80079fa:	e03e      	b.n	8007a7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fc:	4b30      	ldr	r3, [pc, #192]	; (8007ac0 <xTaskIncrementTick+0x150>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d203      	bcs.n	8007a1c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a14:	4a2d      	ldr	r2, [pc, #180]	; (8007acc <xTaskIncrementTick+0x15c>)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a1a:	e02e      	b.n	8007a7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe fc60 	bl	80062e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d004      	beq.n	8007a38 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	3318      	adds	r3, #24
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fc57 	bl	80062e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	409a      	lsls	r2, r3
 8007a40:	4b23      	ldr	r3, [pc, #140]	; (8007ad0 <xTaskIncrementTick+0x160>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	4a22      	ldr	r2, [pc, #136]	; (8007ad0 <xTaskIncrementTick+0x160>)
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4a1f      	ldr	r2, [pc, #124]	; (8007ad4 <xTaskIncrementTick+0x164>)
 8007a58:	441a      	add	r2, r3
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f7fe fbe3 	bl	800622c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ad8 <xTaskIncrementTick+0x168>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d3b9      	bcc.n	80079e8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a78:	e7b6      	b.n	80079e8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a7a:	4b17      	ldr	r3, [pc, #92]	; (8007ad8 <xTaskIncrementTick+0x168>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a80:	4914      	ldr	r1, [pc, #80]	; (8007ad4 <xTaskIncrementTick+0x164>)
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	440b      	add	r3, r1
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d907      	bls.n	8007aa2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	e004      	b.n	8007aa2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a98:	4b10      	ldr	r3, [pc, #64]	; (8007adc <xTaskIncrementTick+0x16c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	4a0f      	ldr	r2, [pc, #60]	; (8007adc <xTaskIncrementTick+0x16c>)
 8007aa0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007aa2:	4b0f      	ldr	r3, [pc, #60]	; (8007ae0 <xTaskIncrementTick+0x170>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007aae:	697b      	ldr	r3, [r7, #20]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000a28 	.word	0x20000a28
 8007abc:	20000a04 	.word	0x20000a04
 8007ac0:	200009b8 	.word	0x200009b8
 8007ac4:	200009bc 	.word	0x200009bc
 8007ac8:	20000a18 	.word	0x20000a18
 8007acc:	20000a20 	.word	0x20000a20
 8007ad0:	20000a08 	.word	0x20000a08
 8007ad4:	20000904 	.word	0x20000904
 8007ad8:	20000900 	.word	0x20000900
 8007adc:	20000a10 	.word	0x20000a10
 8007ae0:	20000a14 	.word	0x20000a14

08007ae4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aea:	4b3a      	ldr	r3, [pc, #232]	; (8007bd4 <vTaskSwitchContext+0xf0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007af2:	4b39      	ldr	r3, [pc, #228]	; (8007bd8 <vTaskSwitchContext+0xf4>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007af8:	e068      	b.n	8007bcc <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8007afa:	4b37      	ldr	r3, [pc, #220]	; (8007bd8 <vTaskSwitchContext+0xf4>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007b00:	4b36      	ldr	r3, [pc, #216]	; (8007bdc <vTaskSwitchContext+0xf8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b06:	61fb      	str	r3, [r7, #28]
 8007b08:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d111      	bne.n	8007b3c <vTaskSwitchContext+0x58>
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d10b      	bne.n	8007b3c <vTaskSwitchContext+0x58>
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	3308      	adds	r3, #8
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d105      	bne.n	8007b3c <vTaskSwitchContext+0x58>
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	330c      	adds	r3, #12
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d008      	beq.n	8007b4e <vTaskSwitchContext+0x6a>
 8007b3c:	4b27      	ldr	r3, [pc, #156]	; (8007bdc <vTaskSwitchContext+0xf8>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4b26      	ldr	r3, [pc, #152]	; (8007bdc <vTaskSwitchContext+0xf8>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3334      	adds	r3, #52	; 0x34
 8007b46:	4619      	mov	r1, r3
 8007b48:	4610      	mov	r0, r2
 8007b4a:	f7f8 fd5d 	bl	8000608 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4e:	4b24      	ldr	r3, [pc, #144]	; (8007be0 <vTaskSwitchContext+0xfc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	fab3 f383 	clz	r3, r3
 8007b5a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b5c:	7afb      	ldrb	r3, [r7, #11]
 8007b5e:	f1c3 031f 	rsb	r3, r3, #31
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	491f      	ldr	r1, [pc, #124]	; (8007be4 <vTaskSwitchContext+0x100>)
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10c      	bne.n	8007b92 <vTaskSwitchContext+0xae>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	b672      	cpsid	i
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	b662      	cpsie	i
 8007b8c:	607b      	str	r3, [r7, #4]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <vTaskSwitchContext+0xac>
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4a11      	ldr	r2, [pc, #68]	; (8007be4 <vTaskSwitchContext+0x100>)
 8007b9e:	4413      	add	r3, r2
 8007ba0:	613b      	str	r3, [r7, #16]
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	605a      	str	r2, [r3, #4]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d104      	bne.n	8007bc2 <vTaskSwitchContext+0xde>
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	605a      	str	r2, [r3, #4]
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	4a04      	ldr	r2, [pc, #16]	; (8007bdc <vTaskSwitchContext+0xf8>)
 8007bca:	6013      	str	r3, [r2, #0]
}
 8007bcc:	bf00      	nop
 8007bce:	3720      	adds	r7, #32
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20000a28 	.word	0x20000a28
 8007bd8:	20000a14 	.word	0x20000a14
 8007bdc:	20000900 	.word	0x20000900
 8007be0:	20000a08 	.word	0x20000a08
 8007be4:	20000904 	.word	0x20000904

08007be8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10c      	bne.n	8007c12 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfc:	b672      	cpsid	i
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	b662      	cpsie	i
 8007c0c:	60fb      	str	r3, [r7, #12]
}
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c12:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <vTaskPlaceOnEventList+0x48>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3318      	adds	r3, #24
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fe fb2a 	bl	8006274 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c20:	2101      	movs	r1, #1
 8007c22:	6838      	ldr	r0, [r7, #0]
 8007c24:	f000 fba4 	bl	8008370 <prvAddCurrentTaskToDelayedList>
}
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20000900 	.word	0x20000900

08007c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10c      	bne.n	8007c64 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	b672      	cpsid	i
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	b662      	cpsie	i
 8007c5e:	60fb      	str	r3, [r7, #12]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	3318      	adds	r3, #24
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fb3c 	bl	80062e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ce4 <xTaskRemoveFromEventList+0xb0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d11c      	bne.n	8007cb0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fb33 	bl	80062e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	2201      	movs	r2, #1
 8007c86:	409a      	lsls	r2, r3
 8007c88:	4b17      	ldr	r3, [pc, #92]	; (8007ce8 <xTaskRemoveFromEventList+0xb4>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	4a16      	ldr	r2, [pc, #88]	; (8007ce8 <xTaskRemoveFromEventList+0xb4>)
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4a13      	ldr	r2, [pc, #76]	; (8007cec <xTaskRemoveFromEventList+0xb8>)
 8007ca0:	441a      	add	r2, r3
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f7fe fabf 	bl	800622c <vListInsertEnd>
 8007cae:	e005      	b.n	8007cbc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	3318      	adds	r3, #24
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	480e      	ldr	r0, [pc, #56]	; (8007cf0 <xTaskRemoveFromEventList+0xbc>)
 8007cb8:	f7fe fab8 	bl	800622c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	; (8007cf4 <xTaskRemoveFromEventList+0xc0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d905      	bls.n	8007cd6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cce:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <xTaskRemoveFromEventList+0xc4>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	e001      	b.n	8007cda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cda:	697b      	ldr	r3, [r7, #20]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000a28 	.word	0x20000a28
 8007ce8:	20000a08 	.word	0x20000a08
 8007cec:	20000904 	.word	0x20000904
 8007cf0:	200009c0 	.word	0x200009c0
 8007cf4:	20000900 	.word	0x20000900
 8007cf8:	20000a14 	.word	0x20000a14

08007cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d04:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <vTaskInternalSetTimeOutState+0x24>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d0c:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <vTaskInternalSetTimeOutState+0x28>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	605a      	str	r2, [r3, #4]
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	20000a18 	.word	0x20000a18
 8007d24:	20000a04 	.word	0x20000a04

08007d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10c      	bne.n	8007d52 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	b672      	cpsid	i
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	b662      	cpsie	i
 8007d4c:	613b      	str	r3, [r7, #16]
}
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10c      	bne.n	8007d72 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	b672      	cpsid	i
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	b662      	cpsie	i
 8007d6c:	60fb      	str	r3, [r7, #12]
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007d72:	f000 fc73 	bl	800865c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d76:	4b1d      	ldr	r3, [pc, #116]	; (8007dec <xTaskCheckForTimeOut+0xc4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d8e:	d102      	bne.n	8007d96 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d90:	2300      	movs	r3, #0
 8007d92:	61fb      	str	r3, [r7, #28]
 8007d94:	e023      	b.n	8007dde <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <xTaskCheckForTimeOut+0xc8>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d007      	beq.n	8007db2 <xTaskCheckForTimeOut+0x8a>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d302      	bcc.n	8007db2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dac:	2301      	movs	r3, #1
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	e015      	b.n	8007dde <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d20b      	bcs.n	8007dd4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	1ad2      	subs	r2, r2, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff ff97 	bl	8007cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61fb      	str	r3, [r7, #28]
 8007dd2:	e004      	b.n	8007dde <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dde:	f000 fc71 	bl	80086c4 <vPortExitCritical>

	return xReturn;
 8007de2:	69fb      	ldr	r3, [r7, #28]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3720      	adds	r7, #32
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20000a04 	.word	0x20000a04
 8007df0:	20000a18 	.word	0x20000a18

08007df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007df8:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <vTaskMissedYield+0x14>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]
}
 8007dfe:	bf00      	nop
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	20000a14 	.word	0x20000a14

08007e0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e14:	f000 f852 	bl	8007ebc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e18:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <prvIdleTask+0x28>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d9f9      	bls.n	8007e14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <prvIdleTask+0x2c>)
 8007e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e30:	e7f0      	b.n	8007e14 <prvIdleTask+0x8>
 8007e32:	bf00      	nop
 8007e34:	20000904 	.word	0x20000904
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e42:	2300      	movs	r3, #0
 8007e44:	607b      	str	r3, [r7, #4]
 8007e46:	e00c      	b.n	8007e62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4a12      	ldr	r2, [pc, #72]	; (8007e9c <prvInitialiseTaskLists+0x60>)
 8007e54:	4413      	add	r3, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe f9bb 	bl	80061d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	607b      	str	r3, [r7, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b06      	cmp	r3, #6
 8007e66:	d9ef      	bls.n	8007e48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e68:	480d      	ldr	r0, [pc, #52]	; (8007ea0 <prvInitialiseTaskLists+0x64>)
 8007e6a:	f7fe f9b2 	bl	80061d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e6e:	480d      	ldr	r0, [pc, #52]	; (8007ea4 <prvInitialiseTaskLists+0x68>)
 8007e70:	f7fe f9af 	bl	80061d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e74:	480c      	ldr	r0, [pc, #48]	; (8007ea8 <prvInitialiseTaskLists+0x6c>)
 8007e76:	f7fe f9ac 	bl	80061d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e7a:	480c      	ldr	r0, [pc, #48]	; (8007eac <prvInitialiseTaskLists+0x70>)
 8007e7c:	f7fe f9a9 	bl	80061d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e80:	480b      	ldr	r0, [pc, #44]	; (8007eb0 <prvInitialiseTaskLists+0x74>)
 8007e82:	f7fe f9a6 	bl	80061d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e86:	4b0b      	ldr	r3, [pc, #44]	; (8007eb4 <prvInitialiseTaskLists+0x78>)
 8007e88:	4a05      	ldr	r2, [pc, #20]	; (8007ea0 <prvInitialiseTaskLists+0x64>)
 8007e8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <prvInitialiseTaskLists+0x7c>)
 8007e8e:	4a05      	ldr	r2, [pc, #20]	; (8007ea4 <prvInitialiseTaskLists+0x68>)
 8007e90:	601a      	str	r2, [r3, #0]
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000904 	.word	0x20000904
 8007ea0:	20000990 	.word	0x20000990
 8007ea4:	200009a4 	.word	0x200009a4
 8007ea8:	200009c0 	.word	0x200009c0
 8007eac:	200009d4 	.word	0x200009d4
 8007eb0:	200009ec 	.word	0x200009ec
 8007eb4:	200009b8 	.word	0x200009b8
 8007eb8:	200009bc 	.word	0x200009bc

08007ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ec2:	e019      	b.n	8007ef8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ec4:	f000 fbca 	bl	800865c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec8:	4b10      	ldr	r3, [pc, #64]	; (8007f0c <prvCheckTasksWaitingTermination+0x50>)
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe fa06 	bl	80062e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007eda:	4b0d      	ldr	r3, [pc, #52]	; (8007f10 <prvCheckTasksWaitingTermination+0x54>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	4a0b      	ldr	r2, [pc, #44]	; (8007f10 <prvCheckTasksWaitingTermination+0x54>)
 8007ee2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ee4:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <prvCheckTasksWaitingTermination+0x58>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	4a0a      	ldr	r2, [pc, #40]	; (8007f14 <prvCheckTasksWaitingTermination+0x58>)
 8007eec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007eee:	f000 fbe9 	bl	80086c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f810 	bl	8007f18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ef8:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <prvCheckTasksWaitingTermination+0x58>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e1      	bne.n	8007ec4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	200009d4 	.word	0x200009d4
 8007f10:	20000a00 	.word	0x20000a00
 8007f14:	200009e8 	.word	0x200009e8

08007f18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d108      	bne.n	8007f3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fd8a 	bl	8008a48 <vPortFree>
				vPortFree( pxTCB );
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fd87 	bl	8008a48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f3a:	e01a      	b.n	8007f72 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d103      	bne.n	8007f4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fd7e 	bl	8008a48 <vPortFree>
	}
 8007f4c:	e011      	b.n	8007f72 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d00c      	beq.n	8007f72 <prvDeleteTCB+0x5a>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	b672      	cpsid	i
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	b662      	cpsie	i
 8007f6c:	60fb      	str	r3, [r7, #12]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <prvDeleteTCB+0x58>
	}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f82:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <prvResetNextTaskUnblockTime+0x38>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8007f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f94:	e008      	b.n	8007fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f96:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <prvResetNextTaskUnblockTime+0x38>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	4a04      	ldr	r2, [pc, #16]	; (8007fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8007fa6:	6013      	str	r3, [r2, #0]
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	200009b8 	.word	0x200009b8
 8007fb8:	20000a20 	.word	0x20000a20

08007fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fc2:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <xTaskGetSchedulerState+0x34>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	607b      	str	r3, [r7, #4]
 8007fce:	e008      	b.n	8007fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fd0:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <xTaskGetSchedulerState+0x38>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d102      	bne.n	8007fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	607b      	str	r3, [r7, #4]
 8007fdc:	e001      	b.n	8007fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fe2:	687b      	ldr	r3, [r7, #4]
	}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	20000a0c 	.word	0x20000a0c
 8007ff4:	20000a28 	.word	0x20000a28

08007ff8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d069      	beq.n	80080e2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008012:	4b36      	ldr	r3, [pc, #216]	; (80080ec <xTaskPriorityInherit+0xf4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	429a      	cmp	r2, r3
 800801a:	d259      	bcs.n	80080d0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	db06      	blt.n	8008032 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008024:	4b31      	ldr	r3, [pc, #196]	; (80080ec <xTaskPriorityInherit+0xf4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	f1c3 0207 	rsb	r2, r3, #7
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	6959      	ldr	r1, [r3, #20]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4a2b      	ldr	r2, [pc, #172]	; (80080f0 <xTaskPriorityInherit+0xf8>)
 8008044:	4413      	add	r3, r2
 8008046:	4299      	cmp	r1, r3
 8008048:	d13a      	bne.n	80080c0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	3304      	adds	r3, #4
 800804e:	4618      	mov	r0, r3
 8008050:	f7fe f949 	bl	80062e6 <uxListRemove>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d115      	bne.n	8008086 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805e:	4924      	ldr	r1, [pc, #144]	; (80080f0 <xTaskPriorityInherit+0xf8>)
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <xTaskPriorityInherit+0x8e>
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	2201      	movs	r2, #1
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	43da      	mvns	r2, r3
 800807c:	4b1d      	ldr	r3, [pc, #116]	; (80080f4 <xTaskPriorityInherit+0xfc>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4013      	ands	r3, r2
 8008082:	4a1c      	ldr	r2, [pc, #112]	; (80080f4 <xTaskPriorityInherit+0xfc>)
 8008084:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008086:	4b19      	ldr	r3, [pc, #100]	; (80080ec <xTaskPriorityInherit+0xf4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	2201      	movs	r2, #1
 8008096:	409a      	lsls	r2, r3
 8008098:	4b16      	ldr	r3, [pc, #88]	; (80080f4 <xTaskPriorityInherit+0xfc>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4313      	orrs	r3, r2
 800809e:	4a15      	ldr	r2, [pc, #84]	; (80080f4 <xTaskPriorityInherit+0xfc>)
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a6:	4613      	mov	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4a10      	ldr	r2, [pc, #64]	; (80080f0 <xTaskPriorityInherit+0xf8>)
 80080b0:	441a      	add	r2, r3
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fe f8b7 	bl	800622c <vListInsertEnd>
 80080be:	e004      	b.n	80080ca <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080c0:	4b0a      	ldr	r3, [pc, #40]	; (80080ec <xTaskPriorityInherit+0xf4>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80080ca:	2301      	movs	r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	e008      	b.n	80080e2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080d4:	4b05      	ldr	r3, [pc, #20]	; (80080ec <xTaskPriorityInherit+0xf4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	429a      	cmp	r2, r3
 80080dc:	d201      	bcs.n	80080e2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80080de:	2301      	movs	r3, #1
 80080e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080e2:	68fb      	ldr	r3, [r7, #12]
	}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	20000900 	.word	0x20000900
 80080f0:	20000904 	.word	0x20000904
 80080f4:	20000a08 	.word	0x20000a08

080080f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d072      	beq.n	80081f4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800810e:	4b3c      	ldr	r3, [pc, #240]	; (8008200 <xTaskPriorityDisinherit+0x108>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	429a      	cmp	r2, r3
 8008116:	d00c      	beq.n	8008132 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	b672      	cpsid	i
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	b662      	cpsie	i
 800812c:	60fb      	str	r3, [r7, #12]
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10c      	bne.n	8008154 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	b672      	cpsid	i
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	b662      	cpsie	i
 800814e:	60bb      	str	r3, [r7, #8]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008158:	1e5a      	subs	r2, r3, #1
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008166:	429a      	cmp	r2, r3
 8008168:	d044      	beq.n	80081f4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800816e:	2b00      	cmp	r3, #0
 8008170:	d140      	bne.n	80081f4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	3304      	adds	r3, #4
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe f8b5 	bl	80062e6 <uxListRemove>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d115      	bne.n	80081ae <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008186:	491f      	ldr	r1, [pc, #124]	; (8008204 <xTaskPriorityDisinherit+0x10c>)
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <xTaskPriorityDisinherit+0xb6>
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	2201      	movs	r2, #1
 800819e:	fa02 f303 	lsl.w	r3, r2, r3
 80081a2:	43da      	mvns	r2, r3
 80081a4:	4b18      	ldr	r3, [pc, #96]	; (8008208 <xTaskPriorityDisinherit+0x110>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4013      	ands	r3, r2
 80081aa:	4a17      	ldr	r2, [pc, #92]	; (8008208 <xTaskPriorityDisinherit+0x110>)
 80081ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	f1c3 0207 	rsb	r2, r3, #7
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	2201      	movs	r2, #1
 80081c8:	409a      	lsls	r2, r3
 80081ca:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <xTaskPriorityDisinherit+0x110>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	4a0d      	ldr	r2, [pc, #52]	; (8008208 <xTaskPriorityDisinherit+0x110>)
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4a08      	ldr	r2, [pc, #32]	; (8008204 <xTaskPriorityDisinherit+0x10c>)
 80081e2:	441a      	add	r2, r3
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4619      	mov	r1, r3
 80081ea:	4610      	mov	r0, r2
 80081ec:	f7fe f81e 	bl	800622c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081f0:	2301      	movs	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081f4:	697b      	ldr	r3, [r7, #20]
	}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000900 	.word	0x20000900
 8008204:	20000904 	.word	0x20000904
 8008208:	20000a08 	.word	0x20000a08

0800820c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800821a:	2301      	movs	r3, #1
 800821c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8087 	beq.w	8008334 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10c      	bne.n	8008248 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	b672      	cpsid	i
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	b662      	cpsie	i
 8008242:	60fb      	str	r3, [r7, #12]
}
 8008244:	bf00      	nop
 8008246:	e7fe      	b.n	8008246 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d902      	bls.n	8008258 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	61fb      	str	r3, [r7, #28]
 8008256:	e002      	b.n	800825e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	429a      	cmp	r2, r3
 8008266:	d065      	beq.n	8008334 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	429a      	cmp	r2, r3
 8008270:	d160      	bne.n	8008334 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008272:	4b32      	ldr	r3, [pc, #200]	; (800833c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69ba      	ldr	r2, [r7, #24]
 8008278:	429a      	cmp	r2, r3
 800827a:	d10c      	bne.n	8008296 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	b672      	cpsid	i
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	b662      	cpsie	i
 8008290:	60bb      	str	r3, [r7, #8]
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	db04      	blt.n	80082b4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f1c3 0207 	rsb	r2, r3, #7
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	6959      	ldr	r1, [r3, #20]
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4a1f      	ldr	r2, [pc, #124]	; (8008340 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80082c4:	4413      	add	r3, r2
 80082c6:	4299      	cmp	r1, r3
 80082c8:	d134      	bne.n	8008334 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	3304      	adds	r3, #4
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe f809 	bl	80062e6 <uxListRemove>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d115      	bne.n	8008306 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082de:	4918      	ldr	r1, [pc, #96]	; (8008340 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	2201      	movs	r2, #1
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	43da      	mvns	r2, r3
 80082fc:	4b11      	ldr	r3, [pc, #68]	; (8008344 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4013      	ands	r3, r2
 8008302:	4a10      	ldr	r2, [pc, #64]	; (8008344 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008304:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	2201      	movs	r2, #1
 800830c:	409a      	lsls	r2, r3
 800830e:	4b0d      	ldr	r3, [pc, #52]	; (8008344 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4313      	orrs	r3, r2
 8008314:	4a0b      	ldr	r2, [pc, #44]	; (8008344 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4a06      	ldr	r2, [pc, #24]	; (8008340 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008326:	441a      	add	r2, r3
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	3304      	adds	r3, #4
 800832c:	4619      	mov	r1, r3
 800832e:	4610      	mov	r0, r2
 8008330:	f7fd ff7c 	bl	800622c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008334:	bf00      	nop
 8008336:	3720      	adds	r7, #32
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20000900 	.word	0x20000900
 8008340:	20000904 	.word	0x20000904
 8008344:	20000a08 	.word	0x20000a08

08008348 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008348:	b480      	push	{r7}
 800834a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800834c:	4b07      	ldr	r3, [pc, #28]	; (800836c <pvTaskIncrementMutexHeldCount+0x24>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d004      	beq.n	800835e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008354:	4b05      	ldr	r3, [pc, #20]	; (800836c <pvTaskIncrementMutexHeldCount+0x24>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800835a:	3201      	adds	r2, #1
 800835c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800835e:	4b03      	ldr	r3, [pc, #12]	; (800836c <pvTaskIncrementMutexHeldCount+0x24>)
 8008360:	681b      	ldr	r3, [r3, #0]
	}
 8008362:	4618      	mov	r0, r3
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	20000900 	.word	0x20000900

08008370 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800837a:	4b29      	ldr	r3, [pc, #164]	; (8008420 <prvAddCurrentTaskToDelayedList+0xb0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008380:	4b28      	ldr	r3, [pc, #160]	; (8008424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3304      	adds	r3, #4
 8008386:	4618      	mov	r0, r3
 8008388:	f7fd ffad 	bl	80062e6 <uxListRemove>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10b      	bne.n	80083aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008392:	4b24      	ldr	r3, [pc, #144]	; (8008424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	2201      	movs	r2, #1
 800839a:	fa02 f303 	lsl.w	r3, r2, r3
 800839e:	43da      	mvns	r2, r3
 80083a0:	4b21      	ldr	r3, [pc, #132]	; (8008428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4013      	ands	r3, r2
 80083a6:	4a20      	ldr	r2, [pc, #128]	; (8008428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083b0:	d10a      	bne.n	80083c8 <prvAddCurrentTaskToDelayedList+0x58>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083b8:	4b1a      	ldr	r3, [pc, #104]	; (8008424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3304      	adds	r3, #4
 80083be:	4619      	mov	r1, r3
 80083c0:	481a      	ldr	r0, [pc, #104]	; (800842c <prvAddCurrentTaskToDelayedList+0xbc>)
 80083c2:	f7fd ff33 	bl	800622c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083c6:	e026      	b.n	8008416 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083d0:	4b14      	ldr	r3, [pc, #80]	; (8008424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d209      	bcs.n	80083f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083e0:	4b13      	ldr	r3, [pc, #76]	; (8008430 <prvAddCurrentTaskToDelayedList+0xc0>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	4b0f      	ldr	r3, [pc, #60]	; (8008424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4619      	mov	r1, r3
 80083ec:	4610      	mov	r0, r2
 80083ee:	f7fd ff41 	bl	8006274 <vListInsert>
}
 80083f2:	e010      	b.n	8008416 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083f4:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <prvAddCurrentTaskToDelayedList+0xc4>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3304      	adds	r3, #4
 80083fe:	4619      	mov	r1, r3
 8008400:	4610      	mov	r0, r2
 8008402:	f7fd ff37 	bl	8006274 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008406:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	429a      	cmp	r2, r3
 800840e:	d202      	bcs.n	8008416 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008410:	4a09      	ldr	r2, [pc, #36]	; (8008438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	6013      	str	r3, [r2, #0]
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000a04 	.word	0x20000a04
 8008424:	20000900 	.word	0x20000900
 8008428:	20000a08 	.word	0x20000a08
 800842c:	200009ec 	.word	0x200009ec
 8008430:	200009bc 	.word	0x200009bc
 8008434:	200009b8 	.word	0x200009b8
 8008438:	20000a20 	.word	0x20000a20

0800843c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3b04      	subs	r3, #4
 800844c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3b04      	subs	r3, #4
 800845a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f023 0201 	bic.w	r2, r3, #1
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3b04      	subs	r3, #4
 800846a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800846c:	4a0c      	ldr	r2, [pc, #48]	; (80084a0 <pxPortInitialiseStack+0x64>)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3b14      	subs	r3, #20
 8008476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3b04      	subs	r3, #4
 8008482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f06f 0202 	mvn.w	r2, #2
 800848a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3b20      	subs	r3, #32
 8008490:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008492:	68fb      	ldr	r3, [r7, #12]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	080084a5 	.word	0x080084a5

080084a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084ae:	4b14      	ldr	r3, [pc, #80]	; (8008500 <prvTaskExitError+0x5c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b6:	d00c      	beq.n	80084d2 <prvTaskExitError+0x2e>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	b672      	cpsid	i
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	b662      	cpsie	i
 80084cc:	60fb      	str	r3, [r7, #12]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <prvTaskExitError+0x2c>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	b672      	cpsid	i
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	b662      	cpsie	i
 80084e6:	60bb      	str	r3, [r7, #8]
}
 80084e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084ea:	bf00      	nop
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0fc      	beq.n	80084ec <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	2000000c 	.word	0x2000000c
	...

08008510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <pxCurrentTCBConst2>)
 8008512:	6819      	ldr	r1, [r3, #0]
 8008514:	6808      	ldr	r0, [r1, #0]
 8008516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851a:	f380 8809 	msr	PSP, r0
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f04f 0000 	mov.w	r0, #0
 8008526:	f380 8811 	msr	BASEPRI, r0
 800852a:	4770      	bx	lr
 800852c:	f3af 8000 	nop.w

08008530 <pxCurrentTCBConst2>:
 8008530:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop

08008538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008538:	4808      	ldr	r0, [pc, #32]	; (800855c <prvPortStartFirstTask+0x24>)
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	6800      	ldr	r0, [r0, #0]
 800853e:	f380 8808 	msr	MSP, r0
 8008542:	f04f 0000 	mov.w	r0, #0
 8008546:	f380 8814 	msr	CONTROL, r0
 800854a:	b662      	cpsie	i
 800854c:	b661      	cpsie	f
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	df00      	svc	0
 8008558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800855a:	bf00      	nop
 800855c:	e000ed08 	.word	0xe000ed08

08008560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008566:	4b37      	ldr	r3, [pc, #220]	; (8008644 <xPortStartScheduler+0xe4>)
 8008568:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	22ff      	movs	r2, #255	; 0xff
 8008576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008588:	b2da      	uxtb	r2, r3
 800858a:	4b2f      	ldr	r3, [pc, #188]	; (8008648 <xPortStartScheduler+0xe8>)
 800858c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800858e:	4b2f      	ldr	r3, [pc, #188]	; (800864c <xPortStartScheduler+0xec>)
 8008590:	2207      	movs	r2, #7
 8008592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008594:	e009      	b.n	80085aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008596:	4b2d      	ldr	r3, [pc, #180]	; (800864c <xPortStartScheduler+0xec>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3b01      	subs	r3, #1
 800859c:	4a2b      	ldr	r2, [pc, #172]	; (800864c <xPortStartScheduler+0xec>)
 800859e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085aa:	78fb      	ldrb	r3, [r7, #3]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b2:	2b80      	cmp	r3, #128	; 0x80
 80085b4:	d0ef      	beq.n	8008596 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085b6:	4b25      	ldr	r3, [pc, #148]	; (800864c <xPortStartScheduler+0xec>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f1c3 0307 	rsb	r3, r3, #7
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d00c      	beq.n	80085dc <xPortStartScheduler+0x7c>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	b672      	cpsid	i
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	b662      	cpsie	i
 80085d6:	60bb      	str	r3, [r7, #8]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085dc:	4b1b      	ldr	r3, [pc, #108]	; (800864c <xPortStartScheduler+0xec>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	021b      	lsls	r3, r3, #8
 80085e2:	4a1a      	ldr	r2, [pc, #104]	; (800864c <xPortStartScheduler+0xec>)
 80085e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085e6:	4b19      	ldr	r3, [pc, #100]	; (800864c <xPortStartScheduler+0xec>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085ee:	4a17      	ldr	r2, [pc, #92]	; (800864c <xPortStartScheduler+0xec>)
 80085f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <xPortStartScheduler+0xf0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a14      	ldr	r2, [pc, #80]	; (8008650 <xPortStartScheduler+0xf0>)
 8008600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008604:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008606:	4b12      	ldr	r3, [pc, #72]	; (8008650 <xPortStartScheduler+0xf0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a11      	ldr	r2, [pc, #68]	; (8008650 <xPortStartScheduler+0xf0>)
 800860c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008610:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008612:	f000 f8dd 	bl	80087d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008616:	4b0f      	ldr	r3, [pc, #60]	; (8008654 <xPortStartScheduler+0xf4>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800861c:	f000 f8fc 	bl	8008818 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008620:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <xPortStartScheduler+0xf8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a0c      	ldr	r2, [pc, #48]	; (8008658 <xPortStartScheduler+0xf8>)
 8008626:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800862a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800862c:	f7ff ff84 	bl	8008538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008630:	f7ff fa58 	bl	8007ae4 <vTaskSwitchContext>
	prvTaskExitError();
 8008634:	f7ff ff36 	bl	80084a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	e000e400 	.word	0xe000e400
 8008648:	20000a2c 	.word	0x20000a2c
 800864c:	20000a30 	.word	0x20000a30
 8008650:	e000ed20 	.word	0xe000ed20
 8008654:	2000000c 	.word	0x2000000c
 8008658:	e000ef34 	.word	0xe000ef34

0800865c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	b672      	cpsid	i
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	b662      	cpsie	i
 8008676:	607b      	str	r3, [r7, #4]
}
 8008678:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800867a:	4b10      	ldr	r3, [pc, #64]	; (80086bc <vPortEnterCritical+0x60>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	4a0e      	ldr	r2, [pc, #56]	; (80086bc <vPortEnterCritical+0x60>)
 8008682:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008684:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <vPortEnterCritical+0x60>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d111      	bne.n	80086b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800868c:	4b0c      	ldr	r3, [pc, #48]	; (80086c0 <vPortEnterCritical+0x64>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00c      	beq.n	80086b0 <vPortEnterCritical+0x54>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	b672      	cpsid	i
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	b662      	cpsie	i
 80086aa:	603b      	str	r3, [r7, #0]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <vPortEnterCritical+0x52>
	}
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	2000000c 	.word	0x2000000c
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <vPortExitCritical+0x54>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10c      	bne.n	80086ec <vPortExitCritical+0x28>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	b672      	cpsid	i
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	b662      	cpsie	i
 80086e6:	607b      	str	r3, [r7, #4]
}
 80086e8:	bf00      	nop
 80086ea:	e7fe      	b.n	80086ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <vPortExitCritical+0x54>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	4a09      	ldr	r2, [pc, #36]	; (8008718 <vPortExitCritical+0x54>)
 80086f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <vPortExitCritical+0x54>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d105      	bne.n	800870a <vPortExitCritical+0x46>
 80086fe:	2300      	movs	r3, #0
 8008700:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	f383 8811 	msr	BASEPRI, r3
}
 8008708:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	2000000c 	.word	0x2000000c
 800871c:	00000000 	.word	0x00000000

08008720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008720:	f3ef 8009 	mrs	r0, PSP
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	4b15      	ldr	r3, [pc, #84]	; (8008780 <pxCurrentTCBConst>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f01e 0f10 	tst.w	lr, #16
 8008730:	bf08      	it	eq
 8008732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008744:	b672      	cpsid	i
 8008746:	f380 8811 	msr	BASEPRI, r0
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	b662      	cpsie	i
 8008754:	f7ff f9c6 	bl	8007ae4 <vTaskSwitchContext>
 8008758:	f04f 0000 	mov.w	r0, #0
 800875c:	f380 8811 	msr	BASEPRI, r0
 8008760:	bc09      	pop	{r0, r3}
 8008762:	6819      	ldr	r1, [r3, #0]
 8008764:	6808      	ldr	r0, [r1, #0]
 8008766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	f01e 0f10 	tst.w	lr, #16
 800876e:	bf08      	it	eq
 8008770:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008774:	f380 8809 	msr	PSP, r0
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop

08008780 <pxCurrentTCBConst>:
 8008780:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop

08008788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	b672      	cpsid	i
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	b662      	cpsie	i
 80087a2:	607b      	str	r3, [r7, #4]
}
 80087a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087a6:	f7ff f8e3 	bl	8007970 <xTaskIncrementTick>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <SysTick_Handler+0x44>)
 80087b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	2300      	movs	r3, #0
 80087ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f383 8811 	msr	BASEPRI, r3
}
 80087c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087d4:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <vPortSetupTimerInterrupt+0x34>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087da:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <vPortSetupTimerInterrupt+0x38>)
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <vPortSetupTimerInterrupt+0x3c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a0a      	ldr	r2, [pc, #40]	; (8008810 <vPortSetupTimerInterrupt+0x40>)
 80087e6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ea:	099b      	lsrs	r3, r3, #6
 80087ec:	4a09      	ldr	r2, [pc, #36]	; (8008814 <vPortSetupTimerInterrupt+0x44>)
 80087ee:	3b01      	subs	r3, #1
 80087f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087f2:	4b04      	ldr	r3, [pc, #16]	; (8008804 <vPortSetupTimerInterrupt+0x34>)
 80087f4:	2207      	movs	r2, #7
 80087f6:	601a      	str	r2, [r3, #0]
}
 80087f8:	bf00      	nop
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	e000e010 	.word	0xe000e010
 8008808:	e000e018 	.word	0xe000e018
 800880c:	20000000 	.word	0x20000000
 8008810:	10624dd3 	.word	0x10624dd3
 8008814:	e000e014 	.word	0xe000e014

08008818 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008818:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008828 <vPortEnableVFP+0x10>
 800881c:	6801      	ldr	r1, [r0, #0]
 800881e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008822:	6001      	str	r1, [r0, #0]
 8008824:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008826:	bf00      	nop
 8008828:	e000ed88 	.word	0xe000ed88

0800882c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008832:	f3ef 8305 	mrs	r3, IPSR
 8008836:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b0f      	cmp	r3, #15
 800883c:	d916      	bls.n	800886c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800883e:	4a19      	ldr	r2, [pc, #100]	; (80088a4 <vPortValidateInterruptPriority+0x78>)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4413      	add	r3, r2
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008848:	4b17      	ldr	r3, [pc, #92]	; (80088a8 <vPortValidateInterruptPriority+0x7c>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	7afa      	ldrb	r2, [r7, #11]
 800884e:	429a      	cmp	r2, r3
 8008850:	d20c      	bcs.n	800886c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	b672      	cpsid	i
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	b662      	cpsie	i
 8008866:	607b      	str	r3, [r7, #4]
}
 8008868:	bf00      	nop
 800886a:	e7fe      	b.n	800886a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800886c:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <vPortValidateInterruptPriority+0x80>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008874:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <vPortValidateInterruptPriority+0x84>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d90c      	bls.n	8008896 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	b672      	cpsid	i
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	b662      	cpsie	i
 8008890:	603b      	str	r3, [r7, #0]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <vPortValidateInterruptPriority+0x68>
	}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	e000e3f0 	.word	0xe000e3f0
 80088a8:	20000a2c 	.word	0x20000a2c
 80088ac:	e000ed0c 	.word	0xe000ed0c
 80088b0:	20000a30 	.word	0x20000a30

080088b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08a      	sub	sp, #40	; 0x28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088bc:	2300      	movs	r3, #0
 80088be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088c0:	f7fe ff88 	bl	80077d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088c4:	4b5b      	ldr	r3, [pc, #364]	; (8008a34 <pvPortMalloc+0x180>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088cc:	f000 f91a 	bl	8008b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088d0:	4b59      	ldr	r3, [pc, #356]	; (8008a38 <pvPortMalloc+0x184>)
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4013      	ands	r3, r2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f040 8092 	bne.w	8008a02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d01f      	beq.n	8008924 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80088e4:	2208      	movs	r2, #8
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4413      	add	r3, r2
 80088ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f003 0307 	and.w	r3, r3, #7
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d016      	beq.n	8008924 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f023 0307 	bic.w	r3, r3, #7
 80088fc:	3308      	adds	r3, #8
 80088fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00c      	beq.n	8008924 <pvPortMalloc+0x70>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	b672      	cpsid	i
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	b662      	cpsie	i
 800891e:	617b      	str	r3, [r7, #20]
}
 8008920:	bf00      	nop
 8008922:	e7fe      	b.n	8008922 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d06b      	beq.n	8008a02 <pvPortMalloc+0x14e>
 800892a:	4b44      	ldr	r3, [pc, #272]	; (8008a3c <pvPortMalloc+0x188>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d866      	bhi.n	8008a02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008934:	4b42      	ldr	r3, [pc, #264]	; (8008a40 <pvPortMalloc+0x18c>)
 8008936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008938:	4b41      	ldr	r3, [pc, #260]	; (8008a40 <pvPortMalloc+0x18c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800893e:	e004      	b.n	800894a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	429a      	cmp	r2, r3
 8008952:	d903      	bls.n	800895c <pvPortMalloc+0xa8>
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f1      	bne.n	8008940 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800895c:	4b35      	ldr	r3, [pc, #212]	; (8008a34 <pvPortMalloc+0x180>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008962:	429a      	cmp	r2, r3
 8008964:	d04d      	beq.n	8008a02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2208      	movs	r2, #8
 800896c:	4413      	add	r3, r2
 800896e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	1ad2      	subs	r2, r2, r3
 8008980:	2308      	movs	r3, #8
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	429a      	cmp	r2, r3
 8008986:	d921      	bls.n	80089cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00c      	beq.n	80089b4 <pvPortMalloc+0x100>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	b672      	cpsid	i
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	b662      	cpsie	i
 80089ae:	613b      	str	r3, [r7, #16]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	1ad2      	subs	r2, r2, r3
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089c6:	69b8      	ldr	r0, [r7, #24]
 80089c8:	f000 f8fe 	bl	8008bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089cc:	4b1b      	ldr	r3, [pc, #108]	; (8008a3c <pvPortMalloc+0x188>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	4a19      	ldr	r2, [pc, #100]	; (8008a3c <pvPortMalloc+0x188>)
 80089d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089da:	4b18      	ldr	r3, [pc, #96]	; (8008a3c <pvPortMalloc+0x188>)
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	4b19      	ldr	r3, [pc, #100]	; (8008a44 <pvPortMalloc+0x190>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d203      	bcs.n	80089ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089e6:	4b15      	ldr	r3, [pc, #84]	; (8008a3c <pvPortMalloc+0x188>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a16      	ldr	r2, [pc, #88]	; (8008a44 <pvPortMalloc+0x190>)
 80089ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	4b11      	ldr	r3, [pc, #68]	; (8008a38 <pvPortMalloc+0x184>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	431a      	orrs	r2, r3
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a02:	f7fe fef5 	bl	80077f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	f003 0307 	and.w	r3, r3, #7
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00c      	beq.n	8008a2a <pvPortMalloc+0x176>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	b672      	cpsid	i
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	b662      	cpsie	i
 8008a24:	60fb      	str	r3, [r7, #12]
}
 8008a26:	bf00      	nop
 8008a28:	e7fe      	b.n	8008a28 <pvPortMalloc+0x174>
	return pvReturn;
 8008a2a:	69fb      	ldr	r3, [r7, #28]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3728      	adds	r7, #40	; 0x28
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20008a3c 	.word	0x20008a3c
 8008a38:	20008a48 	.word	0x20008a48
 8008a3c:	20008a40 	.word	0x20008a40
 8008a40:	20008a34 	.word	0x20008a34
 8008a44:	20008a44 	.word	0x20008a44

08008a48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d04c      	beq.n	8008af4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a5a:	2308      	movs	r3, #8
 8008a5c:	425b      	negs	r3, r3
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	4413      	add	r3, r2
 8008a62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	4b23      	ldr	r3, [pc, #140]	; (8008afc <vPortFree+0xb4>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4013      	ands	r3, r2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10c      	bne.n	8008a90 <vPortFree+0x48>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	b672      	cpsid	i
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	b662      	cpsie	i
 8008a8a:	60fb      	str	r3, [r7, #12]
}
 8008a8c:	bf00      	nop
 8008a8e:	e7fe      	b.n	8008a8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00c      	beq.n	8008ab2 <vPortFree+0x6a>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	b672      	cpsid	i
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	b662      	cpsie	i
 8008aac:	60bb      	str	r3, [r7, #8]
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	4b11      	ldr	r3, [pc, #68]	; (8008afc <vPortFree+0xb4>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d019      	beq.n	8008af4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d115      	bne.n	8008af4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	4b0b      	ldr	r3, [pc, #44]	; (8008afc <vPortFree+0xb4>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	401a      	ands	r2, r3
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ad8:	f7fe fe7c 	bl	80077d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <vPortFree+0xb8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	4a06      	ldr	r2, [pc, #24]	; (8008b00 <vPortFree+0xb8>)
 8008ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008aea:	6938      	ldr	r0, [r7, #16]
 8008aec:	f000 f86c 	bl	8008bc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008af0:	f7fe fe7e 	bl	80077f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008af4:	bf00      	nop
 8008af6:	3718      	adds	r7, #24
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	20008a48 	.word	0x20008a48
 8008b00:	20008a40 	.word	0x20008a40

08008b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b10:	4b27      	ldr	r3, [pc, #156]	; (8008bb0 <prvHeapInit+0xac>)
 8008b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00c      	beq.n	8008b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3307      	adds	r3, #7
 8008b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0307 	bic.w	r3, r3, #7
 8008b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	4a1f      	ldr	r2, [pc, #124]	; (8008bb0 <prvHeapInit+0xac>)
 8008b34:	4413      	add	r3, r2
 8008b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b3c:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <prvHeapInit+0xb0>)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b42:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <prvHeapInit+0xb0>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b50:	2208      	movs	r2, #8
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0307 	bic.w	r3, r3, #7
 8008b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4a15      	ldr	r2, [pc, #84]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b66:	4b14      	ldr	r3, [pc, #80]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b6e:	4b12      	ldr	r3, [pc, #72]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	1ad2      	subs	r2, r2, r3
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b84:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	4a0a      	ldr	r2, [pc, #40]	; (8008bbc <prvHeapInit+0xb8>)
 8008b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	4a09      	ldr	r2, [pc, #36]	; (8008bc0 <prvHeapInit+0xbc>)
 8008b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b9c:	4b09      	ldr	r3, [pc, #36]	; (8008bc4 <prvHeapInit+0xc0>)
 8008b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ba2:	601a      	str	r2, [r3, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20000a34 	.word	0x20000a34
 8008bb4:	20008a34 	.word	0x20008a34
 8008bb8:	20008a3c 	.word	0x20008a3c
 8008bbc:	20008a44 	.word	0x20008a44
 8008bc0:	20008a40 	.word	0x20008a40
 8008bc4:	20008a48 	.word	0x20008a48

08008bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bd0:	4b28      	ldr	r3, [pc, #160]	; (8008c74 <prvInsertBlockIntoFreeList+0xac>)
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e002      	b.n	8008bdc <prvInsertBlockIntoFreeList+0x14>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d8f7      	bhi.n	8008bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d108      	bne.n	8008c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	441a      	add	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	441a      	add	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d118      	bne.n	8008c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <prvInsertBlockIntoFreeList+0xb0>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d00d      	beq.n	8008c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	441a      	add	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	e008      	b.n	8008c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c46:	4b0c      	ldr	r3, [pc, #48]	; (8008c78 <prvInsertBlockIntoFreeList+0xb0>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	e003      	b.n	8008c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d002      	beq.n	8008c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20008a34 	.word	0x20008a34
 8008c78:	20008a3c 	.word	0x20008a3c

08008c7c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	330c      	adds	r3, #12
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f003 fc77 	bl	800c584 <tcpip_send_msg_wait_sem>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d103      	bne.n	8008caa <netconn_apimsg+0x2e>
    return apimsg->err;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008ca8:	e001      	b.n	8008cae <netconn_apimsg+0x32>
  }
  return err;
 8008caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08c      	sub	sp, #48	; 0x30
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	603a      	str	r2, [r7, #0]
 8008cc2:	71fb      	strb	r3, [r7, #7]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008cc8:	79fb      	ldrb	r3, [r7, #7]
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 f8a3 	bl	8009e18 <netconn_alloc>
 8008cd2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d054      	beq.n	8008d84 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008cda:	79bb      	ldrb	r3, [r7, #6]
 8008cdc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008ce2:	f107 0308 	add.w	r3, r7, #8
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4829      	ldr	r0, [pc, #164]	; (8008d90 <netconn_new_with_proto_and_callback+0xd8>)
 8008cea:	f7ff ffc7 	bl	8008c7c <netconn_apimsg>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008cf4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d043      	beq.n	8008d84 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d005      	beq.n	8008d10 <netconn_new_with_proto_and_callback+0x58>
 8008d04:	4b23      	ldr	r3, [pc, #140]	; (8008d94 <netconn_new_with_proto_and_callback+0xdc>)
 8008d06:	22a3      	movs	r2, #163	; 0xa3
 8008d08:	4923      	ldr	r1, [pc, #140]	; (8008d98 <netconn_new_with_proto_and_callback+0xe0>)
 8008d0a:	4824      	ldr	r0, [pc, #144]	; (8008d9c <netconn_new_with_proto_and_callback+0xe4>)
 8008d0c:	f012 fdd8 	bl	801b8c0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d12:	3310      	adds	r3, #16
 8008d14:	4618      	mov	r0, r3
 8008d16:	f010 fdb8 	bl	801988a <sys_mbox_valid>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d105      	bne.n	8008d2c <netconn_new_with_proto_and_callback+0x74>
 8008d20:	4b1c      	ldr	r3, [pc, #112]	; (8008d94 <netconn_new_with_proto_and_callback+0xdc>)
 8008d22:	22a4      	movs	r2, #164	; 0xa4
 8008d24:	491e      	ldr	r1, [pc, #120]	; (8008da0 <netconn_new_with_proto_and_callback+0xe8>)
 8008d26:	481d      	ldr	r0, [pc, #116]	; (8008d9c <netconn_new_with_proto_and_callback+0xe4>)
 8008d28:	f012 fdca 	bl	801b8c0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	3314      	adds	r3, #20
 8008d30:	4618      	mov	r0, r3
 8008d32:	f010 fdaa 	bl	801988a <sys_mbox_valid>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <netconn_new_with_proto_and_callback+0x90>
 8008d3c:	4b15      	ldr	r3, [pc, #84]	; (8008d94 <netconn_new_with_proto_and_callback+0xdc>)
 8008d3e:	22a6      	movs	r2, #166	; 0xa6
 8008d40:	4918      	ldr	r1, [pc, #96]	; (8008da4 <netconn_new_with_proto_and_callback+0xec>)
 8008d42:	4816      	ldr	r0, [pc, #88]	; (8008d9c <netconn_new_with_proto_and_callback+0xe4>)
 8008d44:	f012 fdbc 	bl	801b8c0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4a:	330c      	adds	r3, #12
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f010 fe2d 	bl	80199ac <sys_sem_valid>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d105      	bne.n	8008d64 <netconn_new_with_proto_and_callback+0xac>
 8008d58:	4b0e      	ldr	r3, [pc, #56]	; (8008d94 <netconn_new_with_proto_and_callback+0xdc>)
 8008d5a:	22a9      	movs	r2, #169	; 0xa9
 8008d5c:	4912      	ldr	r1, [pc, #72]	; (8008da8 <netconn_new_with_proto_and_callback+0xf0>)
 8008d5e:	480f      	ldr	r0, [pc, #60]	; (8008d9c <netconn_new_with_proto_and_callback+0xe4>)
 8008d60:	f012 fdae 	bl	801b8c0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d66:	330c      	adds	r3, #12
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f010 fe12 	bl	8019992 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d70:	3310      	adds	r3, #16
 8008d72:	4618      	mov	r0, r3
 8008d74:	f010 fd02 	bl	801977c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d7a:	2007      	movs	r0, #7
 8008d7c:	f004 f96a 	bl	800d054 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008d80:	2300      	movs	r3, #0
 8008d82:	e000      	b.n	8008d86 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3730      	adds	r7, #48	; 0x30
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	08009ded 	.word	0x08009ded
 8008d94:	0801cca0 	.word	0x0801cca0
 8008d98:	0801ccd4 	.word	0x0801ccd4
 8008d9c:	0801ccf8 	.word	0x0801ccf8
 8008da0:	0801cd20 	.word	0x0801cd20
 8008da4:	0801cd38 	.word	0x0801cd38
 8008da8:	0801cd5c 	.word	0x0801cd5c

08008dac <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08c      	sub	sp, #48	; 0x30
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e014      	b.n	8008de8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008dc2:	2329      	movs	r3, #41	; 0x29
 8008dc4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008dc6:	f107 030c 	add.w	r3, r7, #12
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4808      	ldr	r0, [pc, #32]	; (8008df0 <netconn_prepare_delete+0x44>)
 8008dce:	f7ff ff55 	bl	8008c7c <netconn_apimsg>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008dd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <netconn_prepare_delete+0x3a>
    return err;
 8008de0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008de4:	e000      	b.n	8008de8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3730      	adds	r7, #48	; 0x30
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	0800a365 	.word	0x0800a365

08008df4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <netconn_delete+0x12>
    return ERR_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	e00d      	b.n	8008e22 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff ffd0 	bl	8008dac <netconn_prepare_delete>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d102      	bne.n	8008e1e <netconn_delete+0x2a>
    netconn_free(conn);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 f875 	bl	8009f08 <netconn_free>
  }
  return err;
 8008e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08e      	sub	sp, #56	; 0x38
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d109      	bne.n	8008e54 <netconn_getaddr+0x28>
 8008e40:	4b1d      	ldr	r3, [pc, #116]	; (8008eb8 <netconn_getaddr+0x8c>)
 8008e42:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008e46:	491d      	ldr	r1, [pc, #116]	; (8008ebc <netconn_getaddr+0x90>)
 8008e48:	481d      	ldr	r0, [pc, #116]	; (8008ec0 <netconn_getaddr+0x94>)
 8008e4a:	f012 fd39 	bl	801b8c0 <iprintf>
 8008e4e:	f06f 030f 	mvn.w	r3, #15
 8008e52:	e02d      	b.n	8008eb0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <netconn_getaddr+0x42>
 8008e5a:	4b17      	ldr	r3, [pc, #92]	; (8008eb8 <netconn_getaddr+0x8c>)
 8008e5c:	f240 1213 	movw	r2, #275	; 0x113
 8008e60:	4918      	ldr	r1, [pc, #96]	; (8008ec4 <netconn_getaddr+0x98>)
 8008e62:	4817      	ldr	r0, [pc, #92]	; (8008ec0 <netconn_getaddr+0x94>)
 8008e64:	f012 fd2c 	bl	801b8c0 <iprintf>
 8008e68:	f06f 030f 	mvn.w	r3, #15
 8008e6c:	e020      	b.n	8008eb0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d109      	bne.n	8008e88 <netconn_getaddr+0x5c>
 8008e74:	4b10      	ldr	r3, [pc, #64]	; (8008eb8 <netconn_getaddr+0x8c>)
 8008e76:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008e7a:	4913      	ldr	r1, [pc, #76]	; (8008ec8 <netconn_getaddr+0x9c>)
 8008e7c:	4810      	ldr	r0, [pc, #64]	; (8008ec0 <netconn_getaddr+0x94>)
 8008e7e:	f012 fd1f 	bl	801b8c0 <iprintf>
 8008e82:	f06f 030f 	mvn.w	r3, #15
 8008e86:	e013      	b.n	8008eb0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8008e9a:	f107 0314 	add.w	r3, r7, #20
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	480a      	ldr	r0, [pc, #40]	; (8008ecc <netconn_getaddr+0xa0>)
 8008ea2:	f7ff feeb 	bl	8008c7c <netconn_apimsg>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8008eac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3738      	adds	r7, #56	; 0x38
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	0801cca0 	.word	0x0801cca0
 8008ebc:	0801cd78 	.word	0x0801cd78
 8008ec0:	0801ccf8 	.word	0x0801ccf8
 8008ec4:	0801cd98 	.word	0x0801cd98
 8008ec8:	0801cdb8 	.word	0x0801cdb8
 8008ecc:	0800add9 	.word	0x0800add9

08008ed0 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08e      	sub	sp, #56	; 0x38
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4613      	mov	r3, r2
 8008edc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <netconn_connect+0x28>
 8008ee4:	4b11      	ldr	r3, [pc, #68]	; (8008f2c <netconn_connect+0x5c>)
 8008ee6:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008eea:	4911      	ldr	r1, [pc, #68]	; (8008f30 <netconn_connect+0x60>)
 8008eec:	4811      	ldr	r0, [pc, #68]	; (8008f34 <netconn_connect+0x64>)
 8008eee:	f012 fce7 	bl	801b8c0 <iprintf>
 8008ef2:	f06f 030f 	mvn.w	r3, #15
 8008ef6:	e015      	b.n	8008f24 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8008efe:	4b0e      	ldr	r3, [pc, #56]	; (8008f38 <netconn_connect+0x68>)
 8008f00:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008f0e:	f107 0314 	add.w	r3, r7, #20
 8008f12:	4619      	mov	r1, r3
 8008f14:	4809      	ldr	r0, [pc, #36]	; (8008f3c <netconn_connect+0x6c>)
 8008f16:	f7ff feb1 	bl	8008c7c <netconn_apimsg>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008f20:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3738      	adds	r7, #56	; 0x38
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	0801cca0 	.word	0x0801cca0
 8008f30:	0801ce14 	.word	0x0801ce14
 8008f34:	0801ccf8 	.word	0x0801ccf8
 8008f38:	08020b38 	.word	0x08020b38
 8008f3c:	0800a659 	.word	0x0800a659

08008f40 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08c      	sub	sp, #48	; 0x30
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d109      	bne.n	8008f62 <netconn_disconnect+0x22>
 8008f4e:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <netconn_disconnect+0x44>)
 8008f50:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8008f54:	490c      	ldr	r1, [pc, #48]	; (8008f88 <netconn_disconnect+0x48>)
 8008f56:	480d      	ldr	r0, [pc, #52]	; (8008f8c <netconn_disconnect+0x4c>)
 8008f58:	f012 fcb2 	bl	801b8c0 <iprintf>
 8008f5c:	f06f 030f 	mvn.w	r3, #15
 8008f60:	e00c      	b.n	8008f7c <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8008f66:	f107 030c 	add.w	r3, r7, #12
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4808      	ldr	r0, [pc, #32]	; (8008f90 <netconn_disconnect+0x50>)
 8008f6e:	f7ff fe85 	bl	8008c7c <netconn_apimsg>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008f78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3730      	adds	r7, #48	; 0x30
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	0801cca0 	.word	0x0801cca0
 8008f88:	0801ce34 	.word	0x0801ce34
 8008f8c:	0801ccf8 	.word	0x0801ccf8
 8008f90:	0800a7e1 	.word	0x0800a7e1

08008f94 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08a      	sub	sp, #40	; 0x28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d109      	bne.n	8008fc0 <netconn_recv_data+0x2c>
 8008fac:	4b60      	ldr	r3, [pc, #384]	; (8009130 <netconn_recv_data+0x19c>)
 8008fae:	f44f 7212 	mov.w	r2, #584	; 0x248
 8008fb2:	4960      	ldr	r1, [pc, #384]	; (8009134 <netconn_recv_data+0x1a0>)
 8008fb4:	4860      	ldr	r0, [pc, #384]	; (8009138 <netconn_recv_data+0x1a4>)
 8008fb6:	f012 fc83 	bl	801b8c0 <iprintf>
 8008fba:	f06f 030f 	mvn.w	r3, #15
 8008fbe:	e0b2      	b.n	8009126 <netconn_recv_data+0x192>
  *new_buf = NULL;
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d109      	bne.n	8008fe0 <netconn_recv_data+0x4c>
 8008fcc:	4b58      	ldr	r3, [pc, #352]	; (8009130 <netconn_recv_data+0x19c>)
 8008fce:	f240 224a 	movw	r2, #586	; 0x24a
 8008fd2:	495a      	ldr	r1, [pc, #360]	; (800913c <netconn_recv_data+0x1a8>)
 8008fd4:	4858      	ldr	r0, [pc, #352]	; (8009138 <netconn_recv_data+0x1a4>)
 8008fd6:	f012 fc73 	bl	801b8c0 <iprintf>
 8008fda:	f06f 030f 	mvn.w	r3, #15
 8008fde:	e0a2      	b.n	8009126 <netconn_recv_data+0x192>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3310      	adds	r3, #16
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f010 fc50 	bl	801988a <sys_mbox_valid>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10e      	bne.n	800900e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fb17 	bl	8009624 <netconn_err>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 8008ffa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8009002:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009006:	e08e      	b.n	8009126 <netconn_recv_data+0x192>
    }
    return ERR_CONN;
 8009008:	f06f 030a 	mvn.w	r3, #10
 800900c:	e08b      	b.n	8009126 <netconn_recv_data+0x192>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b00      	cmp	r3, #0
 800901a:	d110      	bne.n	800903e <netconn_recv_data+0xaa>
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10b      	bne.n	800903e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800902c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d025      	beq.n	800908a <netconn_recv_data+0xf6>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3310      	adds	r3, #16
 8009042:	f107 0218 	add.w	r2, r7, #24
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f010 fc02 	bl	8019852 <sys_arch_mbox_tryfetch>
 800904e:	4603      	mov	r3, r0
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009054:	d121      	bne.n	800909a <netconn_recv_data+0x106>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 fae4 	bl	8009624 <netconn_err>
 800905c:	4603      	mov	r3, r0
 800905e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      if (err != ERR_OK) {
 8009062:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <netconn_recv_data+0xdc>
        /* return pending error */
        return err;
 800906a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800906e:	e05a      	b.n	8009126 <netconn_recv_data+0x192>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <netconn_recv_data+0xf0>
        return ERR_CONN;
 800907e:	f06f 030a 	mvn.w	r3, #10
 8009082:	e050      	b.n	8009126 <netconn_recv_data+0x192>
      }
      return ERR_WOULDBLOCK;
 8009084:	f06f 0306 	mvn.w	r3, #6
 8009088:	e04d      	b.n	8009126 <netconn_recv_data+0x192>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3310      	adds	r3, #16
 800908e:	f107 0118 	add.w	r1, r7, #24
 8009092:	2200      	movs	r2, #0
 8009094:	4618      	mov	r0, r3
 8009096:	f010 fb9d 	bl	80197d4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090a2:	2b10      	cmp	r3, #16
 80090a4:	d117      	bne.n	80090d6 <netconn_recv_data+0x142>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	f107 0217 	add.w	r2, r7, #23
 80090ac:	4611      	mov	r1, r2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fb0a 	bl	80096c8 <lwip_netconn_is_err_msg>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d009      	beq.n	80090ce <netconn_recv_data+0x13a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80090ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090be:	f113 0f0f 	cmn.w	r3, #15
 80090c2:	d101      	bne.n	80090c8 <netconn_recv_data+0x134>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e02e      	b.n	8009126 <netconn_recv_data+0x192>
      }
      return err;
 80090c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090cc:	e02b      	b.n	8009126 <netconn_recv_data+0x192>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	891b      	ldrh	r3, [r3, #8]
 80090d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80090d4:	e00d      	b.n	80090f2 <netconn_recv_data+0x15e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d106      	bne.n	80090ea <netconn_recv_data+0x156>
 80090dc:	4b14      	ldr	r3, [pc, #80]	; (8009130 <netconn_recv_data+0x19c>)
 80090de:	f240 2291 	movw	r2, #657	; 0x291
 80090e2:	4917      	ldr	r1, [pc, #92]	; (8009140 <netconn_recv_data+0x1ac>)
 80090e4:	4814      	ldr	r0, [pc, #80]	; (8009138 <netconn_recv_data+0x1a4>)
 80090e6:	f012 fbeb 	bl	801b8c0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	891b      	ldrh	r3, [r3, #8]
 80090f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
 80090f2:	f010 fce5 	bl	8019ac0 <sys_arch_protect>
 80090f6:	6238      	str	r0, [r7, #32]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a1a      	ldr	r2, [r3, #32]
 80090fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	621a      	str	r2, [r3, #32]
 8009104:	6a38      	ldr	r0, [r7, #32]
 8009106:	f010 fce9 	bl	8019adc <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d005      	beq.n	800911e <netconn_recv_data+0x18a>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009116:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009118:	2101      	movs	r1, #1
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3728      	adds	r7, #40	; 0x28
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	0801cca0 	.word	0x0801cca0
 8009134:	0801ceb8 	.word	0x0801ceb8
 8009138:	0801ccf8 	.word	0x0801ccf8
 800913c:	0801ced8 	.word	0x0801ced8
 8009140:	0801cef4 	.word	0x0801cef4

08009144 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d005      	beq.n	8009162 <netconn_tcp_recvd_msg+0x1e>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800915e:	2b10      	cmp	r3, #16
 8009160:	d009      	beq.n	8009176 <netconn_tcp_recvd_msg+0x32>
 8009162:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <netconn_tcp_recvd_msg+0x50>)
 8009164:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009168:	490b      	ldr	r1, [pc, #44]	; (8009198 <netconn_tcp_recvd_msg+0x54>)
 800916a:	480c      	ldr	r0, [pc, #48]	; (800919c <netconn_tcp_recvd_msg+0x58>)
 800916c:	f012 fba8 	bl	801b8c0 <iprintf>
 8009170:	f06f 030f 	mvn.w	r3, #15
 8009174:	e00a      	b.n	800918c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	4806      	ldr	r0, [pc, #24]	; (80091a0 <netconn_tcp_recvd_msg+0x5c>)
 8009186:	f7ff fd79 	bl	8008c7c <netconn_apimsg>
 800918a:	4603      	mov	r3, r0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	0801cca0 	.word	0x0801cca0
 8009198:	0801cf00 	.word	0x0801cf00
 800919c:	0801ccf8 	.word	0x0801ccf8
 80091a0:	0800a8b7 	.word	0x0800a8b7

080091a4 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08c      	sub	sp, #48	; 0x30
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d005      	beq.n	80091c0 <netconn_tcp_recvd+0x1c>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091bc:	2b10      	cmp	r3, #16
 80091be:	d009      	beq.n	80091d4 <netconn_tcp_recvd+0x30>
 80091c0:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <netconn_tcp_recvd+0x50>)
 80091c2:	f240 22b5 	movw	r2, #693	; 0x2b5
 80091c6:	490c      	ldr	r1, [pc, #48]	; (80091f8 <netconn_tcp_recvd+0x54>)
 80091c8:	480c      	ldr	r0, [pc, #48]	; (80091fc <netconn_tcp_recvd+0x58>)
 80091ca:	f012 fb79 	bl	801b8c0 <iprintf>
 80091ce:	f06f 030f 	mvn.w	r3, #15
 80091d2:	e00b      	b.n	80091ec <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 80091d4:	f107 030c 	add.w	r3, r7, #12
 80091d8:	461a      	mov	r2, r3
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff ffb1 	bl	8009144 <netconn_tcp_recvd_msg>
 80091e2:	4603      	mov	r3, r0
 80091e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 80091e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3730      	adds	r7, #48	; 0x30
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	0801cca0 	.word	0x0801cca0
 80091f8:	0801cf00 	.word	0x0801cf00
 80091fc:	0801ccf8 	.word	0x0801ccf8

08009200 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b090      	sub	sp, #64	; 0x40
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	4613      	mov	r3, r2
 800920c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3310      	adds	r3, #16
 8009212:	4618      	mov	r0, r3
 8009214:	f010 fb39 	bl	801988a <sys_mbox_valid>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800921e:	f06f 030a 	mvn.w	r3, #10
 8009222:	e072      	b.n	800930a <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800922a:	b25b      	sxtb	r3, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	da09      	bge.n	8009244 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800923a:	b2da      	uxtb	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    goto handle_fin;
 8009242:	e03b      	b.n	80092bc <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009244:	79fb      	ldrb	r3, [r7, #7]
 8009246:	461a      	mov	r2, r3
 8009248:	68b9      	ldr	r1, [r7, #8]
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f7ff fea2 	bl	8008f94 <netconn_recv_data>
 8009250:	4603      	mov	r3, r0
 8009252:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009256:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800925e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009262:	e052      	b.n	800930a <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800926a:	79fb      	ldrb	r3, [r7, #7]
 800926c:	f003 0308 	and.w	r3, r3, #8
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10e      	bne.n	8009292 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <netconn_recv_data_tcp+0x80>
 800927a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927c:	891b      	ldrh	r3, [r3, #8]
 800927e:	e000      	b.n	8009282 <netconn_recv_data_tcp+0x82>
 8009280:	2301      	movs	r3, #1
 8009282:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009284:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009286:	f107 0214 	add.w	r2, r7, #20
 800928a:	4619      	mov	r1, r3
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f7ff ff59 	bl	8009144 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	2b00      	cmp	r3, #0
 8009296:	d136      	bne.n	8009306 <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	f003 0310 	and.w	r3, r3, #16
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00b      	beq.n	80092ba <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return ERR_WOULDBLOCK;
 80092b4:	f06f 0306 	mvn.w	r3, #6
 80092b8:	e027      	b.n	800930a <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 80092ba:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d005      	beq.n	80092d0 <netconn_recv_data_tcp+0xd0>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	2200      	movs	r2, #0
 80092ca:	2101      	movs	r1, #1
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10f      	bne.n	80092f8 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 f9a3 	bl	8009624 <netconn_err>
 80092de:	4603      	mov	r3, r0
 80092e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80092e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <netconn_recv_data_tcp+0xf2>
          return err;
 80092ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80092f0:	e00b      	b.n	800930a <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 80092f2:	f06f 030d 	mvn.w	r3, #13
 80092f6:	e008      	b.n	800930a <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80092f8:	2101      	movs	r1, #1
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f962 	bl	80095c4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009300:	f06f 030e 	mvn.w	r3, #14
 8009304:	e001      	b.n	800930a <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8009306:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800930a:	4618      	mov	r0, r3
 800930c:	3740      	adds	r7, #64	; 0x40
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d005      	beq.n	8009334 <netconn_recv_tcp_pbuf_flags+0x20>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009330:	2b10      	cmp	r3, #16
 8009332:	d009      	beq.n	8009348 <netconn_recv_tcp_pbuf_flags+0x34>
 8009334:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8009336:	f240 3225 	movw	r2, #805	; 0x325
 800933a:	490a      	ldr	r1, [pc, #40]	; (8009364 <netconn_recv_tcp_pbuf_flags+0x50>)
 800933c:	480a      	ldr	r0, [pc, #40]	; (8009368 <netconn_recv_tcp_pbuf_flags+0x54>)
 800933e:	f012 fabf 	bl	801b8c0 <iprintf>
 8009342:	f06f 030f 	mvn.w	r3, #15
 8009346:	e006      	b.n	8009356 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	461a      	mov	r2, r3
 800934c:	68b9      	ldr	r1, [r7, #8]
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff ff56 	bl	8009200 <netconn_recv_data_tcp>
 8009354:	4603      	mov	r3, r0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	0801cca0 	.word	0x0801cca0
 8009364:	0801cf00 	.word	0x0801cf00
 8009368:	0801ccf8 	.word	0x0801ccf8

0800936c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	4613      	mov	r3, r2
 8009378:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d005      	beq.n	800938c <netconn_recv_udp_raw_netbuf_flags+0x20>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009388:	2b10      	cmp	r3, #16
 800938a:	d109      	bne.n	80093a0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800938c:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800938e:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8009392:	490a      	ldr	r1, [pc, #40]	; (80093bc <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8009394:	480a      	ldr	r0, [pc, #40]	; (80093c0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8009396:	f012 fa93 	bl	801b8c0 <iprintf>
 800939a:	f06f 030f 	mvn.w	r3, #15
 800939e:	e006      	b.n	80093ae <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	461a      	mov	r2, r3
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f7ff fdf4 	bl	8008f94 <netconn_recv_data>
 80093ac:	4603      	mov	r3, r0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	0801cca0 	.word	0x0801cca0
 80093bc:	0801cf24 	.word	0x0801cf24
 80093c0:	0801ccf8 	.word	0x0801ccf8

080093c4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08c      	sub	sp, #48	; 0x30
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <netconn_send+0x24>
 80093d4:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <netconn_send+0x4c>)
 80093d6:	f240 32b2 	movw	r2, #946	; 0x3b2
 80093da:	490e      	ldr	r1, [pc, #56]	; (8009414 <netconn_send+0x50>)
 80093dc:	480e      	ldr	r0, [pc, #56]	; (8009418 <netconn_send+0x54>)
 80093de:	f012 fa6f 	bl	801b8c0 <iprintf>
 80093e2:	f06f 030f 	mvn.w	r3, #15
 80093e6:	e00e      	b.n	8009406 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80093f0:	f107 030c 	add.w	r3, r7, #12
 80093f4:	4619      	mov	r1, r3
 80093f6:	4809      	ldr	r0, [pc, #36]	; (800941c <netconn_send+0x58>)
 80093f8:	f7ff fc40 	bl	8008c7c <netconn_apimsg>
 80093fc:	4603      	mov	r3, r0
 80093fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009402:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009406:	4618      	mov	r0, r3
 8009408:	3730      	adds	r7, #48	; 0x30
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	0801cca0 	.word	0x0801cca0
 8009414:	0801cf5c 	.word	0x0801cf5c
 8009418:	0801ccf8 	.word	0x0801ccf8
 800941c:	0800a81d 	.word	0x0800a81d

08009420 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af02      	add	r7, sp, #8
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009436:	78fa      	ldrb	r2, [r7, #3]
 8009438:	f107 0110 	add.w	r1, r7, #16
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	4613      	mov	r3, r2
 8009442:	2201      	movs	r2, #1
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 f805 	bl	8009454 <netconn_write_vectors_partly>
 800944a:	4603      	mov	r3, r0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3718      	adds	r7, #24
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b092      	sub	sp, #72	; 0x48
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	4611      	mov	r1, r2
 8009460:	461a      	mov	r2, r3
 8009462:	460b      	mov	r3, r1
 8009464:	80fb      	strh	r3, [r7, #6]
 8009466:	4613      	mov	r3, r2
 8009468:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d109      	bne.n	8009484 <netconn_write_vectors_partly+0x30>
 8009470:	4b4e      	ldr	r3, [pc, #312]	; (80095ac <netconn_write_vectors_partly+0x158>)
 8009472:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009476:	494e      	ldr	r1, [pc, #312]	; (80095b0 <netconn_write_vectors_partly+0x15c>)
 8009478:	484e      	ldr	r0, [pc, #312]	; (80095b4 <netconn_write_vectors_partly+0x160>)
 800947a:	f012 fa21 	bl	801b8c0 <iprintf>
 800947e:	f06f 030f 	mvn.w	r3, #15
 8009482:	e08f      	b.n	80095a4 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800948c:	2b10      	cmp	r3, #16
 800948e:	d009      	beq.n	80094a4 <netconn_write_vectors_partly+0x50>
 8009490:	4b46      	ldr	r3, [pc, #280]	; (80095ac <netconn_write_vectors_partly+0x158>)
 8009492:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009496:	4948      	ldr	r1, [pc, #288]	; (80095b8 <netconn_write_vectors_partly+0x164>)
 8009498:	4846      	ldr	r0, [pc, #280]	; (80095b4 <netconn_write_vectors_partly+0x160>)
 800949a:	f012 fa11 	bl	801b8c0 <iprintf>
 800949e:	f06f 0305 	mvn.w	r3, #5
 80094a2:	e07f      	b.n	80095a4 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d104      	bne.n	80094bc <netconn_write_vectors_partly+0x68>
 80094b2:	797b      	ldrb	r3, [r7, #5]
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <netconn_write_vectors_partly+0x6c>
 80094bc:	2301      	movs	r3, #1
 80094be:	e000      	b.n	80094c2 <netconn_write_vectors_partly+0x6e>
 80094c0:	2300      	movs	r3, #0
 80094c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80094c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d005      	beq.n	80094da <netconn_write_vectors_partly+0x86>
 80094ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80094d4:	f06f 0305 	mvn.w	r3, #5
 80094d8:	e064      	b.n	80095a4 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80094de:	2300      	movs	r3, #0
 80094e0:	643b      	str	r3, [r7, #64]	; 0x40
 80094e2:	e015      	b.n	8009510 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 80094e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	4413      	add	r3, r2
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094f0:	4413      	add	r3, r2
 80094f2:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80094f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	4413      	add	r3, r2
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009500:	429a      	cmp	r2, r3
 8009502:	d202      	bcs.n	800950a <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8009504:	f06f 0305 	mvn.w	r3, #5
 8009508:	e04c      	b.n	80095a4 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 800950a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950c:	3301      	adds	r3, #1
 800950e:	643b      	str	r3, [r7, #64]	; 0x40
 8009510:	88fb      	ldrh	r3, [r7, #6]
 8009512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009514:	429a      	cmp	r2, r3
 8009516:	dbe5      	blt.n	80094e4 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8009518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	e040      	b.n	80095a4 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8009522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009524:	2b00      	cmp	r3, #0
 8009526:	da0a      	bge.n	800953e <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800952a:	2b00      	cmp	r3, #0
 800952c:	d102      	bne.n	8009534 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 800952e:	f06f 0305 	mvn.w	r3, #5
 8009532:	e037      	b.n	80095a4 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009534:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009538:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009546:	88fb      	ldrh	r3, [r7, #6]
 8009548:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800954e:	797b      	ldrb	r3, [r7, #5]
 8009550:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009556:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800955c:	f107 0314 	add.w	r3, r7, #20
 8009560:	4619      	mov	r1, r3
 8009562:	4816      	ldr	r0, [pc, #88]	; (80095bc <netconn_write_vectors_partly+0x168>)
 8009564:	f7ff fb8a 	bl	8008c7c <netconn_apimsg>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800956e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009572:	2b00      	cmp	r3, #0
 8009574:	d114      	bne.n	80095a0 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8009576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800957c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800957e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009580:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009582:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800958e:	429a      	cmp	r2, r3
 8009590:	d006      	beq.n	80095a0 <netconn_write_vectors_partly+0x14c>
 8009592:	4b06      	ldr	r3, [pc, #24]	; (80095ac <netconn_write_vectors_partly+0x158>)
 8009594:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009598:	4909      	ldr	r1, [pc, #36]	; (80095c0 <netconn_write_vectors_partly+0x16c>)
 800959a:	4806      	ldr	r0, [pc, #24]	; (80095b4 <netconn_write_vectors_partly+0x160>)
 800959c:	f012 f990 	bl	801b8c0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80095a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3748      	adds	r7, #72	; 0x48
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	0801cca0 	.word	0x0801cca0
 80095b0:	0801cf78 	.word	0x0801cf78
 80095b4:	0801ccf8 	.word	0x0801ccf8
 80095b8:	0801cf94 	.word	0x0801cf94
 80095bc:	0800acc1 	.word	0x0800acc1
 80095c0:	0801cfb8 	.word	0x0801cfb8

080095c4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08c      	sub	sp, #48	; 0x30
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d109      	bne.n	80095ea <netconn_close_shutdown+0x26>
 80095d6:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <netconn_close_shutdown+0x50>)
 80095d8:	f240 4247 	movw	r2, #1095	; 0x447
 80095dc:	490e      	ldr	r1, [pc, #56]	; (8009618 <netconn_close_shutdown+0x54>)
 80095de:	480f      	ldr	r0, [pc, #60]	; (800961c <netconn_close_shutdown+0x58>)
 80095e0:	f012 f96e 	bl	801b8c0 <iprintf>
 80095e4:	f06f 030f 	mvn.w	r3, #15
 80095e8:	e010      	b.n	800960c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80095f2:	2329      	movs	r3, #41	; 0x29
 80095f4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80095f6:	f107 030c 	add.w	r3, r7, #12
 80095fa:	4619      	mov	r1, r3
 80095fc:	4808      	ldr	r0, [pc, #32]	; (8009620 <netconn_close_shutdown+0x5c>)
 80095fe:	f7ff fb3d 	bl	8008c7c <netconn_apimsg>
 8009602:	4603      	mov	r3, r0
 8009604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009608:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800960c:	4618      	mov	r0, r3
 800960e:	3730      	adds	r7, #48	; 0x30
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	0801cca0 	.word	0x0801cca0
 8009618:	0801cfdc 	.word	0x0801cfdc
 800961c:	0801ccf8 	.word	0x0801ccf8
 8009620:	0800aee5 	.word	0x0800aee5

08009624 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <netconn_err+0x12>
    return ERR_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	e00d      	b.n	8009652 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009636:	f010 fa43 	bl	8019ac0 <sys_arch_protect>
 800963a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	7a1b      	ldrb	r3, [r3, #8]
 8009640:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f010 fa47 	bl	8019adc <sys_arch_unprotect>
  return err;
 800964e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800966a:	f113 0f0d 	cmn.w	r3, #13
 800966e:	d009      	beq.n	8009684 <lwip_netconn_err_to_msg+0x28>
 8009670:	f113 0f0d 	cmn.w	r3, #13
 8009674:	dc0c      	bgt.n	8009690 <lwip_netconn_err_to_msg+0x34>
 8009676:	f113 0f0f 	cmn.w	r3, #15
 800967a:	d007      	beq.n	800968c <lwip_netconn_err_to_msg+0x30>
 800967c:	f113 0f0e 	cmn.w	r3, #14
 8009680:	d002      	beq.n	8009688 <lwip_netconn_err_to_msg+0x2c>
 8009682:	e005      	b.n	8009690 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009684:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <lwip_netconn_err_to_msg+0x54>)
 8009686:	e00e      	b.n	80096a6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009688:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <lwip_netconn_err_to_msg+0x58>)
 800968a:	e00c      	b.n	80096a6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800968c:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <lwip_netconn_err_to_msg+0x5c>)
 800968e:	e00a      	b.n	80096a6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d005      	beq.n	80096a4 <lwip_netconn_err_to_msg+0x48>
 8009698:	4b08      	ldr	r3, [pc, #32]	; (80096bc <lwip_netconn_err_to_msg+0x60>)
 800969a:	227d      	movs	r2, #125	; 0x7d
 800969c:	4908      	ldr	r1, [pc, #32]	; (80096c0 <lwip_netconn_err_to_msg+0x64>)
 800969e:	4809      	ldr	r0, [pc, #36]	; (80096c4 <lwip_netconn_err_to_msg+0x68>)
 80096a0:	f012 f90e 	bl	801b8c0 <iprintf>
      return NULL;
 80096a4:	2300      	movs	r3, #0
  }
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	080209d0 	.word	0x080209d0
 80096b4:	080209d1 	.word	0x080209d1
 80096b8:	080209d2 	.word	0x080209d2
 80096bc:	0801cff8 	.word	0x0801cff8
 80096c0:	0801d02c 	.word	0x0801d02c
 80096c4:	0801d03c 	.word	0x0801d03c

080096c8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d105      	bne.n	80096e4 <lwip_netconn_is_err_msg+0x1c>
 80096d8:	4b12      	ldr	r3, [pc, #72]	; (8009724 <lwip_netconn_is_err_msg+0x5c>)
 80096da:	2285      	movs	r2, #133	; 0x85
 80096dc:	4912      	ldr	r1, [pc, #72]	; (8009728 <lwip_netconn_is_err_msg+0x60>)
 80096de:	4813      	ldr	r0, [pc, #76]	; (800972c <lwip_netconn_is_err_msg+0x64>)
 80096e0:	f012 f8ee 	bl	801b8c0 <iprintf>

  if (msg == &netconn_aborted) {
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a12      	ldr	r2, [pc, #72]	; (8009730 <lwip_netconn_is_err_msg+0x68>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d104      	bne.n	80096f6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	22f3      	movs	r2, #243	; 0xf3
 80096f0:	701a      	strb	r2, [r3, #0]
    return 1;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e012      	b.n	800971c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a0e      	ldr	r2, [pc, #56]	; (8009734 <lwip_netconn_is_err_msg+0x6c>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d104      	bne.n	8009708 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	22f2      	movs	r2, #242	; 0xf2
 8009702:	701a      	strb	r2, [r3, #0]
    return 1;
 8009704:	2301      	movs	r3, #1
 8009706:	e009      	b.n	800971c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a0b      	ldr	r2, [pc, #44]	; (8009738 <lwip_netconn_is_err_msg+0x70>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d104      	bne.n	800971a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	22f1      	movs	r2, #241	; 0xf1
 8009714:	701a      	strb	r2, [r3, #0]
    return 1;
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	0801cff8 	.word	0x0801cff8
 8009728:	0801d064 	.word	0x0801d064
 800972c:	0801d03c 	.word	0x0801d03c
 8009730:	080209d0 	.word	0x080209d0
 8009734:	080209d1 	.word	0x080209d1
 8009738:	080209d2 	.word	0x080209d2

0800973c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08a      	sub	sp, #40	; 0x28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d105      	bne.n	800975c <recv_udp+0x20>
 8009750:	4b43      	ldr	r3, [pc, #268]	; (8009860 <recv_udp+0x124>)
 8009752:	22e5      	movs	r2, #229	; 0xe5
 8009754:	4943      	ldr	r1, [pc, #268]	; (8009864 <recv_udp+0x128>)
 8009756:	4844      	ldr	r0, [pc, #272]	; (8009868 <recv_udp+0x12c>)
 8009758:	f012 f8b2 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d105      	bne.n	800976e <recv_udp+0x32>
 8009762:	4b3f      	ldr	r3, [pc, #252]	; (8009860 <recv_udp+0x124>)
 8009764:	22e6      	movs	r2, #230	; 0xe6
 8009766:	4941      	ldr	r1, [pc, #260]	; (800986c <recv_udp+0x130>)
 8009768:	483f      	ldr	r0, [pc, #252]	; (8009868 <recv_udp+0x12c>)
 800976a:	f012 f8a9 	bl	801b8c0 <iprintf>
  conn = (struct netconn *)arg;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	627b      	str	r3, [r7, #36]	; 0x24

  if (conn == NULL) {
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	d103      	bne.n	8009780 <recv_udp+0x44>
    pbuf_free(p);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f004 fb4d 	bl	800de18 <pbuf_free>
    return;
 800977e:	e06b      	b.n	8009858 <recv_udp+0x11c>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	429a      	cmp	r2, r3
 8009788:	d005      	beq.n	8009796 <recv_udp+0x5a>
 800978a:	4b35      	ldr	r3, [pc, #212]	; (8009860 <recv_udp+0x124>)
 800978c:	22ee      	movs	r2, #238	; 0xee
 800978e:	4938      	ldr	r1, [pc, #224]	; (8009870 <recv_udp+0x134>)
 8009790:	4835      	ldr	r0, [pc, #212]	; (8009868 <recv_udp+0x12c>)
 8009792:	f012 f895 	bl	801b8c0 <iprintf>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
 8009796:	f010 f993 	bl	8019ac0 <sys_arch_protect>
 800979a:	6238      	str	r0, [r7, #32]
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	61fb      	str	r3, [r7, #28]
 80097a2:	6a38      	ldr	r0, [r7, #32]
 80097a4:	f010 f99a 	bl	8019adc <sys_arch_unprotect>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	3310      	adds	r3, #16
 80097ac:	4618      	mov	r0, r3
 80097ae:	f010 f86c 	bl	801988a <sys_mbox_valid>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d008      	beq.n	80097ca <recv_udp+0x8e>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	891b      	ldrh	r3, [r3, #8]
 80097bc:	461a      	mov	r2, r3
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	441a      	add	r2, r3
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	69db      	ldr	r3, [r3, #28]
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 80097c6:	429a      	cmp	r2, r3
 80097c8:	dd03      	ble.n	80097d2 <recv_udp+0x96>
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f004 fb24 	bl	800de18 <pbuf_free>
    return;
 80097d0:	e042      	b.n	8009858 <recv_udp+0x11c>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80097d2:	2006      	movs	r0, #6
 80097d4:	f003 fbec 	bl	800cfb0 <memp_malloc>
 80097d8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d103      	bne.n	80097e8 <recv_udp+0xac>
    pbuf_free(p);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f004 fb19 	bl	800de18 <pbuf_free>
    return;
 80097e6:	e037      	b.n	8009858 <recv_udp+0x11c>
  } else {
    buf->p = p;
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d002      	beq.n	8009800 <recv_udp+0xc4>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	e000      	b.n	8009802 <recv_udp+0xc6>
 8009800:	2300      	movs	r3, #0
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800980a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	891b      	ldrh	r3, [r3, #8]
 8009810:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	3310      	adds	r3, #16
 8009816:	69b9      	ldr	r1, [r7, #24]
 8009818:	4618      	mov	r0, r3
 800981a:	f00f ffc1 	bl	80197a0 <sys_mbox_trypost>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <recv_udp+0xf0>
    netbuf_delete(buf);
 8009824:	69b8      	ldr	r0, [r7, #24]
 8009826:	f001 fc07 	bl	800b038 <netbuf_delete>
    return;
 800982a:	e015      	b.n	8009858 <recv_udp+0x11c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 800982c:	f010 f948 	bl	8019ac0 <sys_arch_protect>
 8009830:	6138      	str	r0, [r7, #16]
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	6a1a      	ldr	r2, [r3, #32]
 8009836:	8afb      	ldrh	r3, [r7, #22]
 8009838:	441a      	add	r2, r3
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	621a      	str	r2, [r3, #32]
 800983e:	6938      	ldr	r0, [r7, #16]
 8009840:	f010 f94c 	bl	8019adc <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	2b00      	cmp	r3, #0
 800984a:	d005      	beq.n	8009858 <recv_udp+0x11c>
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	8afa      	ldrh	r2, [r7, #22]
 8009852:	2100      	movs	r1, #0
 8009854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009856:	4798      	blx	r3
  }
}
 8009858:	3728      	adds	r7, #40	; 0x28
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	0801cff8 	.word	0x0801cff8
 8009864:	0801d070 	.word	0x0801d070
 8009868:	0801d03c 	.word	0x0801d03c
 800986c:	0801d094 	.word	0x0801d094
 8009870:	0801d0b4 	.word	0x0801d0b4

08009874 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d106      	bne.n	8009896 <recv_tcp+0x22>
 8009888:	4b3c      	ldr	r3, [pc, #240]	; (800997c <recv_tcp+0x108>)
 800988a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800988e:	493c      	ldr	r1, [pc, #240]	; (8009980 <recv_tcp+0x10c>)
 8009890:	483c      	ldr	r0, [pc, #240]	; (8009984 <recv_tcp+0x110>)
 8009892:	f012 f815 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d106      	bne.n	80098aa <recv_tcp+0x36>
 800989c:	4b37      	ldr	r3, [pc, #220]	; (800997c <recv_tcp+0x108>)
 800989e:	f240 122d 	movw	r2, #301	; 0x12d
 80098a2:	4939      	ldr	r1, [pc, #228]	; (8009988 <recv_tcp+0x114>)
 80098a4:	4837      	ldr	r0, [pc, #220]	; (8009984 <recv_tcp+0x110>)
 80098a6:	f012 f80b 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80098aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d006      	beq.n	80098c0 <recv_tcp+0x4c>
 80098b2:	4b32      	ldr	r3, [pc, #200]	; (800997c <recv_tcp+0x108>)
 80098b4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80098b8:	4934      	ldr	r1, [pc, #208]	; (800998c <recv_tcp+0x118>)
 80098ba:	4832      	ldr	r0, [pc, #200]	; (8009984 <recv_tcp+0x110>)
 80098bc:	f012 f800 	bl	801b8c0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d102      	bne.n	80098d0 <recv_tcp+0x5c>
    return ERR_VAL;
 80098ca:	f06f 0305 	mvn.w	r3, #5
 80098ce:	e051      	b.n	8009974 <recv_tcp+0x100>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d006      	beq.n	80098e8 <recv_tcp+0x74>
 80098da:	4b28      	ldr	r3, [pc, #160]	; (800997c <recv_tcp+0x108>)
 80098dc:	f240 1235 	movw	r2, #309	; 0x135
 80098e0:	492b      	ldr	r1, [pc, #172]	; (8009990 <recv_tcp+0x11c>)
 80098e2:	4828      	ldr	r0, [pc, #160]	; (8009984 <recv_tcp+0x110>)
 80098e4:	f011 ffec 	bl	801b8c0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	3310      	adds	r3, #16
 80098ec:	4618      	mov	r0, r3
 80098ee:	f00f ffcc 	bl	801988a <sys_mbox_valid>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10d      	bne.n	8009914 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d008      	beq.n	8009910 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	891b      	ldrh	r3, [r3, #8]
 8009902:	4619      	mov	r1, r3
 8009904:	68b8      	ldr	r0, [r7, #8]
 8009906:	f005 f8ed 	bl	800eae4 <tcp_recved>
      pbuf_free(p);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f004 fa84 	bl	800de18 <pbuf_free>
    }
    return ERR_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	e02f      	b.n	8009974 <recv_tcp+0x100>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d005      	beq.n	8009926 <recv_tcp+0xb2>
    msg = p;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	891b      	ldrh	r3, [r3, #8]
 8009922:	83fb      	strh	r3, [r7, #30]
 8009924:	e003      	b.n	800992e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009926:	4b1b      	ldr	r3, [pc, #108]	; (8009994 <recv_tcp+0x120>)
 8009928:	61bb      	str	r3, [r7, #24]
    len = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	3310      	adds	r3, #16
 8009932:	69b9      	ldr	r1, [r7, #24]
 8009934:	4618      	mov	r0, r3
 8009936:	f00f ff33 	bl	80197a0 <sys_mbox_trypost>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009944:	e016      	b.n	8009974 <recv_tcp+0x100>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 8009946:	f010 f8bb 	bl	8019ac0 <sys_arch_protect>
 800994a:	6138      	str	r0, [r7, #16]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	6a1a      	ldr	r2, [r3, #32]
 8009950:	8bfb      	ldrh	r3, [r7, #30]
 8009952:	441a      	add	r2, r3
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	621a      	str	r2, [r3, #32]
 8009958:	6938      	ldr	r0, [r7, #16]
 800995a:	f010 f8bf 	bl	8019adc <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009962:	2b00      	cmp	r3, #0
 8009964:	d005      	beq.n	8009972 <recv_tcp+0xfe>
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996a:	8bfa      	ldrh	r2, [r7, #30]
 800996c:	2100      	movs	r1, #0
 800996e:	6978      	ldr	r0, [r7, #20]
 8009970:	4798      	blx	r3
  }

  return ERR_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	0801cff8 	.word	0x0801cff8
 8009980:	0801d0d4 	.word	0x0801d0d4
 8009984:	0801d03c 	.word	0x0801d03c
 8009988:	0801d0f8 	.word	0x0801d0f8
 800998c:	0801d118 	.word	0x0801d118
 8009990:	0801d130 	.word	0x0801d130
 8009994:	080209d2 	.word	0x080209d2

08009998 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d106      	bne.n	80099ba <poll_tcp+0x22>
 80099ac:	4b2b      	ldr	r3, [pc, #172]	; (8009a5c <poll_tcp+0xc4>)
 80099ae:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80099b2:	492b      	ldr	r1, [pc, #172]	; (8009a60 <poll_tcp+0xc8>)
 80099b4:	482b      	ldr	r0, [pc, #172]	; (8009a64 <poll_tcp+0xcc>)
 80099b6:	f011 ff83 	bl	801b8c0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	785b      	ldrb	r3, [r3, #1]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d104      	bne.n	80099cc <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80099c2:	2101      	movs	r1, #1
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 ffab 	bl	800a920 <lwip_netconn_do_writemore>
 80099ca:	e016      	b.n	80099fa <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	785b      	ldrb	r3, [r3, #1]
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d112      	bne.n	80099fa <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <poll_tcp+0x5a>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e0:	7a5b      	ldrb	r3, [r3, #9]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ea:	7a5a      	ldrb	r2, [r3, #9]
 80099ec:	3a01      	subs	r2, #1
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80099f2:	2101      	movs	r1, #1
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 fb4f 	bl	800a098 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a00:	f003 0310 	and.w	r3, r3, #16
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d023      	beq.n	8009a50 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d01f      	beq.n	8009a50 <poll_tcp+0xb8>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009a18:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009a1c:	d318      	bcc.n	8009a50 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	d812      	bhi.n	8009a50 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a30:	f023 0310 	bic.w	r3, r3, #16
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d005      	beq.n	8009a50 <poll_tcp+0xb8>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a48:	2200      	movs	r2, #0
 8009a4a:	2102      	movs	r1, #2
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	0801cff8 	.word	0x0801cff8
 8009a60:	0801d150 	.word	0x0801d150
 8009a64:	0801d03c 	.word	0x0801d03c

08009a68 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	4613      	mov	r3, r2
 8009a74:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <sent_tcp+0x26>
 8009a80:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <sent_tcp+0xa0>)
 8009a82:	f240 1293 	movw	r2, #403	; 0x193
 8009a86:	4921      	ldr	r1, [pc, #132]	; (8009b0c <sent_tcp+0xa4>)
 8009a88:	4821      	ldr	r0, [pc, #132]	; (8009b10 <sent_tcp+0xa8>)
 8009a8a:	f011 ff19 	bl	801b8c0 <iprintf>

  if (conn) {
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d034      	beq.n	8009afe <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	785b      	ldrb	r3, [r3, #1]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d104      	bne.n	8009aa6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	6978      	ldr	r0, [r7, #20]
 8009aa0:	f000 ff3e 	bl	800a920 <lwip_netconn_do_writemore>
 8009aa4:	e007      	b.n	8009ab6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	785b      	ldrb	r3, [r3, #1]
 8009aaa:	2b04      	cmp	r3, #4
 8009aac:	d103      	bne.n	8009ab6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009aae:	2101      	movs	r1, #1
 8009ab0:	6978      	ldr	r0, [r7, #20]
 8009ab2:	f000 faf1 	bl	800a098 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d01f      	beq.n	8009afe <sent_tcp+0x96>
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ac6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009aca:	d318      	bcc.n	8009afe <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d812      	bhi.n	8009afe <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ade:	f023 0310 	bic.w	r3, r3, #16
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d005      	beq.n	8009afe <sent_tcp+0x96>
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af6:	88fa      	ldrh	r2, [r7, #6]
 8009af8:	2102      	movs	r1, #2
 8009afa:	6978      	ldr	r0, [r7, #20]
 8009afc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	0801cff8 	.word	0x0801cff8
 8009b0c:	0801d150 	.word	0x0801d150
 8009b10:	0801d03c 	.word	0x0801d03c

08009b14 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b088      	sub	sp, #32
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <err_tcp+0x24>
 8009b2a:	4b61      	ldr	r3, [pc, #388]	; (8009cb0 <err_tcp+0x19c>)
 8009b2c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009b30:	4960      	ldr	r1, [pc, #384]	; (8009cb4 <err_tcp+0x1a0>)
 8009b32:	4861      	ldr	r0, [pc, #388]	; (8009cb8 <err_tcp+0x1a4>)
 8009b34:	f011 fec4 	bl	801b8c0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009b38:	f00f ffc2 	bl	8019ac0 <sys_arch_protect>
 8009b3c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	2200      	movs	r2, #0
 8009b42:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	78fa      	ldrb	r2, [r7, #3]
 8009b48:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b50:	f043 0301 	orr.w	r3, r3, #1
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	785b      	ldrb	r3, [r3, #1]
 8009b60:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	2200      	movs	r2, #0
 8009b66:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009b68:	69b8      	ldr	r0, [r7, #24]
 8009b6a:	f00f ffb7 	bl	8019adc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d005      	beq.n	8009b82 <err_tcp+0x6e>
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2104      	movs	r1, #4
 8009b7e:	69f8      	ldr	r0, [r7, #28]
 8009b80:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d005      	beq.n	8009b96 <err_tcp+0x82>
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2100      	movs	r1, #0
 8009b92:	69f8      	ldr	r0, [r7, #28]
 8009b94:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <err_tcp+0x96>
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2102      	movs	r1, #2
 8009ba6:	69f8      	ldr	r0, [r7, #28]
 8009ba8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7ff fd54 	bl	800965c <lwip_netconn_err_to_msg>
 8009bb4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	3310      	adds	r3, #16
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f00f fe65 	bl	801988a <sys_mbox_valid>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	3310      	adds	r3, #16
 8009bca:	6939      	ldr	r1, [r7, #16]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f00f fde7 	bl	80197a0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	3314      	adds	r3, #20
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f00f fe57 	bl	801988a <sys_mbox_valid>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d005      	beq.n	8009bee <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	3314      	adds	r3, #20
 8009be6:	6939      	ldr	r1, [r7, #16]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f00f fdd9 	bl	80197a0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d005      	beq.n	8009c00 <err_tcp+0xec>
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d002      	beq.n	8009c00 <err_tcp+0xec>
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d146      	bne.n	8009c8e <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	bf14      	ite	ne
 8009c0e:	2301      	movne	r3, #1
 8009c10:	2300      	moveq	r3, #0
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c1c:	f023 0304 	bic.w	r3, r3, #4
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (!was_nonblocking_connect) {
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d13b      	bne.n	8009ca6 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d106      	bne.n	8009c44 <err_tcp+0x130>
 8009c36:	4b1e      	ldr	r3, [pc, #120]	; (8009cb0 <err_tcp+0x19c>)
 8009c38:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009c3c:	491f      	ldr	r1, [pc, #124]	; (8009cbc <err_tcp+0x1a8>)
 8009c3e:	481e      	ldr	r0, [pc, #120]	; (8009cb8 <err_tcp+0x1a4>)
 8009c40:	f011 fe3e 	bl	801b8c0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d104      	bne.n	8009c54 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4e:	2200      	movs	r2, #0
 8009c50:	711a      	strb	r2, [r3, #4]
 8009c52:	e003      	b.n	8009c5c <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c58:	78fa      	ldrb	r2, [r7, #3]
 8009c5a:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	330c      	adds	r3, #12
 8009c64:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009c66:	68b8      	ldr	r0, [r7, #8]
 8009c68:	f00f fea0 	bl	80199ac <sys_sem_valid>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d106      	bne.n	8009c80 <err_tcp+0x16c>
 8009c72:	4b0f      	ldr	r3, [pc, #60]	; (8009cb0 <err_tcp+0x19c>)
 8009c74:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009c78:	4911      	ldr	r1, [pc, #68]	; (8009cc0 <err_tcp+0x1ac>)
 8009c7a:	480f      	ldr	r0, [pc, #60]	; (8009cb8 <err_tcp+0x1a4>)
 8009c7c:	f011 fe20 	bl	801b8c0 <iprintf>
      conn->current_msg = NULL;
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	2200      	movs	r2, #0
 8009c84:	629a      	str	r2, [r3, #40]	; 0x28
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009c86:	68b8      	ldr	r0, [r7, #8]
 8009c88:	f00f fe76 	bl	8019978 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009c8c:	e00b      	b.n	8009ca6 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d008      	beq.n	8009ca8 <err_tcp+0x194>
 8009c96:	4b06      	ldr	r3, [pc, #24]	; (8009cb0 <err_tcp+0x19c>)
 8009c98:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009c9c:	4909      	ldr	r1, [pc, #36]	; (8009cc4 <err_tcp+0x1b0>)
 8009c9e:	4806      	ldr	r0, [pc, #24]	; (8009cb8 <err_tcp+0x1a4>)
 8009ca0:	f011 fe0e 	bl	801b8c0 <iprintf>
  }
}
 8009ca4:	e000      	b.n	8009ca8 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8009ca6:	bf00      	nop
}
 8009ca8:	bf00      	nop
 8009caa:	3720      	adds	r7, #32
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	0801cff8 	.word	0x0801cff8
 8009cb4:	0801d150 	.word	0x0801d150
 8009cb8:	0801d03c 	.word	0x0801d03c
 8009cbc:	0801d160 	.word	0x0801d160
 8009cc0:	0801d17c 	.word	0x0801d17c
 8009cc4:	0801d198 	.word	0x0801d198

08009cc8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f005 fee1 	bl	800faa0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009cde:	490a      	ldr	r1, [pc, #40]	; (8009d08 <setup_tcp+0x40>)
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f005 feef 	bl	800fac4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009ce6:	4909      	ldr	r1, [pc, #36]	; (8009d0c <setup_tcp+0x44>)
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f005 ff0d 	bl	800fb08 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009cee:	2202      	movs	r2, #2
 8009cf0:	4907      	ldr	r1, [pc, #28]	; (8009d10 <setup_tcp+0x48>)
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f005 ff64 	bl	800fbc0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009cf8:	4906      	ldr	r1, [pc, #24]	; (8009d14 <setup_tcp+0x4c>)
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f005 ff26 	bl	800fb4c <tcp_err>
}
 8009d00:	bf00      	nop
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	08009875 	.word	0x08009875
 8009d0c:	08009a69 	.word	0x08009a69
 8009d10:	08009999 	.word	0x08009999
 8009d14:	08009b15 	.word	0x08009b15

08009d18 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009d20:	2300      	movs	r3, #0
 8009d22:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d006      	beq.n	8009d3c <pcb_new+0x24>
 8009d2e:	4b2b      	ldr	r3, [pc, #172]	; (8009ddc <pcb_new+0xc4>)
 8009d30:	f240 2265 	movw	r2, #613	; 0x265
 8009d34:	492a      	ldr	r1, [pc, #168]	; (8009de0 <pcb_new+0xc8>)
 8009d36:	482b      	ldr	r0, [pc, #172]	; (8009de4 <pcb_new+0xcc>)
 8009d38:	f011 fdc2 	bl	801b8c0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d46:	2b10      	cmp	r3, #16
 8009d48:	d022      	beq.n	8009d90 <pcb_new+0x78>
 8009d4a:	2b20      	cmp	r3, #32
 8009d4c:	d133      	bne.n	8009db6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681c      	ldr	r4, [r3, #0]
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f00b f9fe 	bl	8015156 <udp_new_ip_type>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d02a      	beq.n	8009dbe <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2b22      	cmp	r3, #34	; 0x22
 8009d70:	d104      	bne.n	8009d7c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6858      	ldr	r0, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	4917      	ldr	r1, [pc, #92]	; (8009de8 <pcb_new+0xd0>)
 8009d8a:	f00b f96b 	bl	8015064 <udp_recv>
      }
      break;
 8009d8e:	e016      	b.n	8009dbe <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681c      	ldr	r4, [r3, #0]
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f005 fe74 	bl	800fa84 <tcp_new_ip_type>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00b      	beq.n	8009dc2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7ff ff8a 	bl	8009cc8 <setup_tcp>
      }
      break;
 8009db4:	e005      	b.n	8009dc2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	22fa      	movs	r2, #250	; 0xfa
 8009dba:	711a      	strb	r2, [r3, #4]
      return;
 8009dbc:	e00a      	b.n	8009dd4 <pcb_new+0xbc>
      break;
 8009dbe:	bf00      	nop
 8009dc0:	e000      	b.n	8009dc4 <pcb_new+0xac>
      break;
 8009dc2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d102      	bne.n	8009dd4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	22ff      	movs	r2, #255	; 0xff
 8009dd2:	711a      	strb	r2, [r3, #4]
  }
}
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd90      	pop	{r4, r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	0801cff8 	.word	0x0801cff8
 8009de0:	0801d1dc 	.word	0x0801d1dc
 8009de4:	0801d03c 	.word	0x0801d03c
 8009de8:	0800973d 	.word	0x0800973d

08009dec <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d102      	bne.n	8009e0e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7ff ff85 	bl	8009d18 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009e0e:	bf00      	nop
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	6039      	str	r1, [r7, #0]
 8009e22:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009e28:	2007      	movs	r0, #7
 8009e2a:	f003 f8c1 	bl	800cfb0 <memp_malloc>
 8009e2e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <netconn_alloc+0x22>
    return NULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	e059      	b.n	8009eee <netconn_alloc+0xd6>
  }

  conn->pending_err = ERR_OK;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	79fa      	ldrb	r2, [r7, #7]
 8009e44:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009e4c:	79fb      	ldrb	r3, [r7, #7]
 8009e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e52:	2b10      	cmp	r3, #16
 8009e54:	d004      	beq.n	8009e60 <netconn_alloc+0x48>
 8009e56:	2b20      	cmp	r3, #32
 8009e58:	d105      	bne.n	8009e66 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009e5a:	2306      	movs	r3, #6
 8009e5c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009e5e:	e00a      	b.n	8009e76 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009e60:	2306      	movs	r3, #6
 8009e62:	617b      	str	r3, [r7, #20]
      break;
 8009e64:	e007      	b.n	8009e76 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009e66:	4b24      	ldr	r3, [pc, #144]	; (8009ef8 <netconn_alloc+0xe0>)
 8009e68:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009e6c:	4923      	ldr	r1, [pc, #140]	; (8009efc <netconn_alloc+0xe4>)
 8009e6e:	4824      	ldr	r0, [pc, #144]	; (8009f00 <netconn_alloc+0xe8>)
 8009e70:	f011 fd26 	bl	801b8c0 <iprintf>
      goto free_and_return;
 8009e74:	e036      	b.n	8009ee4 <netconn_alloc+0xcc>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3310      	adds	r3, #16
 8009e7a:	6979      	ldr	r1, [r7, #20]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f00f fc5b 	bl	8019738 <sys_mbox_new>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d12c      	bne.n	8009ee2 <netconn_alloc+0xca>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	330c      	adds	r3, #12
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f00f fd19 	bl	80198c6 <sys_sem_new>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d005      	beq.n	8009ea6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3310      	adds	r3, #16
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f00f fc6c 	bl	801977c <sys_mbox_free>
    goto free_and_return;
 8009ea4:	e01e      	b.n	8009ee4 <netconn_alloc+0xcc>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3314      	adds	r3, #20
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f00f fcfe 	bl	80198ac <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ebc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4a0d      	ldr	r2, [pc, #52]	; (8009f04 <netconn_alloc+0xec>)
 8009ece:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	621a      	str	r2, [r3, #32]
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	7cfa      	ldrb	r2, [r7, #19]
 8009eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return conn;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	e005      	b.n	8009eee <netconn_alloc+0xd6>
    goto free_and_return;
 8009ee2:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009ee4:	68f9      	ldr	r1, [r7, #12]
 8009ee6:	2007      	movs	r0, #7
 8009ee8:	f003 f8b4 	bl	800d054 <memp_free>
  return NULL;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3718      	adds	r7, #24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	0801cff8 	.word	0x0801cff8
 8009efc:	0801d1fc 	.word	0x0801d1fc
 8009f00:	0801d03c 	.word	0x0801d03c
 8009f04:	77359400 	.word	0x77359400

08009f08 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d006      	beq.n	8009f26 <netconn_free+0x1e>
 8009f18:	4b1b      	ldr	r3, [pc, #108]	; (8009f88 <netconn_free+0x80>)
 8009f1a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009f1e:	491b      	ldr	r1, [pc, #108]	; (8009f8c <netconn_free+0x84>)
 8009f20:	481b      	ldr	r0, [pc, #108]	; (8009f90 <netconn_free+0x88>)
 8009f22:	f011 fccd 	bl	801b8c0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	3310      	adds	r3, #16
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f00f fcad 	bl	801988a <sys_mbox_valid>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d006      	beq.n	8009f44 <netconn_free+0x3c>
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <netconn_free+0x80>)
 8009f38:	f240 3223 	movw	r2, #803	; 0x323
 8009f3c:	4915      	ldr	r1, [pc, #84]	; (8009f94 <netconn_free+0x8c>)
 8009f3e:	4814      	ldr	r0, [pc, #80]	; (8009f90 <netconn_free+0x88>)
 8009f40:	f011 fcbe 	bl	801b8c0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3314      	adds	r3, #20
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f00f fc9e 	bl	801988a <sys_mbox_valid>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d006      	beq.n	8009f62 <netconn_free+0x5a>
 8009f54:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <netconn_free+0x80>)
 8009f56:	f240 3226 	movw	r2, #806	; 0x326
 8009f5a:	490f      	ldr	r1, [pc, #60]	; (8009f98 <netconn_free+0x90>)
 8009f5c:	480c      	ldr	r0, [pc, #48]	; (8009f90 <netconn_free+0x88>)
 8009f5e:	f011 fcaf 	bl	801b8c0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	330c      	adds	r3, #12
 8009f66:	4618      	mov	r0, r3
 8009f68:	f00f fd13 	bl	8019992 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	330c      	adds	r3, #12
 8009f70:	4618      	mov	r0, r3
 8009f72:	f00f fd2c 	bl	80199ce <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	2007      	movs	r0, #7
 8009f7a:	f003 f86b 	bl	800d054 <memp_free>
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	0801cff8 	.word	0x0801cff8
 8009f8c:	0801d224 	.word	0x0801d224
 8009f90:	0801d03c 	.word	0x0801d03c
 8009f94:	0801d254 	.word	0x0801d254
 8009f98:	0801d290 	.word	0x0801d290

08009f9c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3310      	adds	r3, #16
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f00f fc6e 	bl	801988a <sys_mbox_valid>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d02f      	beq.n	800a014 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009fb4:	e018      	b.n	8009fe8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fbe:	2b10      	cmp	r3, #16
 8009fc0:	d10e      	bne.n	8009fe0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f107 020f 	add.w	r2, r7, #15
 8009fc8:	4611      	mov	r1, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7ff fb7c 	bl	80096c8 <lwip_netconn_is_err_msg>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d108      	bne.n	8009fe8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f003 ff1d 	bl	800de18 <pbuf_free>
 8009fde:	e003      	b.n	8009fe8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f001 f828 	bl	800b038 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3310      	adds	r3, #16
 8009fec:	f107 0210 	add.w	r2, r7, #16
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f00f fc2d 	bl	8019852 <sys_arch_mbox_tryfetch>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ffe:	d1da      	bne.n	8009fb6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3310      	adds	r3, #16
 800a004:	4618      	mov	r0, r3
 800a006:	f00f fbb9 	bl	801977c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	3310      	adds	r3, #16
 800a00e:	4618      	mov	r0, r3
 800a010:	f00f fc4c 	bl	80198ac <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3314      	adds	r3, #20
 800a018:	4618      	mov	r0, r3
 800a01a:	f00f fc36 	bl	801988a <sys_mbox_valid>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d034      	beq.n	800a08e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a024:	e01d      	b.n	800a062 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f107 020e 	add.w	r2, r7, #14
 800a02c:	4611      	mov	r1, r2
 800a02e:	4618      	mov	r0, r3
 800a030:	f7ff fb4a 	bl	80096c8 <lwip_netconn_is_err_msg>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d113      	bne.n	800a062 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a03e:	6978      	ldr	r0, [r7, #20]
 800a040:	f7ff ffac 	bl	8009f9c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d007      	beq.n	800a05c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	4618      	mov	r0, r3
 800a052:	f004 fce1 	bl	800ea18 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2200      	movs	r2, #0
 800a05a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a05c:	6978      	ldr	r0, [r7, #20]
 800a05e:	f7ff ff53 	bl	8009f08 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3314      	adds	r3, #20
 800a066:	f107 0210 	add.w	r2, r7, #16
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f00f fbf0 	bl	8019852 <sys_arch_mbox_tryfetch>
 800a072:	4603      	mov	r3, r0
 800a074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a078:	d1d5      	bne.n	800a026 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3314      	adds	r3, #20
 800a07e:	4618      	mov	r0, r3
 800a080:	f00f fb7c 	bl	801977c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3314      	adds	r3, #20
 800a088:	4618      	mov	r0, r3
 800a08a:	f00f fc0f 	bl	80198ac <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a08e:	bf00      	nop
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d106      	bne.n	800a0bc <lwip_netconn_do_close_internal+0x24>
 800a0ae:	4ba1      	ldr	r3, [pc, #644]	; (800a334 <lwip_netconn_do_close_internal+0x29c>)
 800a0b0:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a0b4:	49a0      	ldr	r1, [pc, #640]	; (800a338 <lwip_netconn_do_close_internal+0x2a0>)
 800a0b6:	48a1      	ldr	r0, [pc, #644]	; (800a33c <lwip_netconn_do_close_internal+0x2a4>)
 800a0b8:	f011 fc02 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0c4:	2b10      	cmp	r3, #16
 800a0c6:	d006      	beq.n	800a0d6 <lwip_netconn_do_close_internal+0x3e>
 800a0c8:	4b9a      	ldr	r3, [pc, #616]	; (800a334 <lwip_netconn_do_close_internal+0x29c>)
 800a0ca:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a0ce:	499c      	ldr	r1, [pc, #624]	; (800a340 <lwip_netconn_do_close_internal+0x2a8>)
 800a0d0:	489a      	ldr	r0, [pc, #616]	; (800a33c <lwip_netconn_do_close_internal+0x2a4>)
 800a0d2:	f011 fbf5 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	785b      	ldrb	r3, [r3, #1]
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d006      	beq.n	800a0ec <lwip_netconn_do_close_internal+0x54>
 800a0de:	4b95      	ldr	r3, [pc, #596]	; (800a334 <lwip_netconn_do_close_internal+0x29c>)
 800a0e0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a0e4:	4997      	ldr	r1, [pc, #604]	; (800a344 <lwip_netconn_do_close_internal+0x2ac>)
 800a0e6:	4895      	ldr	r0, [pc, #596]	; (800a33c <lwip_netconn_do_close_internal+0x2a4>)
 800a0e8:	f011 fbea 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d106      	bne.n	800a102 <lwip_netconn_do_close_internal+0x6a>
 800a0f4:	4b8f      	ldr	r3, [pc, #572]	; (800a334 <lwip_netconn_do_close_internal+0x29c>)
 800a0f6:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a0fa:	4993      	ldr	r1, [pc, #588]	; (800a348 <lwip_netconn_do_close_internal+0x2b0>)
 800a0fc:	488f      	ldr	r0, [pc, #572]	; (800a33c <lwip_netconn_do_close_internal+0x2a4>)
 800a0fe:	f011 fbdf 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <lwip_netconn_do_close_internal+0x80>
 800a10a:	4b8a      	ldr	r3, [pc, #552]	; (800a334 <lwip_netconn_do_close_internal+0x29c>)
 800a10c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a110:	498e      	ldr	r1, [pc, #568]	; (800a34c <lwip_netconn_do_close_internal+0x2b4>)
 800a112:	488a      	ldr	r0, [pc, #552]	; (800a33c <lwip_netconn_do_close_internal+0x2a4>)
 800a114:	f011 fbd4 	bl	801b8c0 <iprintf>

  tpcb = conn->pcb.tcp;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a122:	7a1b      	ldrb	r3, [r3, #8]
 800a124:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a126:	7bfb      	ldrb	r3, [r7, #15]
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
 800a130:	f003 0302 	and.w	r3, r3, #2
 800a134:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d102      	bne.n	800a142 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a13c:	2301      	movs	r3, #1
 800a13e:	75bb      	strb	r3, [r7, #22]
 800a140:	e01f      	b.n	800a182 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00e      	beq.n	800a166 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a14c:	2b05      	cmp	r3, #5
 800a14e:	d007      	beq.n	800a160 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a154:	2b06      	cmp	r3, #6
 800a156:	d003      	beq.n	800a160 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a15c:	2b08      	cmp	r3, #8
 800a15e:	d102      	bne.n	800a166 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a160:	2301      	movs	r3, #1
 800a162:	75bb      	strb	r3, [r7, #22]
 800a164:	e00d      	b.n	800a182 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a166:	7b7b      	ldrb	r3, [r7, #13]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d008      	beq.n	800a17e <lwip_netconn_do_close_internal+0xe6>
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	8b5b      	ldrh	r3, [r3, #26]
 800a170:	f003 0310 	and.w	r3, r3, #16
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a178:	2301      	movs	r3, #1
 800a17a:	75bb      	strb	r3, [r7, #22]
 800a17c:	e001      	b.n	800a182 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a182:	7dbb      	ldrb	r3, [r7, #22]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a188:	2100      	movs	r1, #0
 800a18a:	6938      	ldr	r0, [r7, #16]
 800a18c:	f005 fc88 	bl	800faa0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	7d1b      	ldrb	r3, [r3, #20]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d104      	bne.n	800a1a2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a198:	2100      	movs	r1, #0
 800a19a:	6938      	ldr	r0, [r7, #16]
 800a19c:	f005 fcf8 	bl	800fb90 <tcp_accept>
 800a1a0:	e01d      	b.n	800a1de <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a1a2:	7bbb      	ldrb	r3, [r7, #14]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d007      	beq.n	800a1b8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	6938      	ldr	r0, [r7, #16]
 800a1ac:	f005 fc8a 	bl	800fac4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	6938      	ldr	r0, [r7, #16]
 800a1b4:	f005 fcec 	bl	800fb90 <tcp_accept>
    }
    if (shut_tx) {
 800a1b8:	7b7b      	ldrb	r3, [r7, #13]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a1be:	2100      	movs	r1, #0
 800a1c0:	6938      	ldr	r0, [r7, #16]
 800a1c2:	f005 fca1 	bl	800fb08 <tcp_sent>
    }
    if (shut_close) {
 800a1c6:	7dbb      	ldrb	r3, [r7, #22]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d008      	beq.n	800a1de <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	6938      	ldr	r0, [r7, #16]
 800a1d2:	f005 fcf5 	bl	800fbc0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	6938      	ldr	r0, [r7, #16]
 800a1da:	f005 fcb7 	bl	800fb4c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a1de:	7dbb      	ldrb	r3, [r7, #22]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d005      	beq.n	800a1f0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a1e4:	6938      	ldr	r0, [r7, #16]
 800a1e6:	f004 fad1 	bl	800e78c <tcp_close>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	75fb      	strb	r3, [r7, #23]
 800a1ee:	e007      	b.n	800a200 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	7b7a      	ldrb	r2, [r7, #13]
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6938      	ldr	r0, [r7, #16]
 800a1f8:	f004 faf4 	bl	800e7e4 <tcp_shutdown>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a200:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d102      	bne.n	800a20e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a208:	2301      	movs	r3, #1
 800a20a:	757b      	strb	r3, [r7, #21]
 800a20c:	e016      	b.n	800a23c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a20e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a216:	d10f      	bne.n	800a238 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	7a5b      	ldrb	r3, [r3, #9]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10c      	bne.n	800a23c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a222:	2301      	movs	r3, #1
 800a224:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a226:	7dbb      	ldrb	r3, [r7, #22]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d007      	beq.n	800a23c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a22c:	6938      	ldr	r0, [r7, #16]
 800a22e:	f004 fbf3 	bl	800ea18 <tcp_abort>
          err = ERR_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	75fb      	strb	r3, [r7, #23]
 800a236:	e001      	b.n	800a23c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a238:	2301      	movs	r3, #1
 800a23a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a23c:	7d7b      	ldrb	r3, [r7, #21]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d044      	beq.n	800a2cc <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	330c      	adds	r3, #12
 800a24a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a250:	7dfa      	ldrb	r2, [r7, #23]
 800a252:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d129      	bne.n	800a2bc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a268:	7dbb      	ldrb	r3, [r7, #22]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00c      	beq.n	800a288 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d005      	beq.n	800a288 <lwip_netconn_do_close_internal+0x1f0>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	2200      	movs	r2, #0
 800a282:	2104      	movs	r1, #4
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	4798      	blx	r3
      }
      if (shut_rx) {
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d009      	beq.n	800a2a2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a292:	2b00      	cmp	r3, #0
 800a294:	d005      	beq.n	800a2a2 <lwip_netconn_do_close_internal+0x20a>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29a:	2200      	movs	r2, #0
 800a29c:	2100      	movs	r1, #0
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	4798      	blx	r3
      }
      if (shut_tx) {
 800a2a2:	7b7b      	ldrb	r3, [r7, #13]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d009      	beq.n	800a2bc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d005      	beq.n	800a2bc <lwip_netconn_do_close_internal+0x224>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	2102      	movs	r1, #2
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d002      	beq.n	800a2c8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a2c2:	68b8      	ldr	r0, [r7, #8]
 800a2c4:	f00f fb58 	bl	8019978 <sys_sem_signal>
    }
    return ERR_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e02e      	b.n	800a32a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a2cc:	7d7b      	ldrb	r3, [r7, #21]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d11e      	bne.n	800a310 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	7d1b      	ldrb	r3, [r3, #20]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d106      	bne.n	800a2e8 <lwip_netconn_do_close_internal+0x250>
 800a2da:	4b16      	ldr	r3, [pc, #88]	; (800a334 <lwip_netconn_do_close_internal+0x29c>)
 800a2dc:	f240 4241 	movw	r2, #1089	; 0x441
 800a2e0:	491b      	ldr	r1, [pc, #108]	; (800a350 <lwip_netconn_do_close_internal+0x2b8>)
 800a2e2:	4816      	ldr	r0, [pc, #88]	; (800a33c <lwip_netconn_do_close_internal+0x2a4>)
 800a2e4:	f011 faec 	bl	801b8c0 <iprintf>
    if (shut_tx) {
 800a2e8:	7b7b      	ldrb	r3, [r7, #13]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d003      	beq.n	800a2f6 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a2ee:	4919      	ldr	r1, [pc, #100]	; (800a354 <lwip_netconn_do_close_internal+0x2bc>)
 800a2f0:	6938      	ldr	r0, [r7, #16]
 800a2f2:	f005 fc09 	bl	800fb08 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	4917      	ldr	r1, [pc, #92]	; (800a358 <lwip_netconn_do_close_internal+0x2c0>)
 800a2fa:	6938      	ldr	r0, [r7, #16]
 800a2fc:	f005 fc60 	bl	800fbc0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a300:	4916      	ldr	r1, [pc, #88]	; (800a35c <lwip_netconn_do_close_internal+0x2c4>)
 800a302:	6938      	ldr	r0, [r7, #16]
 800a304:	f005 fc22 	bl	800fb4c <tcp_err>
    tcp_arg(tpcb, conn);
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	6938      	ldr	r0, [r7, #16]
 800a30c:	f005 fbc8 	bl	800faa0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a310:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d106      	bne.n	800a326 <lwip_netconn_do_close_internal+0x28e>
 800a318:	4b06      	ldr	r3, [pc, #24]	; (800a334 <lwip_netconn_do_close_internal+0x29c>)
 800a31a:	f240 424d 	movw	r2, #1101	; 0x44d
 800a31e:	4910      	ldr	r1, [pc, #64]	; (800a360 <lwip_netconn_do_close_internal+0x2c8>)
 800a320:	4806      	ldr	r0, [pc, #24]	; (800a33c <lwip_netconn_do_close_internal+0x2a4>)
 800a322:	f011 facd 	bl	801b8c0 <iprintf>
  return err;
 800a326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	0801cff8 	.word	0x0801cff8
 800a338:	0801d2cc 	.word	0x0801d2cc
 800a33c:	0801d03c 	.word	0x0801d03c
 800a340:	0801d2dc 	.word	0x0801d2dc
 800a344:	0801d2fc 	.word	0x0801d2fc
 800a348:	0801d320 	.word	0x0801d320
 800a34c:	0801d160 	.word	0x0801d160
 800a350:	0801d334 	.word	0x0801d334
 800a354:	08009a69 	.word	0x08009a69
 800a358:	08009999 	.word	0x08009999
 800a35c:	08009b15 	.word	0x08009b15
 800a360:	0801d358 	.word	0x0801d358

0800a364 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	785b      	ldrb	r3, [r3, #1]
 800a376:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a378:	7afb      	ldrb	r3, [r7, #11]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00d      	beq.n	800a39a <lwip_netconn_do_delconn+0x36>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a388:	2b10      	cmp	r3, #16
 800a38a:	d006      	beq.n	800a39a <lwip_netconn_do_delconn+0x36>
 800a38c:	4b61      	ldr	r3, [pc, #388]	; (800a514 <lwip_netconn_do_delconn+0x1b0>)
 800a38e:	f240 425e 	movw	r2, #1118	; 0x45e
 800a392:	4961      	ldr	r1, [pc, #388]	; (800a518 <lwip_netconn_do_delconn+0x1b4>)
 800a394:	4861      	ldr	r0, [pc, #388]	; (800a51c <lwip_netconn_do_delconn+0x1b8>)
 800a396:	f011 fa93 	bl	801b8c0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a39a:	7afb      	ldrb	r3, [r7, #11]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d005      	beq.n	800a3ac <lwip_netconn_do_delconn+0x48>
 800a3a0:	7afb      	ldrb	r3, [r7, #11]
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d002      	beq.n	800a3ac <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a3a6:	7afb      	ldrb	r3, [r7, #11]
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d10a      	bne.n	800a3c2 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800a3ac:	7afb      	ldrb	r3, [r7, #11]
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d10b      	bne.n	800a3ca <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3ba:	f003 0304 	and.w	r3, r3, #4
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d103      	bne.n	800a3ca <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	22fb      	movs	r2, #251	; 0xfb
 800a3c6:	711a      	strb	r2, [r3, #4]
 800a3c8:	e098      	b.n	800a4fc <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a3ca:	7afb      	ldrb	r3, [r7, #11]
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d10e      	bne.n	800a3ee <lwip_netconn_do_delconn+0x8a>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d106      	bne.n	800a3ee <lwip_netconn_do_delconn+0x8a>
 800a3e0:	4b4c      	ldr	r3, [pc, #304]	; (800a514 <lwip_netconn_do_delconn+0x1b0>)
 800a3e2:	f240 427a 	movw	r2, #1146	; 0x47a
 800a3e6:	494e      	ldr	r1, [pc, #312]	; (800a520 <lwip_netconn_do_delconn+0x1bc>)
 800a3e8:	484c      	ldr	r0, [pc, #304]	; (800a51c <lwip_netconn_do_delconn+0x1b8>)
 800a3ea:	f011 fa69 	bl	801b8c0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7ff fdcf 	bl	8009f9c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d05f      	beq.n	800a4c8 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a412:	2b10      	cmp	r3, #16
 800a414:	d00d      	beq.n	800a432 <lwip_netconn_do_delconn+0xce>
 800a416:	2b20      	cmp	r3, #32
 800a418:	d151      	bne.n	800a4be <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f00a fe3a 	bl	80150a4 <udp_remove>
          break;
 800a430:	e046      	b.n	800a4c0 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d006      	beq.n	800a44a <lwip_netconn_do_delconn+0xe6>
 800a43c:	4b35      	ldr	r3, [pc, #212]	; (800a514 <lwip_netconn_do_delconn+0x1b0>)
 800a43e:	f240 4294 	movw	r2, #1172	; 0x494
 800a442:	4938      	ldr	r1, [pc, #224]	; (800a524 <lwip_netconn_do_delconn+0x1c0>)
 800a444:	4835      	ldr	r0, [pc, #212]	; (800a51c <lwip_netconn_do_delconn+0x1b8>)
 800a446:	f011 fa3b 	bl	801b8c0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2204      	movs	r2, #4
 800a450:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2203      	movs	r2, #3
 800a456:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2100      	movs	r1, #0
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff fe16 	bl	800a098 <lwip_netconn_do_close_internal>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d04b      	beq.n	800a50a <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	785b      	ldrb	r3, [r3, #1]
 800a478:	2b04      	cmp	r3, #4
 800a47a:	d006      	beq.n	800a48a <lwip_netconn_do_delconn+0x126>
 800a47c:	4b25      	ldr	r3, [pc, #148]	; (800a514 <lwip_netconn_do_delconn+0x1b0>)
 800a47e:	f240 429a 	movw	r2, #1178	; 0x49a
 800a482:	4929      	ldr	r1, [pc, #164]	; (800a528 <lwip_netconn_do_delconn+0x1c4>)
 800a484:	4825      	ldr	r0, [pc, #148]	; (800a51c <lwip_netconn_do_delconn+0x1b8>)
 800a486:	f011 fa1b 	bl	801b8c0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a48a:	4828      	ldr	r0, [pc, #160]	; (800a52c <lwip_netconn_do_delconn+0x1c8>)
 800a48c:	f00f fae5 	bl	8019a5a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	330c      	adds	r3, #12
 800a496:	2100      	movs	r1, #0
 800a498:	4618      	mov	r0, r3
 800a49a:	f00f fa3c 	bl	8019916 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a49e:	4823      	ldr	r0, [pc, #140]	; (800a52c <lwip_netconn_do_delconn+0x1c8>)
 800a4a0:	f00f facc 	bl	8019a3c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	785b      	ldrb	r3, [r3, #1]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d02d      	beq.n	800a50a <lwip_netconn_do_delconn+0x1a6>
 800a4ae:	4b19      	ldr	r3, [pc, #100]	; (800a514 <lwip_netconn_do_delconn+0x1b0>)
 800a4b0:	f240 429e 	movw	r2, #1182	; 0x49e
 800a4b4:	491c      	ldr	r1, [pc, #112]	; (800a528 <lwip_netconn_do_delconn+0x1c4>)
 800a4b6:	4819      	ldr	r0, [pc, #100]	; (800a51c <lwip_netconn_do_delconn+0x1b8>)
 800a4b8:	f011 fa02 	bl	801b8c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a4bc:	e025      	b.n	800a50a <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800a4be:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d007      	beq.n	800a4e2 <lwip_netconn_do_delconn+0x17e>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	6810      	ldr	r0, [r2, #0]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2100      	movs	r1, #0
 800a4e0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d007      	beq.n	800a4fc <lwip_netconn_do_delconn+0x198>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	6810      	ldr	r0, [r2, #0]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	2102      	movs	r1, #2
 800a4fa:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	330c      	adds	r3, #12
 800a502:	4618      	mov	r0, r3
 800a504:	f00f fa52 	bl	80199ac <sys_sem_valid>
 800a508:	e000      	b.n	800a50c <lwip_netconn_do_delconn+0x1a8>
          return;
 800a50a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	0801cff8 	.word	0x0801cff8
 800a518:	0801d368 	.word	0x0801d368
 800a51c:	0801d03c 	.word	0x0801d03c
 800a520:	0801d37c 	.word	0x0801d37c
 800a524:	0801d39c 	.word	0x0801d39c
 800a528:	0801d3b8 	.word	0x0801d3b8
 800a52c:	2000cf08 	.word	0x2000cf08

0800a530 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4613      	mov	r3, r2
 800a53c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800a54c:	f06f 0305 	mvn.w	r3, #5
 800a550:	e074      	b.n	800a63c <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	785b      	ldrb	r3, [r3, #1]
 800a556:	2b03      	cmp	r3, #3
 800a558:	d006      	beq.n	800a568 <lwip_netconn_do_connected+0x38>
 800a55a:	4b3a      	ldr	r3, [pc, #232]	; (800a644 <lwip_netconn_do_connected+0x114>)
 800a55c:	f240 5223 	movw	r2, #1315	; 0x523
 800a560:	4939      	ldr	r1, [pc, #228]	; (800a648 <lwip_netconn_do_connected+0x118>)
 800a562:	483a      	ldr	r0, [pc, #232]	; (800a64c <lwip_netconn_do_connected+0x11c>)
 800a564:	f011 f9ac 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10d      	bne.n	800a58c <lwip_netconn_do_connected+0x5c>
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a576:	f003 0304 	and.w	r3, r3, #4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <lwip_netconn_do_connected+0x5c>
 800a57e:	4b31      	ldr	r3, [pc, #196]	; (800a644 <lwip_netconn_do_connected+0x114>)
 800a580:	f240 5224 	movw	r2, #1316	; 0x524
 800a584:	4932      	ldr	r1, [pc, #200]	; (800a650 <lwip_netconn_do_connected+0x120>)
 800a586:	4831      	ldr	r0, [pc, #196]	; (800a64c <lwip_netconn_do_connected+0x11c>)
 800a588:	f011 f99a 	bl	801b8c0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a590:	2b00      	cmp	r3, #0
 800a592:	d008      	beq.n	800a5a6 <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a598:	79fa      	ldrb	r2, [r7, #7]
 800a59a:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	330c      	adds	r3, #12
 800a5a4:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5ae:	2b10      	cmp	r3, #16
 800a5b0:	d106      	bne.n	800a5c0 <lwip_netconn_do_connected+0x90>
 800a5b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 800a5ba:	69b8      	ldr	r0, [r7, #24]
 800a5bc:	f7ff fb84 	bl	8009cc8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5c6:	f003 0304 	and.w	r3, r3, #4
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	bf0c      	ite	eq
 800a5ce:	2301      	moveq	r3, #1
 800a5d0:	2300      	movne	r3, #0
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5dc:	f023 0304 	bic.w	r3, r3, #4
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LWIP_ASSERT("blocking connect state error",
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <lwip_netconn_do_connected+0xc4>
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10c      	bne.n	800a60e <lwip_netconn_do_connected+0xde>
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d102      	bne.n	800a600 <lwip_netconn_do_connected+0xd0>
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d006      	beq.n	800a60e <lwip_netconn_do_connected+0xde>
 800a600:	4b10      	ldr	r3, [pc, #64]	; (800a644 <lwip_netconn_do_connected+0x114>)
 800a602:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800a606:	4913      	ldr	r1, [pc, #76]	; (800a654 <lwip_netconn_do_connected+0x124>)
 800a608:	4810      	ldr	r0, [pc, #64]	; (800a64c <lwip_netconn_do_connected+0x11c>)
 800a60a:	f011 f959 	bl	801b8c0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	2200      	movs	r2, #0
 800a612:	629a      	str	r2, [r3, #40]	; 0x28
  conn->state = NETCONN_NONE;
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	2200      	movs	r2, #0
 800a618:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d005      	beq.n	800a62e <lwip_netconn_do_connected+0xfe>
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	2200      	movs	r2, #0
 800a628:	2102      	movs	r1, #2
 800a62a:	69b8      	ldr	r0, [r7, #24]
 800a62c:	4798      	blx	r3

  if (was_blocking) {
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 800a634:	69f8      	ldr	r0, [r7, #28]
 800a636:	f00f f99f 	bl	8019978 <sys_sem_signal>
  }
  return ERR_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3720      	adds	r7, #32
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	0801cff8 	.word	0x0801cff8
 800a648:	0801d3c0 	.word	0x0801d3c0
 800a64c:	0801d03c 	.word	0x0801d03c
 800a650:	0801d3e0 	.word	0x0801d3e0
 800a654:	0801d420 	.word	0x0801d420

0800a658 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d102      	bne.n	800a674 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800a66e:	23f1      	movs	r3, #241	; 0xf1
 800a670:	75fb      	strb	r3, [r7, #23]
 800a672:	e0a0      	b.n	800a7b6 <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a67e:	2b10      	cmp	r3, #16
 800a680:	d00f      	beq.n	800a6a2 <lwip_netconn_do_connect+0x4a>
 800a682:	2b20      	cmp	r3, #32
 800a684:	f040 808c 	bne.w	800a7a0 <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6858      	ldr	r0, [r3, #4]
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	6899      	ldr	r1, [r3, #8]
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	899b      	ldrh	r3, [r3, #12]
 800a696:	461a      	mov	r2, r3
 800a698:	f00a fc4e 	bl	8014f38 <udp_connect>
 800a69c:	4603      	mov	r3, r0
 800a69e:	75fb      	strb	r3, [r7, #23]
        break;
 800a6a0:	e089      	b.n	800a7b6 <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	785b      	ldrb	r3, [r3, #1]
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d102      	bne.n	800a6b2 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800a6ac:	23f7      	movs	r3, #247	; 0xf7
 800a6ae:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800a6b0:	e080      	b.n	800a7b4 <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	785b      	ldrb	r3, [r3, #1]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800a6bc:	23f6      	movs	r3, #246	; 0xf6
 800a6be:	75fb      	strb	r3, [r7, #23]
        break;
 800a6c0:	e078      	b.n	800a7b4 <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff fafe 	bl	8009cc8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6858      	ldr	r0, [r3, #4]
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	6899      	ldr	r1, [r3, #8]
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	899a      	ldrh	r2, [r3, #12]
 800a6da:	4b3b      	ldr	r3, [pc, #236]	; (800a7c8 <lwip_netconn_do_connect+0x170>)
 800a6dc:	f004 fa98 	bl	800ec10 <tcp_connect>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800a6e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d163      	bne.n	800a7b4 <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a6f4:	f003 0302 	and.w	r3, r3, #2
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bf14      	ite	ne
 800a6fc:	2301      	movne	r3, #1
 800a6fe:	2300      	moveq	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2203      	movs	r2, #3
 800a70a:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00b      	beq.n	800a72a <lwip_netconn_do_connect+0xd2>
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0204 	orr.w	r2, r2, #4
 800a722:	b2d2      	uxtb	r2, r2
 800a724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a728:	e00a      	b.n	800a740 <lwip_netconn_do_connect+0xe8>
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0204 	bic.w	r2, r2, #4
 800a73a:	b2d2      	uxtb	r2, r2
 800a73c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if (non_blocking) {
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d002      	beq.n	800a74c <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 800a746:	23fb      	movs	r3, #251	; 0xfb
 800a748:	75fb      	strb	r3, [r7, #23]
        break;
 800a74a:	e033      	b.n	800a7b4 <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	629a      	str	r2, [r3, #40]	; 0x28
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	785b      	ldrb	r3, [r3, #1]
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d006      	beq.n	800a76c <lwip_netconn_do_connect+0x114>
 800a75e:	4b1b      	ldr	r3, [pc, #108]	; (800a7cc <lwip_netconn_do_connect+0x174>)
 800a760:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a764:	491a      	ldr	r1, [pc, #104]	; (800a7d0 <lwip_netconn_do_connect+0x178>)
 800a766:	481b      	ldr	r0, [pc, #108]	; (800a7d4 <lwip_netconn_do_connect+0x17c>)
 800a768:	f011 f8aa 	bl	801b8c0 <iprintf>
              UNLOCK_TCPIP_CORE();
 800a76c:	481a      	ldr	r0, [pc, #104]	; (800a7d8 <lwip_netconn_do_connect+0x180>)
 800a76e:	f00f f974 	bl	8019a5a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	330c      	adds	r3, #12
 800a778:	2100      	movs	r1, #0
 800a77a:	4618      	mov	r0, r3
 800a77c:	f00f f8cb 	bl	8019916 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800a780:	4815      	ldr	r0, [pc, #84]	; (800a7d8 <lwip_netconn_do_connect+0x180>)
 800a782:	f00f f95b 	bl	8019a3c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	785b      	ldrb	r3, [r3, #1]
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d116      	bne.n	800a7be <lwip_netconn_do_connect+0x166>
 800a790:	4b0e      	ldr	r3, [pc, #56]	; (800a7cc <lwip_netconn_do_connect+0x174>)
 800a792:	f240 5274 	movw	r2, #1396	; 0x574
 800a796:	490e      	ldr	r1, [pc, #56]	; (800a7d0 <lwip_netconn_do_connect+0x178>)
 800a798:	480e      	ldr	r0, [pc, #56]	; (800a7d4 <lwip_netconn_do_connect+0x17c>)
 800a79a:	f011 f891 	bl	801b8c0 <iprintf>
              return;
 800a79e:	e00e      	b.n	800a7be <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <lwip_netconn_do_connect+0x174>)
 800a7a2:	f240 527d 	movw	r2, #1405	; 0x57d
 800a7a6:	490d      	ldr	r1, [pc, #52]	; (800a7dc <lwip_netconn_do_connect+0x184>)
 800a7a8:	480a      	ldr	r0, [pc, #40]	; (800a7d4 <lwip_netconn_do_connect+0x17c>)
 800a7aa:	f011 f889 	bl	801b8c0 <iprintf>
 800a7ae:	23fa      	movs	r3, #250	; 0xfa
 800a7b0:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800a7b2:	e000      	b.n	800a7b6 <lwip_netconn_do_connect+0x15e>
        break;
 800a7b4:	bf00      	nop
    }
  }
  msg->err = err;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	7dfa      	ldrb	r2, [r7, #23]
 800a7ba:	711a      	strb	r2, [r3, #4]
 800a7bc:	e000      	b.n	800a7c0 <lwip_netconn_do_connect+0x168>
              return;
 800a7be:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	0800a531 	.word	0x0800a531
 800a7cc:	0801cff8 	.word	0x0801cff8
 800a7d0:	0801d3b8 	.word	0x0801d3b8
 800a7d4:	0801d03c 	.word	0x0801d03c
 800a7d8:	2000cf08 	.word	0x2000cf08
 800a7dc:	0801d440 	.word	0x0801d440

0800a7e0 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7f6:	2b20      	cmp	r3, #32
 800a7f8:	d109      	bne.n	800a80e <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	4618      	mov	r0, r3
 800a802:	f00a fc07 	bl	8015014 <udp_disconnect>
    msg->err = ERR_OK;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a80c:	e002      	b.n	800a814 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	22fa      	movs	r2, #250	; 0xfa
 800a812:	711a      	strb	r2, [r3, #4]
}
 800a814:	bf00      	nop
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fe fef9 	bl	8009624 <netconn_err>
 800a832:	4603      	mov	r3, r0
 800a834:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d134      	bne.n	800a8a8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d02d      	beq.n	800a8a4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a852:	2b20      	cmp	r3, #32
 800a854:	d123      	bne.n	800a89e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10c      	bne.n	800a87a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4619      	mov	r1, r3
 800a86e:	4610      	mov	r0, r2
 800a870:	f00a f8f0 	bl	8014a54 <udp_send>
 800a874:	4603      	mov	r3, r0
 800a876:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800a878:	e016      	b.n	800a8a8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6858      	ldr	r0, [r3, #4]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	6819      	ldr	r1, [r3, #0]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	f103 0208 	add.w	r2, r3, #8
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	899b      	ldrh	r3, [r3, #12]
 800a894:	f00a f912 	bl	8014abc <udp_sendto>
 800a898:	4603      	mov	r3, r0
 800a89a:	73fb      	strb	r3, [r7, #15]
          break;
 800a89c:	e004      	b.n	800a8a8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800a89e:	23f5      	movs	r3, #245	; 0xf5
 800a8a0:	73fb      	strb	r3, [r7, #15]
          break;
 800a8a2:	e001      	b.n	800a8a8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800a8a4:	23f5      	movs	r3, #245	; 0xf5
 800a8a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	7bfa      	ldrb	r2, [r7, #15]
 800a8ac:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a8ae:	bf00      	nop
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b086      	sub	sp, #24
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d022      	beq.n	800a918 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8dc:	2b10      	cmp	r3, #16
 800a8de:	d11b      	bne.n	800a918 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ec:	d202      	bcs.n	800a8f4 <lwip_netconn_do_recv+0x3e>
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	e001      	b.n	800a8f8 <lwip_netconn_do_recv+0x42>
 800a8f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8f8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	89fa      	ldrh	r2, [r7, #14]
 800a902:	4611      	mov	r1, r2
 800a904:	4618      	mov	r0, r3
 800a906:	f004 f8ed 	bl	800eae4 <tcp_recved>
        remaining -= recved;
 800a90a:	89fb      	ldrh	r3, [r7, #14]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e6      	bne.n	800a8e6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a918:	bf00      	nop
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b088      	sub	sp, #32
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d106      	bne.n	800a944 <lwip_netconn_do_writemore+0x24>
 800a936:	4b98      	ldr	r3, [pc, #608]	; (800ab98 <lwip_netconn_do_writemore+0x278>)
 800a938:	f240 6273 	movw	r2, #1651	; 0x673
 800a93c:	4997      	ldr	r1, [pc, #604]	; (800ab9c <lwip_netconn_do_writemore+0x27c>)
 800a93e:	4898      	ldr	r0, [pc, #608]	; (800aba0 <lwip_netconn_do_writemore+0x280>)
 800a940:	f010 ffbe 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	785b      	ldrb	r3, [r3, #1]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d006      	beq.n	800a95a <lwip_netconn_do_writemore+0x3a>
 800a94c:	4b92      	ldr	r3, [pc, #584]	; (800ab98 <lwip_netconn_do_writemore+0x278>)
 800a94e:	f240 6274 	movw	r2, #1652	; 0x674
 800a952:	4994      	ldr	r1, [pc, #592]	; (800aba4 <lwip_netconn_do_writemore+0x284>)
 800a954:	4892      	ldr	r0, [pc, #584]	; (800aba0 <lwip_netconn_do_writemore+0x280>)
 800a956:	f010 ffb3 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d106      	bne.n	800a970 <lwip_netconn_do_writemore+0x50>
 800a962:	4b8d      	ldr	r3, [pc, #564]	; (800ab98 <lwip_netconn_do_writemore+0x278>)
 800a964:	f240 6275 	movw	r2, #1653	; 0x675
 800a968:	498f      	ldr	r1, [pc, #572]	; (800aba8 <lwip_netconn_do_writemore+0x288>)
 800a96a:	488d      	ldr	r0, [pc, #564]	; (800aba0 <lwip_netconn_do_writemore+0x280>)
 800a96c:	f010 ffa8 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d106      	bne.n	800a986 <lwip_netconn_do_writemore+0x66>
 800a978:	4b87      	ldr	r3, [pc, #540]	; (800ab98 <lwip_netconn_do_writemore+0x278>)
 800a97a:	f240 6276 	movw	r2, #1654	; 0x676
 800a97e:	498b      	ldr	r1, [pc, #556]	; (800abac <lwip_netconn_do_writemore+0x28c>)
 800a980:	4887      	ldr	r0, [pc, #540]	; (800aba0 <lwip_netconn_do_writemore+0x280>)
 800a982:	f010 ff9d 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98a:	699a      	ldr	r2, [r3, #24]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	429a      	cmp	r2, r3
 800a994:	d306      	bcc.n	800a9a4 <lwip_netconn_do_writemore+0x84>
 800a996:	4b80      	ldr	r3, [pc, #512]	; (800ab98 <lwip_netconn_do_writemore+0x278>)
 800a998:	f240 6277 	movw	r2, #1655	; 0x677
 800a99c:	4984      	ldr	r1, [pc, #528]	; (800abb0 <lwip_netconn_do_writemore+0x290>)
 800a99e:	4880      	ldr	r0, [pc, #512]	; (800aba0 <lwip_netconn_do_writemore+0x280>)
 800a9a0:	f010 ff8e 	bl	801b8c0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a8:	899b      	ldrh	r3, [r3, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <lwip_netconn_do_writemore+0x9c>
 800a9ae:	4b7a      	ldr	r3, [pc, #488]	; (800ab98 <lwip_netconn_do_writemore+0x278>)
 800a9b0:	f240 6279 	movw	r2, #1657	; 0x679
 800a9b4:	497f      	ldr	r1, [pc, #508]	; (800abb4 <lwip_netconn_do_writemore+0x294>)
 800a9b6:	487a      	ldr	r0, [pc, #488]	; (800aba0 <lwip_netconn_do_writemore+0x280>)
 800a9b8:	f010 ff82 	bl	801b8c0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c0:	7f1b      	ldrb	r3, [r3, #28]
 800a9c2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a9ca:	f003 0302 	and.w	r3, r3, #2
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d104      	bne.n	800a9dc <lwip_netconn_do_writemore+0xbc>
 800a9d2:	7ebb      	ldrb	r3, [r7, #26]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <lwip_netconn_do_writemore+0xc0>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e000      	b.n	800a9e2 <lwip_netconn_do_writemore+0xc2>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa0e:	d307      	bcc.n	800aa20 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800aa10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa14:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aa16:	7ebb      	ldrb	r3, [r7, #26]
 800aa18:	f043 0302 	orr.w	r3, r3, #2
 800aa1c:	76bb      	strb	r3, [r7, #26]
 800aa1e:	e001      	b.n	800aa24 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa2c:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800aa2e:	89fa      	ldrh	r2, [r7, #14]
 800aa30:	8bbb      	ldrh	r3, [r7, #28]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d216      	bcs.n	800aa64 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800aa36:	89fb      	ldrh	r3, [r7, #14]
 800aa38:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800aa3a:	7e3b      	ldrb	r3, [r7, #24]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00d      	beq.n	800aa5c <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800aa40:	8bbb      	ldrh	r3, [r7, #28]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d10e      	bne.n	800aa64 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d102      	bne.n	800aa56 <lwip_netconn_do_writemore+0x136>
 800aa50:	f06f 0306 	mvn.w	r3, #6
 800aa54:	e000      	b.n	800aa58 <lwip_netconn_do_writemore+0x138>
 800aa56:	2300      	movs	r3, #0
 800aa58:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800aa5a:	e07d      	b.n	800ab58 <lwip_netconn_do_writemore+0x238>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800aa5c:	7ebb      	ldrb	r3, [r7, #26]
 800aa5e:	f043 0302 	orr.w	r3, r3, #2
 800aa62:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa68:	691a      	ldr	r2, [r3, #16]
 800aa6a:	8bbb      	ldrh	r3, [r7, #28]
 800aa6c:	441a      	add	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d906      	bls.n	800aa88 <lwip_netconn_do_writemore+0x168>
 800aa7a:	4b47      	ldr	r3, [pc, #284]	; (800ab98 <lwip_netconn_do_writemore+0x278>)
 800aa7c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800aa80:	494d      	ldr	r1, [pc, #308]	; (800abb8 <lwip_netconn_do_writemore+0x298>)
 800aa82:	4847      	ldr	r0, [pc, #284]	; (800aba0 <lwip_netconn_do_writemore+0x280>)
 800aa84:	f010 ff1c 	bl	801b8c0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aa88:	8bbb      	ldrh	r3, [r7, #28]
 800aa8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d103      	bne.n	800aa9a <lwip_netconn_do_writemore+0x17a>
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa98:	d209      	bcs.n	800aaae <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aa9e:	8bba      	ldrh	r2, [r7, #28]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d10b      	bne.n	800aabc <lwip_netconn_do_writemore+0x19c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa8:	899b      	ldrh	r3, [r3, #12]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d906      	bls.n	800aabc <lwip_netconn_do_writemore+0x19c>
        write_more = 1;
 800aaae:	2301      	movs	r3, #1
 800aab0:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aab2:	7ebb      	ldrb	r3, [r7, #26]
 800aab4:	f043 0302 	orr.w	r3, r3, #2
 800aab8:	76bb      	strb	r3, [r7, #26]
 800aaba:	e001      	b.n	800aac0 <lwip_netconn_do_writemore+0x1a0>
      } else {
        write_more = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6858      	ldr	r0, [r3, #4]
 800aac4:	7ebb      	ldrb	r3, [r7, #26]
 800aac6:	8bba      	ldrh	r2, [r7, #28]
 800aac8:	6979      	ldr	r1, [r7, #20]
 800aaca:	f007 ff27 	bl	801291c <tcp_write>
 800aace:	4603      	mov	r3, r0
 800aad0:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800aad2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d12c      	bne.n	800ab34 <lwip_netconn_do_writemore+0x214>
        conn->current_msg->msg.w.offset += len;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aade:	6999      	ldr	r1, [r3, #24]
 800aae0:	8bba      	ldrh	r2, [r7, #28]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae6:	440a      	add	r2, r1
 800aae8:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaee:	6919      	ldr	r1, [r3, #16]
 800aaf0:	8bba      	ldrh	r2, [r7, #28]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf6:	440a      	add	r2, r1
 800aaf8:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafe:	691a      	ldr	r2, [r3, #16]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d113      	bne.n	800ab34 <lwip_netconn_do_writemore+0x214>
          conn->current_msg->msg.w.vector_cnt--;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab10:	899a      	ldrh	r2, [r3, #12]
 800ab12:	3a01      	subs	r2, #1
 800ab14:	b292      	uxth	r2, r2
 800ab16:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1c:	899b      	ldrh	r3, [r3, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d008      	beq.n	800ab34 <lwip_netconn_do_writemore+0x214>
            conn->current_msg->msg.w.vector++;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab26:	689a      	ldr	r2, [r3, #8]
 800ab28:	3208      	adds	r2, #8
 800ab2a:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab30:	2200      	movs	r2, #0
 800ab32:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ab34:	7e7b      	ldrb	r3, [r7, #25]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d004      	beq.n	800ab44 <lwip_netconn_do_writemore+0x224>
 800ab3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f43f af50 	beq.w	800a9e4 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ab44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d004      	beq.n	800ab56 <lwip_netconn_do_writemore+0x236>
 800ab4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab54:	d149      	bne.n	800abea <lwip_netconn_do_writemore+0x2ca>
err_mem:
 800ab56:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ab58:	7e3b      	ldrb	r3, [r7, #24]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d02e      	beq.n	800abbc <lwip_netconn_do_writemore+0x29c>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab62:	699a      	ldr	r2, [r3, #24]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d226      	bcs.n	800abbc <lwip_netconn_do_writemore+0x29c>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d005      	beq.n	800ab82 <lwip_netconn_do_writemore+0x262>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2103      	movs	r1, #3
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ab88:	f043 0310 	orr.w	r3, r3, #16
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ab94:	e029      	b.n	800abea <lwip_netconn_do_writemore+0x2ca>
 800ab96:	bf00      	nop
 800ab98:	0801cff8 	.word	0x0801cff8
 800ab9c:	0801d150 	.word	0x0801d150
 800aba0:	0801d03c 	.word	0x0801d03c
 800aba4:	0801d458 	.word	0x0801d458
 800aba8:	0801d160 	.word	0x0801d160
 800abac:	0801d478 	.word	0x0801d478
 800abb0:	0801d490 	.word	0x0801d490
 800abb4:	0801d4d0 	.word	0x0801d4d0
 800abb8:	0801d4f8 	.word	0x0801d4f8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800abc4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800abc8:	d305      	bcc.n	800abd6 <lwip_netconn_do_writemore+0x2b6>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	d909      	bls.n	800abea <lwip_netconn_do_writemore+0x2ca>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d005      	beq.n	800abea <lwip_netconn_do_writemore+0x2ca>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	2200      	movs	r2, #0
 800abe4:	2103      	movs	r1, #3
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800abea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d11d      	bne.n	800ac2e <lwip_netconn_do_writemore+0x30e>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf6:	699a      	ldr	r2, [r3, #24]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d002      	beq.n	800ac08 <lwip_netconn_do_writemore+0x2e8>
 800ac02:	7e3b      	ldrb	r3, [r7, #24]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d001      	beq.n	800ac0c <lwip_netconn_do_writemore+0x2ec>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f008 fc6d 	bl	80134f0 <tcp_output>
 800ac16:	4603      	mov	r3, r0
 800ac18:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ac1a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ac1e:	f113 0f04 	cmn.w	r3, #4
 800ac22:	d12c      	bne.n	800ac7e <lwip_netconn_do_writemore+0x35e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ac24:	7b3b      	ldrb	r3, [r7, #12]
 800ac26:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	76fb      	strb	r3, [r7, #27]
 800ac2c:	e027      	b.n	800ac7e <lwip_netconn_do_writemore+0x35e>
      }
    } else if (err == ERR_MEM) {
 800ac2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac36:	d120      	bne.n	800ac7a <lwip_netconn_do_writemore+0x35a>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f008 fc57 	bl	80134f0 <tcp_output>
 800ac42:	4603      	mov	r3, r0
 800ac44:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ac46:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ac4a:	f113 0f04 	cmn.w	r3, #4
 800ac4e:	d104      	bne.n	800ac5a <lwip_netconn_do_writemore+0x33a>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ac50:	7b7b      	ldrb	r3, [r7, #13]
 800ac52:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac54:	2301      	movs	r3, #1
 800ac56:	76fb      	strb	r3, [r7, #27]
 800ac58:	e011      	b.n	800ac7e <lwip_netconn_do_writemore+0x35e>
      } else if (dontblock) {
 800ac5a:	7e3b      	ldrb	r3, [r7, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00e      	beq.n	800ac7e <lwip_netconn_do_writemore+0x35e>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d102      	bne.n	800ac70 <lwip_netconn_do_writemore+0x350>
 800ac6a:	f06f 0306 	mvn.w	r3, #6
 800ac6e:	e000      	b.n	800ac72 <lwip_netconn_do_writemore+0x352>
 800ac70:	2300      	movs	r3, #0
 800ac72:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac74:	2301      	movs	r3, #1
 800ac76:	76fb      	strb	r3, [r7, #27]
 800ac78:	e001      	b.n	800ac7e <lwip_netconn_do_writemore+0x35e>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ac7e:	7efb      	ldrb	r3, [r7, #27]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d015      	beq.n	800acb0 <lwip_netconn_do_writemore+0x390>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	330c      	adds	r3, #12
 800ac8c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac92:	7ffa      	ldrb	r2, [r7, #31]
 800ac94:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800aca2:	78fb      	ldrb	r3, [r7, #3]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d006      	beq.n	800acb6 <lwip_netconn_do_writemore+0x396>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800aca8:	68b8      	ldr	r0, [r7, #8]
 800acaa:	f00e fe65 	bl	8019978 <sys_sem_signal>
 800acae:	e002      	b.n	800acb6 <lwip_netconn_do_writemore+0x396>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800acb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acb4:	e000      	b.n	800acb8 <lwip_netconn_do_writemore+0x398>
  }
#endif
  return ERR_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3720      	adds	r7, #32
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe fca7 	bl	8009624 <netconn_err>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800acda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d166      	bne.n	800adb0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acec:	2b10      	cmp	r3, #16
 800acee:	d15d      	bne.n	800adac <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	785b      	ldrb	r3, [r3, #1]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800acfa:	23fb      	movs	r3, #251	; 0xfb
 800acfc:	73fb      	strb	r3, [r7, #15]
 800acfe:	e057      	b.n	800adb0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d04d      	beq.n	800ada6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d006      	beq.n	800ad2a <lwip_netconn_do_write+0x6a>
 800ad1c:	4b28      	ldr	r3, [pc, #160]	; (800adc0 <lwip_netconn_do_write+0x100>)
 800ad1e:	f240 7223 	movw	r2, #1827	; 0x723
 800ad22:	4928      	ldr	r1, [pc, #160]	; (800adc4 <lwip_netconn_do_write+0x104>)
 800ad24:	4828      	ldr	r0, [pc, #160]	; (800adc8 <lwip_netconn_do_write+0x108>)
 800ad26:	f010 fdcb 	bl	801b8c0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d106      	bne.n	800ad40 <lwip_netconn_do_write+0x80>
 800ad32:	4b23      	ldr	r3, [pc, #140]	; (800adc0 <lwip_netconn_do_write+0x100>)
 800ad34:	f240 7224 	movw	r2, #1828	; 0x724
 800ad38:	4924      	ldr	r1, [pc, #144]	; (800adcc <lwip_netconn_do_write+0x10c>)
 800ad3a:	4823      	ldr	r0, [pc, #140]	; (800adc8 <lwip_netconn_do_write+0x108>)
 800ad3c:	f010 fdc0 	bl	801b8c0 <iprintf>
        msg->conn->current_msg = msg;
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7ff fde6 	bl	800a920 <lwip_netconn_do_writemore>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d02e      	beq.n	800adb8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	785b      	ldrb	r3, [r3, #1]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d006      	beq.n	800ad72 <lwip_netconn_do_write+0xb2>
 800ad64:	4b16      	ldr	r3, [pc, #88]	; (800adc0 <lwip_netconn_do_write+0x100>)
 800ad66:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ad6a:	4919      	ldr	r1, [pc, #100]	; (800add0 <lwip_netconn_do_write+0x110>)
 800ad6c:	4816      	ldr	r0, [pc, #88]	; (800adc8 <lwip_netconn_do_write+0x108>)
 800ad6e:	f010 fda7 	bl	801b8c0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ad72:	4818      	ldr	r0, [pc, #96]	; (800add4 <lwip_netconn_do_write+0x114>)
 800ad74:	f00e fe71 	bl	8019a5a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	2100      	movs	r1, #0
 800ad80:	4618      	mov	r0, r3
 800ad82:	f00e fdc8 	bl	8019916 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ad86:	4813      	ldr	r0, [pc, #76]	; (800add4 <lwip_netconn_do_write+0x114>)
 800ad88:	f00e fe58 	bl	8019a3c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	785b      	ldrb	r3, [r3, #1]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d110      	bne.n	800adb8 <lwip_netconn_do_write+0xf8>
 800ad96:	4b0a      	ldr	r3, [pc, #40]	; (800adc0 <lwip_netconn_do_write+0x100>)
 800ad98:	f240 722c 	movw	r2, #1836	; 0x72c
 800ad9c:	490c      	ldr	r1, [pc, #48]	; (800add0 <lwip_netconn_do_write+0x110>)
 800ad9e:	480a      	ldr	r0, [pc, #40]	; (800adc8 <lwip_netconn_do_write+0x108>)
 800ada0:	f010 fd8e 	bl	801b8c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ada4:	e008      	b.n	800adb8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ada6:	23f5      	movs	r3, #245	; 0xf5
 800ada8:	73fb      	strb	r3, [r7, #15]
 800adaa:	e001      	b.n	800adb0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800adac:	23fa      	movs	r3, #250	; 0xfa
 800adae:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	7bfa      	ldrb	r2, [r7, #15]
 800adb4:	711a      	strb	r2, [r3, #4]
 800adb6:	e000      	b.n	800adba <lwip_netconn_do_write+0xfa>
        return;
 800adb8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	0801cff8 	.word	0x0801cff8
 800adc4:	0801d39c 	.word	0x0801d39c
 800adc8:	0801d03c 	.word	0x0801d03c
 800adcc:	0801d524 	.word	0x0801d524
 800add0:	0801d3b8 	.word	0x0801d3b8
 800add4:	2000cf08 	.word	0x2000cf08

0800add8 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d06b      	beq.n	800aec6 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	7c1b      	ldrb	r3, [r3, #16]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d007      	beq.n	800ae06 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	6812      	ldr	r2, [r2, #0]
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	e006      	b.n	800ae14 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	6852      	ldr	r2, [r2, #4]
 800ae12:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae24:	2b10      	cmp	r3, #16
 800ae26:	d021      	beq.n	800ae6c <lwip_netconn_do_getaddr+0x94>
 800ae28:	2b20      	cmp	r3, #32
 800ae2a:	d144      	bne.n	800aeb6 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	7c1b      	ldrb	r3, [r3, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d007      	beq.n	800ae44 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	8a52      	ldrh	r2, [r2, #18]
 800ae40:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800ae42:	e044      	b.n	800aece <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	7c1b      	ldrb	r3, [r3, #16]
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d103      	bne.n	800ae5c <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	22f5      	movs	r2, #245	; 0xf5
 800ae58:	711a      	strb	r2, [r3, #4]
        break;
 800ae5a:	e038      	b.n	800aece <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	8a92      	ldrh	r2, [r2, #20]
 800ae68:	801a      	strh	r2, [r3, #0]
        break;
 800ae6a:	e030      	b.n	800aece <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	7c1b      	ldrb	r3, [r3, #16]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10f      	bne.n	800ae94 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d005      	beq.n	800ae8c <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	7d1b      	ldrb	r3, [r3, #20]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d103      	bne.n	800ae94 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	22f5      	movs	r2, #245	; 0xf5
 800ae90:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800ae92:	e01c      	b.n	800aece <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	7c1b      	ldrb	r3, [r3, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d004      	beq.n	800aea6 <lwip_netconn_do_getaddr+0xce>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	8adb      	ldrh	r3, [r3, #22]
 800aea4:	e003      	b.n	800aeae <lwip_netconn_do_getaddr+0xd6>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	8b1b      	ldrh	r3, [r3, #24]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	68d2      	ldr	r2, [r2, #12]
 800aeb2:	8013      	strh	r3, [r2, #0]
        break;
 800aeb4:	e00b      	b.n	800aece <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800aeb6:	4b08      	ldr	r3, [pc, #32]	; (800aed8 <lwip_netconn_do_getaddr+0x100>)
 800aeb8:	f240 727d 	movw	r2, #1917	; 0x77d
 800aebc:	4907      	ldr	r1, [pc, #28]	; (800aedc <lwip_netconn_do_getaddr+0x104>)
 800aebe:	4808      	ldr	r0, [pc, #32]	; (800aee0 <lwip_netconn_do_getaddr+0x108>)
 800aec0:	f010 fcfe 	bl	801b8c0 <iprintf>
        break;
 800aec4:	e003      	b.n	800aece <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	22f5      	movs	r2, #245	; 0xf5
 800aeca:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	0801cff8 	.word	0x0801cff8
 800aedc:	0801d538 	.word	0x0801d538
 800aee0:	0801d03c 	.word	0x0801d03c

0800aee4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	785b      	ldrb	r3, [r3, #1]
 800aef6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d069      	beq.n	800afd6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800af0c:	2b10      	cmp	r3, #16
 800af0e:	d162      	bne.n	800afd6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800af14:	2b03      	cmp	r3, #3
 800af16:	d002      	beq.n	800af1e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800af18:	7afb      	ldrb	r3, [r7, #11]
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d05b      	beq.n	800afd6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800af1e:	7afb      	ldrb	r3, [r7, #11]
 800af20:	2b03      	cmp	r3, #3
 800af22:	d103      	bne.n	800af2c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	22f5      	movs	r2, #245	; 0xf5
 800af28:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800af2a:	e059      	b.n	800afe0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800af2c:	7afb      	ldrb	r3, [r7, #11]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d103      	bne.n	800af3a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	22fb      	movs	r2, #251	; 0xfb
 800af36:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800af38:	e052      	b.n	800afe0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	7a1b      	ldrb	r3, [r3, #8]
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d004      	beq.n	800af50 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff f826 	bl	8009f9c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af56:	2b00      	cmp	r3, #0
 800af58:	d006      	beq.n	800af68 <lwip_netconn_do_close+0x84>
 800af5a:	4b23      	ldr	r3, [pc, #140]	; (800afe8 <lwip_netconn_do_close+0x104>)
 800af5c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800af60:	4922      	ldr	r1, [pc, #136]	; (800afec <lwip_netconn_do_close+0x108>)
 800af62:	4823      	ldr	r0, [pc, #140]	; (800aff0 <lwip_netconn_do_close+0x10c>)
 800af64:	f010 fcac 	bl	801b8c0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2204      	movs	r2, #4
 800af6e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2100      	movs	r1, #0
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff f88a 	bl	800a098 <lwip_netconn_do_close_internal>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d029      	beq.n	800afde <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	785b      	ldrb	r3, [r3, #1]
 800af90:	2b04      	cmp	r3, #4
 800af92:	d006      	beq.n	800afa2 <lwip_netconn_do_close+0xbe>
 800af94:	4b14      	ldr	r3, [pc, #80]	; (800afe8 <lwip_netconn_do_close+0x104>)
 800af96:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800af9a:	4916      	ldr	r1, [pc, #88]	; (800aff4 <lwip_netconn_do_close+0x110>)
 800af9c:	4814      	ldr	r0, [pc, #80]	; (800aff0 <lwip_netconn_do_close+0x10c>)
 800af9e:	f010 fc8f 	bl	801b8c0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800afa2:	4815      	ldr	r0, [pc, #84]	; (800aff8 <lwip_netconn_do_close+0x114>)
 800afa4:	f00e fd59 	bl	8019a5a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	330c      	adds	r3, #12
 800afae:	2100      	movs	r1, #0
 800afb0:	4618      	mov	r0, r3
 800afb2:	f00e fcb0 	bl	8019916 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800afb6:	4810      	ldr	r0, [pc, #64]	; (800aff8 <lwip_netconn_do_close+0x114>)
 800afb8:	f00e fd40 	bl	8019a3c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	785b      	ldrb	r3, [r3, #1]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00b      	beq.n	800afde <lwip_netconn_do_close+0xfa>
 800afc6:	4b08      	ldr	r3, [pc, #32]	; (800afe8 <lwip_netconn_do_close+0x104>)
 800afc8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800afcc:	4909      	ldr	r1, [pc, #36]	; (800aff4 <lwip_netconn_do_close+0x110>)
 800afce:	4808      	ldr	r0, [pc, #32]	; (800aff0 <lwip_netconn_do_close+0x10c>)
 800afd0:	f010 fc76 	bl	801b8c0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800afd4:	e003      	b.n	800afde <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	22f5      	movs	r2, #245	; 0xf5
 800afda:	711a      	strb	r2, [r3, #4]
 800afdc:	e000      	b.n	800afe0 <lwip_netconn_do_close+0xfc>
      return;
 800afde:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	0801cff8 	.word	0x0801cff8
 800afec:	0801d39c 	.word	0x0801d39c
 800aff0:	0801d03c 	.word	0x0801d03c
 800aff4:	0801d3b8 	.word	0x0801d3b8
 800aff8:	2000cf08 	.word	0x2000cf08

0800affc <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	4603      	mov	r3, r0
 800b004:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	dc04      	bgt.n	800b018 <err_to_errno+0x1c>
 800b00e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b012:	f113 0f10 	cmn.w	r3, #16
 800b016:	da01      	bge.n	800b01c <err_to_errno+0x20>
    return EIO;
 800b018:	2305      	movs	r3, #5
 800b01a:	e005      	b.n	800b028 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b01c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b020:	425b      	negs	r3, r3
 800b022:	4a04      	ldr	r2, [pc, #16]	; (800b034 <err_to_errno+0x38>)
 800b024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr
 800b034:	080209d4 	.word	0x080209d4

0800b038 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d013      	beq.n	800b06e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4618      	mov	r0, r3
 800b054:	f002 fee0 	bl	800de18 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	605a      	str	r2, [r3, #4]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	2006      	movs	r0, #6
 800b06a:	f001 fff3 	bl	800d054 <memp_free>
  }
}
 800b06e:	bf00      	nop
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
	...

0800b078 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d106      	bne.n	800b094 <netbuf_free+0x1c>
 800b086:	4b0d      	ldr	r3, [pc, #52]	; (800b0bc <netbuf_free+0x44>)
 800b088:	2281      	movs	r2, #129	; 0x81
 800b08a:	490d      	ldr	r1, [pc, #52]	; (800b0c0 <netbuf_free+0x48>)
 800b08c:	480d      	ldr	r0, [pc, #52]	; (800b0c4 <netbuf_free+0x4c>)
 800b08e:	f010 fc17 	bl	801b8c0 <iprintf>
 800b092:	e00f      	b.n	800b0b4 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d004      	beq.n	800b0a6 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f002 feb9 	bl	800de18 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	605a      	str	r2, [r3, #4]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685a      	ldr	r2, [r3, #4]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	0801d550 	.word	0x0801d550
 800b0c0:	0801d5ec 	.word	0x0801d5ec
 800b0c4:	0801d5a0 	.word	0x0801d5a0

0800b0c8 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d108      	bne.n	800b0ee <netbuf_ref+0x26>
 800b0dc:	4b1c      	ldr	r3, [pc, #112]	; (800b150 <netbuf_ref+0x88>)
 800b0de:	2299      	movs	r2, #153	; 0x99
 800b0e0:	491c      	ldr	r1, [pc, #112]	; (800b154 <netbuf_ref+0x8c>)
 800b0e2:	481d      	ldr	r0, [pc, #116]	; (800b158 <netbuf_ref+0x90>)
 800b0e4:	f010 fbec 	bl	801b8c0 <iprintf>
 800b0e8:	f06f 030f 	mvn.w	r3, #15
 800b0ec:	e02b      	b.n	800b146 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d004      	beq.n	800b100 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f002 fe8c 	bl	800de18 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b100:	2241      	movs	r2, #65	; 0x41
 800b102:	2100      	movs	r1, #0
 800b104:	2036      	movs	r0, #54	; 0x36
 800b106:	f002 fb71 	bl	800d7ec <pbuf_alloc>
 800b10a:	4602      	mov	r2, r0
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d105      	bne.n	800b124 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2200      	movs	r2, #0
 800b11c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b11e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b122:	e010      	b.n	800b146 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	88fa      	ldrh	r2, [r7, #6]
 800b132:	811a      	strh	r2, [r3, #8]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	6812      	ldr	r2, [r2, #0]
 800b138:	891b      	ldrh	r3, [r3, #8]
 800b13a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	0801d550 	.word	0x0801d550
 800b154:	0801d608 	.word	0x0801d608
 800b158:	0801d5a0 	.word	0x0801d5a0

0800b15c <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	db02      	blt.n	800b174 <tryget_socket_unconn_nouse+0x18>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b03      	cmp	r3, #3
 800b172:	dd01      	ble.n	800b178 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b174:	2300      	movs	r3, #0
 800b176:	e003      	b.n	800b180 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	4a03      	ldr	r2, [pc, #12]	; (800b18c <tryget_socket_unconn_nouse+0x30>)
 800b17e:	4413      	add	r3, r2
}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	20008a4c 	.word	0x20008a4c

0800b190 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff ffdf 	bl	800b15c <tryget_socket_unconn_nouse>
 800b19e:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7ff ffec 	bl	800b190 <tryget_socket_unconn>
 800b1b8:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d005      	beq.n	800b1cc <tryget_socket+0x22>
    if (sock->conn) {
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <tryget_socket+0x22>
      return sock;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	e000      	b.n	800b1ce <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
	...

0800b1d8 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff ffe2 	bl	800b1aa <tryget_socket>
 800b1e6:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d104      	bne.n	800b1f8 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800b1ee:	4b05      	ldr	r3, [pc, #20]	; (800b204 <get_socket+0x2c>)
 800b1f0:	2209      	movs	r2, #9
 800b1f2:	601a      	str	r2, [r3, #0]
    return NULL;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	e000      	b.n	800b1fa <get_socket+0x22>
  }
  return sock;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	200106a4 	.word	0x200106a4

0800b208 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b212:	2300      	movs	r3, #0
 800b214:	60fb      	str	r3, [r7, #12]
 800b216:	e052      	b.n	800b2be <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800b218:	f00e fc52 	bl	8019ac0 <sys_arch_protect>
 800b21c:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800b21e:	4a2c      	ldr	r2, [pc, #176]	; (800b2d0 <alloc_socket+0xc8>)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	011b      	lsls	r3, r3, #4
 800b224:	4413      	add	r3, r2
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d142      	bne.n	800b2b2 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800b22c:	4a28      	ldr	r2, [pc, #160]	; (800b2d0 <alloc_socket+0xc8>)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	011b      	lsls	r3, r3, #4
 800b232:	4413      	add	r3, r2
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800b238:	68b8      	ldr	r0, [r7, #8]
 800b23a:	f00e fc4f 	bl	8019adc <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800b23e:	4a24      	ldr	r2, [pc, #144]	; (800b2d0 <alloc_socket+0xc8>)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	011b      	lsls	r3, r3, #4
 800b244:	4413      	add	r3, r2
 800b246:	3304      	adds	r3, #4
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800b24c:	4a20      	ldr	r2, [pc, #128]	; (800b2d0 <alloc_socket+0xc8>)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	011b      	lsls	r3, r3, #4
 800b252:	4413      	add	r3, r2
 800b254:	330e      	adds	r3, #14
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d006      	beq.n	800b26a <alloc_socket+0x62>
 800b25c:	4b1d      	ldr	r3, [pc, #116]	; (800b2d4 <alloc_socket+0xcc>)
 800b25e:	f240 220e 	movw	r2, #526	; 0x20e
 800b262:	491d      	ldr	r1, [pc, #116]	; (800b2d8 <alloc_socket+0xd0>)
 800b264:	481d      	ldr	r0, [pc, #116]	; (800b2dc <alloc_socket+0xd4>)
 800b266:	f010 fb2b 	bl	801b8c0 <iprintf>
      sockets[i].rcvevent   = 0;
 800b26a:	4a19      	ldr	r2, [pc, #100]	; (800b2d0 <alloc_socket+0xc8>)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	011b      	lsls	r3, r3, #4
 800b270:	4413      	add	r3, r2
 800b272:	3308      	adds	r3, #8
 800b274:	2200      	movs	r2, #0
 800b276:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b280:	2b10      	cmp	r3, #16
 800b282:	d102      	bne.n	800b28a <alloc_socket+0x82>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d001      	beq.n	800b28e <alloc_socket+0x86>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e000      	b.n	800b290 <alloc_socket+0x88>
 800b28e:	2300      	movs	r3, #0
 800b290:	b299      	uxth	r1, r3
 800b292:	4a0f      	ldr	r2, [pc, #60]	; (800b2d0 <alloc_socket+0xc8>)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	011b      	lsls	r3, r3, #4
 800b298:	4413      	add	r3, r2
 800b29a:	330a      	adds	r3, #10
 800b29c:	460a      	mov	r2, r1
 800b29e:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800b2a0:	4a0b      	ldr	r2, [pc, #44]	; (800b2d0 <alloc_socket+0xc8>)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	011b      	lsls	r3, r3, #4
 800b2a6:	4413      	add	r3, r2
 800b2a8:	330c      	adds	r3, #12
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	e00a      	b.n	800b2c8 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800b2b2:	68b8      	ldr	r0, [r7, #8]
 800b2b4:	f00e fc12 	bl	8019adc <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	60fb      	str	r3, [r7, #12]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	dda9      	ble.n	800b218 <alloc_socket+0x10>
  }
  return -1;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20008a4c 	.word	0x20008a4c
 800b2d4:	0801d6e8 	.word	0x0801d6e8
 800b2d8:	0801d71c 	.word	0x0801d71c
 800b2dc:	0801d73c 	.word	0x0801d73c

0800b2e0 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	6852      	ldr	r2, [r2, #4]
 800b2f4:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	601a      	str	r2, [r3, #0]
  return 1;
 800b30a:	2301      	movs	r3, #1
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00d      	beq.n	800b348 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d005      	beq.n	800b33e <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4618      	mov	r0, r3
 800b338:	f002 fd6e 	bl	800de18 <pbuf_free>
 800b33c:	e004      	b.n	800b348 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff fe78 	bl	800b038 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800b34e:	68b8      	ldr	r0, [r7, #8]
 800b350:	f7fd fd50 	bl	8008df4 <netconn_delete>
  }
}
 800b354:	bf00      	nop
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800b366:	f00e fbab 	bl	8019ac0 <sys_arch_protect>
 800b36a:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800b36c:	f107 0308 	add.w	r3, r7, #8
 800b370:	f107 020c 	add.w	r2, r7, #12
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7ff ffb2 	bl	800b2e0 <free_socket_locked>
 800b37c:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800b37e:	6978      	ldr	r0, [r7, #20]
 800b380:	f00e fbac 	bl	8019adc <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d006      	beq.n	800b398 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f107 0208 	add.w	r2, r7, #8
 800b390:	4619      	mov	r1, r3
 800b392:	6838      	ldr	r0, [r7, #0]
 800b394:	f7ff ffc0 	bl	800b318 <free_socket_free_elements>
  }
}
 800b398:	bf00      	nop
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f7ff ff13 	bl	800b1d8 <get_socket>
 800b3b2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d102      	bne.n	800b3c0 <lwip_close+0x20>
    return -1;
 800b3ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3be:	e039      	b.n	800b434 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00b      	beq.n	800b3e0 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3d2:	2b10      	cmp	r3, #16
 800b3d4:	bf0c      	ite	eq
 800b3d6:	2301      	moveq	r3, #1
 800b3d8:	2300      	movne	r3, #0
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	e00a      	b.n	800b3f6 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d006      	beq.n	800b3f6 <lwip_close+0x56>
 800b3e8:	4b14      	ldr	r3, [pc, #80]	; (800b43c <lwip_close+0x9c>)
 800b3ea:	f44f 7245 	mov.w	r2, #788	; 0x314
 800b3ee:	4914      	ldr	r1, [pc, #80]	; (800b440 <lwip_close+0xa0>)
 800b3f0:	4814      	ldr	r0, [pc, #80]	; (800b444 <lwip_close+0xa4>)
 800b3f2:	f010 fa65 	bl	801b8c0 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fd fcd6 	bl	8008dac <netconn_prepare_delete>
 800b400:	4603      	mov	r3, r0
 800b402:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00e      	beq.n	800b42a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800b40c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b410:	4618      	mov	r0, r3
 800b412:	f7ff fdf3 	bl	800affc <err_to_errno>
 800b416:	60b8      	str	r0, [r7, #8]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d002      	beq.n	800b424 <lwip_close+0x84>
 800b41e:	4a0a      	ldr	r2, [pc, #40]	; (800b448 <lwip_close+0xa8>)
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b428:	e004      	b.n	800b434 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800b42a:	6979      	ldr	r1, [r7, #20]
 800b42c:	6938      	ldr	r0, [r7, #16]
 800b42e:	f7ff ff95 	bl	800b35c <free_socket>
  set_errno(0);
  return 0;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3718      	adds	r7, #24
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	0801d6e8 	.word	0x0801d6e8
 800b440:	0801d7a8 	.word	0x0801d7a8
 800b444:	0801d73c 	.word	0x0801d73c
 800b448:	200106a4 	.word	0x200106a4

0800b44c <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b08c      	sub	sp, #48	; 0x30
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f7ff febd 	bl	800b1d8 <get_socket>
 800b45e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 800b460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b462:	2b00      	cmp	r3, #0
 800b464:	d102      	bne.n	800b46c <lwip_connect+0x20>
    return -1;
 800b466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b46a:	e062      	b.n	800b532 <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	785b      	ldrb	r3, [r3, #1]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d108      	bne.n	800b486 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fd fd61 	bl	8008f40 <netconn_disconnect>
 800b47e:	4603      	mov	r3, r0
 800b480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b484:	e039      	b.n	800b4fa <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b10      	cmp	r3, #16
 800b48a:	d10c      	bne.n	800b4a6 <lwip_connect+0x5a>
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	785b      	ldrb	r3, [r3, #1]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d003      	beq.n	800b49c <lwip_connect+0x50>
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	785b      	ldrb	r3, [r3, #1]
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d104      	bne.n	800b4a6 <lwip_connect+0x5a>
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	f003 0303 	and.w	r3, r3, #3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d014      	beq.n	800b4d0 <lwip_connect+0x84>
 800b4a6:	4b25      	ldr	r3, [pc, #148]	; (800b53c <lwip_connect+0xf0>)
 800b4a8:	f240 3247 	movw	r2, #839	; 0x347
 800b4ac:	4924      	ldr	r1, [pc, #144]	; (800b540 <lwip_connect+0xf4>)
 800b4ae:	4825      	ldr	r0, [pc, #148]	; (800b544 <lwip_connect+0xf8>)
 800b4b0:	f010 fa06 	bl	801b8c0 <iprintf>
 800b4b4:	f06f 000f 	mvn.w	r0, #15
 800b4b8:	f7ff fda0 	bl	800affc <err_to_errno>
 800b4bc:	6238      	str	r0, [r7, #32]
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <lwip_connect+0x7e>
 800b4c4:	4a20      	ldr	r2, [pc, #128]	; (800b548 <lwip_connect+0xfc>)
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	6013      	str	r3, [r2, #0]
 800b4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4ce:	e030      	b.n	800b532 <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	617b      	str	r3, [r7, #20]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	885b      	ldrh	r3, [r3, #2]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f001 f8b2 	bl	800c644 <lwip_htons>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800b4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b4ea:	f107 0114 	add.w	r1, r7, #20
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fd fcee 	bl	8008ed0 <netconn_connect>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 800b4fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00e      	beq.n	800b520 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800b502:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff fd78 	bl	800affc <err_to_errno>
 800b50c:	61b8      	str	r0, [r7, #24]
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <lwip_connect+0xce>
 800b514:	4a0c      	ldr	r2, [pc, #48]	; (800b548 <lwip_connect+0xfc>)
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b51a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b51e:	e008      	b.n	800b532 <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800b520:	2300      	movs	r3, #0
 800b522:	61fb      	str	r3, [r7, #28]
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <lwip_connect+0xe4>
 800b52a:	4a07      	ldr	r2, [pc, #28]	; (800b548 <lwip_connect+0xfc>)
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3730      	adds	r7, #48	; 0x30
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	0801d6e8 	.word	0x0801d6e8
 800b540:	0801d7c0 	.word	0x0801d7c0
 800b544:	0801d73c 	.word	0x0801d73c
 800b548:	200106a4 	.word	0x200106a4

0800b54c <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08c      	sub	sp, #48	; 0x30
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
 800b558:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800b55a:	2308      	movs	r3, #8
 800b55c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	db01      	blt.n	800b56e <lwip_recv_tcp+0x22>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	e001      	b.n	800b572 <lwip_recv_tcp+0x26>
 800b56e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b572:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d106      	bne.n	800b588 <lwip_recv_tcp+0x3c>
 800b57a:	4b74      	ldr	r3, [pc, #464]	; (800b74c <lwip_recv_tcp+0x200>)
 800b57c:	f240 329e 	movw	r2, #926	; 0x39e
 800b580:	4973      	ldr	r1, [pc, #460]	; (800b750 <lwip_recv_tcp+0x204>)
 800b582:	4874      	ldr	r0, [pc, #464]	; (800b754 <lwip_recv_tcp+0x208>)
 800b584:	f010 f99c 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b592:	2b10      	cmp	r3, #16
 800b594:	d006      	beq.n	800b5a4 <lwip_recv_tcp+0x58>
 800b596:	4b6d      	ldr	r3, [pc, #436]	; (800b74c <lwip_recv_tcp+0x200>)
 800b598:	f240 329f 	movw	r2, #927	; 0x39f
 800b59c:	496e      	ldr	r1, [pc, #440]	; (800b758 <lwip_recv_tcp+0x20c>)
 800b59e:	486d      	ldr	r0, [pc, #436]	; (800b754 <lwip_recv_tcp+0x208>)
 800b5a0:	f010 f98e 	bl	801b8c0 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	f003 0308 	and.w	r3, r3, #8
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d005      	beq.n	800b5ba <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800b5ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5b2:	f043 0304 	orr.w	r3, r3, #4
 800b5b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d003      	beq.n	800b5ca <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	617b      	str	r3, [r7, #20]
 800b5c8:	e036      	b.n	800b638 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b5d2:	f107 0114 	add.w	r1, r7, #20
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fd fe9c 	bl	8009314 <netconn_recv_tcp_pbuf_flags>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800b5e2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d019      	beq.n	800b61e <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800b5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f300 808d 	bgt.w	800b70c <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800b5f2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7ff fd00 	bl	800affc <err_to_errno>
 800b5fc:	61f8      	str	r0, [r7, #28]
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <lwip_recv_tcp+0xbe>
 800b604:	4a55      	ldr	r2, [pc, #340]	; (800b75c <lwip_recv_tcp+0x210>)
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800b60a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b60e:	f113 0f0f 	cmn.w	r3, #15
 800b612:	d101      	bne.n	800b618 <lwip_recv_tcp+0xcc>
          return 0;
 800b614:	2300      	movs	r3, #0
 800b616:	e094      	b.n	800b742 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800b618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b61c:	e091      	b.n	800b742 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d106      	bne.n	800b632 <lwip_recv_tcp+0xe6>
 800b624:	4b49      	ldr	r3, [pc, #292]	; (800b74c <lwip_recv_tcp+0x200>)
 800b626:	f240 32c5 	movw	r2, #965	; 0x3c5
 800b62a:	494d      	ldr	r1, [pc, #308]	; (800b760 <lwip_recv_tcp+0x214>)
 800b62c:	4849      	ldr	r0, [pc, #292]	; (800b754 <lwip_recv_tcp+0x208>)
 800b62e:	f010 f947 	bl	801b8c0 <iprintf>
      sock->lastdata.pbuf = p;
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	891b      	ldrh	r3, [r3, #8]
 800b63c:	461a      	mov	r2, r3
 800b63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b640:	4293      	cmp	r3, r2
 800b642:	dd03      	ble.n	800b64c <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	891b      	ldrh	r3, [r3, #8]
 800b648:	847b      	strh	r3, [r7, #34]	; 0x22
 800b64a:	e001      	b.n	800b650 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800b64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64e:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800b650:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	4413      	add	r3, r2
 800b656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b658:	429a      	cmp	r2, r3
 800b65a:	dd03      	ble.n	800b664 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	b29b      	uxth	r3, r3
 800b660:	43db      	mvns	r3, r3
 800b662:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800b664:	6978      	ldr	r0, [r7, #20]
 800b666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	18d1      	adds	r1, r2, r3
 800b66c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b66e:	2300      	movs	r3, #0
 800b670:	f002 fdd8 	bl	800e224 <pbuf_copy_partial>

    recvd += copylen;
 800b674:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b678:	4413      	add	r3, r2
 800b67a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800b67c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b67e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b680:	429a      	cmp	r2, r3
 800b682:	da06      	bge.n	800b692 <lwip_recv_tcp+0x146>
 800b684:	4b31      	ldr	r3, [pc, #196]	; (800b74c <lwip_recv_tcp+0x200>)
 800b686:	f240 32dd 	movw	r2, #989	; 0x3dd
 800b68a:	4936      	ldr	r1, [pc, #216]	; (800b764 <lwip_recv_tcp+0x218>)
 800b68c:	4831      	ldr	r0, [pc, #196]	; (800b754 <lwip_recv_tcp+0x208>)
 800b68e:	f010 f917 	bl	801b8c0 <iprintf>
    recv_left -= copylen;
 800b692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	f003 0301 	and.w	r3, r3, #1
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d123      	bne.n	800b6ec <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	891b      	ldrh	r3, [r3, #8]
 800b6a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d906      	bls.n	800b6bc <lwip_recv_tcp+0x170>
 800b6ae:	4b27      	ldr	r3, [pc, #156]	; (800b74c <lwip_recv_tcp+0x200>)
 800b6b0:	f240 32e3 	movw	r2, #995	; 0x3e3
 800b6b4:	492c      	ldr	r1, [pc, #176]	; (800b768 <lwip_recv_tcp+0x21c>)
 800b6b6:	4827      	ldr	r0, [pc, #156]	; (800b754 <lwip_recv_tcp+0x208>)
 800b6b8:	f010 f902 	bl	801b8c0 <iprintf>
      if (p->tot_len - copylen > 0) {
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	891b      	ldrh	r3, [r3, #8]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	dd09      	ble.n	800b6de <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f002 fb6e 	bl	800ddb2 <pbuf_free_header>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	605a      	str	r2, [r3, #4]
 800b6dc:	e006      	b.n	800b6ec <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f002 fb96 	bl	800de18 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800b6ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6f0:	f043 0314 	orr.w	r3, r3, #20
 800b6f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	dd08      	ble.n	800b710 <lwip_recv_tcp+0x1c4>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	f003 0301 	and.w	r3, r3, #1
 800b704:	2b00      	cmp	r3, #0
 800b706:	f43f af58 	beq.w	800b5ba <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800b70a:	e001      	b.n	800b710 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800b70c:	bf00      	nop
 800b70e:	e000      	b.n	800b712 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800b710:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800b712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b714:	2b00      	cmp	r3, #0
 800b716:	dd0b      	ble.n	800b730 <lwip_recv_tcp+0x1e4>
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	f003 0301 	and.w	r3, r3, #1
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b728:	4611      	mov	r1, r2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fd fd3a 	bl	80091a4 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800b730:	2300      	movs	r3, #0
 800b732:	61bb      	str	r3, [r7, #24]
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d002      	beq.n	800b740 <lwip_recv_tcp+0x1f4>
 800b73a:	4a08      	ldr	r2, [pc, #32]	; (800b75c <lwip_recv_tcp+0x210>)
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	6013      	str	r3, [r2, #0]
  return recvd;
 800b740:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b742:	4618      	mov	r0, r3
 800b744:	3730      	adds	r7, #48	; 0x30
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	0801d6e8 	.word	0x0801d6e8
 800b750:	0801d7e0 	.word	0x0801d7e0
 800b754:	0801d73c 	.word	0x0801d73c
 800b758:	0801d7f0 	.word	0x0801d7f0
 800b75c:	200106a4 	.word	0x200106a4
 800b760:	0801d814 	.word	0x0801d814
 800b764:	0801d820 	.word	0x0801d820
 800b768:	0801d848 	.word	0x0801d848

0800b76c <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800b76c:	b590      	push	{r4, r7, lr}
 800b76e:	b08b      	sub	sp, #44	; 0x2c
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	4613      	mov	r3, r2
 800b77a:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800b77c:	2300      	movs	r3, #0
 800b77e:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d106      	bne.n	800b794 <lwip_sock_make_addr+0x28>
 800b786:	4b2b      	ldr	r3, [pc, #172]	; (800b834 <lwip_sock_make_addr+0xc8>)
 800b788:	f240 4207 	movw	r2, #1031	; 0x407
 800b78c:	492a      	ldr	r1, [pc, #168]	; (800b838 <lwip_sock_make_addr+0xcc>)
 800b78e:	482b      	ldr	r0, [pc, #172]	; (800b83c <lwip_sock_make_addr+0xd0>)
 800b790:	f010 f896 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d106      	bne.n	800b7a8 <lwip_sock_make_addr+0x3c>
 800b79a:	4b26      	ldr	r3, [pc, #152]	; (800b834 <lwip_sock_make_addr+0xc8>)
 800b79c:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b7a0:	4927      	ldr	r1, [pc, #156]	; (800b840 <lwip_sock_make_addr+0xd4>)
 800b7a2:	4826      	ldr	r0, [pc, #152]	; (800b83c <lwip_sock_make_addr+0xd0>)
 800b7a4:	f010 f88c 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <lwip_sock_make_addr+0x50>
 800b7ae:	4b21      	ldr	r3, [pc, #132]	; (800b834 <lwip_sock_make_addr+0xc8>)
 800b7b0:	f240 4209 	movw	r2, #1033	; 0x409
 800b7b4:	4923      	ldr	r1, [pc, #140]	; (800b844 <lwip_sock_make_addr+0xd8>)
 800b7b6:	4821      	ldr	r0, [pc, #132]	; (800b83c <lwip_sock_make_addr+0xd0>)
 800b7b8:	f010 f882 	bl	801b8c0 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800b7bc:	f107 0314 	add.w	r3, r7, #20
 800b7c0:	2210      	movs	r2, #16
 800b7c2:	701a      	strb	r2, [r3, #0]
 800b7c4:	f107 0314 	add.w	r3, r7, #20
 800b7c8:	2202      	movs	r2, #2
 800b7ca:	705a      	strb	r2, [r3, #1]
 800b7cc:	f107 0414 	add.w	r4, r7, #20
 800b7d0:	88fb      	ldrh	r3, [r7, #6]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 ff36 	bl	800c644 <lwip_htons>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	8063      	strh	r3, [r4, #2]
 800b7dc:	f107 0314 	add.w	r3, r7, #20
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	6812      	ldr	r2, [r2, #0]
 800b7e4:	605a      	str	r2, [r3, #4]
 800b7e6:	f107 0314 	add.w	r3, r7, #20
 800b7ea:	3308      	adds	r3, #8
 800b7ec:	2208      	movs	r2, #8
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f010 f85d 	bl	801b8b0 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	7d3a      	ldrb	r2, [r7, #20]
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d202      	bcs.n	800b806 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800b800:	2301      	movs	r3, #1
 800b802:	627b      	str	r3, [r7, #36]	; 0x24
 800b804:	e008      	b.n	800b818 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	7d3a      	ldrb	r2, [r7, #20]
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d903      	bls.n	800b818 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800b810:	7d3b      	ldrb	r3, [r7, #20]
 800b812:	461a      	mov	r2, r3
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800b818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	f107 0314 	add.w	r3, r7, #20
 800b820:	4619      	mov	r1, r3
 800b822:	6838      	ldr	r0, [r7, #0]
 800b824:	f010 f836 	bl	801b894 <memcpy>
  return truncated;
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	372c      	adds	r7, #44	; 0x2c
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd90      	pop	{r4, r7, pc}
 800b832:	bf00      	nop
 800b834:	0801d6e8 	.word	0x0801d6e8
 800b838:	0801d858 	.word	0x0801d858
 800b83c:	0801d73c 	.word	0x0801d73c
 800b840:	0801d86c 	.word	0x0801d86c
 800b844:	0801d87c 	.word	0x0801d87c

0800b848 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b088      	sub	sp, #32
 800b84c:	af02      	add	r7, sp, #8
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
 800b854:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d101      	bne.n	800b860 <lwip_recv_tcp_from+0x18>
    return 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	e021      	b.n	800b8a4 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d01d      	beq.n	800b8a2 <lwip_recv_tcp_from+0x5a>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d01a      	beq.n	800b8a2 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6818      	ldr	r0, [r3, #0]
 800b870:	f107 0216 	add.w	r2, r7, #22
 800b874:	f107 0110 	add.w	r1, r7, #16
 800b878:	2300      	movs	r3, #0
 800b87a:	f7fd fad7 	bl	8008e2c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00e      	beq.n	800b8a2 <lwip_recv_tcp_from+0x5a>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00b      	beq.n	800b8a2 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6818      	ldr	r0, [r3, #0]
 800b88e:	8afa      	ldrh	r2, [r7, #22]
 800b890:	f107 0110 	add.w	r1, r7, #16
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f7ff ff67 	bl	800b76c <lwip_sock_make_addr>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	e000      	b.n	800b8a4 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800b8ac:	b590      	push	{r4, r7, lr}
 800b8ae:	b08d      	sub	sp, #52	; 0x34
 800b8b0:	af02      	add	r7, sp, #8
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10d      	bne.n	800b8de <lwip_recvfrom_udp_raw+0x32>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	dd09      	ble.n	800b8de <lwip_recvfrom_udp_raw+0x32>
 800b8ca:	4b5e      	ldr	r3, [pc, #376]	; (800ba44 <lwip_recvfrom_udp_raw+0x198>)
 800b8cc:	f240 4249 	movw	r2, #1097	; 0x449
 800b8d0:	495d      	ldr	r1, [pc, #372]	; (800ba48 <lwip_recvfrom_udp_raw+0x19c>)
 800b8d2:	485e      	ldr	r0, [pc, #376]	; (800ba4c <lwip_recvfrom_udp_raw+0x1a0>)
 800b8d4:	f00f fff4 	bl	801b8c0 <iprintf>
 800b8d8:	f06f 030f 	mvn.w	r3, #15
 800b8dc:	e0ad      	b.n	800ba3a <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f003 0308 	and.w	r3, r3, #8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d003      	beq.n	800b8f0 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800b8e8:	2304      	movs	r3, #4
 800b8ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8ee:	e002      	b.n	800b8f6 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d11e      	bne.n	800b940 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b90a:	f107 0110 	add.w	r1, r7, #16
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fd fd2c 	bl	800936c <netconn_recv_udp_raw_netbuf_flags>
 800b914:	4603      	mov	r3, r0
 800b916:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800b918:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800b920:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b924:	e089      	b.n	800ba3a <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <lwip_recvfrom_udp_raw+0x8e>
 800b92c:	4b45      	ldr	r3, [pc, #276]	; (800ba44 <lwip_recvfrom_udp_raw+0x198>)
 800b92e:	f240 425e 	movw	r2, #1118	; 0x45e
 800b932:	4947      	ldr	r1, [pc, #284]	; (800ba50 <lwip_recvfrom_udp_raw+0x1a4>)
 800b934:	4845      	ldr	r0, [pc, #276]	; (800ba4c <lwip_recvfrom_udp_raw+0x1a0>)
 800b936:	f00f ffc3 	bl	801b8c0 <iprintf>
    sock->lastdata.netbuf = buf;
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	891b      	ldrh	r3, [r3, #8]
 800b946:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800b94c:	2300      	movs	r3, #0
 800b94e:	61fb      	str	r3, [r7, #28]
 800b950:	e029      	b.n	800b9a6 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800b952:	8b3a      	ldrh	r2, [r7, #24]
 800b954:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	689a      	ldr	r2, [r3, #8]
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	4413      	add	r3, r2
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	8afb      	ldrh	r3, [r7, #22]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d902      	bls.n	800b972 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800b96c:	8afb      	ldrh	r3, [r7, #22]
 800b96e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b970:	e006      	b.n	800b980 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	689a      	ldr	r2, [r3, #8]
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	00db      	lsls	r3, r3, #3
 800b97a:	4413      	add	r3, r2
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	6818      	ldr	r0, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	689a      	ldr	r2, [r3, #8]
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	00db      	lsls	r3, r3, #3
 800b98c:	4413      	add	r3, r2
 800b98e:	6819      	ldr	r1, [r3, #0]
 800b990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b992:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b994:	f002 fc46 	bl	800e224 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800b998:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b99a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b99c:	4413      	add	r3, r2
 800b99e:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	61fb      	str	r3, [r7, #28]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	69fa      	ldr	r2, [r7, #28]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	da03      	bge.n	800b9b8 <lwip_recvfrom_udp_raw+0x10c>
 800b9b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b9b2:	8b3b      	ldrh	r3, [r7, #24]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d3cc      	bcc.n	800b952 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d01a      	beq.n	800b9f6 <lwip_recvfrom_udp_raw+0x14a>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d016      	beq.n	800b9f6 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d012      	beq.n	800b9f6 <lwip_recvfrom_udp_raw+0x14a>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00e      	beq.n	800b9f6 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6818      	ldr	r0, [r3, #0]
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f103 0108 	add.w	r1, r3, #8
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	4623      	mov	r3, r4
 800b9f2:	f7ff febb 	bl	800b76c <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d007      	beq.n	800ba14 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800ba08:	7d7b      	ldrb	r3, [r7, #21]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d102      	bne.n	800ba14 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7ff fb06 	bl	800b038 <netbuf_delete>
  }
  if (datagram_len) {
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	8b3a      	ldrh	r2, [r7, #24]
 800ba36:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	372c      	adds	r7, #44	; 0x2c
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd90      	pop	{r4, r7, pc}
 800ba42:	bf00      	nop
 800ba44:	0801d6e8 	.word	0x0801d6e8
 800ba48:	0801d88c 	.word	0x0801d88c
 800ba4c:	0801d73c 	.word	0x0801d73c
 800ba50:	0801d8b8 	.word	0x0801d8b8

0800ba54 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b096      	sub	sp, #88	; 0x58
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
 800ba60:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f7ff fbb8 	bl	800b1d8 <get_socket>
 800ba68:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800ba6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d102      	bne.n	800ba76 <lwip_recvfrom+0x22>
    return -1;
 800ba70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba74:	e078      	b.n	800bb68 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ba76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba80:	2b10      	cmp	r3, #16
 800ba82:	d112      	bne.n	800baaa <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	68b9      	ldr	r1, [r7, #8]
 800ba8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba8c:	f7ff fd5e 	bl	800b54c <lwip_recv_tcp>
 800ba90:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800ba92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	4b35      	ldr	r3, [pc, #212]	; (800bb70 <lwip_recvfrom+0x11c>)
 800ba9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baa0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800baa2:	f7ff fed1 	bl	800b848 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800baa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa8:	e05e      	b.n	800bb68 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800bab6:	2300      	movs	r3, #0
 800bab8:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800baba:	2300      	movs	r3, #0
 800babc:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800bac2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bac6:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800bac8:	2301      	movs	r3, #1
 800baca:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800bacc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bace:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800bad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <lwip_recvfrom+0x88>
 800bad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	e000      	b.n	800bade <lwip_recvfrom+0x8a>
 800badc:	2300      	movs	r3, #0
 800bade:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800bae0:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800bae4:	f107 0214 	add.w	r2, r7, #20
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	460b      	mov	r3, r1
 800baee:	6839      	ldr	r1, [r7, #0]
 800baf0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800baf2:	f7ff fedb 	bl	800b8ac <lwip_recvfrom_udp_raw>
 800baf6:	4603      	mov	r3, r0
 800baf8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800bafc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00e      	beq.n	800bb22 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800bb04:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff fa77 	bl	800affc <err_to_errno>
 800bb0e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800bb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <lwip_recvfrom+0xc8>
 800bb16:	4a17      	ldr	r2, [pc, #92]	; (800bb74 <lwip_recvfrom+0x120>)
 800bb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800bb1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb20:	e022      	b.n	800bb68 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800bb22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bb24:	461a      	mov	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	bf28      	it	cs
 800bb2c:	4613      	movcs	r3, r2
 800bb2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d206      	bcs.n	800bb44 <lwip_recvfrom+0xf0>
 800bb36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bb38:	461a      	mov	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	bf28      	it	cs
 800bb40:	4613      	movcs	r3, r2
 800bb42:	e001      	b.n	800bb48 <lwip_recvfrom+0xf4>
 800bb44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bb48:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800bb4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800bb50:	69ba      	ldr	r2, [r7, #24]
 800bb52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb54:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800bb56:	2300      	movs	r3, #0
 800bb58:	643b      	str	r3, [r7, #64]	; 0x40
 800bb5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <lwip_recvfrom+0x112>
 800bb60:	4a04      	ldr	r2, [pc, #16]	; (800bb74 <lwip_recvfrom+0x120>)
 800bb62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb64:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800bb66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3750      	adds	r7, #80	; 0x50
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	0801d8c4 	.word	0x0801d8c4
 800bb74:	200106a4 	.word	0x200106a4

0800bb78 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af02      	add	r7, sp, #8
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800bb86:	2300      	movs	r3, #0
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	68b9      	ldr	r1, [r7, #8]
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f7ff ff5d 	bl	800ba54 <lwip_recvfrom>
 800bb9a:	4603      	mov	r3, r0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b08a      	sub	sp, #40	; 0x28
 800bba8:	af02      	add	r7, sp, #8
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
 800bbb0:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f7ff fb10 	bl	800b1d8 <get_socket>
 800bbb8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d102      	bne.n	800bbc6 <lwip_send+0x22>
    return -1;
 800bbc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbc4:	e046      	b.n	800bc54 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbd0:	2b10      	cmp	r3, #16
 800bbd2:	d00b      	beq.n	800bbec <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	68b9      	ldr	r1, [r7, #8]
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f000 f83c 	bl	800bc60 <lwip_sendto>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	e033      	b.n	800bc54 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <lwip_send+0x56>
 800bbf6:	2203      	movs	r2, #3
 800bbf8:	e000      	b.n	800bbfc <lwip_send+0x58>
 800bbfa:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	105b      	asrs	r3, r3, #1
 800bc00:	b25b      	sxtb	r3, r3
 800bc02:	f003 0304 	and.w	r3, r3, #4
 800bc06:	b25b      	sxtb	r3, r3
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800bc0c:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	6818      	ldr	r0, [r3, #0]
 800bc16:	7efa      	ldrb	r2, [r7, #27]
 800bc18:	f107 0310 	add.w	r3, r7, #16
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	68b9      	ldr	r1, [r7, #8]
 800bc24:	f7fd fbfc 	bl	8009420 <netconn_write_partly>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800bc2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff f9e3 	bl	800affc <err_to_errno>
 800bc36:	6178      	str	r0, [r7, #20]
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d002      	beq.n	800bc44 <lwip_send+0xa0>
 800bc3e:	4a07      	ldr	r2, [pc, #28]	; (800bc5c <lwip_send+0xb8>)
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800bc44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <lwip_send+0xac>
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	e001      	b.n	800bc54 <lwip_send+0xb0>
 800bc50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3720      	adds	r7, #32
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	200106a4 	.word	0x200106a4

0800bc60 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08e      	sub	sp, #56	; 0x38
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
 800bc6c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f7ff fab2 	bl	800b1d8 <get_socket>
 800bc74:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d102      	bne.n	800bc82 <lwip_sendto+0x22>
    return -1;
 800bc7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc80:	e093      	b.n	800bdaa <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc8c:	2b10      	cmp	r3, #16
 800bc8e:	d107      	bne.n	800bca0 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	68b9      	ldr	r1, [r7, #8]
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f7ff ff84 	bl	800bba4 <lwip_send>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	e084      	b.n	800bdaa <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bca6:	d30a      	bcc.n	800bcbe <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800bca8:	235a      	movs	r3, #90	; 0x5a
 800bcaa:	623b      	str	r3, [r7, #32]
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d002      	beq.n	800bcb8 <lwip_sendto+0x58>
 800bcb2:	4a40      	ldr	r2, [pc, #256]	; (800bdb4 <lwip_sendto+0x154>)
 800bcb4:	6a3b      	ldr	r3, [r7, #32]
 800bcb6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bcb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcbc:	e075      	b.n	800bdaa <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800bcc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d102      	bne.n	800bcce <lwip_sendto+0x6e>
 800bcc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d023      	beq.n	800bd16 <lwip_sendto+0xb6>
 800bcce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcd0:	2b10      	cmp	r3, #16
 800bcd2:	d10b      	bne.n	800bcec <lwip_sendto+0x8c>
 800bcd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d008      	beq.n	800bcec <lwip_sendto+0x8c>
 800bcda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcdc:	785b      	ldrb	r3, [r3, #1]
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d104      	bne.n	800bcec <lwip_sendto+0x8c>
 800bce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce4:	f003 0303 	and.w	r3, r3, #3
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d014      	beq.n	800bd16 <lwip_sendto+0xb6>
 800bcec:	4b32      	ldr	r3, [pc, #200]	; (800bdb8 <lwip_sendto+0x158>)
 800bcee:	f240 6252 	movw	r2, #1618	; 0x652
 800bcf2:	4932      	ldr	r1, [pc, #200]	; (800bdbc <lwip_sendto+0x15c>)
 800bcf4:	4832      	ldr	r0, [pc, #200]	; (800bdc0 <lwip_sendto+0x160>)
 800bcf6:	f00f fde3 	bl	801b8c0 <iprintf>
 800bcfa:	f06f 000f 	mvn.w	r0, #15
 800bcfe:	f7ff f97d 	bl	800affc <err_to_errno>
 800bd02:	62b8      	str	r0, [r7, #40]	; 0x28
 800bd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d002      	beq.n	800bd10 <lwip_sendto+0xb0>
 800bd0a:	4a2a      	ldr	r2, [pc, #168]	; (800bdb4 <lwip_sendto+0x154>)
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	6013      	str	r3, [r2, #0]
 800bd10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd14:	e049      	b.n	800bdaa <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	617b      	str	r3, [r7, #20]
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800bd1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00a      	beq.n	800bd3a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800bd24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	61bb      	str	r3, [r7, #24]
 800bd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd2c:	885b      	ldrh	r3, [r3, #2]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f000 fc88 	bl	800c644 <lwip_htons>
 800bd34:	4603      	mov	r3, r0
 800bd36:	86bb      	strh	r3, [r7, #52]	; 0x34
 800bd38:	e003      	b.n	800bd42 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800bd3e:	2300      	movs	r3, #0
 800bd40:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800bd42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bd44:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800bd46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd48:	f107 0310 	add.w	r3, r7, #16
 800bd4c:	68b9      	ldr	r1, [r7, #8]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff f9ba 	bl	800b0c8 <netbuf_ref>
 800bd54:	4603      	mov	r3, r0
 800bd56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800bd5a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10a      	bne.n	800bd78 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f107 0210 	add.w	r2, r7, #16
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7fd fb29 	bl	80093c4 <netconn_send>
 800bd72:	4603      	mov	r3, r0
 800bd74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800bd78:	f107 0310 	add.w	r3, r7, #16
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7ff f97b 	bl	800b078 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800bd82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7ff f938 	bl	800affc <err_to_errno>
 800bd8c:	6278      	str	r0, [r7, #36]	; 0x24
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <lwip_sendto+0x13a>
 800bd94:	4a07      	ldr	r2, [pc, #28]	; (800bdb4 <lwip_sendto+0x154>)
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800bd9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d101      	bne.n	800bda6 <lwip_sendto+0x146>
 800bda2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bda4:	e001      	b.n	800bdaa <lwip_sendto+0x14a>
 800bda6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3738      	adds	r7, #56	; 0x38
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	200106a4 	.word	0x200106a4
 800bdb8:	0801d6e8 	.word	0x0801d6e8
 800bdbc:	0801d9c8 	.word	0x0801d9c8
 800bdc0:	0801d73c 	.word	0x0801d73c

0800bdc4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d009      	beq.n	800bdea <lwip_socket+0x26>
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	dc23      	bgt.n	800be24 <lwip_socket+0x60>
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d019      	beq.n	800be16 <lwip_socket+0x52>
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2b02      	cmp	r3, #2
 800bde6:	d009      	beq.n	800bdfc <lwip_socket+0x38>
 800bde8:	e01c      	b.n	800be24 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	4a22      	ldr	r2, [pc, #136]	; (800be78 <lwip_socket+0xb4>)
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	2040      	movs	r0, #64	; 0x40
 800bdf4:	f7fc ff60 	bl	8008cb8 <netconn_new_with_proto_and_callback>
 800bdf8:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800bdfa:	e019      	b.n	800be30 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b88      	cmp	r3, #136	; 0x88
 800be00:	d101      	bne.n	800be06 <lwip_socket+0x42>
 800be02:	2321      	movs	r3, #33	; 0x21
 800be04:	e000      	b.n	800be08 <lwip_socket+0x44>
 800be06:	2320      	movs	r3, #32
 800be08:	4a1b      	ldr	r2, [pc, #108]	; (800be78 <lwip_socket+0xb4>)
 800be0a:	2100      	movs	r1, #0
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7fc ff53 	bl	8008cb8 <netconn_new_with_proto_and_callback>
 800be12:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800be14:	e00c      	b.n	800be30 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800be16:	4a18      	ldr	r2, [pc, #96]	; (800be78 <lwip_socket+0xb4>)
 800be18:	2100      	movs	r1, #0
 800be1a:	2010      	movs	r0, #16
 800be1c:	f7fc ff4c 	bl	8008cb8 <netconn_new_with_proto_and_callback>
 800be20:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800be22:	e005      	b.n	800be30 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800be24:	4b15      	ldr	r3, [pc, #84]	; (800be7c <lwip_socket+0xb8>)
 800be26:	2216      	movs	r2, #22
 800be28:	601a      	str	r2, [r3, #0]
      return -1;
 800be2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be2e:	e01e      	b.n	800be6e <lwip_socket+0xaa>
  }

  if (!conn) {
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d105      	bne.n	800be42 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800be36:	4b11      	ldr	r3, [pc, #68]	; (800be7c <lwip_socket+0xb8>)
 800be38:	2269      	movs	r2, #105	; 0x69
 800be3a:	601a      	str	r2, [r3, #0]
    return -1;
 800be3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be40:	e015      	b.n	800be6e <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800be42:	2100      	movs	r1, #0
 800be44:	6978      	ldr	r0, [r7, #20]
 800be46:	f7ff f9df 	bl	800b208 <alloc_socket>
 800be4a:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be52:	d108      	bne.n	800be66 <lwip_socket+0xa2>
    netconn_delete(conn);
 800be54:	6978      	ldr	r0, [r7, #20]
 800be56:	f7fc ffcd 	bl	8008df4 <netconn_delete>
    set_errno(ENFILE);
 800be5a:	4b08      	ldr	r3, [pc, #32]	; (800be7c <lwip_socket+0xb8>)
 800be5c:	2217      	movs	r2, #23
 800be5e:	601a      	str	r2, [r3, #0]
    return -1;
 800be60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be64:	e003      	b.n	800be6e <lwip_socket+0xaa>
  }
  conn->socket = i;
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800be6c:	693b      	ldr	r3, [r7, #16]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3718      	adds	r7, #24
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	0800bf09 	.word	0x0800bf09
 800be7c:	200106a4 	.word	0x200106a4

0800be80 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800be80:	b480      	push	{r7}
 800be82:	b087      	sub	sp, #28
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	e02c      	b.n	800beee <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	695a      	ldr	r2, [r3, #20]
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	00db      	lsls	r3, r3, #3
 800be9c:	4413      	add	r3, r2
 800be9e:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d11e      	bne.n	800bee8 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d009      	beq.n	800bec4 <lwip_poll_should_wake+0x44>
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d001      	beq.n	800bec4 <lwip_poll_should_wake+0x44>
        return 1;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e01a      	b.n	800befa <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d009      	beq.n	800bede <lwip_poll_should_wake+0x5e>
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	f003 0302 	and.w	r3, r3, #2
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <lwip_poll_should_wake+0x5e>
        return 1;
 800beda:	2301      	movs	r3, #1
 800bedc:	e00d      	b.n	800befa <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e008      	b.n	800befa <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	3301      	adds	r3, #1
 800beec:	617b      	str	r3, [r7, #20]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	699b      	ldr	r3, [r3, #24]
 800bef2:	697a      	ldr	r2, [r7, #20]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d3cd      	bcc.n	800be94 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	371c      	adds	r7, #28
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
	...

0800bf08 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08a      	sub	sp, #40	; 0x28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	460b      	mov	r3, r1
 800bf12:	70fb      	strb	r3, [r7, #3]
 800bf14:	4613      	mov	r3, r2
 800bf16:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 80a4 	beq.w	800c068 <event_callback+0x160>
    s = conn->socket;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	da18      	bge.n	800bf5e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800bf2c:	f00d fdc8 	bl	8019ac0 <sys_arch_protect>
 800bf30:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	699b      	ldr	r3, [r3, #24]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	da0b      	bge.n	800bf52 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800bf3a:	78fb      	ldrb	r3, [r7, #3]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d104      	bne.n	800bf4a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	1e5a      	subs	r2, r3, #1
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800bf4a:	69f8      	ldr	r0, [r7, #28]
 800bf4c:	f00d fdc6 	bl	8019adc <sys_arch_unprotect>
        return;
 800bf50:	e08d      	b.n	800c06e <event_callback+0x166>
      }
      s = conn->socket;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	699b      	ldr	r3, [r3, #24]
 800bf56:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800bf58:	69f8      	ldr	r0, [r7, #28]
 800bf5a:	f00d fdbf 	bl	8019adc <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800bf5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf60:	f7ff f93a 	bl	800b1d8 <get_socket>
 800bf64:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d07f      	beq.n	800c06c <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800bf70:	f00d fda6 	bl	8019ac0 <sys_arch_protect>
 800bf74:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800bf76:	78fb      	ldrb	r3, [r7, #3]
 800bf78:	2b04      	cmp	r3, #4
 800bf7a:	d83e      	bhi.n	800bffa <event_callback+0xf2>
 800bf7c:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <event_callback+0x7c>)
 800bf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf82:	bf00      	nop
 800bf84:	0800bf99 	.word	0x0800bf99
 800bf88:	0800bfbb 	.word	0x0800bfbb
 800bf8c:	0800bfd3 	.word	0x0800bfd3
 800bf90:	0800bfe7 	.word	0x0800bfe7
 800bf94:	0800bff3 	.word	0x0800bff3
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	b21a      	sxth	r2, r3
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	dd2a      	ble.n	800c00a <event_callback+0x102>
        check_waiters = 0;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	623b      	str	r3, [r7, #32]
      }
      break;
 800bfb8:	e027      	b.n	800c00a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	b21a      	sxth	r2, r3
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	623b      	str	r3, [r7, #32]
      break;
 800bfd0:	e01c      	b.n	800c00c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	895b      	ldrh	r3, [r3, #10]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <event_callback+0xd6>
        check_waiters = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	815a      	strh	r2, [r3, #10]
      break;
 800bfe4:	e012      	b.n	800c00c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800bfec:	2300      	movs	r3, #0
 800bfee:	623b      	str	r3, [r7, #32]
      break;
 800bff0:	e00c      	b.n	800c00c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	2201      	movs	r2, #1
 800bff6:	819a      	strh	r2, [r3, #12]
      break;
 800bff8:	e008      	b.n	800c00c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800bffa:	4b1e      	ldr	r3, [pc, #120]	; (800c074 <event_callback+0x16c>)
 800bffc:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800c000:	491d      	ldr	r1, [pc, #116]	; (800c078 <event_callback+0x170>)
 800c002:	481e      	ldr	r0, [pc, #120]	; (800c07c <event_callback+0x174>)
 800c004:	f00f fc5c 	bl	801b8c0 <iprintf>
      break;
 800c008:	e000      	b.n	800c00c <event_callback+0x104>
      break;
 800c00a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	7b9b      	ldrb	r3, [r3, #14]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d025      	beq.n	800c060 <event_callback+0x158>
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d022      	beq.n	800c060 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	bfcc      	ite	gt
 800c024:	2301      	movgt	r3, #1
 800c026:	2300      	movle	r3, #0
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	895b      	ldrh	r3, [r3, #10]
 800c030:	2b00      	cmp	r3, #0
 800c032:	bf14      	ite	ne
 800c034:	2301      	movne	r3, #1
 800c036:	2300      	moveq	r3, #0
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	899b      	ldrh	r3, [r3, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	bf14      	ite	ne
 800c044:	2301      	movne	r3, #1
 800c046:	2300      	moveq	r3, #0
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800c04c:	69f8      	ldr	r0, [r7, #28]
 800c04e:	f00d fd45 	bl	8019adc <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	6979      	ldr	r1, [r7, #20]
 800c058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c05a:	f000 f811 	bl	800c080 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c05e:	e006      	b.n	800c06e <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c060:	69f8      	ldr	r0, [r7, #28]
 800c062:	f00d fd3b 	bl	8019adc <sys_arch_unprotect>
 800c066:	e002      	b.n	800c06e <event_callback+0x166>
    return;
 800c068:	bf00      	nop
 800c06a:	e000      	b.n	800c06e <event_callback+0x166>
      return;
 800c06c:	bf00      	nop
  }
  done_socket(sock);
}
 800c06e:	3728      	adds	r7, #40	; 0x28
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	0801d6e8 	.word	0x0801d6e8
 800c078:	0801da64 	.word	0x0801da64
 800c07c:	0801d73c 	.word	0x0801d73c

0800c080 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af02      	add	r7, sp, #8
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c08e:	4b3e      	ldr	r3, [pc, #248]	; (800c188 <select_check_waiters+0x108>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	617b      	str	r3, [r7, #20]
 800c094:	e06f      	b.n	800c176 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	69db      	ldr	r3, [r3, #28]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d168      	bne.n	800c170 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	695b      	ldr	r3, [r3, #20]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d009      	beq.n	800c0be <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	68f9      	ldr	r1, [r7, #12]
 800c0b4:	6978      	ldr	r0, [r7, #20]
 800c0b6:	f7ff fee3 	bl	800be80 <lwip_poll_should_wake>
 800c0ba:	6138      	str	r0, [r7, #16]
 800c0bc:	e04d      	b.n	800c15a <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d014      	beq.n	800c0ee <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d010      	beq.n	800c0ee <select_check_waiters+0x6e>
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	0952      	lsrs	r2, r2, #5
 800c0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	f002 021f 	and.w	r2, r2, #31
 800c0de:	2101      	movs	r1, #1
 800c0e0:	fa01 f202 	lsl.w	r2, r1, r2
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <select_check_waiters+0x6e>
            do_signal = 1;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d017      	beq.n	800c124 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d114      	bne.n	800c124 <select_check_waiters+0xa4>
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d010      	beq.n	800c124 <select_check_waiters+0xa4>
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	0952      	lsrs	r2, r2, #5
 800c10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	f002 021f 	and.w	r2, r2, #31
 800c114:	2101      	movs	r1, #1
 800c116:	fa01 f202 	lsl.w	r2, r1, r2
 800c11a:	4013      	ands	r3, r2
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <select_check_waiters+0xa4>
            do_signal = 1;
 800c120:	2301      	movs	r3, #1
 800c122:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d017      	beq.n	800c15a <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d114      	bne.n	800c15a <select_check_waiters+0xda>
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d010      	beq.n	800c15a <select_check_waiters+0xda>
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	0952      	lsrs	r2, r2, #5
 800c140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	f002 021f 	and.w	r2, r2, #31
 800c14a:	2101      	movs	r1, #1
 800c14c:	fa01 f202 	lsl.w	r2, r1, r2
 800c150:	4013      	ands	r3, r2
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <select_check_waiters+0xda>
            do_signal = 1;
 800c156:	2301      	movs	r3, #1
 800c158:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d007      	beq.n	800c170 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	2201      	movs	r2, #1
 800c164:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	3320      	adds	r3, #32
 800c16a:	4618      	mov	r0, r3
 800c16c:	f00d fc04 	bl	8019978 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	617b      	str	r3, [r7, #20]
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d18c      	bne.n	800c096 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800c17c:	bf00      	nop
 800c17e:	bf00      	nop
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20008a8c 	.word	0x20008a8c

0800c18c <lwip_ioctl>:
  return err;
}

int
lwip_ioctl(int s, long cmd, void *argp)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b08c      	sub	sp, #48	; 0x30
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f7ff f81d 	bl	800b1d8 <get_socket>
 800c19e:	6278      	str	r0, [r7, #36]	; 0x24
  u8_t val;
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
 800c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d102      	bne.n	800c1ac <lwip_ioctl+0x20>
    return -1;
 800c1a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1aa:	e089      	b.n	800c2c0 <lwip_ioctl+0x134>
  }

  switch (cmd) {
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	4a46      	ldr	r2, [pc, #280]	; (800c2c8 <lwip_ioctl+0x13c>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d048      	beq.n	800c246 <lwip_ioctl+0xba>
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	4a45      	ldr	r2, [pc, #276]	; (800c2cc <lwip_ioctl+0x140>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d176      	bne.n	800c2aa <lwip_ioctl+0x11e>
#if LWIP_SO_RCVBUF || LWIP_FIONREAD_LINUXMODE
    case FIONREAD:
      if (!argp) {
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10a      	bne.n	800c1d8 <lwip_ioctl+0x4c>
        sock_set_errno(sock, EINVAL);
 800c1c2:	2316      	movs	r3, #22
 800c1c4:	61bb      	str	r3, [r7, #24]
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d002      	beq.n	800c1d2 <lwip_ioctl+0x46>
 800c1cc:	4a40      	ldr	r2, [pc, #256]	; (800c2d0 <lwip_ioctl+0x144>)
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	6013      	str	r3, [r2, #0]
        done_socket(sock);
        return -1;
 800c1d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1d6:	e073      	b.n	800c2c0 <lwip_ioctl+0x134>
      }
#endif /* LWIP_FIONREAD_LINUXMODE */

#if LWIP_SO_RCVBUF
      /* we come here if either LWIP_FIONREAD_LINUXMODE==0 or this is a TCP socket */
      SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
 800c1d8:	f00d fc72 	bl	8019ac0 <sys_arch_protect>
 800c1dc:	6238      	str	r0, [r7, #32]
 800c1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	6a1b      	ldr	r3, [r3, #32]
 800c1e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1e6:	6a38      	ldr	r0, [r7, #32]
 800c1e8:	f00d fc78 	bl	8019adc <sys_arch_unprotect>
      if (recv_avail < 0) {
 800c1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	da01      	bge.n	800c1f6 <lwip_ioctl+0x6a>
        recv_avail = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Check if there is data left from the last recv operation. /maq 041215 */
      if (sock->lastdata.netbuf) {
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d016      	beq.n	800c22c <lwip_ioctl+0xa0>
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c208:	2b10      	cmp	r3, #16
 800c20a:	d107      	bne.n	800c21c <lwip_ioctl+0x90>
          recv_avail += sock->lastdata.pbuf->tot_len;
 800c20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	891b      	ldrh	r3, [r3, #8]
 800c212:	461a      	mov	r2, r3
 800c214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c216:	4413      	add	r3, r2
 800c218:	62bb      	str	r3, [r7, #40]	; 0x28
 800c21a:	e007      	b.n	800c22c <lwip_ioctl+0xa0>
        } else {
          recv_avail += sock->lastdata.netbuf->p->tot_len;
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	891b      	ldrh	r3, [r3, #8]
 800c224:	461a      	mov	r2, r3
 800c226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c228:	4413      	add	r3, r2
 800c22a:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
      *((int *)argp) = recv_avail;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c230:	601a      	str	r2, [r3, #0]

      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONREAD, %p) = %"U16_F"\n", s, argp, *((u16_t *)argp)));
      sock_set_errno(sock, 0);
 800c232:	2300      	movs	r3, #0
 800c234:	61fb      	str	r3, [r7, #28]
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <lwip_ioctl+0xb6>
 800c23c:	4a24      	ldr	r2, [pc, #144]	; (800c2d0 <lwip_ioctl+0x144>)
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return 0;
 800c242:	2300      	movs	r3, #0
 800c244:	e03c      	b.n	800c2c0 <lwip_ioctl+0x134>
      break;
#endif /* LWIP_SO_RCVBUF */
#endif /* LWIP_SO_RCVBUF || LWIP_FIONREAD_LINUXMODE */

    case (long)FIONBIO:
      val = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (argp && *(int *)argp) {
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d006      	beq.n	800c260 <lwip_ioctl+0xd4>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <lwip_ioctl+0xd4>
        val = 1;
 800c25a:	2301      	movs	r3, #1
 800c25c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
      netconn_set_nonblocking(sock->conn, val);
 800c260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <lwip_ioctl+0xf4>
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f042 0202 	orr.w	r2, r2, #2
 800c278:	b2d2      	uxtb	r2, r2
 800c27a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c27e:	e00a      	b.n	800c296 <lwip_ioctl+0x10a>
 800c280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f022 0202 	bic.w	r2, r2, #2
 800c290:	b2d2      	uxtb	r2, r2
 800c292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
      sock_set_errno(sock, 0);
 800c296:	2300      	movs	r3, #0
 800c298:	617b      	str	r3, [r7, #20]
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <lwip_ioctl+0x11a>
 800c2a0:	4a0b      	ldr	r2, [pc, #44]	; (800c2d0 <lwip_ioctl+0x144>)
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return 0;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e00a      	b.n	800c2c0 <lwip_ioctl+0x134>

    default:
      break;
 800c2aa:	bf00      	nop
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
 800c2ac:	2326      	movs	r3, #38	; 0x26
 800c2ae:	613b      	str	r3, [r7, #16]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d002      	beq.n	800c2bc <lwip_ioctl+0x130>
 800c2b6:	4a06      	ldr	r2, [pc, #24]	; (800c2d0 <lwip_ioctl+0x144>)
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return -1;
 800c2bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3730      	adds	r7, #48	; 0x30
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	8004667e 	.word	0x8004667e
 800c2cc:	4004667f 	.word	0x4004667f
 800c2d0:	200106a4 	.word	0x200106a4

0800c2d4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c2de:	f008 f9bf 	bl	8014660 <sys_timeouts_sleeptime>
 800c2e2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2ea:	d10b      	bne.n	800c304 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c2ec:	4813      	ldr	r0, [pc, #76]	; (800c33c <tcpip_timeouts_mbox_fetch+0x68>)
 800c2ee:	f00d fbb4 	bl	8019a5a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f00d fa6c 	bl	80197d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c2fc:	480f      	ldr	r0, [pc, #60]	; (800c33c <tcpip_timeouts_mbox_fetch+0x68>)
 800c2fe:	f00d fb9d 	bl	8019a3c <sys_mutex_lock>
    return;
 800c302:	e018      	b.n	800c336 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d102      	bne.n	800c310 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c30a:	f008 f96f 	bl	80145ec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c30e:	e7e6      	b.n	800c2de <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c310:	480a      	ldr	r0, [pc, #40]	; (800c33c <tcpip_timeouts_mbox_fetch+0x68>)
 800c312:	f00d fba2 	bl	8019a5a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f00d fa5a 	bl	80197d4 <sys_arch_mbox_fetch>
 800c320:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c322:	4806      	ldr	r0, [pc, #24]	; (800c33c <tcpip_timeouts_mbox_fetch+0x68>)
 800c324:	f00d fb8a 	bl	8019a3c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c32e:	d102      	bne.n	800c336 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c330:	f008 f95c 	bl	80145ec <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c334:	e7d3      	b.n	800c2de <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	2000cf08 	.word	0x2000cf08

0800c340 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c348:	4810      	ldr	r0, [pc, #64]	; (800c38c <tcpip_thread+0x4c>)
 800c34a:	f00d fb77 	bl	8019a3c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c34e:	4b10      	ldr	r3, [pc, #64]	; (800c390 <tcpip_thread+0x50>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d005      	beq.n	800c362 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c356:	4b0e      	ldr	r3, [pc, #56]	; (800c390 <tcpip_thread+0x50>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a0e      	ldr	r2, [pc, #56]	; (800c394 <tcpip_thread+0x54>)
 800c35c:	6812      	ldr	r2, [r2, #0]
 800c35e:	4610      	mov	r0, r2
 800c360:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c362:	f107 030c 	add.w	r3, r7, #12
 800c366:	4619      	mov	r1, r3
 800c368:	480b      	ldr	r0, [pc, #44]	; (800c398 <tcpip_thread+0x58>)
 800c36a:	f7ff ffb3 	bl	800c2d4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d106      	bne.n	800c382 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c374:	4b09      	ldr	r3, [pc, #36]	; (800c39c <tcpip_thread+0x5c>)
 800c376:	2291      	movs	r2, #145	; 0x91
 800c378:	4909      	ldr	r1, [pc, #36]	; (800c3a0 <tcpip_thread+0x60>)
 800c37a:	480a      	ldr	r0, [pc, #40]	; (800c3a4 <tcpip_thread+0x64>)
 800c37c:	f00f faa0 	bl	801b8c0 <iprintf>
      continue;
 800c380:	e003      	b.n	800c38a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	4618      	mov	r0, r3
 800c386:	f000 f80f 	bl	800c3a8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c38a:	e7ea      	b.n	800c362 <tcpip_thread+0x22>
 800c38c:	2000cf08 	.word	0x2000cf08
 800c390:	20008a90 	.word	0x20008a90
 800c394:	20008a94 	.word	0x20008a94
 800c398:	20008a98 	.word	0x20008a98
 800c39c:	0801dab8 	.word	0x0801dab8
 800c3a0:	0801dae8 	.word	0x0801dae8
 800c3a4:	0801db08 	.word	0x0801db08

0800c3a8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d026      	beq.n	800c406 <tcpip_thread_handle_msg+0x5e>
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	dc2b      	bgt.n	800c414 <tcpip_thread_handle_msg+0x6c>
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <tcpip_thread_handle_msg+0x1e>
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d015      	beq.n	800c3f0 <tcpip_thread_handle_msg+0x48>
 800c3c4:	e026      	b.n	800c414 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	6850      	ldr	r0, [r2, #4]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	6892      	ldr	r2, [r2, #8]
 800c3d2:	4611      	mov	r1, r2
 800c3d4:	4798      	blx	r3
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d004      	beq.n	800c3e6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f001 fd19 	bl	800de18 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c3e6:	6879      	ldr	r1, [r7, #4]
 800c3e8:	2009      	movs	r0, #9
 800c3ea:	f000 fe33 	bl	800d054 <memp_free>
      break;
 800c3ee:	e018      	b.n	800c422 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	6892      	ldr	r2, [r2, #8]
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c3fc:	6879      	ldr	r1, [r7, #4]
 800c3fe:	2008      	movs	r0, #8
 800c400:	f000 fe28 	bl	800d054 <memp_free>
      break;
 800c404:	e00d      	b.n	800c422 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	6892      	ldr	r2, [r2, #8]
 800c40e:	4610      	mov	r0, r2
 800c410:	4798      	blx	r3
      break;
 800c412:	e006      	b.n	800c422 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c414:	4b05      	ldr	r3, [pc, #20]	; (800c42c <tcpip_thread_handle_msg+0x84>)
 800c416:	22cf      	movs	r2, #207	; 0xcf
 800c418:	4905      	ldr	r1, [pc, #20]	; (800c430 <tcpip_thread_handle_msg+0x88>)
 800c41a:	4806      	ldr	r0, [pc, #24]	; (800c434 <tcpip_thread_handle_msg+0x8c>)
 800c41c:	f00f fa50 	bl	801b8c0 <iprintf>
      break;
 800c420:	bf00      	nop
  }
}
 800c422:	bf00      	nop
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	0801dab8 	.word	0x0801dab8
 800c430:	0801dae8 	.word	0x0801dae8
 800c434:	0801db08 	.word	0x0801db08

0800c438 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b086      	sub	sp, #24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c444:	481a      	ldr	r0, [pc, #104]	; (800c4b0 <tcpip_inpkt+0x78>)
 800c446:	f00d fa20 	bl	801988a <sys_mbox_valid>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d105      	bne.n	800c45c <tcpip_inpkt+0x24>
 800c450:	4b18      	ldr	r3, [pc, #96]	; (800c4b4 <tcpip_inpkt+0x7c>)
 800c452:	22fc      	movs	r2, #252	; 0xfc
 800c454:	4918      	ldr	r1, [pc, #96]	; (800c4b8 <tcpip_inpkt+0x80>)
 800c456:	4819      	ldr	r0, [pc, #100]	; (800c4bc <tcpip_inpkt+0x84>)
 800c458:	f00f fa32 	bl	801b8c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c45c:	2009      	movs	r0, #9
 800c45e:	f000 fda7 	bl	800cfb0 <memp_malloc>
 800c462:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d102      	bne.n	800c470 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c46a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c46e:	e01a      	b.n	800c4a6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	2200      	movs	r2, #0
 800c474:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c488:	6979      	ldr	r1, [r7, #20]
 800c48a:	4809      	ldr	r0, [pc, #36]	; (800c4b0 <tcpip_inpkt+0x78>)
 800c48c:	f00d f988 	bl	80197a0 <sys_mbox_trypost>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d006      	beq.n	800c4a4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c496:	6979      	ldr	r1, [r7, #20]
 800c498:	2009      	movs	r0, #9
 800c49a:	f000 fddb 	bl	800d054 <memp_free>
    return ERR_MEM;
 800c49e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4a2:	e000      	b.n	800c4a6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c4a4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20008a98 	.word	0x20008a98
 800c4b4:	0801dab8 	.word	0x0801dab8
 800c4b8:	0801db30 	.word	0x0801db30
 800c4bc:	0801db08 	.word	0x0801db08

0800c4c0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4d0:	f003 0318 	and.w	r3, r3, #24
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d006      	beq.n	800c4e6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c4d8:	4a08      	ldr	r2, [pc, #32]	; (800c4fc <tcpip_input+0x3c>)
 800c4da:	6839      	ldr	r1, [r7, #0]
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7ff ffab 	bl	800c438 <tcpip_inpkt>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	e005      	b.n	800c4f2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c4e6:	4a06      	ldr	r2, [pc, #24]	; (800c500 <tcpip_input+0x40>)
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f7ff ffa4 	bl	800c438 <tcpip_inpkt>
 800c4f0:	4603      	mov	r3, r0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	0801958d 	.word	0x0801958d
 800c500:	080181e9 	.word	0x080181e9

0800c504 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c50e:	4819      	ldr	r0, [pc, #100]	; (800c574 <tcpip_try_callback+0x70>)
 800c510:	f00d f9bb 	bl	801988a <sys_mbox_valid>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d106      	bne.n	800c528 <tcpip_try_callback+0x24>
 800c51a:	4b17      	ldr	r3, [pc, #92]	; (800c578 <tcpip_try_callback+0x74>)
 800c51c:	f240 125d 	movw	r2, #349	; 0x15d
 800c520:	4916      	ldr	r1, [pc, #88]	; (800c57c <tcpip_try_callback+0x78>)
 800c522:	4817      	ldr	r0, [pc, #92]	; (800c580 <tcpip_try_callback+0x7c>)
 800c524:	f00f f9cc 	bl	801b8c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c528:	2008      	movs	r0, #8
 800c52a:	f000 fd41 	bl	800cfb0 <memp_malloc>
 800c52e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d102      	bne.n	800c53c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c53a:	e017      	b.n	800c56c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2201      	movs	r2, #1
 800c540:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c54e:	68f9      	ldr	r1, [r7, #12]
 800c550:	4808      	ldr	r0, [pc, #32]	; (800c574 <tcpip_try_callback+0x70>)
 800c552:	f00d f925 	bl	80197a0 <sys_mbox_trypost>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d006      	beq.n	800c56a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c55c:	68f9      	ldr	r1, [r7, #12]
 800c55e:	2008      	movs	r0, #8
 800c560:	f000 fd78 	bl	800d054 <memp_free>
    return ERR_MEM;
 800c564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c568:	e000      	b.n	800c56c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20008a98 	.word	0x20008a98
 800c578:	0801dab8 	.word	0x0801dab8
 800c57c:	0801db30 	.word	0x0801db30
 800c580:	0801db08 	.word	0x0801db08

0800c584 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c590:	4806      	ldr	r0, [pc, #24]	; (800c5ac <tcpip_send_msg_wait_sem+0x28>)
 800c592:	f00d fa53 	bl	8019a3c <sys_mutex_lock>
  fn(apimsg);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	68b8      	ldr	r0, [r7, #8]
 800c59a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c59c:	4803      	ldr	r0, [pc, #12]	; (800c5ac <tcpip_send_msg_wait_sem+0x28>)
 800c59e:	f00d fa5c 	bl	8019a5a <sys_mutex_unlock>
  return ERR_OK;
 800c5a2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	2000cf08 	.word	0x2000cf08

0800c5b0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c5ba:	f000 f871 	bl	800c6a0 <lwip_init>

  tcpip_init_done = initfunc;
 800c5be:	4a17      	ldr	r2, [pc, #92]	; (800c61c <tcpip_init+0x6c>)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c5c4:	4a16      	ldr	r2, [pc, #88]	; (800c620 <tcpip_init+0x70>)
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c5ca:	2106      	movs	r1, #6
 800c5cc:	4815      	ldr	r0, [pc, #84]	; (800c624 <tcpip_init+0x74>)
 800c5ce:	f00d f8b3 	bl	8019738 <sys_mbox_new>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d006      	beq.n	800c5e6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c5d8:	4b13      	ldr	r3, [pc, #76]	; (800c628 <tcpip_init+0x78>)
 800c5da:	f240 2261 	movw	r2, #609	; 0x261
 800c5de:	4913      	ldr	r1, [pc, #76]	; (800c62c <tcpip_init+0x7c>)
 800c5e0:	4813      	ldr	r0, [pc, #76]	; (800c630 <tcpip_init+0x80>)
 800c5e2:	f00f f96d 	bl	801b8c0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c5e6:	4813      	ldr	r0, [pc, #76]	; (800c634 <tcpip_init+0x84>)
 800c5e8:	f00d fa0c 	bl	8019a04 <sys_mutex_new>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d006      	beq.n	800c600 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c5f2:	4b0d      	ldr	r3, [pc, #52]	; (800c628 <tcpip_init+0x78>)
 800c5f4:	f240 2265 	movw	r2, #613	; 0x265
 800c5f8:	490f      	ldr	r1, [pc, #60]	; (800c638 <tcpip_init+0x88>)
 800c5fa:	480d      	ldr	r0, [pc, #52]	; (800c630 <tcpip_init+0x80>)
 800c5fc:	f00f f960 	bl	801b8c0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c600:	2300      	movs	r3, #0
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c608:	2200      	movs	r2, #0
 800c60a:	490c      	ldr	r1, [pc, #48]	; (800c63c <tcpip_init+0x8c>)
 800c60c:	480c      	ldr	r0, [pc, #48]	; (800c640 <tcpip_init+0x90>)
 800c60e:	f00d fa31 	bl	8019a74 <sys_thread_new>
}
 800c612:	bf00      	nop
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	20008a90 	.word	0x20008a90
 800c620:	20008a94 	.word	0x20008a94
 800c624:	20008a98 	.word	0x20008a98
 800c628:	0801dab8 	.word	0x0801dab8
 800c62c:	0801db40 	.word	0x0801db40
 800c630:	0801db08 	.word	0x0801db08
 800c634:	2000cf08 	.word	0x2000cf08
 800c638:	0801db64 	.word	0x0801db64
 800c63c:	0800c341 	.word	0x0800c341
 800c640:	0801db88 	.word	0x0801db88

0800c644 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	4603      	mov	r3, r0
 800c64c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c64e:	88fb      	ldrh	r3, [r7, #6]
 800c650:	021b      	lsls	r3, r3, #8
 800c652:	b21a      	sxth	r2, r3
 800c654:	88fb      	ldrh	r3, [r7, #6]
 800c656:	0a1b      	lsrs	r3, r3, #8
 800c658:	b29b      	uxth	r3, r3
 800c65a:	b21b      	sxth	r3, r3
 800c65c:	4313      	orrs	r3, r2
 800c65e:	b21b      	sxth	r3, r3
 800c660:	b29b      	uxth	r3, r3
}
 800c662:	4618      	mov	r0, r3
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	061a      	lsls	r2, r3, #24
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	021b      	lsls	r3, r3, #8
 800c67e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c682:	431a      	orrs	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	0a1b      	lsrs	r3, r3, #8
 800c688:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	0e1b      	lsrs	r3, r3, #24
 800c692:	4313      	orrs	r3, r2
}
 800c694:	4618      	mov	r0, r3
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c6aa:	f00d f99d 	bl	80199e8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c6ae:	f000 f8d5 	bl	800c85c <mem_init>
  memp_init();
 800c6b2:	f000 fc31 	bl	800cf18 <memp_init>
  pbuf_init();
  netif_init();
 800c6b6:	f000 fcf7 	bl	800d0a8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c6ba:	f008 f809 	bl	80146d0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c6be:	f001 fe55 	bl	800e36c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c6c2:	f007 ff4b 	bl	801455c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c6c6:	bf00      	nop
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c6da:	4b05      	ldr	r3, [pc, #20]	; (800c6f0 <ptr_to_mem+0x20>)
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	88fb      	ldrh	r3, [r7, #6]
 800c6e0:	4413      	add	r3, r2
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	370c      	adds	r7, #12
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	20008a9c 	.word	0x20008a9c

0800c6f4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c6fc:	4b05      	ldr	r3, [pc, #20]	; (800c714 <mem_to_ptr+0x20>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	1ad3      	subs	r3, r2, r3
 800c704:	b29b      	uxth	r3, r3
}
 800c706:	4618      	mov	r0, r3
 800c708:	370c      	adds	r7, #12
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	20008a9c 	.word	0x20008a9c

0800c718 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c718:	b590      	push	{r4, r7, lr}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c720:	4b45      	ldr	r3, [pc, #276]	; (800c838 <plug_holes+0x120>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	429a      	cmp	r2, r3
 800c728:	d206      	bcs.n	800c738 <plug_holes+0x20>
 800c72a:	4b44      	ldr	r3, [pc, #272]	; (800c83c <plug_holes+0x124>)
 800c72c:	f240 12df 	movw	r2, #479	; 0x1df
 800c730:	4943      	ldr	r1, [pc, #268]	; (800c840 <plug_holes+0x128>)
 800c732:	4844      	ldr	r0, [pc, #272]	; (800c844 <plug_holes+0x12c>)
 800c734:	f00f f8c4 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c738:	4b43      	ldr	r3, [pc, #268]	; (800c848 <plug_holes+0x130>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d306      	bcc.n	800c750 <plug_holes+0x38>
 800c742:	4b3e      	ldr	r3, [pc, #248]	; (800c83c <plug_holes+0x124>)
 800c744:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c748:	4940      	ldr	r1, [pc, #256]	; (800c84c <plug_holes+0x134>)
 800c74a:	483e      	ldr	r0, [pc, #248]	; (800c844 <plug_holes+0x12c>)
 800c74c:	f00f f8b8 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	791b      	ldrb	r3, [r3, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d006      	beq.n	800c766 <plug_holes+0x4e>
 800c758:	4b38      	ldr	r3, [pc, #224]	; (800c83c <plug_holes+0x124>)
 800c75a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c75e:	493c      	ldr	r1, [pc, #240]	; (800c850 <plug_holes+0x138>)
 800c760:	4838      	ldr	r0, [pc, #224]	; (800c844 <plug_holes+0x12c>)
 800c762:	f00f f8ad 	bl	801b8c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	881b      	ldrh	r3, [r3, #0]
 800c76a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c76e:	d906      	bls.n	800c77e <plug_holes+0x66>
 800c770:	4b32      	ldr	r3, [pc, #200]	; (800c83c <plug_holes+0x124>)
 800c772:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c776:	4937      	ldr	r1, [pc, #220]	; (800c854 <plug_holes+0x13c>)
 800c778:	4832      	ldr	r0, [pc, #200]	; (800c844 <plug_holes+0x12c>)
 800c77a:	f00f f8a1 	bl	801b8c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff ffa4 	bl	800c6d0 <ptr_to_mem>
 800c788:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d024      	beq.n	800c7dc <plug_holes+0xc4>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	791b      	ldrb	r3, [r3, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d120      	bne.n	800c7dc <plug_holes+0xc4>
 800c79a:	4b2b      	ldr	r3, [pc, #172]	; (800c848 <plug_holes+0x130>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68fa      	ldr	r2, [r7, #12]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d01b      	beq.n	800c7dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c7a4:	4b2c      	ldr	r3, [pc, #176]	; (800c858 <plug_holes+0x140>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d102      	bne.n	800c7b4 <plug_holes+0x9c>
      lfree = mem;
 800c7ae:	4a2a      	ldr	r2, [pc, #168]	; (800c858 <plug_holes+0x140>)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	881a      	ldrh	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7c4:	d00a      	beq.n	800c7dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	881b      	ldrh	r3, [r3, #0]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7ff ff80 	bl	800c6d0 <ptr_to_mem>
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff ff8e 	bl	800c6f4 <mem_to_ptr>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	885b      	ldrh	r3, [r3, #2]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7ff ff75 	bl	800c6d0 <ptr_to_mem>
 800c7e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d01f      	beq.n	800c830 <plug_holes+0x118>
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	791b      	ldrb	r3, [r3, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d11b      	bne.n	800c830 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c7f8:	4b17      	ldr	r3, [pc, #92]	; (800c858 <plug_holes+0x140>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d102      	bne.n	800c808 <plug_holes+0xf0>
      lfree = pmem;
 800c802:	4a15      	ldr	r2, [pc, #84]	; (800c858 <plug_holes+0x140>)
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	881a      	ldrh	r2, [r3, #0]
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	881b      	ldrh	r3, [r3, #0]
 800c814:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c818:	d00a      	beq.n	800c830 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	881b      	ldrh	r3, [r3, #0]
 800c81e:	4618      	mov	r0, r3
 800c820:	f7ff ff56 	bl	800c6d0 <ptr_to_mem>
 800c824:	4604      	mov	r4, r0
 800c826:	68b8      	ldr	r0, [r7, #8]
 800c828:	f7ff ff64 	bl	800c6f4 <mem_to_ptr>
 800c82c:	4603      	mov	r3, r0
 800c82e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c830:	bf00      	nop
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	bd90      	pop	{r4, r7, pc}
 800c838:	20008a9c 	.word	0x20008a9c
 800c83c:	0801db98 	.word	0x0801db98
 800c840:	0801dbc8 	.word	0x0801dbc8
 800c844:	0801dbe0 	.word	0x0801dbe0
 800c848:	20008aa0 	.word	0x20008aa0
 800c84c:	0801dc08 	.word	0x0801dc08
 800c850:	0801dc24 	.word	0x0801dc24
 800c854:	0801dc40 	.word	0x0801dc40
 800c858:	20008aa8 	.word	0x20008aa8

0800c85c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c862:	4b1f      	ldr	r3, [pc, #124]	; (800c8e0 <mem_init+0x84>)
 800c864:	3303      	adds	r3, #3
 800c866:	f023 0303 	bic.w	r3, r3, #3
 800c86a:	461a      	mov	r2, r3
 800c86c:	4b1d      	ldr	r3, [pc, #116]	; (800c8e4 <mem_init+0x88>)
 800c86e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c870:	4b1c      	ldr	r3, [pc, #112]	; (800c8e4 <mem_init+0x88>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c87c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c88a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c88e:	f7ff ff1f 	bl	800c6d0 <ptr_to_mem>
 800c892:	4603      	mov	r3, r0
 800c894:	4a14      	ldr	r2, [pc, #80]	; (800c8e8 <mem_init+0x8c>)
 800c896:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c898:	4b13      	ldr	r3, [pc, #76]	; (800c8e8 <mem_init+0x8c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2201      	movs	r2, #1
 800c89e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c8a0:	4b11      	ldr	r3, [pc, #68]	; (800c8e8 <mem_init+0x8c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c8a8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c8aa:	4b0f      	ldr	r3, [pc, #60]	; (800c8e8 <mem_init+0x8c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c8b2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c8b4:	4b0b      	ldr	r3, [pc, #44]	; (800c8e4 <mem_init+0x88>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a0c      	ldr	r2, [pc, #48]	; (800c8ec <mem_init+0x90>)
 800c8ba:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c8bc:	480c      	ldr	r0, [pc, #48]	; (800c8f0 <mem_init+0x94>)
 800c8be:	f00d f8a1 	bl	8019a04 <sys_mutex_new>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d006      	beq.n	800c8d6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c8c8:	4b0a      	ldr	r3, [pc, #40]	; (800c8f4 <mem_init+0x98>)
 800c8ca:	f240 221f 	movw	r2, #543	; 0x21f
 800c8ce:	490a      	ldr	r1, [pc, #40]	; (800c8f8 <mem_init+0x9c>)
 800c8d0:	480a      	ldr	r0, [pc, #40]	; (800c8fc <mem_init+0xa0>)
 800c8d2:	f00e fff5 	bl	801b8c0 <iprintf>
  }
}
 800c8d6:	bf00      	nop
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	2000cf24 	.word	0x2000cf24
 800c8e4:	20008a9c 	.word	0x20008a9c
 800c8e8:	20008aa0 	.word	0x20008aa0
 800c8ec:	20008aa8 	.word	0x20008aa8
 800c8f0:	20008aa4 	.word	0x20008aa4
 800c8f4:	0801db98 	.word	0x0801db98
 800c8f8:	0801dc6c 	.word	0x0801dc6c
 800c8fc:	0801dbe0 	.word	0x0801dbe0

0800c900 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7ff fef3 	bl	800c6f4 <mem_to_ptr>
 800c90e:	4603      	mov	r3, r0
 800c910:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	881b      	ldrh	r3, [r3, #0]
 800c916:	4618      	mov	r0, r3
 800c918:	f7ff feda 	bl	800c6d0 <ptr_to_mem>
 800c91c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	885b      	ldrh	r3, [r3, #2]
 800c922:	4618      	mov	r0, r3
 800c924:	f7ff fed4 	bl	800c6d0 <ptr_to_mem>
 800c928:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	881b      	ldrh	r3, [r3, #0]
 800c92e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c932:	d818      	bhi.n	800c966 <mem_link_valid+0x66>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	885b      	ldrh	r3, [r3, #2]
 800c938:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c93c:	d813      	bhi.n	800c966 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c942:	8afa      	ldrh	r2, [r7, #22]
 800c944:	429a      	cmp	r2, r3
 800c946:	d004      	beq.n	800c952 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	881b      	ldrh	r3, [r3, #0]
 800c94c:	8afa      	ldrh	r2, [r7, #22]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d109      	bne.n	800c966 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c952:	4b08      	ldr	r3, [pc, #32]	; (800c974 <mem_link_valid+0x74>)
 800c954:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	429a      	cmp	r2, r3
 800c95a:	d006      	beq.n	800c96a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	885b      	ldrh	r3, [r3, #2]
 800c960:	8afa      	ldrh	r2, [r7, #22]
 800c962:	429a      	cmp	r2, r3
 800c964:	d001      	beq.n	800c96a <mem_link_valid+0x6a>
    return 0;
 800c966:	2300      	movs	r3, #0
 800c968:	e000      	b.n	800c96c <mem_link_valid+0x6c>
  }
  return 1;
 800c96a:	2301      	movs	r3, #1
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3718      	adds	r7, #24
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	20008aa0 	.word	0x20008aa0

0800c978 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b088      	sub	sp, #32
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d070      	beq.n	800ca68 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f003 0303 	and.w	r3, r3, #3
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00d      	beq.n	800c9ac <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c990:	4b37      	ldr	r3, [pc, #220]	; (800ca70 <mem_free+0xf8>)
 800c992:	f240 2273 	movw	r2, #627	; 0x273
 800c996:	4937      	ldr	r1, [pc, #220]	; (800ca74 <mem_free+0xfc>)
 800c998:	4837      	ldr	r0, [pc, #220]	; (800ca78 <mem_free+0x100>)
 800c99a:	f00e ff91 	bl	801b8c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c99e:	f00d f88f 	bl	8019ac0 <sys_arch_protect>
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f00d f899 	bl	8019adc <sys_arch_unprotect>
    return;
 800c9aa:	e05e      	b.n	800ca6a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	3b08      	subs	r3, #8
 800c9b0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c9b2:	4b32      	ldr	r3, [pc, #200]	; (800ca7c <mem_free+0x104>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	69fa      	ldr	r2, [r7, #28]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d306      	bcc.n	800c9ca <mem_free+0x52>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f103 020c 	add.w	r2, r3, #12
 800c9c2:	4b2f      	ldr	r3, [pc, #188]	; (800ca80 <mem_free+0x108>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d90d      	bls.n	800c9e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c9ca:	4b29      	ldr	r3, [pc, #164]	; (800ca70 <mem_free+0xf8>)
 800c9cc:	f240 227f 	movw	r2, #639	; 0x27f
 800c9d0:	492c      	ldr	r1, [pc, #176]	; (800ca84 <mem_free+0x10c>)
 800c9d2:	4829      	ldr	r0, [pc, #164]	; (800ca78 <mem_free+0x100>)
 800c9d4:	f00e ff74 	bl	801b8c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9d8:	f00d f872 	bl	8019ac0 <sys_arch_protect>
 800c9dc:	6138      	str	r0, [r7, #16]
 800c9de:	6938      	ldr	r0, [r7, #16]
 800c9e0:	f00d f87c 	bl	8019adc <sys_arch_unprotect>
    return;
 800c9e4:	e041      	b.n	800ca6a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c9e6:	4828      	ldr	r0, [pc, #160]	; (800ca88 <mem_free+0x110>)
 800c9e8:	f00d f828 	bl	8019a3c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	791b      	ldrb	r3, [r3, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d110      	bne.n	800ca16 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c9f4:	4b1e      	ldr	r3, [pc, #120]	; (800ca70 <mem_free+0xf8>)
 800c9f6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c9fa:	4924      	ldr	r1, [pc, #144]	; (800ca8c <mem_free+0x114>)
 800c9fc:	481e      	ldr	r0, [pc, #120]	; (800ca78 <mem_free+0x100>)
 800c9fe:	f00e ff5f 	bl	801b8c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca02:	4821      	ldr	r0, [pc, #132]	; (800ca88 <mem_free+0x110>)
 800ca04:	f00d f829 	bl	8019a5a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca08:	f00d f85a 	bl	8019ac0 <sys_arch_protect>
 800ca0c:	6178      	str	r0, [r7, #20]
 800ca0e:	6978      	ldr	r0, [r7, #20]
 800ca10:	f00d f864 	bl	8019adc <sys_arch_unprotect>
    return;
 800ca14:	e029      	b.n	800ca6a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ca16:	69f8      	ldr	r0, [r7, #28]
 800ca18:	f7ff ff72 	bl	800c900 <mem_link_valid>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d110      	bne.n	800ca44 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ca22:	4b13      	ldr	r3, [pc, #76]	; (800ca70 <mem_free+0xf8>)
 800ca24:	f240 2295 	movw	r2, #661	; 0x295
 800ca28:	4919      	ldr	r1, [pc, #100]	; (800ca90 <mem_free+0x118>)
 800ca2a:	4813      	ldr	r0, [pc, #76]	; (800ca78 <mem_free+0x100>)
 800ca2c:	f00e ff48 	bl	801b8c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca30:	4815      	ldr	r0, [pc, #84]	; (800ca88 <mem_free+0x110>)
 800ca32:	f00d f812 	bl	8019a5a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca36:	f00d f843 	bl	8019ac0 <sys_arch_protect>
 800ca3a:	61b8      	str	r0, [r7, #24]
 800ca3c:	69b8      	ldr	r0, [r7, #24]
 800ca3e:	f00d f84d 	bl	8019adc <sys_arch_unprotect>
    return;
 800ca42:	e012      	b.n	800ca6a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	2200      	movs	r2, #0
 800ca48:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ca4a:	4b12      	ldr	r3, [pc, #72]	; (800ca94 <mem_free+0x11c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	69fa      	ldr	r2, [r7, #28]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d202      	bcs.n	800ca5a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ca54:	4a0f      	ldr	r2, [pc, #60]	; (800ca94 <mem_free+0x11c>)
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ca5a:	69f8      	ldr	r0, [r7, #28]
 800ca5c:	f7ff fe5c 	bl	800c718 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ca60:	4809      	ldr	r0, [pc, #36]	; (800ca88 <mem_free+0x110>)
 800ca62:	f00c fffa 	bl	8019a5a <sys_mutex_unlock>
 800ca66:	e000      	b.n	800ca6a <mem_free+0xf2>
    return;
 800ca68:	bf00      	nop
}
 800ca6a:	3720      	adds	r7, #32
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	0801db98 	.word	0x0801db98
 800ca74:	0801dc88 	.word	0x0801dc88
 800ca78:	0801dbe0 	.word	0x0801dbe0
 800ca7c:	20008a9c 	.word	0x20008a9c
 800ca80:	20008aa0 	.word	0x20008aa0
 800ca84:	0801dcac 	.word	0x0801dcac
 800ca88:	20008aa4 	.word	0x20008aa4
 800ca8c:	0801dcc8 	.word	0x0801dcc8
 800ca90:	0801dcf0 	.word	0x0801dcf0
 800ca94:	20008aa8 	.word	0x20008aa8

0800ca98 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b088      	sub	sp, #32
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	460b      	mov	r3, r1
 800caa2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800caa4:	887b      	ldrh	r3, [r7, #2]
 800caa6:	3303      	adds	r3, #3
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	f023 0303 	bic.w	r3, r3, #3
 800caae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cab0:	8bfb      	ldrh	r3, [r7, #30]
 800cab2:	2b0b      	cmp	r3, #11
 800cab4:	d801      	bhi.n	800caba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cab6:	230c      	movs	r3, #12
 800cab8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800caba:	8bfb      	ldrh	r3, [r7, #30]
 800cabc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cac0:	d803      	bhi.n	800caca <mem_trim+0x32>
 800cac2:	8bfa      	ldrh	r2, [r7, #30]
 800cac4:	887b      	ldrh	r3, [r7, #2]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d201      	bcs.n	800cace <mem_trim+0x36>
    return NULL;
 800caca:	2300      	movs	r3, #0
 800cacc:	e0d8      	b.n	800cc80 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cace:	4b6e      	ldr	r3, [pc, #440]	; (800cc88 <mem_trim+0x1f0>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d304      	bcc.n	800cae2 <mem_trim+0x4a>
 800cad8:	4b6c      	ldr	r3, [pc, #432]	; (800cc8c <mem_trim+0x1f4>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d306      	bcc.n	800caf0 <mem_trim+0x58>
 800cae2:	4b6b      	ldr	r3, [pc, #428]	; (800cc90 <mem_trim+0x1f8>)
 800cae4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cae8:	496a      	ldr	r1, [pc, #424]	; (800cc94 <mem_trim+0x1fc>)
 800caea:	486b      	ldr	r0, [pc, #428]	; (800cc98 <mem_trim+0x200>)
 800caec:	f00e fee8 	bl	801b8c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800caf0:	4b65      	ldr	r3, [pc, #404]	; (800cc88 <mem_trim+0x1f0>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d304      	bcc.n	800cb04 <mem_trim+0x6c>
 800cafa:	4b64      	ldr	r3, [pc, #400]	; (800cc8c <mem_trim+0x1f4>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d307      	bcc.n	800cb14 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb04:	f00c ffdc 	bl	8019ac0 <sys_arch_protect>
 800cb08:	60b8      	str	r0, [r7, #8]
 800cb0a:	68b8      	ldr	r0, [r7, #8]
 800cb0c:	f00c ffe6 	bl	8019adc <sys_arch_unprotect>
    return rmem;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	e0b5      	b.n	800cc80 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3b08      	subs	r3, #8
 800cb18:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cb1a:	69b8      	ldr	r0, [r7, #24]
 800cb1c:	f7ff fdea 	bl	800c6f4 <mem_to_ptr>
 800cb20:	4603      	mov	r3, r0
 800cb22:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	881a      	ldrh	r2, [r3, #0]
 800cb28:	8afb      	ldrh	r3, [r7, #22]
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	3b08      	subs	r3, #8
 800cb30:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cb32:	8bfa      	ldrh	r2, [r7, #30]
 800cb34:	8abb      	ldrh	r3, [r7, #20]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d906      	bls.n	800cb48 <mem_trim+0xb0>
 800cb3a:	4b55      	ldr	r3, [pc, #340]	; (800cc90 <mem_trim+0x1f8>)
 800cb3c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cb40:	4956      	ldr	r1, [pc, #344]	; (800cc9c <mem_trim+0x204>)
 800cb42:	4855      	ldr	r0, [pc, #340]	; (800cc98 <mem_trim+0x200>)
 800cb44:	f00e febc 	bl	801b8c0 <iprintf>
  if (newsize > size) {
 800cb48:	8bfa      	ldrh	r2, [r7, #30]
 800cb4a:	8abb      	ldrh	r3, [r7, #20]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d901      	bls.n	800cb54 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cb50:	2300      	movs	r3, #0
 800cb52:	e095      	b.n	800cc80 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cb54:	8bfa      	ldrh	r2, [r7, #30]
 800cb56:	8abb      	ldrh	r3, [r7, #20]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d101      	bne.n	800cb60 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	e08f      	b.n	800cc80 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cb60:	484f      	ldr	r0, [pc, #316]	; (800cca0 <mem_trim+0x208>)
 800cb62:	f00c ff6b 	bl	8019a3c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fdb0 	bl	800c6d0 <ptr_to_mem>
 800cb70:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	791b      	ldrb	r3, [r3, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d13f      	bne.n	800cbfa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	881b      	ldrh	r3, [r3, #0]
 800cb7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb82:	d106      	bne.n	800cb92 <mem_trim+0xfa>
 800cb84:	4b42      	ldr	r3, [pc, #264]	; (800cc90 <mem_trim+0x1f8>)
 800cb86:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cb8a:	4946      	ldr	r1, [pc, #280]	; (800cca4 <mem_trim+0x20c>)
 800cb8c:	4842      	ldr	r0, [pc, #264]	; (800cc98 <mem_trim+0x200>)
 800cb8e:	f00e fe97 	bl	801b8c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	881b      	ldrh	r3, [r3, #0]
 800cb96:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cb98:	8afa      	ldrh	r2, [r7, #22]
 800cb9a:	8bfb      	ldrh	r3, [r7, #30]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	3308      	adds	r3, #8
 800cba2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cba4:	4b40      	ldr	r3, [pc, #256]	; (800cca8 <mem_trim+0x210>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	693a      	ldr	r2, [r7, #16]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d106      	bne.n	800cbbc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cbae:	89fb      	ldrh	r3, [r7, #14]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7ff fd8d 	bl	800c6d0 <ptr_to_mem>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	4a3b      	ldr	r2, [pc, #236]	; (800cca8 <mem_trim+0x210>)
 800cbba:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cbbc:	89fb      	ldrh	r3, [r7, #14]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7ff fd86 	bl	800c6d0 <ptr_to_mem>
 800cbc4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	89ba      	ldrh	r2, [r7, #12]
 800cbd0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	8afa      	ldrh	r2, [r7, #22]
 800cbd6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	89fa      	ldrh	r2, [r7, #14]
 800cbdc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbe6:	d047      	beq.n	800cc78 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7ff fd6f 	bl	800c6d0 <ptr_to_mem>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	89fb      	ldrh	r3, [r7, #14]
 800cbf6:	8053      	strh	r3, [r2, #2]
 800cbf8:	e03e      	b.n	800cc78 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cbfa:	8bfb      	ldrh	r3, [r7, #30]
 800cbfc:	f103 0214 	add.w	r2, r3, #20
 800cc00:	8abb      	ldrh	r3, [r7, #20]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d838      	bhi.n	800cc78 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc06:	8afa      	ldrh	r2, [r7, #22]
 800cc08:	8bfb      	ldrh	r3, [r7, #30]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	3308      	adds	r3, #8
 800cc10:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc1a:	d106      	bne.n	800cc2a <mem_trim+0x192>
 800cc1c:	4b1c      	ldr	r3, [pc, #112]	; (800cc90 <mem_trim+0x1f8>)
 800cc1e:	f240 3216 	movw	r2, #790	; 0x316
 800cc22:	4920      	ldr	r1, [pc, #128]	; (800cca4 <mem_trim+0x20c>)
 800cc24:	481c      	ldr	r0, [pc, #112]	; (800cc98 <mem_trim+0x200>)
 800cc26:	f00e fe4b 	bl	801b8c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cc2a:	89fb      	ldrh	r3, [r7, #14]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7ff fd4f 	bl	800c6d0 <ptr_to_mem>
 800cc32:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cc34:	4b1c      	ldr	r3, [pc, #112]	; (800cca8 <mem_trim+0x210>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	693a      	ldr	r2, [r7, #16]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d202      	bcs.n	800cc44 <mem_trim+0x1ac>
      lfree = mem2;
 800cc3e:	4a1a      	ldr	r2, [pc, #104]	; (800cca8 <mem_trim+0x210>)
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	2200      	movs	r2, #0
 800cc48:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	881a      	ldrh	r2, [r3, #0]
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	8afa      	ldrh	r2, [r7, #22]
 800cc56:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	89fa      	ldrh	r2, [r7, #14]
 800cc5c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	881b      	ldrh	r3, [r3, #0]
 800cc62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc66:	d007      	beq.n	800cc78 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	881b      	ldrh	r3, [r3, #0]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff fd2f 	bl	800c6d0 <ptr_to_mem>
 800cc72:	4602      	mov	r2, r0
 800cc74:	89fb      	ldrh	r3, [r7, #14]
 800cc76:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cc78:	4809      	ldr	r0, [pc, #36]	; (800cca0 <mem_trim+0x208>)
 800cc7a:	f00c feee 	bl	8019a5a <sys_mutex_unlock>
  return rmem;
 800cc7e:	687b      	ldr	r3, [r7, #4]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3720      	adds	r7, #32
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	20008a9c 	.word	0x20008a9c
 800cc8c:	20008aa0 	.word	0x20008aa0
 800cc90:	0801db98 	.word	0x0801db98
 800cc94:	0801dd24 	.word	0x0801dd24
 800cc98:	0801dbe0 	.word	0x0801dbe0
 800cc9c:	0801dd3c 	.word	0x0801dd3c
 800cca0:	20008aa4 	.word	0x20008aa4
 800cca4:	0801dd5c 	.word	0x0801dd5c
 800cca8:	20008aa8 	.word	0x20008aa8

0800ccac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b088      	sub	sp, #32
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ccb6:	88fb      	ldrh	r3, [r7, #6]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d101      	bne.n	800ccc0 <mem_malloc+0x14>
    return NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	e0e2      	b.n	800ce86 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ccc0:	88fb      	ldrh	r3, [r7, #6]
 800ccc2:	3303      	adds	r3, #3
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	f023 0303 	bic.w	r3, r3, #3
 800ccca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cccc:	8bbb      	ldrh	r3, [r7, #28]
 800ccce:	2b0b      	cmp	r3, #11
 800ccd0:	d801      	bhi.n	800ccd6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ccd2:	230c      	movs	r3, #12
 800ccd4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ccd6:	8bbb      	ldrh	r3, [r7, #28]
 800ccd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ccdc:	d803      	bhi.n	800cce6 <mem_malloc+0x3a>
 800ccde:	8bba      	ldrh	r2, [r7, #28]
 800cce0:	88fb      	ldrh	r3, [r7, #6]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d201      	bcs.n	800ccea <mem_malloc+0x3e>
    return NULL;
 800cce6:	2300      	movs	r3, #0
 800cce8:	e0cd      	b.n	800ce86 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ccea:	4869      	ldr	r0, [pc, #420]	; (800ce90 <mem_malloc+0x1e4>)
 800ccec:	f00c fea6 	bl	8019a3c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ccf0:	4b68      	ldr	r3, [pc, #416]	; (800ce94 <mem_malloc+0x1e8>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7ff fcfd 	bl	800c6f4 <mem_to_ptr>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	83fb      	strh	r3, [r7, #30]
 800ccfe:	e0b7      	b.n	800ce70 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cd00:	8bfb      	ldrh	r3, [r7, #30]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7ff fce4 	bl	800c6d0 <ptr_to_mem>
 800cd08:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	791b      	ldrb	r3, [r3, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f040 80a7 	bne.w	800ce62 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	881b      	ldrh	r3, [r3, #0]
 800cd18:	461a      	mov	r2, r3
 800cd1a:	8bfb      	ldrh	r3, [r7, #30]
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	f1a3 0208 	sub.w	r2, r3, #8
 800cd22:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cd24:	429a      	cmp	r2, r3
 800cd26:	f0c0 809c 	bcc.w	800ce62 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	8bfb      	ldrh	r3, [r7, #30]
 800cd32:	1ad3      	subs	r3, r2, r3
 800cd34:	f1a3 0208 	sub.w	r2, r3, #8
 800cd38:	8bbb      	ldrh	r3, [r7, #28]
 800cd3a:	3314      	adds	r3, #20
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d333      	bcc.n	800cda8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cd40:	8bfa      	ldrh	r2, [r7, #30]
 800cd42:	8bbb      	ldrh	r3, [r7, #28]
 800cd44:	4413      	add	r3, r2
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	3308      	adds	r3, #8
 800cd4a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cd4c:	8a7b      	ldrh	r3, [r7, #18]
 800cd4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd52:	d106      	bne.n	800cd62 <mem_malloc+0xb6>
 800cd54:	4b50      	ldr	r3, [pc, #320]	; (800ce98 <mem_malloc+0x1ec>)
 800cd56:	f240 3287 	movw	r2, #903	; 0x387
 800cd5a:	4950      	ldr	r1, [pc, #320]	; (800ce9c <mem_malloc+0x1f0>)
 800cd5c:	4850      	ldr	r0, [pc, #320]	; (800cea0 <mem_malloc+0x1f4>)
 800cd5e:	f00e fdaf 	bl	801b8c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cd62:	8a7b      	ldrh	r3, [r7, #18]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7ff fcb3 	bl	800c6d0 <ptr_to_mem>
 800cd6a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	881a      	ldrh	r2, [r3, #0]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	8bfa      	ldrh	r2, [r7, #30]
 800cd7e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	8a7a      	ldrh	r2, [r7, #18]
 800cd84:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	881b      	ldrh	r3, [r3, #0]
 800cd90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd94:	d00b      	beq.n	800cdae <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	881b      	ldrh	r3, [r3, #0]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7ff fc98 	bl	800c6d0 <ptr_to_mem>
 800cda0:	4602      	mov	r2, r0
 800cda2:	8a7b      	ldrh	r3, [r7, #18]
 800cda4:	8053      	strh	r3, [r2, #2]
 800cda6:	e002      	b.n	800cdae <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cdae:	4b39      	ldr	r3, [pc, #228]	; (800ce94 <mem_malloc+0x1e8>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d127      	bne.n	800ce08 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cdb8:	4b36      	ldr	r3, [pc, #216]	; (800ce94 <mem_malloc+0x1e8>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cdbe:	e005      	b.n	800cdcc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	881b      	ldrh	r3, [r3, #0]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7ff fc83 	bl	800c6d0 <ptr_to_mem>
 800cdca:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	791b      	ldrb	r3, [r3, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d004      	beq.n	800cdde <mem_malloc+0x132>
 800cdd4:	4b33      	ldr	r3, [pc, #204]	; (800cea4 <mem_malloc+0x1f8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	69ba      	ldr	r2, [r7, #24]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d1f0      	bne.n	800cdc0 <mem_malloc+0x114>
          }
          lfree = cur;
 800cdde:	4a2d      	ldr	r2, [pc, #180]	; (800ce94 <mem_malloc+0x1e8>)
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cde4:	4b2b      	ldr	r3, [pc, #172]	; (800ce94 <mem_malloc+0x1e8>)
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	4b2e      	ldr	r3, [pc, #184]	; (800cea4 <mem_malloc+0x1f8>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d00b      	beq.n	800ce08 <mem_malloc+0x15c>
 800cdf0:	4b28      	ldr	r3, [pc, #160]	; (800ce94 <mem_malloc+0x1e8>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	791b      	ldrb	r3, [r3, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d006      	beq.n	800ce08 <mem_malloc+0x15c>
 800cdfa:	4b27      	ldr	r3, [pc, #156]	; (800ce98 <mem_malloc+0x1ec>)
 800cdfc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ce00:	4929      	ldr	r1, [pc, #164]	; (800cea8 <mem_malloc+0x1fc>)
 800ce02:	4827      	ldr	r0, [pc, #156]	; (800cea0 <mem_malloc+0x1f4>)
 800ce04:	f00e fd5c 	bl	801b8c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ce08:	4821      	ldr	r0, [pc, #132]	; (800ce90 <mem_malloc+0x1e4>)
 800ce0a:	f00c fe26 	bl	8019a5a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ce0e:	8bba      	ldrh	r2, [r7, #28]
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	4413      	add	r3, r2
 800ce14:	3308      	adds	r3, #8
 800ce16:	4a23      	ldr	r2, [pc, #140]	; (800cea4 <mem_malloc+0x1f8>)
 800ce18:	6812      	ldr	r2, [r2, #0]
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d906      	bls.n	800ce2c <mem_malloc+0x180>
 800ce1e:	4b1e      	ldr	r3, [pc, #120]	; (800ce98 <mem_malloc+0x1ec>)
 800ce20:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ce24:	4921      	ldr	r1, [pc, #132]	; (800ceac <mem_malloc+0x200>)
 800ce26:	481e      	ldr	r0, [pc, #120]	; (800cea0 <mem_malloc+0x1f4>)
 800ce28:	f00e fd4a 	bl	801b8c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	f003 0303 	and.w	r3, r3, #3
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d006      	beq.n	800ce44 <mem_malloc+0x198>
 800ce36:	4b18      	ldr	r3, [pc, #96]	; (800ce98 <mem_malloc+0x1ec>)
 800ce38:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ce3c:	491c      	ldr	r1, [pc, #112]	; (800ceb0 <mem_malloc+0x204>)
 800ce3e:	4818      	ldr	r0, [pc, #96]	; (800cea0 <mem_malloc+0x1f4>)
 800ce40:	f00e fd3e 	bl	801b8c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f003 0303 	and.w	r3, r3, #3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d006      	beq.n	800ce5c <mem_malloc+0x1b0>
 800ce4e:	4b12      	ldr	r3, [pc, #72]	; (800ce98 <mem_malloc+0x1ec>)
 800ce50:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ce54:	4917      	ldr	r1, [pc, #92]	; (800ceb4 <mem_malloc+0x208>)
 800ce56:	4812      	ldr	r0, [pc, #72]	; (800cea0 <mem_malloc+0x1f4>)
 800ce58:	f00e fd32 	bl	801b8c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	3308      	adds	r3, #8
 800ce60:	e011      	b.n	800ce86 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ce62:	8bfb      	ldrh	r3, [r7, #30]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7ff fc33 	bl	800c6d0 <ptr_to_mem>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	881b      	ldrh	r3, [r3, #0]
 800ce6e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ce70:	8bfa      	ldrh	r2, [r7, #30]
 800ce72:	8bbb      	ldrh	r3, [r7, #28]
 800ce74:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	f4ff af41 	bcc.w	800cd00 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ce7e:	4804      	ldr	r0, [pc, #16]	; (800ce90 <mem_malloc+0x1e4>)
 800ce80:	f00c fdeb 	bl	8019a5a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3720      	adds	r7, #32
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	20008aa4 	.word	0x20008aa4
 800ce94:	20008aa8 	.word	0x20008aa8
 800ce98:	0801db98 	.word	0x0801db98
 800ce9c:	0801dd5c 	.word	0x0801dd5c
 800cea0:	0801dbe0 	.word	0x0801dbe0
 800cea4:	20008aa0 	.word	0x20008aa0
 800cea8:	0801dd70 	.word	0x0801dd70
 800ceac:	0801dd8c 	.word	0x0801dd8c
 800ceb0:	0801ddbc 	.word	0x0801ddbc
 800ceb4:	0801ddec 	.word	0x0801ddec

0800ceb8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	2200      	movs	r2, #0
 800cec6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	3303      	adds	r3, #3
 800cece:	f023 0303 	bic.w	r3, r3, #3
 800ced2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ced4:	2300      	movs	r3, #0
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	e011      	b.n	800cefe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	881b      	ldrh	r3, [r3, #0]
 800cef0:	461a      	mov	r2, r3
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	4413      	add	r3, r2
 800cef6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	3301      	adds	r3, #1
 800cefc:	60fb      	str	r3, [r7, #12]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	885b      	ldrh	r3, [r3, #2]
 800cf02:	461a      	mov	r2, r3
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	4293      	cmp	r3, r2
 800cf08:	dbe7      	blt.n	800ceda <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cf0a:	bf00      	nop
 800cf0c:	bf00      	nop
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf1e:	2300      	movs	r3, #0
 800cf20:	80fb      	strh	r3, [r7, #6]
 800cf22:	e009      	b.n	800cf38 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cf24:	88fb      	ldrh	r3, [r7, #6]
 800cf26:	4a08      	ldr	r2, [pc, #32]	; (800cf48 <memp_init+0x30>)
 800cf28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7ff ffc3 	bl	800ceb8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf32:	88fb      	ldrh	r3, [r7, #6]
 800cf34:	3301      	adds	r3, #1
 800cf36:	80fb      	strh	r3, [r7, #6]
 800cf38:	88fb      	ldrh	r3, [r7, #6]
 800cf3a:	2b0c      	cmp	r3, #12
 800cf3c:	d9f2      	bls.n	800cf24 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cf3e:	bf00      	nop
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	08020ab4 	.word	0x08020ab4

0800cf4c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cf54:	f00c fdb4 	bl	8019ac0 <sys_arch_protect>
 800cf58:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d015      	beq.n	800cf94 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	6812      	ldr	r2, [r2, #0]
 800cf70:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	f003 0303 	and.w	r3, r3, #3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d006      	beq.n	800cf8a <do_memp_malloc_pool+0x3e>
 800cf7c:	4b09      	ldr	r3, [pc, #36]	; (800cfa4 <do_memp_malloc_pool+0x58>)
 800cf7e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cf82:	4909      	ldr	r1, [pc, #36]	; (800cfa8 <do_memp_malloc_pool+0x5c>)
 800cf84:	4809      	ldr	r0, [pc, #36]	; (800cfac <do_memp_malloc_pool+0x60>)
 800cf86:	f00e fc9b 	bl	801b8c0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f00c fda6 	bl	8019adc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	e003      	b.n	800cf9c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f00c fda1 	bl	8019adc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	0801de10 	.word	0x0801de10
 800cfa8:	0801de40 	.word	0x0801de40
 800cfac:	0801de64 	.word	0x0801de64

0800cfb0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	2b0c      	cmp	r3, #12
 800cfbe:	d908      	bls.n	800cfd2 <memp_malloc+0x22>
 800cfc0:	4b0a      	ldr	r3, [pc, #40]	; (800cfec <memp_malloc+0x3c>)
 800cfc2:	f240 1257 	movw	r2, #343	; 0x157
 800cfc6:	490a      	ldr	r1, [pc, #40]	; (800cff0 <memp_malloc+0x40>)
 800cfc8:	480a      	ldr	r0, [pc, #40]	; (800cff4 <memp_malloc+0x44>)
 800cfca:	f00e fc79 	bl	801b8c0 <iprintf>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e008      	b.n	800cfe4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cfd2:	79fb      	ldrb	r3, [r7, #7]
 800cfd4:	4a08      	ldr	r2, [pc, #32]	; (800cff8 <memp_malloc+0x48>)
 800cfd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7ff ffb6 	bl	800cf4c <do_memp_malloc_pool>
 800cfe0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3710      	adds	r7, #16
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	0801de10 	.word	0x0801de10
 800cff0:	0801dea0 	.word	0x0801dea0
 800cff4:	0801de64 	.word	0x0801de64
 800cff8:	08020ab4 	.word	0x08020ab4

0800cffc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	f003 0303 	and.w	r3, r3, #3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d006      	beq.n	800d01e <do_memp_free_pool+0x22>
 800d010:	4b0d      	ldr	r3, [pc, #52]	; (800d048 <do_memp_free_pool+0x4c>)
 800d012:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d016:	490d      	ldr	r1, [pc, #52]	; (800d04c <do_memp_free_pool+0x50>)
 800d018:	480d      	ldr	r0, [pc, #52]	; (800d050 <do_memp_free_pool+0x54>)
 800d01a:	f00e fc51 	bl	801b8c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d022:	f00c fd4d 	bl	8019ac0 <sys_arch_protect>
 800d026:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d03a:	68b8      	ldr	r0, [r7, #8]
 800d03c:	f00c fd4e 	bl	8019adc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d040:	bf00      	nop
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	0801de10 	.word	0x0801de10
 800d04c:	0801dec0 	.word	0x0801dec0
 800d050:	0801de64 	.word	0x0801de64

0800d054 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	6039      	str	r1, [r7, #0]
 800d05e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d060:	79fb      	ldrb	r3, [r7, #7]
 800d062:	2b0c      	cmp	r3, #12
 800d064:	d907      	bls.n	800d076 <memp_free+0x22>
 800d066:	4b0c      	ldr	r3, [pc, #48]	; (800d098 <memp_free+0x44>)
 800d068:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d06c:	490b      	ldr	r1, [pc, #44]	; (800d09c <memp_free+0x48>)
 800d06e:	480c      	ldr	r0, [pc, #48]	; (800d0a0 <memp_free+0x4c>)
 800d070:	f00e fc26 	bl	801b8c0 <iprintf>
 800d074:	e00c      	b.n	800d090 <memp_free+0x3c>

  if (mem == NULL) {
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d008      	beq.n	800d08e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d07c:	79fb      	ldrb	r3, [r7, #7]
 800d07e:	4a09      	ldr	r2, [pc, #36]	; (800d0a4 <memp_free+0x50>)
 800d080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	4618      	mov	r0, r3
 800d088:	f7ff ffb8 	bl	800cffc <do_memp_free_pool>
 800d08c:	e000      	b.n	800d090 <memp_free+0x3c>
    return;
 800d08e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	0801de10 	.word	0x0801de10
 800d09c:	0801dee0 	.word	0x0801dee0
 800d0a0:	0801de64 	.word	0x0801de64
 800d0a4:	08020ab4 	.word	0x08020ab4

0800d0a8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d0ac:	bf00      	nop
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
	...

0800d0b8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d108      	bne.n	800d0de <netif_add+0x26>
 800d0cc:	4b5b      	ldr	r3, [pc, #364]	; (800d23c <netif_add+0x184>)
 800d0ce:	f240 1227 	movw	r2, #295	; 0x127
 800d0d2:	495b      	ldr	r1, [pc, #364]	; (800d240 <netif_add+0x188>)
 800d0d4:	485b      	ldr	r0, [pc, #364]	; (800d244 <netif_add+0x18c>)
 800d0d6:	f00e fbf3 	bl	801b8c0 <iprintf>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	e0a9      	b.n	800d232 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d108      	bne.n	800d0f6 <netif_add+0x3e>
 800d0e4:	4b55      	ldr	r3, [pc, #340]	; (800d23c <netif_add+0x184>)
 800d0e6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d0ea:	4957      	ldr	r1, [pc, #348]	; (800d248 <netif_add+0x190>)
 800d0ec:	4855      	ldr	r0, [pc, #340]	; (800d244 <netif_add+0x18c>)
 800d0ee:	f00e fbe7 	bl	801b8c0 <iprintf>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	e09d      	b.n	800d232 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d101      	bne.n	800d100 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d0fc:	4b53      	ldr	r3, [pc, #332]	; (800d24c <netif_add+0x194>)
 800d0fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d101      	bne.n	800d10a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d106:	4b51      	ldr	r3, [pc, #324]	; (800d24c <netif_add+0x194>)
 800d108:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d110:	4b4e      	ldr	r3, [pc, #312]	; (800d24c <netif_add+0x194>)
 800d112:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2200      	movs	r2, #0
 800d118:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	4a49      	ldr	r2, [pc, #292]	; (800d250 <netif_add+0x198>)
 800d12a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3324      	adds	r3, #36	; 0x24
 800d13e:	2204      	movs	r2, #4
 800d140:	2100      	movs	r1, #0
 800d142:	4618      	mov	r0, r3
 800d144:	f00e fbb4 	bl	801b8b0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6a3a      	ldr	r2, [r7, #32]
 800d152:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d154:	4b3f      	ldr	r3, [pc, #252]	; (800d254 <netif_add+0x19c>)
 800d156:	781a      	ldrb	r2, [r3, #0]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d162:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	68b9      	ldr	r1, [r7, #8]
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f000 f914 	bl	800d398 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	4798      	blx	r3
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <netif_add+0xc8>
    return NULL;
 800d17c:	2300      	movs	r3, #0
 800d17e:	e058      	b.n	800d232 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d186:	2bff      	cmp	r3, #255	; 0xff
 800d188:	d103      	bne.n	800d192 <netif_add+0xda>
        netif->num = 0;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d196:	4b30      	ldr	r3, [pc, #192]	; (800d258 <netif_add+0x1a0>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	617b      	str	r3, [r7, #20]
 800d19c:	e02b      	b.n	800d1f6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d106      	bne.n	800d1b4 <netif_add+0xfc>
 800d1a6:	4b25      	ldr	r3, [pc, #148]	; (800d23c <netif_add+0x184>)
 800d1a8:	f240 128b 	movw	r2, #395	; 0x18b
 800d1ac:	492b      	ldr	r1, [pc, #172]	; (800d25c <netif_add+0x1a4>)
 800d1ae:	4825      	ldr	r0, [pc, #148]	; (800d244 <netif_add+0x18c>)
 800d1b0:	f00e fb86 	bl	801b8c0 <iprintf>
        num_netifs++;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2bff      	cmp	r3, #255	; 0xff
 800d1be:	dd06      	ble.n	800d1ce <netif_add+0x116>
 800d1c0:	4b1e      	ldr	r3, [pc, #120]	; (800d23c <netif_add+0x184>)
 800d1c2:	f240 128d 	movw	r2, #397	; 0x18d
 800d1c6:	4926      	ldr	r1, [pc, #152]	; (800d260 <netif_add+0x1a8>)
 800d1c8:	481e      	ldr	r0, [pc, #120]	; (800d244 <netif_add+0x18c>)
 800d1ca:	f00e fb79 	bl	801b8c0 <iprintf>
        if (netif2->num == netif->num) {
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d108      	bne.n	800d1f0 <netif_add+0x138>
          netif->num++;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800d1ee:	e005      	b.n	800d1fc <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	617b      	str	r3, [r7, #20]
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1d0      	bne.n	800d19e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1be      	bne.n	800d180 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d208:	2bfe      	cmp	r3, #254	; 0xfe
 800d20a:	d103      	bne.n	800d214 <netif_add+0x15c>
    netif_num = 0;
 800d20c:	4b11      	ldr	r3, [pc, #68]	; (800d254 <netif_add+0x19c>)
 800d20e:	2200      	movs	r2, #0
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	e006      	b.n	800d222 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d21a:	3301      	adds	r3, #1
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	4b0d      	ldr	r3, [pc, #52]	; (800d254 <netif_add+0x19c>)
 800d220:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d222:	4b0d      	ldr	r3, [pc, #52]	; (800d258 <netif_add+0x1a0>)
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d22a:	4a0b      	ldr	r2, [pc, #44]	; (800d258 <netif_add+0x1a0>)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d230:	68fb      	ldr	r3, [r7, #12]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3718      	adds	r7, #24
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	0801defc 	.word	0x0801defc
 800d240:	0801df90 	.word	0x0801df90
 800d244:	0801df4c 	.word	0x0801df4c
 800d248:	0801dfac 	.word	0x0801dfac
 800d24c:	08020b38 	.word	0x08020b38
 800d250:	0800d67b 	.word	0x0800d67b
 800d254:	20008ae0 	.word	0x20008ae0
 800d258:	20010650 	.word	0x20010650
 800d25c:	0801dfd0 	.word	0x0801dfd0
 800d260:	0801dfe4 	.word	0x0801dfe4

0800d264 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d26e:	6839      	ldr	r1, [r7, #0]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f002 fe4b 	bl	800ff0c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f007 ff79 	bl	8015170 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d27e:	bf00      	nop
 800d280:	3708      	adds	r7, #8
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
	...

0800d288 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d106      	bne.n	800d2a8 <netif_do_set_ipaddr+0x20>
 800d29a:	4b1d      	ldr	r3, [pc, #116]	; (800d310 <netif_do_set_ipaddr+0x88>)
 800d29c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d2a0:	491c      	ldr	r1, [pc, #112]	; (800d314 <netif_do_set_ipaddr+0x8c>)
 800d2a2:	481d      	ldr	r0, [pc, #116]	; (800d318 <netif_do_set_ipaddr+0x90>)
 800d2a4:	f00e fb0c 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d106      	bne.n	800d2bc <netif_do_set_ipaddr+0x34>
 800d2ae:	4b18      	ldr	r3, [pc, #96]	; (800d310 <netif_do_set_ipaddr+0x88>)
 800d2b0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d2b4:	4917      	ldr	r1, [pc, #92]	; (800d314 <netif_do_set_ipaddr+0x8c>)
 800d2b6:	4818      	ldr	r0, [pc, #96]	; (800d318 <netif_do_set_ipaddr+0x90>)
 800d2b8:	f00e fb02 	bl	801b8c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d01c      	beq.n	800d304 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d2da:	f107 0314 	add.w	r3, r7, #20
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7ff ffbf 	bl	800d264 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d002      	beq.n	800d2f2 <netif_do_set_ipaddr+0x6a>
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	e000      	b.n	800d2f4 <netif_do_set_ipaddr+0x6c>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d2f8:	2101      	movs	r1, #1
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f000 f8d2 	bl	800d4a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d300:	2301      	movs	r3, #1
 800d302:	e000      	b.n	800d306 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	0801defc 	.word	0x0801defc
 800d314:	0801e014 	.word	0x0801e014
 800d318:	0801df4c 	.word	0x0801df4c

0800d31c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	3308      	adds	r3, #8
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	429a      	cmp	r2, r3
 800d334:	d00a      	beq.n	800d34c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d002      	beq.n	800d342 <netif_do_set_netmask+0x26>
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	e000      	b.n	800d344 <netif_do_set_netmask+0x28>
 800d342:	2300      	movs	r3, #0
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d348:	2301      	movs	r3, #1
 800d34a:	e000      	b.n	800d34e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3714      	adds	r7, #20
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d35a:	b480      	push	{r7}
 800d35c:	b085      	sub	sp, #20
 800d35e:	af00      	add	r7, sp, #0
 800d360:	60f8      	str	r0, [r7, #12]
 800d362:	60b9      	str	r1, [r7, #8]
 800d364:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	330c      	adds	r3, #12
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	429a      	cmp	r2, r3
 800d372:	d00a      	beq.n	800d38a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <netif_do_set_gw+0x26>
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	e000      	b.n	800d382 <netif_do_set_gw+0x28>
 800d380:	2300      	movs	r3, #0
 800d382:	68fa      	ldr	r2, [r7, #12]
 800d384:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d386:	2301      	movs	r3, #1
 800d388:	e000      	b.n	800d38c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b088      	sub	sp, #32
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
 800d3a4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d101      	bne.n	800d3b8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d3b4:	4b1c      	ldr	r3, [pc, #112]	; (800d428 <netif_set_addr+0x90>)
 800d3b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d101      	bne.n	800d3c2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d3be:	4b1a      	ldr	r3, [pc, #104]	; (800d428 <netif_set_addr+0x90>)
 800d3c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d101      	bne.n	800d3cc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d3c8:	4b17      	ldr	r3, [pc, #92]	; (800d428 <netif_set_addr+0x90>)
 800d3ca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <netif_set_addr+0x42>
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <netif_set_addr+0x46>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e000      	b.n	800d3e0 <netif_set_addr+0x48>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d006      	beq.n	800d3f6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d3e8:	f107 0310 	add.w	r3, r7, #16
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	68b9      	ldr	r1, [r7, #8]
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f7ff ff49 	bl	800d288 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d3f6:	69fa      	ldr	r2, [r7, #28]
 800d3f8:	6879      	ldr	r1, [r7, #4]
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f7ff ff8e 	bl	800d31c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d400:	69ba      	ldr	r2, [r7, #24]
 800d402:	6839      	ldr	r1, [r7, #0]
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f7ff ffa8 	bl	800d35a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d106      	bne.n	800d41e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d410:	f107 0310 	add.w	r3, r7, #16
 800d414:	461a      	mov	r2, r3
 800d416:	68b9      	ldr	r1, [r7, #8]
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f7ff ff35 	bl	800d288 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d41e:	bf00      	nop
 800d420:	3720      	adds	r7, #32
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	08020b38 	.word	0x08020b38

0800d42c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d434:	4a04      	ldr	r2, [pc, #16]	; (800d448 <netif_set_default+0x1c>)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d43a:	bf00      	nop
 800d43c:	370c      	adds	r7, #12
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	20010654 	.word	0x20010654

0800d44c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d107      	bne.n	800d46a <netif_set_up+0x1e>
 800d45a:	4b0f      	ldr	r3, [pc, #60]	; (800d498 <netif_set_up+0x4c>)
 800d45c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d460:	490e      	ldr	r1, [pc, #56]	; (800d49c <netif_set_up+0x50>)
 800d462:	480f      	ldr	r0, [pc, #60]	; (800d4a0 <netif_set_up+0x54>)
 800d464:	f00e fa2c 	bl	801b8c0 <iprintf>
 800d468:	e013      	b.n	800d492 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d470:	f003 0301 	and.w	r3, r3, #1
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10c      	bne.n	800d492 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d47e:	f043 0301 	orr.w	r3, r3, #1
 800d482:	b2da      	uxtb	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d48a:	2103      	movs	r1, #3
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 f809 	bl	800d4a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	0801defc 	.word	0x0801defc
 800d49c:	0801e084 	.word	0x0801e084
 800d4a0:	0801df4c 	.word	0x0801df4c

0800d4a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d106      	bne.n	800d4c4 <netif_issue_reports+0x20>
 800d4b6:	4b18      	ldr	r3, [pc, #96]	; (800d518 <netif_issue_reports+0x74>)
 800d4b8:	f240 326d 	movw	r2, #877	; 0x36d
 800d4bc:	4917      	ldr	r1, [pc, #92]	; (800d51c <netif_issue_reports+0x78>)
 800d4be:	4818      	ldr	r0, [pc, #96]	; (800d520 <netif_issue_reports+0x7c>)
 800d4c0:	f00e f9fe 	bl	801b8c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d4ca:	f003 0304 	and.w	r3, r3, #4
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d01e      	beq.n	800d510 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d4d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d017      	beq.n	800d510 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d4e0:	78fb      	ldrb	r3, [r7, #3]
 800d4e2:	f003 0301 	and.w	r3, r3, #1
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d013      	beq.n	800d512 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00e      	beq.n	800d512 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d4fa:	f003 0308 	and.w	r3, r3, #8
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d007      	beq.n	800d512 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	3304      	adds	r3, #4
 800d506:	4619      	mov	r1, r3
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f00a fc33 	bl	8017d74 <etharp_request>
 800d50e:	e000      	b.n	800d512 <netif_issue_reports+0x6e>
    return;
 800d510:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	0801defc 	.word	0x0801defc
 800d51c:	0801e0a0 	.word	0x0801e0a0
 800d520:	0801df4c 	.word	0x0801df4c

0800d524 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d107      	bne.n	800d542 <netif_set_down+0x1e>
 800d532:	4b12      	ldr	r3, [pc, #72]	; (800d57c <netif_set_down+0x58>)
 800d534:	f240 329b 	movw	r2, #923	; 0x39b
 800d538:	4911      	ldr	r1, [pc, #68]	; (800d580 <netif_set_down+0x5c>)
 800d53a:	4812      	ldr	r0, [pc, #72]	; (800d584 <netif_set_down+0x60>)
 800d53c:	f00e f9c0 	bl	801b8c0 <iprintf>
 800d540:	e019      	b.n	800d576 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d548:	f003 0301 	and.w	r3, r3, #1
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d012      	beq.n	800d576 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d556:	f023 0301 	bic.w	r3, r3, #1
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d568:	f003 0308 	and.w	r3, r3, #8
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f009 ffb9 	bl	80174e8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	0801defc 	.word	0x0801defc
 800d580:	0801e0c4 	.word	0x0801e0c4
 800d584:	0801df4c 	.word	0x0801df4c

0800d588 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d107      	bne.n	800d5a6 <netif_set_link_up+0x1e>
 800d596:	4b15      	ldr	r3, [pc, #84]	; (800d5ec <netif_set_link_up+0x64>)
 800d598:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d59c:	4914      	ldr	r1, [pc, #80]	; (800d5f0 <netif_set_link_up+0x68>)
 800d59e:	4815      	ldr	r0, [pc, #84]	; (800d5f4 <netif_set_link_up+0x6c>)
 800d5a0:	f00e f98e 	bl	801b8c0 <iprintf>
 800d5a4:	e01e      	b.n	800d5e4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5ac:	f003 0304 	and.w	r3, r3, #4
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d117      	bne.n	800d5e4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5ba:	f043 0304 	orr.w	r3, r3, #4
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f008 f9fe 	bl	80159c8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d5cc:	2103      	movs	r1, #3
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7ff ff68 	bl	800d4a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	69db      	ldr	r3, [r3, #28]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d003      	beq.n	800d5e4 <netif_set_link_up+0x5c>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	69db      	ldr	r3, [r3, #28]
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	0801defc 	.word	0x0801defc
 800d5f0:	0801e0e4 	.word	0x0801e0e4
 800d5f4:	0801df4c 	.word	0x0801df4c

0800d5f8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d107      	bne.n	800d616 <netif_set_link_down+0x1e>
 800d606:	4b11      	ldr	r3, [pc, #68]	; (800d64c <netif_set_link_down+0x54>)
 800d608:	f240 4206 	movw	r2, #1030	; 0x406
 800d60c:	4910      	ldr	r1, [pc, #64]	; (800d650 <netif_set_link_down+0x58>)
 800d60e:	4811      	ldr	r0, [pc, #68]	; (800d654 <netif_set_link_down+0x5c>)
 800d610:	f00e f956 	bl	801b8c0 <iprintf>
 800d614:	e017      	b.n	800d646 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d61c:	f003 0304 	and.w	r3, r3, #4
 800d620:	2b00      	cmp	r3, #0
 800d622:	d010      	beq.n	800d646 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d62a:	f023 0304 	bic.w	r3, r3, #4
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	69db      	ldr	r3, [r3, #28]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <netif_set_link_down+0x4e>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	0801defc 	.word	0x0801defc
 800d650:	0801e108 	.word	0x0801e108
 800d654:	0801df4c 	.word	0x0801df4c

0800d658 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d658:	b480      	push	{r7}
 800d65a:	b083      	sub	sp, #12
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d002      	beq.n	800d66e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	61da      	str	r2, [r3, #28]
  }
}
 800d66e:	bf00      	nop
 800d670:	370c      	adds	r7, #12
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d67a:	b480      	push	{r7}
 800d67c:	b085      	sub	sp, #20
 800d67e:	af00      	add	r7, sp, #0
 800d680:	60f8      	str	r0, [r7, #12]
 800d682:	60b9      	str	r1, [r7, #8]
 800d684:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d686:	f06f 030b 	mvn.w	r3, #11
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
	...

0800d698 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	4603      	mov	r3, r0
 800d6a0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d6a2:	79fb      	ldrb	r3, [r7, #7]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d013      	beq.n	800d6d0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d6a8:	4b0d      	ldr	r3, [pc, #52]	; (800d6e0 <netif_get_by_index+0x48>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	e00c      	b.n	800d6ca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	79fa      	ldrb	r2, [r7, #7]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d101      	bne.n	800d6c4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	e006      	b.n	800d6d2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	60fb      	str	r3, [r7, #12]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d1ef      	bne.n	800d6b0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d6d0:	2300      	movs	r3, #0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3714      	adds	r7, #20
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	20010650 	.word	0x20010650

0800d6e4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d6ea:	f00c f9e9 	bl	8019ac0 <sys_arch_protect>
 800d6ee:	6038      	str	r0, [r7, #0]
 800d6f0:	4b0d      	ldr	r3, [pc, #52]	; (800d728 <pbuf_free_ooseq+0x44>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	701a      	strb	r2, [r3, #0]
 800d6f6:	6838      	ldr	r0, [r7, #0]
 800d6f8:	f00c f9f0 	bl	8019adc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d6fc:	4b0b      	ldr	r3, [pc, #44]	; (800d72c <pbuf_free_ooseq+0x48>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	607b      	str	r3, [r7, #4]
 800d702:	e00a      	b.n	800d71a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d003      	beq.n	800d714 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f002 fc3b 	bl	800ff88 <tcp_free_ooseq>
      return;
 800d712:	e005      	b.n	800d720 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	607b      	str	r3, [r7, #4]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1f1      	bne.n	800d704 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	20010658 	.word	0x20010658
 800d72c:	20010660 	.word	0x20010660

0800d730 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d738:	f7ff ffd4 	bl	800d6e4 <pbuf_free_ooseq>
}
 800d73c:	bf00      	nop
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d74a:	f00c f9b9 	bl	8019ac0 <sys_arch_protect>
 800d74e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d750:	4b0f      	ldr	r3, [pc, #60]	; (800d790 <pbuf_pool_is_empty+0x4c>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d756:	4b0e      	ldr	r3, [pc, #56]	; (800d790 <pbuf_pool_is_empty+0x4c>)
 800d758:	2201      	movs	r2, #1
 800d75a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f00c f9bd 	bl	8019adc <sys_arch_unprotect>

  if (!queued) {
 800d762:	78fb      	ldrb	r3, [r7, #3]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d10f      	bne.n	800d788 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d768:	2100      	movs	r1, #0
 800d76a:	480a      	ldr	r0, [pc, #40]	; (800d794 <pbuf_pool_is_empty+0x50>)
 800d76c:	f7fe feca 	bl	800c504 <tcpip_try_callback>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d008      	beq.n	800d788 <pbuf_pool_is_empty+0x44>
 800d776:	f00c f9a3 	bl	8019ac0 <sys_arch_protect>
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	4b04      	ldr	r3, [pc, #16]	; (800d790 <pbuf_pool_is_empty+0x4c>)
 800d77e:	2200      	movs	r2, #0
 800d780:	701a      	strb	r2, [r3, #0]
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f00c f9aa 	bl	8019adc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	20010658 	.word	0x20010658
 800d794:	0800d731 	.word	0x0800d731

0800d798 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	80fb      	strh	r3, [r7, #6]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	88fa      	ldrh	r2, [r7, #6]
 800d7be:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	88ba      	ldrh	r2, [r7, #4]
 800d7c4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d7c6:	8b3b      	ldrh	r3, [r7, #24]
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	7f3a      	ldrb	r2, [r7, #28]
 800d7d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	73da      	strb	r2, [r3, #15]
}
 800d7e0:	bf00      	nop
 800d7e2:	3714      	adds	r7, #20
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08c      	sub	sp, #48	; 0x30
 800d7f0:	af02      	add	r7, sp, #8
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	71fb      	strb	r3, [r7, #7]
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	80bb      	strh	r3, [r7, #4]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d7fe:	79fb      	ldrb	r3, [r7, #7]
 800d800:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d802:	887b      	ldrh	r3, [r7, #2]
 800d804:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d808:	d07f      	beq.n	800d90a <pbuf_alloc+0x11e>
 800d80a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d80e:	f300 80c8 	bgt.w	800d9a2 <pbuf_alloc+0x1b6>
 800d812:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d816:	d010      	beq.n	800d83a <pbuf_alloc+0x4e>
 800d818:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d81c:	f300 80c1 	bgt.w	800d9a2 <pbuf_alloc+0x1b6>
 800d820:	2b01      	cmp	r3, #1
 800d822:	d002      	beq.n	800d82a <pbuf_alloc+0x3e>
 800d824:	2b41      	cmp	r3, #65	; 0x41
 800d826:	f040 80bc 	bne.w	800d9a2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d82a:	887a      	ldrh	r2, [r7, #2]
 800d82c:	88bb      	ldrh	r3, [r7, #4]
 800d82e:	4619      	mov	r1, r3
 800d830:	2000      	movs	r0, #0
 800d832:	f000 f8d1 	bl	800d9d8 <pbuf_alloc_reference>
 800d836:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d838:	e0bd      	b.n	800d9b6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d83e:	2300      	movs	r3, #0
 800d840:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d842:	88bb      	ldrh	r3, [r7, #4]
 800d844:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d846:	200c      	movs	r0, #12
 800d848:	f7ff fbb2 	bl	800cfb0 <memp_malloc>
 800d84c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d109      	bne.n	800d868 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d854:	f7ff ff76 	bl	800d744 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d002      	beq.n	800d864 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d85e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d860:	f000 fada 	bl	800de18 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d864:	2300      	movs	r3, #0
 800d866:	e0a7      	b.n	800d9b8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d868:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d86a:	3303      	adds	r3, #3
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	f023 0303 	bic.w	r3, r3, #3
 800d872:	b29b      	uxth	r3, r3
 800d874:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d878:	b29b      	uxth	r3, r3
 800d87a:	8b7a      	ldrh	r2, [r7, #26]
 800d87c:	4293      	cmp	r3, r2
 800d87e:	bf28      	it	cs
 800d880:	4613      	movcs	r3, r2
 800d882:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d884:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d886:	3310      	adds	r3, #16
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	4413      	add	r3, r2
 800d88c:	3303      	adds	r3, #3
 800d88e:	f023 0303 	bic.w	r3, r3, #3
 800d892:	4618      	mov	r0, r3
 800d894:	89f9      	ldrh	r1, [r7, #14]
 800d896:	8b7a      	ldrh	r2, [r7, #26]
 800d898:	2300      	movs	r3, #0
 800d89a:	9301      	str	r3, [sp, #4]
 800d89c:	887b      	ldrh	r3, [r7, #2]
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	4601      	mov	r1, r0
 800d8a4:	6938      	ldr	r0, [r7, #16]
 800d8a6:	f7ff ff77 	bl	800d798 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	f003 0303 	and.w	r3, r3, #3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d006      	beq.n	800d8c4 <pbuf_alloc+0xd8>
 800d8b6:	4b42      	ldr	r3, [pc, #264]	; (800d9c0 <pbuf_alloc+0x1d4>)
 800d8b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8bc:	4941      	ldr	r1, [pc, #260]	; (800d9c4 <pbuf_alloc+0x1d8>)
 800d8be:	4842      	ldr	r0, [pc, #264]	; (800d9c8 <pbuf_alloc+0x1dc>)
 800d8c0:	f00d fffe 	bl	801b8c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d8c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8c6:	3303      	adds	r3, #3
 800d8c8:	f023 0303 	bic.w	r3, r3, #3
 800d8cc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d8d0:	d106      	bne.n	800d8e0 <pbuf_alloc+0xf4>
 800d8d2:	4b3b      	ldr	r3, [pc, #236]	; (800d9c0 <pbuf_alloc+0x1d4>)
 800d8d4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d8d8:	493c      	ldr	r1, [pc, #240]	; (800d9cc <pbuf_alloc+0x1e0>)
 800d8da:	483b      	ldr	r0, [pc, #236]	; (800d9c8 <pbuf_alloc+0x1dc>)
 800d8dc:	f00d fff0 	bl	801b8c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d102      	bne.n	800d8ec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ea:	e002      	b.n	800d8f2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	693a      	ldr	r2, [r7, #16]
 800d8f0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d8f6:	8b7a      	ldrh	r2, [r7, #26]
 800d8f8:	89fb      	ldrh	r3, [r7, #14]
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d8fe:	2300      	movs	r3, #0
 800d900:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d902:	8b7b      	ldrh	r3, [r7, #26]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d19e      	bne.n	800d846 <pbuf_alloc+0x5a>
      break;
 800d908:	e055      	b.n	800d9b6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d90a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d90c:	3303      	adds	r3, #3
 800d90e:	b29b      	uxth	r3, r3
 800d910:	f023 0303 	bic.w	r3, r3, #3
 800d914:	b29a      	uxth	r2, r3
 800d916:	88bb      	ldrh	r3, [r7, #4]
 800d918:	3303      	adds	r3, #3
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	f023 0303 	bic.w	r3, r3, #3
 800d920:	b29b      	uxth	r3, r3
 800d922:	4413      	add	r3, r2
 800d924:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d926:	8b3b      	ldrh	r3, [r7, #24]
 800d928:	3310      	adds	r3, #16
 800d92a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d92c:	8b3a      	ldrh	r2, [r7, #24]
 800d92e:	88bb      	ldrh	r3, [r7, #4]
 800d930:	3303      	adds	r3, #3
 800d932:	f023 0303 	bic.w	r3, r3, #3
 800d936:	429a      	cmp	r2, r3
 800d938:	d306      	bcc.n	800d948 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d93a:	8afa      	ldrh	r2, [r7, #22]
 800d93c:	88bb      	ldrh	r3, [r7, #4]
 800d93e:	3303      	adds	r3, #3
 800d940:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d944:	429a      	cmp	r2, r3
 800d946:	d201      	bcs.n	800d94c <pbuf_alloc+0x160>
        return NULL;
 800d948:	2300      	movs	r3, #0
 800d94a:	e035      	b.n	800d9b8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d94c:	8afb      	ldrh	r3, [r7, #22]
 800d94e:	4618      	mov	r0, r3
 800d950:	f7ff f9ac 	bl	800ccac <mem_malloc>
 800d954:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d101      	bne.n	800d960 <pbuf_alloc+0x174>
        return NULL;
 800d95c:	2300      	movs	r3, #0
 800d95e:	e02b      	b.n	800d9b8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d962:	3310      	adds	r3, #16
 800d964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d966:	4413      	add	r3, r2
 800d968:	3303      	adds	r3, #3
 800d96a:	f023 0303 	bic.w	r3, r3, #3
 800d96e:	4618      	mov	r0, r3
 800d970:	88b9      	ldrh	r1, [r7, #4]
 800d972:	88ba      	ldrh	r2, [r7, #4]
 800d974:	2300      	movs	r3, #0
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	887b      	ldrh	r3, [r7, #2]
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	460b      	mov	r3, r1
 800d97e:	4601      	mov	r1, r0
 800d980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d982:	f7ff ff09 	bl	800d798 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	f003 0303 	and.w	r3, r3, #3
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d010      	beq.n	800d9b4 <pbuf_alloc+0x1c8>
 800d992:	4b0b      	ldr	r3, [pc, #44]	; (800d9c0 <pbuf_alloc+0x1d4>)
 800d994:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d998:	490d      	ldr	r1, [pc, #52]	; (800d9d0 <pbuf_alloc+0x1e4>)
 800d99a:	480b      	ldr	r0, [pc, #44]	; (800d9c8 <pbuf_alloc+0x1dc>)
 800d99c:	f00d ff90 	bl	801b8c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d9a0:	e008      	b.n	800d9b4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d9a2:	4b07      	ldr	r3, [pc, #28]	; (800d9c0 <pbuf_alloc+0x1d4>)
 800d9a4:	f240 1227 	movw	r2, #295	; 0x127
 800d9a8:	490a      	ldr	r1, [pc, #40]	; (800d9d4 <pbuf_alloc+0x1e8>)
 800d9aa:	4807      	ldr	r0, [pc, #28]	; (800d9c8 <pbuf_alloc+0x1dc>)
 800d9ac:	f00d ff88 	bl	801b8c0 <iprintf>
      return NULL;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	e001      	b.n	800d9b8 <pbuf_alloc+0x1cc>
      break;
 800d9b4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3728      	adds	r7, #40	; 0x28
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	0801e12c 	.word	0x0801e12c
 800d9c4:	0801e15c 	.word	0x0801e15c
 800d9c8:	0801e18c 	.word	0x0801e18c
 800d9cc:	0801e1b4 	.word	0x0801e1b4
 800d9d0:	0801e1e8 	.word	0x0801e1e8
 800d9d4:	0801e214 	.word	0x0801e214

0800d9d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af02      	add	r7, sp, #8
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	807b      	strh	r3, [r7, #2]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d9e8:	883b      	ldrh	r3, [r7, #0]
 800d9ea:	2b41      	cmp	r3, #65	; 0x41
 800d9ec:	d009      	beq.n	800da02 <pbuf_alloc_reference+0x2a>
 800d9ee:	883b      	ldrh	r3, [r7, #0]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d006      	beq.n	800da02 <pbuf_alloc_reference+0x2a>
 800d9f4:	4b0f      	ldr	r3, [pc, #60]	; (800da34 <pbuf_alloc_reference+0x5c>)
 800d9f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d9fa:	490f      	ldr	r1, [pc, #60]	; (800da38 <pbuf_alloc_reference+0x60>)
 800d9fc:	480f      	ldr	r0, [pc, #60]	; (800da3c <pbuf_alloc_reference+0x64>)
 800d9fe:	f00d ff5f 	bl	801b8c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800da02:	200b      	movs	r0, #11
 800da04:	f7ff fad4 	bl	800cfb0 <memp_malloc>
 800da08:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800da10:	2300      	movs	r3, #0
 800da12:	e00b      	b.n	800da2c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800da14:	8879      	ldrh	r1, [r7, #2]
 800da16:	887a      	ldrh	r2, [r7, #2]
 800da18:	2300      	movs	r3, #0
 800da1a:	9301      	str	r3, [sp, #4]
 800da1c:	883b      	ldrh	r3, [r7, #0]
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	460b      	mov	r3, r1
 800da22:	6879      	ldr	r1, [r7, #4]
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f7ff feb7 	bl	800d798 <pbuf_init_alloced_pbuf>
  return p;
 800da2a:	68fb      	ldr	r3, [r7, #12]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	0801e12c 	.word	0x0801e12c
 800da38:	0801e230 	.word	0x0801e230
 800da3c:	0801e18c 	.word	0x0801e18c

0800da40 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b088      	sub	sp, #32
 800da44:	af02      	add	r7, sp, #8
 800da46:	607b      	str	r3, [r7, #4]
 800da48:	4603      	mov	r3, r0
 800da4a:	73fb      	strb	r3, [r7, #15]
 800da4c:	460b      	mov	r3, r1
 800da4e:	81bb      	strh	r3, [r7, #12]
 800da50:	4613      	mov	r3, r2
 800da52:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800da54:	7bfb      	ldrb	r3, [r7, #15]
 800da56:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800da58:	8a7b      	ldrh	r3, [r7, #18]
 800da5a:	3303      	adds	r3, #3
 800da5c:	f023 0203 	bic.w	r2, r3, #3
 800da60:	89bb      	ldrh	r3, [r7, #12]
 800da62:	441a      	add	r2, r3
 800da64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da66:	429a      	cmp	r2, r3
 800da68:	d901      	bls.n	800da6e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800da6a:	2300      	movs	r3, #0
 800da6c:	e018      	b.n	800daa0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800da6e:	6a3b      	ldr	r3, [r7, #32]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d007      	beq.n	800da84 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800da74:	8a7b      	ldrh	r3, [r7, #18]
 800da76:	3303      	adds	r3, #3
 800da78:	f023 0303 	bic.w	r3, r3, #3
 800da7c:	6a3a      	ldr	r2, [r7, #32]
 800da7e:	4413      	add	r3, r2
 800da80:	617b      	str	r3, [r7, #20]
 800da82:	e001      	b.n	800da88 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800da84:	2300      	movs	r3, #0
 800da86:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	89b9      	ldrh	r1, [r7, #12]
 800da8c:	89ba      	ldrh	r2, [r7, #12]
 800da8e:	2302      	movs	r3, #2
 800da90:	9301      	str	r3, [sp, #4]
 800da92:	897b      	ldrh	r3, [r7, #10]
 800da94:	9300      	str	r3, [sp, #0]
 800da96:	460b      	mov	r3, r1
 800da98:	6979      	ldr	r1, [r7, #20]
 800da9a:	f7ff fe7d 	bl	800d798 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800da9e:	687b      	ldr	r3, [r7, #4]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3718      	adds	r7, #24
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	460b      	mov	r3, r1
 800dab2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d106      	bne.n	800dac8 <pbuf_realloc+0x20>
 800daba:	4b3a      	ldr	r3, [pc, #232]	; (800dba4 <pbuf_realloc+0xfc>)
 800dabc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dac0:	4939      	ldr	r1, [pc, #228]	; (800dba8 <pbuf_realloc+0x100>)
 800dac2:	483a      	ldr	r0, [pc, #232]	; (800dbac <pbuf_realloc+0x104>)
 800dac4:	f00d fefc 	bl	801b8c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	891b      	ldrh	r3, [r3, #8]
 800dacc:	887a      	ldrh	r2, [r7, #2]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d263      	bcs.n	800db9a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	891a      	ldrh	r2, [r3, #8]
 800dad6:	887b      	ldrh	r3, [r7, #2]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dadc:	887b      	ldrh	r3, [r7, #2]
 800dade:	817b      	strh	r3, [r7, #10]
  q = p;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dae4:	e018      	b.n	800db18 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	895b      	ldrh	r3, [r3, #10]
 800daea:	897a      	ldrh	r2, [r7, #10]
 800daec:	1ad3      	subs	r3, r2, r3
 800daee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	891a      	ldrh	r2, [r3, #8]
 800daf4:	893b      	ldrh	r3, [r7, #8]
 800daf6:	1ad3      	subs	r3, r2, r3
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d106      	bne.n	800db18 <pbuf_realloc+0x70>
 800db0a:	4b26      	ldr	r3, [pc, #152]	; (800dba4 <pbuf_realloc+0xfc>)
 800db0c:	f240 12af 	movw	r2, #431	; 0x1af
 800db10:	4927      	ldr	r1, [pc, #156]	; (800dbb0 <pbuf_realloc+0x108>)
 800db12:	4826      	ldr	r0, [pc, #152]	; (800dbac <pbuf_realloc+0x104>)
 800db14:	f00d fed4 	bl	801b8c0 <iprintf>
  while (rem_len > q->len) {
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	895b      	ldrh	r3, [r3, #10]
 800db1c:	897a      	ldrh	r2, [r7, #10]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d8e1      	bhi.n	800dae6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	7b1b      	ldrb	r3, [r3, #12]
 800db26:	f003 030f 	and.w	r3, r3, #15
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d121      	bne.n	800db72 <pbuf_realloc+0xca>
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	895b      	ldrh	r3, [r3, #10]
 800db32:	897a      	ldrh	r2, [r7, #10]
 800db34:	429a      	cmp	r2, r3
 800db36:	d01c      	beq.n	800db72 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	7b5b      	ldrb	r3, [r3, #13]
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d116      	bne.n	800db72 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	685a      	ldr	r2, [r3, #4]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	b29a      	uxth	r2, r3
 800db4e:	897b      	ldrh	r3, [r7, #10]
 800db50:	4413      	add	r3, r2
 800db52:	b29b      	uxth	r3, r3
 800db54:	4619      	mov	r1, r3
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f7fe ff9e 	bl	800ca98 <mem_trim>
 800db5c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d106      	bne.n	800db72 <pbuf_realloc+0xca>
 800db64:	4b0f      	ldr	r3, [pc, #60]	; (800dba4 <pbuf_realloc+0xfc>)
 800db66:	f240 12bd 	movw	r2, #445	; 0x1bd
 800db6a:	4912      	ldr	r1, [pc, #72]	; (800dbb4 <pbuf_realloc+0x10c>)
 800db6c:	480f      	ldr	r0, [pc, #60]	; (800dbac <pbuf_realloc+0x104>)
 800db6e:	f00d fea7 	bl	801b8c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	897a      	ldrh	r2, [r7, #10]
 800db76:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	895a      	ldrh	r2, [r3, #10]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d004      	beq.n	800db92 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4618      	mov	r0, r3
 800db8e:	f000 f943 	bl	800de18 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	601a      	str	r2, [r3, #0]
 800db98:	e000      	b.n	800db9c <pbuf_realloc+0xf4>
    return;
 800db9a:	bf00      	nop

}
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	0801e12c 	.word	0x0801e12c
 800dba8:	0801e244 	.word	0x0801e244
 800dbac:	0801e18c 	.word	0x0801e18c
 800dbb0:	0801e25c 	.word	0x0801e25c
 800dbb4:	0801e274 	.word	0x0801e274

0800dbb8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d106      	bne.n	800dbda <pbuf_add_header_impl+0x22>
 800dbcc:	4b2b      	ldr	r3, [pc, #172]	; (800dc7c <pbuf_add_header_impl+0xc4>)
 800dbce:	f240 12df 	movw	r2, #479	; 0x1df
 800dbd2:	492b      	ldr	r1, [pc, #172]	; (800dc80 <pbuf_add_header_impl+0xc8>)
 800dbd4:	482b      	ldr	r0, [pc, #172]	; (800dc84 <pbuf_add_header_impl+0xcc>)
 800dbd6:	f00d fe73 	bl	801b8c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d003      	beq.n	800dbe8 <pbuf_add_header_impl+0x30>
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbe6:	d301      	bcc.n	800dbec <pbuf_add_header_impl+0x34>
    return 1;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e043      	b.n	800dc74 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d101      	bne.n	800dbf6 <pbuf_add_header_impl+0x3e>
    return 0;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	e03e      	b.n	800dc74 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	891a      	ldrh	r2, [r3, #8]
 800dbfe:	8a7b      	ldrh	r3, [r7, #18]
 800dc00:	4413      	add	r3, r2
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	8a7a      	ldrh	r2, [r7, #18]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d901      	bls.n	800dc0e <pbuf_add_header_impl+0x56>
    return 1;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e032      	b.n	800dc74 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	7b1b      	ldrb	r3, [r3, #12]
 800dc12:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dc14:	8a3b      	ldrh	r3, [r7, #16]
 800dc16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00c      	beq.n	800dc38 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	685a      	ldr	r2, [r3, #4]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	425b      	negs	r3, r3
 800dc26:	4413      	add	r3, r2
 800dc28:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3310      	adds	r3, #16
 800dc2e:	697a      	ldr	r2, [r7, #20]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d20d      	bcs.n	800dc50 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dc34:	2301      	movs	r3, #1
 800dc36:	e01d      	b.n	800dc74 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d006      	beq.n	800dc4c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	685a      	ldr	r2, [r3, #4]
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	425b      	negs	r3, r3
 800dc46:	4413      	add	r3, r2
 800dc48:	617b      	str	r3, [r7, #20]
 800dc4a:	e001      	b.n	800dc50 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e011      	b.n	800dc74 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	697a      	ldr	r2, [r7, #20]
 800dc54:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	895a      	ldrh	r2, [r3, #10]
 800dc5a:	8a7b      	ldrh	r3, [r7, #18]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	891a      	ldrh	r2, [r3, #8]
 800dc68:	8a7b      	ldrh	r3, [r7, #18]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	b29a      	uxth	r2, r3
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	811a      	strh	r2, [r3, #8]


  return 0;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3718      	adds	r7, #24
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	0801e12c 	.word	0x0801e12c
 800dc80:	0801e290 	.word	0x0801e290
 800dc84:	0801e18c 	.word	0x0801e18c

0800dc88 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dc92:	2200      	movs	r2, #0
 800dc94:	6839      	ldr	r1, [r7, #0]
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff ff8e 	bl	800dbb8 <pbuf_add_header_impl>
 800dc9c:	4603      	mov	r3, r0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
	...

0800dca8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d106      	bne.n	800dcc6 <pbuf_remove_header+0x1e>
 800dcb8:	4b20      	ldr	r3, [pc, #128]	; (800dd3c <pbuf_remove_header+0x94>)
 800dcba:	f240 224b 	movw	r2, #587	; 0x24b
 800dcbe:	4920      	ldr	r1, [pc, #128]	; (800dd40 <pbuf_remove_header+0x98>)
 800dcc0:	4820      	ldr	r0, [pc, #128]	; (800dd44 <pbuf_remove_header+0x9c>)
 800dcc2:	f00d fdfd 	bl	801b8c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d003      	beq.n	800dcd4 <pbuf_remove_header+0x2c>
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcd2:	d301      	bcc.n	800dcd8 <pbuf_remove_header+0x30>
    return 1;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e02c      	b.n	800dd32 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d101      	bne.n	800dce2 <pbuf_remove_header+0x3a>
    return 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	e027      	b.n	800dd32 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	895b      	ldrh	r3, [r3, #10]
 800dcea:	89fa      	ldrh	r2, [r7, #14]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d908      	bls.n	800dd02 <pbuf_remove_header+0x5a>
 800dcf0:	4b12      	ldr	r3, [pc, #72]	; (800dd3c <pbuf_remove_header+0x94>)
 800dcf2:	f240 2255 	movw	r2, #597	; 0x255
 800dcf6:	4914      	ldr	r1, [pc, #80]	; (800dd48 <pbuf_remove_header+0xa0>)
 800dcf8:	4812      	ldr	r0, [pc, #72]	; (800dd44 <pbuf_remove_header+0x9c>)
 800dcfa:	f00d fde1 	bl	801b8c0 <iprintf>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e017      	b.n	800dd32 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	685a      	ldr	r2, [r3, #4]
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	441a      	add	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	895a      	ldrh	r2, [r3, #10]
 800dd18:	89fb      	ldrh	r3, [r7, #14]
 800dd1a:	1ad3      	subs	r3, r2, r3
 800dd1c:	b29a      	uxth	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	891a      	ldrh	r2, [r3, #8]
 800dd26:	89fb      	ldrh	r3, [r7, #14]
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dd30:	2300      	movs	r3, #0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	0801e12c 	.word	0x0801e12c
 800dd40:	0801e290 	.word	0x0801e290
 800dd44:	0801e18c 	.word	0x0801e18c
 800dd48:	0801e29c 	.word	0x0801e29c

0800dd4c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	460b      	mov	r3, r1
 800dd56:	807b      	strh	r3, [r7, #2]
 800dd58:	4613      	mov	r3, r2
 800dd5a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dd5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	da08      	bge.n	800dd76 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dd64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd68:	425b      	negs	r3, r3
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7ff ff9b 	bl	800dca8 <pbuf_remove_header>
 800dd72:	4603      	mov	r3, r0
 800dd74:	e007      	b.n	800dd86 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dd76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd7a:	787a      	ldrb	r2, [r7, #1]
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7ff ff1a 	bl	800dbb8 <pbuf_add_header_impl>
 800dd84:	4603      	mov	r3, r0
  }
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3708      	adds	r7, #8
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b082      	sub	sp, #8
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
 800dd96:	460b      	mov	r3, r1
 800dd98:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dd9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	4619      	mov	r1, r3
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7ff ffd2 	bl	800dd4c <pbuf_header_impl>
 800dda8:	4603      	mov	r3, r0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b086      	sub	sp, #24
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	460b      	mov	r3, r1
 800ddbc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800ddc2:	887b      	ldrh	r3, [r7, #2]
 800ddc4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800ddc6:	e01c      	b.n	800de02 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	895b      	ldrh	r3, [r3, #10]
 800ddcc:	8a7a      	ldrh	r2, [r7, #18]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d310      	bcc.n	800ddf4 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	895b      	ldrh	r3, [r3, #10]
 800ddda:	8a7a      	ldrh	r2, [r7, #18]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f000 f813 	bl	800de18 <pbuf_free>
 800ddf2:	e006      	b.n	800de02 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800ddf4:	8a7b      	ldrh	r3, [r7, #18]
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	6978      	ldr	r0, [r7, #20]
 800ddfa:	f7ff ff55 	bl	800dca8 <pbuf_remove_header>
      free_left = 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800de02:	8a7b      	ldrh	r3, [r7, #18]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <pbuf_free_header+0x5c>
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1dc      	bne.n	800ddc8 <pbuf_free_header+0x16>
    }
  }
  return p;
 800de0e:	697b      	ldr	r3, [r7, #20]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3718      	adds	r7, #24
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b088      	sub	sp, #32
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d10b      	bne.n	800de3e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d106      	bne.n	800de3a <pbuf_free+0x22>
 800de2c:	4b3b      	ldr	r3, [pc, #236]	; (800df1c <pbuf_free+0x104>)
 800de2e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800de32:	493b      	ldr	r1, [pc, #236]	; (800df20 <pbuf_free+0x108>)
 800de34:	483b      	ldr	r0, [pc, #236]	; (800df24 <pbuf_free+0x10c>)
 800de36:	f00d fd43 	bl	801b8c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	e069      	b.n	800df12 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800de3e:	2300      	movs	r3, #0
 800de40:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800de42:	e062      	b.n	800df0a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800de44:	f00b fe3c 	bl	8019ac0 <sys_arch_protect>
 800de48:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	7b9b      	ldrb	r3, [r3, #14]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d106      	bne.n	800de60 <pbuf_free+0x48>
 800de52:	4b32      	ldr	r3, [pc, #200]	; (800df1c <pbuf_free+0x104>)
 800de54:	f240 22f1 	movw	r2, #753	; 0x2f1
 800de58:	4933      	ldr	r1, [pc, #204]	; (800df28 <pbuf_free+0x110>)
 800de5a:	4832      	ldr	r0, [pc, #200]	; (800df24 <pbuf_free+0x10c>)
 800de5c:	f00d fd30 	bl	801b8c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	7b9b      	ldrb	r3, [r3, #14]
 800de64:	3b01      	subs	r3, #1
 800de66:	b2da      	uxtb	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	739a      	strb	r2, [r3, #14]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	7b9b      	ldrb	r3, [r3, #14]
 800de70:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800de72:	69b8      	ldr	r0, [r7, #24]
 800de74:	f00b fe32 	bl	8019adc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800de78:	7dfb      	ldrb	r3, [r7, #23]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d143      	bne.n	800df06 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	7b1b      	ldrb	r3, [r3, #12]
 800de88:	f003 030f 	and.w	r3, r3, #15
 800de8c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	7b5b      	ldrb	r3, [r3, #13]
 800de92:	f003 0302 	and.w	r3, r3, #2
 800de96:	2b00      	cmp	r3, #0
 800de98:	d011      	beq.n	800debe <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d106      	bne.n	800deb4 <pbuf_free+0x9c>
 800dea6:	4b1d      	ldr	r3, [pc, #116]	; (800df1c <pbuf_free+0x104>)
 800dea8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800deac:	491f      	ldr	r1, [pc, #124]	; (800df2c <pbuf_free+0x114>)
 800deae:	481d      	ldr	r0, [pc, #116]	; (800df24 <pbuf_free+0x10c>)
 800deb0:	f00d fd06 	bl	801b8c0 <iprintf>
        pc->custom_free_function(p);
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	4798      	blx	r3
 800debc:	e01d      	b.n	800defa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800debe:	7bfb      	ldrb	r3, [r7, #15]
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d104      	bne.n	800dece <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800dec4:	6879      	ldr	r1, [r7, #4]
 800dec6:	200c      	movs	r0, #12
 800dec8:	f7ff f8c4 	bl	800d054 <memp_free>
 800decc:	e015      	b.n	800defa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dece:	7bfb      	ldrb	r3, [r7, #15]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d104      	bne.n	800dede <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ded4:	6879      	ldr	r1, [r7, #4]
 800ded6:	200b      	movs	r0, #11
 800ded8:	f7ff f8bc 	bl	800d054 <memp_free>
 800dedc:	e00d      	b.n	800defa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dede:	7bfb      	ldrb	r3, [r7, #15]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d103      	bne.n	800deec <pbuf_free+0xd4>
          mem_free(p);
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f7fe fd47 	bl	800c978 <mem_free>
 800deea:	e006      	b.n	800defa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800deec:	4b0b      	ldr	r3, [pc, #44]	; (800df1c <pbuf_free+0x104>)
 800deee:	f240 320f 	movw	r2, #783	; 0x30f
 800def2:	490f      	ldr	r1, [pc, #60]	; (800df30 <pbuf_free+0x118>)
 800def4:	480b      	ldr	r0, [pc, #44]	; (800df24 <pbuf_free+0x10c>)
 800def6:	f00d fce3 	bl	801b8c0 <iprintf>
        }
      }
      count++;
 800defa:	7ffb      	ldrb	r3, [r7, #31]
 800defc:	3301      	adds	r3, #1
 800defe:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	607b      	str	r3, [r7, #4]
 800df04:	e001      	b.n	800df0a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800df06:	2300      	movs	r3, #0
 800df08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d199      	bne.n	800de44 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800df10:	7ffb      	ldrb	r3, [r7, #31]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3720      	adds	r7, #32
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	0801e12c 	.word	0x0801e12c
 800df20:	0801e290 	.word	0x0801e290
 800df24:	0801e18c 	.word	0x0801e18c
 800df28:	0801e2bc 	.word	0x0801e2bc
 800df2c:	0801e2d4 	.word	0x0801e2d4
 800df30:	0801e2f8 	.word	0x0801e2f8

0800df34 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800df34:	b480      	push	{r7}
 800df36:	b085      	sub	sp, #20
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800df3c:	2300      	movs	r3, #0
 800df3e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800df40:	e005      	b.n	800df4e <pbuf_clen+0x1a>
    ++len;
 800df42:	89fb      	ldrh	r3, [r7, #14]
 800df44:	3301      	adds	r3, #1
 800df46:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1f6      	bne.n	800df42 <pbuf_clen+0xe>
  }
  return len;
 800df54:	89fb      	ldrh	r3, [r7, #14]
}
 800df56:	4618      	mov	r0, r3
 800df58:	3714      	adds	r7, #20
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
	...

0800df64 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d016      	beq.n	800dfa0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800df72:	f00b fda5 	bl	8019ac0 <sys_arch_protect>
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	7b9b      	ldrb	r3, [r3, #14]
 800df7c:	3301      	adds	r3, #1
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	739a      	strb	r2, [r3, #14]
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f00b fda9 	bl	8019adc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	7b9b      	ldrb	r3, [r3, #14]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d106      	bne.n	800dfa0 <pbuf_ref+0x3c>
 800df92:	4b05      	ldr	r3, [pc, #20]	; (800dfa8 <pbuf_ref+0x44>)
 800df94:	f240 3242 	movw	r2, #834	; 0x342
 800df98:	4904      	ldr	r1, [pc, #16]	; (800dfac <pbuf_ref+0x48>)
 800df9a:	4805      	ldr	r0, [pc, #20]	; (800dfb0 <pbuf_ref+0x4c>)
 800df9c:	f00d fc90 	bl	801b8c0 <iprintf>
  }
}
 800dfa0:	bf00      	nop
 800dfa2:	3710      	adds	r7, #16
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	0801e12c 	.word	0x0801e12c
 800dfac:	0801e30c 	.word	0x0801e30c
 800dfb0:	0801e18c 	.word	0x0801e18c

0800dfb4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <pbuf_cat+0x16>
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d107      	bne.n	800dfda <pbuf_cat+0x26>
 800dfca:	4b20      	ldr	r3, [pc, #128]	; (800e04c <pbuf_cat+0x98>)
 800dfcc:	f240 3259 	movw	r2, #857	; 0x359
 800dfd0:	491f      	ldr	r1, [pc, #124]	; (800e050 <pbuf_cat+0x9c>)
 800dfd2:	4820      	ldr	r0, [pc, #128]	; (800e054 <pbuf_cat+0xa0>)
 800dfd4:	f00d fc74 	bl	801b8c0 <iprintf>
 800dfd8:	e034      	b.n	800e044 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	60fb      	str	r3, [r7, #12]
 800dfde:	e00a      	b.n	800dff6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	891a      	ldrh	r2, [r3, #8]
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	891b      	ldrh	r3, [r3, #8]
 800dfe8:	4413      	add	r3, r2
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	60fb      	str	r3, [r7, #12]
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d1f0      	bne.n	800dfe0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	891a      	ldrh	r2, [r3, #8]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	895b      	ldrh	r3, [r3, #10]
 800e006:	429a      	cmp	r2, r3
 800e008:	d006      	beq.n	800e018 <pbuf_cat+0x64>
 800e00a:	4b10      	ldr	r3, [pc, #64]	; (800e04c <pbuf_cat+0x98>)
 800e00c:	f240 3262 	movw	r2, #866	; 0x362
 800e010:	4911      	ldr	r1, [pc, #68]	; (800e058 <pbuf_cat+0xa4>)
 800e012:	4810      	ldr	r0, [pc, #64]	; (800e054 <pbuf_cat+0xa0>)
 800e014:	f00d fc54 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d006      	beq.n	800e02e <pbuf_cat+0x7a>
 800e020:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <pbuf_cat+0x98>)
 800e022:	f240 3263 	movw	r2, #867	; 0x363
 800e026:	490d      	ldr	r1, [pc, #52]	; (800e05c <pbuf_cat+0xa8>)
 800e028:	480a      	ldr	r0, [pc, #40]	; (800e054 <pbuf_cat+0xa0>)
 800e02a:	f00d fc49 	bl	801b8c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	891a      	ldrh	r2, [r3, #8]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	891b      	ldrh	r3, [r3, #8]
 800e036:	4413      	add	r3, r2
 800e038:	b29a      	uxth	r2, r3
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	0801e12c 	.word	0x0801e12c
 800e050:	0801e320 	.word	0x0801e320
 800e054:	0801e18c 	.word	0x0801e18c
 800e058:	0801e358 	.word	0x0801e358
 800e05c:	0801e388 	.word	0x0801e388

0800e060 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e06a:	6839      	ldr	r1, [r7, #0]
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7ff ffa1 	bl	800dfb4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e072:	6838      	ldr	r0, [r7, #0]
 800e074:	f7ff ff76 	bl	800df64 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e078:	bf00      	nop
 800e07a:	3708      	adds	r7, #8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e08a:	2300      	movs	r3, #0
 800e08c:	617b      	str	r3, [r7, #20]
 800e08e:	2300      	movs	r3, #0
 800e090:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d008      	beq.n	800e0aa <pbuf_copy+0x2a>
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d005      	beq.n	800e0aa <pbuf_copy+0x2a>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	891a      	ldrh	r2, [r3, #8]
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	891b      	ldrh	r3, [r3, #8]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d209      	bcs.n	800e0be <pbuf_copy+0x3e>
 800e0aa:	4b57      	ldr	r3, [pc, #348]	; (800e208 <pbuf_copy+0x188>)
 800e0ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e0b0:	4956      	ldr	r1, [pc, #344]	; (800e20c <pbuf_copy+0x18c>)
 800e0b2:	4857      	ldr	r0, [pc, #348]	; (800e210 <pbuf_copy+0x190>)
 800e0b4:	f00d fc04 	bl	801b8c0 <iprintf>
 800e0b8:	f06f 030f 	mvn.w	r3, #15
 800e0bc:	e09f      	b.n	800e1fe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	895b      	ldrh	r3, [r3, #10]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	1ad2      	subs	r2, r2, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	895b      	ldrh	r3, [r3, #10]
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	1acb      	subs	r3, r1, r3
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d306      	bcc.n	800e0e4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	895b      	ldrh	r3, [r3, #10]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	60fb      	str	r3, [r7, #12]
 800e0e2:	e005      	b.n	800e0f0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	895b      	ldrh	r3, [r3, #10]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685a      	ldr	r2, [r3, #4]
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	18d0      	adds	r0, r2, r3
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	685a      	ldr	r2, [r3, #4]
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	4413      	add	r3, r2
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	4619      	mov	r1, r3
 800e104:	f00d fbc6 	bl	801b894 <memcpy>
    offset_to += len;
 800e108:	697a      	ldr	r2, [r7, #20]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	4413      	add	r3, r2
 800e10e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e110:	693a      	ldr	r2, [r7, #16]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	4413      	add	r3, r2
 800e116:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	895b      	ldrh	r3, [r3, #10]
 800e11c:	461a      	mov	r2, r3
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	4293      	cmp	r3, r2
 800e122:	d906      	bls.n	800e132 <pbuf_copy+0xb2>
 800e124:	4b38      	ldr	r3, [pc, #224]	; (800e208 <pbuf_copy+0x188>)
 800e126:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e12a:	493a      	ldr	r1, [pc, #232]	; (800e214 <pbuf_copy+0x194>)
 800e12c:	4838      	ldr	r0, [pc, #224]	; (800e210 <pbuf_copy+0x190>)
 800e12e:	f00d fbc7 	bl	801b8c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	895b      	ldrh	r3, [r3, #10]
 800e136:	461a      	mov	r2, r3
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d906      	bls.n	800e14c <pbuf_copy+0xcc>
 800e13e:	4b32      	ldr	r3, [pc, #200]	; (800e208 <pbuf_copy+0x188>)
 800e140:	f240 32da 	movw	r2, #986	; 0x3da
 800e144:	4934      	ldr	r1, [pc, #208]	; (800e218 <pbuf_copy+0x198>)
 800e146:	4832      	ldr	r0, [pc, #200]	; (800e210 <pbuf_copy+0x190>)
 800e148:	f00d fbba 	bl	801b8c0 <iprintf>
    if (offset_from >= p_from->len) {
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	895b      	ldrh	r3, [r3, #10]
 800e150:	461a      	mov	r2, r3
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	4293      	cmp	r3, r2
 800e156:	d304      	bcc.n	800e162 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e158:	2300      	movs	r3, #0
 800e15a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	895b      	ldrh	r3, [r3, #10]
 800e166:	461a      	mov	r2, r3
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d114      	bne.n	800e198 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d10c      	bne.n	800e198 <pbuf_copy+0x118>
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d009      	beq.n	800e198 <pbuf_copy+0x118>
 800e184:	4b20      	ldr	r3, [pc, #128]	; (800e208 <pbuf_copy+0x188>)
 800e186:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e18a:	4924      	ldr	r1, [pc, #144]	; (800e21c <pbuf_copy+0x19c>)
 800e18c:	4820      	ldr	r0, [pc, #128]	; (800e210 <pbuf_copy+0x190>)
 800e18e:	f00d fb97 	bl	801b8c0 <iprintf>
 800e192:	f06f 030f 	mvn.w	r3, #15
 800e196:	e032      	b.n	800e1fe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d013      	beq.n	800e1c6 <pbuf_copy+0x146>
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	895a      	ldrh	r2, [r3, #10]
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	891b      	ldrh	r3, [r3, #8]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d10d      	bne.n	800e1c6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d009      	beq.n	800e1c6 <pbuf_copy+0x146>
 800e1b2:	4b15      	ldr	r3, [pc, #84]	; (800e208 <pbuf_copy+0x188>)
 800e1b4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e1b8:	4919      	ldr	r1, [pc, #100]	; (800e220 <pbuf_copy+0x1a0>)
 800e1ba:	4815      	ldr	r0, [pc, #84]	; (800e210 <pbuf_copy+0x190>)
 800e1bc:	f00d fb80 	bl	801b8c0 <iprintf>
 800e1c0:	f06f 0305 	mvn.w	r3, #5
 800e1c4:	e01b      	b.n	800e1fe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d013      	beq.n	800e1f4 <pbuf_copy+0x174>
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	895a      	ldrh	r2, [r3, #10]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	891b      	ldrh	r3, [r3, #8]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d10d      	bne.n	800e1f4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d009      	beq.n	800e1f4 <pbuf_copy+0x174>
 800e1e0:	4b09      	ldr	r3, [pc, #36]	; (800e208 <pbuf_copy+0x188>)
 800e1e2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e1e6:	490e      	ldr	r1, [pc, #56]	; (800e220 <pbuf_copy+0x1a0>)
 800e1e8:	4809      	ldr	r0, [pc, #36]	; (800e210 <pbuf_copy+0x190>)
 800e1ea:	f00d fb69 	bl	801b8c0 <iprintf>
 800e1ee:	f06f 0305 	mvn.w	r3, #5
 800e1f2:	e004      	b.n	800e1fe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f47f af61 	bne.w	800e0be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3718      	adds	r7, #24
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	0801e12c 	.word	0x0801e12c
 800e20c:	0801e3d4 	.word	0x0801e3d4
 800e210:	0801e18c 	.word	0x0801e18c
 800e214:	0801e404 	.word	0x0801e404
 800e218:	0801e41c 	.word	0x0801e41c
 800e21c:	0801e438 	.word	0x0801e438
 800e220:	0801e448 	.word	0x0801e448

0800e224 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	4611      	mov	r1, r2
 800e230:	461a      	mov	r2, r3
 800e232:	460b      	mov	r3, r1
 800e234:	80fb      	strh	r3, [r7, #6]
 800e236:	4613      	mov	r3, r2
 800e238:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d108      	bne.n	800e25a <pbuf_copy_partial+0x36>
 800e248:	4b2b      	ldr	r3, [pc, #172]	; (800e2f8 <pbuf_copy_partial+0xd4>)
 800e24a:	f240 420a 	movw	r2, #1034	; 0x40a
 800e24e:	492b      	ldr	r1, [pc, #172]	; (800e2fc <pbuf_copy_partial+0xd8>)
 800e250:	482b      	ldr	r0, [pc, #172]	; (800e300 <pbuf_copy_partial+0xdc>)
 800e252:	f00d fb35 	bl	801b8c0 <iprintf>
 800e256:	2300      	movs	r3, #0
 800e258:	e04a      	b.n	800e2f0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d108      	bne.n	800e272 <pbuf_copy_partial+0x4e>
 800e260:	4b25      	ldr	r3, [pc, #148]	; (800e2f8 <pbuf_copy_partial+0xd4>)
 800e262:	f240 420b 	movw	r2, #1035	; 0x40b
 800e266:	4927      	ldr	r1, [pc, #156]	; (800e304 <pbuf_copy_partial+0xe0>)
 800e268:	4825      	ldr	r0, [pc, #148]	; (800e300 <pbuf_copy_partial+0xdc>)
 800e26a:	f00d fb29 	bl	801b8c0 <iprintf>
 800e26e:	2300      	movs	r3, #0
 800e270:	e03e      	b.n	800e2f0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	61fb      	str	r3, [r7, #28]
 800e276:	e034      	b.n	800e2e2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e278:	88bb      	ldrh	r3, [r7, #4]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d00a      	beq.n	800e294 <pbuf_copy_partial+0x70>
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	895b      	ldrh	r3, [r3, #10]
 800e282:	88ba      	ldrh	r2, [r7, #4]
 800e284:	429a      	cmp	r2, r3
 800e286:	d305      	bcc.n	800e294 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	895b      	ldrh	r3, [r3, #10]
 800e28c:	88ba      	ldrh	r2, [r7, #4]
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	80bb      	strh	r3, [r7, #4]
 800e292:	e023      	b.n	800e2dc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	895a      	ldrh	r2, [r3, #10]
 800e298:	88bb      	ldrh	r3, [r7, #4]
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e29e:	8b3a      	ldrh	r2, [r7, #24]
 800e2a0:	88fb      	ldrh	r3, [r7, #6]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d901      	bls.n	800e2aa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e2a6:	88fb      	ldrh	r3, [r7, #6]
 800e2a8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e2aa:	8b7b      	ldrh	r3, [r7, #26]
 800e2ac:	68ba      	ldr	r2, [r7, #8]
 800e2ae:	18d0      	adds	r0, r2, r3
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	685a      	ldr	r2, [r3, #4]
 800e2b4:	88bb      	ldrh	r3, [r7, #4]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	8b3a      	ldrh	r2, [r7, #24]
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	f00d faea 	bl	801b894 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e2c0:	8afa      	ldrh	r2, [r7, #22]
 800e2c2:	8b3b      	ldrh	r3, [r7, #24]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e2c8:	8b7a      	ldrh	r2, [r7, #26]
 800e2ca:	8b3b      	ldrh	r3, [r7, #24]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e2d0:	88fa      	ldrh	r2, [r7, #6]
 800e2d2:	8b3b      	ldrh	r3, [r7, #24]
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	61fb      	str	r3, [r7, #28]
 800e2e2:	88fb      	ldrh	r3, [r7, #6]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d002      	beq.n	800e2ee <pbuf_copy_partial+0xca>
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1c4      	bne.n	800e278 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e2ee:	8afb      	ldrh	r3, [r7, #22]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3720      	adds	r7, #32
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	0801e12c 	.word	0x0801e12c
 800e2fc:	0801e474 	.word	0x0801e474
 800e300:	0801e18c 	.word	0x0801e18c
 800e304:	0801e494 	.word	0x0801e494

0800e308 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	4603      	mov	r3, r0
 800e310:	603a      	str	r2, [r7, #0]
 800e312:	71fb      	strb	r3, [r7, #7]
 800e314:	460b      	mov	r3, r1
 800e316:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	8919      	ldrh	r1, [r3, #8]
 800e31c:	88ba      	ldrh	r2, [r7, #4]
 800e31e:	79fb      	ldrb	r3, [r7, #7]
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff fa63 	bl	800d7ec <pbuf_alloc>
 800e326:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d101      	bne.n	800e332 <pbuf_clone+0x2a>
    return NULL;
 800e32e:	2300      	movs	r3, #0
 800e330:	e011      	b.n	800e356 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e332:	6839      	ldr	r1, [r7, #0]
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	f7ff fea3 	bl	800e080 <pbuf_copy>
 800e33a:	4603      	mov	r3, r0
 800e33c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e33e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d006      	beq.n	800e354 <pbuf_clone+0x4c>
 800e346:	4b06      	ldr	r3, [pc, #24]	; (800e360 <pbuf_clone+0x58>)
 800e348:	f240 5224 	movw	r2, #1316	; 0x524
 800e34c:	4905      	ldr	r1, [pc, #20]	; (800e364 <pbuf_clone+0x5c>)
 800e34e:	4806      	ldr	r0, [pc, #24]	; (800e368 <pbuf_clone+0x60>)
 800e350:	f00d fab6 	bl	801b8c0 <iprintf>
  return q;
 800e354:	68fb      	ldr	r3, [r7, #12]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	0801e12c 	.word	0x0801e12c
 800e364:	0801e5a0 	.word	0x0801e5a0
 800e368:	0801e18c 	.word	0x0801e18c

0800e36c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e370:	f00d fb34 	bl	801b9dc <rand>
 800e374:	4603      	mov	r3, r0
 800e376:	b29b      	uxth	r3, r3
 800e378:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e382:	b29a      	uxth	r2, r3
 800e384:	4b01      	ldr	r3, [pc, #4]	; (800e38c <tcp_init+0x20>)
 800e386:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e388:	bf00      	nop
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	20000010 	.word	0x20000010

0800e390 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	7d1b      	ldrb	r3, [r3, #20]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d105      	bne.n	800e3ac <tcp_free+0x1c>
 800e3a0:	4b06      	ldr	r3, [pc, #24]	; (800e3bc <tcp_free+0x2c>)
 800e3a2:	22d4      	movs	r2, #212	; 0xd4
 800e3a4:	4906      	ldr	r1, [pc, #24]	; (800e3c0 <tcp_free+0x30>)
 800e3a6:	4807      	ldr	r0, [pc, #28]	; (800e3c4 <tcp_free+0x34>)
 800e3a8:	f00d fa8a 	bl	801b8c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	2001      	movs	r0, #1
 800e3b0:	f7fe fe50 	bl	800d054 <memp_free>
}
 800e3b4:	bf00      	nop
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	0801e62c 	.word	0x0801e62c
 800e3c0:	0801e65c 	.word	0x0801e65c
 800e3c4:	0801e670 	.word	0x0801e670

0800e3c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	7d1b      	ldrb	r3, [r3, #20]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d105      	bne.n	800e3e4 <tcp_free_listen+0x1c>
 800e3d8:	4b06      	ldr	r3, [pc, #24]	; (800e3f4 <tcp_free_listen+0x2c>)
 800e3da:	22df      	movs	r2, #223	; 0xdf
 800e3dc:	4906      	ldr	r1, [pc, #24]	; (800e3f8 <tcp_free_listen+0x30>)
 800e3de:	4807      	ldr	r0, [pc, #28]	; (800e3fc <tcp_free_listen+0x34>)
 800e3e0:	f00d fa6e 	bl	801b8c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e3e4:	6879      	ldr	r1, [r7, #4]
 800e3e6:	2002      	movs	r0, #2
 800e3e8:	f7fe fe34 	bl	800d054 <memp_free>
}
 800e3ec:	bf00      	nop
 800e3ee:	3708      	adds	r7, #8
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	0801e62c 	.word	0x0801e62c
 800e3f8:	0801e698 	.word	0x0801e698
 800e3fc:	0801e670 	.word	0x0801e670

0800e400 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e404:	f001 f85c 	bl	800f4c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e408:	4b07      	ldr	r3, [pc, #28]	; (800e428 <tcp_tmr+0x28>)
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	3301      	adds	r3, #1
 800e40e:	b2da      	uxtb	r2, r3
 800e410:	4b05      	ldr	r3, [pc, #20]	; (800e428 <tcp_tmr+0x28>)
 800e412:	701a      	strb	r2, [r3, #0]
 800e414:	4b04      	ldr	r3, [pc, #16]	; (800e428 <tcp_tmr+0x28>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	f003 0301 	and.w	r3, r3, #1
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d001      	beq.n	800e424 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e420:	f000 fd0e 	bl	800ee40 <tcp_slowtmr>
  }
}
 800e424:	bf00      	nop
 800e426:	bd80      	pop	{r7, pc}
 800e428:	20008ae1 	.word	0x20008ae1

0800e42c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b084      	sub	sp, #16
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d105      	bne.n	800e448 <tcp_remove_listener+0x1c>
 800e43c:	4b0d      	ldr	r3, [pc, #52]	; (800e474 <tcp_remove_listener+0x48>)
 800e43e:	22ff      	movs	r2, #255	; 0xff
 800e440:	490d      	ldr	r1, [pc, #52]	; (800e478 <tcp_remove_listener+0x4c>)
 800e442:	480e      	ldr	r0, [pc, #56]	; (800e47c <tcp_remove_listener+0x50>)
 800e444:	f00d fa3c 	bl	801b8c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	60fb      	str	r3, [r7, #12]
 800e44c:	e00a      	b.n	800e464 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e452:	683a      	ldr	r2, [r7, #0]
 800e454:	429a      	cmp	r2, r3
 800e456:	d102      	bne.n	800e45e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	60fb      	str	r3, [r7, #12]
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1f1      	bne.n	800e44e <tcp_remove_listener+0x22>
    }
  }
}
 800e46a:	bf00      	nop
 800e46c:	bf00      	nop
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	0801e62c 	.word	0x0801e62c
 800e478:	0801e6b4 	.word	0x0801e6b4
 800e47c:	0801e670 	.word	0x0801e670

0800e480 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d106      	bne.n	800e49c <tcp_listen_closed+0x1c>
 800e48e:	4b14      	ldr	r3, [pc, #80]	; (800e4e0 <tcp_listen_closed+0x60>)
 800e490:	f240 1211 	movw	r2, #273	; 0x111
 800e494:	4913      	ldr	r1, [pc, #76]	; (800e4e4 <tcp_listen_closed+0x64>)
 800e496:	4814      	ldr	r0, [pc, #80]	; (800e4e8 <tcp_listen_closed+0x68>)
 800e498:	f00d fa12 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	7d1b      	ldrb	r3, [r3, #20]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d006      	beq.n	800e4b2 <tcp_listen_closed+0x32>
 800e4a4:	4b0e      	ldr	r3, [pc, #56]	; (800e4e0 <tcp_listen_closed+0x60>)
 800e4a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e4aa:	4910      	ldr	r1, [pc, #64]	; (800e4ec <tcp_listen_closed+0x6c>)
 800e4ac:	480e      	ldr	r0, [pc, #56]	; (800e4e8 <tcp_listen_closed+0x68>)
 800e4ae:	f00d fa07 	bl	801b8c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	60fb      	str	r3, [r7, #12]
 800e4b6:	e00b      	b.n	800e4d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e4b8:	4a0d      	ldr	r2, [pc, #52]	; (800e4f0 <tcp_listen_closed+0x70>)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	6879      	ldr	r1, [r7, #4]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7ff ffb1 	bl	800e42c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	60fb      	str	r3, [r7, #12]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d9f0      	bls.n	800e4b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e4d6:	bf00      	nop
 800e4d8:	bf00      	nop
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	0801e62c 	.word	0x0801e62c
 800e4e4:	0801e6dc 	.word	0x0801e6dc
 800e4e8:	0801e670 	.word	0x0801e670
 800e4ec:	0801e6e8 	.word	0x0801e6e8
 800e4f0:	08020b00 	.word	0x08020b00

0800e4f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e4f4:	b5b0      	push	{r4, r5, r7, lr}
 800e4f6:	b088      	sub	sp, #32
 800e4f8:	af04      	add	r7, sp, #16
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d106      	bne.n	800e514 <tcp_close_shutdown+0x20>
 800e506:	4b63      	ldr	r3, [pc, #396]	; (800e694 <tcp_close_shutdown+0x1a0>)
 800e508:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e50c:	4962      	ldr	r1, [pc, #392]	; (800e698 <tcp_close_shutdown+0x1a4>)
 800e50e:	4863      	ldr	r0, [pc, #396]	; (800e69c <tcp_close_shutdown+0x1a8>)
 800e510:	f00d f9d6 	bl	801b8c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e514:	78fb      	ldrb	r3, [r7, #3]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d066      	beq.n	800e5e8 <tcp_close_shutdown+0xf4>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	7d1b      	ldrb	r3, [r3, #20]
 800e51e:	2b04      	cmp	r3, #4
 800e520:	d003      	beq.n	800e52a <tcp_close_shutdown+0x36>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	7d1b      	ldrb	r3, [r3, #20]
 800e526:	2b07      	cmp	r3, #7
 800e528:	d15e      	bne.n	800e5e8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d104      	bne.n	800e53c <tcp_close_shutdown+0x48>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e536:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e53a:	d055      	beq.n	800e5e8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	8b5b      	ldrh	r3, [r3, #26]
 800e540:	f003 0310 	and.w	r3, r3, #16
 800e544:	2b00      	cmp	r3, #0
 800e546:	d106      	bne.n	800e556 <tcp_close_shutdown+0x62>
 800e548:	4b52      	ldr	r3, [pc, #328]	; (800e694 <tcp_close_shutdown+0x1a0>)
 800e54a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e54e:	4954      	ldr	r1, [pc, #336]	; (800e6a0 <tcp_close_shutdown+0x1ac>)
 800e550:	4852      	ldr	r0, [pc, #328]	; (800e69c <tcp_close_shutdown+0x1a8>)
 800e552:	f00d f9b5 	bl	801b8c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e55e:	687d      	ldr	r5, [r7, #4]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	3304      	adds	r3, #4
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	8ad2      	ldrh	r2, [r2, #22]
 800e568:	6879      	ldr	r1, [r7, #4]
 800e56a:	8b09      	ldrh	r1, [r1, #24]
 800e56c:	9102      	str	r1, [sp, #8]
 800e56e:	9201      	str	r2, [sp, #4]
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	462b      	mov	r3, r5
 800e574:	4622      	mov	r2, r4
 800e576:	4601      	mov	r1, r0
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f005 fd6d 	bl	8014058 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f001 fb4e 	bl	800fc20 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e584:	4b47      	ldr	r3, [pc, #284]	; (800e6a4 <tcp_close_shutdown+0x1b0>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d105      	bne.n	800e59a <tcp_close_shutdown+0xa6>
 800e58e:	4b45      	ldr	r3, [pc, #276]	; (800e6a4 <tcp_close_shutdown+0x1b0>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	4a43      	ldr	r2, [pc, #268]	; (800e6a4 <tcp_close_shutdown+0x1b0>)
 800e596:	6013      	str	r3, [r2, #0]
 800e598:	e013      	b.n	800e5c2 <tcp_close_shutdown+0xce>
 800e59a:	4b42      	ldr	r3, [pc, #264]	; (800e6a4 <tcp_close_shutdown+0x1b0>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	60fb      	str	r3, [r7, #12]
 800e5a0:	e00c      	b.n	800e5bc <tcp_close_shutdown+0xc8>
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d104      	bne.n	800e5b6 <tcp_close_shutdown+0xc2>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	68da      	ldr	r2, [r3, #12]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	60da      	str	r2, [r3, #12]
 800e5b4:	e005      	b.n	800e5c2 <tcp_close_shutdown+0xce>
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	60fb      	str	r3, [r7, #12]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1ef      	bne.n	800e5a2 <tcp_close_shutdown+0xae>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	60da      	str	r2, [r3, #12]
 800e5c8:	4b37      	ldr	r3, [pc, #220]	; (800e6a8 <tcp_close_shutdown+0x1b4>)
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e5ce:	4b37      	ldr	r3, [pc, #220]	; (800e6ac <tcp_close_shutdown+0x1b8>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d102      	bne.n	800e5de <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e5d8:	f003 ffe2 	bl	80125a0 <tcp_trigger_input_pcb_close>
 800e5dc:	e002      	b.n	800e5e4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7ff fed6 	bl	800e390 <tcp_free>
      }
      return ERR_OK;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	e050      	b.n	800e68a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	7d1b      	ldrb	r3, [r3, #20]
 800e5ec:	2b02      	cmp	r3, #2
 800e5ee:	d03b      	beq.n	800e668 <tcp_close_shutdown+0x174>
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	dc44      	bgt.n	800e67e <tcp_close_shutdown+0x18a>
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <tcp_close_shutdown+0x10a>
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d02a      	beq.n	800e652 <tcp_close_shutdown+0x15e>
 800e5fc:	e03f      	b.n	800e67e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	8adb      	ldrh	r3, [r3, #22]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d021      	beq.n	800e64a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e606:	4b2a      	ldr	r3, [pc, #168]	; (800e6b0 <tcp_close_shutdown+0x1bc>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d105      	bne.n	800e61c <tcp_close_shutdown+0x128>
 800e610:	4b27      	ldr	r3, [pc, #156]	; (800e6b0 <tcp_close_shutdown+0x1bc>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	68db      	ldr	r3, [r3, #12]
 800e616:	4a26      	ldr	r2, [pc, #152]	; (800e6b0 <tcp_close_shutdown+0x1bc>)
 800e618:	6013      	str	r3, [r2, #0]
 800e61a:	e013      	b.n	800e644 <tcp_close_shutdown+0x150>
 800e61c:	4b24      	ldr	r3, [pc, #144]	; (800e6b0 <tcp_close_shutdown+0x1bc>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	60bb      	str	r3, [r7, #8]
 800e622:	e00c      	b.n	800e63e <tcp_close_shutdown+0x14a>
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d104      	bne.n	800e638 <tcp_close_shutdown+0x144>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68da      	ldr	r2, [r3, #12]
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	60da      	str	r2, [r3, #12]
 800e636:	e005      	b.n	800e644 <tcp_close_shutdown+0x150>
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	60bb      	str	r3, [r7, #8]
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d1ef      	bne.n	800e624 <tcp_close_shutdown+0x130>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7ff fea0 	bl	800e390 <tcp_free>
      break;
 800e650:	e01a      	b.n	800e688 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7ff ff14 	bl	800e480 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e658:	6879      	ldr	r1, [r7, #4]
 800e65a:	4816      	ldr	r0, [pc, #88]	; (800e6b4 <tcp_close_shutdown+0x1c0>)
 800e65c:	f001 fb30 	bl	800fcc0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f7ff feb1 	bl	800e3c8 <tcp_free_listen>
      break;
 800e666:	e00f      	b.n	800e688 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e668:	6879      	ldr	r1, [r7, #4]
 800e66a:	480e      	ldr	r0, [pc, #56]	; (800e6a4 <tcp_close_shutdown+0x1b0>)
 800e66c:	f001 fb28 	bl	800fcc0 <tcp_pcb_remove>
 800e670:	4b0d      	ldr	r3, [pc, #52]	; (800e6a8 <tcp_close_shutdown+0x1b4>)
 800e672:	2201      	movs	r2, #1
 800e674:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f7ff fe8a 	bl	800e390 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e67c:	e004      	b.n	800e688 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f81a 	bl	800e6b8 <tcp_close_shutdown_fin>
 800e684:	4603      	mov	r3, r0
 800e686:	e000      	b.n	800e68a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bdb0      	pop	{r4, r5, r7, pc}
 800e692:	bf00      	nop
 800e694:	0801e62c 	.word	0x0801e62c
 800e698:	0801e700 	.word	0x0801e700
 800e69c:	0801e670 	.word	0x0801e670
 800e6a0:	0801e720 	.word	0x0801e720
 800e6a4:	20010660 	.word	0x20010660
 800e6a8:	2001065c 	.word	0x2001065c
 800e6ac:	20010674 	.word	0x20010674
 800e6b0:	2001066c 	.word	0x2001066c
 800e6b4:	20010668 	.word	0x20010668

0800e6b8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d106      	bne.n	800e6d4 <tcp_close_shutdown_fin+0x1c>
 800e6c6:	4b2e      	ldr	r3, [pc, #184]	; (800e780 <tcp_close_shutdown_fin+0xc8>)
 800e6c8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e6cc:	492d      	ldr	r1, [pc, #180]	; (800e784 <tcp_close_shutdown_fin+0xcc>)
 800e6ce:	482e      	ldr	r0, [pc, #184]	; (800e788 <tcp_close_shutdown_fin+0xd0>)
 800e6d0:	f00d f8f6 	bl	801b8c0 <iprintf>

  switch (pcb->state) {
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	7d1b      	ldrb	r3, [r3, #20]
 800e6d8:	2b07      	cmp	r3, #7
 800e6da:	d020      	beq.n	800e71e <tcp_close_shutdown_fin+0x66>
 800e6dc:	2b07      	cmp	r3, #7
 800e6de:	dc2b      	bgt.n	800e738 <tcp_close_shutdown_fin+0x80>
 800e6e0:	2b03      	cmp	r3, #3
 800e6e2:	d002      	beq.n	800e6ea <tcp_close_shutdown_fin+0x32>
 800e6e4:	2b04      	cmp	r3, #4
 800e6e6:	d00d      	beq.n	800e704 <tcp_close_shutdown_fin+0x4c>
 800e6e8:	e026      	b.n	800e738 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f004 fdc2 	bl	8013274 <tcp_send_fin>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d11f      	bne.n	800e73c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2205      	movs	r2, #5
 800e700:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e702:	e01b      	b.n	800e73c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f004 fdb5 	bl	8013274 <tcp_send_fin>
 800e70a:	4603      	mov	r3, r0
 800e70c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d114      	bne.n	800e740 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2205      	movs	r2, #5
 800e71a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e71c:	e010      	b.n	800e740 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f004 fda8 	bl	8013274 <tcp_send_fin>
 800e724:	4603      	mov	r3, r0
 800e726:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d109      	bne.n	800e744 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2209      	movs	r2, #9
 800e734:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e736:	e005      	b.n	800e744 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e738:	2300      	movs	r3, #0
 800e73a:	e01c      	b.n	800e776 <tcp_close_shutdown_fin+0xbe>
      break;
 800e73c:	bf00      	nop
 800e73e:	e002      	b.n	800e746 <tcp_close_shutdown_fin+0x8e>
      break;
 800e740:	bf00      	nop
 800e742:	e000      	b.n	800e746 <tcp_close_shutdown_fin+0x8e>
      break;
 800e744:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d103      	bne.n	800e756 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f004 fece 	bl	80134f0 <tcp_output>
 800e754:	e00d      	b.n	800e772 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e75a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e75e:	d108      	bne.n	800e772 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	8b5b      	ldrh	r3, [r3, #26]
 800e764:	f043 0308 	orr.w	r3, r3, #8
 800e768:	b29a      	uxth	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e76e:	2300      	movs	r3, #0
 800e770:	e001      	b.n	800e776 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e776:	4618      	mov	r0, r3
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	0801e62c 	.word	0x0801e62c
 800e784:	0801e6dc 	.word	0x0801e6dc
 800e788:	0801e670 	.word	0x0801e670

0800e78c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d109      	bne.n	800e7ae <tcp_close+0x22>
 800e79a:	4b0f      	ldr	r3, [pc, #60]	; (800e7d8 <tcp_close+0x4c>)
 800e79c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e7a0:	490e      	ldr	r1, [pc, #56]	; (800e7dc <tcp_close+0x50>)
 800e7a2:	480f      	ldr	r0, [pc, #60]	; (800e7e0 <tcp_close+0x54>)
 800e7a4:	f00d f88c 	bl	801b8c0 <iprintf>
 800e7a8:	f06f 030f 	mvn.w	r3, #15
 800e7ac:	e00f      	b.n	800e7ce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	7d1b      	ldrb	r3, [r3, #20]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d006      	beq.n	800e7c4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	8b5b      	ldrh	r3, [r3, #26]
 800e7ba:	f043 0310 	orr.w	r3, r3, #16
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e7c4:	2101      	movs	r1, #1
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7ff fe94 	bl	800e4f4 <tcp_close_shutdown>
 800e7cc:	4603      	mov	r3, r0
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3708      	adds	r7, #8
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	0801e62c 	.word	0x0801e62c
 800e7dc:	0801e73c 	.word	0x0801e73c
 800e7e0:	0801e670 	.word	0x0801e670

0800e7e4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d109      	bne.n	800e80a <tcp_shutdown+0x26>
 800e7f6:	4b26      	ldr	r3, [pc, #152]	; (800e890 <tcp_shutdown+0xac>)
 800e7f8:	f240 2207 	movw	r2, #519	; 0x207
 800e7fc:	4925      	ldr	r1, [pc, #148]	; (800e894 <tcp_shutdown+0xb0>)
 800e7fe:	4826      	ldr	r0, [pc, #152]	; (800e898 <tcp_shutdown+0xb4>)
 800e800:	f00d f85e 	bl	801b8c0 <iprintf>
 800e804:	f06f 030f 	mvn.w	r3, #15
 800e808:	e03d      	b.n	800e886 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	7d1b      	ldrb	r3, [r3, #20]
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d102      	bne.n	800e818 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e812:	f06f 030a 	mvn.w	r3, #10
 800e816:	e036      	b.n	800e886 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d01b      	beq.n	800e856 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	8b5b      	ldrh	r3, [r3, #26]
 800e822:	f043 0310 	orr.w	r3, r3, #16
 800e826:	b29a      	uxth	r2, r3
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d005      	beq.n	800e83e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e832:	2101      	movs	r1, #1
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f7ff fe5d 	bl	800e4f4 <tcp_close_shutdown>
 800e83a:	4603      	mov	r3, r0
 800e83c:	e023      	b.n	800e886 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e842:	2b00      	cmp	r3, #0
 800e844:	d007      	beq.n	800e856 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7ff fae4 	bl	800de18 <pbuf_free>
      pcb->refused_data = NULL;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d013      	beq.n	800e884 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	7d1b      	ldrb	r3, [r3, #20]
 800e860:	2b04      	cmp	r3, #4
 800e862:	dc02      	bgt.n	800e86a <tcp_shutdown+0x86>
 800e864:	2b03      	cmp	r3, #3
 800e866:	da02      	bge.n	800e86e <tcp_shutdown+0x8a>
 800e868:	e009      	b.n	800e87e <tcp_shutdown+0x9a>
 800e86a:	2b07      	cmp	r3, #7
 800e86c:	d107      	bne.n	800e87e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	b2db      	uxtb	r3, r3
 800e872:	4619      	mov	r1, r3
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f7ff fe3d 	bl	800e4f4 <tcp_close_shutdown>
 800e87a:	4603      	mov	r3, r0
 800e87c:	e003      	b.n	800e886 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e87e:	f06f 030a 	mvn.w	r3, #10
 800e882:	e000      	b.n	800e886 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e884:	2300      	movs	r3, #0
}
 800e886:	4618      	mov	r0, r3
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	0801e62c 	.word	0x0801e62c
 800e894:	0801e754 	.word	0x0801e754
 800e898:	0801e670 	.word	0x0801e670

0800e89c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b08e      	sub	sp, #56	; 0x38
 800e8a0:	af04      	add	r7, sp, #16
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d107      	bne.n	800e8bc <tcp_abandon+0x20>
 800e8ac:	4b52      	ldr	r3, [pc, #328]	; (800e9f8 <tcp_abandon+0x15c>)
 800e8ae:	f240 223d 	movw	r2, #573	; 0x23d
 800e8b2:	4952      	ldr	r1, [pc, #328]	; (800e9fc <tcp_abandon+0x160>)
 800e8b4:	4852      	ldr	r0, [pc, #328]	; (800ea00 <tcp_abandon+0x164>)
 800e8b6:	f00d f803 	bl	801b8c0 <iprintf>
 800e8ba:	e099      	b.n	800e9f0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	7d1b      	ldrb	r3, [r3, #20]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d106      	bne.n	800e8d2 <tcp_abandon+0x36>
 800e8c4:	4b4c      	ldr	r3, [pc, #304]	; (800e9f8 <tcp_abandon+0x15c>)
 800e8c6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e8ca:	494e      	ldr	r1, [pc, #312]	; (800ea04 <tcp_abandon+0x168>)
 800e8cc:	484c      	ldr	r0, [pc, #304]	; (800ea00 <tcp_abandon+0x164>)
 800e8ce:	f00c fff7 	bl	801b8c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	7d1b      	ldrb	r3, [r3, #20]
 800e8d6:	2b0a      	cmp	r3, #10
 800e8d8:	d107      	bne.n	800e8ea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e8da:	6879      	ldr	r1, [r7, #4]
 800e8dc:	484a      	ldr	r0, [pc, #296]	; (800ea08 <tcp_abandon+0x16c>)
 800e8de:	f001 f9ef 	bl	800fcc0 <tcp_pcb_remove>
    tcp_free(pcb);
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7ff fd54 	bl	800e390 <tcp_free>
 800e8e8:	e082      	b.n	800e9f0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8f6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8fc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e904:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	691b      	ldr	r3, [r3, #16]
 800e90a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	7d1b      	ldrb	r3, [r3, #20]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d126      	bne.n	800e962 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	8adb      	ldrh	r3, [r3, #22]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d02e      	beq.n	800e97a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e91c:	4b3b      	ldr	r3, [pc, #236]	; (800ea0c <tcp_abandon+0x170>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	687a      	ldr	r2, [r7, #4]
 800e922:	429a      	cmp	r2, r3
 800e924:	d105      	bne.n	800e932 <tcp_abandon+0x96>
 800e926:	4b39      	ldr	r3, [pc, #228]	; (800ea0c <tcp_abandon+0x170>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	4a37      	ldr	r2, [pc, #220]	; (800ea0c <tcp_abandon+0x170>)
 800e92e:	6013      	str	r3, [r2, #0]
 800e930:	e013      	b.n	800e95a <tcp_abandon+0xbe>
 800e932:	4b36      	ldr	r3, [pc, #216]	; (800ea0c <tcp_abandon+0x170>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	61fb      	str	r3, [r7, #28]
 800e938:	e00c      	b.n	800e954 <tcp_abandon+0xb8>
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	429a      	cmp	r2, r3
 800e942:	d104      	bne.n	800e94e <tcp_abandon+0xb2>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	68da      	ldr	r2, [r3, #12]
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	60da      	str	r2, [r3, #12]
 800e94c:	e005      	b.n	800e95a <tcp_abandon+0xbe>
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	61fb      	str	r3, [r7, #28]
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1ef      	bne.n	800e93a <tcp_abandon+0x9e>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	60da      	str	r2, [r3, #12]
 800e960:	e00b      	b.n	800e97a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	8adb      	ldrh	r3, [r3, #22]
 800e96a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e96c:	6879      	ldr	r1, [r7, #4]
 800e96e:	4828      	ldr	r0, [pc, #160]	; (800ea10 <tcp_abandon+0x174>)
 800e970:	f001 f9a6 	bl	800fcc0 <tcp_pcb_remove>
 800e974:	4b27      	ldr	r3, [pc, #156]	; (800ea14 <tcp_abandon+0x178>)
 800e976:	2201      	movs	r2, #1
 800e978:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d004      	beq.n	800e98c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e986:	4618      	mov	r0, r3
 800e988:	f000 fe7a 	bl	800f680 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e990:	2b00      	cmp	r3, #0
 800e992:	d004      	beq.n	800e99e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e998:	4618      	mov	r0, r3
 800e99a:	f000 fe71 	bl	800f680 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d004      	beq.n	800e9b0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f000 fe68 	bl	800f680 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00e      	beq.n	800e9d4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e9b6:	6879      	ldr	r1, [r7, #4]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	3304      	adds	r3, #4
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	8b12      	ldrh	r2, [r2, #24]
 800e9c0:	9202      	str	r2, [sp, #8]
 800e9c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9c4:	9201      	str	r2, [sp, #4]
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	69b9      	ldr	r1, [r7, #24]
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f005 fb42 	bl	8014058 <tcp_rst>
    }
    last_state = pcb->state;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	7d1b      	ldrb	r3, [r3, #20]
 800e9d8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f7ff fcd8 	bl	800e390 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d004      	beq.n	800e9f0 <tcp_abandon+0x154>
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	f06f 010c 	mvn.w	r1, #12
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	4798      	blx	r3
  }
}
 800e9f0:	3728      	adds	r7, #40	; 0x28
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	0801e62c 	.word	0x0801e62c
 800e9fc:	0801e770 	.word	0x0801e770
 800ea00:	0801e670 	.word	0x0801e670
 800ea04:	0801e78c 	.word	0x0801e78c
 800ea08:	20010670 	.word	0x20010670
 800ea0c:	2001066c 	.word	0x2001066c
 800ea10:	20010660 	.word	0x20010660
 800ea14:	2001065c 	.word	0x2001065c

0800ea18 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ea20:	2101      	movs	r1, #1
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7ff ff3a 	bl	800e89c <tcp_abandon>
}
 800ea28:	bf00      	nop
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d106      	bne.n	800ea4c <tcp_update_rcv_ann_wnd+0x1c>
 800ea3e:	4b25      	ldr	r3, [pc, #148]	; (800ead4 <tcp_update_rcv_ann_wnd+0xa4>)
 800ea40:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ea44:	4924      	ldr	r1, [pc, #144]	; (800ead8 <tcp_update_rcv_ann_wnd+0xa8>)
 800ea46:	4825      	ldr	r0, [pc, #148]	; (800eadc <tcp_update_rcv_ann_wnd+0xac>)
 800ea48:	f00c ff3a 	bl	801b8c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ea54:	4413      	add	r3, r2
 800ea56:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ea60:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ea64:	bf28      	it	cs
 800ea66:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ea6a:	b292      	uxth	r2, r2
 800ea6c:	4413      	add	r3, r2
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	db08      	blt.n	800ea88 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	1ad3      	subs	r3, r2, r3
 800ea86:	e020      	b.n	800eaca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	dd03      	ble.n	800ea9e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ea9c:	e014      	b.n	800eac8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eab0:	d306      	bcc.n	800eac0 <tcp_update_rcv_ann_wnd+0x90>
 800eab2:	4b08      	ldr	r3, [pc, #32]	; (800ead4 <tcp_update_rcv_ann_wnd+0xa4>)
 800eab4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800eab8:	4909      	ldr	r1, [pc, #36]	; (800eae0 <tcp_update_rcv_ann_wnd+0xb0>)
 800eaba:	4808      	ldr	r0, [pc, #32]	; (800eadc <tcp_update_rcv_ann_wnd+0xac>)
 800eabc:	f00c ff00 	bl	801b8c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800eac8:	2300      	movs	r3, #0
  }
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	0801e62c 	.word	0x0801e62c
 800ead8:	0801e888 	.word	0x0801e888
 800eadc:	0801e670 	.word	0x0801e670
 800eae0:	0801e8ac 	.word	0x0801e8ac

0800eae4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b084      	sub	sp, #16
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	460b      	mov	r3, r1
 800eaee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d107      	bne.n	800eb06 <tcp_recved+0x22>
 800eaf6:	4b1f      	ldr	r3, [pc, #124]	; (800eb74 <tcp_recved+0x90>)
 800eaf8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800eafc:	491e      	ldr	r1, [pc, #120]	; (800eb78 <tcp_recved+0x94>)
 800eafe:	481f      	ldr	r0, [pc, #124]	; (800eb7c <tcp_recved+0x98>)
 800eb00:	f00c fede 	bl	801b8c0 <iprintf>
 800eb04:	e032      	b.n	800eb6c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	7d1b      	ldrb	r3, [r3, #20]
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d106      	bne.n	800eb1c <tcp_recved+0x38>
 800eb0e:	4b19      	ldr	r3, [pc, #100]	; (800eb74 <tcp_recved+0x90>)
 800eb10:	f240 32d2 	movw	r2, #978	; 0x3d2
 800eb14:	491a      	ldr	r1, [pc, #104]	; (800eb80 <tcp_recved+0x9c>)
 800eb16:	4819      	ldr	r0, [pc, #100]	; (800eb7c <tcp_recved+0x98>)
 800eb18:	f00c fed2 	bl	801b8c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb20:	887b      	ldrh	r3, [r7, #2]
 800eb22:	4413      	add	r3, r2
 800eb24:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800eb26:	89fb      	ldrh	r3, [r7, #14]
 800eb28:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb2c:	d804      	bhi.n	800eb38 <tcp_recved+0x54>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb32:	89fa      	ldrh	r2, [r7, #14]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d204      	bcs.n	800eb42 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eb3e:	851a      	strh	r2, [r3, #40]	; 0x28
 800eb40:	e002      	b.n	800eb48 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	89fa      	ldrh	r2, [r7, #14]
 800eb46:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f7ff ff71 	bl	800ea30 <tcp_update_rcv_ann_wnd>
 800eb4e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800eb56:	d309      	bcc.n	800eb6c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	8b5b      	ldrh	r3, [r3, #26]
 800eb5c:	f043 0302 	orr.w	r3, r3, #2
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f004 fcc2 	bl	80134f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	0801e62c 	.word	0x0801e62c
 800eb78:	0801e8c8 	.word	0x0801e8c8
 800eb7c:	0801e670 	.word	0x0801e670
 800eb80:	0801e8e0 	.word	0x0801e8e0

0800eb84 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800eb8e:	4b1e      	ldr	r3, [pc, #120]	; (800ec08 <tcp_new_port+0x84>)
 800eb90:	881b      	ldrh	r3, [r3, #0]
 800eb92:	3301      	adds	r3, #1
 800eb94:	b29a      	uxth	r2, r3
 800eb96:	4b1c      	ldr	r3, [pc, #112]	; (800ec08 <tcp_new_port+0x84>)
 800eb98:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800eb9a:	4b1b      	ldr	r3, [pc, #108]	; (800ec08 <tcp_new_port+0x84>)
 800eb9c:	881b      	ldrh	r3, [r3, #0]
 800eb9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d103      	bne.n	800ebae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800eba6:	4b18      	ldr	r3, [pc, #96]	; (800ec08 <tcp_new_port+0x84>)
 800eba8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ebac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ebae:	2300      	movs	r3, #0
 800ebb0:	71fb      	strb	r3, [r7, #7]
 800ebb2:	e01e      	b.n	800ebf2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ebb4:	79fb      	ldrb	r3, [r7, #7]
 800ebb6:	4a15      	ldr	r2, [pc, #84]	; (800ec0c <tcp_new_port+0x88>)
 800ebb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	603b      	str	r3, [r7, #0]
 800ebc0:	e011      	b.n	800ebe6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	8ada      	ldrh	r2, [r3, #22]
 800ebc6:	4b10      	ldr	r3, [pc, #64]	; (800ec08 <tcp_new_port+0x84>)
 800ebc8:	881b      	ldrh	r3, [r3, #0]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d108      	bne.n	800ebe0 <tcp_new_port+0x5c>
        n++;
 800ebce:	88bb      	ldrh	r3, [r7, #4]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ebd4:	88bb      	ldrh	r3, [r7, #4]
 800ebd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ebda:	d3d8      	bcc.n	800eb8e <tcp_new_port+0xa>
          return 0;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	e00d      	b.n	800ebfc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	68db      	ldr	r3, [r3, #12]
 800ebe4:	603b      	str	r3, [r7, #0]
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1ea      	bne.n	800ebc2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ebec:	79fb      	ldrb	r3, [r7, #7]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	71fb      	strb	r3, [r7, #7]
 800ebf2:	79fb      	ldrb	r3, [r7, #7]
 800ebf4:	2b03      	cmp	r3, #3
 800ebf6:	d9dd      	bls.n	800ebb4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ebf8:	4b03      	ldr	r3, [pc, #12]	; (800ec08 <tcp_new_port+0x84>)
 800ebfa:	881b      	ldrh	r3, [r3, #0]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	20000010 	.word	0x20000010
 800ec0c:	08020b00 	.word	0x08020b00

0800ec10 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b08a      	sub	sp, #40	; 0x28
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	603b      	str	r3, [r7, #0]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ec20:	2300      	movs	r3, #0
 800ec22:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d109      	bne.n	800ec3e <tcp_connect+0x2e>
 800ec2a:	4b7d      	ldr	r3, [pc, #500]	; (800ee20 <tcp_connect+0x210>)
 800ec2c:	f240 4235 	movw	r2, #1077	; 0x435
 800ec30:	497c      	ldr	r1, [pc, #496]	; (800ee24 <tcp_connect+0x214>)
 800ec32:	487d      	ldr	r0, [pc, #500]	; (800ee28 <tcp_connect+0x218>)
 800ec34:	f00c fe44 	bl	801b8c0 <iprintf>
 800ec38:	f06f 030f 	mvn.w	r3, #15
 800ec3c:	e0ec      	b.n	800ee18 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d109      	bne.n	800ec58 <tcp_connect+0x48>
 800ec44:	4b76      	ldr	r3, [pc, #472]	; (800ee20 <tcp_connect+0x210>)
 800ec46:	f240 4236 	movw	r2, #1078	; 0x436
 800ec4a:	4978      	ldr	r1, [pc, #480]	; (800ee2c <tcp_connect+0x21c>)
 800ec4c:	4876      	ldr	r0, [pc, #472]	; (800ee28 <tcp_connect+0x218>)
 800ec4e:	f00c fe37 	bl	801b8c0 <iprintf>
 800ec52:	f06f 030f 	mvn.w	r3, #15
 800ec56:	e0df      	b.n	800ee18 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	7d1b      	ldrb	r3, [r3, #20]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d009      	beq.n	800ec74 <tcp_connect+0x64>
 800ec60:	4b6f      	ldr	r3, [pc, #444]	; (800ee20 <tcp_connect+0x210>)
 800ec62:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ec66:	4972      	ldr	r1, [pc, #456]	; (800ee30 <tcp_connect+0x220>)
 800ec68:	486f      	ldr	r0, [pc, #444]	; (800ee28 <tcp_connect+0x218>)
 800ec6a:	f00c fe29 	bl	801b8c0 <iprintf>
 800ec6e:	f06f 0309 	mvn.w	r3, #9
 800ec72:	e0d1      	b.n	800ee18 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d002      	beq.n	800ec80 <tcp_connect+0x70>
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	e000      	b.n	800ec82 <tcp_connect+0x72>
 800ec80:	2300      	movs	r3, #0
 800ec82:	68fa      	ldr	r2, [r7, #12]
 800ec84:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	88fa      	ldrh	r2, [r7, #6]
 800ec8a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	7a1b      	ldrb	r3, [r3, #8]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d006      	beq.n	800eca2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	7a1b      	ldrb	r3, [r3, #8]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fe fcfd 	bl	800d698 <netif_get_by_index>
 800ec9e:	6278      	str	r0, [r7, #36]	; 0x24
 800eca0:	e005      	b.n	800ecae <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	3304      	adds	r3, #4
 800eca6:	4618      	mov	r0, r3
 800eca8:	f009 fa04 	bl	80180b4 <ip4_route>
 800ecac:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800ecae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d102      	bne.n	800ecba <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800ecb4:	f06f 0303 	mvn.w	r3, #3
 800ecb8:	e0ae      	b.n	800ee18 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d003      	beq.n	800ecc8 <tcp_connect+0xb8>
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d111      	bne.n	800ecec <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800ecc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d002      	beq.n	800ecd4 <tcp_connect+0xc4>
 800ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd0:	3304      	adds	r3, #4
 800ecd2:	e000      	b.n	800ecd6 <tcp_connect+0xc6>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d102      	bne.n	800ece4 <tcp_connect+0xd4>
      return ERR_RTE;
 800ecde:	f06f 0303 	mvn.w	r3, #3
 800ece2:	e099      	b.n	800ee18 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	8adb      	ldrh	r3, [r3, #22]
 800ecf0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	8adb      	ldrh	r3, [r3, #22]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d10c      	bne.n	800ed14 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800ecfa:	f7ff ff43 	bl	800eb84 <tcp_new_port>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	461a      	mov	r2, r3
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	8adb      	ldrh	r3, [r3, #22]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d102      	bne.n	800ed14 <tcp_connect+0x104>
      return ERR_BUF;
 800ed0e:	f06f 0301 	mvn.w	r3, #1
 800ed12:	e081      	b.n	800ee18 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	f001 f867 	bl	800fde8 <tcp_next_iss>
 800ed1a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	697a      	ldr	r2, [r7, #20]
 800ed26:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	1e5a      	subs	r2, r3, #1
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	1e5a      	subs	r2, r3, #1
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	1e5a      	subs	r2, r3, #1
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed46:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ed68:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3304      	adds	r3, #4
 800ed72:	461a      	mov	r2, r3
 800ed74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed76:	f001 f85d 	bl	800fe34 <tcp_eff_send_mss_netif>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2201      	movs	r2, #1
 800ed86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ed92:	2102      	movs	r1, #2
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f004 fabd 	bl	8013314 <tcp_enqueue_flags>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800ed9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d136      	bne.n	800ee14 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	2202      	movs	r2, #2
 800edaa:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800edac:	8b7b      	ldrh	r3, [r7, #26]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d021      	beq.n	800edf6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800edb2:	4b20      	ldr	r3, [pc, #128]	; (800ee34 <tcp_connect+0x224>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68fa      	ldr	r2, [r7, #12]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d105      	bne.n	800edc8 <tcp_connect+0x1b8>
 800edbc:	4b1d      	ldr	r3, [pc, #116]	; (800ee34 <tcp_connect+0x224>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	4a1c      	ldr	r2, [pc, #112]	; (800ee34 <tcp_connect+0x224>)
 800edc4:	6013      	str	r3, [r2, #0]
 800edc6:	e013      	b.n	800edf0 <tcp_connect+0x1e0>
 800edc8:	4b1a      	ldr	r3, [pc, #104]	; (800ee34 <tcp_connect+0x224>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	623b      	str	r3, [r7, #32]
 800edce:	e00c      	b.n	800edea <tcp_connect+0x1da>
 800edd0:	6a3b      	ldr	r3, [r7, #32]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d104      	bne.n	800ede4 <tcp_connect+0x1d4>
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	68da      	ldr	r2, [r3, #12]
 800edde:	6a3b      	ldr	r3, [r7, #32]
 800ede0:	60da      	str	r2, [r3, #12]
 800ede2:	e005      	b.n	800edf0 <tcp_connect+0x1e0>
 800ede4:	6a3b      	ldr	r3, [r7, #32]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	623b      	str	r3, [r7, #32]
 800edea:	6a3b      	ldr	r3, [r7, #32]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1ef      	bne.n	800edd0 <tcp_connect+0x1c0>
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2200      	movs	r2, #0
 800edf4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800edf6:	4b10      	ldr	r3, [pc, #64]	; (800ee38 <tcp_connect+0x228>)
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	60da      	str	r2, [r3, #12]
 800edfe:	4a0e      	ldr	r2, [pc, #56]	; (800ee38 <tcp_connect+0x228>)
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	6013      	str	r3, [r2, #0]
 800ee04:	f005 faea 	bl	80143dc <tcp_timer_needed>
 800ee08:	4b0c      	ldr	r3, [pc, #48]	; (800ee3c <tcp_connect+0x22c>)
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f004 fb6e 	bl	80134f0 <tcp_output>
  }
  return ret;
 800ee14:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3728      	adds	r7, #40	; 0x28
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	0801e62c 	.word	0x0801e62c
 800ee24:	0801e908 	.word	0x0801e908
 800ee28:	0801e670 	.word	0x0801e670
 800ee2c:	0801e924 	.word	0x0801e924
 800ee30:	0801e940 	.word	0x0801e940
 800ee34:	2001066c 	.word	0x2001066c
 800ee38:	20010660 	.word	0x20010660
 800ee3c:	2001065c 	.word	0x2001065c

0800ee40 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ee40:	b5b0      	push	{r4, r5, r7, lr}
 800ee42:	b090      	sub	sp, #64	; 0x40
 800ee44:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ee46:	2300      	movs	r3, #0
 800ee48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ee4c:	4b94      	ldr	r3, [pc, #592]	; (800f0a0 <tcp_slowtmr+0x260>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	3301      	adds	r3, #1
 800ee52:	4a93      	ldr	r2, [pc, #588]	; (800f0a0 <tcp_slowtmr+0x260>)
 800ee54:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ee56:	4b93      	ldr	r3, [pc, #588]	; (800f0a4 <tcp_slowtmr+0x264>)
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	b2da      	uxtb	r2, r3
 800ee5e:	4b91      	ldr	r3, [pc, #580]	; (800f0a4 <tcp_slowtmr+0x264>)
 800ee60:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ee62:	2300      	movs	r3, #0
 800ee64:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ee66:	4b90      	ldr	r3, [pc, #576]	; (800f0a8 <tcp_slowtmr+0x268>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ee6c:	e29d      	b.n	800f3aa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ee6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee70:	7d1b      	ldrb	r3, [r3, #20]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d106      	bne.n	800ee84 <tcp_slowtmr+0x44>
 800ee76:	4b8d      	ldr	r3, [pc, #564]	; (800f0ac <tcp_slowtmr+0x26c>)
 800ee78:	f240 42be 	movw	r2, #1214	; 0x4be
 800ee7c:	498c      	ldr	r1, [pc, #560]	; (800f0b0 <tcp_slowtmr+0x270>)
 800ee7e:	488d      	ldr	r0, [pc, #564]	; (800f0b4 <tcp_slowtmr+0x274>)
 800ee80:	f00c fd1e 	bl	801b8c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ee84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee86:	7d1b      	ldrb	r3, [r3, #20]
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	d106      	bne.n	800ee9a <tcp_slowtmr+0x5a>
 800ee8c:	4b87      	ldr	r3, [pc, #540]	; (800f0ac <tcp_slowtmr+0x26c>)
 800ee8e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ee92:	4989      	ldr	r1, [pc, #548]	; (800f0b8 <tcp_slowtmr+0x278>)
 800ee94:	4887      	ldr	r0, [pc, #540]	; (800f0b4 <tcp_slowtmr+0x274>)
 800ee96:	f00c fd13 	bl	801b8c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ee9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9c:	7d1b      	ldrb	r3, [r3, #20]
 800ee9e:	2b0a      	cmp	r3, #10
 800eea0:	d106      	bne.n	800eeb0 <tcp_slowtmr+0x70>
 800eea2:	4b82      	ldr	r3, [pc, #520]	; (800f0ac <tcp_slowtmr+0x26c>)
 800eea4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800eea8:	4984      	ldr	r1, [pc, #528]	; (800f0bc <tcp_slowtmr+0x27c>)
 800eeaa:	4882      	ldr	r0, [pc, #520]	; (800f0b4 <tcp_slowtmr+0x274>)
 800eeac:	f00c fd08 	bl	801b8c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800eeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb2:	7f9a      	ldrb	r2, [r3, #30]
 800eeb4:	4b7b      	ldr	r3, [pc, #492]	; (800f0a4 <tcp_slowtmr+0x264>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d105      	bne.n	800eec8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800eebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eebe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800eec6:	e270      	b.n	800f3aa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800eec8:	4b76      	ldr	r3, [pc, #472]	; (800f0a4 <tcp_slowtmr+0x264>)
 800eeca:	781a      	ldrb	r2, [r3, #0]
 800eecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eece:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800eed0:	2300      	movs	r3, #0
 800eed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800eed6:	2300      	movs	r3, #0
 800eed8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	7d1b      	ldrb	r3, [r3, #20]
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	d10a      	bne.n	800eefa <tcp_slowtmr+0xba>
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eeea:	2b05      	cmp	r3, #5
 800eeec:	d905      	bls.n	800eefa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800eeee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eef2:	3301      	adds	r3, #1
 800eef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eef8:	e11e      	b.n	800f138 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800eefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef00:	2b0b      	cmp	r3, #11
 800ef02:	d905      	bls.n	800ef10 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ef04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef08:	3301      	adds	r3, #1
 800ef0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef0e:	e113      	b.n	800f138 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d075      	beq.n	800f006 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ef1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d006      	beq.n	800ef30 <tcp_slowtmr+0xf0>
 800ef22:	4b62      	ldr	r3, [pc, #392]	; (800f0ac <tcp_slowtmr+0x26c>)
 800ef24:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ef28:	4965      	ldr	r1, [pc, #404]	; (800f0c0 <tcp_slowtmr+0x280>)
 800ef2a:	4862      	ldr	r0, [pc, #392]	; (800f0b4 <tcp_slowtmr+0x274>)
 800ef2c:	f00c fcc8 	bl	801b8c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ef30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d106      	bne.n	800ef46 <tcp_slowtmr+0x106>
 800ef38:	4b5c      	ldr	r3, [pc, #368]	; (800f0ac <tcp_slowtmr+0x26c>)
 800ef3a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ef3e:	4961      	ldr	r1, [pc, #388]	; (800f0c4 <tcp_slowtmr+0x284>)
 800ef40:	485c      	ldr	r0, [pc, #368]	; (800f0b4 <tcp_slowtmr+0x274>)
 800ef42:	f00c fcbd 	bl	801b8c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ef46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef48:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ef4c:	2b0b      	cmp	r3, #11
 800ef4e:	d905      	bls.n	800ef5c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ef50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef54:	3301      	adds	r3, #1
 800ef56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef5a:	e0ed      	b.n	800f138 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ef5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef62:	3b01      	subs	r3, #1
 800ef64:	4a58      	ldr	r2, [pc, #352]	; (800f0c8 <tcp_slowtmr+0x288>)
 800ef66:	5cd3      	ldrb	r3, [r2, r3]
 800ef68:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ef6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef70:	7c7a      	ldrb	r2, [r7, #17]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d907      	bls.n	800ef86 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ef76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	b2da      	uxtb	r2, r3
 800ef80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef82:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ef86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef8c:	7c7a      	ldrb	r2, [r7, #17]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	f200 80d2 	bhi.w	800f138 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ef94:	2301      	movs	r3, #1
 800ef96:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ef98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d108      	bne.n	800efb4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800efa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efa4:	f005 f94c 	bl	8014240 <tcp_zero_window_probe>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d014      	beq.n	800efd8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800efae:	2300      	movs	r3, #0
 800efb0:	623b      	str	r3, [r7, #32]
 800efb2:	e011      	b.n	800efd8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800efb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efba:	4619      	mov	r1, r3
 800efbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efbe:	f004 f811 	bl	8012fe4 <tcp_split_unsent_seg>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d107      	bne.n	800efd8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800efc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efca:	f004 fa91 	bl	80134f0 <tcp_output>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d101      	bne.n	800efd8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800efd4:	2300      	movs	r3, #0
 800efd6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800efd8:	6a3b      	ldr	r3, [r7, #32]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 80ac 	beq.w	800f138 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800efe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800efee:	2b06      	cmp	r3, #6
 800eff0:	f200 80a2 	bhi.w	800f138 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800eff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800effa:	3301      	adds	r3, #1
 800effc:	b2da      	uxtb	r2, r3
 800effe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f000:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f004:	e098      	b.n	800f138 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f008:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	db0f      	blt.n	800f030 <tcp_slowtmr+0x1f0>
 800f010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f012:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f016:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d008      	beq.n	800f030 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f024:	b29b      	uxth	r3, r3
 800f026:	3301      	adds	r3, #1
 800f028:	b29b      	uxth	r3, r3
 800f02a:	b21a      	sxth	r2, r3
 800f02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f032:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f038:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f03c:	429a      	cmp	r2, r3
 800f03e:	db7b      	blt.n	800f138 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f042:	f004 fd47 	bl	8013ad4 <tcp_rexmit_rto_prepare>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d007      	beq.n	800f05c <tcp_slowtmr+0x21c>
 800f04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f050:	2b00      	cmp	r3, #0
 800f052:	d171      	bne.n	800f138 <tcp_slowtmr+0x2f8>
 800f054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d06d      	beq.n	800f138 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05e:	7d1b      	ldrb	r3, [r3, #20]
 800f060:	2b02      	cmp	r3, #2
 800f062:	d03a      	beq.n	800f0da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f06a:	2b0c      	cmp	r3, #12
 800f06c:	bf28      	it	cs
 800f06e:	230c      	movcs	r3, #12
 800f070:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f074:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f078:	10db      	asrs	r3, r3, #3
 800f07a:	b21b      	sxth	r3, r3
 800f07c:	461a      	mov	r2, r3
 800f07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f080:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f084:	4413      	add	r3, r2
 800f086:	7efa      	ldrb	r2, [r7, #27]
 800f088:	4910      	ldr	r1, [pc, #64]	; (800f0cc <tcp_slowtmr+0x28c>)
 800f08a:	5c8a      	ldrb	r2, [r1, r2]
 800f08c:	4093      	lsls	r3, r2
 800f08e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f096:	4293      	cmp	r3, r2
 800f098:	dc1a      	bgt.n	800f0d0 <tcp_slowtmr+0x290>
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	b21a      	sxth	r2, r3
 800f09e:	e019      	b.n	800f0d4 <tcp_slowtmr+0x294>
 800f0a0:	20010664 	.word	0x20010664
 800f0a4:	20008ae2 	.word	0x20008ae2
 800f0a8:	20010660 	.word	0x20010660
 800f0ac:	0801e62c 	.word	0x0801e62c
 800f0b0:	0801e970 	.word	0x0801e970
 800f0b4:	0801e670 	.word	0x0801e670
 800f0b8:	0801e99c 	.word	0x0801e99c
 800f0bc:	0801e9c8 	.word	0x0801e9c8
 800f0c0:	0801e9f8 	.word	0x0801e9f8
 800f0c4:	0801ea2c 	.word	0x0801ea2c
 800f0c8:	08020af8 	.word	0x08020af8
 800f0cc:	08020ae8 	.word	0x08020ae8
 800f0d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0dc:	2200      	movs	r2, #0
 800f0de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	bf28      	it	cs
 800f0f0:	4613      	movcs	r3, r2
 800f0f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f0f4:	8a7b      	ldrh	r3, [r7, #18]
 800f0f6:	085b      	lsrs	r3, r3, #1
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f102:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f10a:	005b      	lsls	r3, r3, #1
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	429a      	cmp	r2, r3
 800f110:	d206      	bcs.n	800f120 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f116:	005b      	lsls	r3, r3, #1
 800f118:	b29a      	uxth	r2, r3
 800f11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f122:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12c:	2200      	movs	r2, #0
 800f12e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f134:	f004 fd3e 	bl	8013bb4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13a:	7d1b      	ldrb	r3, [r3, #20]
 800f13c:	2b06      	cmp	r3, #6
 800f13e:	d111      	bne.n	800f164 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f142:	8b5b      	ldrh	r3, [r3, #26]
 800f144:	f003 0310 	and.w	r3, r3, #16
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00b      	beq.n	800f164 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f14c:	4b9c      	ldr	r3, [pc, #624]	; (800f3c0 <tcp_slowtmr+0x580>)
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	6a1b      	ldr	r3, [r3, #32]
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	2b28      	cmp	r3, #40	; 0x28
 800f158:	d904      	bls.n	800f164 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f15a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f15e:	3301      	adds	r3, #1
 800f160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	7a5b      	ldrb	r3, [r3, #9]
 800f168:	f003 0308 	and.w	r3, r3, #8
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d04a      	beq.n	800f206 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f172:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f174:	2b04      	cmp	r3, #4
 800f176:	d003      	beq.n	800f180 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f17c:	2b07      	cmp	r3, #7
 800f17e:	d142      	bne.n	800f206 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f180:	4b8f      	ldr	r3, [pc, #572]	; (800f3c0 <tcp_slowtmr+0x580>)
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f186:	6a1b      	ldr	r3, [r3, #32]
 800f188:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f190:	4b8c      	ldr	r3, [pc, #560]	; (800f3c4 <tcp_slowtmr+0x584>)
 800f192:	440b      	add	r3, r1
 800f194:	498c      	ldr	r1, [pc, #560]	; (800f3c8 <tcp_slowtmr+0x588>)
 800f196:	fba1 1303 	umull	r1, r3, r1, r3
 800f19a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d90a      	bls.n	800f1b6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f1aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1b4:	e027      	b.n	800f206 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1b6:	4b82      	ldr	r3, [pc, #520]	; (800f3c0 <tcp_slowtmr+0x580>)
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1bc:	6a1b      	ldr	r3, [r3, #32]
 800f1be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	4b7f      	ldr	r3, [pc, #508]	; (800f3cc <tcp_slowtmr+0x58c>)
 800f1d0:	fb03 f300 	mul.w	r3, r3, r0
 800f1d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f1d6:	497c      	ldr	r1, [pc, #496]	; (800f3c8 <tcp_slowtmr+0x588>)
 800f1d8:	fba1 1303 	umull	r1, r3, r1, r3
 800f1dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d911      	bls.n	800f206 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f1e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1e4:	f004 ffec 	bl	80141c0 <tcp_keepalive>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f1ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d107      	bne.n	800f206 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	b2da      	uxtb	r2, r3
 800f200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f202:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d011      	beq.n	800f232 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f20e:	4b6c      	ldr	r3, [pc, #432]	; (800f3c0 <tcp_slowtmr+0x580>)
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	1ad2      	subs	r2, r2, r3
 800f218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f21e:	4619      	mov	r1, r3
 800f220:	460b      	mov	r3, r1
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	440b      	add	r3, r1
 800f226:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f228:	429a      	cmp	r2, r3
 800f22a:	d302      	bcc.n	800f232 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f22c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f22e:	f000 feab 	bl	800ff88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f234:	7d1b      	ldrb	r3, [r3, #20]
 800f236:	2b03      	cmp	r3, #3
 800f238:	d10b      	bne.n	800f252 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f23a:	4b61      	ldr	r3, [pc, #388]	; (800f3c0 <tcp_slowtmr+0x580>)
 800f23c:	681a      	ldr	r2, [r3, #0]
 800f23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f240:	6a1b      	ldr	r3, [r3, #32]
 800f242:	1ad3      	subs	r3, r2, r3
 800f244:	2b28      	cmp	r3, #40	; 0x28
 800f246:	d904      	bls.n	800f252 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f24c:	3301      	adds	r3, #1
 800f24e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f254:	7d1b      	ldrb	r3, [r3, #20]
 800f256:	2b09      	cmp	r3, #9
 800f258:	d10b      	bne.n	800f272 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f25a:	4b59      	ldr	r3, [pc, #356]	; (800f3c0 <tcp_slowtmr+0x580>)
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f260:	6a1b      	ldr	r3, [r3, #32]
 800f262:	1ad3      	subs	r3, r2, r3
 800f264:	2bf0      	cmp	r3, #240	; 0xf0
 800f266:	d904      	bls.n	800f272 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f26c:	3301      	adds	r3, #1
 800f26e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f276:	2b00      	cmp	r3, #0
 800f278:	d060      	beq.n	800f33c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f280:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f284:	f000 fccc 	bl	800fc20 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d010      	beq.n	800f2b0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f28e:	4b50      	ldr	r3, [pc, #320]	; (800f3d0 <tcp_slowtmr+0x590>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f294:	429a      	cmp	r2, r3
 800f296:	d106      	bne.n	800f2a6 <tcp_slowtmr+0x466>
 800f298:	4b4e      	ldr	r3, [pc, #312]	; (800f3d4 <tcp_slowtmr+0x594>)
 800f29a:	f240 526d 	movw	r2, #1389	; 0x56d
 800f29e:	494e      	ldr	r1, [pc, #312]	; (800f3d8 <tcp_slowtmr+0x598>)
 800f2a0:	484e      	ldr	r0, [pc, #312]	; (800f3dc <tcp_slowtmr+0x59c>)
 800f2a2:	f00c fb0d 	bl	801b8c0 <iprintf>
        prev->next = pcb->next;
 800f2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a8:	68da      	ldr	r2, [r3, #12]
 800f2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ac:	60da      	str	r2, [r3, #12]
 800f2ae:	e00f      	b.n	800f2d0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f2b0:	4b47      	ldr	r3, [pc, #284]	; (800f3d0 <tcp_slowtmr+0x590>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d006      	beq.n	800f2c8 <tcp_slowtmr+0x488>
 800f2ba:	4b46      	ldr	r3, [pc, #280]	; (800f3d4 <tcp_slowtmr+0x594>)
 800f2bc:	f240 5271 	movw	r2, #1393	; 0x571
 800f2c0:	4947      	ldr	r1, [pc, #284]	; (800f3e0 <tcp_slowtmr+0x5a0>)
 800f2c2:	4846      	ldr	r0, [pc, #280]	; (800f3dc <tcp_slowtmr+0x59c>)
 800f2c4:	f00c fafc 	bl	801b8c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	4a40      	ldr	r2, [pc, #256]	; (800f3d0 <tcp_slowtmr+0x590>)
 800f2ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f2d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d013      	beq.n	800f300 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f2e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	3304      	adds	r3, #4
 800f2e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2e8:	8ad2      	ldrh	r2, [r2, #22]
 800f2ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2ec:	8b09      	ldrh	r1, [r1, #24]
 800f2ee:	9102      	str	r1, [sp, #8]
 800f2f0:	9201      	str	r2, [sp, #4]
 800f2f2:	9300      	str	r3, [sp, #0]
 800f2f4:	462b      	mov	r3, r5
 800f2f6:	4622      	mov	r2, r4
 800f2f8:	4601      	mov	r1, r0
 800f2fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2fc:	f004 feac 	bl	8014058 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f302:	691b      	ldr	r3, [r3, #16]
 800f304:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f308:	7d1b      	ldrb	r3, [r3, #20]
 800f30a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f316:	6838      	ldr	r0, [r7, #0]
 800f318:	f7ff f83a 	bl	800e390 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f31c:	4b31      	ldr	r3, [pc, #196]	; (800f3e4 <tcp_slowtmr+0x5a4>)
 800f31e:	2200      	movs	r2, #0
 800f320:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d004      	beq.n	800f332 <tcp_slowtmr+0x4f2>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f06f 010c 	mvn.w	r1, #12
 800f32e:	68b8      	ldr	r0, [r7, #8]
 800f330:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f332:	4b2c      	ldr	r3, [pc, #176]	; (800f3e4 <tcp_slowtmr+0x5a4>)
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d037      	beq.n	800f3aa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f33a:	e592      	b.n	800ee62 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f348:	7f1b      	ldrb	r3, [r3, #28]
 800f34a:	3301      	adds	r3, #1
 800f34c:	b2da      	uxtb	r2, r3
 800f34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f350:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	7f1a      	ldrb	r2, [r3, #28]
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	7f5b      	ldrb	r3, [r3, #29]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d325      	bcc.n	800f3aa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f360:	2200      	movs	r2, #0
 800f362:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f364:	4b1f      	ldr	r3, [pc, #124]	; (800f3e4 <tcp_slowtmr+0x5a4>)
 800f366:	2200      	movs	r2, #0
 800f368:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f370:	2b00      	cmp	r3, #0
 800f372:	d00b      	beq.n	800f38c <tcp_slowtmr+0x54c>
 800f374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f37a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f37c:	6912      	ldr	r2, [r2, #16]
 800f37e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f380:	4610      	mov	r0, r2
 800f382:	4798      	blx	r3
 800f384:	4603      	mov	r3, r0
 800f386:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f38a:	e002      	b.n	800f392 <tcp_slowtmr+0x552>
 800f38c:	2300      	movs	r3, #0
 800f38e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f392:	4b14      	ldr	r3, [pc, #80]	; (800f3e4 <tcp_slowtmr+0x5a4>)
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d000      	beq.n	800f39c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f39a:	e562      	b.n	800ee62 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f39c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d102      	bne.n	800f3aa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f3a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3a6:	f004 f8a3 	bl	80134f0 <tcp_output>
  while (pcb != NULL) {
 800f3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f47f ad5e 	bne.w	800ee6e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f3b6:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <tcp_slowtmr+0x5a8>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f3bc:	e069      	b.n	800f492 <tcp_slowtmr+0x652>
 800f3be:	bf00      	nop
 800f3c0:	20010664 	.word	0x20010664
 800f3c4:	000a4cb8 	.word	0x000a4cb8
 800f3c8:	10624dd3 	.word	0x10624dd3
 800f3cc:	000124f8 	.word	0x000124f8
 800f3d0:	20010660 	.word	0x20010660
 800f3d4:	0801e62c 	.word	0x0801e62c
 800f3d8:	0801ea64 	.word	0x0801ea64
 800f3dc:	0801e670 	.word	0x0801e670
 800f3e0:	0801ea90 	.word	0x0801ea90
 800f3e4:	2001065c 	.word	0x2001065c
 800f3e8:	20010670 	.word	0x20010670
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ee:	7d1b      	ldrb	r3, [r3, #20]
 800f3f0:	2b0a      	cmp	r3, #10
 800f3f2:	d006      	beq.n	800f402 <tcp_slowtmr+0x5c2>
 800f3f4:	4b2b      	ldr	r3, [pc, #172]	; (800f4a4 <tcp_slowtmr+0x664>)
 800f3f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f3fa:	492b      	ldr	r1, [pc, #172]	; (800f4a8 <tcp_slowtmr+0x668>)
 800f3fc:	482b      	ldr	r0, [pc, #172]	; (800f4ac <tcp_slowtmr+0x66c>)
 800f3fe:	f00c fa5f 	bl	801b8c0 <iprintf>
    pcb_remove = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f408:	4b29      	ldr	r3, [pc, #164]	; (800f4b0 <tcp_slowtmr+0x670>)
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40e:	6a1b      	ldr	r3, [r3, #32]
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	2bf0      	cmp	r3, #240	; 0xf0
 800f414:	d904      	bls.n	800f420 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f41a:	3301      	adds	r3, #1
 800f41c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f424:	2b00      	cmp	r3, #0
 800f426:	d02f      	beq.n	800f488 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f42a:	f000 fbf9 	bl	800fc20 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f430:	2b00      	cmp	r3, #0
 800f432:	d010      	beq.n	800f456 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f434:	4b1f      	ldr	r3, [pc, #124]	; (800f4b4 <tcp_slowtmr+0x674>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d106      	bne.n	800f44c <tcp_slowtmr+0x60c>
 800f43e:	4b19      	ldr	r3, [pc, #100]	; (800f4a4 <tcp_slowtmr+0x664>)
 800f440:	f240 52af 	movw	r2, #1455	; 0x5af
 800f444:	491c      	ldr	r1, [pc, #112]	; (800f4b8 <tcp_slowtmr+0x678>)
 800f446:	4819      	ldr	r0, [pc, #100]	; (800f4ac <tcp_slowtmr+0x66c>)
 800f448:	f00c fa3a 	bl	801b8c0 <iprintf>
        prev->next = pcb->next;
 800f44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44e:	68da      	ldr	r2, [r3, #12]
 800f450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f452:	60da      	str	r2, [r3, #12]
 800f454:	e00f      	b.n	800f476 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f456:	4b17      	ldr	r3, [pc, #92]	; (800f4b4 <tcp_slowtmr+0x674>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d006      	beq.n	800f46e <tcp_slowtmr+0x62e>
 800f460:	4b10      	ldr	r3, [pc, #64]	; (800f4a4 <tcp_slowtmr+0x664>)
 800f462:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f466:	4915      	ldr	r1, [pc, #84]	; (800f4bc <tcp_slowtmr+0x67c>)
 800f468:	4810      	ldr	r0, [pc, #64]	; (800f4ac <tcp_slowtmr+0x66c>)
 800f46a:	f00c fa29 	bl	801b8c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	4a10      	ldr	r2, [pc, #64]	; (800f4b4 <tcp_slowtmr+0x674>)
 800f474:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f478:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f480:	69f8      	ldr	r0, [r7, #28]
 800f482:	f7fe ff85 	bl	800e390 <tcp_free>
 800f486:	e004      	b.n	800f492 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1a9      	bne.n	800f3ec <tcp_slowtmr+0x5ac>
    }
  }
}
 800f498:	bf00      	nop
 800f49a:	bf00      	nop
 800f49c:	3730      	adds	r7, #48	; 0x30
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bdb0      	pop	{r4, r5, r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	0801e62c 	.word	0x0801e62c
 800f4a8:	0801eabc 	.word	0x0801eabc
 800f4ac:	0801e670 	.word	0x0801e670
 800f4b0:	20010664 	.word	0x20010664
 800f4b4:	20010670 	.word	0x20010670
 800f4b8:	0801eaec 	.word	0x0801eaec
 800f4bc:	0801eb14 	.word	0x0801eb14

0800f4c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f4c6:	4b2d      	ldr	r3, [pc, #180]	; (800f57c <tcp_fasttmr+0xbc>)
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	b2da      	uxtb	r2, r3
 800f4ce:	4b2b      	ldr	r3, [pc, #172]	; (800f57c <tcp_fasttmr+0xbc>)
 800f4d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f4d2:	4b2b      	ldr	r3, [pc, #172]	; (800f580 <tcp_fasttmr+0xc0>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f4d8:	e048      	b.n	800f56c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	7f9a      	ldrb	r2, [r3, #30]
 800f4de:	4b27      	ldr	r3, [pc, #156]	; (800f57c <tcp_fasttmr+0xbc>)
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d03f      	beq.n	800f566 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f4e6:	4b25      	ldr	r3, [pc, #148]	; (800f57c <tcp_fasttmr+0xbc>)
 800f4e8:	781a      	ldrb	r2, [r3, #0]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	8b5b      	ldrh	r3, [r3, #26]
 800f4f2:	f003 0301 	and.w	r3, r3, #1
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d010      	beq.n	800f51c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	8b5b      	ldrh	r3, [r3, #26]
 800f4fe:	f043 0302 	orr.w	r3, r3, #2
 800f502:	b29a      	uxth	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f003 fff1 	bl	80134f0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	8b5b      	ldrh	r3, [r3, #26]
 800f512:	f023 0303 	bic.w	r3, r3, #3
 800f516:	b29a      	uxth	r2, r3
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	8b5b      	ldrh	r3, [r3, #26]
 800f520:	f003 0308 	and.w	r3, r3, #8
 800f524:	2b00      	cmp	r3, #0
 800f526:	d009      	beq.n	800f53c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	8b5b      	ldrh	r3, [r3, #26]
 800f52c:	f023 0308 	bic.w	r3, r3, #8
 800f530:	b29a      	uxth	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7ff f8be 	bl	800e6b8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f546:	2b00      	cmp	r3, #0
 800f548:	d00a      	beq.n	800f560 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f54a:	4b0e      	ldr	r3, [pc, #56]	; (800f584 <tcp_fasttmr+0xc4>)
 800f54c:	2200      	movs	r2, #0
 800f54e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 f819 	bl	800f588 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f556:	4b0b      	ldr	r3, [pc, #44]	; (800f584 <tcp_fasttmr+0xc4>)
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d000      	beq.n	800f560 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f55e:	e7b8      	b.n	800f4d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	607b      	str	r3, [r7, #4]
 800f564:	e002      	b.n	800f56c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d1b3      	bne.n	800f4da <tcp_fasttmr+0x1a>
    }
  }
}
 800f572:	bf00      	nop
 800f574:	bf00      	nop
 800f576:	3708      	adds	r7, #8
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	20008ae2 	.word	0x20008ae2
 800f580:	20010660 	.word	0x20010660
 800f584:	2001065c 	.word	0x2001065c

0800f588 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f588:	b590      	push	{r4, r7, lr}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d109      	bne.n	800f5aa <tcp_process_refused_data+0x22>
 800f596:	4b37      	ldr	r3, [pc, #220]	; (800f674 <tcp_process_refused_data+0xec>)
 800f598:	f240 6209 	movw	r2, #1545	; 0x609
 800f59c:	4936      	ldr	r1, [pc, #216]	; (800f678 <tcp_process_refused_data+0xf0>)
 800f59e:	4837      	ldr	r0, [pc, #220]	; (800f67c <tcp_process_refused_data+0xf4>)
 800f5a0:	f00c f98e 	bl	801b8c0 <iprintf>
 800f5a4:	f06f 030f 	mvn.w	r3, #15
 800f5a8:	e060      	b.n	800f66c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5ae:	7b5b      	ldrb	r3, [r3, #13]
 800f5b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00b      	beq.n	800f5e0 <tcp_process_refused_data+0x58>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6918      	ldr	r0, [r3, #16]
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	68ba      	ldr	r2, [r7, #8]
 800f5d6:	6879      	ldr	r1, [r7, #4]
 800f5d8:	47a0      	blx	r4
 800f5da:	4603      	mov	r3, r0
 800f5dc:	73fb      	strb	r3, [r7, #15]
 800f5de:	e007      	b.n	800f5f0 <tcp_process_refused_data+0x68>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	68ba      	ldr	r2, [r7, #8]
 800f5e4:	6879      	ldr	r1, [r7, #4]
 800f5e6:	2000      	movs	r0, #0
 800f5e8:	f000 f8a4 	bl	800f734 <tcp_recv_null>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f5f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d12a      	bne.n	800f64e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f5f8:	7bbb      	ldrb	r3, [r7, #14]
 800f5fa:	f003 0320 	and.w	r3, r3, #32
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d033      	beq.n	800f66a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f606:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f60a:	d005      	beq.n	800f618 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f610:	3301      	adds	r3, #1
 800f612:	b29a      	uxth	r2, r3
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00b      	beq.n	800f63a <tcp_process_refused_data+0xb2>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6918      	ldr	r0, [r3, #16]
 800f62c:	2300      	movs	r3, #0
 800f62e:	2200      	movs	r2, #0
 800f630:	6879      	ldr	r1, [r7, #4]
 800f632:	47a0      	blx	r4
 800f634:	4603      	mov	r3, r0
 800f636:	73fb      	strb	r3, [r7, #15]
 800f638:	e001      	b.n	800f63e <tcp_process_refused_data+0xb6>
 800f63a:	2300      	movs	r3, #0
 800f63c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f63e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f642:	f113 0f0d 	cmn.w	r3, #13
 800f646:	d110      	bne.n	800f66a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f648:	f06f 030c 	mvn.w	r3, #12
 800f64c:	e00e      	b.n	800f66c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f64e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f652:	f113 0f0d 	cmn.w	r3, #13
 800f656:	d102      	bne.n	800f65e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f658:	f06f 030c 	mvn.w	r3, #12
 800f65c:	e006      	b.n	800f66c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	68ba      	ldr	r2, [r7, #8]
 800f662:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f664:	f06f 0304 	mvn.w	r3, #4
 800f668:	e000      	b.n	800f66c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3714      	adds	r7, #20
 800f670:	46bd      	mov	sp, r7
 800f672:	bd90      	pop	{r4, r7, pc}
 800f674:	0801e62c 	.word	0x0801e62c
 800f678:	0801eb3c 	.word	0x0801eb3c
 800f67c:	0801e670 	.word	0x0801e670

0800f680 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f688:	e007      	b.n	800f69a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f80a 	bl	800f6aa <tcp_seg_free>
    seg = next;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1f4      	bne.n	800f68a <tcp_segs_free+0xa>
  }
}
 800f6a0:	bf00      	nop
 800f6a2:	bf00      	nop
 800f6a4:	3710      	adds	r7, #16
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b082      	sub	sp, #8
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00c      	beq.n	800f6d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d004      	beq.n	800f6ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fe fba7 	bl	800de18 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f6ca:	6879      	ldr	r1, [r7, #4]
 800f6cc:	2003      	movs	r0, #3
 800f6ce:	f7fd fcc1 	bl	800d054 <memp_free>
  }
}
 800f6d2:	bf00      	nop
 800f6d4:	3708      	adds	r7, #8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
	...

0800f6dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b084      	sub	sp, #16
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d106      	bne.n	800f6f8 <tcp_seg_copy+0x1c>
 800f6ea:	4b0f      	ldr	r3, [pc, #60]	; (800f728 <tcp_seg_copy+0x4c>)
 800f6ec:	f240 6282 	movw	r2, #1666	; 0x682
 800f6f0:	490e      	ldr	r1, [pc, #56]	; (800f72c <tcp_seg_copy+0x50>)
 800f6f2:	480f      	ldr	r0, [pc, #60]	; (800f730 <tcp_seg_copy+0x54>)
 800f6f4:	f00c f8e4 	bl	801b8c0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f6f8:	2003      	movs	r0, #3
 800f6fa:	f7fd fc59 	bl	800cfb0 <memp_malloc>
 800f6fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <tcp_seg_copy+0x2e>
    return NULL;
 800f706:	2300      	movs	r3, #0
 800f708:	e00a      	b.n	800f720 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f70a:	2210      	movs	r2, #16
 800f70c:	6879      	ldr	r1, [r7, #4]
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f00c f8c0 	bl	801b894 <memcpy>
  pbuf_ref(cseg->p);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fe fc23 	bl	800df64 <pbuf_ref>
  return cseg;
 800f71e:	68fb      	ldr	r3, [r7, #12]
}
 800f720:	4618      	mov	r0, r3
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	0801e62c 	.word	0x0801e62c
 800f72c:	0801eb80 	.word	0x0801eb80
 800f730:	0801e670 	.word	0x0801e670

0800f734 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
 800f740:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d109      	bne.n	800f75c <tcp_recv_null+0x28>
 800f748:	4b12      	ldr	r3, [pc, #72]	; (800f794 <tcp_recv_null+0x60>)
 800f74a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f74e:	4912      	ldr	r1, [pc, #72]	; (800f798 <tcp_recv_null+0x64>)
 800f750:	4812      	ldr	r0, [pc, #72]	; (800f79c <tcp_recv_null+0x68>)
 800f752:	f00c f8b5 	bl	801b8c0 <iprintf>
 800f756:	f06f 030f 	mvn.w	r3, #15
 800f75a:	e016      	b.n	800f78a <tcp_recv_null+0x56>

  if (p != NULL) {
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d009      	beq.n	800f776 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	891b      	ldrh	r3, [r3, #8]
 800f766:	4619      	mov	r1, r3
 800f768:	68b8      	ldr	r0, [r7, #8]
 800f76a:	f7ff f9bb 	bl	800eae4 <tcp_recved>
    pbuf_free(p);
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7fe fb52 	bl	800de18 <pbuf_free>
 800f774:	e008      	b.n	800f788 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d104      	bne.n	800f788 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f77e:	68b8      	ldr	r0, [r7, #8]
 800f780:	f7ff f804 	bl	800e78c <tcp_close>
 800f784:	4603      	mov	r3, r0
 800f786:	e000      	b.n	800f78a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f788:	2300      	movs	r3, #0
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3710      	adds	r7, #16
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	0801e62c 	.word	0x0801e62c
 800f798:	0801eb9c 	.word	0x0801eb9c
 800f79c:	0801e670 	.word	0x0801e670

0800f7a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f7aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	db01      	blt.n	800f7b6 <tcp_kill_prio+0x16>
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	e000      	b.n	800f7b8 <tcp_kill_prio+0x18>
 800f7b6:	237f      	movs	r3, #127	; 0x7f
 800f7b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f7ba:	7afb      	ldrb	r3, [r7, #11]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d034      	beq.n	800f82a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f7c0:	7afb      	ldrb	r3, [r7, #11]
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7ce:	4b19      	ldr	r3, [pc, #100]	; (800f834 <tcp_kill_prio+0x94>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	617b      	str	r3, [r7, #20]
 800f7d4:	e01f      	b.n	800f816 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	7d5b      	ldrb	r3, [r3, #21]
 800f7da:	7afa      	ldrb	r2, [r7, #11]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d80c      	bhi.n	800f7fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f7e4:	7afa      	ldrb	r2, [r7, #11]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d112      	bne.n	800f810 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f7ea:	4b13      	ldr	r3, [pc, #76]	; (800f838 <tcp_kill_prio+0x98>)
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	6a1b      	ldr	r3, [r3, #32]
 800f7f2:	1ad3      	subs	r3, r2, r3
 800f7f4:	68fa      	ldr	r2, [r7, #12]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d80a      	bhi.n	800f810 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f7fa:	4b0f      	ldr	r3, [pc, #60]	; (800f838 <tcp_kill_prio+0x98>)
 800f7fc:	681a      	ldr	r2, [r3, #0]
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	1ad3      	subs	r3, r2, r3
 800f804:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	7d5b      	ldrb	r3, [r3, #21]
 800f80e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	617b      	str	r3, [r7, #20]
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1dc      	bne.n	800f7d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d004      	beq.n	800f82c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f822:	6938      	ldr	r0, [r7, #16]
 800f824:	f7ff f8f8 	bl	800ea18 <tcp_abort>
 800f828:	e000      	b.n	800f82c <tcp_kill_prio+0x8c>
    return;
 800f82a:	bf00      	nop
  }
}
 800f82c:	3718      	adds	r7, #24
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	20010660 	.word	0x20010660
 800f838:	20010664 	.word	0x20010664

0800f83c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b086      	sub	sp, #24
 800f840:	af00      	add	r7, sp, #0
 800f842:	4603      	mov	r3, r0
 800f844:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f846:	79fb      	ldrb	r3, [r7, #7]
 800f848:	2b08      	cmp	r3, #8
 800f84a:	d009      	beq.n	800f860 <tcp_kill_state+0x24>
 800f84c:	79fb      	ldrb	r3, [r7, #7]
 800f84e:	2b09      	cmp	r3, #9
 800f850:	d006      	beq.n	800f860 <tcp_kill_state+0x24>
 800f852:	4b1a      	ldr	r3, [pc, #104]	; (800f8bc <tcp_kill_state+0x80>)
 800f854:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f858:	4919      	ldr	r1, [pc, #100]	; (800f8c0 <tcp_kill_state+0x84>)
 800f85a:	481a      	ldr	r0, [pc, #104]	; (800f8c4 <tcp_kill_state+0x88>)
 800f85c:	f00c f830 	bl	801b8c0 <iprintf>

  inactivity = 0;
 800f860:	2300      	movs	r3, #0
 800f862:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f864:	2300      	movs	r3, #0
 800f866:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f868:	4b17      	ldr	r3, [pc, #92]	; (800f8c8 <tcp_kill_state+0x8c>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	617b      	str	r3, [r7, #20]
 800f86e:	e017      	b.n	800f8a0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	7d1b      	ldrb	r3, [r3, #20]
 800f874:	79fa      	ldrb	r2, [r7, #7]
 800f876:	429a      	cmp	r2, r3
 800f878:	d10f      	bne.n	800f89a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f87a:	4b14      	ldr	r3, [pc, #80]	; (800f8cc <tcp_kill_state+0x90>)
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	6a1b      	ldr	r3, [r3, #32]
 800f882:	1ad3      	subs	r3, r2, r3
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	429a      	cmp	r2, r3
 800f888:	d807      	bhi.n	800f89a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f88a:	4b10      	ldr	r3, [pc, #64]	; (800f8cc <tcp_kill_state+0x90>)
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	6a1b      	ldr	r3, [r3, #32]
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	617b      	str	r3, [r7, #20]
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d1e4      	bne.n	800f870 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d003      	beq.n	800f8b4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	6938      	ldr	r0, [r7, #16]
 800f8b0:	f7fe fff4 	bl	800e89c <tcp_abandon>
  }
}
 800f8b4:	bf00      	nop
 800f8b6:	3718      	adds	r7, #24
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	0801e62c 	.word	0x0801e62c
 800f8c0:	0801ebb8 	.word	0x0801ebb8
 800f8c4:	0801e670 	.word	0x0801e670
 800f8c8:	20010660 	.word	0x20010660
 800f8cc:	20010664 	.word	0x20010664

0800f8d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8de:	4b12      	ldr	r3, [pc, #72]	; (800f928 <tcp_kill_timewait+0x58>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	60fb      	str	r3, [r7, #12]
 800f8e4:	e012      	b.n	800f90c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f8e6:	4b11      	ldr	r3, [pc, #68]	; (800f92c <tcp_kill_timewait+0x5c>)
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	6a1b      	ldr	r3, [r3, #32]
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d807      	bhi.n	800f906 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f8f6:	4b0d      	ldr	r3, [pc, #52]	; (800f92c <tcp_kill_timewait+0x5c>)
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	6a1b      	ldr	r3, [r3, #32]
 800f8fe:	1ad3      	subs	r3, r2, r3
 800f900:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d1e9      	bne.n	800f8e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d002      	beq.n	800f91e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f918:	68b8      	ldr	r0, [r7, #8]
 800f91a:	f7ff f87d 	bl	800ea18 <tcp_abort>
  }
}
 800f91e:	bf00      	nop
 800f920:	3710      	adds	r7, #16
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	20010670 	.word	0x20010670
 800f92c:	20010664 	.word	0x20010664

0800f930 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f936:	4b10      	ldr	r3, [pc, #64]	; (800f978 <tcp_handle_closepend+0x48>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f93c:	e014      	b.n	800f968 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	8b5b      	ldrh	r3, [r3, #26]
 800f948:	f003 0308 	and.w	r3, r3, #8
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d009      	beq.n	800f964 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	8b5b      	ldrh	r3, [r3, #26]
 800f954:	f023 0308 	bic.w	r3, r3, #8
 800f958:	b29a      	uxth	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f7fe feaa 	bl	800e6b8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d1e7      	bne.n	800f93e <tcp_handle_closepend+0xe>
  }
}
 800f96e:	bf00      	nop
 800f970:	bf00      	nop
 800f972:	3708      	adds	r7, #8
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}
 800f978:	20010660 	.word	0x20010660

0800f97c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	4603      	mov	r3, r0
 800f984:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f986:	2001      	movs	r0, #1
 800f988:	f7fd fb12 	bl	800cfb0 <memp_malloc>
 800f98c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d126      	bne.n	800f9e2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f994:	f7ff ffcc 	bl	800f930 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f998:	f7ff ff9a 	bl	800f8d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f99c:	2001      	movs	r0, #1
 800f99e:	f7fd fb07 	bl	800cfb0 <memp_malloc>
 800f9a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d11b      	bne.n	800f9e2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f9aa:	2009      	movs	r0, #9
 800f9ac:	f7ff ff46 	bl	800f83c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9b0:	2001      	movs	r0, #1
 800f9b2:	f7fd fafd 	bl	800cfb0 <memp_malloc>
 800f9b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d111      	bne.n	800f9e2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f9be:	2008      	movs	r0, #8
 800f9c0:	f7ff ff3c 	bl	800f83c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9c4:	2001      	movs	r0, #1
 800f9c6:	f7fd faf3 	bl	800cfb0 <memp_malloc>
 800f9ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d107      	bne.n	800f9e2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f9d2:	79fb      	ldrb	r3, [r7, #7]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7ff fee3 	bl	800f7a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9da:	2001      	movs	r0, #1
 800f9dc:	f7fd fae8 	bl	800cfb0 <memp_malloc>
 800f9e0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d03f      	beq.n	800fa68 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f9e8:	229c      	movs	r2, #156	; 0x9c
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	68f8      	ldr	r0, [r7, #12]
 800f9ee:	f00b ff5f 	bl	801b8b0 <memset>
    pcb->prio = prio;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	79fa      	ldrb	r2, [r7, #7]
 800f9f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f9fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa08:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	22ff      	movs	r2, #255	; 0xff
 800fa16:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fa1e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2206      	movs	r2, #6
 800fa24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2206      	movs	r2, #6
 800fa2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa34:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2201      	movs	r2, #1
 800fa3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fa3e:	4b0d      	ldr	r3, [pc, #52]	; (800fa74 <tcp_alloc+0xf8>)
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fa46:	4b0c      	ldr	r3, [pc, #48]	; (800fa78 <tcp_alloc+0xfc>)
 800fa48:	781a      	ldrb	r2, [r3, #0]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	4a08      	ldr	r2, [pc, #32]	; (800fa7c <tcp_alloc+0x100>)
 800fa5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	4a07      	ldr	r2, [pc, #28]	; (800fa80 <tcp_alloc+0x104>)
 800fa64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fa68:	68fb      	ldr	r3, [r7, #12]
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	20010664 	.word	0x20010664
 800fa78:	20008ae2 	.word	0x20008ae2
 800fa7c:	0800f735 	.word	0x0800f735
 800fa80:	006ddd00 	.word	0x006ddd00

0800fa84 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fa8e:	2040      	movs	r0, #64	; 0x40
 800fa90:	f7ff ff74 	bl	800f97c <tcp_alloc>
 800fa94:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fa96:	68fb      	ldr	r3, [r7, #12]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3710      	adds	r7, #16
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d002      	beq.n	800fab6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	611a      	str	r2, [r3, #16]
  }
}
 800fab6:	bf00      	nop
 800fab8:	370c      	adds	r7, #12
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr
	...

0800fac4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d00e      	beq.n	800faf2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	7d1b      	ldrb	r3, [r3, #20]
 800fad8:	2b01      	cmp	r3, #1
 800fada:	d106      	bne.n	800faea <tcp_recv+0x26>
 800fadc:	4b07      	ldr	r3, [pc, #28]	; (800fafc <tcp_recv+0x38>)
 800fade:	f240 72df 	movw	r2, #2015	; 0x7df
 800fae2:	4907      	ldr	r1, [pc, #28]	; (800fb00 <tcp_recv+0x3c>)
 800fae4:	4807      	ldr	r0, [pc, #28]	; (800fb04 <tcp_recv+0x40>)
 800fae6:	f00b feeb 	bl	801b8c0 <iprintf>
    pcb->recv = recv;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	683a      	ldr	r2, [r7, #0]
 800faee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800faf2:	bf00      	nop
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	0801e62c 	.word	0x0801e62c
 800fb00:	0801ebc8 	.word	0x0801ebc8
 800fb04:	0801e670 	.word	0x0801e670

0800fb08 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d00e      	beq.n	800fb36 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	7d1b      	ldrb	r3, [r3, #20]
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d106      	bne.n	800fb2e <tcp_sent+0x26>
 800fb20:	4b07      	ldr	r3, [pc, #28]	; (800fb40 <tcp_sent+0x38>)
 800fb22:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fb26:	4907      	ldr	r1, [pc, #28]	; (800fb44 <tcp_sent+0x3c>)
 800fb28:	4807      	ldr	r0, [pc, #28]	; (800fb48 <tcp_sent+0x40>)
 800fb2a:	f00b fec9 	bl	801b8c0 <iprintf>
    pcb->sent = sent;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	683a      	ldr	r2, [r7, #0]
 800fb32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fb36:	bf00      	nop
 800fb38:	3708      	adds	r7, #8
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	0801e62c 	.word	0x0801e62c
 800fb44:	0801ebf0 	.word	0x0801ebf0
 800fb48:	0801e670 	.word	0x0801e670

0800fb4c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00e      	beq.n	800fb7a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	7d1b      	ldrb	r3, [r3, #20]
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d106      	bne.n	800fb72 <tcp_err+0x26>
 800fb64:	4b07      	ldr	r3, [pc, #28]	; (800fb84 <tcp_err+0x38>)
 800fb66:	f640 020d 	movw	r2, #2061	; 0x80d
 800fb6a:	4907      	ldr	r1, [pc, #28]	; (800fb88 <tcp_err+0x3c>)
 800fb6c:	4807      	ldr	r0, [pc, #28]	; (800fb8c <tcp_err+0x40>)
 800fb6e:	f00b fea7 	bl	801b8c0 <iprintf>
    pcb->errf = err;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	683a      	ldr	r2, [r7, #0]
 800fb76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fb7a:	bf00      	nop
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	0801e62c 	.word	0x0801e62c
 800fb88:	0801ec18 	.word	0x0801ec18
 800fb8c:	0801e670 	.word	0x0801e670

0800fb90 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b085      	sub	sp, #20
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d008      	beq.n	800fbb2 <tcp_accept+0x22>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	7d1b      	ldrb	r3, [r3, #20]
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d104      	bne.n	800fbb2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	619a      	str	r2, [r3, #24]
  }
}
 800fbb2:	bf00      	nop
 800fbb4:	3714      	adds	r7, #20
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr
	...

0800fbc0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	4613      	mov	r3, r2
 800fbcc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d107      	bne.n	800fbe4 <tcp_poll+0x24>
 800fbd4:	4b0e      	ldr	r3, [pc, #56]	; (800fc10 <tcp_poll+0x50>)
 800fbd6:	f640 023d 	movw	r2, #2109	; 0x83d
 800fbda:	490e      	ldr	r1, [pc, #56]	; (800fc14 <tcp_poll+0x54>)
 800fbdc:	480e      	ldr	r0, [pc, #56]	; (800fc18 <tcp_poll+0x58>)
 800fbde:	f00b fe6f 	bl	801b8c0 <iprintf>
 800fbe2:	e011      	b.n	800fc08 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	7d1b      	ldrb	r3, [r3, #20]
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d106      	bne.n	800fbfa <tcp_poll+0x3a>
 800fbec:	4b08      	ldr	r3, [pc, #32]	; (800fc10 <tcp_poll+0x50>)
 800fbee:	f640 023e 	movw	r2, #2110	; 0x83e
 800fbf2:	490a      	ldr	r1, [pc, #40]	; (800fc1c <tcp_poll+0x5c>)
 800fbf4:	4808      	ldr	r0, [pc, #32]	; (800fc18 <tcp_poll+0x58>)
 800fbf6:	f00b fe63 	bl	801b8c0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	68ba      	ldr	r2, [r7, #8]
 800fbfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	79fa      	ldrb	r2, [r7, #7]
 800fc06:	775a      	strb	r2, [r3, #29]
}
 800fc08:	3710      	adds	r7, #16
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	0801e62c 	.word	0x0801e62c
 800fc14:	0801ec40 	.word	0x0801ec40
 800fc18:	0801e670 	.word	0x0801e670
 800fc1c:	0801ec58 	.word	0x0801ec58

0800fc20 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d107      	bne.n	800fc3e <tcp_pcb_purge+0x1e>
 800fc2e:	4b21      	ldr	r3, [pc, #132]	; (800fcb4 <tcp_pcb_purge+0x94>)
 800fc30:	f640 0251 	movw	r2, #2129	; 0x851
 800fc34:	4920      	ldr	r1, [pc, #128]	; (800fcb8 <tcp_pcb_purge+0x98>)
 800fc36:	4821      	ldr	r0, [pc, #132]	; (800fcbc <tcp_pcb_purge+0x9c>)
 800fc38:	f00b fe42 	bl	801b8c0 <iprintf>
 800fc3c:	e037      	b.n	800fcae <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	7d1b      	ldrb	r3, [r3, #20]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d033      	beq.n	800fcae <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fc4a:	2b0a      	cmp	r3, #10
 800fc4c:	d02f      	beq.n	800fcae <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d02b      	beq.n	800fcae <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d007      	beq.n	800fc6e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe f8d8 	bl	800de18 <pbuf_free>
      pcb->refused_data = NULL;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d002      	beq.n	800fc7c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f986 	bl	800ff88 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc82:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff fcf9 	bl	800f680 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7ff fcf4 	bl	800f680 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	66da      	str	r2, [r3, #108]	; 0x6c
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	0801e62c 	.word	0x0801e62c
 800fcb8:	0801ec78 	.word	0x0801ec78
 800fcbc:	0801e670 	.word	0x0801e670

0800fcc0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d106      	bne.n	800fcde <tcp_pcb_remove+0x1e>
 800fcd0:	4b3e      	ldr	r3, [pc, #248]	; (800fdcc <tcp_pcb_remove+0x10c>)
 800fcd2:	f640 0283 	movw	r2, #2179	; 0x883
 800fcd6:	493e      	ldr	r1, [pc, #248]	; (800fdd0 <tcp_pcb_remove+0x110>)
 800fcd8:	483e      	ldr	r0, [pc, #248]	; (800fdd4 <tcp_pcb_remove+0x114>)
 800fcda:	f00b fdf1 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d106      	bne.n	800fcf2 <tcp_pcb_remove+0x32>
 800fce4:	4b39      	ldr	r3, [pc, #228]	; (800fdcc <tcp_pcb_remove+0x10c>)
 800fce6:	f640 0284 	movw	r2, #2180	; 0x884
 800fcea:	493b      	ldr	r1, [pc, #236]	; (800fdd8 <tcp_pcb_remove+0x118>)
 800fcec:	4839      	ldr	r0, [pc, #228]	; (800fdd4 <tcp_pcb_remove+0x114>)
 800fcee:	f00b fde7 	bl	801b8c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	683a      	ldr	r2, [r7, #0]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d105      	bne.n	800fd08 <tcp_pcb_remove+0x48>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	68da      	ldr	r2, [r3, #12]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	601a      	str	r2, [r3, #0]
 800fd06:	e013      	b.n	800fd30 <tcp_pcb_remove+0x70>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	60fb      	str	r3, [r7, #12]
 800fd0e:	e00c      	b.n	800fd2a <tcp_pcb_remove+0x6a>
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	683a      	ldr	r2, [r7, #0]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d104      	bne.n	800fd24 <tcp_pcb_remove+0x64>
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	68da      	ldr	r2, [r3, #12]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	60da      	str	r2, [r3, #12]
 800fd22:	e005      	b.n	800fd30 <tcp_pcb_remove+0x70>
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	60fb      	str	r3, [r7, #12]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d1ef      	bne.n	800fd10 <tcp_pcb_remove+0x50>
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	2200      	movs	r2, #0
 800fd34:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fd36:	6838      	ldr	r0, [r7, #0]
 800fd38:	f7ff ff72 	bl	800fc20 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	7d1b      	ldrb	r3, [r3, #20]
 800fd40:	2b0a      	cmp	r3, #10
 800fd42:	d013      	beq.n	800fd6c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d00f      	beq.n	800fd6c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	8b5b      	ldrh	r3, [r3, #26]
 800fd50:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d009      	beq.n	800fd6c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	8b5b      	ldrh	r3, [r3, #26]
 800fd5c:	f043 0302 	orr.w	r3, r3, #2
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd66:	6838      	ldr	r0, [r7, #0]
 800fd68:	f003 fbc2 	bl	80134f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	7d1b      	ldrb	r3, [r3, #20]
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d020      	beq.n	800fdb6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d006      	beq.n	800fd8a <tcp_pcb_remove+0xca>
 800fd7c:	4b13      	ldr	r3, [pc, #76]	; (800fdcc <tcp_pcb_remove+0x10c>)
 800fd7e:	f640 0293 	movw	r2, #2195	; 0x893
 800fd82:	4916      	ldr	r1, [pc, #88]	; (800fddc <tcp_pcb_remove+0x11c>)
 800fd84:	4813      	ldr	r0, [pc, #76]	; (800fdd4 <tcp_pcb_remove+0x114>)
 800fd86:	f00b fd9b 	bl	801b8c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d006      	beq.n	800fda0 <tcp_pcb_remove+0xe0>
 800fd92:	4b0e      	ldr	r3, [pc, #56]	; (800fdcc <tcp_pcb_remove+0x10c>)
 800fd94:	f640 0294 	movw	r2, #2196	; 0x894
 800fd98:	4911      	ldr	r1, [pc, #68]	; (800fde0 <tcp_pcb_remove+0x120>)
 800fd9a:	480e      	ldr	r0, [pc, #56]	; (800fdd4 <tcp_pcb_remove+0x114>)
 800fd9c:	f00b fd90 	bl	801b8c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d006      	beq.n	800fdb6 <tcp_pcb_remove+0xf6>
 800fda8:	4b08      	ldr	r3, [pc, #32]	; (800fdcc <tcp_pcb_remove+0x10c>)
 800fdaa:	f640 0296 	movw	r2, #2198	; 0x896
 800fdae:	490d      	ldr	r1, [pc, #52]	; (800fde4 <tcp_pcb_remove+0x124>)
 800fdb0:	4808      	ldr	r0, [pc, #32]	; (800fdd4 <tcp_pcb_remove+0x114>)
 800fdb2:	f00b fd85 	bl	801b8c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fdc2:	bf00      	nop
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	0801e62c 	.word	0x0801e62c
 800fdd0:	0801ec94 	.word	0x0801ec94
 800fdd4:	0801e670 	.word	0x0801e670
 800fdd8:	0801ecb0 	.word	0x0801ecb0
 800fddc:	0801ecd0 	.word	0x0801ecd0
 800fde0:	0801ece8 	.word	0x0801ece8
 800fde4:	0801ed04 	.word	0x0801ed04

0800fde8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d106      	bne.n	800fe04 <tcp_next_iss+0x1c>
 800fdf6:	4b0a      	ldr	r3, [pc, #40]	; (800fe20 <tcp_next_iss+0x38>)
 800fdf8:	f640 02af 	movw	r2, #2223	; 0x8af
 800fdfc:	4909      	ldr	r1, [pc, #36]	; (800fe24 <tcp_next_iss+0x3c>)
 800fdfe:	480a      	ldr	r0, [pc, #40]	; (800fe28 <tcp_next_iss+0x40>)
 800fe00:	f00b fd5e 	bl	801b8c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fe04:	4b09      	ldr	r3, [pc, #36]	; (800fe2c <tcp_next_iss+0x44>)
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	4b09      	ldr	r3, [pc, #36]	; (800fe30 <tcp_next_iss+0x48>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	4a07      	ldr	r2, [pc, #28]	; (800fe2c <tcp_next_iss+0x44>)
 800fe10:	6013      	str	r3, [r2, #0]
  return iss;
 800fe12:	4b06      	ldr	r3, [pc, #24]	; (800fe2c <tcp_next_iss+0x44>)
 800fe14:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3708      	adds	r7, #8
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	0801e62c 	.word	0x0801e62c
 800fe24:	0801ed1c 	.word	0x0801ed1c
 800fe28:	0801e670 	.word	0x0801e670
 800fe2c:	20000014 	.word	0x20000014
 800fe30:	20010664 	.word	0x20010664

0800fe34 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b086      	sub	sp, #24
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	607a      	str	r2, [r7, #4]
 800fe40:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d106      	bne.n	800fe56 <tcp_eff_send_mss_netif+0x22>
 800fe48:	4b14      	ldr	r3, [pc, #80]	; (800fe9c <tcp_eff_send_mss_netif+0x68>)
 800fe4a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fe4e:	4914      	ldr	r1, [pc, #80]	; (800fea0 <tcp_eff_send_mss_netif+0x6c>)
 800fe50:	4814      	ldr	r0, [pc, #80]	; (800fea4 <tcp_eff_send_mss_netif+0x70>)
 800fe52:	f00b fd35 	bl	801b8c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d101      	bne.n	800fe60 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fe5c:	89fb      	ldrh	r3, [r7, #14]
 800fe5e:	e019      	b.n	800fe94 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe64:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fe66:	8afb      	ldrh	r3, [r7, #22]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d012      	beq.n	800fe92 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fe6c:	2328      	movs	r3, #40	; 0x28
 800fe6e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fe70:	8afa      	ldrh	r2, [r7, #22]
 800fe72:	8abb      	ldrh	r3, [r7, #20]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d904      	bls.n	800fe82 <tcp_eff_send_mss_netif+0x4e>
 800fe78:	8afa      	ldrh	r2, [r7, #22]
 800fe7a:	8abb      	ldrh	r3, [r7, #20]
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	e000      	b.n	800fe84 <tcp_eff_send_mss_netif+0x50>
 800fe82:	2300      	movs	r3, #0
 800fe84:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fe86:	8a7a      	ldrh	r2, [r7, #18]
 800fe88:	89fb      	ldrh	r3, [r7, #14]
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	bf28      	it	cs
 800fe8e:	4613      	movcs	r3, r2
 800fe90:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fe92:	89fb      	ldrh	r3, [r7, #14]
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3718      	adds	r7, #24
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	0801e62c 	.word	0x0801e62c
 800fea0:	0801ed38 	.word	0x0801ed38
 800fea4:	0801e670 	.word	0x0801e670

0800fea8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d119      	bne.n	800fef0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800febc:	4b10      	ldr	r3, [pc, #64]	; (800ff00 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800febe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fec2:	4910      	ldr	r1, [pc, #64]	; (800ff04 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fec4:	4810      	ldr	r0, [pc, #64]	; (800ff08 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fec6:	f00b fcfb 	bl	801b8c0 <iprintf>

  while (pcb != NULL) {
 800feca:	e011      	b.n	800fef0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d108      	bne.n	800feea <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fede:	68f8      	ldr	r0, [r7, #12]
 800fee0:	f7fe fd9a 	bl	800ea18 <tcp_abort>
      pcb = next;
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	60fb      	str	r3, [r7, #12]
 800fee8:	e002      	b.n	800fef0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	68db      	ldr	r3, [r3, #12]
 800feee:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d1ea      	bne.n	800fecc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fef6:	bf00      	nop
 800fef8:	bf00      	nop
 800fefa:	3710      	adds	r7, #16
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	0801e62c 	.word	0x0801e62c
 800ff04:	0801ed60 	.word	0x0801ed60
 800ff08:	0801e670 	.word	0x0801e670

0800ff0c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d02a      	beq.n	800ff72 <tcp_netif_ip_addr_changed+0x66>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d026      	beq.n	800ff72 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ff24:	4b15      	ldr	r3, [pc, #84]	; (800ff7c <tcp_netif_ip_addr_changed+0x70>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f7ff ffbc 	bl	800fea8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ff30:	4b13      	ldr	r3, [pc, #76]	; (800ff80 <tcp_netif_ip_addr_changed+0x74>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4619      	mov	r1, r3
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7ff ffb6 	bl	800fea8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d017      	beq.n	800ff72 <tcp_netif_ip_addr_changed+0x66>
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d013      	beq.n	800ff72 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff4a:	4b0e      	ldr	r3, [pc, #56]	; (800ff84 <tcp_netif_ip_addr_changed+0x78>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	60fb      	str	r3, [r7, #12]
 800ff50:	e00c      	b.n	800ff6c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d103      	bne.n	800ff66 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	681a      	ldr	r2, [r3, #0]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	68db      	ldr	r3, [r3, #12]
 800ff6a:	60fb      	str	r3, [r7, #12]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d1ef      	bne.n	800ff52 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ff72:	bf00      	nop
 800ff74:	3710      	adds	r7, #16
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	20010660 	.word	0x20010660
 800ff80:	2001066c 	.word	0x2001066c
 800ff84:	20010668 	.word	0x20010668

0800ff88 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d007      	beq.n	800ffa8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7ff fb6f 	bl	800f680 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ffa8:	bf00      	nop
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ffb0:	b590      	push	{r4, r7, lr}
 800ffb2:	b08d      	sub	sp, #52	; 0x34
 800ffb4:	af04      	add	r7, sp, #16
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d105      	bne.n	800ffcc <tcp_input+0x1c>
 800ffc0:	4b9b      	ldr	r3, [pc, #620]	; (8010230 <tcp_input+0x280>)
 800ffc2:	2283      	movs	r2, #131	; 0x83
 800ffc4:	499b      	ldr	r1, [pc, #620]	; (8010234 <tcp_input+0x284>)
 800ffc6:	489c      	ldr	r0, [pc, #624]	; (8010238 <tcp_input+0x288>)
 800ffc8:	f00b fc7a 	bl	801b8c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	4a9a      	ldr	r2, [pc, #616]	; (801023c <tcp_input+0x28c>)
 800ffd2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	895b      	ldrh	r3, [r3, #10]
 800ffd8:	2b13      	cmp	r3, #19
 800ffda:	f240 83c4 	bls.w	8010766 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ffde:	4b98      	ldr	r3, [pc, #608]	; (8010240 <tcp_input+0x290>)
 800ffe0:	695b      	ldr	r3, [r3, #20]
 800ffe2:	4a97      	ldr	r2, [pc, #604]	; (8010240 <tcp_input+0x290>)
 800ffe4:	6812      	ldr	r2, [r2, #0]
 800ffe6:	4611      	mov	r1, r2
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f008 fb17 	bl	801861c <ip4_addr_isbroadcast_u32>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f040 83ba 	bne.w	801076a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fff6:	4b92      	ldr	r3, [pc, #584]	; (8010240 <tcp_input+0x290>)
 800fff8:	695b      	ldr	r3, [r3, #20]
 800fffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fffe:	2be0      	cmp	r3, #224	; 0xe0
 8010000:	f000 83b3 	beq.w	801076a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010004:	4b8d      	ldr	r3, [pc, #564]	; (801023c <tcp_input+0x28c>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	899b      	ldrh	r3, [r3, #12]
 801000a:	b29b      	uxth	r3, r3
 801000c:	4618      	mov	r0, r3
 801000e:	f7fc fb19 	bl	800c644 <lwip_htons>
 8010012:	4603      	mov	r3, r0
 8010014:	0b1b      	lsrs	r3, r3, #12
 8010016:	b29b      	uxth	r3, r3
 8010018:	b2db      	uxtb	r3, r3
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801001e:	7cbb      	ldrb	r3, [r7, #18]
 8010020:	2b13      	cmp	r3, #19
 8010022:	f240 83a4 	bls.w	801076e <tcp_input+0x7be>
 8010026:	7cbb      	ldrb	r3, [r7, #18]
 8010028:	b29a      	uxth	r2, r3
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	891b      	ldrh	r3, [r3, #8]
 801002e:	429a      	cmp	r2, r3
 8010030:	f200 839d 	bhi.w	801076e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010034:	7cbb      	ldrb	r3, [r7, #18]
 8010036:	b29b      	uxth	r3, r3
 8010038:	3b14      	subs	r3, #20
 801003a:	b29a      	uxth	r2, r3
 801003c:	4b81      	ldr	r3, [pc, #516]	; (8010244 <tcp_input+0x294>)
 801003e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010040:	4b81      	ldr	r3, [pc, #516]	; (8010248 <tcp_input+0x298>)
 8010042:	2200      	movs	r2, #0
 8010044:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	895a      	ldrh	r2, [r3, #10]
 801004a:	7cbb      	ldrb	r3, [r7, #18]
 801004c:	b29b      	uxth	r3, r3
 801004e:	429a      	cmp	r2, r3
 8010050:	d309      	bcc.n	8010066 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010052:	4b7c      	ldr	r3, [pc, #496]	; (8010244 <tcp_input+0x294>)
 8010054:	881a      	ldrh	r2, [r3, #0]
 8010056:	4b7d      	ldr	r3, [pc, #500]	; (801024c <tcp_input+0x29c>)
 8010058:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801005a:	7cbb      	ldrb	r3, [r7, #18]
 801005c:	4619      	mov	r1, r3
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f7fd fe22 	bl	800dca8 <pbuf_remove_header>
 8010064:	e04e      	b.n	8010104 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d105      	bne.n	801007a <tcp_input+0xca>
 801006e:	4b70      	ldr	r3, [pc, #448]	; (8010230 <tcp_input+0x280>)
 8010070:	22c2      	movs	r2, #194	; 0xc2
 8010072:	4977      	ldr	r1, [pc, #476]	; (8010250 <tcp_input+0x2a0>)
 8010074:	4870      	ldr	r0, [pc, #448]	; (8010238 <tcp_input+0x288>)
 8010076:	f00b fc23 	bl	801b8c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801007a:	2114      	movs	r1, #20
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7fd fe13 	bl	800dca8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	895a      	ldrh	r2, [r3, #10]
 8010086:	4b71      	ldr	r3, [pc, #452]	; (801024c <tcp_input+0x29c>)
 8010088:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801008a:	4b6e      	ldr	r3, [pc, #440]	; (8010244 <tcp_input+0x294>)
 801008c:	881a      	ldrh	r2, [r3, #0]
 801008e:	4b6f      	ldr	r3, [pc, #444]	; (801024c <tcp_input+0x29c>)
 8010090:	881b      	ldrh	r3, [r3, #0]
 8010092:	1ad3      	subs	r3, r2, r3
 8010094:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010096:	4b6d      	ldr	r3, [pc, #436]	; (801024c <tcp_input+0x29c>)
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	4619      	mov	r1, r3
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f7fd fe03 	bl	800dca8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	895b      	ldrh	r3, [r3, #10]
 80100a8:	8a3a      	ldrh	r2, [r7, #16]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	f200 8361 	bhi.w	8010772 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	4a64      	ldr	r2, [pc, #400]	; (8010248 <tcp_input+0x298>)
 80100b8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	8a3a      	ldrh	r2, [r7, #16]
 80100c0:	4611      	mov	r1, r2
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fd fdf0 	bl	800dca8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	891a      	ldrh	r2, [r3, #8]
 80100cc:	8a3b      	ldrh	r3, [r7, #16]
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	895b      	ldrh	r3, [r3, #10]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d005      	beq.n	80100ea <tcp_input+0x13a>
 80100de:	4b54      	ldr	r3, [pc, #336]	; (8010230 <tcp_input+0x280>)
 80100e0:	22df      	movs	r2, #223	; 0xdf
 80100e2:	495c      	ldr	r1, [pc, #368]	; (8010254 <tcp_input+0x2a4>)
 80100e4:	4854      	ldr	r0, [pc, #336]	; (8010238 <tcp_input+0x288>)
 80100e6:	f00b fbeb 	bl	801b8c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	891a      	ldrh	r2, [r3, #8]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	891b      	ldrh	r3, [r3, #8]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d005      	beq.n	8010104 <tcp_input+0x154>
 80100f8:	4b4d      	ldr	r3, [pc, #308]	; (8010230 <tcp_input+0x280>)
 80100fa:	22e0      	movs	r2, #224	; 0xe0
 80100fc:	4956      	ldr	r1, [pc, #344]	; (8010258 <tcp_input+0x2a8>)
 80100fe:	484e      	ldr	r0, [pc, #312]	; (8010238 <tcp_input+0x288>)
 8010100:	f00b fbde 	bl	801b8c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010104:	4b4d      	ldr	r3, [pc, #308]	; (801023c <tcp_input+0x28c>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	881b      	ldrh	r3, [r3, #0]
 801010a:	b29b      	uxth	r3, r3
 801010c:	4a4b      	ldr	r2, [pc, #300]	; (801023c <tcp_input+0x28c>)
 801010e:	6814      	ldr	r4, [r2, #0]
 8010110:	4618      	mov	r0, r3
 8010112:	f7fc fa97 	bl	800c644 <lwip_htons>
 8010116:	4603      	mov	r3, r0
 8010118:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801011a:	4b48      	ldr	r3, [pc, #288]	; (801023c <tcp_input+0x28c>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	885b      	ldrh	r3, [r3, #2]
 8010120:	b29b      	uxth	r3, r3
 8010122:	4a46      	ldr	r2, [pc, #280]	; (801023c <tcp_input+0x28c>)
 8010124:	6814      	ldr	r4, [r2, #0]
 8010126:	4618      	mov	r0, r3
 8010128:	f7fc fa8c 	bl	800c644 <lwip_htons>
 801012c:	4603      	mov	r3, r0
 801012e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010130:	4b42      	ldr	r3, [pc, #264]	; (801023c <tcp_input+0x28c>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	4a41      	ldr	r2, [pc, #260]	; (801023c <tcp_input+0x28c>)
 8010138:	6814      	ldr	r4, [r2, #0]
 801013a:	4618      	mov	r0, r3
 801013c:	f7fc fa97 	bl	800c66e <lwip_htonl>
 8010140:	4603      	mov	r3, r0
 8010142:	6063      	str	r3, [r4, #4]
 8010144:	6863      	ldr	r3, [r4, #4]
 8010146:	4a45      	ldr	r2, [pc, #276]	; (801025c <tcp_input+0x2ac>)
 8010148:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801014a:	4b3c      	ldr	r3, [pc, #240]	; (801023c <tcp_input+0x28c>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	689b      	ldr	r3, [r3, #8]
 8010150:	4a3a      	ldr	r2, [pc, #232]	; (801023c <tcp_input+0x28c>)
 8010152:	6814      	ldr	r4, [r2, #0]
 8010154:	4618      	mov	r0, r3
 8010156:	f7fc fa8a 	bl	800c66e <lwip_htonl>
 801015a:	4603      	mov	r3, r0
 801015c:	60a3      	str	r3, [r4, #8]
 801015e:	68a3      	ldr	r3, [r4, #8]
 8010160:	4a3f      	ldr	r2, [pc, #252]	; (8010260 <tcp_input+0x2b0>)
 8010162:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010164:	4b35      	ldr	r3, [pc, #212]	; (801023c <tcp_input+0x28c>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	89db      	ldrh	r3, [r3, #14]
 801016a:	b29b      	uxth	r3, r3
 801016c:	4a33      	ldr	r2, [pc, #204]	; (801023c <tcp_input+0x28c>)
 801016e:	6814      	ldr	r4, [r2, #0]
 8010170:	4618      	mov	r0, r3
 8010172:	f7fc fa67 	bl	800c644 <lwip_htons>
 8010176:	4603      	mov	r3, r0
 8010178:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801017a:	4b30      	ldr	r3, [pc, #192]	; (801023c <tcp_input+0x28c>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	899b      	ldrh	r3, [r3, #12]
 8010180:	b29b      	uxth	r3, r3
 8010182:	4618      	mov	r0, r3
 8010184:	f7fc fa5e 	bl	800c644 <lwip_htons>
 8010188:	4603      	mov	r3, r0
 801018a:	b2db      	uxtb	r3, r3
 801018c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010190:	b2da      	uxtb	r2, r3
 8010192:	4b34      	ldr	r3, [pc, #208]	; (8010264 <tcp_input+0x2b4>)
 8010194:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	891a      	ldrh	r2, [r3, #8]
 801019a:	4b33      	ldr	r3, [pc, #204]	; (8010268 <tcp_input+0x2b8>)
 801019c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801019e:	4b31      	ldr	r3, [pc, #196]	; (8010264 <tcp_input+0x2b4>)
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	f003 0303 	and.w	r3, r3, #3
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d00c      	beq.n	80101c4 <tcp_input+0x214>
    tcplen++;
 80101aa:	4b2f      	ldr	r3, [pc, #188]	; (8010268 <tcp_input+0x2b8>)
 80101ac:	881b      	ldrh	r3, [r3, #0]
 80101ae:	3301      	adds	r3, #1
 80101b0:	b29a      	uxth	r2, r3
 80101b2:	4b2d      	ldr	r3, [pc, #180]	; (8010268 <tcp_input+0x2b8>)
 80101b4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	891a      	ldrh	r2, [r3, #8]
 80101ba:	4b2b      	ldr	r3, [pc, #172]	; (8010268 <tcp_input+0x2b8>)
 80101bc:	881b      	ldrh	r3, [r3, #0]
 80101be:	429a      	cmp	r2, r3
 80101c0:	f200 82d9 	bhi.w	8010776 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80101c4:	2300      	movs	r3, #0
 80101c6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101c8:	4b28      	ldr	r3, [pc, #160]	; (801026c <tcp_input+0x2bc>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	61fb      	str	r3, [r7, #28]
 80101ce:	e09d      	b.n	801030c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	7d1b      	ldrb	r3, [r3, #20]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d105      	bne.n	80101e4 <tcp_input+0x234>
 80101d8:	4b15      	ldr	r3, [pc, #84]	; (8010230 <tcp_input+0x280>)
 80101da:	22fb      	movs	r2, #251	; 0xfb
 80101dc:	4924      	ldr	r1, [pc, #144]	; (8010270 <tcp_input+0x2c0>)
 80101de:	4816      	ldr	r0, [pc, #88]	; (8010238 <tcp_input+0x288>)
 80101e0:	f00b fb6e 	bl	801b8c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	7d1b      	ldrb	r3, [r3, #20]
 80101e8:	2b0a      	cmp	r3, #10
 80101ea:	d105      	bne.n	80101f8 <tcp_input+0x248>
 80101ec:	4b10      	ldr	r3, [pc, #64]	; (8010230 <tcp_input+0x280>)
 80101ee:	22fc      	movs	r2, #252	; 0xfc
 80101f0:	4920      	ldr	r1, [pc, #128]	; (8010274 <tcp_input+0x2c4>)
 80101f2:	4811      	ldr	r0, [pc, #68]	; (8010238 <tcp_input+0x288>)
 80101f4:	f00b fb64 	bl	801b8c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	7d1b      	ldrb	r3, [r3, #20]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d105      	bne.n	801020c <tcp_input+0x25c>
 8010200:	4b0b      	ldr	r3, [pc, #44]	; (8010230 <tcp_input+0x280>)
 8010202:	22fd      	movs	r2, #253	; 0xfd
 8010204:	491c      	ldr	r1, [pc, #112]	; (8010278 <tcp_input+0x2c8>)
 8010206:	480c      	ldr	r0, [pc, #48]	; (8010238 <tcp_input+0x288>)
 8010208:	f00b fb5a 	bl	801b8c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	7a1b      	ldrb	r3, [r3, #8]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d033      	beq.n	801027c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	7a1a      	ldrb	r2, [r3, #8]
 8010218:	4b09      	ldr	r3, [pc, #36]	; (8010240 <tcp_input+0x290>)
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010220:	3301      	adds	r3, #1
 8010222:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010224:	429a      	cmp	r2, r3
 8010226:	d029      	beq.n	801027c <tcp_input+0x2cc>
      prev = pcb;
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	61bb      	str	r3, [r7, #24]
      continue;
 801022c:	e06b      	b.n	8010306 <tcp_input+0x356>
 801022e:	bf00      	nop
 8010230:	0801ed94 	.word	0x0801ed94
 8010234:	0801edc8 	.word	0x0801edc8
 8010238:	0801ede0 	.word	0x0801ede0
 801023c:	20008af4 	.word	0x20008af4
 8010240:	2000cf0c 	.word	0x2000cf0c
 8010244:	20008af8 	.word	0x20008af8
 8010248:	20008afc 	.word	0x20008afc
 801024c:	20008afa 	.word	0x20008afa
 8010250:	0801ee08 	.word	0x0801ee08
 8010254:	0801ee18 	.word	0x0801ee18
 8010258:	0801ee24 	.word	0x0801ee24
 801025c:	20008b04 	.word	0x20008b04
 8010260:	20008b08 	.word	0x20008b08
 8010264:	20008b10 	.word	0x20008b10
 8010268:	20008b0e 	.word	0x20008b0e
 801026c:	20010660 	.word	0x20010660
 8010270:	0801ee44 	.word	0x0801ee44
 8010274:	0801ee6c 	.word	0x0801ee6c
 8010278:	0801ee98 	.word	0x0801ee98
    }

    if (pcb->remote_port == tcphdr->src &&
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	8b1a      	ldrh	r2, [r3, #24]
 8010280:	4b94      	ldr	r3, [pc, #592]	; (80104d4 <tcp_input+0x524>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	881b      	ldrh	r3, [r3, #0]
 8010286:	b29b      	uxth	r3, r3
 8010288:	429a      	cmp	r2, r3
 801028a:	d13a      	bne.n	8010302 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	8ada      	ldrh	r2, [r3, #22]
 8010290:	4b90      	ldr	r3, [pc, #576]	; (80104d4 <tcp_input+0x524>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	885b      	ldrh	r3, [r3, #2]
 8010296:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010298:	429a      	cmp	r2, r3
 801029a:	d132      	bne.n	8010302 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	685a      	ldr	r2, [r3, #4]
 80102a0:	4b8d      	ldr	r3, [pc, #564]	; (80104d8 <tcp_input+0x528>)
 80102a2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d12c      	bne.n	8010302 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	4b8a      	ldr	r3, [pc, #552]	; (80104d8 <tcp_input+0x528>)
 80102ae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d126      	bne.n	8010302 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	69fa      	ldr	r2, [r7, #28]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d106      	bne.n	80102cc <tcp_input+0x31c>
 80102be:	4b87      	ldr	r3, [pc, #540]	; (80104dc <tcp_input+0x52c>)
 80102c0:	f240 120d 	movw	r2, #269	; 0x10d
 80102c4:	4986      	ldr	r1, [pc, #536]	; (80104e0 <tcp_input+0x530>)
 80102c6:	4887      	ldr	r0, [pc, #540]	; (80104e4 <tcp_input+0x534>)
 80102c8:	f00b fafa 	bl	801b8c0 <iprintf>
      if (prev != NULL) {
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d00a      	beq.n	80102e8 <tcp_input+0x338>
        prev->next = pcb->next;
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	68da      	ldr	r2, [r3, #12]
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80102da:	4b83      	ldr	r3, [pc, #524]	; (80104e8 <tcp_input+0x538>)
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	69fb      	ldr	r3, [r7, #28]
 80102e0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80102e2:	4a81      	ldr	r2, [pc, #516]	; (80104e8 <tcp_input+0x538>)
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	69fa      	ldr	r2, [r7, #28]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d111      	bne.n	8010316 <tcp_input+0x366>
 80102f2:	4b7a      	ldr	r3, [pc, #488]	; (80104dc <tcp_input+0x52c>)
 80102f4:	f240 1215 	movw	r2, #277	; 0x115
 80102f8:	497c      	ldr	r1, [pc, #496]	; (80104ec <tcp_input+0x53c>)
 80102fa:	487a      	ldr	r0, [pc, #488]	; (80104e4 <tcp_input+0x534>)
 80102fc:	f00b fae0 	bl	801b8c0 <iprintf>
      break;
 8010300:	e009      	b.n	8010316 <tcp_input+0x366>
    }
    prev = pcb;
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	61fb      	str	r3, [r7, #28]
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	2b00      	cmp	r3, #0
 8010310:	f47f af5e 	bne.w	80101d0 <tcp_input+0x220>
 8010314:	e000      	b.n	8010318 <tcp_input+0x368>
      break;
 8010316:	bf00      	nop
  }

  if (pcb == NULL) {
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	2b00      	cmp	r3, #0
 801031c:	f040 8095 	bne.w	801044a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010320:	4b73      	ldr	r3, [pc, #460]	; (80104f0 <tcp_input+0x540>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	61fb      	str	r3, [r7, #28]
 8010326:	e03f      	b.n	80103a8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	7d1b      	ldrb	r3, [r3, #20]
 801032c:	2b0a      	cmp	r3, #10
 801032e:	d006      	beq.n	801033e <tcp_input+0x38e>
 8010330:	4b6a      	ldr	r3, [pc, #424]	; (80104dc <tcp_input+0x52c>)
 8010332:	f240 121f 	movw	r2, #287	; 0x11f
 8010336:	496f      	ldr	r1, [pc, #444]	; (80104f4 <tcp_input+0x544>)
 8010338:	486a      	ldr	r0, [pc, #424]	; (80104e4 <tcp_input+0x534>)
 801033a:	f00b fac1 	bl	801b8c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801033e:	69fb      	ldr	r3, [r7, #28]
 8010340:	7a1b      	ldrb	r3, [r3, #8]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d009      	beq.n	801035a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	7a1a      	ldrb	r2, [r3, #8]
 801034a:	4b63      	ldr	r3, [pc, #396]	; (80104d8 <tcp_input+0x528>)
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010352:	3301      	adds	r3, #1
 8010354:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010356:	429a      	cmp	r2, r3
 8010358:	d122      	bne.n	80103a0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	8b1a      	ldrh	r2, [r3, #24]
 801035e:	4b5d      	ldr	r3, [pc, #372]	; (80104d4 <tcp_input+0x524>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	881b      	ldrh	r3, [r3, #0]
 8010364:	b29b      	uxth	r3, r3
 8010366:	429a      	cmp	r2, r3
 8010368:	d11b      	bne.n	80103a2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	8ada      	ldrh	r2, [r3, #22]
 801036e:	4b59      	ldr	r3, [pc, #356]	; (80104d4 <tcp_input+0x524>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	885b      	ldrh	r3, [r3, #2]
 8010374:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010376:	429a      	cmp	r2, r3
 8010378:	d113      	bne.n	80103a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	685a      	ldr	r2, [r3, #4]
 801037e:	4b56      	ldr	r3, [pc, #344]	; (80104d8 <tcp_input+0x528>)
 8010380:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010382:	429a      	cmp	r2, r3
 8010384:	d10d      	bne.n	80103a2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	4b53      	ldr	r3, [pc, #332]	; (80104d8 <tcp_input+0x528>)
 801038c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801038e:	429a      	cmp	r2, r3
 8010390:	d107      	bne.n	80103a2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010392:	69f8      	ldr	r0, [r7, #28]
 8010394:	f000 fb54 	bl	8010a40 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7fd fd3d 	bl	800de18 <pbuf_free>
        return;
 801039e:	e1f0      	b.n	8010782 <tcp_input+0x7d2>
        continue;
 80103a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	68db      	ldr	r3, [r3, #12]
 80103a6:	61fb      	str	r3, [r7, #28]
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1bc      	bne.n	8010328 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80103b2:	4b51      	ldr	r3, [pc, #324]	; (80104f8 <tcp_input+0x548>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	617b      	str	r3, [r7, #20]
 80103b8:	e02a      	b.n	8010410 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	7a1b      	ldrb	r3, [r3, #8]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d00c      	beq.n	80103dc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	7a1a      	ldrb	r2, [r3, #8]
 80103c6:	4b44      	ldr	r3, [pc, #272]	; (80104d8 <tcp_input+0x528>)
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80103ce:	3301      	adds	r3, #1
 80103d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d002      	beq.n	80103dc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	61bb      	str	r3, [r7, #24]
        continue;
 80103da:	e016      	b.n	801040a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	8ada      	ldrh	r2, [r3, #22]
 80103e0:	4b3c      	ldr	r3, [pc, #240]	; (80104d4 <tcp_input+0x524>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	885b      	ldrh	r3, [r3, #2]
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d10c      	bne.n	8010406 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	4b39      	ldr	r3, [pc, #228]	; (80104d8 <tcp_input+0x528>)
 80103f2:	695b      	ldr	r3, [r3, #20]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d00f      	beq.n	8010418 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00d      	beq.n	801041a <tcp_input+0x46a>
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d009      	beq.n	801041a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	617b      	str	r3, [r7, #20]
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d1d1      	bne.n	80103ba <tcp_input+0x40a>
 8010416:	e000      	b.n	801041a <tcp_input+0x46a>
            break;
 8010418:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d014      	beq.n	801044a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00a      	beq.n	801043c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	68da      	ldr	r2, [r3, #12]
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801042e:	4b32      	ldr	r3, [pc, #200]	; (80104f8 <tcp_input+0x548>)
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010436:	4a30      	ldr	r2, [pc, #192]	; (80104f8 <tcp_input+0x548>)
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801043c:	6978      	ldr	r0, [r7, #20]
 801043e:	f000 fa01 	bl	8010844 <tcp_listen_input>
      }
      pbuf_free(p);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f7fd fce8 	bl	800de18 <pbuf_free>
      return;
 8010448:	e19b      	b.n	8010782 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	2b00      	cmp	r3, #0
 801044e:	f000 8160 	beq.w	8010712 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010452:	4b2a      	ldr	r3, [pc, #168]	; (80104fc <tcp_input+0x54c>)
 8010454:	2200      	movs	r2, #0
 8010456:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	891a      	ldrh	r2, [r3, #8]
 801045c:	4b27      	ldr	r3, [pc, #156]	; (80104fc <tcp_input+0x54c>)
 801045e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010460:	4a26      	ldr	r2, [pc, #152]	; (80104fc <tcp_input+0x54c>)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010466:	4b1b      	ldr	r3, [pc, #108]	; (80104d4 <tcp_input+0x524>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	4a24      	ldr	r2, [pc, #144]	; (80104fc <tcp_input+0x54c>)
 801046c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801046e:	4b24      	ldr	r3, [pc, #144]	; (8010500 <tcp_input+0x550>)
 8010470:	2200      	movs	r2, #0
 8010472:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010474:	4b23      	ldr	r3, [pc, #140]	; (8010504 <tcp_input+0x554>)
 8010476:	2200      	movs	r2, #0
 8010478:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801047a:	4b23      	ldr	r3, [pc, #140]	; (8010508 <tcp_input+0x558>)
 801047c:	2200      	movs	r2, #0
 801047e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010480:	4b22      	ldr	r3, [pc, #136]	; (801050c <tcp_input+0x55c>)
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	f003 0308 	and.w	r3, r3, #8
 8010488:	2b00      	cmp	r3, #0
 801048a:	d006      	beq.n	801049a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	7b5b      	ldrb	r3, [r3, #13]
 8010490:	f043 0301 	orr.w	r3, r3, #1
 8010494:	b2da      	uxtb	r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801049a:	69fb      	ldr	r3, [r7, #28]
 801049c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d038      	beq.n	8010514 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80104a2:	69f8      	ldr	r0, [r7, #28]
 80104a4:	f7ff f870 	bl	800f588 <tcp_process_refused_data>
 80104a8:	4603      	mov	r3, r0
 80104aa:	f113 0f0d 	cmn.w	r3, #13
 80104ae:	d007      	beq.n	80104c0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d02d      	beq.n	8010514 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80104b8:	4b15      	ldr	r3, [pc, #84]	; (8010510 <tcp_input+0x560>)
 80104ba:	881b      	ldrh	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d029      	beq.n	8010514 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f040 8104 	bne.w	80106d2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80104ca:	69f8      	ldr	r0, [r7, #28]
 80104cc:	f003 fe16 	bl	80140fc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80104d0:	e0ff      	b.n	80106d2 <tcp_input+0x722>
 80104d2:	bf00      	nop
 80104d4:	20008af4 	.word	0x20008af4
 80104d8:	2000cf0c 	.word	0x2000cf0c
 80104dc:	0801ed94 	.word	0x0801ed94
 80104e0:	0801eec0 	.word	0x0801eec0
 80104e4:	0801ede0 	.word	0x0801ede0
 80104e8:	20010660 	.word	0x20010660
 80104ec:	0801eeec 	.word	0x0801eeec
 80104f0:	20010670 	.word	0x20010670
 80104f4:	0801ef18 	.word	0x0801ef18
 80104f8:	20010668 	.word	0x20010668
 80104fc:	20008ae4 	.word	0x20008ae4
 8010500:	20008b14 	.word	0x20008b14
 8010504:	20008b11 	.word	0x20008b11
 8010508:	20008b0c 	.word	0x20008b0c
 801050c:	20008b10 	.word	0x20008b10
 8010510:	20008b0e 	.word	0x20008b0e
      }
    }
    tcp_input_pcb = pcb;
 8010514:	4a9c      	ldr	r2, [pc, #624]	; (8010788 <tcp_input+0x7d8>)
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801051a:	69f8      	ldr	r0, [r7, #28]
 801051c:	f000 fb0a 	bl	8010b34 <tcp_process>
 8010520:	4603      	mov	r3, r0
 8010522:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010524:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010528:	f113 0f0d 	cmn.w	r3, #13
 801052c:	f000 80d3 	beq.w	80106d6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010530:	4b96      	ldr	r3, [pc, #600]	; (801078c <tcp_input+0x7dc>)
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	f003 0308 	and.w	r3, r3, #8
 8010538:	2b00      	cmp	r3, #0
 801053a:	d015      	beq.n	8010568 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801053c:	69fb      	ldr	r3, [r7, #28]
 801053e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010542:	2b00      	cmp	r3, #0
 8010544:	d008      	beq.n	8010558 <tcp_input+0x5a8>
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801054c:	69fa      	ldr	r2, [r7, #28]
 801054e:	6912      	ldr	r2, [r2, #16]
 8010550:	f06f 010d 	mvn.w	r1, #13
 8010554:	4610      	mov	r0, r2
 8010556:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010558:	69f9      	ldr	r1, [r7, #28]
 801055a:	488d      	ldr	r0, [pc, #564]	; (8010790 <tcp_input+0x7e0>)
 801055c:	f7ff fbb0 	bl	800fcc0 <tcp_pcb_remove>
        tcp_free(pcb);
 8010560:	69f8      	ldr	r0, [r7, #28]
 8010562:	f7fd ff15 	bl	800e390 <tcp_free>
 8010566:	e0c1      	b.n	80106ec <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010568:	2300      	movs	r3, #0
 801056a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801056c:	4b89      	ldr	r3, [pc, #548]	; (8010794 <tcp_input+0x7e4>)
 801056e:	881b      	ldrh	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d01d      	beq.n	80105b0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010574:	4b87      	ldr	r3, [pc, #540]	; (8010794 <tcp_input+0x7e4>)
 8010576:	881b      	ldrh	r3, [r3, #0]
 8010578:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801057a:	69fb      	ldr	r3, [r7, #28]
 801057c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010580:	2b00      	cmp	r3, #0
 8010582:	d00a      	beq.n	801059a <tcp_input+0x5ea>
 8010584:	69fb      	ldr	r3, [r7, #28]
 8010586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801058a:	69fa      	ldr	r2, [r7, #28]
 801058c:	6910      	ldr	r0, [r2, #16]
 801058e:	89fa      	ldrh	r2, [r7, #14]
 8010590:	69f9      	ldr	r1, [r7, #28]
 8010592:	4798      	blx	r3
 8010594:	4603      	mov	r3, r0
 8010596:	74fb      	strb	r3, [r7, #19]
 8010598:	e001      	b.n	801059e <tcp_input+0x5ee>
 801059a:	2300      	movs	r3, #0
 801059c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801059e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105a2:	f113 0f0d 	cmn.w	r3, #13
 80105a6:	f000 8098 	beq.w	80106da <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80105aa:	4b7a      	ldr	r3, [pc, #488]	; (8010794 <tcp_input+0x7e4>)
 80105ac:	2200      	movs	r2, #0
 80105ae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80105b0:	69f8      	ldr	r0, [r7, #28]
 80105b2:	f000 f907 	bl	80107c4 <tcp_input_delayed_close>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f040 8090 	bne.w	80106de <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80105be:	4b76      	ldr	r3, [pc, #472]	; (8010798 <tcp_input+0x7e8>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d041      	beq.n	801064a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80105c6:	69fb      	ldr	r3, [r7, #28]
 80105c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d006      	beq.n	80105dc <tcp_input+0x62c>
 80105ce:	4b73      	ldr	r3, [pc, #460]	; (801079c <tcp_input+0x7ec>)
 80105d0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80105d4:	4972      	ldr	r1, [pc, #456]	; (80107a0 <tcp_input+0x7f0>)
 80105d6:	4873      	ldr	r0, [pc, #460]	; (80107a4 <tcp_input+0x7f4>)
 80105d8:	f00b f972 	bl	801b8c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	8b5b      	ldrh	r3, [r3, #26]
 80105e0:	f003 0310 	and.w	r3, r3, #16
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d008      	beq.n	80105fa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80105e8:	4b6b      	ldr	r3, [pc, #428]	; (8010798 <tcp_input+0x7e8>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fd fc13 	bl	800de18 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80105f2:	69f8      	ldr	r0, [r7, #28]
 80105f4:	f7fe fa10 	bl	800ea18 <tcp_abort>
            goto aborted;
 80105f8:	e078      	b.n	80106ec <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00c      	beq.n	801061e <tcp_input+0x66e>
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	6918      	ldr	r0, [r3, #16]
 801060e:	4b62      	ldr	r3, [pc, #392]	; (8010798 <tcp_input+0x7e8>)
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	2300      	movs	r3, #0
 8010614:	69f9      	ldr	r1, [r7, #28]
 8010616:	47a0      	blx	r4
 8010618:	4603      	mov	r3, r0
 801061a:	74fb      	strb	r3, [r7, #19]
 801061c:	e008      	b.n	8010630 <tcp_input+0x680>
 801061e:	4b5e      	ldr	r3, [pc, #376]	; (8010798 <tcp_input+0x7e8>)
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	2300      	movs	r3, #0
 8010624:	69f9      	ldr	r1, [r7, #28]
 8010626:	2000      	movs	r0, #0
 8010628:	f7ff f884 	bl	800f734 <tcp_recv_null>
 801062c:	4603      	mov	r3, r0
 801062e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010630:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010634:	f113 0f0d 	cmn.w	r3, #13
 8010638:	d053      	beq.n	80106e2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801063a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d003      	beq.n	801064a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010642:	4b55      	ldr	r3, [pc, #340]	; (8010798 <tcp_input+0x7e8>)
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801064a:	4b50      	ldr	r3, [pc, #320]	; (801078c <tcp_input+0x7dc>)
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	f003 0320 	and.w	r3, r3, #32
 8010652:	2b00      	cmp	r3, #0
 8010654:	d030      	beq.n	80106b8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010656:	69fb      	ldr	r3, [r7, #28]
 8010658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801065a:	2b00      	cmp	r3, #0
 801065c:	d009      	beq.n	8010672 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010662:	7b5a      	ldrb	r2, [r3, #13]
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010668:	f042 0220 	orr.w	r2, r2, #32
 801066c:	b2d2      	uxtb	r2, r2
 801066e:	735a      	strb	r2, [r3, #13]
 8010670:	e022      	b.n	80106b8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010672:	69fb      	ldr	r3, [r7, #28]
 8010674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010676:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801067a:	d005      	beq.n	8010688 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010680:	3301      	adds	r3, #1
 8010682:	b29a      	uxth	r2, r3
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010688:	69fb      	ldr	r3, [r7, #28]
 801068a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00b      	beq.n	80106aa <tcp_input+0x6fa>
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	6918      	ldr	r0, [r3, #16]
 801069c:	2300      	movs	r3, #0
 801069e:	2200      	movs	r2, #0
 80106a0:	69f9      	ldr	r1, [r7, #28]
 80106a2:	47a0      	blx	r4
 80106a4:	4603      	mov	r3, r0
 80106a6:	74fb      	strb	r3, [r7, #19]
 80106a8:	e001      	b.n	80106ae <tcp_input+0x6fe>
 80106aa:	2300      	movs	r3, #0
 80106ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80106ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106b2:	f113 0f0d 	cmn.w	r3, #13
 80106b6:	d016      	beq.n	80106e6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80106b8:	4b33      	ldr	r3, [pc, #204]	; (8010788 <tcp_input+0x7d8>)
 80106ba:	2200      	movs	r2, #0
 80106bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80106be:	69f8      	ldr	r0, [r7, #28]
 80106c0:	f000 f880 	bl	80107c4 <tcp_input_delayed_close>
 80106c4:	4603      	mov	r3, r0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d10f      	bne.n	80106ea <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80106ca:	69f8      	ldr	r0, [r7, #28]
 80106cc:	f002 ff10 	bl	80134f0 <tcp_output>
 80106d0:	e00c      	b.n	80106ec <tcp_input+0x73c>
        goto aborted;
 80106d2:	bf00      	nop
 80106d4:	e00a      	b.n	80106ec <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80106d6:	bf00      	nop
 80106d8:	e008      	b.n	80106ec <tcp_input+0x73c>
              goto aborted;
 80106da:	bf00      	nop
 80106dc:	e006      	b.n	80106ec <tcp_input+0x73c>
          goto aborted;
 80106de:	bf00      	nop
 80106e0:	e004      	b.n	80106ec <tcp_input+0x73c>
            goto aborted;
 80106e2:	bf00      	nop
 80106e4:	e002      	b.n	80106ec <tcp_input+0x73c>
              goto aborted;
 80106e6:	bf00      	nop
 80106e8:	e000      	b.n	80106ec <tcp_input+0x73c>
          goto aborted;
 80106ea:	bf00      	nop
    tcp_input_pcb = NULL;
 80106ec:	4b26      	ldr	r3, [pc, #152]	; (8010788 <tcp_input+0x7d8>)
 80106ee:	2200      	movs	r2, #0
 80106f0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80106f2:	4b29      	ldr	r3, [pc, #164]	; (8010798 <tcp_input+0x7e8>)
 80106f4:	2200      	movs	r2, #0
 80106f6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80106f8:	4b2b      	ldr	r3, [pc, #172]	; (80107a8 <tcp_input+0x7f8>)
 80106fa:	685b      	ldr	r3, [r3, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d03f      	beq.n	8010780 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010700:	4b29      	ldr	r3, [pc, #164]	; (80107a8 <tcp_input+0x7f8>)
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	4618      	mov	r0, r3
 8010706:	f7fd fb87 	bl	800de18 <pbuf_free>
      inseg.p = NULL;
 801070a:	4b27      	ldr	r3, [pc, #156]	; (80107a8 <tcp_input+0x7f8>)
 801070c:	2200      	movs	r2, #0
 801070e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010710:	e036      	b.n	8010780 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010712:	4b26      	ldr	r3, [pc, #152]	; (80107ac <tcp_input+0x7fc>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	899b      	ldrh	r3, [r3, #12]
 8010718:	b29b      	uxth	r3, r3
 801071a:	4618      	mov	r0, r3
 801071c:	f7fb ff92 	bl	800c644 <lwip_htons>
 8010720:	4603      	mov	r3, r0
 8010722:	b2db      	uxtb	r3, r3
 8010724:	f003 0304 	and.w	r3, r3, #4
 8010728:	2b00      	cmp	r3, #0
 801072a:	d118      	bne.n	801075e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801072c:	4b20      	ldr	r3, [pc, #128]	; (80107b0 <tcp_input+0x800>)
 801072e:	6819      	ldr	r1, [r3, #0]
 8010730:	4b20      	ldr	r3, [pc, #128]	; (80107b4 <tcp_input+0x804>)
 8010732:	881b      	ldrh	r3, [r3, #0]
 8010734:	461a      	mov	r2, r3
 8010736:	4b20      	ldr	r3, [pc, #128]	; (80107b8 <tcp_input+0x808>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801073c:	4b1b      	ldr	r3, [pc, #108]	; (80107ac <tcp_input+0x7fc>)
 801073e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010740:	885b      	ldrh	r3, [r3, #2]
 8010742:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010744:	4a19      	ldr	r2, [pc, #100]	; (80107ac <tcp_input+0x7fc>)
 8010746:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010748:	8812      	ldrh	r2, [r2, #0]
 801074a:	b292      	uxth	r2, r2
 801074c:	9202      	str	r2, [sp, #8]
 801074e:	9301      	str	r3, [sp, #4]
 8010750:	4b1a      	ldr	r3, [pc, #104]	; (80107bc <tcp_input+0x80c>)
 8010752:	9300      	str	r3, [sp, #0]
 8010754:	4b1a      	ldr	r3, [pc, #104]	; (80107c0 <tcp_input+0x810>)
 8010756:	4602      	mov	r2, r0
 8010758:	2000      	movs	r0, #0
 801075a:	f003 fc7d 	bl	8014058 <tcp_rst>
    pbuf_free(p);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f7fd fb5a 	bl	800de18 <pbuf_free>
  return;
 8010764:	e00c      	b.n	8010780 <tcp_input+0x7d0>
    goto dropped;
 8010766:	bf00      	nop
 8010768:	e006      	b.n	8010778 <tcp_input+0x7c8>
    goto dropped;
 801076a:	bf00      	nop
 801076c:	e004      	b.n	8010778 <tcp_input+0x7c8>
    goto dropped;
 801076e:	bf00      	nop
 8010770:	e002      	b.n	8010778 <tcp_input+0x7c8>
      goto dropped;
 8010772:	bf00      	nop
 8010774:	e000      	b.n	8010778 <tcp_input+0x7c8>
      goto dropped;
 8010776:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f7fd fb4d 	bl	800de18 <pbuf_free>
 801077e:	e000      	b.n	8010782 <tcp_input+0x7d2>
  return;
 8010780:	bf00      	nop
}
 8010782:	3724      	adds	r7, #36	; 0x24
 8010784:	46bd      	mov	sp, r7
 8010786:	bd90      	pop	{r4, r7, pc}
 8010788:	20010674 	.word	0x20010674
 801078c:	20008b11 	.word	0x20008b11
 8010790:	20010660 	.word	0x20010660
 8010794:	20008b0c 	.word	0x20008b0c
 8010798:	20008b14 	.word	0x20008b14
 801079c:	0801ed94 	.word	0x0801ed94
 80107a0:	0801ef48 	.word	0x0801ef48
 80107a4:	0801ede0 	.word	0x0801ede0
 80107a8:	20008ae4 	.word	0x20008ae4
 80107ac:	20008af4 	.word	0x20008af4
 80107b0:	20008b08 	.word	0x20008b08
 80107b4:	20008b0e 	.word	0x20008b0e
 80107b8:	20008b04 	.word	0x20008b04
 80107bc:	2000cf1c 	.word	0x2000cf1c
 80107c0:	2000cf20 	.word	0x2000cf20

080107c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d106      	bne.n	80107e0 <tcp_input_delayed_close+0x1c>
 80107d2:	4b17      	ldr	r3, [pc, #92]	; (8010830 <tcp_input_delayed_close+0x6c>)
 80107d4:	f240 225a 	movw	r2, #602	; 0x25a
 80107d8:	4916      	ldr	r1, [pc, #88]	; (8010834 <tcp_input_delayed_close+0x70>)
 80107da:	4817      	ldr	r0, [pc, #92]	; (8010838 <tcp_input_delayed_close+0x74>)
 80107dc:	f00b f870 	bl	801b8c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80107e0:	4b16      	ldr	r3, [pc, #88]	; (801083c <tcp_input_delayed_close+0x78>)
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	f003 0310 	and.w	r3, r3, #16
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d01c      	beq.n	8010826 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	8b5b      	ldrh	r3, [r3, #26]
 80107f0:	f003 0310 	and.w	r3, r3, #16
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d10d      	bne.n	8010814 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d008      	beq.n	8010814 <tcp_input_delayed_close+0x50>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	6912      	ldr	r2, [r2, #16]
 801080c:	f06f 010e 	mvn.w	r1, #14
 8010810:	4610      	mov	r0, r2
 8010812:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010814:	6879      	ldr	r1, [r7, #4]
 8010816:	480a      	ldr	r0, [pc, #40]	; (8010840 <tcp_input_delayed_close+0x7c>)
 8010818:	f7ff fa52 	bl	800fcc0 <tcp_pcb_remove>
    tcp_free(pcb);
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f7fd fdb7 	bl	800e390 <tcp_free>
    return 1;
 8010822:	2301      	movs	r3, #1
 8010824:	e000      	b.n	8010828 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010826:	2300      	movs	r3, #0
}
 8010828:	4618      	mov	r0, r3
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	0801ed94 	.word	0x0801ed94
 8010834:	0801ef64 	.word	0x0801ef64
 8010838:	0801ede0 	.word	0x0801ede0
 801083c:	20008b11 	.word	0x20008b11
 8010840:	20010660 	.word	0x20010660

08010844 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010844:	b590      	push	{r4, r7, lr}
 8010846:	b08b      	sub	sp, #44	; 0x2c
 8010848:	af04      	add	r7, sp, #16
 801084a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801084c:	4b6f      	ldr	r3, [pc, #444]	; (8010a0c <tcp_listen_input+0x1c8>)
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	f003 0304 	and.w	r3, r3, #4
 8010854:	2b00      	cmp	r3, #0
 8010856:	f040 80d2 	bne.w	80109fe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d106      	bne.n	801086e <tcp_listen_input+0x2a>
 8010860:	4b6b      	ldr	r3, [pc, #428]	; (8010a10 <tcp_listen_input+0x1cc>)
 8010862:	f240 2281 	movw	r2, #641	; 0x281
 8010866:	496b      	ldr	r1, [pc, #428]	; (8010a14 <tcp_listen_input+0x1d0>)
 8010868:	486b      	ldr	r0, [pc, #428]	; (8010a18 <tcp_listen_input+0x1d4>)
 801086a:	f00b f829 	bl	801b8c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801086e:	4b67      	ldr	r3, [pc, #412]	; (8010a0c <tcp_listen_input+0x1c8>)
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	f003 0310 	and.w	r3, r3, #16
 8010876:	2b00      	cmp	r3, #0
 8010878:	d019      	beq.n	80108ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801087a:	4b68      	ldr	r3, [pc, #416]	; (8010a1c <tcp_listen_input+0x1d8>)
 801087c:	6819      	ldr	r1, [r3, #0]
 801087e:	4b68      	ldr	r3, [pc, #416]	; (8010a20 <tcp_listen_input+0x1dc>)
 8010880:	881b      	ldrh	r3, [r3, #0]
 8010882:	461a      	mov	r2, r3
 8010884:	4b67      	ldr	r3, [pc, #412]	; (8010a24 <tcp_listen_input+0x1e0>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801088a:	4b67      	ldr	r3, [pc, #412]	; (8010a28 <tcp_listen_input+0x1e4>)
 801088c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801088e:	885b      	ldrh	r3, [r3, #2]
 8010890:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010892:	4a65      	ldr	r2, [pc, #404]	; (8010a28 <tcp_listen_input+0x1e4>)
 8010894:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010896:	8812      	ldrh	r2, [r2, #0]
 8010898:	b292      	uxth	r2, r2
 801089a:	9202      	str	r2, [sp, #8]
 801089c:	9301      	str	r3, [sp, #4]
 801089e:	4b63      	ldr	r3, [pc, #396]	; (8010a2c <tcp_listen_input+0x1e8>)
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	4b63      	ldr	r3, [pc, #396]	; (8010a30 <tcp_listen_input+0x1ec>)
 80108a4:	4602      	mov	r2, r0
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f003 fbd6 	bl	8014058 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80108ac:	e0a9      	b.n	8010a02 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80108ae:	4b57      	ldr	r3, [pc, #348]	; (8010a0c <tcp_listen_input+0x1c8>)
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	f003 0302 	and.w	r3, r3, #2
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	f000 80a3 	beq.w	8010a02 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	7d5b      	ldrb	r3, [r3, #21]
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7ff f85b 	bl	800f97c <tcp_alloc>
 80108c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d111      	bne.n	80108f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	699b      	ldr	r3, [r3, #24]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00a      	beq.n	80108ec <tcp_listen_input+0xa8>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	699b      	ldr	r3, [r3, #24]
 80108da:	687a      	ldr	r2, [r7, #4]
 80108dc:	6910      	ldr	r0, [r2, #16]
 80108de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108e2:	2100      	movs	r1, #0
 80108e4:	4798      	blx	r3
 80108e6:	4603      	mov	r3, r0
 80108e8:	73bb      	strb	r3, [r7, #14]
      return;
 80108ea:	e08b      	b.n	8010a04 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80108ec:	23f0      	movs	r3, #240	; 0xf0
 80108ee:	73bb      	strb	r3, [r7, #14]
      return;
 80108f0:	e088      	b.n	8010a04 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80108f2:	4b50      	ldr	r3, [pc, #320]	; (8010a34 <tcp_listen_input+0x1f0>)
 80108f4:	695a      	ldr	r2, [r3, #20]
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80108fa:	4b4e      	ldr	r3, [pc, #312]	; (8010a34 <tcp_listen_input+0x1f0>)
 80108fc:	691a      	ldr	r2, [r3, #16]
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	8ada      	ldrh	r2, [r3, #22]
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801090a:	4b47      	ldr	r3, [pc, #284]	; (8010a28 <tcp_listen_input+0x1e4>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	881b      	ldrh	r3, [r3, #0]
 8010910:	b29a      	uxth	r2, r3
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	2203      	movs	r2, #3
 801091a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801091c:	4b41      	ldr	r3, [pc, #260]	; (8010a24 <tcp_listen_input+0x1e0>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	1c5a      	adds	r2, r3, #1
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801092e:	6978      	ldr	r0, [r7, #20]
 8010930:	f7ff fa5a 	bl	800fde8 <tcp_next_iss>
 8010934:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	693a      	ldr	r2, [r7, #16]
 801093a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	693a      	ldr	r2, [r7, #16]
 8010940:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	693a      	ldr	r2, [r7, #16]
 8010946:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	693a      	ldr	r2, [r7, #16]
 801094c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801094e:	4b35      	ldr	r3, [pc, #212]	; (8010a24 <tcp_listen_input+0x1e0>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	1e5a      	subs	r2, r3, #1
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	691a      	ldr	r2, [r3, #16]
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	7a5b      	ldrb	r3, [r3, #9]
 801096a:	f003 030c 	and.w	r3, r3, #12
 801096e:	b2da      	uxtb	r2, r3
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	7a1a      	ldrb	r2, [r3, #8]
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801097c:	4b2e      	ldr	r3, [pc, #184]	; (8010a38 <tcp_listen_input+0x1f4>)
 801097e:	681a      	ldr	r2, [r3, #0]
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	60da      	str	r2, [r3, #12]
 8010984:	4a2c      	ldr	r2, [pc, #176]	; (8010a38 <tcp_listen_input+0x1f4>)
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	6013      	str	r3, [r2, #0]
 801098a:	f003 fd27 	bl	80143dc <tcp_timer_needed>
 801098e:	4b2b      	ldr	r3, [pc, #172]	; (8010a3c <tcp_listen_input+0x1f8>)
 8010990:	2201      	movs	r2, #1
 8010992:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010994:	6978      	ldr	r0, [r7, #20]
 8010996:	f001 fd8d 	bl	80124b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801099a:	4b23      	ldr	r3, [pc, #140]	; (8010a28 <tcp_listen_input+0x1e4>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	89db      	ldrh	r3, [r3, #14]
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	3304      	adds	r3, #4
 80109bc:	4618      	mov	r0, r3
 80109be:	f007 fb79 	bl	80180b4 <ip4_route>
 80109c2:	4601      	mov	r1, r0
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	3304      	adds	r3, #4
 80109c8:	461a      	mov	r2, r3
 80109ca:	4620      	mov	r0, r4
 80109cc:	f7ff fa32 	bl	800fe34 <tcp_eff_send_mss_netif>
 80109d0:	4603      	mov	r3, r0
 80109d2:	461a      	mov	r2, r3
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80109d8:	2112      	movs	r1, #18
 80109da:	6978      	ldr	r0, [r7, #20]
 80109dc:	f002 fc9a 	bl	8013314 <tcp_enqueue_flags>
 80109e0:	4603      	mov	r3, r0
 80109e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80109e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d004      	beq.n	80109f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80109ec:	2100      	movs	r1, #0
 80109ee:	6978      	ldr	r0, [r7, #20]
 80109f0:	f7fd ff54 	bl	800e89c <tcp_abandon>
      return;
 80109f4:	e006      	b.n	8010a04 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80109f6:	6978      	ldr	r0, [r7, #20]
 80109f8:	f002 fd7a 	bl	80134f0 <tcp_output>
  return;
 80109fc:	e001      	b.n	8010a02 <tcp_listen_input+0x1be>
    return;
 80109fe:	bf00      	nop
 8010a00:	e000      	b.n	8010a04 <tcp_listen_input+0x1c0>
  return;
 8010a02:	bf00      	nop
}
 8010a04:	371c      	adds	r7, #28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd90      	pop	{r4, r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	20008b10 	.word	0x20008b10
 8010a10:	0801ed94 	.word	0x0801ed94
 8010a14:	0801ef8c 	.word	0x0801ef8c
 8010a18:	0801ede0 	.word	0x0801ede0
 8010a1c:	20008b08 	.word	0x20008b08
 8010a20:	20008b0e 	.word	0x20008b0e
 8010a24:	20008b04 	.word	0x20008b04
 8010a28:	20008af4 	.word	0x20008af4
 8010a2c:	2000cf1c 	.word	0x2000cf1c
 8010a30:	2000cf20 	.word	0x2000cf20
 8010a34:	2000cf0c 	.word	0x2000cf0c
 8010a38:	20010660 	.word	0x20010660
 8010a3c:	2001065c 	.word	0x2001065c

08010a40 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af04      	add	r7, sp, #16
 8010a46:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010a48:	4b2f      	ldr	r3, [pc, #188]	; (8010b08 <tcp_timewait_input+0xc8>)
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	f003 0304 	and.w	r3, r3, #4
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d153      	bne.n	8010afc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d106      	bne.n	8010a68 <tcp_timewait_input+0x28>
 8010a5a:	4b2c      	ldr	r3, [pc, #176]	; (8010b0c <tcp_timewait_input+0xcc>)
 8010a5c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010a60:	492b      	ldr	r1, [pc, #172]	; (8010b10 <tcp_timewait_input+0xd0>)
 8010a62:	482c      	ldr	r0, [pc, #176]	; (8010b14 <tcp_timewait_input+0xd4>)
 8010a64:	f00a ff2c 	bl	801b8c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010a68:	4b27      	ldr	r3, [pc, #156]	; (8010b08 <tcp_timewait_input+0xc8>)
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	f003 0302 	and.w	r3, r3, #2
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d02a      	beq.n	8010aca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010a74:	4b28      	ldr	r3, [pc, #160]	; (8010b18 <tcp_timewait_input+0xd8>)
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a7c:	1ad3      	subs	r3, r2, r3
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	db2d      	blt.n	8010ade <tcp_timewait_input+0x9e>
 8010a82:	4b25      	ldr	r3, [pc, #148]	; (8010b18 <tcp_timewait_input+0xd8>)
 8010a84:	681a      	ldr	r2, [r3, #0]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a8a:	6879      	ldr	r1, [r7, #4]
 8010a8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a8e:	440b      	add	r3, r1
 8010a90:	1ad3      	subs	r3, r2, r3
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	dc23      	bgt.n	8010ade <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a96:	4b21      	ldr	r3, [pc, #132]	; (8010b1c <tcp_timewait_input+0xdc>)
 8010a98:	6819      	ldr	r1, [r3, #0]
 8010a9a:	4b21      	ldr	r3, [pc, #132]	; (8010b20 <tcp_timewait_input+0xe0>)
 8010a9c:	881b      	ldrh	r3, [r3, #0]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	4b1d      	ldr	r3, [pc, #116]	; (8010b18 <tcp_timewait_input+0xd8>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010aa6:	4b1f      	ldr	r3, [pc, #124]	; (8010b24 <tcp_timewait_input+0xe4>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010aaa:	885b      	ldrh	r3, [r3, #2]
 8010aac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010aae:	4a1d      	ldr	r2, [pc, #116]	; (8010b24 <tcp_timewait_input+0xe4>)
 8010ab0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ab2:	8812      	ldrh	r2, [r2, #0]
 8010ab4:	b292      	uxth	r2, r2
 8010ab6:	9202      	str	r2, [sp, #8]
 8010ab8:	9301      	str	r3, [sp, #4]
 8010aba:	4b1b      	ldr	r3, [pc, #108]	; (8010b28 <tcp_timewait_input+0xe8>)
 8010abc:	9300      	str	r3, [sp, #0]
 8010abe:	4b1b      	ldr	r3, [pc, #108]	; (8010b2c <tcp_timewait_input+0xec>)
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f003 fac8 	bl	8014058 <tcp_rst>
      return;
 8010ac8:	e01b      	b.n	8010b02 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010aca:	4b0f      	ldr	r3, [pc, #60]	; (8010b08 <tcp_timewait_input+0xc8>)
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	f003 0301 	and.w	r3, r3, #1
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d003      	beq.n	8010ade <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010ad6:	4b16      	ldr	r3, [pc, #88]	; (8010b30 <tcp_timewait_input+0xf0>)
 8010ad8:	681a      	ldr	r2, [r3, #0]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010ade:	4b10      	ldr	r3, [pc, #64]	; (8010b20 <tcp_timewait_input+0xe0>)
 8010ae0:	881b      	ldrh	r3, [r3, #0]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d00c      	beq.n	8010b00 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	8b5b      	ldrh	r3, [r3, #26]
 8010aea:	f043 0302 	orr.w	r3, r3, #2
 8010aee:	b29a      	uxth	r2, r3
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f002 fcfb 	bl	80134f0 <tcp_output>
  }
  return;
 8010afa:	e001      	b.n	8010b00 <tcp_timewait_input+0xc0>
    return;
 8010afc:	bf00      	nop
 8010afe:	e000      	b.n	8010b02 <tcp_timewait_input+0xc2>
  return;
 8010b00:	bf00      	nop
}
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	20008b10 	.word	0x20008b10
 8010b0c:	0801ed94 	.word	0x0801ed94
 8010b10:	0801efac 	.word	0x0801efac
 8010b14:	0801ede0 	.word	0x0801ede0
 8010b18:	20008b04 	.word	0x20008b04
 8010b1c:	20008b08 	.word	0x20008b08
 8010b20:	20008b0e 	.word	0x20008b0e
 8010b24:	20008af4 	.word	0x20008af4
 8010b28:	2000cf1c 	.word	0x2000cf1c
 8010b2c:	2000cf20 	.word	0x2000cf20
 8010b30:	20010664 	.word	0x20010664

08010b34 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010b34:	b590      	push	{r4, r7, lr}
 8010b36:	b08d      	sub	sp, #52	; 0x34
 8010b38:	af04      	add	r7, sp, #16
 8010b3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010b40:	2300      	movs	r3, #0
 8010b42:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d106      	bne.n	8010b58 <tcp_process+0x24>
 8010b4a:	4ba5      	ldr	r3, [pc, #660]	; (8010de0 <tcp_process+0x2ac>)
 8010b4c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010b50:	49a4      	ldr	r1, [pc, #656]	; (8010de4 <tcp_process+0x2b0>)
 8010b52:	48a5      	ldr	r0, [pc, #660]	; (8010de8 <tcp_process+0x2b4>)
 8010b54:	f00a feb4 	bl	801b8c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010b58:	4ba4      	ldr	r3, [pc, #656]	; (8010dec <tcp_process+0x2b8>)
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	f003 0304 	and.w	r3, r3, #4
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d04e      	beq.n	8010c02 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	7d1b      	ldrb	r3, [r3, #20]
 8010b68:	2b02      	cmp	r3, #2
 8010b6a:	d108      	bne.n	8010b7e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b70:	4b9f      	ldr	r3, [pc, #636]	; (8010df0 <tcp_process+0x2bc>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d123      	bne.n	8010bc0 <tcp_process+0x8c>
        acceptable = 1;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	76fb      	strb	r3, [r7, #27]
 8010b7c:	e020      	b.n	8010bc0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b82:	4b9c      	ldr	r3, [pc, #624]	; (8010df4 <tcp_process+0x2c0>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d102      	bne.n	8010b90 <tcp_process+0x5c>
        acceptable = 1;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	76fb      	strb	r3, [r7, #27]
 8010b8e:	e017      	b.n	8010bc0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b90:	4b98      	ldr	r3, [pc, #608]	; (8010df4 <tcp_process+0x2c0>)
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b98:	1ad3      	subs	r3, r2, r3
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	db10      	blt.n	8010bc0 <tcp_process+0x8c>
 8010b9e:	4b95      	ldr	r3, [pc, #596]	; (8010df4 <tcp_process+0x2c0>)
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ba6:	6879      	ldr	r1, [r7, #4]
 8010ba8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010baa:	440b      	add	r3, r1
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	dc06      	bgt.n	8010bc0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	8b5b      	ldrh	r3, [r3, #26]
 8010bb6:	f043 0302 	orr.w	r3, r3, #2
 8010bba:	b29a      	uxth	r2, r3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010bc0:	7efb      	ldrb	r3, [r7, #27]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d01b      	beq.n	8010bfe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	7d1b      	ldrb	r3, [r3, #20]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d106      	bne.n	8010bdc <tcp_process+0xa8>
 8010bce:	4b84      	ldr	r3, [pc, #528]	; (8010de0 <tcp_process+0x2ac>)
 8010bd0:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010bd4:	4988      	ldr	r1, [pc, #544]	; (8010df8 <tcp_process+0x2c4>)
 8010bd6:	4884      	ldr	r0, [pc, #528]	; (8010de8 <tcp_process+0x2b4>)
 8010bd8:	f00a fe72 	bl	801b8c0 <iprintf>
      recv_flags |= TF_RESET;
 8010bdc:	4b87      	ldr	r3, [pc, #540]	; (8010dfc <tcp_process+0x2c8>)
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	f043 0308 	orr.w	r3, r3, #8
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	4b85      	ldr	r3, [pc, #532]	; (8010dfc <tcp_process+0x2c8>)
 8010be8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	8b5b      	ldrh	r3, [r3, #26]
 8010bee:	f023 0301 	bic.w	r3, r3, #1
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010bf8:	f06f 030d 	mvn.w	r3, #13
 8010bfc:	e37a      	b.n	80112f4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	e378      	b.n	80112f4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010c02:	4b7a      	ldr	r3, [pc, #488]	; (8010dec <tcp_process+0x2b8>)
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	f003 0302 	and.w	r3, r3, #2
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d010      	beq.n	8010c30 <tcp_process+0xfc>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	7d1b      	ldrb	r3, [r3, #20]
 8010c12:	2b02      	cmp	r3, #2
 8010c14:	d00c      	beq.n	8010c30 <tcp_process+0xfc>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	7d1b      	ldrb	r3, [r3, #20]
 8010c1a:	2b03      	cmp	r3, #3
 8010c1c:	d008      	beq.n	8010c30 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	8b5b      	ldrh	r3, [r3, #26]
 8010c22:	f043 0302 	orr.w	r3, r3, #2
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	e361      	b.n	80112f4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	8b5b      	ldrh	r3, [r3, #26]
 8010c34:	f003 0310 	and.w	r3, r3, #16
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d103      	bne.n	8010c44 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010c3c:	4b70      	ldr	r3, [pc, #448]	; (8010e00 <tcp_process+0x2cc>)
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2200      	movs	r2, #0
 8010c48:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f001 fc2d 	bl	80124b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	7d1b      	ldrb	r3, [r3, #20]
 8010c5e:	3b02      	subs	r3, #2
 8010c60:	2b07      	cmp	r3, #7
 8010c62:	f200 8337 	bhi.w	80112d4 <tcp_process+0x7a0>
 8010c66:	a201      	add	r2, pc, #4	; (adr r2, 8010c6c <tcp_process+0x138>)
 8010c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c6c:	08010c8d 	.word	0x08010c8d
 8010c70:	08010ebd 	.word	0x08010ebd
 8010c74:	08011035 	.word	0x08011035
 8010c78:	0801105f 	.word	0x0801105f
 8010c7c:	08011183 	.word	0x08011183
 8010c80:	08011035 	.word	0x08011035
 8010c84:	0801120f 	.word	0x0801120f
 8010c88:	0801129f 	.word	0x0801129f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010c8c:	4b57      	ldr	r3, [pc, #348]	; (8010dec <tcp_process+0x2b8>)
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	f003 0310 	and.w	r3, r3, #16
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f000 80e4 	beq.w	8010e62 <tcp_process+0x32e>
 8010c9a:	4b54      	ldr	r3, [pc, #336]	; (8010dec <tcp_process+0x2b8>)
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	f003 0302 	and.w	r3, r3, #2
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	f000 80dd 	beq.w	8010e62 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cac:	1c5a      	adds	r2, r3, #1
 8010cae:	4b50      	ldr	r3, [pc, #320]	; (8010df0 <tcp_process+0x2bc>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	f040 80d5 	bne.w	8010e62 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010cb8:	4b4e      	ldr	r3, [pc, #312]	; (8010df4 <tcp_process+0x2c0>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	1c5a      	adds	r2, r3, #1
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010cca:	4b49      	ldr	r3, [pc, #292]	; (8010df0 <tcp_process+0x2bc>)
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010cd2:	4b4c      	ldr	r3, [pc, #304]	; (8010e04 <tcp_process+0x2d0>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	89db      	ldrh	r3, [r3, #14]
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010cec:	4b41      	ldr	r3, [pc, #260]	; (8010df4 <tcp_process+0x2c0>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	1e5a      	subs	r2, r3, #1
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2204      	movs	r2, #4
 8010cfa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	3304      	adds	r3, #4
 8010d04:	4618      	mov	r0, r3
 8010d06:	f007 f9d5 	bl	80180b4 <ip4_route>
 8010d0a:	4601      	mov	r1, r0
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	3304      	adds	r3, #4
 8010d10:	461a      	mov	r2, r3
 8010d12:	4620      	mov	r0, r4
 8010d14:	f7ff f88e 	bl	800fe34 <tcp_eff_send_mss_netif>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d24:	009a      	lsls	r2, r3, #2
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d2a:	005b      	lsls	r3, r3, #1
 8010d2c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010d30:	428b      	cmp	r3, r1
 8010d32:	bf38      	it	cc
 8010d34:	460b      	movcc	r3, r1
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d204      	bcs.n	8010d44 <tcp_process+0x210>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	e00d      	b.n	8010d60 <tcp_process+0x22c>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d48:	005b      	lsls	r3, r3, #1
 8010d4a:	f241 121c 	movw	r2, #4380	; 0x111c
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d904      	bls.n	8010d5c <tcp_process+0x228>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	e001      	b.n	8010d60 <tcp_process+0x22c>
 8010d5c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010d60:	687a      	ldr	r2, [r7, #4]
 8010d62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d106      	bne.n	8010d7e <tcp_process+0x24a>
 8010d70:	4b1b      	ldr	r3, [pc, #108]	; (8010de0 <tcp_process+0x2ac>)
 8010d72:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010d76:	4924      	ldr	r1, [pc, #144]	; (8010e08 <tcp_process+0x2d4>)
 8010d78:	481b      	ldr	r0, [pc, #108]	; (8010de8 <tcp_process+0x2b4>)
 8010d7a:	f00a fda1 	bl	801b8c0 <iprintf>
        --pcb->snd_queuelen;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d84:	3b01      	subs	r3, #1
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d92:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d111      	bne.n	8010dbe <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d9e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d106      	bne.n	8010db4 <tcp_process+0x280>
 8010da6:	4b0e      	ldr	r3, [pc, #56]	; (8010de0 <tcp_process+0x2ac>)
 8010da8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010dac:	4917      	ldr	r1, [pc, #92]	; (8010e0c <tcp_process+0x2d8>)
 8010dae:	480e      	ldr	r0, [pc, #56]	; (8010de8 <tcp_process+0x2b4>)
 8010db0:	f00a fd86 	bl	801b8c0 <iprintf>
          pcb->unsent = rseg->next;
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	681a      	ldr	r2, [r3, #0]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	66da      	str	r2, [r3, #108]	; 0x6c
 8010dbc:	e003      	b.n	8010dc6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010dc6:	69f8      	ldr	r0, [r7, #28]
 8010dc8:	f7fe fc6f 	bl	800f6aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d11d      	bne.n	8010e10 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dda:	861a      	strh	r2, [r3, #48]	; 0x30
 8010ddc:	e01f      	b.n	8010e1e <tcp_process+0x2ea>
 8010dde:	bf00      	nop
 8010de0:	0801ed94 	.word	0x0801ed94
 8010de4:	0801efcc 	.word	0x0801efcc
 8010de8:	0801ede0 	.word	0x0801ede0
 8010dec:	20008b10 	.word	0x20008b10
 8010df0:	20008b08 	.word	0x20008b08
 8010df4:	20008b04 	.word	0x20008b04
 8010df8:	0801efe8 	.word	0x0801efe8
 8010dfc:	20008b11 	.word	0x20008b11
 8010e00:	20010664 	.word	0x20010664
 8010e04:	20008af4 	.word	0x20008af4
 8010e08:	0801f008 	.word	0x0801f008
 8010e0c:	0801f020 	.word	0x0801f020
        } else {
          pcb->rtime = 0;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2200      	movs	r2, #0
 8010e14:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d00a      	beq.n	8010e3e <tcp_process+0x30a>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	6910      	ldr	r0, [r2, #16]
 8010e32:	2200      	movs	r2, #0
 8010e34:	6879      	ldr	r1, [r7, #4]
 8010e36:	4798      	blx	r3
 8010e38:	4603      	mov	r3, r0
 8010e3a:	76bb      	strb	r3, [r7, #26]
 8010e3c:	e001      	b.n	8010e42 <tcp_process+0x30e>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010e42:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010e46:	f113 0f0d 	cmn.w	r3, #13
 8010e4a:	d102      	bne.n	8010e52 <tcp_process+0x31e>
          return ERR_ABRT;
 8010e4c:	f06f 030c 	mvn.w	r3, #12
 8010e50:	e250      	b.n	80112f4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	8b5b      	ldrh	r3, [r3, #26]
 8010e56:	f043 0302 	orr.w	r3, r3, #2
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010e60:	e23a      	b.n	80112d8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010e62:	4b9d      	ldr	r3, [pc, #628]	; (80110d8 <tcp_process+0x5a4>)
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	f003 0310 	and.w	r3, r3, #16
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	f000 8234 	beq.w	80112d8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e70:	4b9a      	ldr	r3, [pc, #616]	; (80110dc <tcp_process+0x5a8>)
 8010e72:	6819      	ldr	r1, [r3, #0]
 8010e74:	4b9a      	ldr	r3, [pc, #616]	; (80110e0 <tcp_process+0x5ac>)
 8010e76:	881b      	ldrh	r3, [r3, #0]
 8010e78:	461a      	mov	r2, r3
 8010e7a:	4b9a      	ldr	r3, [pc, #616]	; (80110e4 <tcp_process+0x5b0>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e80:	4b99      	ldr	r3, [pc, #612]	; (80110e8 <tcp_process+0x5b4>)
 8010e82:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e84:	885b      	ldrh	r3, [r3, #2]
 8010e86:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e88:	4a97      	ldr	r2, [pc, #604]	; (80110e8 <tcp_process+0x5b4>)
 8010e8a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e8c:	8812      	ldrh	r2, [r2, #0]
 8010e8e:	b292      	uxth	r2, r2
 8010e90:	9202      	str	r2, [sp, #8]
 8010e92:	9301      	str	r3, [sp, #4]
 8010e94:	4b95      	ldr	r3, [pc, #596]	; (80110ec <tcp_process+0x5b8>)
 8010e96:	9300      	str	r3, [sp, #0]
 8010e98:	4b95      	ldr	r3, [pc, #596]	; (80110f0 <tcp_process+0x5bc>)
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f003 f8db 	bl	8014058 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ea8:	2b05      	cmp	r3, #5
 8010eaa:	f200 8215 	bhi.w	80112d8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f002 fea5 	bl	8013c04 <tcp_rexmit_rto>
      break;
 8010eba:	e20d      	b.n	80112d8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010ebc:	4b86      	ldr	r3, [pc, #536]	; (80110d8 <tcp_process+0x5a4>)
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	f003 0310 	and.w	r3, r3, #16
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f000 80a1 	beq.w	801100c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010eca:	4b84      	ldr	r3, [pc, #528]	; (80110dc <tcp_process+0x5a8>)
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ed2:	1ad3      	subs	r3, r2, r3
 8010ed4:	3b01      	subs	r3, #1
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	db7e      	blt.n	8010fd8 <tcp_process+0x4a4>
 8010eda:	4b80      	ldr	r3, [pc, #512]	; (80110dc <tcp_process+0x5a8>)
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ee2:	1ad3      	subs	r3, r2, r3
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	dc77      	bgt.n	8010fd8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2204      	movs	r2, #4
 8010eec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d102      	bne.n	8010efc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010ef6:	23fa      	movs	r3, #250	; 0xfa
 8010ef8:	76bb      	strb	r3, [r7, #26]
 8010efa:	e01d      	b.n	8010f38 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f00:	699b      	ldr	r3, [r3, #24]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d106      	bne.n	8010f14 <tcp_process+0x3e0>
 8010f06:	4b7b      	ldr	r3, [pc, #492]	; (80110f4 <tcp_process+0x5c0>)
 8010f08:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010f0c:	497a      	ldr	r1, [pc, #488]	; (80110f8 <tcp_process+0x5c4>)
 8010f0e:	487b      	ldr	r0, [pc, #492]	; (80110fc <tcp_process+0x5c8>)
 8010f10:	f00a fcd6 	bl	801b8c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f18:	699b      	ldr	r3, [r3, #24]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00a      	beq.n	8010f34 <tcp_process+0x400>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f22:	699b      	ldr	r3, [r3, #24]
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	6910      	ldr	r0, [r2, #16]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	6879      	ldr	r1, [r7, #4]
 8010f2c:	4798      	blx	r3
 8010f2e:	4603      	mov	r3, r0
 8010f30:	76bb      	strb	r3, [r7, #26]
 8010f32:	e001      	b.n	8010f38 <tcp_process+0x404>
 8010f34:	23f0      	movs	r3, #240	; 0xf0
 8010f36:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010f38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d00a      	beq.n	8010f56 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010f40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f44:	f113 0f0d 	cmn.w	r3, #13
 8010f48:	d002      	beq.n	8010f50 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7fd fd64 	bl	800ea18 <tcp_abort>
            }
            return ERR_ABRT;
 8010f50:	f06f 030c 	mvn.w	r3, #12
 8010f54:	e1ce      	b.n	80112f4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fae0 	bl	801151c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010f5c:	4b68      	ldr	r3, [pc, #416]	; (8011100 <tcp_process+0x5cc>)
 8010f5e:	881b      	ldrh	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d005      	beq.n	8010f70 <tcp_process+0x43c>
            recv_acked--;
 8010f64:	4b66      	ldr	r3, [pc, #408]	; (8011100 <tcp_process+0x5cc>)
 8010f66:	881b      	ldrh	r3, [r3, #0]
 8010f68:	3b01      	subs	r3, #1
 8010f6a:	b29a      	uxth	r2, r3
 8010f6c:	4b64      	ldr	r3, [pc, #400]	; (8011100 <tcp_process+0x5cc>)
 8010f6e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f74:	009a      	lsls	r2, r3, #2
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f7a:	005b      	lsls	r3, r3, #1
 8010f7c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010f80:	428b      	cmp	r3, r1
 8010f82:	bf38      	it	cc
 8010f84:	460b      	movcc	r3, r1
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d204      	bcs.n	8010f94 <tcp_process+0x460>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f8e:	009b      	lsls	r3, r3, #2
 8010f90:	b29b      	uxth	r3, r3
 8010f92:	e00d      	b.n	8010fb0 <tcp_process+0x47c>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f98:	005b      	lsls	r3, r3, #1
 8010f9a:	f241 121c 	movw	r2, #4380	; 0x111c
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d904      	bls.n	8010fac <tcp_process+0x478>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fa6:	005b      	lsls	r3, r3, #1
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	e001      	b.n	8010fb0 <tcp_process+0x47c>
 8010fac:	f241 131c 	movw	r3, #4380	; 0x111c
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010fb6:	4b53      	ldr	r3, [pc, #332]	; (8011104 <tcp_process+0x5d0>)
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	f003 0320 	and.w	r3, r3, #32
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d037      	beq.n	8011032 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	8b5b      	ldrh	r3, [r3, #26]
 8010fc6:	f043 0302 	orr.w	r3, r3, #2
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2207      	movs	r2, #7
 8010fd4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010fd6:	e02c      	b.n	8011032 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fd8:	4b40      	ldr	r3, [pc, #256]	; (80110dc <tcp_process+0x5a8>)
 8010fda:	6819      	ldr	r1, [r3, #0]
 8010fdc:	4b40      	ldr	r3, [pc, #256]	; (80110e0 <tcp_process+0x5ac>)
 8010fde:	881b      	ldrh	r3, [r3, #0]
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	4b40      	ldr	r3, [pc, #256]	; (80110e4 <tcp_process+0x5b0>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fe8:	4b3f      	ldr	r3, [pc, #252]	; (80110e8 <tcp_process+0x5b4>)
 8010fea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fec:	885b      	ldrh	r3, [r3, #2]
 8010fee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ff0:	4a3d      	ldr	r2, [pc, #244]	; (80110e8 <tcp_process+0x5b4>)
 8010ff2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ff4:	8812      	ldrh	r2, [r2, #0]
 8010ff6:	b292      	uxth	r2, r2
 8010ff8:	9202      	str	r2, [sp, #8]
 8010ffa:	9301      	str	r3, [sp, #4]
 8010ffc:	4b3b      	ldr	r3, [pc, #236]	; (80110ec <tcp_process+0x5b8>)
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	4b3b      	ldr	r3, [pc, #236]	; (80110f0 <tcp_process+0x5bc>)
 8011002:	4602      	mov	r2, r0
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f003 f827 	bl	8014058 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801100a:	e167      	b.n	80112dc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801100c:	4b32      	ldr	r3, [pc, #200]	; (80110d8 <tcp_process+0x5a4>)
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	f003 0302 	and.w	r3, r3, #2
 8011014:	2b00      	cmp	r3, #0
 8011016:	f000 8161 	beq.w	80112dc <tcp_process+0x7a8>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801101e:	1e5a      	subs	r2, r3, #1
 8011020:	4b30      	ldr	r3, [pc, #192]	; (80110e4 <tcp_process+0x5b0>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	429a      	cmp	r2, r3
 8011026:	f040 8159 	bne.w	80112dc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f002 fe0c 	bl	8013c48 <tcp_rexmit>
      break;
 8011030:	e154      	b.n	80112dc <tcp_process+0x7a8>
 8011032:	e153      	b.n	80112dc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 fa71 	bl	801151c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801103a:	4b32      	ldr	r3, [pc, #200]	; (8011104 <tcp_process+0x5d0>)
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	f003 0320 	and.w	r3, r3, #32
 8011042:	2b00      	cmp	r3, #0
 8011044:	f000 814c 	beq.w	80112e0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	8b5b      	ldrh	r3, [r3, #26]
 801104c:	f043 0302 	orr.w	r3, r3, #2
 8011050:	b29a      	uxth	r2, r3
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2207      	movs	r2, #7
 801105a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801105c:	e140      	b.n	80112e0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 fa5c 	bl	801151c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011064:	4b27      	ldr	r3, [pc, #156]	; (8011104 <tcp_process+0x5d0>)
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	f003 0320 	and.w	r3, r3, #32
 801106c:	2b00      	cmp	r3, #0
 801106e:	d071      	beq.n	8011154 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011070:	4b19      	ldr	r3, [pc, #100]	; (80110d8 <tcp_process+0x5a4>)
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	f003 0310 	and.w	r3, r3, #16
 8011078:	2b00      	cmp	r3, #0
 801107a:	d060      	beq.n	801113e <tcp_process+0x60a>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011080:	4b16      	ldr	r3, [pc, #88]	; (80110dc <tcp_process+0x5a8>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	429a      	cmp	r2, r3
 8011086:	d15a      	bne.n	801113e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801108c:	2b00      	cmp	r3, #0
 801108e:	d156      	bne.n	801113e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	8b5b      	ldrh	r3, [r3, #26]
 8011094:	f043 0302 	orr.w	r3, r3, #2
 8011098:	b29a      	uxth	r2, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f7fe fdbe 	bl	800fc20 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80110a4:	4b18      	ldr	r3, [pc, #96]	; (8011108 <tcp_process+0x5d4>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d105      	bne.n	80110ba <tcp_process+0x586>
 80110ae:	4b16      	ldr	r3, [pc, #88]	; (8011108 <tcp_process+0x5d4>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	4a14      	ldr	r2, [pc, #80]	; (8011108 <tcp_process+0x5d4>)
 80110b6:	6013      	str	r3, [r2, #0]
 80110b8:	e02e      	b.n	8011118 <tcp_process+0x5e4>
 80110ba:	4b13      	ldr	r3, [pc, #76]	; (8011108 <tcp_process+0x5d4>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	617b      	str	r3, [r7, #20]
 80110c0:	e027      	b.n	8011112 <tcp_process+0x5de>
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	68db      	ldr	r3, [r3, #12]
 80110c6:	687a      	ldr	r2, [r7, #4]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d11f      	bne.n	801110c <tcp_process+0x5d8>
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	68da      	ldr	r2, [r3, #12]
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	60da      	str	r2, [r3, #12]
 80110d4:	e020      	b.n	8011118 <tcp_process+0x5e4>
 80110d6:	bf00      	nop
 80110d8:	20008b10 	.word	0x20008b10
 80110dc:	20008b08 	.word	0x20008b08
 80110e0:	20008b0e 	.word	0x20008b0e
 80110e4:	20008b04 	.word	0x20008b04
 80110e8:	20008af4 	.word	0x20008af4
 80110ec:	2000cf1c 	.word	0x2000cf1c
 80110f0:	2000cf20 	.word	0x2000cf20
 80110f4:	0801ed94 	.word	0x0801ed94
 80110f8:	0801f034 	.word	0x0801f034
 80110fc:	0801ede0 	.word	0x0801ede0
 8011100:	20008b0c 	.word	0x20008b0c
 8011104:	20008b11 	.word	0x20008b11
 8011108:	20010660 	.word	0x20010660
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	617b      	str	r3, [r7, #20]
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d1d4      	bne.n	80110c2 <tcp_process+0x58e>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	60da      	str	r2, [r3, #12]
 801111e:	4b77      	ldr	r3, [pc, #476]	; (80112fc <tcp_process+0x7c8>)
 8011120:	2201      	movs	r2, #1
 8011122:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	220a      	movs	r2, #10
 8011128:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801112a:	4b75      	ldr	r3, [pc, #468]	; (8011300 <tcp_process+0x7cc>)
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	60da      	str	r2, [r3, #12]
 8011132:	4a73      	ldr	r2, [pc, #460]	; (8011300 <tcp_process+0x7cc>)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6013      	str	r3, [r2, #0]
 8011138:	f003 f950 	bl	80143dc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801113c:	e0d2      	b.n	80112e4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	8b5b      	ldrh	r3, [r3, #26]
 8011142:	f043 0302 	orr.w	r3, r3, #2
 8011146:	b29a      	uxth	r2, r3
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2208      	movs	r2, #8
 8011150:	751a      	strb	r2, [r3, #20]
      break;
 8011152:	e0c7      	b.n	80112e4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011154:	4b6b      	ldr	r3, [pc, #428]	; (8011304 <tcp_process+0x7d0>)
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	f003 0310 	and.w	r3, r3, #16
 801115c:	2b00      	cmp	r3, #0
 801115e:	f000 80c1 	beq.w	80112e4 <tcp_process+0x7b0>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011166:	4b68      	ldr	r3, [pc, #416]	; (8011308 <tcp_process+0x7d4>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	429a      	cmp	r2, r3
 801116c:	f040 80ba 	bne.w	80112e4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011174:	2b00      	cmp	r3, #0
 8011176:	f040 80b5 	bne.w	80112e4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2206      	movs	r2, #6
 801117e:	751a      	strb	r2, [r3, #20]
      break;
 8011180:	e0b0      	b.n	80112e4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f000 f9ca 	bl	801151c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011188:	4b60      	ldr	r3, [pc, #384]	; (801130c <tcp_process+0x7d8>)
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	f003 0320 	and.w	r3, r3, #32
 8011190:	2b00      	cmp	r3, #0
 8011192:	f000 80a9 	beq.w	80112e8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	8b5b      	ldrh	r3, [r3, #26]
 801119a:	f043 0302 	orr.w	r3, r3, #2
 801119e:	b29a      	uxth	r2, r3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f7fe fd3b 	bl	800fc20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80111aa:	4b59      	ldr	r3, [pc, #356]	; (8011310 <tcp_process+0x7dc>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d105      	bne.n	80111c0 <tcp_process+0x68c>
 80111b4:	4b56      	ldr	r3, [pc, #344]	; (8011310 <tcp_process+0x7dc>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	4a55      	ldr	r2, [pc, #340]	; (8011310 <tcp_process+0x7dc>)
 80111bc:	6013      	str	r3, [r2, #0]
 80111be:	e013      	b.n	80111e8 <tcp_process+0x6b4>
 80111c0:	4b53      	ldr	r3, [pc, #332]	; (8011310 <tcp_process+0x7dc>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	613b      	str	r3, [r7, #16]
 80111c6:	e00c      	b.n	80111e2 <tcp_process+0x6ae>
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d104      	bne.n	80111dc <tcp_process+0x6a8>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	68da      	ldr	r2, [r3, #12]
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	60da      	str	r2, [r3, #12]
 80111da:	e005      	b.n	80111e8 <tcp_process+0x6b4>
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	613b      	str	r3, [r7, #16]
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1ef      	bne.n	80111c8 <tcp_process+0x694>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	60da      	str	r2, [r3, #12]
 80111ee:	4b43      	ldr	r3, [pc, #268]	; (80112fc <tcp_process+0x7c8>)
 80111f0:	2201      	movs	r2, #1
 80111f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	220a      	movs	r2, #10
 80111f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80111fa:	4b41      	ldr	r3, [pc, #260]	; (8011300 <tcp_process+0x7cc>)
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	60da      	str	r2, [r3, #12]
 8011202:	4a3f      	ldr	r2, [pc, #252]	; (8011300 <tcp_process+0x7cc>)
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6013      	str	r3, [r2, #0]
 8011208:	f003 f8e8 	bl	80143dc <tcp_timer_needed>
      }
      break;
 801120c:	e06c      	b.n	80112e8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f000 f984 	bl	801151c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011214:	4b3b      	ldr	r3, [pc, #236]	; (8011304 <tcp_process+0x7d0>)
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	f003 0310 	and.w	r3, r3, #16
 801121c:	2b00      	cmp	r3, #0
 801121e:	d065      	beq.n	80112ec <tcp_process+0x7b8>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011224:	4b38      	ldr	r3, [pc, #224]	; (8011308 <tcp_process+0x7d4>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	429a      	cmp	r2, r3
 801122a:	d15f      	bne.n	80112ec <tcp_process+0x7b8>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011230:	2b00      	cmp	r3, #0
 8011232:	d15b      	bne.n	80112ec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f7fe fcf3 	bl	800fc20 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801123a:	4b35      	ldr	r3, [pc, #212]	; (8011310 <tcp_process+0x7dc>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	687a      	ldr	r2, [r7, #4]
 8011240:	429a      	cmp	r2, r3
 8011242:	d105      	bne.n	8011250 <tcp_process+0x71c>
 8011244:	4b32      	ldr	r3, [pc, #200]	; (8011310 <tcp_process+0x7dc>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	4a31      	ldr	r2, [pc, #196]	; (8011310 <tcp_process+0x7dc>)
 801124c:	6013      	str	r3, [r2, #0]
 801124e:	e013      	b.n	8011278 <tcp_process+0x744>
 8011250:	4b2f      	ldr	r3, [pc, #188]	; (8011310 <tcp_process+0x7dc>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	60fb      	str	r3, [r7, #12]
 8011256:	e00c      	b.n	8011272 <tcp_process+0x73e>
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	687a      	ldr	r2, [r7, #4]
 801125e:	429a      	cmp	r2, r3
 8011260:	d104      	bne.n	801126c <tcp_process+0x738>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	68da      	ldr	r2, [r3, #12]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	60da      	str	r2, [r3, #12]
 801126a:	e005      	b.n	8011278 <tcp_process+0x744>
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	68db      	ldr	r3, [r3, #12]
 8011270:	60fb      	str	r3, [r7, #12]
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1ef      	bne.n	8011258 <tcp_process+0x724>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2200      	movs	r2, #0
 801127c:	60da      	str	r2, [r3, #12]
 801127e:	4b1f      	ldr	r3, [pc, #124]	; (80112fc <tcp_process+0x7c8>)
 8011280:	2201      	movs	r2, #1
 8011282:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	220a      	movs	r2, #10
 8011288:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801128a:	4b1d      	ldr	r3, [pc, #116]	; (8011300 <tcp_process+0x7cc>)
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	60da      	str	r2, [r3, #12]
 8011292:	4a1b      	ldr	r2, [pc, #108]	; (8011300 <tcp_process+0x7cc>)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6013      	str	r3, [r2, #0]
 8011298:	f003 f8a0 	bl	80143dc <tcp_timer_needed>
      }
      break;
 801129c:	e026      	b.n	80112ec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f000 f93c 	bl	801151c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80112a4:	4b17      	ldr	r3, [pc, #92]	; (8011304 <tcp_process+0x7d0>)
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	f003 0310 	and.w	r3, r3, #16
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d01f      	beq.n	80112f0 <tcp_process+0x7bc>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112b4:	4b14      	ldr	r3, [pc, #80]	; (8011308 <tcp_process+0x7d4>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d119      	bne.n	80112f0 <tcp_process+0x7bc>
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d115      	bne.n	80112f0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80112c4:	4b11      	ldr	r3, [pc, #68]	; (801130c <tcp_process+0x7d8>)
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	f043 0310 	orr.w	r3, r3, #16
 80112cc:	b2da      	uxtb	r2, r3
 80112ce:	4b0f      	ldr	r3, [pc, #60]	; (801130c <tcp_process+0x7d8>)
 80112d0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80112d2:	e00d      	b.n	80112f0 <tcp_process+0x7bc>
    default:
      break;
 80112d4:	bf00      	nop
 80112d6:	e00c      	b.n	80112f2 <tcp_process+0x7be>
      break;
 80112d8:	bf00      	nop
 80112da:	e00a      	b.n	80112f2 <tcp_process+0x7be>
      break;
 80112dc:	bf00      	nop
 80112de:	e008      	b.n	80112f2 <tcp_process+0x7be>
      break;
 80112e0:	bf00      	nop
 80112e2:	e006      	b.n	80112f2 <tcp_process+0x7be>
      break;
 80112e4:	bf00      	nop
 80112e6:	e004      	b.n	80112f2 <tcp_process+0x7be>
      break;
 80112e8:	bf00      	nop
 80112ea:	e002      	b.n	80112f2 <tcp_process+0x7be>
      break;
 80112ec:	bf00      	nop
 80112ee:	e000      	b.n	80112f2 <tcp_process+0x7be>
      break;
 80112f0:	bf00      	nop
  }
  return ERR_OK;
 80112f2:	2300      	movs	r3, #0
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3724      	adds	r7, #36	; 0x24
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd90      	pop	{r4, r7, pc}
 80112fc:	2001065c 	.word	0x2001065c
 8011300:	20010670 	.word	0x20010670
 8011304:	20008b10 	.word	0x20008b10
 8011308:	20008b08 	.word	0x20008b08
 801130c:	20008b11 	.word	0x20008b11
 8011310:	20010660 	.word	0x20010660

08011314 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011314:	b590      	push	{r4, r7, lr}
 8011316:	b085      	sub	sp, #20
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d106      	bne.n	8011332 <tcp_oos_insert_segment+0x1e>
 8011324:	4b3b      	ldr	r3, [pc, #236]	; (8011414 <tcp_oos_insert_segment+0x100>)
 8011326:	f240 421f 	movw	r2, #1055	; 0x41f
 801132a:	493b      	ldr	r1, [pc, #236]	; (8011418 <tcp_oos_insert_segment+0x104>)
 801132c:	483b      	ldr	r0, [pc, #236]	; (801141c <tcp_oos_insert_segment+0x108>)
 801132e:	f00a fac7 	bl	801b8c0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	899b      	ldrh	r3, [r3, #12]
 8011338:	b29b      	uxth	r3, r3
 801133a:	4618      	mov	r0, r3
 801133c:	f7fb f982 	bl	800c644 <lwip_htons>
 8011340:	4603      	mov	r3, r0
 8011342:	b2db      	uxtb	r3, r3
 8011344:	f003 0301 	and.w	r3, r3, #1
 8011348:	2b00      	cmp	r3, #0
 801134a:	d028      	beq.n	801139e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801134c:	6838      	ldr	r0, [r7, #0]
 801134e:	f7fe f997 	bl	800f680 <tcp_segs_free>
    next = NULL;
 8011352:	2300      	movs	r3, #0
 8011354:	603b      	str	r3, [r7, #0]
 8011356:	e056      	b.n	8011406 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	899b      	ldrh	r3, [r3, #12]
 801135e:	b29b      	uxth	r3, r3
 8011360:	4618      	mov	r0, r3
 8011362:	f7fb f96f 	bl	800c644 <lwip_htons>
 8011366:	4603      	mov	r3, r0
 8011368:	b2db      	uxtb	r3, r3
 801136a:	f003 0301 	and.w	r3, r3, #1
 801136e:	2b00      	cmp	r3, #0
 8011370:	d00d      	beq.n	801138e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	68db      	ldr	r3, [r3, #12]
 8011376:	899b      	ldrh	r3, [r3, #12]
 8011378:	b29c      	uxth	r4, r3
 801137a:	2001      	movs	r0, #1
 801137c:	f7fb f962 	bl	800c644 <lwip_htons>
 8011380:	4603      	mov	r3, r0
 8011382:	461a      	mov	r2, r3
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	4322      	orrs	r2, r4
 801138a:	b292      	uxth	r2, r2
 801138c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011398:	68f8      	ldr	r0, [r7, #12]
 801139a:	f7fe f986 	bl	800f6aa <tcp_seg_free>
    while (next &&
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d00e      	beq.n	80113c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	891b      	ldrh	r3, [r3, #8]
 80113a8:	461a      	mov	r2, r3
 80113aa:	4b1d      	ldr	r3, [pc, #116]	; (8011420 <tcp_oos_insert_segment+0x10c>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	441a      	add	r2, r3
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	6839      	ldr	r1, [r7, #0]
 80113b8:	8909      	ldrh	r1, [r1, #8]
 80113ba:	440b      	add	r3, r1
 80113bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80113be:	2b00      	cmp	r3, #0
 80113c0:	daca      	bge.n	8011358 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d01e      	beq.n	8011406 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	891b      	ldrh	r3, [r3, #8]
 80113cc:	461a      	mov	r2, r3
 80113ce:	4b14      	ldr	r3, [pc, #80]	; (8011420 <tcp_oos_insert_segment+0x10c>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	441a      	add	r2, r3
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	1ad3      	subs	r3, r2, r3
    if (next &&
 80113dc:	2b00      	cmp	r3, #0
 80113de:	dd12      	ble.n	8011406 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	b29a      	uxth	r2, r3
 80113e8:	4b0d      	ldr	r3, [pc, #52]	; (8011420 <tcp_oos_insert_segment+0x10c>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	1ad3      	subs	r3, r2, r3
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	685a      	ldr	r2, [r3, #4]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	891b      	ldrh	r3, [r3, #8]
 80113fe:	4619      	mov	r1, r3
 8011400:	4610      	mov	r0, r2
 8011402:	f7fc fb51 	bl	800daa8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	683a      	ldr	r2, [r7, #0]
 801140a:	601a      	str	r2, [r3, #0]
}
 801140c:	bf00      	nop
 801140e:	3714      	adds	r7, #20
 8011410:	46bd      	mov	sp, r7
 8011412:	bd90      	pop	{r4, r7, pc}
 8011414:	0801ed94 	.word	0x0801ed94
 8011418:	0801f054 	.word	0x0801f054
 801141c:	0801ede0 	.word	0x0801ede0
 8011420:	20008b04 	.word	0x20008b04

08011424 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011424:	b5b0      	push	{r4, r5, r7, lr}
 8011426:	b086      	sub	sp, #24
 8011428:	af00      	add	r7, sp, #0
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	60b9      	str	r1, [r7, #8]
 801142e:	607a      	str	r2, [r7, #4]
 8011430:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011432:	e03e      	b.n	80114b2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	4618      	mov	r0, r3
 8011444:	f7fc fd76 	bl	800df34 <pbuf_clen>
 8011448:	4603      	mov	r3, r0
 801144a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011452:	8a7a      	ldrh	r2, [r7, #18]
 8011454:	429a      	cmp	r2, r3
 8011456:	d906      	bls.n	8011466 <tcp_free_acked_segments+0x42>
 8011458:	4b2a      	ldr	r3, [pc, #168]	; (8011504 <tcp_free_acked_segments+0xe0>)
 801145a:	f240 4257 	movw	r2, #1111	; 0x457
 801145e:	492a      	ldr	r1, [pc, #168]	; (8011508 <tcp_free_acked_segments+0xe4>)
 8011460:	482a      	ldr	r0, [pc, #168]	; (801150c <tcp_free_acked_segments+0xe8>)
 8011462:	f00a fa2d 	bl	801b8c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801146c:	8a7b      	ldrh	r3, [r7, #18]
 801146e:	1ad3      	subs	r3, r2, r3
 8011470:	b29a      	uxth	r2, r3
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	891a      	ldrh	r2, [r3, #8]
 801147c:	4b24      	ldr	r3, [pc, #144]	; (8011510 <tcp_free_acked_segments+0xec>)
 801147e:	881b      	ldrh	r3, [r3, #0]
 8011480:	4413      	add	r3, r2
 8011482:	b29a      	uxth	r2, r3
 8011484:	4b22      	ldr	r3, [pc, #136]	; (8011510 <tcp_free_acked_segments+0xec>)
 8011486:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011488:	6978      	ldr	r0, [r7, #20]
 801148a:	f7fe f90e 	bl	800f6aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011494:	2b00      	cmp	r3, #0
 8011496:	d00c      	beq.n	80114b2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d109      	bne.n	80114b2 <tcp_free_acked_segments+0x8e>
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d106      	bne.n	80114b2 <tcp_free_acked_segments+0x8e>
 80114a4:	4b17      	ldr	r3, [pc, #92]	; (8011504 <tcp_free_acked_segments+0xe0>)
 80114a6:	f240 4261 	movw	r2, #1121	; 0x461
 80114aa:	491a      	ldr	r1, [pc, #104]	; (8011514 <tcp_free_acked_segments+0xf0>)
 80114ac:	4817      	ldr	r0, [pc, #92]	; (801150c <tcp_free_acked_segments+0xe8>)
 80114ae:	f00a fa07 	bl	801b8c0 <iprintf>
  while (seg_list != NULL &&
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d020      	beq.n	80114fa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fb f8d5 	bl	800c66e <lwip_htonl>
 80114c4:	4604      	mov	r4, r0
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	891b      	ldrh	r3, [r3, #8]
 80114ca:	461d      	mov	r5, r3
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	899b      	ldrh	r3, [r3, #12]
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7fb f8b5 	bl	800c644 <lwip_htons>
 80114da:	4603      	mov	r3, r0
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	f003 0303 	and.w	r3, r3, #3
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d001      	beq.n	80114ea <tcp_free_acked_segments+0xc6>
 80114e6:	2301      	movs	r3, #1
 80114e8:	e000      	b.n	80114ec <tcp_free_acked_segments+0xc8>
 80114ea:	2300      	movs	r3, #0
 80114ec:	442b      	add	r3, r5
 80114ee:	18e2      	adds	r2, r4, r3
 80114f0:	4b09      	ldr	r3, [pc, #36]	; (8011518 <tcp_free_acked_segments+0xf4>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	dd9c      	ble.n	8011434 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80114fa:	68bb      	ldr	r3, [r7, #8]
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3718      	adds	r7, #24
 8011500:	46bd      	mov	sp, r7
 8011502:	bdb0      	pop	{r4, r5, r7, pc}
 8011504:	0801ed94 	.word	0x0801ed94
 8011508:	0801f07c 	.word	0x0801f07c
 801150c:	0801ede0 	.word	0x0801ede0
 8011510:	20008b0c 	.word	0x20008b0c
 8011514:	0801f0a4 	.word	0x0801f0a4
 8011518:	20008b08 	.word	0x20008b08

0801151c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801151c:	b5b0      	push	{r4, r5, r7, lr}
 801151e:	b094      	sub	sp, #80	; 0x50
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011524:	2300      	movs	r3, #0
 8011526:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d106      	bne.n	801153c <tcp_receive+0x20>
 801152e:	4ba6      	ldr	r3, [pc, #664]	; (80117c8 <tcp_receive+0x2ac>)
 8011530:	f240 427b 	movw	r2, #1147	; 0x47b
 8011534:	49a5      	ldr	r1, [pc, #660]	; (80117cc <tcp_receive+0x2b0>)
 8011536:	48a6      	ldr	r0, [pc, #664]	; (80117d0 <tcp_receive+0x2b4>)
 8011538:	f00a f9c2 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	7d1b      	ldrb	r3, [r3, #20]
 8011540:	2b03      	cmp	r3, #3
 8011542:	d806      	bhi.n	8011552 <tcp_receive+0x36>
 8011544:	4ba0      	ldr	r3, [pc, #640]	; (80117c8 <tcp_receive+0x2ac>)
 8011546:	f240 427c 	movw	r2, #1148	; 0x47c
 801154a:	49a2      	ldr	r1, [pc, #648]	; (80117d4 <tcp_receive+0x2b8>)
 801154c:	48a0      	ldr	r0, [pc, #640]	; (80117d0 <tcp_receive+0x2b4>)
 801154e:	f00a f9b7 	bl	801b8c0 <iprintf>

  if (flags & TCP_ACK) {
 8011552:	4ba1      	ldr	r3, [pc, #644]	; (80117d8 <tcp_receive+0x2bc>)
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	f003 0310 	and.w	r3, r3, #16
 801155a:	2b00      	cmp	r3, #0
 801155c:	f000 8263 	beq.w	8011a26 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011566:	461a      	mov	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801156c:	4413      	add	r3, r2
 801156e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011574:	4b99      	ldr	r3, [pc, #612]	; (80117dc <tcp_receive+0x2c0>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	1ad3      	subs	r3, r2, r3
 801157a:	2b00      	cmp	r3, #0
 801157c:	db1b      	blt.n	80115b6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011582:	4b96      	ldr	r3, [pc, #600]	; (80117dc <tcp_receive+0x2c0>)
 8011584:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011586:	429a      	cmp	r2, r3
 8011588:	d106      	bne.n	8011598 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801158e:	4b94      	ldr	r3, [pc, #592]	; (80117e0 <tcp_receive+0x2c4>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	1ad3      	subs	r3, r2, r3
 8011594:	2b00      	cmp	r3, #0
 8011596:	db0e      	blt.n	80115b6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801159c:	4b90      	ldr	r3, [pc, #576]	; (80117e0 <tcp_receive+0x2c4>)
 801159e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d125      	bne.n	80115f0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80115a4:	4b8f      	ldr	r3, [pc, #572]	; (80117e4 <tcp_receive+0x2c8>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	89db      	ldrh	r3, [r3, #14]
 80115aa:	b29a      	uxth	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d91c      	bls.n	80115f0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80115b6:	4b8b      	ldr	r3, [pc, #556]	; (80117e4 <tcp_receive+0x2c8>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	89db      	ldrh	r3, [r3, #14]
 80115bc:	b29a      	uxth	r2, r3
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115d0:	429a      	cmp	r2, r3
 80115d2:	d205      	bcs.n	80115e0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80115e0:	4b7e      	ldr	r3, [pc, #504]	; (80117dc <tcp_receive+0x2c0>)
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80115e8:	4b7d      	ldr	r3, [pc, #500]	; (80117e0 <tcp_receive+0x2c4>)
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80115f0:	4b7b      	ldr	r3, [pc, #492]	; (80117e0 <tcp_receive+0x2c4>)
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	dc58      	bgt.n	80116b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80115fe:	4b7a      	ldr	r3, [pc, #488]	; (80117e8 <tcp_receive+0x2cc>)
 8011600:	881b      	ldrh	r3, [r3, #0]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d14b      	bne.n	801169e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011610:	4413      	add	r3, r2
 8011612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011614:	429a      	cmp	r2, r3
 8011616:	d142      	bne.n	801169e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801161e:	2b00      	cmp	r3, #0
 8011620:	db3d      	blt.n	801169e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011626:	4b6e      	ldr	r3, [pc, #440]	; (80117e0 <tcp_receive+0x2c4>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	429a      	cmp	r2, r3
 801162c:	d137      	bne.n	801169e <tcp_receive+0x182>
              found_dupack = 1;
 801162e:	2301      	movs	r3, #1
 8011630:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011638:	2bff      	cmp	r3, #255	; 0xff
 801163a:	d007      	beq.n	801164c <tcp_receive+0x130>
                ++pcb->dupacks;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011642:	3301      	adds	r3, #1
 8011644:	b2da      	uxtb	r2, r3
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011652:	2b03      	cmp	r3, #3
 8011654:	d91b      	bls.n	801168e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011660:	4413      	add	r3, r2
 8011662:	b29a      	uxth	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801166a:	429a      	cmp	r2, r3
 801166c:	d30a      	bcc.n	8011684 <tcp_receive+0x168>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011678:	4413      	add	r3, r2
 801167a:	b29a      	uxth	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011682:	e004      	b.n	801168e <tcp_receive+0x172>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801168a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011694:	2b02      	cmp	r3, #2
 8011696:	d902      	bls.n	801169e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f002 fb41 	bl	8013d20 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801169e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f040 8160 	bne.w	8011966 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80116ae:	e15a      	b.n	8011966 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116b0:	4b4b      	ldr	r3, [pc, #300]	; (80117e0 <tcp_receive+0x2c4>)
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116b8:	1ad3      	subs	r3, r2, r3
 80116ba:	3b01      	subs	r3, #1
 80116bc:	2b00      	cmp	r3, #0
 80116be:	f2c0 814d 	blt.w	801195c <tcp_receive+0x440>
 80116c2:	4b47      	ldr	r3, [pc, #284]	; (80117e0 <tcp_receive+0x2c4>)
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116ca:	1ad3      	subs	r3, r2, r3
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f300 8145 	bgt.w	801195c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	8b5b      	ldrh	r3, [r3, #26]
 80116d6:	f003 0304 	and.w	r3, r3, #4
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d010      	beq.n	8011700 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	8b5b      	ldrh	r3, [r3, #26]
 80116e2:	f023 0304 	bic.w	r3, r3, #4
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801170e:	10db      	asrs	r3, r3, #3
 8011710:	b21b      	sxth	r3, r3
 8011712:	b29a      	uxth	r2, r3
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801171a:	b29b      	uxth	r3, r3
 801171c:	4413      	add	r3, r2
 801171e:	b29b      	uxth	r3, r3
 8011720:	b21a      	sxth	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011728:	4b2d      	ldr	r3, [pc, #180]	; (80117e0 <tcp_receive+0x2c4>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	b29a      	uxth	r2, r3
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011732:	b29b      	uxth	r3, r3
 8011734:	1ad3      	subs	r3, r2, r3
 8011736:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2200      	movs	r2, #0
 801173c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011740:	4b27      	ldr	r3, [pc, #156]	; (80117e0 <tcp_receive+0x2c4>)
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	7d1b      	ldrb	r3, [r3, #20]
 801174c:	2b03      	cmp	r3, #3
 801174e:	f240 8096 	bls.w	801187e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801175e:	429a      	cmp	r2, r3
 8011760:	d244      	bcs.n	80117ec <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	8b5b      	ldrh	r3, [r3, #26]
 8011766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801176a:	2b00      	cmp	r3, #0
 801176c:	d001      	beq.n	8011772 <tcp_receive+0x256>
 801176e:	2301      	movs	r3, #1
 8011770:	e000      	b.n	8011774 <tcp_receive+0x258>
 8011772:	2302      	movs	r3, #2
 8011774:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011778:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801177c:	b29a      	uxth	r2, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011782:	fb12 f303 	smulbb	r3, r2, r3
 8011786:	b29b      	uxth	r3, r3
 8011788:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801178a:	4293      	cmp	r3, r2
 801178c:	bf28      	it	cs
 801178e:	4613      	movcs	r3, r2
 8011790:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011798:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801179a:	4413      	add	r3, r2
 801179c:	b29a      	uxth	r2, r3
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d309      	bcc.n	80117bc <tcp_receive+0x2a0>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80117b0:	4413      	add	r3, r2
 80117b2:	b29a      	uxth	r2, r3
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80117ba:	e060      	b.n	801187e <tcp_receive+0x362>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80117c6:	e05a      	b.n	801187e <tcp_receive+0x362>
 80117c8:	0801ed94 	.word	0x0801ed94
 80117cc:	0801f0c4 	.word	0x0801f0c4
 80117d0:	0801ede0 	.word	0x0801ede0
 80117d4:	0801f0e0 	.word	0x0801f0e0
 80117d8:	20008b10 	.word	0x20008b10
 80117dc:	20008b04 	.word	0x20008b04
 80117e0:	20008b08 	.word	0x20008b08
 80117e4:	20008af4 	.word	0x20008af4
 80117e8:	20008b0e 	.word	0x20008b0e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80117f4:	4413      	add	r3, r2
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80117fe:	429a      	cmp	r2, r3
 8011800:	d309      	bcc.n	8011816 <tcp_receive+0x2fa>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011808:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801180a:	4413      	add	r3, r2
 801180c:	b29a      	uxth	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011814:	e004      	b.n	8011820 <tcp_receive+0x304>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801181c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801182c:	429a      	cmp	r2, r3
 801182e:	d326      	bcc.n	801187e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	b29a      	uxth	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011850:	4413      	add	r3, r2
 8011852:	b29a      	uxth	r2, r3
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801185a:	429a      	cmp	r2, r3
 801185c:	d30a      	bcc.n	8011874 <tcp_receive+0x358>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011868:	4413      	add	r3, r2
 801186a:	b29a      	uxth	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011872:	e004      	b.n	801187e <tcp_receive+0x362>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801187a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011886:	4a98      	ldr	r2, [pc, #608]	; (8011ae8 <tcp_receive+0x5cc>)
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7ff fdcb 	bl	8011424 <tcp_free_acked_segments>
 801188e:	4602      	mov	r2, r0
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801189c:	4a93      	ldr	r2, [pc, #588]	; (8011aec <tcp_receive+0x5d0>)
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7ff fdc0 	bl	8011424 <tcp_free_acked_segments>
 80118a4:	4602      	mov	r2, r0
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d104      	bne.n	80118bc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80118ba:	e002      	b.n	80118c2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d103      	bne.n	80118d8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2200      	movs	r2, #0
 80118d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80118de:	4b84      	ldr	r3, [pc, #528]	; (8011af0 <tcp_receive+0x5d4>)
 80118e0:	881b      	ldrh	r3, [r3, #0]
 80118e2:	4413      	add	r3, r2
 80118e4:	b29a      	uxth	r2, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	8b5b      	ldrh	r3, [r3, #26]
 80118f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d035      	beq.n	8011964 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d118      	bne.n	8011932 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00c      	beq.n	8011922 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011910:	68db      	ldr	r3, [r3, #12]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	4618      	mov	r0, r3
 8011916:	f7fa feaa 	bl	800c66e <lwip_htonl>
 801191a:	4603      	mov	r3, r0
 801191c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801191e:	2b00      	cmp	r3, #0
 8011920:	dc20      	bgt.n	8011964 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	8b5b      	ldrh	r3, [r3, #26]
 8011926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801192a:	b29a      	uxth	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011930:	e018      	b.n	8011964 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801193a:	68db      	ldr	r3, [r3, #12]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	4618      	mov	r0, r3
 8011940:	f7fa fe95 	bl	800c66e <lwip_htonl>
 8011944:	4603      	mov	r3, r0
 8011946:	1ae3      	subs	r3, r4, r3
 8011948:	2b00      	cmp	r3, #0
 801194a:	dc0b      	bgt.n	8011964 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	8b5b      	ldrh	r3, [r3, #26]
 8011950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011954:	b29a      	uxth	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801195a:	e003      	b.n	8011964 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f002 fbcd 	bl	80140fc <tcp_send_empty_ack>
 8011962:	e000      	b.n	8011966 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011964:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801196a:	2b00      	cmp	r3, #0
 801196c:	d05b      	beq.n	8011a26 <tcp_receive+0x50a>
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011972:	4b60      	ldr	r3, [pc, #384]	; (8011af4 <tcp_receive+0x5d8>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	1ad3      	subs	r3, r2, r3
 8011978:	2b00      	cmp	r3, #0
 801197a:	da54      	bge.n	8011a26 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801197c:	4b5e      	ldr	r3, [pc, #376]	; (8011af8 <tcp_receive+0x5dc>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	b29a      	uxth	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011986:	b29b      	uxth	r3, r3
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	b29b      	uxth	r3, r3
 801198c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011990:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801199a:	10db      	asrs	r3, r3, #3
 801199c:	b21b      	sxth	r3, r3
 801199e:	b29b      	uxth	r3, r3
 80119a0:	1ad3      	subs	r3, r2, r3
 80119a2:	b29b      	uxth	r3, r3
 80119a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119b4:	4413      	add	r3, r2
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	b21a      	sxth	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80119be:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	da05      	bge.n	80119d2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80119c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119ca:	425b      	negs	r3, r3
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80119d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119dc:	109b      	asrs	r3, r3, #2
 80119de:	b21b      	sxth	r3, r3
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	1ad3      	subs	r3, r2, r3
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119f6:	4413      	add	r3, r2
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	b21a      	sxth	r2, r3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a06:	10db      	asrs	r3, r3, #3
 8011a08:	b21b      	sxth	r3, r3
 8011a0a:	b29a      	uxth	r2, r3
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	4413      	add	r3, r2
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	b21a      	sxth	r2, r3
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2200      	movs	r2, #0
 8011a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011a26:	4b35      	ldr	r3, [pc, #212]	; (8011afc <tcp_receive+0x5e0>)
 8011a28:	881b      	ldrh	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f000 84e1 	beq.w	80123f2 <tcp_receive+0xed6>
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	7d1b      	ldrb	r3, [r3, #20]
 8011a34:	2b06      	cmp	r3, #6
 8011a36:	f200 84dc 	bhi.w	80123f2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a3e:	4b30      	ldr	r3, [pc, #192]	; (8011b00 <tcp_receive+0x5e4>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	3b01      	subs	r3, #1
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f2c0 808e 	blt.w	8011b68 <tcp_receive+0x64c>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a50:	4b2a      	ldr	r3, [pc, #168]	; (8011afc <tcp_receive+0x5e0>)
 8011a52:	881b      	ldrh	r3, [r3, #0]
 8011a54:	4619      	mov	r1, r3
 8011a56:	4b2a      	ldr	r3, [pc, #168]	; (8011b00 <tcp_receive+0x5e4>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	440b      	add	r3, r1
 8011a5c:	1ad3      	subs	r3, r2, r3
 8011a5e:	3301      	adds	r3, #1
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	f300 8081 	bgt.w	8011b68 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011a66:	4b27      	ldr	r3, [pc, #156]	; (8011b04 <tcp_receive+0x5e8>)
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a70:	4b23      	ldr	r3, [pc, #140]	; (8011b00 <tcp_receive+0x5e4>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011a78:	4b22      	ldr	r3, [pc, #136]	; (8011b04 <tcp_receive+0x5e8>)
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d106      	bne.n	8011a8e <tcp_receive+0x572>
 8011a80:	4b21      	ldr	r3, [pc, #132]	; (8011b08 <tcp_receive+0x5ec>)
 8011a82:	f240 5294 	movw	r2, #1428	; 0x594
 8011a86:	4921      	ldr	r1, [pc, #132]	; (8011b0c <tcp_receive+0x5f0>)
 8011a88:	4821      	ldr	r0, [pc, #132]	; (8011b10 <tcp_receive+0x5f4>)
 8011a8a:	f009 ff19 	bl	801b8c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d906      	bls.n	8011aa6 <tcp_receive+0x58a>
 8011a98:	4b1b      	ldr	r3, [pc, #108]	; (8011b08 <tcp_receive+0x5ec>)
 8011a9a:	f240 5295 	movw	r2, #1429	; 0x595
 8011a9e:	491d      	ldr	r1, [pc, #116]	; (8011b14 <tcp_receive+0x5f8>)
 8011aa0:	481b      	ldr	r0, [pc, #108]	; (8011b10 <tcp_receive+0x5f4>)
 8011aa2:	f009 ff0d 	bl	801b8c0 <iprintf>
      off = (u16_t)off32;
 8011aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011aac:	4b15      	ldr	r3, [pc, #84]	; (8011b04 <tcp_receive+0x5e8>)
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	891b      	ldrh	r3, [r3, #8]
 8011ab2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d906      	bls.n	8011ac8 <tcp_receive+0x5ac>
 8011aba:	4b13      	ldr	r3, [pc, #76]	; (8011b08 <tcp_receive+0x5ec>)
 8011abc:	f240 5297 	movw	r2, #1431	; 0x597
 8011ac0:	4915      	ldr	r1, [pc, #84]	; (8011b18 <tcp_receive+0x5fc>)
 8011ac2:	4813      	ldr	r0, [pc, #76]	; (8011b10 <tcp_receive+0x5f4>)
 8011ac4:	f009 fefc 	bl	801b8c0 <iprintf>
      inseg.len -= off;
 8011ac8:	4b0e      	ldr	r3, [pc, #56]	; (8011b04 <tcp_receive+0x5e8>)
 8011aca:	891a      	ldrh	r2, [r3, #8]
 8011acc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	4b0b      	ldr	r3, [pc, #44]	; (8011b04 <tcp_receive+0x5e8>)
 8011ad6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011ad8:	4b0a      	ldr	r3, [pc, #40]	; (8011b04 <tcp_receive+0x5e8>)
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	891a      	ldrh	r2, [r3, #8]
 8011ade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ae2:	1ad3      	subs	r3, r2, r3
 8011ae4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011ae6:	e029      	b.n	8011b3c <tcp_receive+0x620>
 8011ae8:	0801f0fc 	.word	0x0801f0fc
 8011aec:	0801f104 	.word	0x0801f104
 8011af0:	20008b0c 	.word	0x20008b0c
 8011af4:	20008b08 	.word	0x20008b08
 8011af8:	20010664 	.word	0x20010664
 8011afc:	20008b0e 	.word	0x20008b0e
 8011b00:	20008b04 	.word	0x20008b04
 8011b04:	20008ae4 	.word	0x20008ae4
 8011b08:	0801ed94 	.word	0x0801ed94
 8011b0c:	0801f10c 	.word	0x0801f10c
 8011b10:	0801ede0 	.word	0x0801ede0
 8011b14:	0801f11c 	.word	0x0801f11c
 8011b18:	0801f12c 	.word	0x0801f12c
        off -= p->len;
 8011b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b1e:	895b      	ldrh	r3, [r3, #10]
 8011b20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011b2e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b32:	2200      	movs	r2, #0
 8011b34:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b3e:	895b      	ldrh	r3, [r3, #10]
 8011b40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d8e9      	bhi.n	8011b1c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011b48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011b50:	f7fc f8aa 	bl	800dca8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b58:	4a91      	ldr	r2, [pc, #580]	; (8011da0 <tcp_receive+0x884>)
 8011b5a:	6013      	str	r3, [r2, #0]
 8011b5c:	4b91      	ldr	r3, [pc, #580]	; (8011da4 <tcp_receive+0x888>)
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	4a8f      	ldr	r2, [pc, #572]	; (8011da0 <tcp_receive+0x884>)
 8011b62:	6812      	ldr	r2, [r2, #0]
 8011b64:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011b66:	e00d      	b.n	8011b84 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011b68:	4b8d      	ldr	r3, [pc, #564]	; (8011da0 <tcp_receive+0x884>)
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b70:	1ad3      	subs	r3, r2, r3
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	da06      	bge.n	8011b84 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	8b5b      	ldrh	r3, [r3, #26]
 8011b7a:	f043 0302 	orr.w	r3, r3, #2
 8011b7e:	b29a      	uxth	r2, r3
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b84:	4b86      	ldr	r3, [pc, #536]	; (8011da0 <tcp_receive+0x884>)
 8011b86:	681a      	ldr	r2, [r3, #0]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	f2c0 842a 	blt.w	80123e8 <tcp_receive+0xecc>
 8011b94:	4b82      	ldr	r3, [pc, #520]	; (8011da0 <tcp_receive+0x884>)
 8011b96:	681a      	ldr	r2, [r3, #0]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b9c:	6879      	ldr	r1, [r7, #4]
 8011b9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ba0:	440b      	add	r3, r1
 8011ba2:	1ad3      	subs	r3, r2, r3
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	f300 841e 	bgt.w	80123e8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bb0:	4b7b      	ldr	r3, [pc, #492]	; (8011da0 <tcp_receive+0x884>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	f040 829a 	bne.w	80120ee <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011bba:	4b7a      	ldr	r3, [pc, #488]	; (8011da4 <tcp_receive+0x888>)
 8011bbc:	891c      	ldrh	r4, [r3, #8]
 8011bbe:	4b79      	ldr	r3, [pc, #484]	; (8011da4 <tcp_receive+0x888>)
 8011bc0:	68db      	ldr	r3, [r3, #12]
 8011bc2:	899b      	ldrh	r3, [r3, #12]
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7fa fd3c 	bl	800c644 <lwip_htons>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	f003 0303 	and.w	r3, r3, #3
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d001      	beq.n	8011bdc <tcp_receive+0x6c0>
 8011bd8:	2301      	movs	r3, #1
 8011bda:	e000      	b.n	8011bde <tcp_receive+0x6c2>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	4423      	add	r3, r4
 8011be0:	b29a      	uxth	r2, r3
 8011be2:	4b71      	ldr	r3, [pc, #452]	; (8011da8 <tcp_receive+0x88c>)
 8011be4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011bea:	4b6f      	ldr	r3, [pc, #444]	; (8011da8 <tcp_receive+0x88c>)
 8011bec:	881b      	ldrh	r3, [r3, #0]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d275      	bcs.n	8011cde <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011bf2:	4b6c      	ldr	r3, [pc, #432]	; (8011da4 <tcp_receive+0x888>)
 8011bf4:	68db      	ldr	r3, [r3, #12]
 8011bf6:	899b      	ldrh	r3, [r3, #12]
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7fa fd22 	bl	800c644 <lwip_htons>
 8011c00:	4603      	mov	r3, r0
 8011c02:	b2db      	uxtb	r3, r3
 8011c04:	f003 0301 	and.w	r3, r3, #1
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d01f      	beq.n	8011c4c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011c0c:	4b65      	ldr	r3, [pc, #404]	; (8011da4 <tcp_receive+0x888>)
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	899b      	ldrh	r3, [r3, #12]
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	b21b      	sxth	r3, r3
 8011c16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c1a:	b21c      	sxth	r4, r3
 8011c1c:	4b61      	ldr	r3, [pc, #388]	; (8011da4 <tcp_receive+0x888>)
 8011c1e:	68db      	ldr	r3, [r3, #12]
 8011c20:	899b      	ldrh	r3, [r3, #12]
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fa fd0d 	bl	800c644 <lwip_htons>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011c34:	b29b      	uxth	r3, r3
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fa fd04 	bl	800c644 <lwip_htons>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	b21b      	sxth	r3, r3
 8011c40:	4323      	orrs	r3, r4
 8011c42:	b21a      	sxth	r2, r3
 8011c44:	4b57      	ldr	r3, [pc, #348]	; (8011da4 <tcp_receive+0x888>)
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	b292      	uxth	r2, r2
 8011c4a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c50:	4b54      	ldr	r3, [pc, #336]	; (8011da4 <tcp_receive+0x888>)
 8011c52:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011c54:	4b53      	ldr	r3, [pc, #332]	; (8011da4 <tcp_receive+0x888>)
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	899b      	ldrh	r3, [r3, #12]
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7fa fcf1 	bl	800c644 <lwip_htons>
 8011c62:	4603      	mov	r3, r0
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	f003 0302 	and.w	r3, r3, #2
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d005      	beq.n	8011c7a <tcp_receive+0x75e>
            inseg.len -= 1;
 8011c6e:	4b4d      	ldr	r3, [pc, #308]	; (8011da4 <tcp_receive+0x888>)
 8011c70:	891b      	ldrh	r3, [r3, #8]
 8011c72:	3b01      	subs	r3, #1
 8011c74:	b29a      	uxth	r2, r3
 8011c76:	4b4b      	ldr	r3, [pc, #300]	; (8011da4 <tcp_receive+0x888>)
 8011c78:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011c7a:	4b4a      	ldr	r3, [pc, #296]	; (8011da4 <tcp_receive+0x888>)
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	4a49      	ldr	r2, [pc, #292]	; (8011da4 <tcp_receive+0x888>)
 8011c80:	8912      	ldrh	r2, [r2, #8]
 8011c82:	4611      	mov	r1, r2
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fb ff0f 	bl	800daa8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011c8a:	4b46      	ldr	r3, [pc, #280]	; (8011da4 <tcp_receive+0x888>)
 8011c8c:	891c      	ldrh	r4, [r3, #8]
 8011c8e:	4b45      	ldr	r3, [pc, #276]	; (8011da4 <tcp_receive+0x888>)
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	899b      	ldrh	r3, [r3, #12]
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7fa fcd4 	bl	800c644 <lwip_htons>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	f003 0303 	and.w	r3, r3, #3
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d001      	beq.n	8011cac <tcp_receive+0x790>
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e000      	b.n	8011cae <tcp_receive+0x792>
 8011cac:	2300      	movs	r3, #0
 8011cae:	4423      	add	r3, r4
 8011cb0:	b29a      	uxth	r2, r3
 8011cb2:	4b3d      	ldr	r3, [pc, #244]	; (8011da8 <tcp_receive+0x88c>)
 8011cb4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011cb6:	4b3c      	ldr	r3, [pc, #240]	; (8011da8 <tcp_receive+0x88c>)
 8011cb8:	881b      	ldrh	r3, [r3, #0]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	4b38      	ldr	r3, [pc, #224]	; (8011da0 <tcp_receive+0x884>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	441a      	add	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc6:	6879      	ldr	r1, [r7, #4]
 8011cc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011cca:	440b      	add	r3, r1
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d006      	beq.n	8011cde <tcp_receive+0x7c2>
 8011cd0:	4b36      	ldr	r3, [pc, #216]	; (8011dac <tcp_receive+0x890>)
 8011cd2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011cd6:	4936      	ldr	r1, [pc, #216]	; (8011db0 <tcp_receive+0x894>)
 8011cd8:	4836      	ldr	r0, [pc, #216]	; (8011db4 <tcp_receive+0x898>)
 8011cda:	f009 fdf1 	bl	801b8c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f000 80e7 	beq.w	8011eb6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011ce8:	4b2e      	ldr	r3, [pc, #184]	; (8011da4 <tcp_receive+0x888>)
 8011cea:	68db      	ldr	r3, [r3, #12]
 8011cec:	899b      	ldrh	r3, [r3, #12]
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7fa fca7 	bl	800c644 <lwip_htons>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	f003 0301 	and.w	r3, r3, #1
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d010      	beq.n	8011d24 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011d02:	e00a      	b.n	8011d1a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d08:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011d14:	68f8      	ldr	r0, [r7, #12]
 8011d16:	f7fd fcc8 	bl	800f6aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d1f0      	bne.n	8011d04 <tcp_receive+0x7e8>
 8011d22:	e0c8      	b.n	8011eb6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d28:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011d2a:	e052      	b.n	8011dd2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d2e:	68db      	ldr	r3, [r3, #12]
 8011d30:	899b      	ldrh	r3, [r3, #12]
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fa fc85 	bl	800c644 <lwip_htons>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	f003 0301 	and.w	r3, r3, #1
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d03d      	beq.n	8011dc2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011d46:	4b17      	ldr	r3, [pc, #92]	; (8011da4 <tcp_receive+0x888>)
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	899b      	ldrh	r3, [r3, #12]
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fa fc78 	bl	800c644 <lwip_htons>
 8011d54:	4603      	mov	r3, r0
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d130      	bne.n	8011dc2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011d60:	4b10      	ldr	r3, [pc, #64]	; (8011da4 <tcp_receive+0x888>)
 8011d62:	68db      	ldr	r3, [r3, #12]
 8011d64:	899b      	ldrh	r3, [r3, #12]
 8011d66:	b29c      	uxth	r4, r3
 8011d68:	2001      	movs	r0, #1
 8011d6a:	f7fa fc6b 	bl	800c644 <lwip_htons>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	461a      	mov	r2, r3
 8011d72:	4b0c      	ldr	r3, [pc, #48]	; (8011da4 <tcp_receive+0x888>)
 8011d74:	68db      	ldr	r3, [r3, #12]
 8011d76:	4322      	orrs	r2, r4
 8011d78:	b292      	uxth	r2, r2
 8011d7a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011d7c:	4b09      	ldr	r3, [pc, #36]	; (8011da4 <tcp_receive+0x888>)
 8011d7e:	891c      	ldrh	r4, [r3, #8]
 8011d80:	4b08      	ldr	r3, [pc, #32]	; (8011da4 <tcp_receive+0x888>)
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	899b      	ldrh	r3, [r3, #12]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7fa fc5b 	bl	800c644 <lwip_htons>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	f003 0303 	and.w	r3, r3, #3
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d00e      	beq.n	8011db8 <tcp_receive+0x89c>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e00d      	b.n	8011dba <tcp_receive+0x89e>
 8011d9e:	bf00      	nop
 8011da0:	20008b04 	.word	0x20008b04
 8011da4:	20008ae4 	.word	0x20008ae4
 8011da8:	20008b0e 	.word	0x20008b0e
 8011dac:	0801ed94 	.word	0x0801ed94
 8011db0:	0801f13c 	.word	0x0801f13c
 8011db4:	0801ede0 	.word	0x0801ede0
 8011db8:	2300      	movs	r3, #0
 8011dba:	4423      	add	r3, r4
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	4b98      	ldr	r3, [pc, #608]	; (8012020 <tcp_receive+0xb04>)
 8011dc0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dc4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011dcc:	6938      	ldr	r0, [r7, #16]
 8011dce:	f7fd fc6c 	bl	800f6aa <tcp_seg_free>
            while (next &&
 8011dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d00e      	beq.n	8011df6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011dd8:	4b91      	ldr	r3, [pc, #580]	; (8012020 <tcp_receive+0xb04>)
 8011dda:	881b      	ldrh	r3, [r3, #0]
 8011ddc:	461a      	mov	r2, r3
 8011dde:	4b91      	ldr	r3, [pc, #580]	; (8012024 <tcp_receive+0xb08>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	441a      	add	r2, r3
 8011de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011dec:	8909      	ldrh	r1, [r1, #8]
 8011dee:	440b      	add	r3, r1
 8011df0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	da9a      	bge.n	8011d2c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d059      	beq.n	8011eb0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011dfc:	4b88      	ldr	r3, [pc, #544]	; (8012020 <tcp_receive+0xb04>)
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	461a      	mov	r2, r3
 8011e02:	4b88      	ldr	r3, [pc, #544]	; (8012024 <tcp_receive+0xb08>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	441a      	add	r2, r3
 8011e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	685b      	ldr	r3, [r3, #4]
 8011e0e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	dd4d      	ble.n	8011eb0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	4b81      	ldr	r3, [pc, #516]	; (8012024 <tcp_receive+0xb08>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	1ad3      	subs	r3, r2, r3
 8011e24:	b29a      	uxth	r2, r3
 8011e26:	4b80      	ldr	r3, [pc, #512]	; (8012028 <tcp_receive+0xb0c>)
 8011e28:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011e2a:	4b7f      	ldr	r3, [pc, #508]	; (8012028 <tcp_receive+0xb0c>)
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	899b      	ldrh	r3, [r3, #12]
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fa fc06 	bl	800c644 <lwip_htons>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	f003 0302 	and.w	r3, r3, #2
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d005      	beq.n	8011e50 <tcp_receive+0x934>
                inseg.len -= 1;
 8011e44:	4b78      	ldr	r3, [pc, #480]	; (8012028 <tcp_receive+0xb0c>)
 8011e46:	891b      	ldrh	r3, [r3, #8]
 8011e48:	3b01      	subs	r3, #1
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	4b76      	ldr	r3, [pc, #472]	; (8012028 <tcp_receive+0xb0c>)
 8011e4e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011e50:	4b75      	ldr	r3, [pc, #468]	; (8012028 <tcp_receive+0xb0c>)
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	4a74      	ldr	r2, [pc, #464]	; (8012028 <tcp_receive+0xb0c>)
 8011e56:	8912      	ldrh	r2, [r2, #8]
 8011e58:	4611      	mov	r1, r2
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fb fe24 	bl	800daa8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011e60:	4b71      	ldr	r3, [pc, #452]	; (8012028 <tcp_receive+0xb0c>)
 8011e62:	891c      	ldrh	r4, [r3, #8]
 8011e64:	4b70      	ldr	r3, [pc, #448]	; (8012028 <tcp_receive+0xb0c>)
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	899b      	ldrh	r3, [r3, #12]
 8011e6a:	b29b      	uxth	r3, r3
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7fa fbe9 	bl	800c644 <lwip_htons>
 8011e72:	4603      	mov	r3, r0
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	f003 0303 	and.w	r3, r3, #3
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d001      	beq.n	8011e82 <tcp_receive+0x966>
 8011e7e:	2301      	movs	r3, #1
 8011e80:	e000      	b.n	8011e84 <tcp_receive+0x968>
 8011e82:	2300      	movs	r3, #0
 8011e84:	4423      	add	r3, r4
 8011e86:	b29a      	uxth	r2, r3
 8011e88:	4b65      	ldr	r3, [pc, #404]	; (8012020 <tcp_receive+0xb04>)
 8011e8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011e8c:	4b64      	ldr	r3, [pc, #400]	; (8012020 <tcp_receive+0xb04>)
 8011e8e:	881b      	ldrh	r3, [r3, #0]
 8011e90:	461a      	mov	r2, r3
 8011e92:	4b64      	ldr	r3, [pc, #400]	; (8012024 <tcp_receive+0xb08>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	441a      	add	r2, r3
 8011e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d006      	beq.n	8011eb0 <tcp_receive+0x994>
 8011ea2:	4b62      	ldr	r3, [pc, #392]	; (801202c <tcp_receive+0xb10>)
 8011ea4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011ea8:	4961      	ldr	r1, [pc, #388]	; (8012030 <tcp_receive+0xb14>)
 8011eaa:	4862      	ldr	r0, [pc, #392]	; (8012034 <tcp_receive+0xb18>)
 8011eac:	f009 fd08 	bl	801b8c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011eb4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011eb6:	4b5a      	ldr	r3, [pc, #360]	; (8012020 <tcp_receive+0xb04>)
 8011eb8:	881b      	ldrh	r3, [r3, #0]
 8011eba:	461a      	mov	r2, r3
 8011ebc:	4b59      	ldr	r3, [pc, #356]	; (8012024 <tcp_receive+0xb08>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	441a      	add	r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011eca:	4b55      	ldr	r3, [pc, #340]	; (8012020 <tcp_receive+0xb04>)
 8011ecc:	881b      	ldrh	r3, [r3, #0]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d206      	bcs.n	8011ee0 <tcp_receive+0x9c4>
 8011ed2:	4b56      	ldr	r3, [pc, #344]	; (801202c <tcp_receive+0xb10>)
 8011ed4:	f240 6207 	movw	r2, #1543	; 0x607
 8011ed8:	4957      	ldr	r1, [pc, #348]	; (8012038 <tcp_receive+0xb1c>)
 8011eda:	4856      	ldr	r0, [pc, #344]	; (8012034 <tcp_receive+0xb18>)
 8011edc:	f009 fcf0 	bl	801b8c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ee4:	4b4e      	ldr	r3, [pc, #312]	; (8012020 <tcp_receive+0xb04>)
 8011ee6:	881b      	ldrh	r3, [r3, #0]
 8011ee8:	1ad3      	subs	r3, r2, r3
 8011eea:	b29a      	uxth	r2, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f7fc fd9d 	bl	800ea30 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011ef6:	4b4c      	ldr	r3, [pc, #304]	; (8012028 <tcp_receive+0xb0c>)
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	891b      	ldrh	r3, [r3, #8]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d006      	beq.n	8011f0e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011f00:	4b49      	ldr	r3, [pc, #292]	; (8012028 <tcp_receive+0xb0c>)
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	4a4d      	ldr	r2, [pc, #308]	; (801203c <tcp_receive+0xb20>)
 8011f06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011f08:	4b47      	ldr	r3, [pc, #284]	; (8012028 <tcp_receive+0xb0c>)
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f0e:	4b46      	ldr	r3, [pc, #280]	; (8012028 <tcp_receive+0xb0c>)
 8011f10:	68db      	ldr	r3, [r3, #12]
 8011f12:	899b      	ldrh	r3, [r3, #12]
 8011f14:	b29b      	uxth	r3, r3
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7fa fb94 	bl	800c644 <lwip_htons>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	f003 0301 	and.w	r3, r3, #1
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	f000 80b8 	beq.w	801209a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011f2a:	4b45      	ldr	r3, [pc, #276]	; (8012040 <tcp_receive+0xb24>)
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	f043 0320 	orr.w	r3, r3, #32
 8011f32:	b2da      	uxtb	r2, r3
 8011f34:	4b42      	ldr	r3, [pc, #264]	; (8012040 <tcp_receive+0xb24>)
 8011f36:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011f38:	e0af      	b.n	801209a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f3e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	4a36      	ldr	r2, [pc, #216]	; (8012024 <tcp_receive+0xb08>)
 8011f4a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	891b      	ldrh	r3, [r3, #8]
 8011f50:	461c      	mov	r4, r3
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	68db      	ldr	r3, [r3, #12]
 8011f56:	899b      	ldrh	r3, [r3, #12]
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7fa fb72 	bl	800c644 <lwip_htons>
 8011f60:	4603      	mov	r3, r0
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	f003 0303 	and.w	r3, r3, #3
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d001      	beq.n	8011f70 <tcp_receive+0xa54>
 8011f6c:	2301      	movs	r3, #1
 8011f6e:	e000      	b.n	8011f72 <tcp_receive+0xa56>
 8011f70:	2300      	movs	r3, #0
 8011f72:	191a      	adds	r2, r3, r4
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f78:	441a      	add	r2, r3
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f82:	461c      	mov	r4, r3
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	891b      	ldrh	r3, [r3, #8]
 8011f88:	461d      	mov	r5, r3
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	899b      	ldrh	r3, [r3, #12]
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7fa fb56 	bl	800c644 <lwip_htons>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	f003 0303 	and.w	r3, r3, #3
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d001      	beq.n	8011fa8 <tcp_receive+0xa8c>
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e000      	b.n	8011faa <tcp_receive+0xa8e>
 8011fa8:	2300      	movs	r3, #0
 8011faa:	442b      	add	r3, r5
 8011fac:	429c      	cmp	r4, r3
 8011fae:	d206      	bcs.n	8011fbe <tcp_receive+0xaa2>
 8011fb0:	4b1e      	ldr	r3, [pc, #120]	; (801202c <tcp_receive+0xb10>)
 8011fb2:	f240 622b 	movw	r2, #1579	; 0x62b
 8011fb6:	4923      	ldr	r1, [pc, #140]	; (8012044 <tcp_receive+0xb28>)
 8011fb8:	481e      	ldr	r0, [pc, #120]	; (8012034 <tcp_receive+0xb18>)
 8011fba:	f009 fc81 	bl	801b8c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	891b      	ldrh	r3, [r3, #8]
 8011fc2:	461c      	mov	r4, r3
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	899b      	ldrh	r3, [r3, #12]
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7fa fb39 	bl	800c644 <lwip_htons>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	f003 0303 	and.w	r3, r3, #3
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d001      	beq.n	8011fe2 <tcp_receive+0xac6>
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e000      	b.n	8011fe4 <tcp_receive+0xac8>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	1919      	adds	r1, r3, r4
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011fea:	b28b      	uxth	r3, r1
 8011fec:	1ad3      	subs	r3, r2, r3
 8011fee:	b29a      	uxth	r2, r3
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f7fc fd1b 	bl	800ea30 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	891b      	ldrh	r3, [r3, #8]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d028      	beq.n	8012056 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012004:	4b0d      	ldr	r3, [pc, #52]	; (801203c <tcp_receive+0xb20>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d01d      	beq.n	8012048 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801200c:	4b0b      	ldr	r3, [pc, #44]	; (801203c <tcp_receive+0xb20>)
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	4619      	mov	r1, r3
 8012016:	4610      	mov	r0, r2
 8012018:	f7fb ffcc 	bl	800dfb4 <pbuf_cat>
 801201c:	e018      	b.n	8012050 <tcp_receive+0xb34>
 801201e:	bf00      	nop
 8012020:	20008b0e 	.word	0x20008b0e
 8012024:	20008b04 	.word	0x20008b04
 8012028:	20008ae4 	.word	0x20008ae4
 801202c:	0801ed94 	.word	0x0801ed94
 8012030:	0801f174 	.word	0x0801f174
 8012034:	0801ede0 	.word	0x0801ede0
 8012038:	0801f1b0 	.word	0x0801f1b0
 801203c:	20008b14 	.word	0x20008b14
 8012040:	20008b11 	.word	0x20008b11
 8012044:	0801f1d0 	.word	0x0801f1d0
            } else {
              recv_data = cseg->p;
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	4a70      	ldr	r2, [pc, #448]	; (8012210 <tcp_receive+0xcf4>)
 801204e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	2200      	movs	r2, #0
 8012054:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	68db      	ldr	r3, [r3, #12]
 801205a:	899b      	ldrh	r3, [r3, #12]
 801205c:	b29b      	uxth	r3, r3
 801205e:	4618      	mov	r0, r3
 8012060:	f7fa faf0 	bl	800c644 <lwip_htons>
 8012064:	4603      	mov	r3, r0
 8012066:	b2db      	uxtb	r3, r3
 8012068:	f003 0301 	and.w	r3, r3, #1
 801206c:	2b00      	cmp	r3, #0
 801206e:	d00d      	beq.n	801208c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012070:	4b68      	ldr	r3, [pc, #416]	; (8012214 <tcp_receive+0xcf8>)
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	f043 0320 	orr.w	r3, r3, #32
 8012078:	b2da      	uxtb	r2, r3
 801207a:	4b66      	ldr	r3, [pc, #408]	; (8012214 <tcp_receive+0xcf8>)
 801207c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	7d1b      	ldrb	r3, [r3, #20]
 8012082:	2b04      	cmp	r3, #4
 8012084:	d102      	bne.n	801208c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2207      	movs	r2, #7
 801208a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801208c:	68bb      	ldr	r3, [r7, #8]
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012094:	68b8      	ldr	r0, [r7, #8]
 8012096:	f7fd fb08 	bl	800f6aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d008      	beq.n	80120b4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120a6:	68db      	ldr	r3, [r3, #12]
 80120a8:	685a      	ldr	r2, [r3, #4]
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80120ae:	429a      	cmp	r2, r3
 80120b0:	f43f af43 	beq.w	8011f3a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	8b5b      	ldrh	r3, [r3, #26]
 80120b8:	f003 0301 	and.w	r3, r3, #1
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00e      	beq.n	80120de <tcp_receive+0xbc2>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	8b5b      	ldrh	r3, [r3, #26]
 80120c4:	f023 0301 	bic.w	r3, r3, #1
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	835a      	strh	r2, [r3, #26]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	8b5b      	ldrh	r3, [r3, #26]
 80120d2:	f043 0302 	orr.w	r3, r3, #2
 80120d6:	b29a      	uxth	r2, r3
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80120dc:	e188      	b.n	80123f0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	8b5b      	ldrh	r3, [r3, #26]
 80120e2:	f043 0301 	orr.w	r3, r3, #1
 80120e6:	b29a      	uxth	r2, r3
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80120ec:	e180      	b.n	80123f0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d106      	bne.n	8012104 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80120f6:	4848      	ldr	r0, [pc, #288]	; (8012218 <tcp_receive+0xcfc>)
 80120f8:	f7fd faf0 	bl	800f6dc <tcp_seg_copy>
 80120fc:	4602      	mov	r2, r0
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	675a      	str	r2, [r3, #116]	; 0x74
 8012102:	e16d      	b.n	80123e0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012104:	2300      	movs	r3, #0
 8012106:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801210c:	63bb      	str	r3, [r7, #56]	; 0x38
 801210e:	e157      	b.n	80123c0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012112:	68db      	ldr	r3, [r3, #12]
 8012114:	685a      	ldr	r2, [r3, #4]
 8012116:	4b41      	ldr	r3, [pc, #260]	; (801221c <tcp_receive+0xd00>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	429a      	cmp	r2, r3
 801211c:	d11d      	bne.n	801215a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801211e:	4b3e      	ldr	r3, [pc, #248]	; (8012218 <tcp_receive+0xcfc>)
 8012120:	891a      	ldrh	r2, [r3, #8]
 8012122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012124:	891b      	ldrh	r3, [r3, #8]
 8012126:	429a      	cmp	r2, r3
 8012128:	f240 814f 	bls.w	80123ca <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801212c:	483a      	ldr	r0, [pc, #232]	; (8012218 <tcp_receive+0xcfc>)
 801212e:	f7fd fad5 	bl	800f6dc <tcp_seg_copy>
 8012132:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	2b00      	cmp	r3, #0
 8012138:	f000 8149 	beq.w	80123ce <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801213e:	2b00      	cmp	r3, #0
 8012140:	d003      	beq.n	801214a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012144:	697a      	ldr	r2, [r7, #20]
 8012146:	601a      	str	r2, [r3, #0]
 8012148:	e002      	b.n	8012150 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	697a      	ldr	r2, [r7, #20]
 801214e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012152:	6978      	ldr	r0, [r7, #20]
 8012154:	f7ff f8de 	bl	8011314 <tcp_oos_insert_segment>
                }
                break;
 8012158:	e139      	b.n	80123ce <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801215a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801215c:	2b00      	cmp	r3, #0
 801215e:	d117      	bne.n	8012190 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012160:	4b2e      	ldr	r3, [pc, #184]	; (801221c <tcp_receive+0xd00>)
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012166:	68db      	ldr	r3, [r3, #12]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	1ad3      	subs	r3, r2, r3
 801216c:	2b00      	cmp	r3, #0
 801216e:	da57      	bge.n	8012220 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012170:	4829      	ldr	r0, [pc, #164]	; (8012218 <tcp_receive+0xcfc>)
 8012172:	f7fd fab3 	bl	800f6dc <tcp_seg_copy>
 8012176:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012178:	69bb      	ldr	r3, [r7, #24]
 801217a:	2b00      	cmp	r3, #0
 801217c:	f000 8129 	beq.w	80123d2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	69ba      	ldr	r2, [r7, #24]
 8012184:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012186:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012188:	69b8      	ldr	r0, [r7, #24]
 801218a:	f7ff f8c3 	bl	8011314 <tcp_oos_insert_segment>
                  }
                  break;
 801218e:	e120      	b.n	80123d2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012190:	4b22      	ldr	r3, [pc, #136]	; (801221c <tcp_receive+0xd00>)
 8012192:	681a      	ldr	r2, [r3, #0]
 8012194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	3b01      	subs	r3, #1
 801219e:	2b00      	cmp	r3, #0
 80121a0:	db3e      	blt.n	8012220 <tcp_receive+0xd04>
 80121a2:	4b1e      	ldr	r3, [pc, #120]	; (801221c <tcp_receive+0xd00>)
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a8:	68db      	ldr	r3, [r3, #12]
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	1ad3      	subs	r3, r2, r3
 80121ae:	3301      	adds	r3, #1
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	dc35      	bgt.n	8012220 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80121b4:	4818      	ldr	r0, [pc, #96]	; (8012218 <tcp_receive+0xcfc>)
 80121b6:	f7fd fa91 	bl	800f6dc <tcp_seg_copy>
 80121ba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	f000 8109 	beq.w	80123d6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80121c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c6:	68db      	ldr	r3, [r3, #12]
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121cc:	8912      	ldrh	r2, [r2, #8]
 80121ce:	441a      	add	r2, r3
 80121d0:	4b12      	ldr	r3, [pc, #72]	; (801221c <tcp_receive+0xd00>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	1ad3      	subs	r3, r2, r3
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	dd12      	ble.n	8012200 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80121da:	4b10      	ldr	r3, [pc, #64]	; (801221c <tcp_receive+0xd00>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	b29a      	uxth	r2, r3
 80121e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e2:	68db      	ldr	r3, [r3, #12]
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	1ad3      	subs	r3, r2, r3
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80121f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f2:	685a      	ldr	r2, [r3, #4]
 80121f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f6:	891b      	ldrh	r3, [r3, #8]
 80121f8:	4619      	mov	r1, r3
 80121fa:	4610      	mov	r0, r2
 80121fc:	f7fb fc54 	bl	800daa8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012202:	69fa      	ldr	r2, [r7, #28]
 8012204:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012208:	69f8      	ldr	r0, [r7, #28]
 801220a:	f7ff f883 	bl	8011314 <tcp_oos_insert_segment>
                  }
                  break;
 801220e:	e0e2      	b.n	80123d6 <tcp_receive+0xeba>
 8012210:	20008b14 	.word	0x20008b14
 8012214:	20008b11 	.word	0x20008b11
 8012218:	20008ae4 	.word	0x20008ae4
 801221c:	20008b04 	.word	0x20008b04
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012222:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	f040 80c6 	bne.w	80123ba <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801222e:	4b80      	ldr	r3, [pc, #512]	; (8012430 <tcp_receive+0xf14>)
 8012230:	681a      	ldr	r2, [r3, #0]
 8012232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012234:	68db      	ldr	r3, [r3, #12]
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801223a:	2b00      	cmp	r3, #0
 801223c:	f340 80bd 	ble.w	80123ba <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012242:	68db      	ldr	r3, [r3, #12]
 8012244:	899b      	ldrh	r3, [r3, #12]
 8012246:	b29b      	uxth	r3, r3
 8012248:	4618      	mov	r0, r3
 801224a:	f7fa f9fb 	bl	800c644 <lwip_htons>
 801224e:	4603      	mov	r3, r0
 8012250:	b2db      	uxtb	r3, r3
 8012252:	f003 0301 	and.w	r3, r3, #1
 8012256:	2b00      	cmp	r3, #0
 8012258:	f040 80bf 	bne.w	80123da <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801225c:	4875      	ldr	r0, [pc, #468]	; (8012434 <tcp_receive+0xf18>)
 801225e:	f7fd fa3d 	bl	800f6dc <tcp_seg_copy>
 8012262:	4602      	mov	r2, r0
 8012264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012266:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	f000 80b6 	beq.w	80123de <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801227a:	8912      	ldrh	r2, [r2, #8]
 801227c:	441a      	add	r2, r3
 801227e:	4b6c      	ldr	r3, [pc, #432]	; (8012430 <tcp_receive+0xf14>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	1ad3      	subs	r3, r2, r3
 8012284:	2b00      	cmp	r3, #0
 8012286:	dd12      	ble.n	80122ae <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012288:	4b69      	ldr	r3, [pc, #420]	; (8012430 <tcp_receive+0xf14>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	b29a      	uxth	r2, r3
 801228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012290:	68db      	ldr	r3, [r3, #12]
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	b29b      	uxth	r3, r3
 8012296:	1ad3      	subs	r3, r2, r3
 8012298:	b29a      	uxth	r2, r3
 801229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801229c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a0:	685a      	ldr	r2, [r3, #4]
 80122a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a4:	891b      	ldrh	r3, [r3, #8]
 80122a6:	4619      	mov	r1, r3
 80122a8:	4610      	mov	r0, r2
 80122aa:	f7fb fbfd 	bl	800daa8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80122ae:	4b62      	ldr	r3, [pc, #392]	; (8012438 <tcp_receive+0xf1c>)
 80122b0:	881b      	ldrh	r3, [r3, #0]
 80122b2:	461a      	mov	r2, r3
 80122b4:	4b5e      	ldr	r3, [pc, #376]	; (8012430 <tcp_receive+0xf14>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	441a      	add	r2, r3
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122be:	6879      	ldr	r1, [r7, #4]
 80122c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80122c2:	440b      	add	r3, r1
 80122c4:	1ad3      	subs	r3, r2, r3
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	f340 8089 	ble.w	80123de <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80122cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	68db      	ldr	r3, [r3, #12]
 80122d2:	899b      	ldrh	r3, [r3, #12]
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7fa f9b4 	bl	800c644 <lwip_htons>
 80122dc:	4603      	mov	r3, r0
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	f003 0301 	and.w	r3, r3, #1
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d022      	beq.n	801232e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80122e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	68db      	ldr	r3, [r3, #12]
 80122ee:	899b      	ldrh	r3, [r3, #12]
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	b21b      	sxth	r3, r3
 80122f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80122f8:	b21c      	sxth	r4, r3
 80122fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	899b      	ldrh	r3, [r3, #12]
 8012302:	b29b      	uxth	r3, r3
 8012304:	4618      	mov	r0, r3
 8012306:	f7fa f99d 	bl	800c644 <lwip_htons>
 801230a:	4603      	mov	r3, r0
 801230c:	b2db      	uxtb	r3, r3
 801230e:	b29b      	uxth	r3, r3
 8012310:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012314:	b29b      	uxth	r3, r3
 8012316:	4618      	mov	r0, r3
 8012318:	f7fa f994 	bl	800c644 <lwip_htons>
 801231c:	4603      	mov	r3, r0
 801231e:	b21b      	sxth	r3, r3
 8012320:	4323      	orrs	r3, r4
 8012322:	b21a      	sxth	r2, r3
 8012324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	68db      	ldr	r3, [r3, #12]
 801232a:	b292      	uxth	r2, r2
 801232c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012332:	b29a      	uxth	r2, r3
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012338:	4413      	add	r3, r2
 801233a:	b299      	uxth	r1, r3
 801233c:	4b3c      	ldr	r3, [pc, #240]	; (8012430 <tcp_receive+0xf14>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	b29a      	uxth	r2, r3
 8012342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	1a8a      	subs	r2, r1, r2
 8012348:	b292      	uxth	r2, r2
 801234a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	685a      	ldr	r2, [r3, #4]
 8012352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	891b      	ldrh	r3, [r3, #8]
 8012358:	4619      	mov	r1, r3
 801235a:	4610      	mov	r0, r2
 801235c:	f7fb fba4 	bl	800daa8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	891c      	ldrh	r4, [r3, #8]
 8012366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	68db      	ldr	r3, [r3, #12]
 801236c:	899b      	ldrh	r3, [r3, #12]
 801236e:	b29b      	uxth	r3, r3
 8012370:	4618      	mov	r0, r3
 8012372:	f7fa f967 	bl	800c644 <lwip_htons>
 8012376:	4603      	mov	r3, r0
 8012378:	b2db      	uxtb	r3, r3
 801237a:	f003 0303 	and.w	r3, r3, #3
 801237e:	2b00      	cmp	r3, #0
 8012380:	d001      	beq.n	8012386 <tcp_receive+0xe6a>
 8012382:	2301      	movs	r3, #1
 8012384:	e000      	b.n	8012388 <tcp_receive+0xe6c>
 8012386:	2300      	movs	r3, #0
 8012388:	4423      	add	r3, r4
 801238a:	b29a      	uxth	r2, r3
 801238c:	4b2a      	ldr	r3, [pc, #168]	; (8012438 <tcp_receive+0xf1c>)
 801238e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012390:	4b29      	ldr	r3, [pc, #164]	; (8012438 <tcp_receive+0xf1c>)
 8012392:	881b      	ldrh	r3, [r3, #0]
 8012394:	461a      	mov	r2, r3
 8012396:	4b26      	ldr	r3, [pc, #152]	; (8012430 <tcp_receive+0xf14>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	441a      	add	r2, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123a0:	6879      	ldr	r1, [r7, #4]
 80123a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123a4:	440b      	add	r3, r1
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d019      	beq.n	80123de <tcp_receive+0xec2>
 80123aa:	4b24      	ldr	r3, [pc, #144]	; (801243c <tcp_receive+0xf20>)
 80123ac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80123b0:	4923      	ldr	r1, [pc, #140]	; (8012440 <tcp_receive+0xf24>)
 80123b2:	4824      	ldr	r0, [pc, #144]	; (8012444 <tcp_receive+0xf28>)
 80123b4:	f009 fa84 	bl	801b8c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80123b8:	e011      	b.n	80123de <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80123ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	63bb      	str	r3, [r7, #56]	; 0x38
 80123c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	f47f aea4 	bne.w	8012110 <tcp_receive+0xbf4>
 80123c8:	e00a      	b.n	80123e0 <tcp_receive+0xec4>
                break;
 80123ca:	bf00      	nop
 80123cc:	e008      	b.n	80123e0 <tcp_receive+0xec4>
                break;
 80123ce:	bf00      	nop
 80123d0:	e006      	b.n	80123e0 <tcp_receive+0xec4>
                  break;
 80123d2:	bf00      	nop
 80123d4:	e004      	b.n	80123e0 <tcp_receive+0xec4>
                  break;
 80123d6:	bf00      	nop
 80123d8:	e002      	b.n	80123e0 <tcp_receive+0xec4>
                  break;
 80123da:	bf00      	nop
 80123dc:	e000      	b.n	80123e0 <tcp_receive+0xec4>
                break;
 80123de:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f001 fe8b 	bl	80140fc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80123e6:	e003      	b.n	80123f0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f001 fe87 	bl	80140fc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80123ee:	e01a      	b.n	8012426 <tcp_receive+0xf0a>
 80123f0:	e019      	b.n	8012426 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80123f2:	4b0f      	ldr	r3, [pc, #60]	; (8012430 <tcp_receive+0xf14>)
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123fa:	1ad3      	subs	r3, r2, r3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	db0a      	blt.n	8012416 <tcp_receive+0xefa>
 8012400:	4b0b      	ldr	r3, [pc, #44]	; (8012430 <tcp_receive+0xf14>)
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012408:	6879      	ldr	r1, [r7, #4]
 801240a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801240c:	440b      	add	r3, r1
 801240e:	1ad3      	subs	r3, r2, r3
 8012410:	3301      	adds	r3, #1
 8012412:	2b00      	cmp	r3, #0
 8012414:	dd07      	ble.n	8012426 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	8b5b      	ldrh	r3, [r3, #26]
 801241a:	f043 0302 	orr.w	r3, r3, #2
 801241e:	b29a      	uxth	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012424:	e7ff      	b.n	8012426 <tcp_receive+0xf0a>
 8012426:	bf00      	nop
 8012428:	3750      	adds	r7, #80	; 0x50
 801242a:	46bd      	mov	sp, r7
 801242c:	bdb0      	pop	{r4, r5, r7, pc}
 801242e:	bf00      	nop
 8012430:	20008b04 	.word	0x20008b04
 8012434:	20008ae4 	.word	0x20008ae4
 8012438:	20008b0e 	.word	0x20008b0e
 801243c:	0801ed94 	.word	0x0801ed94
 8012440:	0801f13c 	.word	0x0801f13c
 8012444:	0801ede0 	.word	0x0801ede0

08012448 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012448:	b480      	push	{r7}
 801244a:	b083      	sub	sp, #12
 801244c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801244e:	4b15      	ldr	r3, [pc, #84]	; (80124a4 <tcp_get_next_optbyte+0x5c>)
 8012450:	881b      	ldrh	r3, [r3, #0]
 8012452:	1c5a      	adds	r2, r3, #1
 8012454:	b291      	uxth	r1, r2
 8012456:	4a13      	ldr	r2, [pc, #76]	; (80124a4 <tcp_get_next_optbyte+0x5c>)
 8012458:	8011      	strh	r1, [r2, #0]
 801245a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801245c:	4b12      	ldr	r3, [pc, #72]	; (80124a8 <tcp_get_next_optbyte+0x60>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d004      	beq.n	801246e <tcp_get_next_optbyte+0x26>
 8012464:	4b11      	ldr	r3, [pc, #68]	; (80124ac <tcp_get_next_optbyte+0x64>)
 8012466:	881b      	ldrh	r3, [r3, #0]
 8012468:	88fa      	ldrh	r2, [r7, #6]
 801246a:	429a      	cmp	r2, r3
 801246c:	d208      	bcs.n	8012480 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801246e:	4b10      	ldr	r3, [pc, #64]	; (80124b0 <tcp_get_next_optbyte+0x68>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	3314      	adds	r3, #20
 8012474:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012476:	88fb      	ldrh	r3, [r7, #6]
 8012478:	683a      	ldr	r2, [r7, #0]
 801247a:	4413      	add	r3, r2
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	e00b      	b.n	8012498 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012480:	88fb      	ldrh	r3, [r7, #6]
 8012482:	b2da      	uxtb	r2, r3
 8012484:	4b09      	ldr	r3, [pc, #36]	; (80124ac <tcp_get_next_optbyte+0x64>)
 8012486:	881b      	ldrh	r3, [r3, #0]
 8012488:	b2db      	uxtb	r3, r3
 801248a:	1ad3      	subs	r3, r2, r3
 801248c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801248e:	4b06      	ldr	r3, [pc, #24]	; (80124a8 <tcp_get_next_optbyte+0x60>)
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	797b      	ldrb	r3, [r7, #5]
 8012494:	4413      	add	r3, r2
 8012496:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012498:	4618      	mov	r0, r3
 801249a:	370c      	adds	r7, #12
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr
 80124a4:	20008b00 	.word	0x20008b00
 80124a8:	20008afc 	.word	0x20008afc
 80124ac:	20008afa 	.word	0x20008afa
 80124b0:	20008af4 	.word	0x20008af4

080124b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b084      	sub	sp, #16
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <tcp_parseopt+0x1c>
 80124c2:	4b32      	ldr	r3, [pc, #200]	; (801258c <tcp_parseopt+0xd8>)
 80124c4:	f240 727d 	movw	r2, #1917	; 0x77d
 80124c8:	4931      	ldr	r1, [pc, #196]	; (8012590 <tcp_parseopt+0xdc>)
 80124ca:	4832      	ldr	r0, [pc, #200]	; (8012594 <tcp_parseopt+0xe0>)
 80124cc:	f009 f9f8 	bl	801b8c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80124d0:	4b31      	ldr	r3, [pc, #196]	; (8012598 <tcp_parseopt+0xe4>)
 80124d2:	881b      	ldrh	r3, [r3, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d055      	beq.n	8012584 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80124d8:	4b30      	ldr	r3, [pc, #192]	; (801259c <tcp_parseopt+0xe8>)
 80124da:	2200      	movs	r2, #0
 80124dc:	801a      	strh	r2, [r3, #0]
 80124de:	e045      	b.n	801256c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80124e0:	f7ff ffb2 	bl	8012448 <tcp_get_next_optbyte>
 80124e4:	4603      	mov	r3, r0
 80124e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80124e8:	7bfb      	ldrb	r3, [r7, #15]
 80124ea:	2b02      	cmp	r3, #2
 80124ec:	d006      	beq.n	80124fc <tcp_parseopt+0x48>
 80124ee:	2b02      	cmp	r3, #2
 80124f0:	dc2b      	bgt.n	801254a <tcp_parseopt+0x96>
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d041      	beq.n	801257a <tcp_parseopt+0xc6>
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d127      	bne.n	801254a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80124fa:	e037      	b.n	801256c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80124fc:	f7ff ffa4 	bl	8012448 <tcp_get_next_optbyte>
 8012500:	4603      	mov	r3, r0
 8012502:	2b04      	cmp	r3, #4
 8012504:	d13b      	bne.n	801257e <tcp_parseopt+0xca>
 8012506:	4b25      	ldr	r3, [pc, #148]	; (801259c <tcp_parseopt+0xe8>)
 8012508:	881b      	ldrh	r3, [r3, #0]
 801250a:	3301      	adds	r3, #1
 801250c:	4a22      	ldr	r2, [pc, #136]	; (8012598 <tcp_parseopt+0xe4>)
 801250e:	8812      	ldrh	r2, [r2, #0]
 8012510:	4293      	cmp	r3, r2
 8012512:	da34      	bge.n	801257e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012514:	f7ff ff98 	bl	8012448 <tcp_get_next_optbyte>
 8012518:	4603      	mov	r3, r0
 801251a:	b29b      	uxth	r3, r3
 801251c:	021b      	lsls	r3, r3, #8
 801251e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012520:	f7ff ff92 	bl	8012448 <tcp_get_next_optbyte>
 8012524:	4603      	mov	r3, r0
 8012526:	b29a      	uxth	r2, r3
 8012528:	89bb      	ldrh	r3, [r7, #12]
 801252a:	4313      	orrs	r3, r2
 801252c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801252e:	89bb      	ldrh	r3, [r7, #12]
 8012530:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012534:	d804      	bhi.n	8012540 <tcp_parseopt+0x8c>
 8012536:	89bb      	ldrh	r3, [r7, #12]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d001      	beq.n	8012540 <tcp_parseopt+0x8c>
 801253c:	89ba      	ldrh	r2, [r7, #12]
 801253e:	e001      	b.n	8012544 <tcp_parseopt+0x90>
 8012540:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012548:	e010      	b.n	801256c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801254a:	f7ff ff7d 	bl	8012448 <tcp_get_next_optbyte>
 801254e:	4603      	mov	r3, r0
 8012550:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012552:	7afb      	ldrb	r3, [r7, #11]
 8012554:	2b01      	cmp	r3, #1
 8012556:	d914      	bls.n	8012582 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012558:	7afb      	ldrb	r3, [r7, #11]
 801255a:	b29a      	uxth	r2, r3
 801255c:	4b0f      	ldr	r3, [pc, #60]	; (801259c <tcp_parseopt+0xe8>)
 801255e:	881b      	ldrh	r3, [r3, #0]
 8012560:	4413      	add	r3, r2
 8012562:	b29b      	uxth	r3, r3
 8012564:	3b02      	subs	r3, #2
 8012566:	b29a      	uxth	r2, r3
 8012568:	4b0c      	ldr	r3, [pc, #48]	; (801259c <tcp_parseopt+0xe8>)
 801256a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801256c:	4b0b      	ldr	r3, [pc, #44]	; (801259c <tcp_parseopt+0xe8>)
 801256e:	881a      	ldrh	r2, [r3, #0]
 8012570:	4b09      	ldr	r3, [pc, #36]	; (8012598 <tcp_parseopt+0xe4>)
 8012572:	881b      	ldrh	r3, [r3, #0]
 8012574:	429a      	cmp	r2, r3
 8012576:	d3b3      	bcc.n	80124e0 <tcp_parseopt+0x2c>
 8012578:	e004      	b.n	8012584 <tcp_parseopt+0xd0>
          return;
 801257a:	bf00      	nop
 801257c:	e002      	b.n	8012584 <tcp_parseopt+0xd0>
            return;
 801257e:	bf00      	nop
 8012580:	e000      	b.n	8012584 <tcp_parseopt+0xd0>
            return;
 8012582:	bf00      	nop
      }
    }
  }
}
 8012584:	3710      	adds	r7, #16
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	0801ed94 	.word	0x0801ed94
 8012590:	0801f1f8 	.word	0x0801f1f8
 8012594:	0801ede0 	.word	0x0801ede0
 8012598:	20008af8 	.word	0x20008af8
 801259c:	20008b00 	.word	0x20008b00

080125a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80125a0:	b480      	push	{r7}
 80125a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80125a4:	4b05      	ldr	r3, [pc, #20]	; (80125bc <tcp_trigger_input_pcb_close+0x1c>)
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	f043 0310 	orr.w	r3, r3, #16
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	4b03      	ldr	r3, [pc, #12]	; (80125bc <tcp_trigger_input_pcb_close+0x1c>)
 80125b0:	701a      	strb	r2, [r3, #0]
}
 80125b2:	bf00      	nop
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr
 80125bc:	20008b11 	.word	0x20008b11

080125c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b084      	sub	sp, #16
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d00a      	beq.n	80125e8 <tcp_route+0x28>
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	7a1b      	ldrb	r3, [r3, #8]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d006      	beq.n	80125e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	7a1b      	ldrb	r3, [r3, #8]
 80125de:	4618      	mov	r0, r3
 80125e0:	f7fb f85a 	bl	800d698 <netif_get_by_index>
 80125e4:	4603      	mov	r3, r0
 80125e6:	e003      	b.n	80125f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f005 fd63 	bl	80180b4 <ip4_route>
 80125ee:	4603      	mov	r3, r0
  }
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	3710      	adds	r7, #16
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80125f8:	b590      	push	{r4, r7, lr}
 80125fa:	b087      	sub	sp, #28
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	603b      	str	r3, [r7, #0]
 8012604:	4613      	mov	r3, r2
 8012606:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d105      	bne.n	801261a <tcp_create_segment+0x22>
 801260e:	4b44      	ldr	r3, [pc, #272]	; (8012720 <tcp_create_segment+0x128>)
 8012610:	22a3      	movs	r2, #163	; 0xa3
 8012612:	4944      	ldr	r1, [pc, #272]	; (8012724 <tcp_create_segment+0x12c>)
 8012614:	4844      	ldr	r0, [pc, #272]	; (8012728 <tcp_create_segment+0x130>)
 8012616:	f009 f953 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d105      	bne.n	801262c <tcp_create_segment+0x34>
 8012620:	4b3f      	ldr	r3, [pc, #252]	; (8012720 <tcp_create_segment+0x128>)
 8012622:	22a4      	movs	r2, #164	; 0xa4
 8012624:	4941      	ldr	r1, [pc, #260]	; (801272c <tcp_create_segment+0x134>)
 8012626:	4840      	ldr	r0, [pc, #256]	; (8012728 <tcp_create_segment+0x130>)
 8012628:	f009 f94a 	bl	801b8c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801262c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012630:	009b      	lsls	r3, r3, #2
 8012632:	b2db      	uxtb	r3, r3
 8012634:	f003 0304 	and.w	r3, r3, #4
 8012638:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801263a:	2003      	movs	r0, #3
 801263c:	f7fa fcb8 	bl	800cfb0 <memp_malloc>
 8012640:	6138      	str	r0, [r7, #16]
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d104      	bne.n	8012652 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012648:	68b8      	ldr	r0, [r7, #8]
 801264a:	f7fb fbe5 	bl	800de18 <pbuf_free>
    return NULL;
 801264e:	2300      	movs	r3, #0
 8012650:	e061      	b.n	8012716 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012658:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	2200      	movs	r2, #0
 801265e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	68ba      	ldr	r2, [r7, #8]
 8012664:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	891a      	ldrh	r2, [r3, #8]
 801266a:	7dfb      	ldrb	r3, [r7, #23]
 801266c:	b29b      	uxth	r3, r3
 801266e:	429a      	cmp	r2, r3
 8012670:	d205      	bcs.n	801267e <tcp_create_segment+0x86>
 8012672:	4b2b      	ldr	r3, [pc, #172]	; (8012720 <tcp_create_segment+0x128>)
 8012674:	22b0      	movs	r2, #176	; 0xb0
 8012676:	492e      	ldr	r1, [pc, #184]	; (8012730 <tcp_create_segment+0x138>)
 8012678:	482b      	ldr	r0, [pc, #172]	; (8012728 <tcp_create_segment+0x130>)
 801267a:	f009 f921 	bl	801b8c0 <iprintf>
  seg->len = p->tot_len - optlen;
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	891a      	ldrh	r2, [r3, #8]
 8012682:	7dfb      	ldrb	r3, [r7, #23]
 8012684:	b29b      	uxth	r3, r3
 8012686:	1ad3      	subs	r3, r2, r3
 8012688:	b29a      	uxth	r2, r3
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801268e:	2114      	movs	r1, #20
 8012690:	68b8      	ldr	r0, [r7, #8]
 8012692:	f7fb faf9 	bl	800dc88 <pbuf_add_header>
 8012696:	4603      	mov	r3, r0
 8012698:	2b00      	cmp	r3, #0
 801269a:	d004      	beq.n	80126a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801269c:	6938      	ldr	r0, [r7, #16]
 801269e:	f7fd f804 	bl	800f6aa <tcp_seg_free>
    return NULL;
 80126a2:	2300      	movs	r3, #0
 80126a4:	e037      	b.n	8012716 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	685a      	ldr	r2, [r3, #4]
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	8ada      	ldrh	r2, [r3, #22]
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	68dc      	ldr	r4, [r3, #12]
 80126b8:	4610      	mov	r0, r2
 80126ba:	f7f9 ffc3 	bl	800c644 <lwip_htons>
 80126be:	4603      	mov	r3, r0
 80126c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	8b1a      	ldrh	r2, [r3, #24]
 80126c6:	693b      	ldr	r3, [r7, #16]
 80126c8:	68dc      	ldr	r4, [r3, #12]
 80126ca:	4610      	mov	r0, r2
 80126cc:	f7f9 ffba 	bl	800c644 <lwip_htons>
 80126d0:	4603      	mov	r3, r0
 80126d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	68dc      	ldr	r4, [r3, #12]
 80126d8:	6838      	ldr	r0, [r7, #0]
 80126da:	f7f9 ffc8 	bl	800c66e <lwip_htonl>
 80126de:	4603      	mov	r3, r0
 80126e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80126e2:	7dfb      	ldrb	r3, [r7, #23]
 80126e4:	089b      	lsrs	r3, r3, #2
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	3305      	adds	r3, #5
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	031b      	lsls	r3, r3, #12
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	79fb      	ldrb	r3, [r7, #7]
 80126f4:	b29b      	uxth	r3, r3
 80126f6:	4313      	orrs	r3, r2
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	68dc      	ldr	r4, [r3, #12]
 80126fe:	4610      	mov	r0, r2
 8012700:	f7f9 ffa0 	bl	800c644 <lwip_htons>
 8012704:	4603      	mov	r3, r0
 8012706:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	68db      	ldr	r3, [r3, #12]
 801270c:	2200      	movs	r2, #0
 801270e:	749a      	strb	r2, [r3, #18]
 8012710:	2200      	movs	r2, #0
 8012712:	74da      	strb	r2, [r3, #19]
  return seg;
 8012714:	693b      	ldr	r3, [r7, #16]
}
 8012716:	4618      	mov	r0, r3
 8012718:	371c      	adds	r7, #28
 801271a:	46bd      	mov	sp, r7
 801271c:	bd90      	pop	{r4, r7, pc}
 801271e:	bf00      	nop
 8012720:	0801f214 	.word	0x0801f214
 8012724:	0801f248 	.word	0x0801f248
 8012728:	0801f268 	.word	0x0801f268
 801272c:	0801f290 	.word	0x0801f290
 8012730:	0801f2b4 	.word	0x0801f2b4

08012734 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b086      	sub	sp, #24
 8012738:	af00      	add	r7, sp, #0
 801273a:	607b      	str	r3, [r7, #4]
 801273c:	4603      	mov	r3, r0
 801273e:	73fb      	strb	r3, [r7, #15]
 8012740:	460b      	mov	r3, r1
 8012742:	81bb      	strh	r3, [r7, #12]
 8012744:	4613      	mov	r3, r2
 8012746:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012748:	89bb      	ldrh	r3, [r7, #12]
 801274a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d105      	bne.n	801275e <tcp_pbuf_prealloc+0x2a>
 8012752:	4b30      	ldr	r3, [pc, #192]	; (8012814 <tcp_pbuf_prealloc+0xe0>)
 8012754:	22e8      	movs	r2, #232	; 0xe8
 8012756:	4930      	ldr	r1, [pc, #192]	; (8012818 <tcp_pbuf_prealloc+0xe4>)
 8012758:	4830      	ldr	r0, [pc, #192]	; (801281c <tcp_pbuf_prealloc+0xe8>)
 801275a:	f009 f8b1 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801275e:	6a3b      	ldr	r3, [r7, #32]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d105      	bne.n	8012770 <tcp_pbuf_prealloc+0x3c>
 8012764:	4b2b      	ldr	r3, [pc, #172]	; (8012814 <tcp_pbuf_prealloc+0xe0>)
 8012766:	22e9      	movs	r2, #233	; 0xe9
 8012768:	492d      	ldr	r1, [pc, #180]	; (8012820 <tcp_pbuf_prealloc+0xec>)
 801276a:	482c      	ldr	r0, [pc, #176]	; (801281c <tcp_pbuf_prealloc+0xe8>)
 801276c:	f009 f8a8 	bl	801b8c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012770:	89ba      	ldrh	r2, [r7, #12]
 8012772:	897b      	ldrh	r3, [r7, #10]
 8012774:	429a      	cmp	r2, r3
 8012776:	d221      	bcs.n	80127bc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012778:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801277c:	f003 0302 	and.w	r3, r3, #2
 8012780:	2b00      	cmp	r3, #0
 8012782:	d111      	bne.n	80127a8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012784:	6a3b      	ldr	r3, [r7, #32]
 8012786:	8b5b      	ldrh	r3, [r3, #26]
 8012788:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801278c:	2b00      	cmp	r3, #0
 801278e:	d115      	bne.n	80127bc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012790:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012794:	2b00      	cmp	r3, #0
 8012796:	d007      	beq.n	80127a8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012798:	6a3b      	ldr	r3, [r7, #32]
 801279a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801279c:	2b00      	cmp	r3, #0
 801279e:	d103      	bne.n	80127a8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80127a0:	6a3b      	ldr	r3, [r7, #32]
 80127a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d009      	beq.n	80127bc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80127a8:	89bb      	ldrh	r3, [r7, #12]
 80127aa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80127ae:	f023 0203 	bic.w	r2, r3, #3
 80127b2:	897b      	ldrh	r3, [r7, #10]
 80127b4:	4293      	cmp	r3, r2
 80127b6:	bf28      	it	cs
 80127b8:	4613      	movcs	r3, r2
 80127ba:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80127bc:	8af9      	ldrh	r1, [r7, #22]
 80127be:	7bfb      	ldrb	r3, [r7, #15]
 80127c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7fb f811 	bl	800d7ec <pbuf_alloc>
 80127ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d101      	bne.n	80127d6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80127d2:	2300      	movs	r3, #0
 80127d4:	e019      	b.n	801280a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d006      	beq.n	80127ec <tcp_pbuf_prealloc+0xb8>
 80127de:	4b0d      	ldr	r3, [pc, #52]	; (8012814 <tcp_pbuf_prealloc+0xe0>)
 80127e0:	f240 120b 	movw	r2, #267	; 0x10b
 80127e4:	490f      	ldr	r1, [pc, #60]	; (8012824 <tcp_pbuf_prealloc+0xf0>)
 80127e6:	480d      	ldr	r0, [pc, #52]	; (801281c <tcp_pbuf_prealloc+0xe8>)
 80127e8:	f009 f86a 	bl	801b8c0 <iprintf>
  *oversize = p->len - length;
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	895a      	ldrh	r2, [r3, #10]
 80127f0:	89bb      	ldrh	r3, [r7, #12]
 80127f2:	1ad3      	subs	r3, r2, r3
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	89ba      	ldrh	r2, [r7, #12]
 80127fe:	811a      	strh	r2, [r3, #8]
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	891a      	ldrh	r2, [r3, #8]
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	815a      	strh	r2, [r3, #10]
  return p;
 8012808:	693b      	ldr	r3, [r7, #16]
}
 801280a:	4618      	mov	r0, r3
 801280c:	3718      	adds	r7, #24
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	0801f214 	.word	0x0801f214
 8012818:	0801f2cc 	.word	0x0801f2cc
 801281c:	0801f268 	.word	0x0801f268
 8012820:	0801f2f0 	.word	0x0801f2f0
 8012824:	0801f310 	.word	0x0801f310

08012828 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	460b      	mov	r3, r1
 8012832:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d106      	bne.n	8012848 <tcp_write_checks+0x20>
 801283a:	4b33      	ldr	r3, [pc, #204]	; (8012908 <tcp_write_checks+0xe0>)
 801283c:	f240 1233 	movw	r2, #307	; 0x133
 8012840:	4932      	ldr	r1, [pc, #200]	; (801290c <tcp_write_checks+0xe4>)
 8012842:	4833      	ldr	r0, [pc, #204]	; (8012910 <tcp_write_checks+0xe8>)
 8012844:	f009 f83c 	bl	801b8c0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	7d1b      	ldrb	r3, [r3, #20]
 801284c:	2b04      	cmp	r3, #4
 801284e:	d00e      	beq.n	801286e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012854:	2b07      	cmp	r3, #7
 8012856:	d00a      	beq.n	801286e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801285c:	2b02      	cmp	r3, #2
 801285e:	d006      	beq.n	801286e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012864:	2b03      	cmp	r3, #3
 8012866:	d002      	beq.n	801286e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012868:	f06f 030a 	mvn.w	r3, #10
 801286c:	e048      	b.n	8012900 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801286e:	887b      	ldrh	r3, [r7, #2]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d101      	bne.n	8012878 <tcp_write_checks+0x50>
    return ERR_OK;
 8012874:	2300      	movs	r3, #0
 8012876:	e043      	b.n	8012900 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801287e:	887a      	ldrh	r2, [r7, #2]
 8012880:	429a      	cmp	r2, r3
 8012882:	d909      	bls.n	8012898 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	8b5b      	ldrh	r3, [r3, #26]
 8012888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801288c:	b29a      	uxth	r2, r3
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012896:	e033      	b.n	8012900 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801289e:	2b08      	cmp	r3, #8
 80128a0:	d909      	bls.n	80128b6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	8b5b      	ldrh	r3, [r3, #26]
 80128a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128aa:	b29a      	uxth	r2, r3
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80128b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128b4:	e024      	b.n	8012900 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00f      	beq.n	80128e0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d11a      	bne.n	80128fe <tcp_write_checks+0xd6>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d116      	bne.n	80128fe <tcp_write_checks+0xd6>
 80128d0:	4b0d      	ldr	r3, [pc, #52]	; (8012908 <tcp_write_checks+0xe0>)
 80128d2:	f240 1255 	movw	r2, #341	; 0x155
 80128d6:	490f      	ldr	r1, [pc, #60]	; (8012914 <tcp_write_checks+0xec>)
 80128d8:	480d      	ldr	r0, [pc, #52]	; (8012910 <tcp_write_checks+0xe8>)
 80128da:	f008 fff1 	bl	801b8c0 <iprintf>
 80128de:	e00e      	b.n	80128fe <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d103      	bne.n	80128f0 <tcp_write_checks+0xc8>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d006      	beq.n	80128fe <tcp_write_checks+0xd6>
 80128f0:	4b05      	ldr	r3, [pc, #20]	; (8012908 <tcp_write_checks+0xe0>)
 80128f2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80128f6:	4908      	ldr	r1, [pc, #32]	; (8012918 <tcp_write_checks+0xf0>)
 80128f8:	4805      	ldr	r0, [pc, #20]	; (8012910 <tcp_write_checks+0xe8>)
 80128fa:	f008 ffe1 	bl	801b8c0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80128fe:	2300      	movs	r3, #0
}
 8012900:	4618      	mov	r0, r3
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	0801f214 	.word	0x0801f214
 801290c:	0801f324 	.word	0x0801f324
 8012910:	0801f268 	.word	0x0801f268
 8012914:	0801f344 	.word	0x0801f344
 8012918:	0801f380 	.word	0x0801f380

0801291c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801291c:	b590      	push	{r4, r7, lr}
 801291e:	b09b      	sub	sp, #108	; 0x6c
 8012920:	af04      	add	r7, sp, #16
 8012922:	60f8      	str	r0, [r7, #12]
 8012924:	60b9      	str	r1, [r7, #8]
 8012926:	4611      	mov	r1, r2
 8012928:	461a      	mov	r2, r3
 801292a:	460b      	mov	r3, r1
 801292c:	80fb      	strh	r3, [r7, #6]
 801292e:	4613      	mov	r3, r2
 8012930:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012932:	2300      	movs	r3, #0
 8012934:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012936:	2300      	movs	r3, #0
 8012938:	653b      	str	r3, [r7, #80]	; 0x50
 801293a:	2300      	movs	r3, #0
 801293c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801293e:	2300      	movs	r3, #0
 8012940:	64bb      	str	r3, [r7, #72]	; 0x48
 8012942:	2300      	movs	r3, #0
 8012944:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012946:	2300      	movs	r3, #0
 8012948:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801294c:	2300      	movs	r3, #0
 801294e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012952:	2300      	movs	r3, #0
 8012954:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012956:	2300      	movs	r3, #0
 8012958:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801295a:	2300      	movs	r3, #0
 801295c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d109      	bne.n	8012978 <tcp_write+0x5c>
 8012964:	4ba4      	ldr	r3, [pc, #656]	; (8012bf8 <tcp_write+0x2dc>)
 8012966:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801296a:	49a4      	ldr	r1, [pc, #656]	; (8012bfc <tcp_write+0x2e0>)
 801296c:	48a4      	ldr	r0, [pc, #656]	; (8012c00 <tcp_write+0x2e4>)
 801296e:	f008 ffa7 	bl	801b8c0 <iprintf>
 8012972:	f06f 030f 	mvn.w	r3, #15
 8012976:	e32a      	b.n	8012fce <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801297e:	085b      	lsrs	r3, r3, #1
 8012980:	b29a      	uxth	r2, r3
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012986:	4293      	cmp	r3, r2
 8012988:	bf28      	it	cs
 801298a:	4613      	movcs	r3, r2
 801298c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801298e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012990:	2b00      	cmp	r3, #0
 8012992:	d102      	bne.n	801299a <tcp_write+0x7e>
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012998:	e000      	b.n	801299c <tcp_write+0x80>
 801299a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801299c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d109      	bne.n	80129b8 <tcp_write+0x9c>
 80129a4:	4b94      	ldr	r3, [pc, #592]	; (8012bf8 <tcp_write+0x2dc>)
 80129a6:	f240 12ad 	movw	r2, #429	; 0x1ad
 80129aa:	4996      	ldr	r1, [pc, #600]	; (8012c04 <tcp_write+0x2e8>)
 80129ac:	4894      	ldr	r0, [pc, #592]	; (8012c00 <tcp_write+0x2e4>)
 80129ae:	f008 ff87 	bl	801b8c0 <iprintf>
 80129b2:	f06f 030f 	mvn.w	r3, #15
 80129b6:	e30a      	b.n	8012fce <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80129b8:	88fb      	ldrh	r3, [r7, #6]
 80129ba:	4619      	mov	r1, r3
 80129bc:	68f8      	ldr	r0, [r7, #12]
 80129be:	f7ff ff33 	bl	8012828 <tcp_write_checks>
 80129c2:	4603      	mov	r3, r0
 80129c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80129c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d002      	beq.n	80129d6 <tcp_write+0xba>
    return err;
 80129d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80129d4:	e2fb      	b.n	8012fce <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80129e0:	2300      	movs	r3, #0
 80129e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	f000 80f6 	beq.w	8012bdc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f4:	653b      	str	r3, [r7, #80]	; 0x50
 80129f6:	e002      	b.n	80129fe <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80129f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d1f8      	bne.n	80129f8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a08:	7a9b      	ldrb	r3, [r3, #10]
 8012a0a:	009b      	lsls	r3, r3, #2
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	f003 0304 	and.w	r3, r3, #4
 8012a12:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012a14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a18:	891b      	ldrh	r3, [r3, #8]
 8012a1a:	4619      	mov	r1, r3
 8012a1c:	8c3b      	ldrh	r3, [r7, #32]
 8012a1e:	440b      	add	r3, r1
 8012a20:	429a      	cmp	r2, r3
 8012a22:	da06      	bge.n	8012a32 <tcp_write+0x116>
 8012a24:	4b74      	ldr	r3, [pc, #464]	; (8012bf8 <tcp_write+0x2dc>)
 8012a26:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012a2a:	4977      	ldr	r1, [pc, #476]	; (8012c08 <tcp_write+0x2ec>)
 8012a2c:	4874      	ldr	r0, [pc, #464]	; (8012c00 <tcp_write+0x2e4>)
 8012a2e:	f008 ff47 	bl	801b8c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a34:	891a      	ldrh	r2, [r3, #8]
 8012a36:	8c3b      	ldrh	r3, [r7, #32]
 8012a38:	4413      	add	r3, r2
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a3e:	1ad3      	subs	r3, r2, r3
 8012a40:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a48:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012a4a:	8a7b      	ldrh	r3, [r7, #18]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d026      	beq.n	8012a9e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012a50:	8a7b      	ldrh	r3, [r7, #18]
 8012a52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d206      	bcs.n	8012a66 <tcp_write+0x14a>
 8012a58:	4b67      	ldr	r3, [pc, #412]	; (8012bf8 <tcp_write+0x2dc>)
 8012a5a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012a5e:	496b      	ldr	r1, [pc, #428]	; (8012c0c <tcp_write+0x2f0>)
 8012a60:	4867      	ldr	r0, [pc, #412]	; (8012c00 <tcp_write+0x2e4>)
 8012a62:	f008 ff2d 	bl	801b8c0 <iprintf>
      seg = last_unsent;
 8012a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a68:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012a6a:	8a7b      	ldrh	r3, [r7, #18]
 8012a6c:	88fa      	ldrh	r2, [r7, #6]
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	bf28      	it	cs
 8012a72:	4613      	movcs	r3, r2
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a78:	4293      	cmp	r3, r2
 8012a7a:	bf28      	it	cs
 8012a7c:	4613      	movcs	r3, r2
 8012a7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012a80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a86:	4413      	add	r3, r2
 8012a88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012a8c:	8a7a      	ldrh	r2, [r7, #18]
 8012a8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a90:	1ad3      	subs	r3, r2, r3
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012a96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a9a:	1ad3      	subs	r3, r2, r3
 8012a9c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012a9e:	8a7b      	ldrh	r3, [r7, #18]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d00b      	beq.n	8012abc <tcp_write+0x1a0>
 8012aa4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012aa8:	88fb      	ldrh	r3, [r7, #6]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d006      	beq.n	8012abc <tcp_write+0x1a0>
 8012aae:	4b52      	ldr	r3, [pc, #328]	; (8012bf8 <tcp_write+0x2dc>)
 8012ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ab4:	4956      	ldr	r1, [pc, #344]	; (8012c10 <tcp_write+0x2f4>)
 8012ab6:	4852      	ldr	r0, [pc, #328]	; (8012c00 <tcp_write+0x2e4>)
 8012ab8:	f008 ff02 	bl	801b8c0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012abc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ac0:	88fb      	ldrh	r3, [r7, #6]
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	f080 8167 	bcs.w	8012d96 <tcp_write+0x47a>
 8012ac8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	f000 8163 	beq.w	8012d96 <tcp_write+0x47a>
 8012ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ad2:	891b      	ldrh	r3, [r3, #8]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	f000 815e 	beq.w	8012d96 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012ada:	88fa      	ldrh	r2, [r7, #6]
 8012adc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ae0:	1ad2      	subs	r2, r2, r3
 8012ae2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	bfa8      	it	ge
 8012ae8:	4613      	movge	r3, r2
 8012aea:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012aee:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012af0:	797b      	ldrb	r3, [r7, #5]
 8012af2:	f003 0301 	and.w	r3, r3, #1
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d027      	beq.n	8012b4a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012afa:	f107 0012 	add.w	r0, r7, #18
 8012afe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b00:	8bf9      	ldrh	r1, [r7, #30]
 8012b02:	2301      	movs	r3, #1
 8012b04:	9302      	str	r3, [sp, #8]
 8012b06:	797b      	ldrb	r3, [r7, #5]
 8012b08:	9301      	str	r3, [sp, #4]
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	9300      	str	r3, [sp, #0]
 8012b0e:	4603      	mov	r3, r0
 8012b10:	2000      	movs	r0, #0
 8012b12:	f7ff fe0f 	bl	8012734 <tcp_pbuf_prealloc>
 8012b16:	6578      	str	r0, [r7, #84]	; 0x54
 8012b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 8225 	beq.w	8012f6a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b22:	6858      	ldr	r0, [r3, #4]
 8012b24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b28:	68ba      	ldr	r2, [r7, #8]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	8bfa      	ldrh	r2, [r7, #30]
 8012b2e:	4619      	mov	r1, r3
 8012b30:	f008 feb0 	bl	801b894 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012b34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012b36:	f7fb f9fd 	bl	800df34 <pbuf_clen>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	461a      	mov	r2, r3
 8012b3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b42:	4413      	add	r3, r2
 8012b44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012b48:	e041      	b.n	8012bce <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8012b50:	e002      	b.n	8012b58 <tcp_write+0x23c>
 8012b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	637b      	str	r3, [r7, #52]	; 0x34
 8012b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d1f8      	bne.n	8012b52 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b62:	7b1b      	ldrb	r3, [r3, #12]
 8012b64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d115      	bne.n	8012b98 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b72:	8952      	ldrh	r2, [r2, #10]
 8012b74:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012b76:	68ba      	ldr	r2, [r7, #8]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d10d      	bne.n	8012b98 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012b7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d006      	beq.n	8012b92 <tcp_write+0x276>
 8012b84:	4b1c      	ldr	r3, [pc, #112]	; (8012bf8 <tcp_write+0x2dc>)
 8012b86:	f240 2231 	movw	r2, #561	; 0x231
 8012b8a:	4922      	ldr	r1, [pc, #136]	; (8012c14 <tcp_write+0x2f8>)
 8012b8c:	481c      	ldr	r0, [pc, #112]	; (8012c00 <tcp_write+0x2e4>)
 8012b8e:	f008 fe97 	bl	801b8c0 <iprintf>
          extendlen = seglen;
 8012b92:	8bfb      	ldrh	r3, [r7, #30]
 8012b94:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012b96:	e01a      	b.n	8012bce <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012b98:	8bfb      	ldrh	r3, [r7, #30]
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	2000      	movs	r0, #0
 8012ba0:	f7fa fe24 	bl	800d7ec <pbuf_alloc>
 8012ba4:	6578      	str	r0, [r7, #84]	; 0x54
 8012ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	f000 81e0 	beq.w	8012f6e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012bae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bb2:	68ba      	ldr	r2, [r7, #8]
 8012bb4:	441a      	add	r2, r3
 8012bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bb8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012bba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012bbc:	f7fb f9ba 	bl	800df34 <pbuf_clen>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012bc8:	4413      	add	r3, r2
 8012bca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012bce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bd2:	8bfb      	ldrh	r3, [r7, #30]
 8012bd4:	4413      	add	r3, r2
 8012bd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012bda:	e0dc      	b.n	8012d96 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	f000 80d7 	beq.w	8012d96 <tcp_write+0x47a>
 8012be8:	4b03      	ldr	r3, [pc, #12]	; (8012bf8 <tcp_write+0x2dc>)
 8012bea:	f240 224a 	movw	r2, #586	; 0x24a
 8012bee:	490a      	ldr	r1, [pc, #40]	; (8012c18 <tcp_write+0x2fc>)
 8012bf0:	4803      	ldr	r0, [pc, #12]	; (8012c00 <tcp_write+0x2e4>)
 8012bf2:	f008 fe65 	bl	801b8c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012bf6:	e0ce      	b.n	8012d96 <tcp_write+0x47a>
 8012bf8:	0801f214 	.word	0x0801f214
 8012bfc:	0801f3b4 	.word	0x0801f3b4
 8012c00:	0801f268 	.word	0x0801f268
 8012c04:	0801f3cc 	.word	0x0801f3cc
 8012c08:	0801f400 	.word	0x0801f400
 8012c0c:	0801f418 	.word	0x0801f418
 8012c10:	0801f438 	.word	0x0801f438
 8012c14:	0801f458 	.word	0x0801f458
 8012c18:	0801f484 	.word	0x0801f484
    struct pbuf *p;
    u16_t left = len - pos;
 8012c1c:	88fa      	ldrh	r2, [r7, #6]
 8012c1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c22:	1ad3      	subs	r3, r2, r3
 8012c24:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012c26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c2e:	1ad3      	subs	r3, r2, r3
 8012c30:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012c32:	8b7a      	ldrh	r2, [r7, #26]
 8012c34:	8bbb      	ldrh	r3, [r7, #28]
 8012c36:	4293      	cmp	r3, r2
 8012c38:	bf28      	it	cs
 8012c3a:	4613      	movcs	r3, r2
 8012c3c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012c3e:	797b      	ldrb	r3, [r7, #5]
 8012c40:	f003 0301 	and.w	r3, r3, #1
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d036      	beq.n	8012cb6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012c48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c4c:	b29a      	uxth	r2, r3
 8012c4e:	8b3b      	ldrh	r3, [r7, #24]
 8012c50:	4413      	add	r3, r2
 8012c52:	b299      	uxth	r1, r3
 8012c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	bf0c      	ite	eq
 8012c5a:	2301      	moveq	r3, #1
 8012c5c:	2300      	movne	r3, #0
 8012c5e:	b2db      	uxtb	r3, r3
 8012c60:	f107 0012 	add.w	r0, r7, #18
 8012c64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c66:	9302      	str	r3, [sp, #8]
 8012c68:	797b      	ldrb	r3, [r7, #5]
 8012c6a:	9301      	str	r3, [sp, #4]
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	9300      	str	r3, [sp, #0]
 8012c70:	4603      	mov	r3, r0
 8012c72:	2036      	movs	r0, #54	; 0x36
 8012c74:	f7ff fd5e 	bl	8012734 <tcp_pbuf_prealloc>
 8012c78:	6338      	str	r0, [r7, #48]	; 0x30
 8012c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f000 8178 	beq.w	8012f72 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c84:	895b      	ldrh	r3, [r3, #10]
 8012c86:	8b3a      	ldrh	r2, [r7, #24]
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d906      	bls.n	8012c9a <tcp_write+0x37e>
 8012c8c:	4b8c      	ldr	r3, [pc, #560]	; (8012ec0 <tcp_write+0x5a4>)
 8012c8e:	f240 2266 	movw	r2, #614	; 0x266
 8012c92:	498c      	ldr	r1, [pc, #560]	; (8012ec4 <tcp_write+0x5a8>)
 8012c94:	488c      	ldr	r0, [pc, #560]	; (8012ec8 <tcp_write+0x5ac>)
 8012c96:	f008 fe13 	bl	801b8c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c9c:	685a      	ldr	r2, [r3, #4]
 8012c9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012ca2:	18d0      	adds	r0, r2, r3
 8012ca4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ca8:	68ba      	ldr	r2, [r7, #8]
 8012caa:	4413      	add	r3, r2
 8012cac:	8b3a      	ldrh	r2, [r7, #24]
 8012cae:	4619      	mov	r1, r3
 8012cb0:	f008 fdf0 	bl	801b894 <memcpy>
 8012cb4:	e02f      	b.n	8012d16 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012cb6:	8a7b      	ldrh	r3, [r7, #18]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d006      	beq.n	8012cca <tcp_write+0x3ae>
 8012cbc:	4b80      	ldr	r3, [pc, #512]	; (8012ec0 <tcp_write+0x5a4>)
 8012cbe:	f240 2271 	movw	r2, #625	; 0x271
 8012cc2:	4982      	ldr	r1, [pc, #520]	; (8012ecc <tcp_write+0x5b0>)
 8012cc4:	4880      	ldr	r0, [pc, #512]	; (8012ec8 <tcp_write+0x5ac>)
 8012cc6:	f008 fdfb 	bl	801b8c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012cca:	8b3b      	ldrh	r3, [r7, #24]
 8012ccc:	2201      	movs	r2, #1
 8012cce:	4619      	mov	r1, r3
 8012cd0:	2036      	movs	r0, #54	; 0x36
 8012cd2:	f7fa fd8b 	bl	800d7ec <pbuf_alloc>
 8012cd6:	6178      	str	r0, [r7, #20]
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	f000 814b 	beq.w	8012f76 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012ce0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ce4:	68ba      	ldr	r2, [r7, #8]
 8012ce6:	441a      	add	r2, r3
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012cec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012cf0:	b29b      	uxth	r3, r3
 8012cf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	2036      	movs	r0, #54	; 0x36
 8012cfa:	f7fa fd77 	bl	800d7ec <pbuf_alloc>
 8012cfe:	6338      	str	r0, [r7, #48]	; 0x30
 8012d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d103      	bne.n	8012d0e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012d06:	6978      	ldr	r0, [r7, #20]
 8012d08:	f7fb f886 	bl	800de18 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012d0c:	e136      	b.n	8012f7c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012d0e:	6979      	ldr	r1, [r7, #20]
 8012d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d12:	f7fb f94f 	bl	800dfb4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d18:	f7fb f90c 	bl	800df34 <pbuf_clen>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	461a      	mov	r2, r3
 8012d20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d24:	4413      	add	r3, r2
 8012d26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012d2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d2e:	2b09      	cmp	r3, #9
 8012d30:	d903      	bls.n	8012d3a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012d32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d34:	f7fb f870 	bl	800de18 <pbuf_free>
      goto memerr;
 8012d38:	e120      	b.n	8012f7c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012d3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d42:	441a      	add	r2, r3
 8012d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d48:	9300      	str	r3, [sp, #0]
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012d50:	68f8      	ldr	r0, [r7, #12]
 8012d52:	f7ff fc51 	bl	80125f8 <tcp_create_segment>
 8012d56:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	f000 810d 	beq.w	8012f7a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d102      	bne.n	8012d6c <tcp_write+0x450>
      queue = seg;
 8012d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d68:	647b      	str	r3, [r7, #68]	; 0x44
 8012d6a:	e00c      	b.n	8012d86 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d106      	bne.n	8012d80 <tcp_write+0x464>
 8012d72:	4b53      	ldr	r3, [pc, #332]	; (8012ec0 <tcp_write+0x5a4>)
 8012d74:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012d78:	4955      	ldr	r1, [pc, #340]	; (8012ed0 <tcp_write+0x5b4>)
 8012d7a:	4853      	ldr	r0, [pc, #332]	; (8012ec8 <tcp_write+0x5ac>)
 8012d7c:	f008 fda0 	bl	801b8c0 <iprintf>
      prev_seg->next = seg;
 8012d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d84:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d88:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012d8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d8e:	8b3b      	ldrh	r3, [r7, #24]
 8012d90:	4413      	add	r3, r2
 8012d92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012d96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d9a:	88fb      	ldrh	r3, [r7, #6]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	f4ff af3d 	bcc.w	8012c1c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012da2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d02c      	beq.n	8012e02 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012daa:	685b      	ldr	r3, [r3, #4]
 8012dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012dae:	e01e      	b.n	8012dee <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db2:	891a      	ldrh	r2, [r3, #8]
 8012db4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012db6:	4413      	add	r3, r2
 8012db8:	b29a      	uxth	r2, r3
 8012dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dbc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d110      	bne.n	8012de8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc8:	685b      	ldr	r3, [r3, #4]
 8012dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dcc:	8952      	ldrh	r2, [r2, #10]
 8012dce:	4413      	add	r3, r2
 8012dd0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012dd2:	68b9      	ldr	r1, [r7, #8]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f008 fd5d 	bl	801b894 <memcpy>
        p->len += oversize_used;
 8012dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ddc:	895a      	ldrh	r2, [r3, #10]
 8012dde:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012de0:	4413      	add	r3, r2
 8012de2:	b29a      	uxth	r2, r3
 8012de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d1dd      	bne.n	8012db0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012df6:	891a      	ldrh	r2, [r3, #8]
 8012df8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dfa:	4413      	add	r3, r2
 8012dfc:	b29a      	uxth	r2, r3
 8012dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e00:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012e02:	8a7a      	ldrh	r2, [r7, #18]
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d018      	beq.n	8012e42 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d106      	bne.n	8012e24 <tcp_write+0x508>
 8012e16:	4b2a      	ldr	r3, [pc, #168]	; (8012ec0 <tcp_write+0x5a4>)
 8012e18:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012e1c:	492d      	ldr	r1, [pc, #180]	; (8012ed4 <tcp_write+0x5b8>)
 8012e1e:	482a      	ldr	r0, [pc, #168]	; (8012ec8 <tcp_write+0x5ac>)
 8012e20:	f008 fd4e 	bl	801b8c0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e26:	685b      	ldr	r3, [r3, #4]
 8012e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7fb f8c2 	bl	800dfb4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e32:	891a      	ldrh	r2, [r3, #8]
 8012e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e36:	891b      	ldrh	r3, [r3, #8]
 8012e38:	4413      	add	r3, r2
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e3e:	811a      	strh	r2, [r3, #8]
 8012e40:	e037      	b.n	8012eb2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012e42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d034      	beq.n	8012eb2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d003      	beq.n	8012e56 <tcp_write+0x53a>
 8012e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d106      	bne.n	8012e64 <tcp_write+0x548>
 8012e56:	4b1a      	ldr	r3, [pc, #104]	; (8012ec0 <tcp_write+0x5a4>)
 8012e58:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012e5c:	491e      	ldr	r1, [pc, #120]	; (8012ed8 <tcp_write+0x5bc>)
 8012e5e:	481a      	ldr	r0, [pc, #104]	; (8012ec8 <tcp_write+0x5ac>)
 8012e60:	f008 fd2e 	bl	801b8c0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e6a:	e009      	b.n	8012e80 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6e:	891a      	ldrh	r2, [r3, #8]
 8012e70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e72:	4413      	add	r3, r2
 8012e74:	b29a      	uxth	r2, r3
 8012e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e78:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d1f1      	bne.n	8012e6c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e8a:	891a      	ldrh	r2, [r3, #8]
 8012e8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e8e:	4413      	add	r3, r2
 8012e90:	b29a      	uxth	r2, r3
 8012e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e94:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e98:	895a      	ldrh	r2, [r3, #10]
 8012e9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e9c:	4413      	add	r3, r2
 8012e9e:	b29a      	uxth	r2, r3
 8012ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ea6:	891a      	ldrh	r2, [r3, #8]
 8012ea8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012eaa:	4413      	add	r3, r2
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d111      	bne.n	8012edc <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ebc:	66da      	str	r2, [r3, #108]	; 0x6c
 8012ebe:	e010      	b.n	8012ee2 <tcp_write+0x5c6>
 8012ec0:	0801f214 	.word	0x0801f214
 8012ec4:	0801f4b4 	.word	0x0801f4b4
 8012ec8:	0801f268 	.word	0x0801f268
 8012ecc:	0801f4f4 	.word	0x0801f4f4
 8012ed0:	0801f504 	.word	0x0801f504
 8012ed4:	0801f518 	.word	0x0801f518
 8012ed8:	0801f550 	.word	0x0801f550
  } else {
    last_unsent->next = queue;
 8012edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ee0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012ee6:	88fb      	ldrh	r3, [r7, #6]
 8012ee8:	441a      	add	r2, r3
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012ef4:	88fb      	ldrh	r3, [r7, #6]
 8012ef6:	1ad3      	subs	r3, r2, r3
 8012ef8:	b29a      	uxth	r2, r3
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d00e      	beq.n	8012f32 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d10a      	bne.n	8012f32 <tcp_write+0x616>
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d106      	bne.n	8012f32 <tcp_write+0x616>
 8012f24:	4b2c      	ldr	r3, [pc, #176]	; (8012fd8 <tcp_write+0x6bc>)
 8012f26:	f240 3212 	movw	r2, #786	; 0x312
 8012f2a:	492c      	ldr	r1, [pc, #176]	; (8012fdc <tcp_write+0x6c0>)
 8012f2c:	482c      	ldr	r0, [pc, #176]	; (8012fe0 <tcp_write+0x6c4>)
 8012f2e:	f008 fcc7 	bl	801b8c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d016      	beq.n	8012f66 <tcp_write+0x64a>
 8012f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f3a:	68db      	ldr	r3, [r3, #12]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d012      	beq.n	8012f66 <tcp_write+0x64a>
 8012f40:	797b      	ldrb	r3, [r7, #5]
 8012f42:	f003 0302 	and.w	r3, r3, #2
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d10d      	bne.n	8012f66 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f4c:	68db      	ldr	r3, [r3, #12]
 8012f4e:	899b      	ldrh	r3, [r3, #12]
 8012f50:	b29c      	uxth	r4, r3
 8012f52:	2008      	movs	r0, #8
 8012f54:	f7f9 fb76 	bl	800c644 <lwip_htons>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f5e:	68db      	ldr	r3, [r3, #12]
 8012f60:	4322      	orrs	r2, r4
 8012f62:	b292      	uxth	r2, r2
 8012f64:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012f66:	2300      	movs	r3, #0
 8012f68:	e031      	b.n	8012fce <tcp_write+0x6b2>
          goto memerr;
 8012f6a:	bf00      	nop
 8012f6c:	e006      	b.n	8012f7c <tcp_write+0x660>
            goto memerr;
 8012f6e:	bf00      	nop
 8012f70:	e004      	b.n	8012f7c <tcp_write+0x660>
        goto memerr;
 8012f72:	bf00      	nop
 8012f74:	e002      	b.n	8012f7c <tcp_write+0x660>
        goto memerr;
 8012f76:	bf00      	nop
 8012f78:	e000      	b.n	8012f7c <tcp_write+0x660>
      goto memerr;
 8012f7a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	8b5b      	ldrh	r3, [r3, #26]
 8012f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f84:	b29a      	uxth	r2, r3
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d002      	beq.n	8012f96 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012f90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012f92:	f7fa ff41 	bl	800de18 <pbuf_free>
  }
  if (queue != NULL) {
 8012f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d002      	beq.n	8012fa2 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012f9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012f9e:	f7fc fb6f 	bl	800f680 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d00e      	beq.n	8012fca <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d10a      	bne.n	8012fca <tcp_write+0x6ae>
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d106      	bne.n	8012fca <tcp_write+0x6ae>
 8012fbc:	4b06      	ldr	r3, [pc, #24]	; (8012fd8 <tcp_write+0x6bc>)
 8012fbe:	f240 3227 	movw	r2, #807	; 0x327
 8012fc2:	4906      	ldr	r1, [pc, #24]	; (8012fdc <tcp_write+0x6c0>)
 8012fc4:	4806      	ldr	r0, [pc, #24]	; (8012fe0 <tcp_write+0x6c4>)
 8012fc6:	f008 fc7b 	bl	801b8c0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	375c      	adds	r7, #92	; 0x5c
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd90      	pop	{r4, r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	0801f214 	.word	0x0801f214
 8012fdc:	0801f588 	.word	0x0801f588
 8012fe0:	0801f268 	.word	0x0801f268

08012fe4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012fe4:	b590      	push	{r4, r7, lr}
 8012fe6:	b08b      	sub	sp, #44	; 0x2c
 8012fe8:	af02      	add	r7, sp, #8
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	460b      	mov	r3, r1
 8012fee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	61fb      	str	r3, [r7, #28]
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d106      	bne.n	8013010 <tcp_split_unsent_seg+0x2c>
 8013002:	4b95      	ldr	r3, [pc, #596]	; (8013258 <tcp_split_unsent_seg+0x274>)
 8013004:	f240 324b 	movw	r2, #843	; 0x34b
 8013008:	4994      	ldr	r1, [pc, #592]	; (801325c <tcp_split_unsent_seg+0x278>)
 801300a:	4895      	ldr	r0, [pc, #596]	; (8013260 <tcp_split_unsent_seg+0x27c>)
 801300c:	f008 fc58 	bl	801b8c0 <iprintf>

  useg = pcb->unsent;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013014:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d102      	bne.n	8013022 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801301c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013020:	e116      	b.n	8013250 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013022:	887b      	ldrh	r3, [r7, #2]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d109      	bne.n	801303c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013028:	4b8b      	ldr	r3, [pc, #556]	; (8013258 <tcp_split_unsent_seg+0x274>)
 801302a:	f240 3253 	movw	r2, #851	; 0x353
 801302e:	498d      	ldr	r1, [pc, #564]	; (8013264 <tcp_split_unsent_seg+0x280>)
 8013030:	488b      	ldr	r0, [pc, #556]	; (8013260 <tcp_split_unsent_seg+0x27c>)
 8013032:	f008 fc45 	bl	801b8c0 <iprintf>
    return ERR_VAL;
 8013036:	f06f 0305 	mvn.w	r3, #5
 801303a:	e109      	b.n	8013250 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	891b      	ldrh	r3, [r3, #8]
 8013040:	887a      	ldrh	r2, [r7, #2]
 8013042:	429a      	cmp	r2, r3
 8013044:	d301      	bcc.n	801304a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013046:	2300      	movs	r3, #0
 8013048:	e102      	b.n	8013250 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801304e:	887a      	ldrh	r2, [r7, #2]
 8013050:	429a      	cmp	r2, r3
 8013052:	d906      	bls.n	8013062 <tcp_split_unsent_seg+0x7e>
 8013054:	4b80      	ldr	r3, [pc, #512]	; (8013258 <tcp_split_unsent_seg+0x274>)
 8013056:	f240 325b 	movw	r2, #859	; 0x35b
 801305a:	4983      	ldr	r1, [pc, #524]	; (8013268 <tcp_split_unsent_seg+0x284>)
 801305c:	4880      	ldr	r0, [pc, #512]	; (8013260 <tcp_split_unsent_seg+0x27c>)
 801305e:	f008 fc2f 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	891b      	ldrh	r3, [r3, #8]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d106      	bne.n	8013078 <tcp_split_unsent_seg+0x94>
 801306a:	4b7b      	ldr	r3, [pc, #492]	; (8013258 <tcp_split_unsent_seg+0x274>)
 801306c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013070:	497e      	ldr	r1, [pc, #504]	; (801326c <tcp_split_unsent_seg+0x288>)
 8013072:	487b      	ldr	r0, [pc, #492]	; (8013260 <tcp_split_unsent_seg+0x27c>)
 8013074:	f008 fc24 	bl	801b8c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	7a9b      	ldrb	r3, [r3, #10]
 801307c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801307e:	7bfb      	ldrb	r3, [r7, #15]
 8013080:	009b      	lsls	r3, r3, #2
 8013082:	b2db      	uxtb	r3, r3
 8013084:	f003 0304 	and.w	r3, r3, #4
 8013088:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801308a:	697b      	ldr	r3, [r7, #20]
 801308c:	891a      	ldrh	r2, [r3, #8]
 801308e:	887b      	ldrh	r3, [r7, #2]
 8013090:	1ad3      	subs	r3, r2, r3
 8013092:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013094:	7bbb      	ldrb	r3, [r7, #14]
 8013096:	b29a      	uxth	r2, r3
 8013098:	89bb      	ldrh	r3, [r7, #12]
 801309a:	4413      	add	r3, r2
 801309c:	b29b      	uxth	r3, r3
 801309e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130a2:	4619      	mov	r1, r3
 80130a4:	2036      	movs	r0, #54	; 0x36
 80130a6:	f7fa fba1 	bl	800d7ec <pbuf_alloc>
 80130aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f000 80b7 	beq.w	8013222 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	891a      	ldrh	r2, [r3, #8]
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	891b      	ldrh	r3, [r3, #8]
 80130be:	1ad3      	subs	r3, r2, r3
 80130c0:	b29a      	uxth	r2, r3
 80130c2:	887b      	ldrh	r3, [r7, #2]
 80130c4:	4413      	add	r3, r2
 80130c6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	6858      	ldr	r0, [r3, #4]
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	685a      	ldr	r2, [r3, #4]
 80130d0:	7bbb      	ldrb	r3, [r7, #14]
 80130d2:	18d1      	adds	r1, r2, r3
 80130d4:	897b      	ldrh	r3, [r7, #10]
 80130d6:	89ba      	ldrh	r2, [r7, #12]
 80130d8:	f7fb f8a4 	bl	800e224 <pbuf_copy_partial>
 80130dc:	4603      	mov	r3, r0
 80130de:	461a      	mov	r2, r3
 80130e0:	89bb      	ldrh	r3, [r7, #12]
 80130e2:	4293      	cmp	r3, r2
 80130e4:	f040 809f 	bne.w	8013226 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	68db      	ldr	r3, [r3, #12]
 80130ec:	899b      	ldrh	r3, [r3, #12]
 80130ee:	b29b      	uxth	r3, r3
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7f9 faa7 	bl	800c644 <lwip_htons>
 80130f6:	4603      	mov	r3, r0
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130fe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013100:	2300      	movs	r3, #0
 8013102:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013104:	7efb      	ldrb	r3, [r7, #27]
 8013106:	f003 0308 	and.w	r3, r3, #8
 801310a:	2b00      	cmp	r3, #0
 801310c:	d007      	beq.n	801311e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801310e:	7efb      	ldrb	r3, [r7, #27]
 8013110:	f023 0308 	bic.w	r3, r3, #8
 8013114:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013116:	7ebb      	ldrb	r3, [r7, #26]
 8013118:	f043 0308 	orr.w	r3, r3, #8
 801311c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801311e:	7efb      	ldrb	r3, [r7, #27]
 8013120:	f003 0301 	and.w	r3, r3, #1
 8013124:	2b00      	cmp	r3, #0
 8013126:	d007      	beq.n	8013138 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013128:	7efb      	ldrb	r3, [r7, #27]
 801312a:	f023 0301 	bic.w	r3, r3, #1
 801312e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013130:	7ebb      	ldrb	r3, [r7, #26]
 8013132:	f043 0301 	orr.w	r3, r3, #1
 8013136:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	4618      	mov	r0, r3
 8013140:	f7f9 fa95 	bl	800c66e <lwip_htonl>
 8013144:	4602      	mov	r2, r0
 8013146:	887b      	ldrh	r3, [r7, #2]
 8013148:	18d1      	adds	r1, r2, r3
 801314a:	7eba      	ldrb	r2, [r7, #26]
 801314c:	7bfb      	ldrb	r3, [r7, #15]
 801314e:	9300      	str	r3, [sp, #0]
 8013150:	460b      	mov	r3, r1
 8013152:	6939      	ldr	r1, [r7, #16]
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f7ff fa4f 	bl	80125f8 <tcp_create_segment>
 801315a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d063      	beq.n	801322a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	4618      	mov	r0, r3
 8013168:	f7fa fee4 	bl	800df34 <pbuf_clen>
 801316c:	4603      	mov	r3, r0
 801316e:	461a      	mov	r2, r3
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013176:	1a9b      	subs	r3, r3, r2
 8013178:	b29a      	uxth	r2, r3
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	6858      	ldr	r0, [r3, #4]
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	891a      	ldrh	r2, [r3, #8]
 801318a:	89bb      	ldrh	r3, [r7, #12]
 801318c:	1ad3      	subs	r3, r2, r3
 801318e:	b29b      	uxth	r3, r3
 8013190:	4619      	mov	r1, r3
 8013192:	f7fa fc89 	bl	800daa8 <pbuf_realloc>
  useg->len -= remainder;
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	891a      	ldrh	r2, [r3, #8]
 801319a:	89bb      	ldrh	r3, [r7, #12]
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	b29a      	uxth	r2, r3
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	68db      	ldr	r3, [r3, #12]
 80131a8:	899b      	ldrh	r3, [r3, #12]
 80131aa:	b29c      	uxth	r4, r3
 80131ac:	7efb      	ldrb	r3, [r7, #27]
 80131ae:	b29b      	uxth	r3, r3
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7f9 fa47 	bl	800c644 <lwip_htons>
 80131b6:	4603      	mov	r3, r0
 80131b8:	461a      	mov	r2, r3
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	68db      	ldr	r3, [r3, #12]
 80131be:	4322      	orrs	r2, r4
 80131c0:	b292      	uxth	r2, r2
 80131c2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7fa feb3 	bl	800df34 <pbuf_clen>
 80131ce:	4603      	mov	r3, r0
 80131d0:	461a      	mov	r2, r3
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131d8:	4413      	add	r3, r2
 80131da:	b29a      	uxth	r2, r3
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80131e2:	69fb      	ldr	r3, [r7, #28]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fa fea4 	bl	800df34 <pbuf_clen>
 80131ec:	4603      	mov	r3, r0
 80131ee:	461a      	mov	r2, r3
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131f6:	4413      	add	r3, r2
 80131f8:	b29a      	uxth	r2, r3
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	69fa      	ldr	r2, [r7, #28]
 801320c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801320e:	69fb      	ldr	r3, [r7, #28]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d103      	bne.n	801321e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2200      	movs	r2, #0
 801321a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801321e:	2300      	movs	r3, #0
 8013220:	e016      	b.n	8013250 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013222:	bf00      	nop
 8013224:	e002      	b.n	801322c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013226:	bf00      	nop
 8013228:	e000      	b.n	801322c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801322a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801322c:	69fb      	ldr	r3, [r7, #28]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d006      	beq.n	8013240 <tcp_split_unsent_seg+0x25c>
 8013232:	4b09      	ldr	r3, [pc, #36]	; (8013258 <tcp_split_unsent_seg+0x274>)
 8013234:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013238:	490d      	ldr	r1, [pc, #52]	; (8013270 <tcp_split_unsent_seg+0x28c>)
 801323a:	4809      	ldr	r0, [pc, #36]	; (8013260 <tcp_split_unsent_seg+0x27c>)
 801323c:	f008 fb40 	bl	801b8c0 <iprintf>
  if (p != NULL) {
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d002      	beq.n	801324c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013246:	6938      	ldr	r0, [r7, #16]
 8013248:	f7fa fde6 	bl	800de18 <pbuf_free>
  }

  return ERR_MEM;
 801324c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013250:	4618      	mov	r0, r3
 8013252:	3724      	adds	r7, #36	; 0x24
 8013254:	46bd      	mov	sp, r7
 8013256:	bd90      	pop	{r4, r7, pc}
 8013258:	0801f214 	.word	0x0801f214
 801325c:	0801f5a8 	.word	0x0801f5a8
 8013260:	0801f268 	.word	0x0801f268
 8013264:	0801f5cc 	.word	0x0801f5cc
 8013268:	0801f5f0 	.word	0x0801f5f0
 801326c:	0801f600 	.word	0x0801f600
 8013270:	0801f610 	.word	0x0801f610

08013274 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013274:	b590      	push	{r4, r7, lr}
 8013276:	b085      	sub	sp, #20
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d106      	bne.n	8013290 <tcp_send_fin+0x1c>
 8013282:	4b21      	ldr	r3, [pc, #132]	; (8013308 <tcp_send_fin+0x94>)
 8013284:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013288:	4920      	ldr	r1, [pc, #128]	; (801330c <tcp_send_fin+0x98>)
 801328a:	4821      	ldr	r0, [pc, #132]	; (8013310 <tcp_send_fin+0x9c>)
 801328c:	f008 fb18 	bl	801b8c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013294:	2b00      	cmp	r3, #0
 8013296:	d02e      	beq.n	80132f6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801329c:	60fb      	str	r3, [r7, #12]
 801329e:	e002      	b.n	80132a6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d1f8      	bne.n	80132a0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	899b      	ldrh	r3, [r3, #12]
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7f9 f9c4 	bl	800c644 <lwip_htons>
 80132bc:	4603      	mov	r3, r0
 80132be:	b2db      	uxtb	r3, r3
 80132c0:	f003 0307 	and.w	r3, r3, #7
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d116      	bne.n	80132f6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	68db      	ldr	r3, [r3, #12]
 80132cc:	899b      	ldrh	r3, [r3, #12]
 80132ce:	b29c      	uxth	r4, r3
 80132d0:	2001      	movs	r0, #1
 80132d2:	f7f9 f9b7 	bl	800c644 <lwip_htons>
 80132d6:	4603      	mov	r3, r0
 80132d8:	461a      	mov	r2, r3
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	68db      	ldr	r3, [r3, #12]
 80132de:	4322      	orrs	r2, r4
 80132e0:	b292      	uxth	r2, r2
 80132e2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	8b5b      	ldrh	r3, [r3, #26]
 80132e8:	f043 0320 	orr.w	r3, r3, #32
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80132f2:	2300      	movs	r3, #0
 80132f4:	e004      	b.n	8013300 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80132f6:	2101      	movs	r1, #1
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f000 f80b 	bl	8013314 <tcp_enqueue_flags>
 80132fe:	4603      	mov	r3, r0
}
 8013300:	4618      	mov	r0, r3
 8013302:	3714      	adds	r7, #20
 8013304:	46bd      	mov	sp, r7
 8013306:	bd90      	pop	{r4, r7, pc}
 8013308:	0801f214 	.word	0x0801f214
 801330c:	0801f61c 	.word	0x0801f61c
 8013310:	0801f268 	.word	0x0801f268

08013314 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b08a      	sub	sp, #40	; 0x28
 8013318:	af02      	add	r7, sp, #8
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	460b      	mov	r3, r1
 801331e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013320:	2300      	movs	r3, #0
 8013322:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013324:	2300      	movs	r3, #0
 8013326:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013328:	78fb      	ldrb	r3, [r7, #3]
 801332a:	f003 0303 	and.w	r3, r3, #3
 801332e:	2b00      	cmp	r3, #0
 8013330:	d106      	bne.n	8013340 <tcp_enqueue_flags+0x2c>
 8013332:	4b67      	ldr	r3, [pc, #412]	; (80134d0 <tcp_enqueue_flags+0x1bc>)
 8013334:	f240 4211 	movw	r2, #1041	; 0x411
 8013338:	4966      	ldr	r1, [pc, #408]	; (80134d4 <tcp_enqueue_flags+0x1c0>)
 801333a:	4867      	ldr	r0, [pc, #412]	; (80134d8 <tcp_enqueue_flags+0x1c4>)
 801333c:	f008 fac0 	bl	801b8c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d106      	bne.n	8013354 <tcp_enqueue_flags+0x40>
 8013346:	4b62      	ldr	r3, [pc, #392]	; (80134d0 <tcp_enqueue_flags+0x1bc>)
 8013348:	f240 4213 	movw	r2, #1043	; 0x413
 801334c:	4963      	ldr	r1, [pc, #396]	; (80134dc <tcp_enqueue_flags+0x1c8>)
 801334e:	4862      	ldr	r0, [pc, #392]	; (80134d8 <tcp_enqueue_flags+0x1c4>)
 8013350:	f008 fab6 	bl	801b8c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013354:	78fb      	ldrb	r3, [r7, #3]
 8013356:	f003 0302 	and.w	r3, r3, #2
 801335a:	2b00      	cmp	r3, #0
 801335c:	d001      	beq.n	8013362 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801335e:	2301      	movs	r3, #1
 8013360:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013362:	7ffb      	ldrb	r3, [r7, #31]
 8013364:	009b      	lsls	r3, r3, #2
 8013366:	b2db      	uxtb	r3, r3
 8013368:	f003 0304 	and.w	r3, r3, #4
 801336c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801336e:	7dfb      	ldrb	r3, [r7, #23]
 8013370:	b29b      	uxth	r3, r3
 8013372:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013376:	4619      	mov	r1, r3
 8013378:	2036      	movs	r0, #54	; 0x36
 801337a:	f7fa fa37 	bl	800d7ec <pbuf_alloc>
 801337e:	6138      	str	r0, [r7, #16]
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d109      	bne.n	801339a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	8b5b      	ldrh	r3, [r3, #26]
 801338a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801338e:	b29a      	uxth	r2, r3
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013398:	e095      	b.n	80134c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	895a      	ldrh	r2, [r3, #10]
 801339e:	7dfb      	ldrb	r3, [r7, #23]
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d206      	bcs.n	80133b4 <tcp_enqueue_flags+0xa0>
 80133a6:	4b4a      	ldr	r3, [pc, #296]	; (80134d0 <tcp_enqueue_flags+0x1bc>)
 80133a8:	f240 4239 	movw	r2, #1081	; 0x439
 80133ac:	494c      	ldr	r1, [pc, #304]	; (80134e0 <tcp_enqueue_flags+0x1cc>)
 80133ae:	484a      	ldr	r0, [pc, #296]	; (80134d8 <tcp_enqueue_flags+0x1c4>)
 80133b0:	f008 fa86 	bl	801b8c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80133b8:	78fa      	ldrb	r2, [r7, #3]
 80133ba:	7ffb      	ldrb	r3, [r7, #31]
 80133bc:	9300      	str	r3, [sp, #0]
 80133be:	460b      	mov	r3, r1
 80133c0:	6939      	ldr	r1, [r7, #16]
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f7ff f918 	bl	80125f8 <tcp_create_segment>
 80133c8:	60f8      	str	r0, [r7, #12]
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d109      	bne.n	80133e4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	8b5b      	ldrh	r3, [r3, #26]
 80133d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133d8:	b29a      	uxth	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80133de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133e2:	e070      	b.n	80134c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	f003 0303 	and.w	r3, r3, #3
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d006      	beq.n	80133fe <tcp_enqueue_flags+0xea>
 80133f0:	4b37      	ldr	r3, [pc, #220]	; (80134d0 <tcp_enqueue_flags+0x1bc>)
 80133f2:	f240 4242 	movw	r2, #1090	; 0x442
 80133f6:	493b      	ldr	r1, [pc, #236]	; (80134e4 <tcp_enqueue_flags+0x1d0>)
 80133f8:	4837      	ldr	r0, [pc, #220]	; (80134d8 <tcp_enqueue_flags+0x1c4>)
 80133fa:	f008 fa61 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	891b      	ldrh	r3, [r3, #8]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d006      	beq.n	8013414 <tcp_enqueue_flags+0x100>
 8013406:	4b32      	ldr	r3, [pc, #200]	; (80134d0 <tcp_enqueue_flags+0x1bc>)
 8013408:	f240 4243 	movw	r2, #1091	; 0x443
 801340c:	4936      	ldr	r1, [pc, #216]	; (80134e8 <tcp_enqueue_flags+0x1d4>)
 801340e:	4832      	ldr	r0, [pc, #200]	; (80134d8 <tcp_enqueue_flags+0x1c4>)
 8013410:	f008 fa56 	bl	801b8c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013418:	2b00      	cmp	r3, #0
 801341a:	d103      	bne.n	8013424 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	68fa      	ldr	r2, [r7, #12]
 8013420:	66da      	str	r2, [r3, #108]	; 0x6c
 8013422:	e00d      	b.n	8013440 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013428:	61bb      	str	r3, [r7, #24]
 801342a:	e002      	b.n	8013432 <tcp_enqueue_flags+0x11e>
 801342c:	69bb      	ldr	r3, [r7, #24]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	61bb      	str	r3, [r7, #24]
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d1f8      	bne.n	801342c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801343a:	69bb      	ldr	r3, [r7, #24]
 801343c:	68fa      	ldr	r2, [r7, #12]
 801343e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2200      	movs	r2, #0
 8013444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013448:	78fb      	ldrb	r3, [r7, #3]
 801344a:	f003 0302 	and.w	r3, r3, #2
 801344e:	2b00      	cmp	r3, #0
 8013450:	d104      	bne.n	801345c <tcp_enqueue_flags+0x148>
 8013452:	78fb      	ldrb	r3, [r7, #3]
 8013454:	f003 0301 	and.w	r3, r3, #1
 8013458:	2b00      	cmp	r3, #0
 801345a:	d004      	beq.n	8013466 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013460:	1c5a      	adds	r2, r3, #1
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013466:	78fb      	ldrb	r3, [r7, #3]
 8013468:	f003 0301 	and.w	r3, r3, #1
 801346c:	2b00      	cmp	r3, #0
 801346e:	d006      	beq.n	801347e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	8b5b      	ldrh	r3, [r3, #26]
 8013474:	f043 0320 	orr.w	r3, r3, #32
 8013478:	b29a      	uxth	r2, r3
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	685b      	ldr	r3, [r3, #4]
 8013482:	4618      	mov	r0, r3
 8013484:	f7fa fd56 	bl	800df34 <pbuf_clen>
 8013488:	4603      	mov	r3, r0
 801348a:	461a      	mov	r2, r3
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013492:	4413      	add	r3, r2
 8013494:	b29a      	uxth	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d00e      	beq.n	80134c4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d10a      	bne.n	80134c4 <tcp_enqueue_flags+0x1b0>
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d106      	bne.n	80134c4 <tcp_enqueue_flags+0x1b0>
 80134b6:	4b06      	ldr	r3, [pc, #24]	; (80134d0 <tcp_enqueue_flags+0x1bc>)
 80134b8:	f240 4265 	movw	r2, #1125	; 0x465
 80134bc:	490b      	ldr	r1, [pc, #44]	; (80134ec <tcp_enqueue_flags+0x1d8>)
 80134be:	4806      	ldr	r0, [pc, #24]	; (80134d8 <tcp_enqueue_flags+0x1c4>)
 80134c0:	f008 f9fe 	bl	801b8c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80134c4:	2300      	movs	r3, #0
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3720      	adds	r7, #32
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	bf00      	nop
 80134d0:	0801f214 	.word	0x0801f214
 80134d4:	0801f638 	.word	0x0801f638
 80134d8:	0801f268 	.word	0x0801f268
 80134dc:	0801f690 	.word	0x0801f690
 80134e0:	0801f6b0 	.word	0x0801f6b0
 80134e4:	0801f6ec 	.word	0x0801f6ec
 80134e8:	0801f704 	.word	0x0801f704
 80134ec:	0801f730 	.word	0x0801f730

080134f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80134f0:	b5b0      	push	{r4, r5, r7, lr}
 80134f2:	b08a      	sub	sp, #40	; 0x28
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d106      	bne.n	801350c <tcp_output+0x1c>
 80134fe:	4b9e      	ldr	r3, [pc, #632]	; (8013778 <tcp_output+0x288>)
 8013500:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013504:	499d      	ldr	r1, [pc, #628]	; (801377c <tcp_output+0x28c>)
 8013506:	489e      	ldr	r0, [pc, #632]	; (8013780 <tcp_output+0x290>)
 8013508:	f008 f9da 	bl	801b8c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	7d1b      	ldrb	r3, [r3, #20]
 8013510:	2b01      	cmp	r3, #1
 8013512:	d106      	bne.n	8013522 <tcp_output+0x32>
 8013514:	4b98      	ldr	r3, [pc, #608]	; (8013778 <tcp_output+0x288>)
 8013516:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801351a:	499a      	ldr	r1, [pc, #616]	; (8013784 <tcp_output+0x294>)
 801351c:	4898      	ldr	r0, [pc, #608]	; (8013780 <tcp_output+0x290>)
 801351e:	f008 f9cf 	bl	801b8c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013522:	4b99      	ldr	r3, [pc, #612]	; (8013788 <tcp_output+0x298>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	429a      	cmp	r2, r3
 801352a:	d101      	bne.n	8013530 <tcp_output+0x40>
    return ERR_OK;
 801352c:	2300      	movs	r3, #0
 801352e:	e1ce      	b.n	80138ce <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801353c:	4293      	cmp	r3, r2
 801353e:	bf28      	it	cs
 8013540:	4613      	movcs	r3, r2
 8013542:	b29b      	uxth	r3, r3
 8013544:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801354a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801354e:	2b00      	cmp	r3, #0
 8013550:	d10b      	bne.n	801356a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	8b5b      	ldrh	r3, [r3, #26]
 8013556:	f003 0302 	and.w	r3, r3, #2
 801355a:	2b00      	cmp	r3, #0
 801355c:	f000 81aa 	beq.w	80138b4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f000 fdcb 	bl	80140fc <tcp_send_empty_ack>
 8013566:	4603      	mov	r3, r0
 8013568:	e1b1      	b.n	80138ce <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801356a:	6879      	ldr	r1, [r7, #4]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	3304      	adds	r3, #4
 8013570:	461a      	mov	r2, r3
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f7ff f824 	bl	80125c0 <tcp_route>
 8013578:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d102      	bne.n	8013586 <tcp_output+0x96>
    return ERR_RTE;
 8013580:	f06f 0303 	mvn.w	r3, #3
 8013584:	e1a3      	b.n	80138ce <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d003      	beq.n	8013594 <tcp_output+0xa4>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d111      	bne.n	80135b8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d002      	beq.n	80135a0 <tcp_output+0xb0>
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	3304      	adds	r3, #4
 801359e:	e000      	b.n	80135a2 <tcp_output+0xb2>
 80135a0:	2300      	movs	r3, #0
 80135a2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80135a4:	693b      	ldr	r3, [r7, #16]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d102      	bne.n	80135b0 <tcp_output+0xc0>
      return ERR_RTE;
 80135aa:	f06f 0303 	mvn.w	r3, #3
 80135ae:	e18e      	b.n	80138ce <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	681a      	ldr	r2, [r3, #0]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80135b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ba:	68db      	ldr	r3, [r3, #12]
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	4618      	mov	r0, r3
 80135c0:	f7f9 f855 	bl	800c66e <lwip_htonl>
 80135c4:	4602      	mov	r2, r0
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135ca:	1ad3      	subs	r3, r2, r3
 80135cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135ce:	8912      	ldrh	r2, [r2, #8]
 80135d0:	4413      	add	r3, r2
 80135d2:	69ba      	ldr	r2, [r7, #24]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d227      	bcs.n	8013628 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135de:	461a      	mov	r2, r3
 80135e0:	69bb      	ldr	r3, [r7, #24]
 80135e2:	4293      	cmp	r3, r2
 80135e4:	d114      	bne.n	8013610 <tcp_output+0x120>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d110      	bne.n	8013610 <tcp_output+0x120>
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d10b      	bne.n	8013610 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2200      	movs	r2, #0
 80135fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2201      	movs	r2, #1
 8013604:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2200      	movs	r2, #0
 801360c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	8b5b      	ldrh	r3, [r3, #26]
 8013614:	f003 0302 	and.w	r3, r3, #2
 8013618:	2b00      	cmp	r3, #0
 801361a:	f000 814d 	beq.w	80138b8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f000 fd6c 	bl	80140fc <tcp_send_empty_ack>
 8013624:	4603      	mov	r3, r0
 8013626:	e152      	b.n	80138ce <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2200      	movs	r2, #0
 801362c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013634:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013636:	6a3b      	ldr	r3, [r7, #32]
 8013638:	2b00      	cmp	r3, #0
 801363a:	f000 811c 	beq.w	8013876 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801363e:	e002      	b.n	8013646 <tcp_output+0x156>
 8013640:	6a3b      	ldr	r3, [r7, #32]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	623b      	str	r3, [r7, #32]
 8013646:	6a3b      	ldr	r3, [r7, #32]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d1f8      	bne.n	8013640 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801364e:	e112      	b.n	8013876 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	899b      	ldrh	r3, [r3, #12]
 8013656:	b29b      	uxth	r3, r3
 8013658:	4618      	mov	r0, r3
 801365a:	f7f8 fff3 	bl	800c644 <lwip_htons>
 801365e:	4603      	mov	r3, r0
 8013660:	b2db      	uxtb	r3, r3
 8013662:	f003 0304 	and.w	r3, r3, #4
 8013666:	2b00      	cmp	r3, #0
 8013668:	d006      	beq.n	8013678 <tcp_output+0x188>
 801366a:	4b43      	ldr	r3, [pc, #268]	; (8013778 <tcp_output+0x288>)
 801366c:	f240 5236 	movw	r2, #1334	; 0x536
 8013670:	4946      	ldr	r1, [pc, #280]	; (801378c <tcp_output+0x29c>)
 8013672:	4843      	ldr	r0, [pc, #268]	; (8013780 <tcp_output+0x290>)
 8013674:	f008 f924 	bl	801b8c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801367c:	2b00      	cmp	r3, #0
 801367e:	d01f      	beq.n	80136c0 <tcp_output+0x1d0>
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	8b5b      	ldrh	r3, [r3, #26]
 8013684:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013688:	2b00      	cmp	r3, #0
 801368a:	d119      	bne.n	80136c0 <tcp_output+0x1d0>
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013690:	2b00      	cmp	r3, #0
 8013692:	d00b      	beq.n	80136ac <tcp_output+0x1bc>
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d110      	bne.n	80136c0 <tcp_output+0x1d0>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136a2:	891a      	ldrh	r2, [r3, #8]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d209      	bcs.n	80136c0 <tcp_output+0x1d0>
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d004      	beq.n	80136c0 <tcp_output+0x1d0>
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136bc:	2b08      	cmp	r3, #8
 80136be:	d901      	bls.n	80136c4 <tcp_output+0x1d4>
 80136c0:	2301      	movs	r3, #1
 80136c2:	e000      	b.n	80136c6 <tcp_output+0x1d6>
 80136c4:	2300      	movs	r3, #0
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d106      	bne.n	80136d8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	8b5b      	ldrh	r3, [r3, #26]
 80136ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	f000 80e4 	beq.w	80138a0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	7d1b      	ldrb	r3, [r3, #20]
 80136dc:	2b02      	cmp	r3, #2
 80136de:	d00d      	beq.n	80136fc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80136e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e2:	68db      	ldr	r3, [r3, #12]
 80136e4:	899b      	ldrh	r3, [r3, #12]
 80136e6:	b29c      	uxth	r4, r3
 80136e8:	2010      	movs	r0, #16
 80136ea:	f7f8 ffab 	bl	800c644 <lwip_htons>
 80136ee:	4603      	mov	r3, r0
 80136f0:	461a      	mov	r2, r3
 80136f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f4:	68db      	ldr	r3, [r3, #12]
 80136f6:	4322      	orrs	r2, r4
 80136f8:	b292      	uxth	r2, r2
 80136fa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80136fc:	697a      	ldr	r2, [r7, #20]
 80136fe:	6879      	ldr	r1, [r7, #4]
 8013700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013702:	f000 f909 	bl	8013918 <tcp_output_segment>
 8013706:	4603      	mov	r3, r0
 8013708:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801370a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d009      	beq.n	8013726 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	8b5b      	ldrh	r3, [r3, #26]
 8013716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801371a:	b29a      	uxth	r2, r3
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	835a      	strh	r2, [r3, #26]
      return err;
 8013720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013724:	e0d3      	b.n	80138ce <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	7d1b      	ldrb	r3, [r3, #20]
 8013732:	2b02      	cmp	r3, #2
 8013734:	d006      	beq.n	8013744 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	8b5b      	ldrh	r3, [r3, #26]
 801373a:	f023 0303 	bic.w	r3, r3, #3
 801373e:	b29a      	uxth	r2, r3
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013746:	68db      	ldr	r3, [r3, #12]
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	4618      	mov	r0, r3
 801374c:	f7f8 ff8f 	bl	800c66e <lwip_htonl>
 8013750:	4604      	mov	r4, r0
 8013752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013754:	891b      	ldrh	r3, [r3, #8]
 8013756:	461d      	mov	r5, r3
 8013758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375a:	68db      	ldr	r3, [r3, #12]
 801375c:	899b      	ldrh	r3, [r3, #12]
 801375e:	b29b      	uxth	r3, r3
 8013760:	4618      	mov	r0, r3
 8013762:	f7f8 ff6f 	bl	800c644 <lwip_htons>
 8013766:	4603      	mov	r3, r0
 8013768:	b2db      	uxtb	r3, r3
 801376a:	f003 0303 	and.w	r3, r3, #3
 801376e:	2b00      	cmp	r3, #0
 8013770:	d00e      	beq.n	8013790 <tcp_output+0x2a0>
 8013772:	2301      	movs	r3, #1
 8013774:	e00d      	b.n	8013792 <tcp_output+0x2a2>
 8013776:	bf00      	nop
 8013778:	0801f214 	.word	0x0801f214
 801377c:	0801f758 	.word	0x0801f758
 8013780:	0801f268 	.word	0x0801f268
 8013784:	0801f770 	.word	0x0801f770
 8013788:	20010674 	.word	0x20010674
 801378c:	0801f798 	.word	0x0801f798
 8013790:	2300      	movs	r3, #0
 8013792:	442b      	add	r3, r5
 8013794:	4423      	add	r3, r4
 8013796:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	1ad3      	subs	r3, r2, r3
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	da02      	bge.n	80137aa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	68ba      	ldr	r2, [r7, #8]
 80137a8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80137aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ac:	891b      	ldrh	r3, [r3, #8]
 80137ae:	461c      	mov	r4, r3
 80137b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	899b      	ldrh	r3, [r3, #12]
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7f8 ff43 	bl	800c644 <lwip_htons>
 80137be:	4603      	mov	r3, r0
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	f003 0303 	and.w	r3, r3, #3
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d001      	beq.n	80137ce <tcp_output+0x2de>
 80137ca:	2301      	movs	r3, #1
 80137cc:	e000      	b.n	80137d0 <tcp_output+0x2e0>
 80137ce:	2300      	movs	r3, #0
 80137d0:	4423      	add	r3, r4
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d049      	beq.n	801386a <tcp_output+0x37a>
      seg->next = NULL;
 80137d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d8:	2200      	movs	r2, #0
 80137da:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d105      	bne.n	80137f0 <tcp_output+0x300>
        pcb->unacked = seg;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137e8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80137ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ec:	623b      	str	r3, [r7, #32]
 80137ee:	e03f      	b.n	8013870 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80137f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	685b      	ldr	r3, [r3, #4]
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7f8 ff39 	bl	800c66e <lwip_htonl>
 80137fc:	4604      	mov	r4, r0
 80137fe:	6a3b      	ldr	r3, [r7, #32]
 8013800:	68db      	ldr	r3, [r3, #12]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	4618      	mov	r0, r3
 8013806:	f7f8 ff32 	bl	800c66e <lwip_htonl>
 801380a:	4603      	mov	r3, r0
 801380c:	1ae3      	subs	r3, r4, r3
 801380e:	2b00      	cmp	r3, #0
 8013810:	da24      	bge.n	801385c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	3370      	adds	r3, #112	; 0x70
 8013816:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013818:	e002      	b.n	8013820 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801381a:	69fb      	ldr	r3, [r7, #28]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013820:	69fb      	ldr	r3, [r7, #28]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d011      	beq.n	801384c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	68db      	ldr	r3, [r3, #12]
 801382e:	685b      	ldr	r3, [r3, #4]
 8013830:	4618      	mov	r0, r3
 8013832:	f7f8 ff1c 	bl	800c66e <lwip_htonl>
 8013836:	4604      	mov	r4, r0
 8013838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	685b      	ldr	r3, [r3, #4]
 801383e:	4618      	mov	r0, r3
 8013840:	f7f8 ff15 	bl	800c66e <lwip_htonl>
 8013844:	4603      	mov	r3, r0
 8013846:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013848:	2b00      	cmp	r3, #0
 801384a:	dbe6      	blt.n	801381a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801384c:	69fb      	ldr	r3, [r7, #28]
 801384e:	681a      	ldr	r2, [r3, #0]
 8013850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013852:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013858:	601a      	str	r2, [r3, #0]
 801385a:	e009      	b.n	8013870 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801385c:	6a3b      	ldr	r3, [r7, #32]
 801385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013860:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013862:	6a3b      	ldr	r3, [r7, #32]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	623b      	str	r3, [r7, #32]
 8013868:	e002      	b.n	8013870 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801386a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801386c:	f7fb ff1d 	bl	800f6aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013874:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013878:	2b00      	cmp	r3, #0
 801387a:	d012      	beq.n	80138a2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387e:	68db      	ldr	r3, [r3, #12]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	4618      	mov	r0, r3
 8013884:	f7f8 fef3 	bl	800c66e <lwip_htonl>
 8013888:	4602      	mov	r2, r0
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801388e:	1ad3      	subs	r3, r2, r3
 8013890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013892:	8912      	ldrh	r2, [r2, #8]
 8013894:	4413      	add	r3, r2
  while (seg != NULL &&
 8013896:	69ba      	ldr	r2, [r7, #24]
 8013898:	429a      	cmp	r2, r3
 801389a:	f4bf aed9 	bcs.w	8013650 <tcp_output+0x160>
 801389e:	e000      	b.n	80138a2 <tcp_output+0x3b2>
      break;
 80138a0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d108      	bne.n	80138bc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2200      	movs	r2, #0
 80138ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80138b2:	e004      	b.n	80138be <tcp_output+0x3ce>
    goto output_done;
 80138b4:	bf00      	nop
 80138b6:	e002      	b.n	80138be <tcp_output+0x3ce>
    goto output_done;
 80138b8:	bf00      	nop
 80138ba:	e000      	b.n	80138be <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80138bc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	8b5b      	ldrh	r3, [r3, #26]
 80138c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80138cc:	2300      	movs	r3, #0
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3728      	adds	r7, #40	; 0x28
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bdb0      	pop	{r4, r5, r7, pc}
 80138d6:	bf00      	nop

080138d8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d106      	bne.n	80138f4 <tcp_output_segment_busy+0x1c>
 80138e6:	4b09      	ldr	r3, [pc, #36]	; (801390c <tcp_output_segment_busy+0x34>)
 80138e8:	f240 529a 	movw	r2, #1434	; 0x59a
 80138ec:	4908      	ldr	r1, [pc, #32]	; (8013910 <tcp_output_segment_busy+0x38>)
 80138ee:	4809      	ldr	r0, [pc, #36]	; (8013914 <tcp_output_segment_busy+0x3c>)
 80138f0:	f007 ffe6 	bl	801b8c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	7b9b      	ldrb	r3, [r3, #14]
 80138fa:	2b01      	cmp	r3, #1
 80138fc:	d001      	beq.n	8013902 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80138fe:	2301      	movs	r3, #1
 8013900:	e000      	b.n	8013904 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013902:	2300      	movs	r3, #0
}
 8013904:	4618      	mov	r0, r3
 8013906:	3708      	adds	r7, #8
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	0801f214 	.word	0x0801f214
 8013910:	0801f7b0 	.word	0x0801f7b0
 8013914:	0801f268 	.word	0x0801f268

08013918 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013918:	b5b0      	push	{r4, r5, r7, lr}
 801391a:	b08c      	sub	sp, #48	; 0x30
 801391c:	af04      	add	r7, sp, #16
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	60b9      	str	r1, [r7, #8]
 8013922:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d106      	bne.n	8013938 <tcp_output_segment+0x20>
 801392a:	4b63      	ldr	r3, [pc, #396]	; (8013ab8 <tcp_output_segment+0x1a0>)
 801392c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013930:	4962      	ldr	r1, [pc, #392]	; (8013abc <tcp_output_segment+0x1a4>)
 8013932:	4863      	ldr	r0, [pc, #396]	; (8013ac0 <tcp_output_segment+0x1a8>)
 8013934:	f007 ffc4 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d106      	bne.n	801394c <tcp_output_segment+0x34>
 801393e:	4b5e      	ldr	r3, [pc, #376]	; (8013ab8 <tcp_output_segment+0x1a0>)
 8013940:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013944:	495f      	ldr	r1, [pc, #380]	; (8013ac4 <tcp_output_segment+0x1ac>)
 8013946:	485e      	ldr	r0, [pc, #376]	; (8013ac0 <tcp_output_segment+0x1a8>)
 8013948:	f007 ffba 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d106      	bne.n	8013960 <tcp_output_segment+0x48>
 8013952:	4b59      	ldr	r3, [pc, #356]	; (8013ab8 <tcp_output_segment+0x1a0>)
 8013954:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013958:	495b      	ldr	r1, [pc, #364]	; (8013ac8 <tcp_output_segment+0x1b0>)
 801395a:	4859      	ldr	r0, [pc, #356]	; (8013ac0 <tcp_output_segment+0x1a8>)
 801395c:	f007 ffb0 	bl	801b8c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013960:	68f8      	ldr	r0, [r7, #12]
 8013962:	f7ff ffb9 	bl	80138d8 <tcp_output_segment_busy>
 8013966:	4603      	mov	r3, r0
 8013968:	2b00      	cmp	r3, #0
 801396a:	d001      	beq.n	8013970 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801396c:	2300      	movs	r3, #0
 801396e:	e09f      	b.n	8013ab0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	68dc      	ldr	r4, [r3, #12]
 8013978:	4610      	mov	r0, r2
 801397a:	f7f8 fe78 	bl	800c66e <lwip_htonl>
 801397e:	4603      	mov	r3, r0
 8013980:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	68dc      	ldr	r4, [r3, #12]
 801398a:	4610      	mov	r0, r2
 801398c:	f7f8 fe5a 	bl	800c644 <lwip_htons>
 8013990:	4603      	mov	r3, r0
 8013992:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013998:	68ba      	ldr	r2, [r7, #8]
 801399a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801399c:	441a      	add	r2, r3
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	68db      	ldr	r3, [r3, #12]
 80139a6:	3314      	adds	r3, #20
 80139a8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	7a9b      	ldrb	r3, [r3, #10]
 80139ae:	f003 0301 	and.w	r3, r3, #1
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d015      	beq.n	80139e2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	3304      	adds	r3, #4
 80139ba:	461a      	mov	r2, r3
 80139bc:	6879      	ldr	r1, [r7, #4]
 80139be:	f44f 7006 	mov.w	r0, #536	; 0x218
 80139c2:	f7fc fa37 	bl	800fe34 <tcp_eff_send_mss_netif>
 80139c6:	4603      	mov	r3, r0
 80139c8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80139ca:	8b7b      	ldrh	r3, [r7, #26]
 80139cc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7f8 fe4c 	bl	800c66e <lwip_htonl>
 80139d6:	4602      	mov	r2, r0
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	601a      	str	r2, [r3, #0]
    opts += 1;
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	3304      	adds	r3, #4
 80139e0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	da02      	bge.n	80139f2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	2200      	movs	r2, #0
 80139f0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d10c      	bne.n	8013a14 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80139fa:	4b34      	ldr	r3, [pc, #208]	; (8013acc <tcp_output_segment+0x1b4>)
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	685b      	ldr	r3, [r3, #4]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7f8 fe30 	bl	800c66e <lwip_htonl>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	68da      	ldr	r2, [r3, #12]
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	685b      	ldr	r3, [r3, #4]
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	1ad3      	subs	r3, r2, r3
 8013a20:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	8959      	ldrh	r1, [r3, #10]
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	8b3a      	ldrh	r2, [r7, #24]
 8013a2e:	1a8a      	subs	r2, r1, r2
 8013a30:	b292      	uxth	r2, r2
 8013a32:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	8919      	ldrh	r1, [r3, #8]
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	8b3a      	ldrh	r2, [r7, #24]
 8013a40:	1a8a      	subs	r2, r1, r2
 8013a42:	b292      	uxth	r2, r2
 8013a44:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	685b      	ldr	r3, [r3, #4]
 8013a4a:	68fa      	ldr	r2, [r7, #12]
 8013a4c:	68d2      	ldr	r2, [r2, #12]
 8013a4e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	68db      	ldr	r3, [r3, #12]
 8013a54:	2200      	movs	r2, #0
 8013a56:	741a      	strb	r2, [r3, #16]
 8013a58:	2200      	movs	r2, #0
 8013a5a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	f103 0214 	add.w	r2, r3, #20
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	7a9b      	ldrb	r3, [r3, #10]
 8013a68:	009b      	lsls	r3, r3, #2
 8013a6a:	f003 0304 	and.w	r3, r3, #4
 8013a6e:	4413      	add	r3, r2
 8013a70:	69fa      	ldr	r2, [r7, #28]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d006      	beq.n	8013a84 <tcp_output_segment+0x16c>
 8013a76:	4b10      	ldr	r3, [pc, #64]	; (8013ab8 <tcp_output_segment+0x1a0>)
 8013a78:	f240 621c 	movw	r2, #1564	; 0x61c
 8013a7c:	4914      	ldr	r1, [pc, #80]	; (8013ad0 <tcp_output_segment+0x1b8>)
 8013a7e:	4810      	ldr	r0, [pc, #64]	; (8013ac0 <tcp_output_segment+0x1a8>)
 8013a80:	f007 ff1e 	bl	801b8c0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	6858      	ldr	r0, [r3, #4]
 8013a88:	68b9      	ldr	r1, [r7, #8]
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	1d1c      	adds	r4, r3, #4
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	7add      	ldrb	r5, [r3, #11]
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	7a9b      	ldrb	r3, [r3, #10]
 8013a96:	687a      	ldr	r2, [r7, #4]
 8013a98:	9202      	str	r2, [sp, #8]
 8013a9a:	2206      	movs	r2, #6
 8013a9c:	9201      	str	r2, [sp, #4]
 8013a9e:	9300      	str	r3, [sp, #0]
 8013aa0:	462b      	mov	r3, r5
 8013aa2:	4622      	mov	r2, r4
 8013aa4:	f004 fce2 	bl	801846c <ip4_output_if>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013aac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	3720      	adds	r7, #32
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ab8:	0801f214 	.word	0x0801f214
 8013abc:	0801f7d8 	.word	0x0801f7d8
 8013ac0:	0801f268 	.word	0x0801f268
 8013ac4:	0801f7f8 	.word	0x0801f7f8
 8013ac8:	0801f818 	.word	0x0801f818
 8013acc:	20010664 	.word	0x20010664
 8013ad0:	0801f83c 	.word	0x0801f83c

08013ad4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013ad4:	b5b0      	push	{r4, r5, r7, lr}
 8013ad6:	b084      	sub	sp, #16
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d106      	bne.n	8013af0 <tcp_rexmit_rto_prepare+0x1c>
 8013ae2:	4b31      	ldr	r3, [pc, #196]	; (8013ba8 <tcp_rexmit_rto_prepare+0xd4>)
 8013ae4:	f240 6263 	movw	r2, #1635	; 0x663
 8013ae8:	4930      	ldr	r1, [pc, #192]	; (8013bac <tcp_rexmit_rto_prepare+0xd8>)
 8013aea:	4831      	ldr	r0, [pc, #196]	; (8013bb0 <tcp_rexmit_rto_prepare+0xdc>)
 8013aec:	f007 fee8 	bl	801b8c0 <iprintf>

  if (pcb->unacked == NULL) {
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d102      	bne.n	8013afe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013af8:	f06f 0305 	mvn.w	r3, #5
 8013afc:	e050      	b.n	8013ba0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b02:	60fb      	str	r3, [r7, #12]
 8013b04:	e00b      	b.n	8013b1e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013b06:	68f8      	ldr	r0, [r7, #12]
 8013b08:	f7ff fee6 	bl	80138d8 <tcp_output_segment_busy>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d002      	beq.n	8013b18 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013b12:	f06f 0305 	mvn.w	r3, #5
 8013b16:	e043      	b.n	8013ba0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	60fb      	str	r3, [r7, #12]
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d1ef      	bne.n	8013b06 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013b26:	68f8      	ldr	r0, [r7, #12]
 8013b28:	f7ff fed6 	bl	80138d8 <tcp_output_segment_busy>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d002      	beq.n	8013b38 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013b32:	f06f 0305 	mvn.w	r3, #5
 8013b36:	e033      	b.n	8013ba0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	8b5b      	ldrh	r3, [r3, #26]
 8013b52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	685b      	ldr	r3, [r3, #4]
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7f8 fd83 	bl	800c66e <lwip_htonl>
 8013b68:	4604      	mov	r4, r0
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	891b      	ldrh	r3, [r3, #8]
 8013b6e:	461d      	mov	r5, r3
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	68db      	ldr	r3, [r3, #12]
 8013b74:	899b      	ldrh	r3, [r3, #12]
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7f8 fd63 	bl	800c644 <lwip_htons>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	b2db      	uxtb	r3, r3
 8013b82:	f003 0303 	and.w	r3, r3, #3
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d001      	beq.n	8013b8e <tcp_rexmit_rto_prepare+0xba>
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	e000      	b.n	8013b90 <tcp_rexmit_rto_prepare+0xbc>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	442b      	add	r3, r5
 8013b92:	18e2      	adds	r2, r4, r3
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013b9e:	2300      	movs	r3, #0
}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3710      	adds	r7, #16
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ba8:	0801f214 	.word	0x0801f214
 8013bac:	0801f850 	.word	0x0801f850
 8013bb0:	0801f268 	.word	0x0801f268

08013bb4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d106      	bne.n	8013bd0 <tcp_rexmit_rto_commit+0x1c>
 8013bc2:	4b0d      	ldr	r3, [pc, #52]	; (8013bf8 <tcp_rexmit_rto_commit+0x44>)
 8013bc4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013bc8:	490c      	ldr	r1, [pc, #48]	; (8013bfc <tcp_rexmit_rto_commit+0x48>)
 8013bca:	480d      	ldr	r0, [pc, #52]	; (8013c00 <tcp_rexmit_rto_commit+0x4c>)
 8013bcc:	f007 fe78 	bl	801b8c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013bd6:	2bff      	cmp	r3, #255	; 0xff
 8013bd8:	d007      	beq.n	8013bea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013be0:	3301      	adds	r3, #1
 8013be2:	b2da      	uxtb	r2, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f7ff fc80 	bl	80134f0 <tcp_output>
}
 8013bf0:	bf00      	nop
 8013bf2:	3708      	adds	r7, #8
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	0801f214 	.word	0x0801f214
 8013bfc:	0801f874 	.word	0x0801f874
 8013c00:	0801f268 	.word	0x0801f268

08013c04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d106      	bne.n	8013c20 <tcp_rexmit_rto+0x1c>
 8013c12:	4b0a      	ldr	r3, [pc, #40]	; (8013c3c <tcp_rexmit_rto+0x38>)
 8013c14:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013c18:	4909      	ldr	r1, [pc, #36]	; (8013c40 <tcp_rexmit_rto+0x3c>)
 8013c1a:	480a      	ldr	r0, [pc, #40]	; (8013c44 <tcp_rexmit_rto+0x40>)
 8013c1c:	f007 fe50 	bl	801b8c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7ff ff57 	bl	8013ad4 <tcp_rexmit_rto_prepare>
 8013c26:	4603      	mov	r3, r0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d102      	bne.n	8013c32 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f7ff ffc1 	bl	8013bb4 <tcp_rexmit_rto_commit>
  }
}
 8013c32:	bf00      	nop
 8013c34:	3708      	adds	r7, #8
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	0801f214 	.word	0x0801f214
 8013c40:	0801f898 	.word	0x0801f898
 8013c44:	0801f268 	.word	0x0801f268

08013c48 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013c48:	b590      	push	{r4, r7, lr}
 8013c4a:	b085      	sub	sp, #20
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d106      	bne.n	8013c64 <tcp_rexmit+0x1c>
 8013c56:	4b2f      	ldr	r3, [pc, #188]	; (8013d14 <tcp_rexmit+0xcc>)
 8013c58:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013c5c:	492e      	ldr	r1, [pc, #184]	; (8013d18 <tcp_rexmit+0xd0>)
 8013c5e:	482f      	ldr	r0, [pc, #188]	; (8013d1c <tcp_rexmit+0xd4>)
 8013c60:	f007 fe2e 	bl	801b8c0 <iprintf>

  if (pcb->unacked == NULL) {
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d102      	bne.n	8013c72 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013c6c:	f06f 0305 	mvn.w	r3, #5
 8013c70:	e04c      	b.n	8013d0c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c76:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013c78:	68b8      	ldr	r0, [r7, #8]
 8013c7a:	f7ff fe2d 	bl	80138d8 <tcp_output_segment_busy>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d002      	beq.n	8013c8a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013c84:	f06f 0305 	mvn.w	r3, #5
 8013c88:	e040      	b.n	8013d0c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	336c      	adds	r3, #108	; 0x6c
 8013c96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013c98:	e002      	b.n	8013ca0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d011      	beq.n	8013ccc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	68db      	ldr	r3, [r3, #12]
 8013cae:	685b      	ldr	r3, [r3, #4]
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f7f8 fcdc 	bl	800c66e <lwip_htonl>
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	68db      	ldr	r3, [r3, #12]
 8013cbc:	685b      	ldr	r3, [r3, #4]
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7f8 fcd5 	bl	800c66e <lwip_htonl>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	dbe6      	blt.n	8013c9a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	68ba      	ldr	r2, [r7, #8]
 8013cd8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d103      	bne.n	8013cea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013cf0:	2bff      	cmp	r3, #255	; 0xff
 8013cf2:	d007      	beq.n	8013d04 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	b2da      	uxtb	r2, r3
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2200      	movs	r2, #0
 8013d08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013d0a:	2300      	movs	r3, #0
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3714      	adds	r7, #20
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd90      	pop	{r4, r7, pc}
 8013d14:	0801f214 	.word	0x0801f214
 8013d18:	0801f8b4 	.word	0x0801f8b4
 8013d1c:	0801f268 	.word	0x0801f268

08013d20 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b082      	sub	sp, #8
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d106      	bne.n	8013d3c <tcp_rexmit_fast+0x1c>
 8013d2e:	4b2a      	ldr	r3, [pc, #168]	; (8013dd8 <tcp_rexmit_fast+0xb8>)
 8013d30:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013d34:	4929      	ldr	r1, [pc, #164]	; (8013ddc <tcp_rexmit_fast+0xbc>)
 8013d36:	482a      	ldr	r0, [pc, #168]	; (8013de0 <tcp_rexmit_fast+0xc0>)
 8013d38:	f007 fdc2 	bl	801b8c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d045      	beq.n	8013dd0 <tcp_rexmit_fast+0xb0>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	8b5b      	ldrh	r3, [r3, #26]
 8013d48:	f003 0304 	and.w	r3, r3, #4
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d13f      	bne.n	8013dd0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f7ff ff79 	bl	8013c48 <tcp_rexmit>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d139      	bne.n	8013dd0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	bf28      	it	cs
 8013d6c:	4613      	movcs	r3, r2
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	da00      	bge.n	8013d76 <tcp_rexmit_fast+0x56>
 8013d74:	3301      	adds	r3, #1
 8013d76:	105b      	asrs	r3, r3, #1
 8013d78:	b29a      	uxth	r2, r3
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013d86:	461a      	mov	r2, r3
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d8c:	005b      	lsls	r3, r3, #1
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d206      	bcs.n	8013da0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d96:	005b      	lsls	r3, r3, #1
 8013d98:	b29a      	uxth	r2, r3
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013daa:	4619      	mov	r1, r3
 8013dac:	0049      	lsls	r1, r1, #1
 8013dae:	440b      	add	r3, r1
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	4413      	add	r3, r2
 8013db4:	b29a      	uxth	r2, r3
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	8b5b      	ldrh	r3, [r3, #26]
 8013dc0:	f043 0304 	orr.w	r3, r3, #4
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013dd0:	bf00      	nop
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	0801f214 	.word	0x0801f214
 8013ddc:	0801f8cc 	.word	0x0801f8cc
 8013de0:	0801f268 	.word	0x0801f268

08013de4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b086      	sub	sp, #24
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	60f8      	str	r0, [r7, #12]
 8013dec:	607b      	str	r3, [r7, #4]
 8013dee:	460b      	mov	r3, r1
 8013df0:	817b      	strh	r3, [r7, #10]
 8013df2:	4613      	mov	r3, r2
 8013df4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013df6:	897a      	ldrh	r2, [r7, #10]
 8013df8:	893b      	ldrh	r3, [r7, #8]
 8013dfa:	4413      	add	r3, r2
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	3314      	adds	r3, #20
 8013e00:	b29b      	uxth	r3, r3
 8013e02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e06:	4619      	mov	r1, r3
 8013e08:	2022      	movs	r0, #34	; 0x22
 8013e0a:	f7f9 fcef 	bl	800d7ec <pbuf_alloc>
 8013e0e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d04d      	beq.n	8013eb2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013e16:	897b      	ldrh	r3, [r7, #10]
 8013e18:	3313      	adds	r3, #19
 8013e1a:	697a      	ldr	r2, [r7, #20]
 8013e1c:	8952      	ldrh	r2, [r2, #10]
 8013e1e:	4293      	cmp	r3, r2
 8013e20:	db06      	blt.n	8013e30 <tcp_output_alloc_header_common+0x4c>
 8013e22:	4b26      	ldr	r3, [pc, #152]	; (8013ebc <tcp_output_alloc_header_common+0xd8>)
 8013e24:	f240 7223 	movw	r2, #1827	; 0x723
 8013e28:	4925      	ldr	r1, [pc, #148]	; (8013ec0 <tcp_output_alloc_header_common+0xdc>)
 8013e2a:	4826      	ldr	r0, [pc, #152]	; (8013ec4 <tcp_output_alloc_header_common+0xe0>)
 8013e2c:	f007 fd48 	bl	801b8c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013e36:	8c3b      	ldrh	r3, [r7, #32]
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f7f8 fc03 	bl	800c644 <lwip_htons>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	461a      	mov	r2, r3
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7f8 fbfb 	bl	800c644 <lwip_htons>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	461a      	mov	r2, r3
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013e5c:	68f8      	ldr	r0, [r7, #12]
 8013e5e:	f7f8 fc06 	bl	800c66e <lwip_htonl>
 8013e62:	4602      	mov	r2, r0
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013e68:	897b      	ldrh	r3, [r7, #10]
 8013e6a:	089b      	lsrs	r3, r3, #2
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	3305      	adds	r3, #5
 8013e70:	b29b      	uxth	r3, r3
 8013e72:	031b      	lsls	r3, r3, #12
 8013e74:	b29a      	uxth	r2, r3
 8013e76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013e7a:	b29b      	uxth	r3, r3
 8013e7c:	4313      	orrs	r3, r2
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7f8 fbdf 	bl	800c644 <lwip_htons>
 8013e86:	4603      	mov	r3, r0
 8013e88:	461a      	mov	r2, r3
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013e8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7f8 fbd7 	bl	800c644 <lwip_htons>
 8013e96:	4603      	mov	r3, r0
 8013e98:	461a      	mov	r2, r3
 8013e9a:	693b      	ldr	r3, [r7, #16]
 8013e9c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	741a      	strb	r2, [r3, #16]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013ea8:	693b      	ldr	r3, [r7, #16]
 8013eaa:	2200      	movs	r2, #0
 8013eac:	749a      	strb	r2, [r3, #18]
 8013eae:	2200      	movs	r2, #0
 8013eb0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013eb2:	697b      	ldr	r3, [r7, #20]
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3718      	adds	r7, #24
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}
 8013ebc:	0801f214 	.word	0x0801f214
 8013ec0:	0801f8ec 	.word	0x0801f8ec
 8013ec4:	0801f268 	.word	0x0801f268

08013ec8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013ec8:	b5b0      	push	{r4, r5, r7, lr}
 8013eca:	b08a      	sub	sp, #40	; 0x28
 8013ecc:	af04      	add	r7, sp, #16
 8013ece:	60f8      	str	r0, [r7, #12]
 8013ed0:	607b      	str	r3, [r7, #4]
 8013ed2:	460b      	mov	r3, r1
 8013ed4:	817b      	strh	r3, [r7, #10]
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d106      	bne.n	8013eee <tcp_output_alloc_header+0x26>
 8013ee0:	4b15      	ldr	r3, [pc, #84]	; (8013f38 <tcp_output_alloc_header+0x70>)
 8013ee2:	f240 7242 	movw	r2, #1858	; 0x742
 8013ee6:	4915      	ldr	r1, [pc, #84]	; (8013f3c <tcp_output_alloc_header+0x74>)
 8013ee8:	4815      	ldr	r0, [pc, #84]	; (8013f40 <tcp_output_alloc_header+0x78>)
 8013eea:	f007 fce9 	bl	801b8c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	8adb      	ldrh	r3, [r3, #22]
 8013ef6:	68fa      	ldr	r2, [r7, #12]
 8013ef8:	8b12      	ldrh	r2, [r2, #24]
 8013efa:	68f9      	ldr	r1, [r7, #12]
 8013efc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013efe:	893d      	ldrh	r5, [r7, #8]
 8013f00:	897c      	ldrh	r4, [r7, #10]
 8013f02:	9103      	str	r1, [sp, #12]
 8013f04:	2110      	movs	r1, #16
 8013f06:	9102      	str	r1, [sp, #8]
 8013f08:	9201      	str	r2, [sp, #4]
 8013f0a:	9300      	str	r3, [sp, #0]
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	462a      	mov	r2, r5
 8013f10:	4621      	mov	r1, r4
 8013f12:	f7ff ff67 	bl	8013de4 <tcp_output_alloc_header_common>
 8013f16:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d006      	beq.n	8013f2c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f22:	68fa      	ldr	r2, [r7, #12]
 8013f24:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013f26:	441a      	add	r2, r3
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013f2c:	697b      	ldr	r3, [r7, #20]
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3718      	adds	r7, #24
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bdb0      	pop	{r4, r5, r7, pc}
 8013f36:	bf00      	nop
 8013f38:	0801f214 	.word	0x0801f214
 8013f3c:	0801f91c 	.word	0x0801f91c
 8013f40:	0801f268 	.word	0x0801f268

08013f44 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b088      	sub	sp, #32
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	60f8      	str	r0, [r7, #12]
 8013f4c:	60b9      	str	r1, [r7, #8]
 8013f4e:	4611      	mov	r1, r2
 8013f50:	461a      	mov	r2, r3
 8013f52:	460b      	mov	r3, r1
 8013f54:	71fb      	strb	r3, [r7, #7]
 8013f56:	4613      	mov	r3, r2
 8013f58:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d106      	bne.n	8013f72 <tcp_output_fill_options+0x2e>
 8013f64:	4b13      	ldr	r3, [pc, #76]	; (8013fb4 <tcp_output_fill_options+0x70>)
 8013f66:	f240 7256 	movw	r2, #1878	; 0x756
 8013f6a:	4913      	ldr	r1, [pc, #76]	; (8013fb8 <tcp_output_fill_options+0x74>)
 8013f6c:	4813      	ldr	r0, [pc, #76]	; (8013fbc <tcp_output_fill_options+0x78>)
 8013f6e:	f007 fca7 	bl	801b8c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013f78:	69bb      	ldr	r3, [r7, #24]
 8013f7a:	3314      	adds	r3, #20
 8013f7c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	f103 0214 	add.w	r2, r3, #20
 8013f84:	8bfb      	ldrh	r3, [r7, #30]
 8013f86:	009b      	lsls	r3, r3, #2
 8013f88:	4619      	mov	r1, r3
 8013f8a:	79fb      	ldrb	r3, [r7, #7]
 8013f8c:	009b      	lsls	r3, r3, #2
 8013f8e:	f003 0304 	and.w	r3, r3, #4
 8013f92:	440b      	add	r3, r1
 8013f94:	4413      	add	r3, r2
 8013f96:	697a      	ldr	r2, [r7, #20]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d006      	beq.n	8013faa <tcp_output_fill_options+0x66>
 8013f9c:	4b05      	ldr	r3, [pc, #20]	; (8013fb4 <tcp_output_fill_options+0x70>)
 8013f9e:	f240 7275 	movw	r2, #1909	; 0x775
 8013fa2:	4907      	ldr	r1, [pc, #28]	; (8013fc0 <tcp_output_fill_options+0x7c>)
 8013fa4:	4805      	ldr	r0, [pc, #20]	; (8013fbc <tcp_output_fill_options+0x78>)
 8013fa6:	f007 fc8b 	bl	801b8c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013faa:	bf00      	nop
 8013fac:	3720      	adds	r7, #32
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	0801f214 	.word	0x0801f214
 8013fb8:	0801f944 	.word	0x0801f944
 8013fbc:	0801f268 	.word	0x0801f268
 8013fc0:	0801f83c 	.word	0x0801f83c

08013fc4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b08a      	sub	sp, #40	; 0x28
 8013fc8:	af04      	add	r7, sp, #16
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	607a      	str	r2, [r7, #4]
 8013fd0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d106      	bne.n	8013fe6 <tcp_output_control_segment+0x22>
 8013fd8:	4b1c      	ldr	r3, [pc, #112]	; (801404c <tcp_output_control_segment+0x88>)
 8013fda:	f240 7287 	movw	r2, #1927	; 0x787
 8013fde:	491c      	ldr	r1, [pc, #112]	; (8014050 <tcp_output_control_segment+0x8c>)
 8013fe0:	481c      	ldr	r0, [pc, #112]	; (8014054 <tcp_output_control_segment+0x90>)
 8013fe2:	f007 fc6d 	bl	801b8c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013fe6:	683a      	ldr	r2, [r7, #0]
 8013fe8:	6879      	ldr	r1, [r7, #4]
 8013fea:	68f8      	ldr	r0, [r7, #12]
 8013fec:	f7fe fae8 	bl	80125c0 <tcp_route>
 8013ff0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d102      	bne.n	8013ffe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013ff8:	23fc      	movs	r3, #252	; 0xfc
 8013ffa:	75fb      	strb	r3, [r7, #23]
 8013ffc:	e01c      	b.n	8014038 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d006      	beq.n	8014012 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	7adb      	ldrb	r3, [r3, #11]
 8014008:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	7a9b      	ldrb	r3, [r3, #10]
 801400e:	757b      	strb	r3, [r7, #21]
 8014010:	e003      	b.n	801401a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014012:	23ff      	movs	r3, #255	; 0xff
 8014014:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014016:	2300      	movs	r3, #0
 8014018:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801401a:	7dba      	ldrb	r2, [r7, #22]
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	9302      	str	r3, [sp, #8]
 8014020:	2306      	movs	r3, #6
 8014022:	9301      	str	r3, [sp, #4]
 8014024:	7d7b      	ldrb	r3, [r7, #21]
 8014026:	9300      	str	r3, [sp, #0]
 8014028:	4613      	mov	r3, r2
 801402a:	683a      	ldr	r2, [r7, #0]
 801402c:	6879      	ldr	r1, [r7, #4]
 801402e:	68b8      	ldr	r0, [r7, #8]
 8014030:	f004 fa1c 	bl	801846c <ip4_output_if>
 8014034:	4603      	mov	r3, r0
 8014036:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014038:	68b8      	ldr	r0, [r7, #8]
 801403a:	f7f9 feed 	bl	800de18 <pbuf_free>
  return err;
 801403e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014042:	4618      	mov	r0, r3
 8014044:	3718      	adds	r7, #24
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	0801f214 	.word	0x0801f214
 8014050:	0801f96c 	.word	0x0801f96c
 8014054:	0801f268 	.word	0x0801f268

08014058 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014058:	b590      	push	{r4, r7, lr}
 801405a:	b08b      	sub	sp, #44	; 0x2c
 801405c:	af04      	add	r7, sp, #16
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
 8014064:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d106      	bne.n	801407a <tcp_rst+0x22>
 801406c:	4b1f      	ldr	r3, [pc, #124]	; (80140ec <tcp_rst+0x94>)
 801406e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014072:	491f      	ldr	r1, [pc, #124]	; (80140f0 <tcp_rst+0x98>)
 8014074:	481f      	ldr	r0, [pc, #124]	; (80140f4 <tcp_rst+0x9c>)
 8014076:	f007 fc23 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407c:	2b00      	cmp	r3, #0
 801407e:	d106      	bne.n	801408e <tcp_rst+0x36>
 8014080:	4b1a      	ldr	r3, [pc, #104]	; (80140ec <tcp_rst+0x94>)
 8014082:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014086:	491c      	ldr	r1, [pc, #112]	; (80140f8 <tcp_rst+0xa0>)
 8014088:	481a      	ldr	r0, [pc, #104]	; (80140f4 <tcp_rst+0x9c>)
 801408a:	f007 fc19 	bl	801b8c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801408e:	2300      	movs	r3, #0
 8014090:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014092:	f246 0308 	movw	r3, #24584	; 0x6008
 8014096:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014098:	7dfb      	ldrb	r3, [r7, #23]
 801409a:	b29c      	uxth	r4, r3
 801409c:	68b8      	ldr	r0, [r7, #8]
 801409e:	f7f8 fae6 	bl	800c66e <lwip_htonl>
 80140a2:	4602      	mov	r2, r0
 80140a4:	8abb      	ldrh	r3, [r7, #20]
 80140a6:	9303      	str	r3, [sp, #12]
 80140a8:	2314      	movs	r3, #20
 80140aa:	9302      	str	r3, [sp, #8]
 80140ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80140ae:	9301      	str	r3, [sp, #4]
 80140b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80140b2:	9300      	str	r3, [sp, #0]
 80140b4:	4613      	mov	r3, r2
 80140b6:	2200      	movs	r2, #0
 80140b8:	4621      	mov	r1, r4
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f7ff fe92 	bl	8013de4 <tcp_output_alloc_header_common>
 80140c0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80140c2:	693b      	ldr	r3, [r7, #16]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d00c      	beq.n	80140e2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80140c8:	7dfb      	ldrb	r3, [r7, #23]
 80140ca:	2200      	movs	r2, #0
 80140cc:	6939      	ldr	r1, [r7, #16]
 80140ce:	68f8      	ldr	r0, [r7, #12]
 80140d0:	f7ff ff38 	bl	8013f44 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80140d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140d6:	683a      	ldr	r2, [r7, #0]
 80140d8:	6939      	ldr	r1, [r7, #16]
 80140da:	68f8      	ldr	r0, [r7, #12]
 80140dc:	f7ff ff72 	bl	8013fc4 <tcp_output_control_segment>
 80140e0:	e000      	b.n	80140e4 <tcp_rst+0x8c>
    return;
 80140e2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80140e4:	371c      	adds	r7, #28
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd90      	pop	{r4, r7, pc}
 80140ea:	bf00      	nop
 80140ec:	0801f214 	.word	0x0801f214
 80140f0:	0801f998 	.word	0x0801f998
 80140f4:	0801f268 	.word	0x0801f268
 80140f8:	0801f9b4 	.word	0x0801f9b4

080140fc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80140fc:	b590      	push	{r4, r7, lr}
 80140fe:	b087      	sub	sp, #28
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014104:	2300      	movs	r3, #0
 8014106:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014108:	2300      	movs	r3, #0
 801410a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d106      	bne.n	8014120 <tcp_send_empty_ack+0x24>
 8014112:	4b28      	ldr	r3, [pc, #160]	; (80141b4 <tcp_send_empty_ack+0xb8>)
 8014114:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014118:	4927      	ldr	r1, [pc, #156]	; (80141b8 <tcp_send_empty_ack+0xbc>)
 801411a:	4828      	ldr	r0, [pc, #160]	; (80141bc <tcp_send_empty_ack+0xc0>)
 801411c:	f007 fbd0 	bl	801b8c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014120:	7dfb      	ldrb	r3, [r7, #23]
 8014122:	009b      	lsls	r3, r3, #2
 8014124:	b2db      	uxtb	r3, r3
 8014126:	f003 0304 	and.w	r3, r3, #4
 801412a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801412c:	7d7b      	ldrb	r3, [r7, #21]
 801412e:	b29c      	uxth	r4, r3
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014134:	4618      	mov	r0, r3
 8014136:	f7f8 fa9a 	bl	800c66e <lwip_htonl>
 801413a:	4603      	mov	r3, r0
 801413c:	2200      	movs	r2, #0
 801413e:	4621      	mov	r1, r4
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f7ff fec1 	bl	8013ec8 <tcp_output_alloc_header>
 8014146:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d109      	bne.n	8014162 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	8b5b      	ldrh	r3, [r3, #26]
 8014152:	f043 0303 	orr.w	r3, r3, #3
 8014156:	b29a      	uxth	r2, r3
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801415c:	f06f 0301 	mvn.w	r3, #1
 8014160:	e023      	b.n	80141aa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014162:	7dbb      	ldrb	r3, [r7, #22]
 8014164:	7dfa      	ldrb	r2, [r7, #23]
 8014166:	6939      	ldr	r1, [r7, #16]
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f7ff feeb 	bl	8013f44 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801416e:	687a      	ldr	r2, [r7, #4]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	3304      	adds	r3, #4
 8014174:	6939      	ldr	r1, [r7, #16]
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f7ff ff24 	bl	8013fc4 <tcp_output_control_segment>
 801417c:	4603      	mov	r3, r0
 801417e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d007      	beq.n	8014198 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	8b5b      	ldrh	r3, [r3, #26]
 801418c:	f043 0303 	orr.w	r3, r3, #3
 8014190:	b29a      	uxth	r2, r3
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	835a      	strh	r2, [r3, #26]
 8014196:	e006      	b.n	80141a6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	8b5b      	ldrh	r3, [r3, #26]
 801419c:	f023 0303 	bic.w	r3, r3, #3
 80141a0:	b29a      	uxth	r2, r3
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80141a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80141aa:	4618      	mov	r0, r3
 80141ac:	371c      	adds	r7, #28
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd90      	pop	{r4, r7, pc}
 80141b2:	bf00      	nop
 80141b4:	0801f214 	.word	0x0801f214
 80141b8:	0801f9d0 	.word	0x0801f9d0
 80141bc:	0801f268 	.word	0x0801f268

080141c0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80141c0:	b590      	push	{r4, r7, lr}
 80141c2:	b087      	sub	sp, #28
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80141c8:	2300      	movs	r3, #0
 80141ca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d106      	bne.n	80141e0 <tcp_keepalive+0x20>
 80141d2:	4b18      	ldr	r3, [pc, #96]	; (8014234 <tcp_keepalive+0x74>)
 80141d4:	f640 0224 	movw	r2, #2084	; 0x824
 80141d8:	4917      	ldr	r1, [pc, #92]	; (8014238 <tcp_keepalive+0x78>)
 80141da:	4818      	ldr	r0, [pc, #96]	; (801423c <tcp_keepalive+0x7c>)
 80141dc:	f007 fb70 	bl	801b8c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80141e0:	7dfb      	ldrb	r3, [r7, #23]
 80141e2:	b29c      	uxth	r4, r3
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141e8:	3b01      	subs	r3, #1
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7f8 fa3f 	bl	800c66e <lwip_htonl>
 80141f0:	4603      	mov	r3, r0
 80141f2:	2200      	movs	r2, #0
 80141f4:	4621      	mov	r1, r4
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7ff fe66 	bl	8013ec8 <tcp_output_alloc_header>
 80141fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80141fe:	693b      	ldr	r3, [r7, #16]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d102      	bne.n	801420a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014208:	e010      	b.n	801422c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801420a:	7dfb      	ldrb	r3, [r7, #23]
 801420c:	2200      	movs	r2, #0
 801420e:	6939      	ldr	r1, [r7, #16]
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f7ff fe97 	bl	8013f44 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014216:	687a      	ldr	r2, [r7, #4]
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	3304      	adds	r3, #4
 801421c:	6939      	ldr	r1, [r7, #16]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f7ff fed0 	bl	8013fc4 <tcp_output_control_segment>
 8014224:	4603      	mov	r3, r0
 8014226:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801422c:	4618      	mov	r0, r3
 801422e:	371c      	adds	r7, #28
 8014230:	46bd      	mov	sp, r7
 8014232:	bd90      	pop	{r4, r7, pc}
 8014234:	0801f214 	.word	0x0801f214
 8014238:	0801f9f0 	.word	0x0801f9f0
 801423c:	0801f268 	.word	0x0801f268

08014240 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014240:	b590      	push	{r4, r7, lr}
 8014242:	b08b      	sub	sp, #44	; 0x2c
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014248:	2300      	movs	r3, #0
 801424a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d106      	bne.n	8014262 <tcp_zero_window_probe+0x22>
 8014254:	4b4c      	ldr	r3, [pc, #304]	; (8014388 <tcp_zero_window_probe+0x148>)
 8014256:	f640 024f 	movw	r2, #2127	; 0x84f
 801425a:	494c      	ldr	r1, [pc, #304]	; (801438c <tcp_zero_window_probe+0x14c>)
 801425c:	484c      	ldr	r0, [pc, #304]	; (8014390 <tcp_zero_window_probe+0x150>)
 801425e:	f007 fb2f 	bl	801b8c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014266:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014268:	6a3b      	ldr	r3, [r7, #32]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d101      	bne.n	8014272 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801426e:	2300      	movs	r3, #0
 8014270:	e086      	b.n	8014380 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014278:	2bff      	cmp	r3, #255	; 0xff
 801427a:	d007      	beq.n	801428c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014282:	3301      	adds	r3, #1
 8014284:	b2da      	uxtb	r2, r3
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801428c:	6a3b      	ldr	r3, [r7, #32]
 801428e:	68db      	ldr	r3, [r3, #12]
 8014290:	899b      	ldrh	r3, [r3, #12]
 8014292:	b29b      	uxth	r3, r3
 8014294:	4618      	mov	r0, r3
 8014296:	f7f8 f9d5 	bl	800c644 <lwip_htons>
 801429a:	4603      	mov	r3, r0
 801429c:	b2db      	uxtb	r3, r3
 801429e:	f003 0301 	and.w	r3, r3, #1
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d005      	beq.n	80142b2 <tcp_zero_window_probe+0x72>
 80142a6:	6a3b      	ldr	r3, [r7, #32]
 80142a8:	891b      	ldrh	r3, [r3, #8]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d101      	bne.n	80142b2 <tcp_zero_window_probe+0x72>
 80142ae:	2301      	movs	r3, #1
 80142b0:	e000      	b.n	80142b4 <tcp_zero_window_probe+0x74>
 80142b2:	2300      	movs	r3, #0
 80142b4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80142b6:	7ffb      	ldrb	r3, [r7, #31]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	bf0c      	ite	eq
 80142bc:	2301      	moveq	r3, #1
 80142be:	2300      	movne	r3, #0
 80142c0:	b2db      	uxtb	r3, r3
 80142c2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80142c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142c8:	b299      	uxth	r1, r3
 80142ca:	6a3b      	ldr	r3, [r7, #32]
 80142cc:	68db      	ldr	r3, [r3, #12]
 80142ce:	685b      	ldr	r3, [r3, #4]
 80142d0:	8bba      	ldrh	r2, [r7, #28]
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f7ff fdf8 	bl	8013ec8 <tcp_output_alloc_header>
 80142d8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d102      	bne.n	80142e6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80142e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142e4:	e04c      	b.n	8014380 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80142e6:	69bb      	ldr	r3, [r7, #24]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80142ec:	7ffb      	ldrb	r3, [r7, #31]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d011      	beq.n	8014316 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	899b      	ldrh	r3, [r3, #12]
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	b21b      	sxth	r3, r3
 80142fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80142fe:	b21c      	sxth	r4, r3
 8014300:	2011      	movs	r0, #17
 8014302:	f7f8 f99f 	bl	800c644 <lwip_htons>
 8014306:	4603      	mov	r3, r0
 8014308:	b21b      	sxth	r3, r3
 801430a:	4323      	orrs	r3, r4
 801430c:	b21b      	sxth	r3, r3
 801430e:	b29a      	uxth	r2, r3
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	819a      	strh	r2, [r3, #12]
 8014314:	e010      	b.n	8014338 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014316:	69bb      	ldr	r3, [r7, #24]
 8014318:	685b      	ldr	r3, [r3, #4]
 801431a:	3314      	adds	r3, #20
 801431c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801431e:	6a3b      	ldr	r3, [r7, #32]
 8014320:	6858      	ldr	r0, [r3, #4]
 8014322:	6a3b      	ldr	r3, [r7, #32]
 8014324:	685b      	ldr	r3, [r3, #4]
 8014326:	891a      	ldrh	r2, [r3, #8]
 8014328:	6a3b      	ldr	r3, [r7, #32]
 801432a:	891b      	ldrh	r3, [r3, #8]
 801432c:	1ad3      	subs	r3, r2, r3
 801432e:	b29b      	uxth	r3, r3
 8014330:	2201      	movs	r2, #1
 8014332:	6939      	ldr	r1, [r7, #16]
 8014334:	f7f9 ff76 	bl	800e224 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014338:	6a3b      	ldr	r3, [r7, #32]
 801433a:	68db      	ldr	r3, [r3, #12]
 801433c:	685b      	ldr	r3, [r3, #4]
 801433e:	4618      	mov	r0, r3
 8014340:	f7f8 f995 	bl	800c66e <lwip_htonl>
 8014344:	4603      	mov	r3, r0
 8014346:	3301      	adds	r3, #1
 8014348:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	1ad3      	subs	r3, r2, r3
 8014352:	2b00      	cmp	r3, #0
 8014354:	da02      	bge.n	801435c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	68fa      	ldr	r2, [r7, #12]
 801435a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801435c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014360:	2200      	movs	r2, #0
 8014362:	69b9      	ldr	r1, [r7, #24]
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f7ff fded 	bl	8013f44 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801436a:	687a      	ldr	r2, [r7, #4]
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	3304      	adds	r3, #4
 8014370:	69b9      	ldr	r1, [r7, #24]
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f7ff fe26 	bl	8013fc4 <tcp_output_control_segment>
 8014378:	4603      	mov	r3, r0
 801437a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801437c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014380:	4618      	mov	r0, r3
 8014382:	372c      	adds	r7, #44	; 0x2c
 8014384:	46bd      	mov	sp, r7
 8014386:	bd90      	pop	{r4, r7, pc}
 8014388:	0801f214 	.word	0x0801f214
 801438c:	0801fa0c 	.word	0x0801fa0c
 8014390:	0801f268 	.word	0x0801f268

08014394 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801439c:	f7fa f830 	bl	800e400 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80143a0:	4b0a      	ldr	r3, [pc, #40]	; (80143cc <tcpip_tcp_timer+0x38>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d103      	bne.n	80143b0 <tcpip_tcp_timer+0x1c>
 80143a8:	4b09      	ldr	r3, [pc, #36]	; (80143d0 <tcpip_tcp_timer+0x3c>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d005      	beq.n	80143bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80143b0:	2200      	movs	r2, #0
 80143b2:	4908      	ldr	r1, [pc, #32]	; (80143d4 <tcpip_tcp_timer+0x40>)
 80143b4:	20fa      	movs	r0, #250	; 0xfa
 80143b6:	f000 f8f3 	bl	80145a0 <sys_timeout>
 80143ba:	e003      	b.n	80143c4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80143bc:	4b06      	ldr	r3, [pc, #24]	; (80143d8 <tcpip_tcp_timer+0x44>)
 80143be:	2200      	movs	r2, #0
 80143c0:	601a      	str	r2, [r3, #0]
  }
}
 80143c2:	bf00      	nop
 80143c4:	bf00      	nop
 80143c6:	3708      	adds	r7, #8
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}
 80143cc:	20010660 	.word	0x20010660
 80143d0:	20010670 	.word	0x20010670
 80143d4:	08014395 	.word	0x08014395
 80143d8:	20008b20 	.word	0x20008b20

080143dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80143e0:	4b0a      	ldr	r3, [pc, #40]	; (801440c <tcp_timer_needed+0x30>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d10f      	bne.n	8014408 <tcp_timer_needed+0x2c>
 80143e8:	4b09      	ldr	r3, [pc, #36]	; (8014410 <tcp_timer_needed+0x34>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d103      	bne.n	80143f8 <tcp_timer_needed+0x1c>
 80143f0:	4b08      	ldr	r3, [pc, #32]	; (8014414 <tcp_timer_needed+0x38>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d007      	beq.n	8014408 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80143f8:	4b04      	ldr	r3, [pc, #16]	; (801440c <tcp_timer_needed+0x30>)
 80143fa:	2201      	movs	r2, #1
 80143fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80143fe:	2200      	movs	r2, #0
 8014400:	4905      	ldr	r1, [pc, #20]	; (8014418 <tcp_timer_needed+0x3c>)
 8014402:	20fa      	movs	r0, #250	; 0xfa
 8014404:	f000 f8cc 	bl	80145a0 <sys_timeout>
  }
}
 8014408:	bf00      	nop
 801440a:	bd80      	pop	{r7, pc}
 801440c:	20008b20 	.word	0x20008b20
 8014410:	20010660 	.word	0x20010660
 8014414:	20010670 	.word	0x20010670
 8014418:	08014395 	.word	0x08014395

0801441c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b086      	sub	sp, #24
 8014420:	af00      	add	r7, sp, #0
 8014422:	60f8      	str	r0, [r7, #12]
 8014424:	60b9      	str	r1, [r7, #8]
 8014426:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014428:	200a      	movs	r0, #10
 801442a:	f7f8 fdc1 	bl	800cfb0 <memp_malloc>
 801442e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d109      	bne.n	801444a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d151      	bne.n	80144e0 <sys_timeout_abs+0xc4>
 801443c:	4b2a      	ldr	r3, [pc, #168]	; (80144e8 <sys_timeout_abs+0xcc>)
 801443e:	22be      	movs	r2, #190	; 0xbe
 8014440:	492a      	ldr	r1, [pc, #168]	; (80144ec <sys_timeout_abs+0xd0>)
 8014442:	482b      	ldr	r0, [pc, #172]	; (80144f0 <sys_timeout_abs+0xd4>)
 8014444:	f007 fa3c 	bl	801b8c0 <iprintf>
    return;
 8014448:	e04a      	b.n	80144e0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	2200      	movs	r2, #0
 801444e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	68ba      	ldr	r2, [r7, #8]
 8014454:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014456:	693b      	ldr	r3, [r7, #16]
 8014458:	687a      	ldr	r2, [r7, #4]
 801445a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	68fa      	ldr	r2, [r7, #12]
 8014460:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014462:	4b24      	ldr	r3, [pc, #144]	; (80144f4 <sys_timeout_abs+0xd8>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d103      	bne.n	8014472 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801446a:	4a22      	ldr	r2, [pc, #136]	; (80144f4 <sys_timeout_abs+0xd8>)
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	6013      	str	r3, [r2, #0]
    return;
 8014470:	e037      	b.n	80144e2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	685a      	ldr	r2, [r3, #4]
 8014476:	4b1f      	ldr	r3, [pc, #124]	; (80144f4 <sys_timeout_abs+0xd8>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	685b      	ldr	r3, [r3, #4]
 801447c:	1ad3      	subs	r3, r2, r3
 801447e:	0fdb      	lsrs	r3, r3, #31
 8014480:	f003 0301 	and.w	r3, r3, #1
 8014484:	b2db      	uxtb	r3, r3
 8014486:	2b00      	cmp	r3, #0
 8014488:	d007      	beq.n	801449a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801448a:	4b1a      	ldr	r3, [pc, #104]	; (80144f4 <sys_timeout_abs+0xd8>)
 801448c:	681a      	ldr	r2, [r3, #0]
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014492:	4a18      	ldr	r2, [pc, #96]	; (80144f4 <sys_timeout_abs+0xd8>)
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	6013      	str	r3, [r2, #0]
 8014498:	e023      	b.n	80144e2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801449a:	4b16      	ldr	r3, [pc, #88]	; (80144f4 <sys_timeout_abs+0xd8>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	617b      	str	r3, [r7, #20]
 80144a0:	e01a      	b.n	80144d8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d00b      	beq.n	80144c2 <sys_timeout_abs+0xa6>
 80144aa:	693b      	ldr	r3, [r7, #16]
 80144ac:	685a      	ldr	r2, [r3, #4]
 80144ae:	697b      	ldr	r3, [r7, #20]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	685b      	ldr	r3, [r3, #4]
 80144b4:	1ad3      	subs	r3, r2, r3
 80144b6:	0fdb      	lsrs	r3, r3, #31
 80144b8:	f003 0301 	and.w	r3, r3, #1
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d007      	beq.n	80144d2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	681a      	ldr	r2, [r3, #0]
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	693a      	ldr	r2, [r7, #16]
 80144ce:	601a      	str	r2, [r3, #0]
        break;
 80144d0:	e007      	b.n	80144e2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	617b      	str	r3, [r7, #20]
 80144d8:	697b      	ldr	r3, [r7, #20]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d1e1      	bne.n	80144a2 <sys_timeout_abs+0x86>
 80144de:	e000      	b.n	80144e2 <sys_timeout_abs+0xc6>
    return;
 80144e0:	bf00      	nop
      }
    }
  }
}
 80144e2:	3718      	adds	r7, #24
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	0801fa30 	.word	0x0801fa30
 80144ec:	0801fa64 	.word	0x0801fa64
 80144f0:	0801faa4 	.word	0x0801faa4
 80144f4:	20008b18 	.word	0x20008b18

080144f8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b086      	sub	sp, #24
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	685b      	ldr	r3, [r3, #4]
 8014508:	4798      	blx	r3

  now = sys_now();
 801450a:	f7f1 fa8b 	bl	8005a24 <sys_now>
 801450e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	681a      	ldr	r2, [r3, #0]
 8014514:	4b0f      	ldr	r3, [pc, #60]	; (8014554 <lwip_cyclic_timer+0x5c>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	4413      	add	r3, r2
 801451a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801451c:	68fa      	ldr	r2, [r7, #12]
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	1ad3      	subs	r3, r2, r3
 8014522:	0fdb      	lsrs	r3, r3, #31
 8014524:	f003 0301 	and.w	r3, r3, #1
 8014528:	b2db      	uxtb	r3, r3
 801452a:	2b00      	cmp	r3, #0
 801452c:	d009      	beq.n	8014542 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	681a      	ldr	r2, [r3, #0]
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	4413      	add	r3, r2
 8014536:	687a      	ldr	r2, [r7, #4]
 8014538:	4907      	ldr	r1, [pc, #28]	; (8014558 <lwip_cyclic_timer+0x60>)
 801453a:	4618      	mov	r0, r3
 801453c:	f7ff ff6e 	bl	801441c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014540:	e004      	b.n	801454c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014542:	687a      	ldr	r2, [r7, #4]
 8014544:	4904      	ldr	r1, [pc, #16]	; (8014558 <lwip_cyclic_timer+0x60>)
 8014546:	68f8      	ldr	r0, [r7, #12]
 8014548:	f7ff ff68 	bl	801441c <sys_timeout_abs>
}
 801454c:	bf00      	nop
 801454e:	3718      	adds	r7, #24
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}
 8014554:	20008b1c 	.word	0x20008b1c
 8014558:	080144f9 	.word	0x080144f9

0801455c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014562:	2301      	movs	r3, #1
 8014564:	607b      	str	r3, [r7, #4]
 8014566:	e00e      	b.n	8014586 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014568:	4a0b      	ldr	r2, [pc, #44]	; (8014598 <sys_timeouts_init+0x3c>)
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	00db      	lsls	r3, r3, #3
 8014574:	4a08      	ldr	r2, [pc, #32]	; (8014598 <sys_timeouts_init+0x3c>)
 8014576:	4413      	add	r3, r2
 8014578:	461a      	mov	r2, r3
 801457a:	4908      	ldr	r1, [pc, #32]	; (801459c <sys_timeouts_init+0x40>)
 801457c:	f000 f810 	bl	80145a0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	3301      	adds	r3, #1
 8014584:	607b      	str	r3, [r7, #4]
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	2b04      	cmp	r3, #4
 801458a:	d9ed      	bls.n	8014568 <sys_timeouts_init+0xc>
  }
}
 801458c:	bf00      	nop
 801458e:	bf00      	nop
 8014590:	3708      	adds	r7, #8
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	08020b10 	.word	0x08020b10
 801459c:	080144f9 	.word	0x080144f9

080145a0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b086      	sub	sp, #24
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	60f8      	str	r0, [r7, #12]
 80145a8:	60b9      	str	r1, [r7, #8]
 80145aa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80145b2:	d306      	bcc.n	80145c2 <sys_timeout+0x22>
 80145b4:	4b0a      	ldr	r3, [pc, #40]	; (80145e0 <sys_timeout+0x40>)
 80145b6:	f240 1229 	movw	r2, #297	; 0x129
 80145ba:	490a      	ldr	r1, [pc, #40]	; (80145e4 <sys_timeout+0x44>)
 80145bc:	480a      	ldr	r0, [pc, #40]	; (80145e8 <sys_timeout+0x48>)
 80145be:	f007 f97f 	bl	801b8c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80145c2:	f7f1 fa2f 	bl	8005a24 <sys_now>
 80145c6:	4602      	mov	r2, r0
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	4413      	add	r3, r2
 80145cc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	68b9      	ldr	r1, [r7, #8]
 80145d2:	6978      	ldr	r0, [r7, #20]
 80145d4:	f7ff ff22 	bl	801441c <sys_timeout_abs>
#endif
}
 80145d8:	bf00      	nop
 80145da:	3718      	adds	r7, #24
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}
 80145e0:	0801fa30 	.word	0x0801fa30
 80145e4:	0801facc 	.word	0x0801facc
 80145e8:	0801faa4 	.word	0x0801faa4

080145ec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80145f2:	f7f1 fa17 	bl	8005a24 <sys_now>
 80145f6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80145f8:	4b17      	ldr	r3, [pc, #92]	; (8014658 <sys_check_timeouts+0x6c>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d022      	beq.n	801464a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	68fa      	ldr	r2, [r7, #12]
 801460a:	1ad3      	subs	r3, r2, r3
 801460c:	0fdb      	lsrs	r3, r3, #31
 801460e:	f003 0301 	and.w	r3, r3, #1
 8014612:	b2db      	uxtb	r3, r3
 8014614:	2b00      	cmp	r3, #0
 8014616:	d11a      	bne.n	801464e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4a0e      	ldr	r2, [pc, #56]	; (8014658 <sys_check_timeouts+0x6c>)
 801461e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	689b      	ldr	r3, [r3, #8]
 8014624:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	68db      	ldr	r3, [r3, #12]
 801462a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	685b      	ldr	r3, [r3, #4]
 8014630:	4a0a      	ldr	r2, [pc, #40]	; (801465c <sys_check_timeouts+0x70>)
 8014632:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014634:	68b9      	ldr	r1, [r7, #8]
 8014636:	200a      	movs	r0, #10
 8014638:	f7f8 fd0c 	bl	800d054 <memp_free>
    if (handler != NULL) {
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d0da      	beq.n	80145f8 <sys_check_timeouts+0xc>
      handler(arg);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6838      	ldr	r0, [r7, #0]
 8014646:	4798      	blx	r3
  do {
 8014648:	e7d6      	b.n	80145f8 <sys_check_timeouts+0xc>
      return;
 801464a:	bf00      	nop
 801464c:	e000      	b.n	8014650 <sys_check_timeouts+0x64>
      return;
 801464e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014650:	3710      	adds	r7, #16
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	20008b18 	.word	0x20008b18
 801465c:	20008b1c 	.word	0x20008b1c

08014660 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b082      	sub	sp, #8
 8014664:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014666:	4b16      	ldr	r3, [pc, #88]	; (80146c0 <sys_timeouts_sleeptime+0x60>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d102      	bne.n	8014674 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801466e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014672:	e020      	b.n	80146b6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014674:	f7f1 f9d6 	bl	8005a24 <sys_now>
 8014678:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801467a:	4b11      	ldr	r3, [pc, #68]	; (80146c0 <sys_timeouts_sleeptime+0x60>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	685a      	ldr	r2, [r3, #4]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	1ad3      	subs	r3, r2, r3
 8014684:	0fdb      	lsrs	r3, r3, #31
 8014686:	f003 0301 	and.w	r3, r3, #1
 801468a:	b2db      	uxtb	r3, r3
 801468c:	2b00      	cmp	r3, #0
 801468e:	d001      	beq.n	8014694 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014690:	2300      	movs	r3, #0
 8014692:	e010      	b.n	80146b6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014694:	4b0a      	ldr	r3, [pc, #40]	; (80146c0 <sys_timeouts_sleeptime+0x60>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	685a      	ldr	r2, [r3, #4]
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	1ad3      	subs	r3, r2, r3
 801469e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	da06      	bge.n	80146b4 <sys_timeouts_sleeptime+0x54>
 80146a6:	4b07      	ldr	r3, [pc, #28]	; (80146c4 <sys_timeouts_sleeptime+0x64>)
 80146a8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80146ac:	4906      	ldr	r1, [pc, #24]	; (80146c8 <sys_timeouts_sleeptime+0x68>)
 80146ae:	4807      	ldr	r0, [pc, #28]	; (80146cc <sys_timeouts_sleeptime+0x6c>)
 80146b0:	f007 f906 	bl	801b8c0 <iprintf>
    return ret;
 80146b4:	683b      	ldr	r3, [r7, #0]
  }
}
 80146b6:	4618      	mov	r0, r3
 80146b8:	3708      	adds	r7, #8
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	20008b18 	.word	0x20008b18
 80146c4:	0801fa30 	.word	0x0801fa30
 80146c8:	0801fb04 	.word	0x0801fb04
 80146cc:	0801faa4 	.word	0x0801faa4

080146d0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80146d4:	f007 f982 	bl	801b9dc <rand>
 80146d8:	4603      	mov	r3, r0
 80146da:	b29b      	uxth	r3, r3
 80146dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80146e6:	b29a      	uxth	r2, r3
 80146e8:	4b01      	ldr	r3, [pc, #4]	; (80146f0 <udp_init+0x20>)
 80146ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80146ec:	bf00      	nop
 80146ee:	bd80      	pop	{r7, pc}
 80146f0:	20000018 	.word	0x20000018

080146f4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80146f4:	b480      	push	{r7}
 80146f6:	b083      	sub	sp, #12
 80146f8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80146fa:	2300      	movs	r3, #0
 80146fc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80146fe:	4b17      	ldr	r3, [pc, #92]	; (801475c <udp_new_port+0x68>)
 8014700:	881b      	ldrh	r3, [r3, #0]
 8014702:	1c5a      	adds	r2, r3, #1
 8014704:	b291      	uxth	r1, r2
 8014706:	4a15      	ldr	r2, [pc, #84]	; (801475c <udp_new_port+0x68>)
 8014708:	8011      	strh	r1, [r2, #0]
 801470a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801470e:	4293      	cmp	r3, r2
 8014710:	d103      	bne.n	801471a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014712:	4b12      	ldr	r3, [pc, #72]	; (801475c <udp_new_port+0x68>)
 8014714:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014718:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801471a:	4b11      	ldr	r3, [pc, #68]	; (8014760 <udp_new_port+0x6c>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	603b      	str	r3, [r7, #0]
 8014720:	e011      	b.n	8014746 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	8a5a      	ldrh	r2, [r3, #18]
 8014726:	4b0d      	ldr	r3, [pc, #52]	; (801475c <udp_new_port+0x68>)
 8014728:	881b      	ldrh	r3, [r3, #0]
 801472a:	429a      	cmp	r2, r3
 801472c:	d108      	bne.n	8014740 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801472e:	88fb      	ldrh	r3, [r7, #6]
 8014730:	3301      	adds	r3, #1
 8014732:	80fb      	strh	r3, [r7, #6]
 8014734:	88fb      	ldrh	r3, [r7, #6]
 8014736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801473a:	d3e0      	bcc.n	80146fe <udp_new_port+0xa>
        return 0;
 801473c:	2300      	movs	r3, #0
 801473e:	e007      	b.n	8014750 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	68db      	ldr	r3, [r3, #12]
 8014744:	603b      	str	r3, [r7, #0]
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d1ea      	bne.n	8014722 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801474c:	4b03      	ldr	r3, [pc, #12]	; (801475c <udp_new_port+0x68>)
 801474e:	881b      	ldrh	r3, [r3, #0]
}
 8014750:	4618      	mov	r0, r3
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr
 801475c:	20000018 	.word	0x20000018
 8014760:	20010678 	.word	0x20010678

08014764 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	60b9      	str	r1, [r7, #8]
 801476e:	4613      	mov	r3, r2
 8014770:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d105      	bne.n	8014784 <udp_input_local_match+0x20>
 8014778:	4b27      	ldr	r3, [pc, #156]	; (8014818 <udp_input_local_match+0xb4>)
 801477a:	2287      	movs	r2, #135	; 0x87
 801477c:	4927      	ldr	r1, [pc, #156]	; (801481c <udp_input_local_match+0xb8>)
 801477e:	4828      	ldr	r0, [pc, #160]	; (8014820 <udp_input_local_match+0xbc>)
 8014780:	f007 f89e 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d105      	bne.n	8014796 <udp_input_local_match+0x32>
 801478a:	4b23      	ldr	r3, [pc, #140]	; (8014818 <udp_input_local_match+0xb4>)
 801478c:	2288      	movs	r2, #136	; 0x88
 801478e:	4925      	ldr	r1, [pc, #148]	; (8014824 <udp_input_local_match+0xc0>)
 8014790:	4823      	ldr	r0, [pc, #140]	; (8014820 <udp_input_local_match+0xbc>)
 8014792:	f007 f895 	bl	801b8c0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	7a1b      	ldrb	r3, [r3, #8]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d00b      	beq.n	80147b6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	7a1a      	ldrb	r2, [r3, #8]
 80147a2:	4b21      	ldr	r3, [pc, #132]	; (8014828 <udp_input_local_match+0xc4>)
 80147a4:	685b      	ldr	r3, [r3, #4]
 80147a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80147aa:	3301      	adds	r3, #1
 80147ac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147ae:	429a      	cmp	r2, r3
 80147b0:	d001      	beq.n	80147b6 <udp_input_local_match+0x52>
    return 0;
 80147b2:	2300      	movs	r3, #0
 80147b4:	e02b      	b.n	801480e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80147b6:	79fb      	ldrb	r3, [r7, #7]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d018      	beq.n	80147ee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d013      	beq.n	80147ea <udp_input_local_match+0x86>
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d00f      	beq.n	80147ea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80147ca:	4b17      	ldr	r3, [pc, #92]	; (8014828 <udp_input_local_match+0xc4>)
 80147cc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80147ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80147d2:	d00a      	beq.n	80147ea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	4b13      	ldr	r3, [pc, #76]	; (8014828 <udp_input_local_match+0xc4>)
 80147da:	695b      	ldr	r3, [r3, #20]
 80147dc:	405a      	eors	r2, r3
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	3308      	adds	r3, #8
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d110      	bne.n	801480c <udp_input_local_match+0xa8>
          return 1;
 80147ea:	2301      	movs	r3, #1
 80147ec:	e00f      	b.n	801480e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d009      	beq.n	8014808 <udp_input_local_match+0xa4>
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d005      	beq.n	8014808 <udp_input_local_match+0xa4>
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	681a      	ldr	r2, [r3, #0]
 8014800:	4b09      	ldr	r3, [pc, #36]	; (8014828 <udp_input_local_match+0xc4>)
 8014802:	695b      	ldr	r3, [r3, #20]
 8014804:	429a      	cmp	r2, r3
 8014806:	d101      	bne.n	801480c <udp_input_local_match+0xa8>
        return 1;
 8014808:	2301      	movs	r3, #1
 801480a:	e000      	b.n	801480e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801480c:	2300      	movs	r3, #0
}
 801480e:	4618      	mov	r0, r3
 8014810:	3710      	adds	r7, #16
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}
 8014816:	bf00      	nop
 8014818:	0801fb18 	.word	0x0801fb18
 801481c:	0801fb48 	.word	0x0801fb48
 8014820:	0801fb6c 	.word	0x0801fb6c
 8014824:	0801fb94 	.word	0x0801fb94
 8014828:	2000cf0c 	.word	0x2000cf0c

0801482c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801482c:	b590      	push	{r4, r7, lr}
 801482e:	b08d      	sub	sp, #52	; 0x34
 8014830:	af02      	add	r7, sp, #8
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014836:	2300      	movs	r3, #0
 8014838:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d105      	bne.n	801484c <udp_input+0x20>
 8014840:	4b7c      	ldr	r3, [pc, #496]	; (8014a34 <udp_input+0x208>)
 8014842:	22cf      	movs	r2, #207	; 0xcf
 8014844:	497c      	ldr	r1, [pc, #496]	; (8014a38 <udp_input+0x20c>)
 8014846:	487d      	ldr	r0, [pc, #500]	; (8014a3c <udp_input+0x210>)
 8014848:	f007 f83a 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d105      	bne.n	801485e <udp_input+0x32>
 8014852:	4b78      	ldr	r3, [pc, #480]	; (8014a34 <udp_input+0x208>)
 8014854:	22d0      	movs	r2, #208	; 0xd0
 8014856:	497a      	ldr	r1, [pc, #488]	; (8014a40 <udp_input+0x214>)
 8014858:	4878      	ldr	r0, [pc, #480]	; (8014a3c <udp_input+0x210>)
 801485a:	f007 f831 	bl	801b8c0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	895b      	ldrh	r3, [r3, #10]
 8014862:	2b07      	cmp	r3, #7
 8014864:	d803      	bhi.n	801486e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7f9 fad6 	bl	800de18 <pbuf_free>
    goto end;
 801486c:	e0de      	b.n	8014a2c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	685b      	ldr	r3, [r3, #4]
 8014872:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014874:	4b73      	ldr	r3, [pc, #460]	; (8014a44 <udp_input+0x218>)
 8014876:	695b      	ldr	r3, [r3, #20]
 8014878:	4a72      	ldr	r2, [pc, #456]	; (8014a44 <udp_input+0x218>)
 801487a:	6812      	ldr	r2, [r2, #0]
 801487c:	4611      	mov	r1, r2
 801487e:	4618      	mov	r0, r3
 8014880:	f003 fecc 	bl	801861c <ip4_addr_isbroadcast_u32>
 8014884:	4603      	mov	r3, r0
 8014886:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	881b      	ldrh	r3, [r3, #0]
 801488c:	b29b      	uxth	r3, r3
 801488e:	4618      	mov	r0, r3
 8014890:	f7f7 fed8 	bl	800c644 <lwip_htons>
 8014894:	4603      	mov	r3, r0
 8014896:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	885b      	ldrh	r3, [r3, #2]
 801489c:	b29b      	uxth	r3, r3
 801489e:	4618      	mov	r0, r3
 80148a0:	f7f7 fed0 	bl	800c644 <lwip_htons>
 80148a4:	4603      	mov	r3, r0
 80148a6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80148a8:	2300      	movs	r3, #0
 80148aa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80148ac:	2300      	movs	r3, #0
 80148ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80148b0:	2300      	movs	r3, #0
 80148b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80148b4:	4b64      	ldr	r3, [pc, #400]	; (8014a48 <udp_input+0x21c>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	627b      	str	r3, [r7, #36]	; 0x24
 80148ba:	e054      	b.n	8014966 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80148bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148be:	8a5b      	ldrh	r3, [r3, #18]
 80148c0:	89fa      	ldrh	r2, [r7, #14]
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d14a      	bne.n	801495c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80148c6:	7cfb      	ldrb	r3, [r7, #19]
 80148c8:	461a      	mov	r2, r3
 80148ca:	6839      	ldr	r1, [r7, #0]
 80148cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148ce:	f7ff ff49 	bl	8014764 <udp_input_local_match>
 80148d2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d041      	beq.n	801495c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80148d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148da:	7c1b      	ldrb	r3, [r3, #16]
 80148dc:	f003 0304 	and.w	r3, r3, #4
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d11d      	bne.n	8014920 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80148e4:	69fb      	ldr	r3, [r7, #28]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d102      	bne.n	80148f0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80148ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ec:	61fb      	str	r3, [r7, #28]
 80148ee:	e017      	b.n	8014920 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80148f0:	7cfb      	ldrb	r3, [r7, #19]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d014      	beq.n	8014920 <udp_input+0xf4>
 80148f6:	4b53      	ldr	r3, [pc, #332]	; (8014a44 <udp_input+0x218>)
 80148f8:	695b      	ldr	r3, [r3, #20]
 80148fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148fe:	d10f      	bne.n	8014920 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014900:	69fb      	ldr	r3, [r7, #28]
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	3304      	adds	r3, #4
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	429a      	cmp	r2, r3
 801490c:	d008      	beq.n	8014920 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014910:	681a      	ldr	r2, [r3, #0]
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	3304      	adds	r3, #4
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	429a      	cmp	r2, r3
 801491a:	d101      	bne.n	8014920 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801491e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014922:	8a9b      	ldrh	r3, [r3, #20]
 8014924:	8a3a      	ldrh	r2, [r7, #16]
 8014926:	429a      	cmp	r2, r3
 8014928:	d118      	bne.n	801495c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801492e:	2b00      	cmp	r3, #0
 8014930:	d005      	beq.n	801493e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014934:	685a      	ldr	r2, [r3, #4]
 8014936:	4b43      	ldr	r3, [pc, #268]	; (8014a44 <udp_input+0x218>)
 8014938:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801493a:	429a      	cmp	r2, r3
 801493c:	d10e      	bne.n	801495c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801493e:	6a3b      	ldr	r3, [r7, #32]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d014      	beq.n	801496e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014946:	68da      	ldr	r2, [r3, #12]
 8014948:	6a3b      	ldr	r3, [r7, #32]
 801494a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801494c:	4b3e      	ldr	r3, [pc, #248]	; (8014a48 <udp_input+0x21c>)
 801494e:	681a      	ldr	r2, [r3, #0]
 8014950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014952:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014954:	4a3c      	ldr	r2, [pc, #240]	; (8014a48 <udp_input+0x21c>)
 8014956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014958:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801495a:	e008      	b.n	801496e <udp_input+0x142>
      }
    }

    prev = pcb;
 801495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	627b      	str	r3, [r7, #36]	; 0x24
 8014966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014968:	2b00      	cmp	r3, #0
 801496a:	d1a7      	bne.n	80148bc <udp_input+0x90>
 801496c:	e000      	b.n	8014970 <udp_input+0x144>
        break;
 801496e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014972:	2b00      	cmp	r3, #0
 8014974:	d101      	bne.n	801497a <udp_input+0x14e>
    pcb = uncon_pcb;
 8014976:	69fb      	ldr	r3, [r7, #28]
 8014978:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497c:	2b00      	cmp	r3, #0
 801497e:	d002      	beq.n	8014986 <udp_input+0x15a>
    for_us = 1;
 8014980:	2301      	movs	r3, #1
 8014982:	76fb      	strb	r3, [r7, #27]
 8014984:	e00a      	b.n	801499c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	3304      	adds	r3, #4
 801498a:	681a      	ldr	r2, [r3, #0]
 801498c:	4b2d      	ldr	r3, [pc, #180]	; (8014a44 <udp_input+0x218>)
 801498e:	695b      	ldr	r3, [r3, #20]
 8014990:	429a      	cmp	r2, r3
 8014992:	bf0c      	ite	eq
 8014994:	2301      	moveq	r3, #1
 8014996:	2300      	movne	r3, #0
 8014998:	b2db      	uxtb	r3, r3
 801499a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801499c:	7efb      	ldrb	r3, [r7, #27]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d041      	beq.n	8014a26 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80149a2:	2108      	movs	r1, #8
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f7f9 f97f 	bl	800dca8 <pbuf_remove_header>
 80149aa:	4603      	mov	r3, r0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d00a      	beq.n	80149c6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80149b0:	4b20      	ldr	r3, [pc, #128]	; (8014a34 <udp_input+0x208>)
 80149b2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80149b6:	4925      	ldr	r1, [pc, #148]	; (8014a4c <udp_input+0x220>)
 80149b8:	4820      	ldr	r0, [pc, #128]	; (8014a3c <udp_input+0x210>)
 80149ba:	f006 ff81 	bl	801b8c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f7f9 fa2a 	bl	800de18 <pbuf_free>
      goto end;
 80149c4:	e032      	b.n	8014a2c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80149c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d012      	beq.n	80149f2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80149cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ce:	699b      	ldr	r3, [r3, #24]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d00a      	beq.n	80149ea <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80149d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d6:	699c      	ldr	r4, [r3, #24]
 80149d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149da:	69d8      	ldr	r0, [r3, #28]
 80149dc:	8a3b      	ldrh	r3, [r7, #16]
 80149de:	9300      	str	r3, [sp, #0]
 80149e0:	4b1b      	ldr	r3, [pc, #108]	; (8014a50 <udp_input+0x224>)
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80149e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80149e8:	e021      	b.n	8014a2e <udp_input+0x202>
        pbuf_free(p);
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f7f9 fa14 	bl	800de18 <pbuf_free>
        goto end;
 80149f0:	e01c      	b.n	8014a2c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80149f2:	7cfb      	ldrb	r3, [r7, #19]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d112      	bne.n	8014a1e <udp_input+0x1f2>
 80149f8:	4b12      	ldr	r3, [pc, #72]	; (8014a44 <udp_input+0x218>)
 80149fa:	695b      	ldr	r3, [r3, #20]
 80149fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a00:	2be0      	cmp	r3, #224	; 0xe0
 8014a02:	d00c      	beq.n	8014a1e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014a04:	4b0f      	ldr	r3, [pc, #60]	; (8014a44 <udp_input+0x218>)
 8014a06:	899b      	ldrh	r3, [r3, #12]
 8014a08:	3308      	adds	r3, #8
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	b21b      	sxth	r3, r3
 8014a0e:	4619      	mov	r1, r3
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f7f9 f9bc 	bl	800dd8e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014a16:	2103      	movs	r1, #3
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f003 fac1 	bl	8017fa0 <icmp_dest_unreach>
      pbuf_free(p);
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	f7f9 f9fa 	bl	800de18 <pbuf_free>
  return;
 8014a24:	e003      	b.n	8014a2e <udp_input+0x202>
    pbuf_free(p);
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f7f9 f9f6 	bl	800de18 <pbuf_free>
  return;
 8014a2c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014a2e:	372c      	adds	r7, #44	; 0x2c
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd90      	pop	{r4, r7, pc}
 8014a34:	0801fb18 	.word	0x0801fb18
 8014a38:	0801fbbc 	.word	0x0801fbbc
 8014a3c:	0801fb6c 	.word	0x0801fb6c
 8014a40:	0801fbd4 	.word	0x0801fbd4
 8014a44:	2000cf0c 	.word	0x2000cf0c
 8014a48:	20010678 	.word	0x20010678
 8014a4c:	0801fbf0 	.word	0x0801fbf0
 8014a50:	2000cf1c 	.word	0x2000cf1c

08014a54 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d109      	bne.n	8014a78 <udp_send+0x24>
 8014a64:	4b11      	ldr	r3, [pc, #68]	; (8014aac <udp_send+0x58>)
 8014a66:	f240 12d5 	movw	r2, #469	; 0x1d5
 8014a6a:	4911      	ldr	r1, [pc, #68]	; (8014ab0 <udp_send+0x5c>)
 8014a6c:	4811      	ldr	r0, [pc, #68]	; (8014ab4 <udp_send+0x60>)
 8014a6e:	f006 ff27 	bl	801b8c0 <iprintf>
 8014a72:	f06f 030f 	mvn.w	r3, #15
 8014a76:	e015      	b.n	8014aa4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d109      	bne.n	8014a92 <udp_send+0x3e>
 8014a7e:	4b0b      	ldr	r3, [pc, #44]	; (8014aac <udp_send+0x58>)
 8014a80:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8014a84:	490c      	ldr	r1, [pc, #48]	; (8014ab8 <udp_send+0x64>)
 8014a86:	480b      	ldr	r0, [pc, #44]	; (8014ab4 <udp_send+0x60>)
 8014a88:	f006 ff1a 	bl	801b8c0 <iprintf>
 8014a8c:	f06f 030f 	mvn.w	r3, #15
 8014a90:	e008      	b.n	8014aa4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	1d1a      	adds	r2, r3, #4
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	8a9b      	ldrh	r3, [r3, #20]
 8014a9a:	6839      	ldr	r1, [r7, #0]
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f000 f80d 	bl	8014abc <udp_sendto>
 8014aa2:	4603      	mov	r3, r0
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3708      	adds	r7, #8
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}
 8014aac:	0801fb18 	.word	0x0801fb18
 8014ab0:	0801fc0c 	.word	0x0801fc0c
 8014ab4:	0801fb6c 	.word	0x0801fb6c
 8014ab8:	0801fc24 	.word	0x0801fc24

08014abc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b088      	sub	sp, #32
 8014ac0:	af02      	add	r7, sp, #8
 8014ac2:	60f8      	str	r0, [r7, #12]
 8014ac4:	60b9      	str	r1, [r7, #8]
 8014ac6:	607a      	str	r2, [r7, #4]
 8014ac8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d109      	bne.n	8014ae4 <udp_sendto+0x28>
 8014ad0:	4b23      	ldr	r3, [pc, #140]	; (8014b60 <udp_sendto+0xa4>)
 8014ad2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014ad6:	4923      	ldr	r1, [pc, #140]	; (8014b64 <udp_sendto+0xa8>)
 8014ad8:	4823      	ldr	r0, [pc, #140]	; (8014b68 <udp_sendto+0xac>)
 8014ada:	f006 fef1 	bl	801b8c0 <iprintf>
 8014ade:	f06f 030f 	mvn.w	r3, #15
 8014ae2:	e038      	b.n	8014b56 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d109      	bne.n	8014afe <udp_sendto+0x42>
 8014aea:	4b1d      	ldr	r3, [pc, #116]	; (8014b60 <udp_sendto+0xa4>)
 8014aec:	f240 2219 	movw	r2, #537	; 0x219
 8014af0:	491e      	ldr	r1, [pc, #120]	; (8014b6c <udp_sendto+0xb0>)
 8014af2:	481d      	ldr	r0, [pc, #116]	; (8014b68 <udp_sendto+0xac>)
 8014af4:	f006 fee4 	bl	801b8c0 <iprintf>
 8014af8:	f06f 030f 	mvn.w	r3, #15
 8014afc:	e02b      	b.n	8014b56 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d109      	bne.n	8014b18 <udp_sendto+0x5c>
 8014b04:	4b16      	ldr	r3, [pc, #88]	; (8014b60 <udp_sendto+0xa4>)
 8014b06:	f240 221a 	movw	r2, #538	; 0x21a
 8014b0a:	4919      	ldr	r1, [pc, #100]	; (8014b70 <udp_sendto+0xb4>)
 8014b0c:	4816      	ldr	r0, [pc, #88]	; (8014b68 <udp_sendto+0xac>)
 8014b0e:	f006 fed7 	bl	801b8c0 <iprintf>
 8014b12:	f06f 030f 	mvn.w	r3, #15
 8014b16:	e01e      	b.n	8014b56 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	7a1b      	ldrb	r3, [r3, #8]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d006      	beq.n	8014b2e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	7a1b      	ldrb	r3, [r3, #8]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7f8 fdb7 	bl	800d698 <netif_get_by_index>
 8014b2a:	6178      	str	r0, [r7, #20]
 8014b2c:	e003      	b.n	8014b36 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f003 fac0 	bl	80180b4 <ip4_route>
 8014b34:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d102      	bne.n	8014b42 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014b3c:	f06f 0303 	mvn.w	r3, #3
 8014b40:	e009      	b.n	8014b56 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8014b42:	887a      	ldrh	r2, [r7, #2]
 8014b44:	697b      	ldr	r3, [r7, #20]
 8014b46:	9300      	str	r3, [sp, #0]
 8014b48:	4613      	mov	r3, r2
 8014b4a:	687a      	ldr	r2, [r7, #4]
 8014b4c:	68b9      	ldr	r1, [r7, #8]
 8014b4e:	68f8      	ldr	r0, [r7, #12]
 8014b50:	f000 f810 	bl	8014b74 <udp_sendto_if>
 8014b54:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3718      	adds	r7, #24
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	0801fb18 	.word	0x0801fb18
 8014b64:	0801fc3c 	.word	0x0801fc3c
 8014b68:	0801fb6c 	.word	0x0801fb6c
 8014b6c:	0801fc54 	.word	0x0801fc54
 8014b70:	0801fc70 	.word	0x0801fc70

08014b74 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b088      	sub	sp, #32
 8014b78:	af02      	add	r7, sp, #8
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	607a      	str	r2, [r7, #4]
 8014b80:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d109      	bne.n	8014b9c <udp_sendto_if+0x28>
 8014b88:	4b2e      	ldr	r3, [pc, #184]	; (8014c44 <udp_sendto_if+0xd0>)
 8014b8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b8e:	492e      	ldr	r1, [pc, #184]	; (8014c48 <udp_sendto_if+0xd4>)
 8014b90:	482e      	ldr	r0, [pc, #184]	; (8014c4c <udp_sendto_if+0xd8>)
 8014b92:	f006 fe95 	bl	801b8c0 <iprintf>
 8014b96:	f06f 030f 	mvn.w	r3, #15
 8014b9a:	e04f      	b.n	8014c3c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d109      	bne.n	8014bb6 <udp_sendto_if+0x42>
 8014ba2:	4b28      	ldr	r3, [pc, #160]	; (8014c44 <udp_sendto_if+0xd0>)
 8014ba4:	f240 2281 	movw	r2, #641	; 0x281
 8014ba8:	4929      	ldr	r1, [pc, #164]	; (8014c50 <udp_sendto_if+0xdc>)
 8014baa:	4828      	ldr	r0, [pc, #160]	; (8014c4c <udp_sendto_if+0xd8>)
 8014bac:	f006 fe88 	bl	801b8c0 <iprintf>
 8014bb0:	f06f 030f 	mvn.w	r3, #15
 8014bb4:	e042      	b.n	8014c3c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d109      	bne.n	8014bd0 <udp_sendto_if+0x5c>
 8014bbc:	4b21      	ldr	r3, [pc, #132]	; (8014c44 <udp_sendto_if+0xd0>)
 8014bbe:	f240 2282 	movw	r2, #642	; 0x282
 8014bc2:	4924      	ldr	r1, [pc, #144]	; (8014c54 <udp_sendto_if+0xe0>)
 8014bc4:	4821      	ldr	r0, [pc, #132]	; (8014c4c <udp_sendto_if+0xd8>)
 8014bc6:	f006 fe7b 	bl	801b8c0 <iprintf>
 8014bca:	f06f 030f 	mvn.w	r3, #15
 8014bce:	e035      	b.n	8014c3c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014bd0:	6a3b      	ldr	r3, [r7, #32]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d109      	bne.n	8014bea <udp_sendto_if+0x76>
 8014bd6:	4b1b      	ldr	r3, [pc, #108]	; (8014c44 <udp_sendto_if+0xd0>)
 8014bd8:	f240 2283 	movw	r2, #643	; 0x283
 8014bdc:	491e      	ldr	r1, [pc, #120]	; (8014c58 <udp_sendto_if+0xe4>)
 8014bde:	481b      	ldr	r0, [pc, #108]	; (8014c4c <udp_sendto_if+0xd8>)
 8014be0:	f006 fe6e 	bl	801b8c0 <iprintf>
 8014be4:	f06f 030f 	mvn.w	r3, #15
 8014be8:	e028      	b.n	8014c3c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d009      	beq.n	8014c04 <udp_sendto_if+0x90>
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d005      	beq.n	8014c04 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014c00:	2be0      	cmp	r3, #224	; 0xe0
 8014c02:	d103      	bne.n	8014c0c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014c04:	6a3b      	ldr	r3, [r7, #32]
 8014c06:	3304      	adds	r3, #4
 8014c08:	617b      	str	r3, [r7, #20]
 8014c0a:	e00b      	b.n	8014c24 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	681a      	ldr	r2, [r3, #0]
 8014c10:	6a3b      	ldr	r3, [r7, #32]
 8014c12:	3304      	adds	r3, #4
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d002      	beq.n	8014c20 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014c1a:	f06f 0303 	mvn.w	r3, #3
 8014c1e:	e00d      	b.n	8014c3c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014c24:	887a      	ldrh	r2, [r7, #2]
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	9301      	str	r3, [sp, #4]
 8014c2a:	6a3b      	ldr	r3, [r7, #32]
 8014c2c:	9300      	str	r3, [sp, #0]
 8014c2e:	4613      	mov	r3, r2
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	68b9      	ldr	r1, [r7, #8]
 8014c34:	68f8      	ldr	r0, [r7, #12]
 8014c36:	f000 f811 	bl	8014c5c <udp_sendto_if_src>
 8014c3a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	3718      	adds	r7, #24
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}
 8014c44:	0801fb18 	.word	0x0801fb18
 8014c48:	0801fc8c 	.word	0x0801fc8c
 8014c4c:	0801fb6c 	.word	0x0801fb6c
 8014c50:	0801fca8 	.word	0x0801fca8
 8014c54:	0801fcc4 	.word	0x0801fcc4
 8014c58:	0801fce4 	.word	0x0801fce4

08014c5c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b08c      	sub	sp, #48	; 0x30
 8014c60:	af04      	add	r7, sp, #16
 8014c62:	60f8      	str	r0, [r7, #12]
 8014c64:	60b9      	str	r1, [r7, #8]
 8014c66:	607a      	str	r2, [r7, #4]
 8014c68:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d109      	bne.n	8014c84 <udp_sendto_if_src+0x28>
 8014c70:	4b65      	ldr	r3, [pc, #404]	; (8014e08 <udp_sendto_if_src+0x1ac>)
 8014c72:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014c76:	4965      	ldr	r1, [pc, #404]	; (8014e0c <udp_sendto_if_src+0x1b0>)
 8014c78:	4865      	ldr	r0, [pc, #404]	; (8014e10 <udp_sendto_if_src+0x1b4>)
 8014c7a:	f006 fe21 	bl	801b8c0 <iprintf>
 8014c7e:	f06f 030f 	mvn.w	r3, #15
 8014c82:	e0bc      	b.n	8014dfe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d109      	bne.n	8014c9e <udp_sendto_if_src+0x42>
 8014c8a:	4b5f      	ldr	r3, [pc, #380]	; (8014e08 <udp_sendto_if_src+0x1ac>)
 8014c8c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014c90:	4960      	ldr	r1, [pc, #384]	; (8014e14 <udp_sendto_if_src+0x1b8>)
 8014c92:	485f      	ldr	r0, [pc, #380]	; (8014e10 <udp_sendto_if_src+0x1b4>)
 8014c94:	f006 fe14 	bl	801b8c0 <iprintf>
 8014c98:	f06f 030f 	mvn.w	r3, #15
 8014c9c:	e0af      	b.n	8014dfe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d109      	bne.n	8014cb8 <udp_sendto_if_src+0x5c>
 8014ca4:	4b58      	ldr	r3, [pc, #352]	; (8014e08 <udp_sendto_if_src+0x1ac>)
 8014ca6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014caa:	495b      	ldr	r1, [pc, #364]	; (8014e18 <udp_sendto_if_src+0x1bc>)
 8014cac:	4858      	ldr	r0, [pc, #352]	; (8014e10 <udp_sendto_if_src+0x1b4>)
 8014cae:	f006 fe07 	bl	801b8c0 <iprintf>
 8014cb2:	f06f 030f 	mvn.w	r3, #15
 8014cb6:	e0a2      	b.n	8014dfe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d109      	bne.n	8014cd2 <udp_sendto_if_src+0x76>
 8014cbe:	4b52      	ldr	r3, [pc, #328]	; (8014e08 <udp_sendto_if_src+0x1ac>)
 8014cc0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014cc4:	4955      	ldr	r1, [pc, #340]	; (8014e1c <udp_sendto_if_src+0x1c0>)
 8014cc6:	4852      	ldr	r0, [pc, #328]	; (8014e10 <udp_sendto_if_src+0x1b4>)
 8014cc8:	f006 fdfa 	bl	801b8c0 <iprintf>
 8014ccc:	f06f 030f 	mvn.w	r3, #15
 8014cd0:	e095      	b.n	8014dfe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d109      	bne.n	8014cec <udp_sendto_if_src+0x90>
 8014cd8:	4b4b      	ldr	r3, [pc, #300]	; (8014e08 <udp_sendto_if_src+0x1ac>)
 8014cda:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014cde:	4950      	ldr	r1, [pc, #320]	; (8014e20 <udp_sendto_if_src+0x1c4>)
 8014ce0:	484b      	ldr	r0, [pc, #300]	; (8014e10 <udp_sendto_if_src+0x1b4>)
 8014ce2:	f006 fded 	bl	801b8c0 <iprintf>
 8014ce6:	f06f 030f 	mvn.w	r3, #15
 8014cea:	e088      	b.n	8014dfe <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	8a5b      	ldrh	r3, [r3, #18]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d10f      	bne.n	8014d14 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014cf4:	68f9      	ldr	r1, [r7, #12]
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	8a5b      	ldrh	r3, [r3, #18]
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	68f8      	ldr	r0, [r7, #12]
 8014cfe:	f000 f893 	bl	8014e28 <udp_bind>
 8014d02:	4603      	mov	r3, r0
 8014d04:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014d06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d002      	beq.n	8014d14 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014d0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014d12:	e074      	b.n	8014dfe <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	891b      	ldrh	r3, [r3, #8]
 8014d18:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014d1c:	4293      	cmp	r3, r2
 8014d1e:	d902      	bls.n	8014d26 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d24:	e06b      	b.n	8014dfe <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014d26:	2108      	movs	r1, #8
 8014d28:	68b8      	ldr	r0, [r7, #8]
 8014d2a:	f7f8 ffad 	bl	800dc88 <pbuf_add_header>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d015      	beq.n	8014d60 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014d34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d38:	2108      	movs	r1, #8
 8014d3a:	2022      	movs	r0, #34	; 0x22
 8014d3c:	f7f8 fd56 	bl	800d7ec <pbuf_alloc>
 8014d40:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014d42:	69fb      	ldr	r3, [r7, #28]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d102      	bne.n	8014d4e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d4c:	e057      	b.n	8014dfe <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	891b      	ldrh	r3, [r3, #8]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d006      	beq.n	8014d64 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014d56:	68b9      	ldr	r1, [r7, #8]
 8014d58:	69f8      	ldr	r0, [r7, #28]
 8014d5a:	f7f9 f981 	bl	800e060 <pbuf_chain>
 8014d5e:	e001      	b.n	8014d64 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014d64:	69fb      	ldr	r3, [r7, #28]
 8014d66:	895b      	ldrh	r3, [r3, #10]
 8014d68:	2b07      	cmp	r3, #7
 8014d6a:	d806      	bhi.n	8014d7a <udp_sendto_if_src+0x11e>
 8014d6c:	4b26      	ldr	r3, [pc, #152]	; (8014e08 <udp_sendto_if_src+0x1ac>)
 8014d6e:	f240 320d 	movw	r2, #781	; 0x30d
 8014d72:	492c      	ldr	r1, [pc, #176]	; (8014e24 <udp_sendto_if_src+0x1c8>)
 8014d74:	4826      	ldr	r0, [pc, #152]	; (8014e10 <udp_sendto_if_src+0x1b4>)
 8014d76:	f006 fda3 	bl	801b8c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014d7a:	69fb      	ldr	r3, [r7, #28]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	8a5b      	ldrh	r3, [r3, #18]
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7f7 fc5d 	bl	800c644 <lwip_htons>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	461a      	mov	r2, r3
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014d92:	887b      	ldrh	r3, [r7, #2]
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7f7 fc55 	bl	800c644 <lwip_htons>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	461a      	mov	r2, r3
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	2200      	movs	r2, #0
 8014da6:	719a      	strb	r2, [r3, #6]
 8014da8:	2200      	movs	r2, #0
 8014daa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014dac:	69fb      	ldr	r3, [r7, #28]
 8014dae:	891b      	ldrh	r3, [r3, #8]
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7f7 fc47 	bl	800c644 <lwip_htons>
 8014db6:	4603      	mov	r3, r0
 8014db8:	461a      	mov	r2, r3
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014dbe:	2311      	movs	r3, #17
 8014dc0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	7adb      	ldrb	r3, [r3, #11]
 8014dc6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	7a9b      	ldrb	r3, [r3, #10]
 8014dcc:	7cb9      	ldrb	r1, [r7, #18]
 8014dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014dd0:	9202      	str	r2, [sp, #8]
 8014dd2:	7cfa      	ldrb	r2, [r7, #19]
 8014dd4:	9201      	str	r2, [sp, #4]
 8014dd6:	9300      	str	r3, [sp, #0]
 8014dd8:	460b      	mov	r3, r1
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014dde:	69f8      	ldr	r0, [r7, #28]
 8014de0:	f003 fb6e 	bl	80184c0 <ip4_output_if_src>
 8014de4:	4603      	mov	r3, r0
 8014de6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014de8:	69fa      	ldr	r2, [r7, #28]
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d004      	beq.n	8014dfa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014df0:	69f8      	ldr	r0, [r7, #28]
 8014df2:	f7f9 f811 	bl	800de18 <pbuf_free>
    q = NULL;
 8014df6:	2300      	movs	r3, #0
 8014df8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014dfa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3720      	adds	r7, #32
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	0801fb18 	.word	0x0801fb18
 8014e0c:	0801fd04 	.word	0x0801fd04
 8014e10:	0801fb6c 	.word	0x0801fb6c
 8014e14:	0801fd24 	.word	0x0801fd24
 8014e18:	0801fd44 	.word	0x0801fd44
 8014e1c:	0801fd68 	.word	0x0801fd68
 8014e20:	0801fd8c 	.word	0x0801fd8c
 8014e24:	0801fdb0 	.word	0x0801fdb0

08014e28 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b086      	sub	sp, #24
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	60b9      	str	r1, [r7, #8]
 8014e32:	4613      	mov	r3, r2
 8014e34:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d101      	bne.n	8014e40 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014e3c:	4b39      	ldr	r3, [pc, #228]	; (8014f24 <udp_bind+0xfc>)
 8014e3e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d109      	bne.n	8014e5a <udp_bind+0x32>
 8014e46:	4b38      	ldr	r3, [pc, #224]	; (8014f28 <udp_bind+0x100>)
 8014e48:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014e4c:	4937      	ldr	r1, [pc, #220]	; (8014f2c <udp_bind+0x104>)
 8014e4e:	4838      	ldr	r0, [pc, #224]	; (8014f30 <udp_bind+0x108>)
 8014e50:	f006 fd36 	bl	801b8c0 <iprintf>
 8014e54:	f06f 030f 	mvn.w	r3, #15
 8014e58:	e060      	b.n	8014f1c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e5e:	4b35      	ldr	r3, [pc, #212]	; (8014f34 <udp_bind+0x10c>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	617b      	str	r3, [r7, #20]
 8014e64:	e009      	b.n	8014e7a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014e66:	68fa      	ldr	r2, [r7, #12]
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d102      	bne.n	8014e74 <udp_bind+0x4c>
      rebind = 1;
 8014e6e:	2301      	movs	r3, #1
 8014e70:	74fb      	strb	r3, [r7, #19]
      break;
 8014e72:	e005      	b.n	8014e80 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	617b      	str	r3, [r7, #20]
 8014e7a:	697b      	ldr	r3, [r7, #20]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d1f2      	bne.n	8014e66 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014e80:	88fb      	ldrh	r3, [r7, #6]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d109      	bne.n	8014e9a <udp_bind+0x72>
    port = udp_new_port();
 8014e86:	f7ff fc35 	bl	80146f4 <udp_new_port>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014e8e:	88fb      	ldrh	r3, [r7, #6]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d12c      	bne.n	8014eee <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014e94:	f06f 0307 	mvn.w	r3, #7
 8014e98:	e040      	b.n	8014f1c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e9a:	4b26      	ldr	r3, [pc, #152]	; (8014f34 <udp_bind+0x10c>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	617b      	str	r3, [r7, #20]
 8014ea0:	e022      	b.n	8014ee8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014ea2:	68fa      	ldr	r2, [r7, #12]
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d01b      	beq.n	8014ee2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	8a5b      	ldrh	r3, [r3, #18]
 8014eae:	88fa      	ldrh	r2, [r7, #6]
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d116      	bne.n	8014ee2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	681a      	ldr	r2, [r3, #0]
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d00d      	beq.n	8014edc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d00a      	beq.n	8014edc <udp_bind+0xb4>
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d006      	beq.n	8014edc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014ece:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d003      	beq.n	8014edc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d102      	bne.n	8014ee2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014edc:	f06f 0307 	mvn.w	r3, #7
 8014ee0:	e01c      	b.n	8014f1c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	68db      	ldr	r3, [r3, #12]
 8014ee6:	617b      	str	r3, [r7, #20]
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d1d9      	bne.n	8014ea2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d002      	beq.n	8014efa <udp_bind+0xd2>
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	e000      	b.n	8014efc <udp_bind+0xd4>
 8014efa:	2300      	movs	r3, #0
 8014efc:	68fa      	ldr	r2, [r7, #12]
 8014efe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	88fa      	ldrh	r2, [r7, #6]
 8014f04:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014f06:	7cfb      	ldrb	r3, [r7, #19]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d106      	bne.n	8014f1a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014f0c:	4b09      	ldr	r3, [pc, #36]	; (8014f34 <udp_bind+0x10c>)
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014f14:	4a07      	ldr	r2, [pc, #28]	; (8014f34 <udp_bind+0x10c>)
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014f1a:	2300      	movs	r3, #0
}
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	3718      	adds	r7, #24
 8014f20:	46bd      	mov	sp, r7
 8014f22:	bd80      	pop	{r7, pc}
 8014f24:	08020b38 	.word	0x08020b38
 8014f28:	0801fb18 	.word	0x0801fb18
 8014f2c:	0801fde0 	.word	0x0801fde0
 8014f30:	0801fb6c 	.word	0x0801fb6c
 8014f34:	20010678 	.word	0x20010678

08014f38 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b086      	sub	sp, #24
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	60f8      	str	r0, [r7, #12]
 8014f40:	60b9      	str	r1, [r7, #8]
 8014f42:	4613      	mov	r3, r2
 8014f44:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d109      	bne.n	8014f60 <udp_connect+0x28>
 8014f4c:	4b2c      	ldr	r3, [pc, #176]	; (8015000 <udp_connect+0xc8>)
 8014f4e:	f240 4235 	movw	r2, #1077	; 0x435
 8014f52:	492c      	ldr	r1, [pc, #176]	; (8015004 <udp_connect+0xcc>)
 8014f54:	482c      	ldr	r0, [pc, #176]	; (8015008 <udp_connect+0xd0>)
 8014f56:	f006 fcb3 	bl	801b8c0 <iprintf>
 8014f5a:	f06f 030f 	mvn.w	r3, #15
 8014f5e:	e04b      	b.n	8014ff8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d109      	bne.n	8014f7a <udp_connect+0x42>
 8014f66:	4b26      	ldr	r3, [pc, #152]	; (8015000 <udp_connect+0xc8>)
 8014f68:	f240 4236 	movw	r2, #1078	; 0x436
 8014f6c:	4927      	ldr	r1, [pc, #156]	; (801500c <udp_connect+0xd4>)
 8014f6e:	4826      	ldr	r0, [pc, #152]	; (8015008 <udp_connect+0xd0>)
 8014f70:	f006 fca6 	bl	801b8c0 <iprintf>
 8014f74:	f06f 030f 	mvn.w	r3, #15
 8014f78:	e03e      	b.n	8014ff8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	8a5b      	ldrh	r3, [r3, #18]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d10f      	bne.n	8014fa2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014f82:	68f9      	ldr	r1, [r7, #12]
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	8a5b      	ldrh	r3, [r3, #18]
 8014f88:	461a      	mov	r2, r3
 8014f8a:	68f8      	ldr	r0, [r7, #12]
 8014f8c:	f7ff ff4c 	bl	8014e28 <udp_bind>
 8014f90:	4603      	mov	r3, r0
 8014f92:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014f94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d002      	beq.n	8014fa2 <udp_connect+0x6a>
      return err;
 8014f9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014fa0:	e02a      	b.n	8014ff8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014fa2:	68bb      	ldr	r3, [r7, #8]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d002      	beq.n	8014fae <udp_connect+0x76>
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	e000      	b.n	8014fb0 <udp_connect+0x78>
 8014fae:	2300      	movs	r3, #0
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	88fa      	ldrh	r2, [r7, #6]
 8014fb8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	7c1b      	ldrb	r3, [r3, #16]
 8014fbe:	f043 0304 	orr.w	r3, r3, #4
 8014fc2:	b2da      	uxtb	r2, r3
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014fc8:	4b11      	ldr	r3, [pc, #68]	; (8015010 <udp_connect+0xd8>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	617b      	str	r3, [r7, #20]
 8014fce:	e008      	b.n	8014fe2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014fd0:	68fa      	ldr	r2, [r7, #12]
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d101      	bne.n	8014fdc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014fd8:	2300      	movs	r3, #0
 8014fda:	e00d      	b.n	8014ff8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014fdc:	697b      	ldr	r3, [r7, #20]
 8014fde:	68db      	ldr	r3, [r3, #12]
 8014fe0:	617b      	str	r3, [r7, #20]
 8014fe2:	697b      	ldr	r3, [r7, #20]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d1f3      	bne.n	8014fd0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014fe8:	4b09      	ldr	r3, [pc, #36]	; (8015010 <udp_connect+0xd8>)
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014ff0:	4a07      	ldr	r2, [pc, #28]	; (8015010 <udp_connect+0xd8>)
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014ff6:	2300      	movs	r3, #0
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	3718      	adds	r7, #24
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}
 8015000:	0801fb18 	.word	0x0801fb18
 8015004:	0801fdf8 	.word	0x0801fdf8
 8015008:	0801fb6c 	.word	0x0801fb6c
 801500c:	0801fe14 	.word	0x0801fe14
 8015010:	20010678 	.word	0x20010678

08015014 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d107      	bne.n	8015032 <udp_disconnect+0x1e>
 8015022:	4b0d      	ldr	r3, [pc, #52]	; (8015058 <udp_disconnect+0x44>)
 8015024:	f240 426a 	movw	r2, #1130	; 0x46a
 8015028:	490c      	ldr	r1, [pc, #48]	; (801505c <udp_disconnect+0x48>)
 801502a:	480d      	ldr	r0, [pc, #52]	; (8015060 <udp_disconnect+0x4c>)
 801502c:	f006 fc48 	bl	801b8c0 <iprintf>
 8015030:	e00f      	b.n	8015052 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2200      	movs	r2, #0
 8015036:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2200      	movs	r2, #0
 801503c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	2200      	movs	r2, #0
 8015042:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	7c1b      	ldrb	r3, [r3, #16]
 8015048:	f023 0304 	bic.w	r3, r3, #4
 801504c:	b2da      	uxtb	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	741a      	strb	r2, [r3, #16]
}
 8015052:	3708      	adds	r7, #8
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}
 8015058:	0801fb18 	.word	0x0801fb18
 801505c:	0801fe30 	.word	0x0801fe30
 8015060:	0801fb6c 	.word	0x0801fb6c

08015064 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b084      	sub	sp, #16
 8015068:	af00      	add	r7, sp, #0
 801506a:	60f8      	str	r0, [r7, #12]
 801506c:	60b9      	str	r1, [r7, #8]
 801506e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d107      	bne.n	8015086 <udp_recv+0x22>
 8015076:	4b08      	ldr	r3, [pc, #32]	; (8015098 <udp_recv+0x34>)
 8015078:	f240 428a 	movw	r2, #1162	; 0x48a
 801507c:	4907      	ldr	r1, [pc, #28]	; (801509c <udp_recv+0x38>)
 801507e:	4808      	ldr	r0, [pc, #32]	; (80150a0 <udp_recv+0x3c>)
 8015080:	f006 fc1e 	bl	801b8c0 <iprintf>
 8015084:	e005      	b.n	8015092 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	68ba      	ldr	r2, [r7, #8]
 801508a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	687a      	ldr	r2, [r7, #4]
 8015090:	61da      	str	r2, [r3, #28]
}
 8015092:	3710      	adds	r7, #16
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}
 8015098:	0801fb18 	.word	0x0801fb18
 801509c:	0801fe4c 	.word	0x0801fe4c
 80150a0:	0801fb6c 	.word	0x0801fb6c

080150a4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b084      	sub	sp, #16
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d107      	bne.n	80150c2 <udp_remove+0x1e>
 80150b2:	4b19      	ldr	r3, [pc, #100]	; (8015118 <udp_remove+0x74>)
 80150b4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80150b8:	4918      	ldr	r1, [pc, #96]	; (801511c <udp_remove+0x78>)
 80150ba:	4819      	ldr	r0, [pc, #100]	; (8015120 <udp_remove+0x7c>)
 80150bc:	f006 fc00 	bl	801b8c0 <iprintf>
 80150c0:	e026      	b.n	8015110 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80150c2:	4b18      	ldr	r3, [pc, #96]	; (8015124 <udp_remove+0x80>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	687a      	ldr	r2, [r7, #4]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d105      	bne.n	80150d8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80150cc:	4b15      	ldr	r3, [pc, #84]	; (8015124 <udp_remove+0x80>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	68db      	ldr	r3, [r3, #12]
 80150d2:	4a14      	ldr	r2, [pc, #80]	; (8015124 <udp_remove+0x80>)
 80150d4:	6013      	str	r3, [r2, #0]
 80150d6:	e017      	b.n	8015108 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80150d8:	4b12      	ldr	r3, [pc, #72]	; (8015124 <udp_remove+0x80>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	60fb      	str	r3, [r7, #12]
 80150de:	e010      	b.n	8015102 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	68db      	ldr	r3, [r3, #12]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d009      	beq.n	80150fc <udp_remove+0x58>
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	68db      	ldr	r3, [r3, #12]
 80150ec:	687a      	ldr	r2, [r7, #4]
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d104      	bne.n	80150fc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	68da      	ldr	r2, [r3, #12]
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	60da      	str	r2, [r3, #12]
        break;
 80150fa:	e005      	b.n	8015108 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	68db      	ldr	r3, [r3, #12]
 8015100:	60fb      	str	r3, [r7, #12]
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d1eb      	bne.n	80150e0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015108:	6879      	ldr	r1, [r7, #4]
 801510a:	2000      	movs	r0, #0
 801510c:	f7f7 ffa2 	bl	800d054 <memp_free>
}
 8015110:	3710      	adds	r7, #16
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}
 8015116:	bf00      	nop
 8015118:	0801fb18 	.word	0x0801fb18
 801511c:	0801fe64 	.word	0x0801fe64
 8015120:	0801fb6c 	.word	0x0801fb6c
 8015124:	20010678 	.word	0x20010678

08015128 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801512e:	2000      	movs	r0, #0
 8015130:	f7f7 ff3e 	bl	800cfb0 <memp_malloc>
 8015134:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d007      	beq.n	801514c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801513c:	2220      	movs	r2, #32
 801513e:	2100      	movs	r1, #0
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f006 fbb5 	bl	801b8b0 <memset>
    pcb->ttl = UDP_TTL;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	22ff      	movs	r2, #255	; 0xff
 801514a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801514c:	687b      	ldr	r3, [r7, #4]
}
 801514e:	4618      	mov	r0, r3
 8015150:	3708      	adds	r7, #8
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015156:	b580      	push	{r7, lr}
 8015158:	b084      	sub	sp, #16
 801515a:	af00      	add	r7, sp, #0
 801515c:	4603      	mov	r3, r0
 801515e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015160:	f7ff ffe2 	bl	8015128 <udp_new>
 8015164:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015166:	68fb      	ldr	r3, [r7, #12]
}
 8015168:	4618      	mov	r0, r3
 801516a:	3710      	adds	r7, #16
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}

08015170 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015170:	b480      	push	{r7}
 8015172:	b085      	sub	sp, #20
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
 8015178:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d01e      	beq.n	80151be <udp_netif_ip_addr_changed+0x4e>
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d01a      	beq.n	80151be <udp_netif_ip_addr_changed+0x4e>
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d017      	beq.n	80151be <udp_netif_ip_addr_changed+0x4e>
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d013      	beq.n	80151be <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015196:	4b0d      	ldr	r3, [pc, #52]	; (80151cc <udp_netif_ip_addr_changed+0x5c>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	60fb      	str	r3, [r7, #12]
 801519c:	e00c      	b.n	80151b8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d103      	bne.n	80151b2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	681a      	ldr	r2, [r3, #0]
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	68db      	ldr	r3, [r3, #12]
 80151b6:	60fb      	str	r3, [r7, #12]
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d1ef      	bne.n	801519e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80151be:	bf00      	nop
 80151c0:	3714      	adds	r7, #20
 80151c2:	46bd      	mov	sp, r7
 80151c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c8:	4770      	bx	lr
 80151ca:	bf00      	nop
 80151cc:	20010678 	.word	0x20010678

080151d0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80151d4:	4b20      	ldr	r3, [pc, #128]	; (8015258 <dhcp_inc_pcb_refcount+0x88>)
 80151d6:	781b      	ldrb	r3, [r3, #0]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d133      	bne.n	8015244 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80151dc:	4b1f      	ldr	r3, [pc, #124]	; (801525c <dhcp_inc_pcb_refcount+0x8c>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d005      	beq.n	80151f0 <dhcp_inc_pcb_refcount+0x20>
 80151e4:	4b1e      	ldr	r3, [pc, #120]	; (8015260 <dhcp_inc_pcb_refcount+0x90>)
 80151e6:	22e5      	movs	r2, #229	; 0xe5
 80151e8:	491e      	ldr	r1, [pc, #120]	; (8015264 <dhcp_inc_pcb_refcount+0x94>)
 80151ea:	481f      	ldr	r0, [pc, #124]	; (8015268 <dhcp_inc_pcb_refcount+0x98>)
 80151ec:	f006 fb68 	bl	801b8c0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80151f0:	f7ff ff9a 	bl	8015128 <udp_new>
 80151f4:	4603      	mov	r3, r0
 80151f6:	4a19      	ldr	r2, [pc, #100]	; (801525c <dhcp_inc_pcb_refcount+0x8c>)
 80151f8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80151fa:	4b18      	ldr	r3, [pc, #96]	; (801525c <dhcp_inc_pcb_refcount+0x8c>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d102      	bne.n	8015208 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015206:	e024      	b.n	8015252 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015208:	4b14      	ldr	r3, [pc, #80]	; (801525c <dhcp_inc_pcb_refcount+0x8c>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	7a5a      	ldrb	r2, [r3, #9]
 801520e:	4b13      	ldr	r3, [pc, #76]	; (801525c <dhcp_inc_pcb_refcount+0x8c>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	f042 0220 	orr.w	r2, r2, #32
 8015216:	b2d2      	uxtb	r2, r2
 8015218:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801521a:	4b10      	ldr	r3, [pc, #64]	; (801525c <dhcp_inc_pcb_refcount+0x8c>)
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	2244      	movs	r2, #68	; 0x44
 8015220:	4912      	ldr	r1, [pc, #72]	; (801526c <dhcp_inc_pcb_refcount+0x9c>)
 8015222:	4618      	mov	r0, r3
 8015224:	f7ff fe00 	bl	8014e28 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015228:	4b0c      	ldr	r3, [pc, #48]	; (801525c <dhcp_inc_pcb_refcount+0x8c>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	2243      	movs	r2, #67	; 0x43
 801522e:	490f      	ldr	r1, [pc, #60]	; (801526c <dhcp_inc_pcb_refcount+0x9c>)
 8015230:	4618      	mov	r0, r3
 8015232:	f7ff fe81 	bl	8014f38 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015236:	4b09      	ldr	r3, [pc, #36]	; (801525c <dhcp_inc_pcb_refcount+0x8c>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	2200      	movs	r2, #0
 801523c:	490c      	ldr	r1, [pc, #48]	; (8015270 <dhcp_inc_pcb_refcount+0xa0>)
 801523e:	4618      	mov	r0, r3
 8015240:	f7ff ff10 	bl	8015064 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015244:	4b04      	ldr	r3, [pc, #16]	; (8015258 <dhcp_inc_pcb_refcount+0x88>)
 8015246:	781b      	ldrb	r3, [r3, #0]
 8015248:	3301      	adds	r3, #1
 801524a:	b2da      	uxtb	r2, r3
 801524c:	4b02      	ldr	r3, [pc, #8]	; (8015258 <dhcp_inc_pcb_refcount+0x88>)
 801524e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015250:	2300      	movs	r3, #0
}
 8015252:	4618      	mov	r0, r3
 8015254:	bd80      	pop	{r7, pc}
 8015256:	bf00      	nop
 8015258:	20008b28 	.word	0x20008b28
 801525c:	20008b24 	.word	0x20008b24
 8015260:	0801fe7c 	.word	0x0801fe7c
 8015264:	0801feb4 	.word	0x0801feb4
 8015268:	0801fedc 	.word	0x0801fedc
 801526c:	08020b38 	.word	0x08020b38
 8015270:	08016b09 	.word	0x08016b09

08015274 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015278:	4b0e      	ldr	r3, [pc, #56]	; (80152b4 <dhcp_dec_pcb_refcount+0x40>)
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d105      	bne.n	801528c <dhcp_dec_pcb_refcount+0x18>
 8015280:	4b0d      	ldr	r3, [pc, #52]	; (80152b8 <dhcp_dec_pcb_refcount+0x44>)
 8015282:	22ff      	movs	r2, #255	; 0xff
 8015284:	490d      	ldr	r1, [pc, #52]	; (80152bc <dhcp_dec_pcb_refcount+0x48>)
 8015286:	480e      	ldr	r0, [pc, #56]	; (80152c0 <dhcp_dec_pcb_refcount+0x4c>)
 8015288:	f006 fb1a 	bl	801b8c0 <iprintf>
  dhcp_pcb_refcount--;
 801528c:	4b09      	ldr	r3, [pc, #36]	; (80152b4 <dhcp_dec_pcb_refcount+0x40>)
 801528e:	781b      	ldrb	r3, [r3, #0]
 8015290:	3b01      	subs	r3, #1
 8015292:	b2da      	uxtb	r2, r3
 8015294:	4b07      	ldr	r3, [pc, #28]	; (80152b4 <dhcp_dec_pcb_refcount+0x40>)
 8015296:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015298:	4b06      	ldr	r3, [pc, #24]	; (80152b4 <dhcp_dec_pcb_refcount+0x40>)
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d107      	bne.n	80152b0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80152a0:	4b08      	ldr	r3, [pc, #32]	; (80152c4 <dhcp_dec_pcb_refcount+0x50>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7ff fefd 	bl	80150a4 <udp_remove>
    dhcp_pcb = NULL;
 80152aa:	4b06      	ldr	r3, [pc, #24]	; (80152c4 <dhcp_dec_pcb_refcount+0x50>)
 80152ac:	2200      	movs	r2, #0
 80152ae:	601a      	str	r2, [r3, #0]
  }
}
 80152b0:	bf00      	nop
 80152b2:	bd80      	pop	{r7, pc}
 80152b4:	20008b28 	.word	0x20008b28
 80152b8:	0801fe7c 	.word	0x0801fe7c
 80152bc:	0801ff04 	.word	0x0801ff04
 80152c0:	0801fedc 	.word	0x0801fedc
 80152c4:	20008b24 	.word	0x20008b24

080152c8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b084      	sub	sp, #16
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152d4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80152d6:	210c      	movs	r1, #12
 80152d8:	68f8      	ldr	r0, [r7, #12]
 80152da:	f001 f857 	bl	801638c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80152de:	4b06      	ldr	r3, [pc, #24]	; (80152f8 <dhcp_handle_nak+0x30>)
 80152e0:	4a05      	ldr	r2, [pc, #20]	; (80152f8 <dhcp_handle_nak+0x30>)
 80152e2:	4905      	ldr	r1, [pc, #20]	; (80152f8 <dhcp_handle_nak+0x30>)
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f7f8 f857 	bl	800d398 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80152ea:	6878      	ldr	r0, [r7, #4]
 80152ec:	f000 fc4a 	bl	8015b84 <dhcp_discover>
}
 80152f0:	bf00      	nop
 80152f2:	3710      	adds	r7, #16
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	08020b38 	.word	0x08020b38

080152fc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b084      	sub	sp, #16
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015308:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801530a:	2108      	movs	r1, #8
 801530c:	68f8      	ldr	r0, [r7, #12]
 801530e:	f001 f83d 	bl	801638c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	331c      	adds	r3, #28
 8015316:	2200      	movs	r2, #0
 8015318:	4619      	mov	r1, r3
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f002 fb3e 	bl	801799c <etharp_query>
 8015320:	4603      	mov	r3, r0
 8015322:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	799b      	ldrb	r3, [r3, #6]
 8015328:	2bff      	cmp	r3, #255	; 0xff
 801532a:	d005      	beq.n	8015338 <dhcp_check+0x3c>
    dhcp->tries++;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	799b      	ldrb	r3, [r3, #6]
 8015330:	3301      	adds	r3, #1
 8015332:	b2da      	uxtb	r2, r3
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015338:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801533c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801533e:	893b      	ldrh	r3, [r7, #8]
 8015340:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015344:	4a06      	ldr	r2, [pc, #24]	; (8015360 <dhcp_check+0x64>)
 8015346:	fb82 1203 	smull	r1, r2, r2, r3
 801534a:	1152      	asrs	r2, r2, #5
 801534c:	17db      	asrs	r3, r3, #31
 801534e:	1ad3      	subs	r3, r2, r3
 8015350:	b29a      	uxth	r2, r3
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015356:	bf00      	nop
 8015358:	3710      	adds	r7, #16
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	10624dd3 	.word	0x10624dd3

08015364 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b084      	sub	sp, #16
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015372:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015374:	4b0c      	ldr	r3, [pc, #48]	; (80153a8 <dhcp_handle_offer+0x44>)
 8015376:	789b      	ldrb	r3, [r3, #2]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d011      	beq.n	80153a0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	2200      	movs	r2, #0
 8015380:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015382:	4b0a      	ldr	r3, [pc, #40]	; (80153ac <dhcp_handle_offer+0x48>)
 8015384:	689b      	ldr	r3, [r3, #8]
 8015386:	4618      	mov	r0, r3
 8015388:	f7f7 f971 	bl	800c66e <lwip_htonl>
 801538c:	4602      	mov	r2, r0
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	691a      	ldr	r2, [r3, #16]
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f000 f808 	bl	80153b0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80153a0:	bf00      	nop
 80153a2:	3710      	adds	r7, #16
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}
 80153a8:	2001067c 	.word	0x2001067c
 80153ac:	20010684 	.word	0x20010684

080153b0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80153b0:	b5b0      	push	{r4, r5, r7, lr}
 80153b2:	b08a      	sub	sp, #40	; 0x28
 80153b4:	af02      	add	r7, sp, #8
 80153b6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d109      	bne.n	80153d2 <dhcp_select+0x22>
 80153be:	4b71      	ldr	r3, [pc, #452]	; (8015584 <dhcp_select+0x1d4>)
 80153c0:	f240 1277 	movw	r2, #375	; 0x177
 80153c4:	4970      	ldr	r1, [pc, #448]	; (8015588 <dhcp_select+0x1d8>)
 80153c6:	4871      	ldr	r0, [pc, #452]	; (801558c <dhcp_select+0x1dc>)
 80153c8:	f006 fa7a 	bl	801b8c0 <iprintf>
 80153cc:	f06f 030f 	mvn.w	r3, #15
 80153d0:	e0d3      	b.n	801557a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153d6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80153d8:	69bb      	ldr	r3, [r7, #24]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d109      	bne.n	80153f2 <dhcp_select+0x42>
 80153de:	4b69      	ldr	r3, [pc, #420]	; (8015584 <dhcp_select+0x1d4>)
 80153e0:	f240 1279 	movw	r2, #377	; 0x179
 80153e4:	496a      	ldr	r1, [pc, #424]	; (8015590 <dhcp_select+0x1e0>)
 80153e6:	4869      	ldr	r0, [pc, #420]	; (801558c <dhcp_select+0x1dc>)
 80153e8:	f006 fa6a 	bl	801b8c0 <iprintf>
 80153ec:	f06f 0305 	mvn.w	r3, #5
 80153f0:	e0c3      	b.n	801557a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80153f2:	2101      	movs	r1, #1
 80153f4:	69b8      	ldr	r0, [r7, #24]
 80153f6:	f000 ffc9 	bl	801638c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80153fa:	f107 030c 	add.w	r3, r7, #12
 80153fe:	2203      	movs	r2, #3
 8015400:	69b9      	ldr	r1, [r7, #24]
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	f001 fc4e 	bl	8016ca4 <dhcp_create_msg>
 8015408:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	2b00      	cmp	r3, #0
 801540e:	f000 8085 	beq.w	801551c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015412:	697b      	ldr	r3, [r7, #20]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015418:	89b8      	ldrh	r0, [r7, #12]
 801541a:	693b      	ldr	r3, [r7, #16]
 801541c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015420:	2302      	movs	r3, #2
 8015422:	2239      	movs	r2, #57	; 0x39
 8015424:	f000 ffcc 	bl	80163c0 <dhcp_option>
 8015428:	4603      	mov	r3, r0
 801542a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801542c:	89b8      	ldrh	r0, [r7, #12]
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015438:	461a      	mov	r2, r3
 801543a:	f001 f81b 	bl	8016474 <dhcp_option_short>
 801543e:	4603      	mov	r3, r0
 8015440:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015442:	89b8      	ldrh	r0, [r7, #12]
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801544a:	2304      	movs	r3, #4
 801544c:	2232      	movs	r2, #50	; 0x32
 801544e:	f000 ffb7 	bl	80163c0 <dhcp_option>
 8015452:	4603      	mov	r3, r0
 8015454:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015456:	89bc      	ldrh	r4, [r7, #12]
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801545e:	69bb      	ldr	r3, [r7, #24]
 8015460:	69db      	ldr	r3, [r3, #28]
 8015462:	4618      	mov	r0, r3
 8015464:	f7f7 f903 	bl	800c66e <lwip_htonl>
 8015468:	4603      	mov	r3, r0
 801546a:	461a      	mov	r2, r3
 801546c:	4629      	mov	r1, r5
 801546e:	4620      	mov	r0, r4
 8015470:	f001 f832 	bl	80164d8 <dhcp_option_long>
 8015474:	4603      	mov	r3, r0
 8015476:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015478:	89b8      	ldrh	r0, [r7, #12]
 801547a:	693b      	ldr	r3, [r7, #16]
 801547c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015480:	2304      	movs	r3, #4
 8015482:	2236      	movs	r2, #54	; 0x36
 8015484:	f000 ff9c 	bl	80163c0 <dhcp_option>
 8015488:	4603      	mov	r3, r0
 801548a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801548c:	89bc      	ldrh	r4, [r7, #12]
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015494:	69bb      	ldr	r3, [r7, #24]
 8015496:	699b      	ldr	r3, [r3, #24]
 8015498:	4618      	mov	r0, r3
 801549a:	f7f7 f8e8 	bl	800c66e <lwip_htonl>
 801549e:	4603      	mov	r3, r0
 80154a0:	461a      	mov	r2, r3
 80154a2:	4629      	mov	r1, r5
 80154a4:	4620      	mov	r0, r4
 80154a6:	f001 f817 	bl	80164d8 <dhcp_option_long>
 80154aa:	4603      	mov	r3, r0
 80154ac:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80154ae:	89b8      	ldrh	r0, [r7, #12]
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154b6:	2303      	movs	r3, #3
 80154b8:	2237      	movs	r2, #55	; 0x37
 80154ba:	f000 ff81 	bl	80163c0 <dhcp_option>
 80154be:	4603      	mov	r3, r0
 80154c0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80154c2:	2300      	movs	r3, #0
 80154c4:	77bb      	strb	r3, [r7, #30]
 80154c6:	e00e      	b.n	80154e6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80154c8:	89b8      	ldrh	r0, [r7, #12]
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154d0:	7fbb      	ldrb	r3, [r7, #30]
 80154d2:	4a30      	ldr	r2, [pc, #192]	; (8015594 <dhcp_select+0x1e4>)
 80154d4:	5cd3      	ldrb	r3, [r2, r3]
 80154d6:	461a      	mov	r2, r3
 80154d8:	f000 ffa6 	bl	8016428 <dhcp_option_byte>
 80154dc:	4603      	mov	r3, r0
 80154de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80154e0:	7fbb      	ldrb	r3, [r7, #30]
 80154e2:	3301      	adds	r3, #1
 80154e4:	77bb      	strb	r3, [r7, #30]
 80154e6:	7fbb      	ldrb	r3, [r7, #30]
 80154e8:	2b02      	cmp	r3, #2
 80154ea:	d9ed      	bls.n	80154c8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80154ec:	89b8      	ldrh	r0, [r7, #12]
 80154ee:	693b      	ldr	r3, [r7, #16]
 80154f0:	33f0      	adds	r3, #240	; 0xf0
 80154f2:	697a      	ldr	r2, [r7, #20]
 80154f4:	4619      	mov	r1, r3
 80154f6:	f001 fcab 	bl	8016e50 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80154fa:	4b27      	ldr	r3, [pc, #156]	; (8015598 <dhcp_select+0x1e8>)
 80154fc:	6818      	ldr	r0, [r3, #0]
 80154fe:	4b27      	ldr	r3, [pc, #156]	; (801559c <dhcp_select+0x1ec>)
 8015500:	9301      	str	r3, [sp, #4]
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	9300      	str	r3, [sp, #0]
 8015506:	2343      	movs	r3, #67	; 0x43
 8015508:	4a25      	ldr	r2, [pc, #148]	; (80155a0 <dhcp_select+0x1f0>)
 801550a:	6979      	ldr	r1, [r7, #20]
 801550c:	f7ff fba6 	bl	8014c5c <udp_sendto_if_src>
 8015510:	4603      	mov	r3, r0
 8015512:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015514:	6978      	ldr	r0, [r7, #20]
 8015516:	f7f8 fc7f 	bl	800de18 <pbuf_free>
 801551a:	e001      	b.n	8015520 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801551c:	23ff      	movs	r3, #255	; 0xff
 801551e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015520:	69bb      	ldr	r3, [r7, #24]
 8015522:	799b      	ldrb	r3, [r3, #6]
 8015524:	2bff      	cmp	r3, #255	; 0xff
 8015526:	d005      	beq.n	8015534 <dhcp_select+0x184>
    dhcp->tries++;
 8015528:	69bb      	ldr	r3, [r7, #24]
 801552a:	799b      	ldrb	r3, [r3, #6]
 801552c:	3301      	adds	r3, #1
 801552e:	b2da      	uxtb	r2, r3
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015534:	69bb      	ldr	r3, [r7, #24]
 8015536:	799b      	ldrb	r3, [r3, #6]
 8015538:	2b05      	cmp	r3, #5
 801553a:	d80d      	bhi.n	8015558 <dhcp_select+0x1a8>
 801553c:	69bb      	ldr	r3, [r7, #24]
 801553e:	799b      	ldrb	r3, [r3, #6]
 8015540:	461a      	mov	r2, r3
 8015542:	2301      	movs	r3, #1
 8015544:	4093      	lsls	r3, r2
 8015546:	b29b      	uxth	r3, r3
 8015548:	461a      	mov	r2, r3
 801554a:	0152      	lsls	r2, r2, #5
 801554c:	1ad2      	subs	r2, r2, r3
 801554e:	0092      	lsls	r2, r2, #2
 8015550:	4413      	add	r3, r2
 8015552:	00db      	lsls	r3, r3, #3
 8015554:	b29b      	uxth	r3, r3
 8015556:	e001      	b.n	801555c <dhcp_select+0x1ac>
 8015558:	f64e 2360 	movw	r3, #60000	; 0xea60
 801555c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801555e:	89fb      	ldrh	r3, [r7, #14]
 8015560:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015564:	4a0f      	ldr	r2, [pc, #60]	; (80155a4 <dhcp_select+0x1f4>)
 8015566:	fb82 1203 	smull	r1, r2, r2, r3
 801556a:	1152      	asrs	r2, r2, #5
 801556c:	17db      	asrs	r3, r3, #31
 801556e:	1ad3      	subs	r3, r2, r3
 8015570:	b29a      	uxth	r2, r3
 8015572:	69bb      	ldr	r3, [r7, #24]
 8015574:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015576:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801557a:	4618      	mov	r0, r3
 801557c:	3720      	adds	r7, #32
 801557e:	46bd      	mov	sp, r7
 8015580:	bdb0      	pop	{r4, r5, r7, pc}
 8015582:	bf00      	nop
 8015584:	0801fe7c 	.word	0x0801fe7c
 8015588:	0801ff28 	.word	0x0801ff28
 801558c:	0801fedc 	.word	0x0801fedc
 8015590:	0801ff44 	.word	0x0801ff44
 8015594:	2000001c 	.word	0x2000001c
 8015598:	20008b24 	.word	0x20008b24
 801559c:	08020b38 	.word	0x08020b38
 80155a0:	08020b3c 	.word	0x08020b3c
 80155a4:	10624dd3 	.word	0x10624dd3

080155a8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80155ae:	4b27      	ldr	r3, [pc, #156]	; (801564c <dhcp_coarse_tmr+0xa4>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	607b      	str	r3, [r7, #4]
 80155b4:	e042      	b.n	801563c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ba:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d039      	beq.n	8015636 <dhcp_coarse_tmr+0x8e>
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	795b      	ldrb	r3, [r3, #5]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d035      	beq.n	8015636 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80155ca:	683b      	ldr	r3, [r7, #0]
 80155cc:	8a9b      	ldrh	r3, [r3, #20]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d012      	beq.n	80155f8 <dhcp_coarse_tmr+0x50>
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	8a5b      	ldrh	r3, [r3, #18]
 80155d6:	3301      	adds	r3, #1
 80155d8:	b29a      	uxth	r2, r3
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	825a      	strh	r2, [r3, #18]
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	8a5a      	ldrh	r2, [r3, #18]
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	8a9b      	ldrh	r3, [r3, #20]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d106      	bne.n	80155f8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f000 fe34 	bl	8016258 <dhcp_release_and_stop>
        dhcp_start(netif);
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f000 f96b 	bl	80158cc <dhcp_start>
 80155f6:	e01e      	b.n	8015636 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	8a1b      	ldrh	r3, [r3, #16]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d00b      	beq.n	8015618 <dhcp_coarse_tmr+0x70>
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	8a1b      	ldrh	r3, [r3, #16]
 8015604:	1e5a      	subs	r2, r3, #1
 8015606:	b291      	uxth	r1, r2
 8015608:	683a      	ldr	r2, [r7, #0]
 801560a:	8211      	strh	r1, [r2, #16]
 801560c:	2b01      	cmp	r3, #1
 801560e:	d103      	bne.n	8015618 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f000 f8c7 	bl	80157a4 <dhcp_t2_timeout>
 8015616:	e00e      	b.n	8015636 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	89db      	ldrh	r3, [r3, #14]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d00a      	beq.n	8015636 <dhcp_coarse_tmr+0x8e>
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	89db      	ldrh	r3, [r3, #14]
 8015624:	1e5a      	subs	r2, r3, #1
 8015626:	b291      	uxth	r1, r2
 8015628:	683a      	ldr	r2, [r7, #0]
 801562a:	81d1      	strh	r1, [r2, #14]
 801562c:	2b01      	cmp	r3, #1
 801562e:	d102      	bne.n	8015636 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f000 f888 	bl	8015746 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	607b      	str	r3, [r7, #4]
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d1b9      	bne.n	80155b6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015642:	bf00      	nop
 8015644:	bf00      	nop
 8015646:	3708      	adds	r7, #8
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}
 801564c:	20010650 	.word	0x20010650

08015650 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b082      	sub	sp, #8
 8015654:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015656:	4b16      	ldr	r3, [pc, #88]	; (80156b0 <dhcp_fine_tmr+0x60>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	607b      	str	r3, [r7, #4]
 801565c:	e020      	b.n	80156a0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015662:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d017      	beq.n	801569a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	891b      	ldrh	r3, [r3, #8]
 801566e:	2b01      	cmp	r3, #1
 8015670:	d906      	bls.n	8015680 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	891b      	ldrh	r3, [r3, #8]
 8015676:	3b01      	subs	r3, #1
 8015678:	b29a      	uxth	r2, r3
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	811a      	strh	r2, [r3, #8]
 801567e:	e00c      	b.n	801569a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	891b      	ldrh	r3, [r3, #8]
 8015684:	2b01      	cmp	r3, #1
 8015686:	d108      	bne.n	801569a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	891b      	ldrh	r3, [r3, #8]
 801568c:	3b01      	subs	r3, #1
 801568e:	b29a      	uxth	r2, r3
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f000 f80d 	bl	80156b4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	607b      	str	r3, [r7, #4]
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d1db      	bne.n	801565e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80156a6:	bf00      	nop
 80156a8:	bf00      	nop
 80156aa:	3708      	adds	r7, #8
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	20010650 	.word	0x20010650

080156b4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b084      	sub	sp, #16
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156c0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	795b      	ldrb	r3, [r3, #5]
 80156c6:	2b0c      	cmp	r3, #12
 80156c8:	d003      	beq.n	80156d2 <dhcp_timeout+0x1e>
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	795b      	ldrb	r3, [r3, #5]
 80156ce:	2b06      	cmp	r3, #6
 80156d0:	d103      	bne.n	80156da <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	f000 fa56 	bl	8015b84 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80156d8:	e031      	b.n	801573e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	795b      	ldrb	r3, [r3, #5]
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d10e      	bne.n	8015700 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	799b      	ldrb	r3, [r3, #6]
 80156e6:	2b05      	cmp	r3, #5
 80156e8:	d803      	bhi.n	80156f2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f7ff fe60 	bl	80153b0 <dhcp_select>
}
 80156f0:	e025      	b.n	801573e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f000 fdb0 	bl	8016258 <dhcp_release_and_stop>
      dhcp_start(netif);
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f000 f8e7 	bl	80158cc <dhcp_start>
}
 80156fe:	e01e      	b.n	801573e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	795b      	ldrb	r3, [r3, #5]
 8015704:	2b08      	cmp	r3, #8
 8015706:	d10b      	bne.n	8015720 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	799b      	ldrb	r3, [r3, #6]
 801570c:	2b01      	cmp	r3, #1
 801570e:	d803      	bhi.n	8015718 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f7ff fdf3 	bl	80152fc <dhcp_check>
}
 8015716:	e012      	b.n	801573e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015718:	6878      	ldr	r0, [r7, #4]
 801571a:	f000 fad5 	bl	8015cc8 <dhcp_bind>
}
 801571e:	e00e      	b.n	801573e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	795b      	ldrb	r3, [r3, #5]
 8015724:	2b03      	cmp	r3, #3
 8015726:	d10a      	bne.n	801573e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	799b      	ldrb	r3, [r3, #6]
 801572c:	2b01      	cmp	r3, #1
 801572e:	d803      	bhi.n	8015738 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f000 fcdb 	bl	80160ec <dhcp_reboot>
}
 8015736:	e002      	b.n	801573e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f000 fa23 	bl	8015b84 <dhcp_discover>
}
 801573e:	bf00      	nop
 8015740:	3710      	adds	r7, #16
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}

08015746 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015746:	b580      	push	{r7, lr}
 8015748:	b084      	sub	sp, #16
 801574a:	af00      	add	r7, sp, #0
 801574c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015752:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	795b      	ldrb	r3, [r3, #5]
 8015758:	2b01      	cmp	r3, #1
 801575a:	d007      	beq.n	801576c <dhcp_t1_timeout+0x26>
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	795b      	ldrb	r3, [r3, #5]
 8015760:	2b0a      	cmp	r3, #10
 8015762:	d003      	beq.n	801576c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015768:	2b05      	cmp	r3, #5
 801576a:	d117      	bne.n	801579c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f000 fb85 	bl	8015e7c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	899b      	ldrh	r3, [r3, #12]
 8015776:	461a      	mov	r2, r3
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	8a5b      	ldrh	r3, [r3, #18]
 801577c:	1ad3      	subs	r3, r2, r3
 801577e:	2b01      	cmp	r3, #1
 8015780:	dd0c      	ble.n	801579c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	899b      	ldrh	r3, [r3, #12]
 8015786:	461a      	mov	r2, r3
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	8a5b      	ldrh	r3, [r3, #18]
 801578c:	1ad3      	subs	r3, r2, r3
 801578e:	2b00      	cmp	r3, #0
 8015790:	da00      	bge.n	8015794 <dhcp_t1_timeout+0x4e>
 8015792:	3301      	adds	r3, #1
 8015794:	105b      	asrs	r3, r3, #1
 8015796:	b29a      	uxth	r2, r3
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801579c:	bf00      	nop
 801579e:	3710      	adds	r7, #16
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}

080157a4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b084      	sub	sp, #16
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157b0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	795b      	ldrb	r3, [r3, #5]
 80157b6:	2b01      	cmp	r3, #1
 80157b8:	d00b      	beq.n	80157d2 <dhcp_t2_timeout+0x2e>
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	795b      	ldrb	r3, [r3, #5]
 80157be:	2b0a      	cmp	r3, #10
 80157c0:	d007      	beq.n	80157d2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80157c6:	2b05      	cmp	r3, #5
 80157c8:	d003      	beq.n	80157d2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	795b      	ldrb	r3, [r3, #5]
 80157ce:	2b04      	cmp	r3, #4
 80157d0:	d117      	bne.n	8015802 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f000 fbee 	bl	8015fb4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	8a9b      	ldrh	r3, [r3, #20]
 80157dc:	461a      	mov	r2, r3
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	8a5b      	ldrh	r3, [r3, #18]
 80157e2:	1ad3      	subs	r3, r2, r3
 80157e4:	2b01      	cmp	r3, #1
 80157e6:	dd0c      	ble.n	8015802 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	8a9b      	ldrh	r3, [r3, #20]
 80157ec:	461a      	mov	r2, r3
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	8a5b      	ldrh	r3, [r3, #18]
 80157f2:	1ad3      	subs	r3, r2, r3
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	da00      	bge.n	80157fa <dhcp_t2_timeout+0x56>
 80157f8:	3301      	adds	r3, #1
 80157fa:	105b      	asrs	r3, r3, #1
 80157fc:	b29a      	uxth	r2, r3
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8015802:	bf00      	nop
 8015804:	3710      	adds	r7, #16
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}
	...

0801580c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b084      	sub	sp, #16
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
 8015814:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801581a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	2200      	movs	r2, #0
 8015820:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	2200      	movs	r2, #0
 8015826:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015828:	4b26      	ldr	r3, [pc, #152]	; (80158c4 <dhcp_handle_ack+0xb8>)
 801582a:	78db      	ldrb	r3, [r3, #3]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d003      	beq.n	8015838 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015830:	4b25      	ldr	r3, [pc, #148]	; (80158c8 <dhcp_handle_ack+0xbc>)
 8015832:	68da      	ldr	r2, [r3, #12]
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015838:	4b22      	ldr	r3, [pc, #136]	; (80158c4 <dhcp_handle_ack+0xb8>)
 801583a:	791b      	ldrb	r3, [r3, #4]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d004      	beq.n	801584a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015840:	4b21      	ldr	r3, [pc, #132]	; (80158c8 <dhcp_handle_ack+0xbc>)
 8015842:	691a      	ldr	r2, [r3, #16]
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	62da      	str	r2, [r3, #44]	; 0x2c
 8015848:	e004      	b.n	8015854 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801584e:	085a      	lsrs	r2, r3, #1
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015854:	4b1b      	ldr	r3, [pc, #108]	; (80158c4 <dhcp_handle_ack+0xb8>)
 8015856:	795b      	ldrb	r3, [r3, #5]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d004      	beq.n	8015866 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801585c:	4b1a      	ldr	r3, [pc, #104]	; (80158c8 <dhcp_handle_ack+0xbc>)
 801585e:	695a      	ldr	r2, [r3, #20]
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	631a      	str	r2, [r3, #48]	; 0x30
 8015864:	e007      	b.n	8015876 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801586a:	4613      	mov	r3, r2
 801586c:	00db      	lsls	r3, r3, #3
 801586e:	1a9b      	subs	r3, r3, r2
 8015870:	08da      	lsrs	r2, r3, #3
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	691a      	ldr	r2, [r3, #16]
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801587e:	4b11      	ldr	r3, [pc, #68]	; (80158c4 <dhcp_handle_ack+0xb8>)
 8015880:	799b      	ldrb	r3, [r3, #6]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d00b      	beq.n	801589e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015886:	4b10      	ldr	r3, [pc, #64]	; (80158c8 <dhcp_handle_ack+0xbc>)
 8015888:	699b      	ldr	r3, [r3, #24]
 801588a:	4618      	mov	r0, r3
 801588c:	f7f6 feef 	bl	800c66e <lwip_htonl>
 8015890:	4602      	mov	r2, r0
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	2201      	movs	r2, #1
 801589a:	71da      	strb	r2, [r3, #7]
 801589c:	e002      	b.n	80158a4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	2200      	movs	r2, #0
 80158a2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80158a4:	4b07      	ldr	r3, [pc, #28]	; (80158c4 <dhcp_handle_ack+0xb8>)
 80158a6:	79db      	ldrb	r3, [r3, #7]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d007      	beq.n	80158bc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80158ac:	4b06      	ldr	r3, [pc, #24]	; (80158c8 <dhcp_handle_ack+0xbc>)
 80158ae:	69db      	ldr	r3, [r3, #28]
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7f6 fedc 	bl	800c66e <lwip_htonl>
 80158b6:	4602      	mov	r2, r0
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80158bc:	bf00      	nop
 80158be:	3710      	adds	r7, #16
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	2001067c 	.word	0x2001067c
 80158c8:	20010684 	.word	0x20010684

080158cc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b084      	sub	sp, #16
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d109      	bne.n	80158ee <dhcp_start+0x22>
 80158da:	4b37      	ldr	r3, [pc, #220]	; (80159b8 <dhcp_start+0xec>)
 80158dc:	f240 22e7 	movw	r2, #743	; 0x2e7
 80158e0:	4936      	ldr	r1, [pc, #216]	; (80159bc <dhcp_start+0xf0>)
 80158e2:	4837      	ldr	r0, [pc, #220]	; (80159c0 <dhcp_start+0xf4>)
 80158e4:	f005 ffec 	bl	801b8c0 <iprintf>
 80158e8:	f06f 030f 	mvn.w	r3, #15
 80158ec:	e060      	b.n	80159b0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80158f4:	f003 0301 	and.w	r3, r3, #1
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d109      	bne.n	8015910 <dhcp_start+0x44>
 80158fc:	4b2e      	ldr	r3, [pc, #184]	; (80159b8 <dhcp_start+0xec>)
 80158fe:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8015902:	4930      	ldr	r1, [pc, #192]	; (80159c4 <dhcp_start+0xf8>)
 8015904:	482e      	ldr	r0, [pc, #184]	; (80159c0 <dhcp_start+0xf4>)
 8015906:	f005 ffdb 	bl	801b8c0 <iprintf>
 801590a:	f06f 030f 	mvn.w	r3, #15
 801590e:	e04f      	b.n	80159b0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015914:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801591a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801591e:	d202      	bcs.n	8015926 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015924:	e044      	b.n	80159b0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d10d      	bne.n	8015948 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801592c:	2034      	movs	r0, #52	; 0x34
 801592e:	f7f7 f9bd 	bl	800ccac <mem_malloc>
 8015932:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d102      	bne.n	8015940 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801593a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801593e:	e037      	b.n	80159b0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	68fa      	ldr	r2, [r7, #12]
 8015944:	625a      	str	r2, [r3, #36]	; 0x24
 8015946:	e005      	b.n	8015954 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	791b      	ldrb	r3, [r3, #4]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d001      	beq.n	8015954 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015950:	f7ff fc90 	bl	8015274 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015954:	2234      	movs	r2, #52	; 0x34
 8015956:	2100      	movs	r1, #0
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f005 ffa9 	bl	801b8b0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801595e:	f7ff fc37 	bl	80151d0 <dhcp_inc_pcb_refcount>
 8015962:	4603      	mov	r3, r0
 8015964:	2b00      	cmp	r3, #0
 8015966:	d002      	beq.n	801596e <dhcp_start+0xa2>
    return ERR_MEM;
 8015968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801596c:	e020      	b.n	80159b0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2201      	movs	r2, #1
 8015972:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801597a:	f003 0304 	and.w	r3, r3, #4
 801597e:	2b00      	cmp	r3, #0
 8015980:	d105      	bne.n	801598e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8015982:	2102      	movs	r1, #2
 8015984:	68f8      	ldr	r0, [r7, #12]
 8015986:	f000 fd01 	bl	801638c <dhcp_set_state>
    return ERR_OK;
 801598a:	2300      	movs	r3, #0
 801598c:	e010      	b.n	80159b0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	f000 f8f8 	bl	8015b84 <dhcp_discover>
 8015994:	4603      	mov	r3, r0
 8015996:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015998:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d005      	beq.n	80159ac <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80159a0:	6878      	ldr	r0, [r7, #4]
 80159a2:	f000 fc59 	bl	8016258 <dhcp_release_and_stop>
    return ERR_MEM;
 80159a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159aa:	e001      	b.n	80159b0 <dhcp_start+0xe4>
  }
  return result;
 80159ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	3710      	adds	r7, #16
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bd80      	pop	{r7, pc}
 80159b8:	0801fe7c 	.word	0x0801fe7c
 80159bc:	0801ff60 	.word	0x0801ff60
 80159c0:	0801fedc 	.word	0x0801fedc
 80159c4:	0801ffa4 	.word	0x0801ffa4

080159c8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b084      	sub	sp, #16
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d025      	beq.n	8015a28 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	795b      	ldrb	r3, [r3, #5]
 80159e0:	2b0a      	cmp	r3, #10
 80159e2:	d008      	beq.n	80159f6 <dhcp_network_changed+0x2e>
 80159e4:	2b0a      	cmp	r3, #10
 80159e6:	dc0d      	bgt.n	8015a04 <dhcp_network_changed+0x3c>
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d01f      	beq.n	8015a2c <dhcp_network_changed+0x64>
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	db09      	blt.n	8015a04 <dhcp_network_changed+0x3c>
 80159f0:	3b03      	subs	r3, #3
 80159f2:	2b02      	cmp	r3, #2
 80159f4:	d806      	bhi.n	8015a04 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	2200      	movs	r2, #0
 80159fa:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	f000 fb75 	bl	80160ec <dhcp_reboot>
      break;
 8015a02:	e014      	b.n	8015a2e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	795b      	ldrb	r3, [r3, #5]
 8015a08:	2b0c      	cmp	r3, #12
 8015a0a:	d906      	bls.n	8015a1a <dhcp_network_changed+0x52>
 8015a0c:	4b09      	ldr	r3, [pc, #36]	; (8015a34 <dhcp_network_changed+0x6c>)
 8015a0e:	f240 326d 	movw	r2, #877	; 0x36d
 8015a12:	4909      	ldr	r1, [pc, #36]	; (8015a38 <dhcp_network_changed+0x70>)
 8015a14:	4809      	ldr	r0, [pc, #36]	; (8015a3c <dhcp_network_changed+0x74>)
 8015a16:	f005 ff53 	bl	801b8c0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f000 f8af 	bl	8015b84 <dhcp_discover>
      break;
 8015a26:	e002      	b.n	8015a2e <dhcp_network_changed+0x66>
    return;
 8015a28:	bf00      	nop
 8015a2a:	e000      	b.n	8015a2e <dhcp_network_changed+0x66>
      break;
 8015a2c:	bf00      	nop
  }
}
 8015a2e:	3710      	adds	r7, #16
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	0801fe7c 	.word	0x0801fe7c
 8015a38:	0801ffc8 	.word	0x0801ffc8
 8015a3c:	0801fedc 	.word	0x0801fedc

08015a40 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b084      	sub	sp, #16
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d107      	bne.n	8015a60 <dhcp_arp_reply+0x20>
 8015a50:	4b0e      	ldr	r3, [pc, #56]	; (8015a8c <dhcp_arp_reply+0x4c>)
 8015a52:	f240 328b 	movw	r2, #907	; 0x38b
 8015a56:	490e      	ldr	r1, [pc, #56]	; (8015a90 <dhcp_arp_reply+0x50>)
 8015a58:	480e      	ldr	r0, [pc, #56]	; (8015a94 <dhcp_arp_reply+0x54>)
 8015a5a:	f005 ff31 	bl	801b8c0 <iprintf>
 8015a5e:	e012      	b.n	8015a86 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a64:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d00c      	beq.n	8015a86 <dhcp_arp_reply+0x46>
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	795b      	ldrb	r3, [r3, #5]
 8015a70:	2b08      	cmp	r3, #8
 8015a72:	d108      	bne.n	8015a86 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	681a      	ldr	r2, [r3, #0]
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	69db      	ldr	r3, [r3, #28]
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d102      	bne.n	8015a86 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f000 f809 	bl	8015a98 <dhcp_decline>
    }
  }
}
 8015a86:	3710      	adds	r7, #16
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	0801fe7c 	.word	0x0801fe7c
 8015a90:	0801ff60 	.word	0x0801ff60
 8015a94:	0801fedc 	.word	0x0801fedc

08015a98 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015a98:	b5b0      	push	{r4, r5, r7, lr}
 8015a9a:	b08a      	sub	sp, #40	; 0x28
 8015a9c:	af02      	add	r7, sp, #8
 8015a9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015aa6:	210c      	movs	r1, #12
 8015aa8:	69b8      	ldr	r0, [r7, #24]
 8015aaa:	f000 fc6f 	bl	801638c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8015aae:	f107 030c 	add.w	r3, r7, #12
 8015ab2:	2204      	movs	r2, #4
 8015ab4:	69b9      	ldr	r1, [r7, #24]
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f001 f8f4 	bl	8016ca4 <dhcp_create_msg>
 8015abc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d035      	beq.n	8015b30 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	685b      	ldr	r3, [r3, #4]
 8015ac8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015aca:	89b8      	ldrh	r0, [r7, #12]
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ad2:	2304      	movs	r3, #4
 8015ad4:	2232      	movs	r2, #50	; 0x32
 8015ad6:	f000 fc73 	bl	80163c0 <dhcp_option>
 8015ada:	4603      	mov	r3, r0
 8015adc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015ade:	89bc      	ldrh	r4, [r7, #12]
 8015ae0:	693b      	ldr	r3, [r7, #16]
 8015ae2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015ae6:	69bb      	ldr	r3, [r7, #24]
 8015ae8:	69db      	ldr	r3, [r3, #28]
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7f6 fdbf 	bl	800c66e <lwip_htonl>
 8015af0:	4603      	mov	r3, r0
 8015af2:	461a      	mov	r2, r3
 8015af4:	4629      	mov	r1, r5
 8015af6:	4620      	mov	r0, r4
 8015af8:	f000 fcee 	bl	80164d8 <dhcp_option_long>
 8015afc:	4603      	mov	r3, r0
 8015afe:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015b00:	89b8      	ldrh	r0, [r7, #12]
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	33f0      	adds	r3, #240	; 0xf0
 8015b06:	697a      	ldr	r2, [r7, #20]
 8015b08:	4619      	mov	r1, r3
 8015b0a:	f001 f9a1 	bl	8016e50 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015b0e:	4b19      	ldr	r3, [pc, #100]	; (8015b74 <dhcp_decline+0xdc>)
 8015b10:	6818      	ldr	r0, [r3, #0]
 8015b12:	4b19      	ldr	r3, [pc, #100]	; (8015b78 <dhcp_decline+0xe0>)
 8015b14:	9301      	str	r3, [sp, #4]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	9300      	str	r3, [sp, #0]
 8015b1a:	2343      	movs	r3, #67	; 0x43
 8015b1c:	4a17      	ldr	r2, [pc, #92]	; (8015b7c <dhcp_decline+0xe4>)
 8015b1e:	6979      	ldr	r1, [r7, #20]
 8015b20:	f7ff f89c 	bl	8014c5c <udp_sendto_if_src>
 8015b24:	4603      	mov	r3, r0
 8015b26:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015b28:	6978      	ldr	r0, [r7, #20]
 8015b2a:	f7f8 f975 	bl	800de18 <pbuf_free>
 8015b2e:	e001      	b.n	8015b34 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015b30:	23ff      	movs	r3, #255	; 0xff
 8015b32:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015b34:	69bb      	ldr	r3, [r7, #24]
 8015b36:	799b      	ldrb	r3, [r3, #6]
 8015b38:	2bff      	cmp	r3, #255	; 0xff
 8015b3a:	d005      	beq.n	8015b48 <dhcp_decline+0xb0>
    dhcp->tries++;
 8015b3c:	69bb      	ldr	r3, [r7, #24]
 8015b3e:	799b      	ldrb	r3, [r3, #6]
 8015b40:	3301      	adds	r3, #1
 8015b42:	b2da      	uxtb	r2, r3
 8015b44:	69bb      	ldr	r3, [r7, #24]
 8015b46:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015b48:	f242 7310 	movw	r3, #10000	; 0x2710
 8015b4c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015b4e:	89fb      	ldrh	r3, [r7, #14]
 8015b50:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015b54:	4a0a      	ldr	r2, [pc, #40]	; (8015b80 <dhcp_decline+0xe8>)
 8015b56:	fb82 1203 	smull	r1, r2, r2, r3
 8015b5a:	1152      	asrs	r2, r2, #5
 8015b5c:	17db      	asrs	r3, r3, #31
 8015b5e:	1ad3      	subs	r3, r2, r3
 8015b60:	b29a      	uxth	r2, r3
 8015b62:	69bb      	ldr	r3, [r7, #24]
 8015b64:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015b66:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	3720      	adds	r7, #32
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bdb0      	pop	{r4, r5, r7, pc}
 8015b72:	bf00      	nop
 8015b74:	20008b24 	.word	0x20008b24
 8015b78:	08020b38 	.word	0x08020b38
 8015b7c:	08020b3c 	.word	0x08020b3c
 8015b80:	10624dd3 	.word	0x10624dd3

08015b84 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b08a      	sub	sp, #40	; 0x28
 8015b88:	af02      	add	r7, sp, #8
 8015b8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b90:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8015b92:	2300      	movs	r3, #0
 8015b94:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015b96:	69bb      	ldr	r3, [r7, #24]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015b9c:	2106      	movs	r1, #6
 8015b9e:	69b8      	ldr	r0, [r7, #24]
 8015ba0:	f000 fbf4 	bl	801638c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015ba4:	f107 0308 	add.w	r3, r7, #8
 8015ba8:	2201      	movs	r2, #1
 8015baa:	69b9      	ldr	r1, [r7, #24]
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f001 f879 	bl	8016ca4 <dhcp_create_msg>
 8015bb2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015bb4:	693b      	ldr	r3, [r7, #16]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d04b      	beq.n	8015c52 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015bc0:	8938      	ldrh	r0, [r7, #8]
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015bc8:	2302      	movs	r3, #2
 8015bca:	2239      	movs	r2, #57	; 0x39
 8015bcc:	f000 fbf8 	bl	80163c0 <dhcp_option>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015bd4:	8938      	ldrh	r0, [r7, #8]
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015be0:	461a      	mov	r2, r3
 8015be2:	f000 fc47 	bl	8016474 <dhcp_option_short>
 8015be6:	4603      	mov	r3, r0
 8015be8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015bea:	8938      	ldrh	r0, [r7, #8]
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015bf2:	2303      	movs	r3, #3
 8015bf4:	2237      	movs	r2, #55	; 0x37
 8015bf6:	f000 fbe3 	bl	80163c0 <dhcp_option>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015bfe:	2300      	movs	r3, #0
 8015c00:	77fb      	strb	r3, [r7, #31]
 8015c02:	e00e      	b.n	8015c22 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015c04:	8938      	ldrh	r0, [r7, #8]
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c0c:	7ffb      	ldrb	r3, [r7, #31]
 8015c0e:	4a29      	ldr	r2, [pc, #164]	; (8015cb4 <dhcp_discover+0x130>)
 8015c10:	5cd3      	ldrb	r3, [r2, r3]
 8015c12:	461a      	mov	r2, r3
 8015c14:	f000 fc08 	bl	8016428 <dhcp_option_byte>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015c1c:	7ffb      	ldrb	r3, [r7, #31]
 8015c1e:	3301      	adds	r3, #1
 8015c20:	77fb      	strb	r3, [r7, #31]
 8015c22:	7ffb      	ldrb	r3, [r7, #31]
 8015c24:	2b02      	cmp	r3, #2
 8015c26:	d9ed      	bls.n	8015c04 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015c28:	8938      	ldrh	r0, [r7, #8]
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	33f0      	adds	r3, #240	; 0xf0
 8015c2e:	693a      	ldr	r2, [r7, #16]
 8015c30:	4619      	mov	r1, r3
 8015c32:	f001 f90d 	bl	8016e50 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015c36:	4b20      	ldr	r3, [pc, #128]	; (8015cb8 <dhcp_discover+0x134>)
 8015c38:	6818      	ldr	r0, [r3, #0]
 8015c3a:	4b20      	ldr	r3, [pc, #128]	; (8015cbc <dhcp_discover+0x138>)
 8015c3c:	9301      	str	r3, [sp, #4]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	9300      	str	r3, [sp, #0]
 8015c42:	2343      	movs	r3, #67	; 0x43
 8015c44:	4a1e      	ldr	r2, [pc, #120]	; (8015cc0 <dhcp_discover+0x13c>)
 8015c46:	6939      	ldr	r1, [r7, #16]
 8015c48:	f7ff f808 	bl	8014c5c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015c4c:	6938      	ldr	r0, [r7, #16]
 8015c4e:	f7f8 f8e3 	bl	800de18 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015c52:	69bb      	ldr	r3, [r7, #24]
 8015c54:	799b      	ldrb	r3, [r3, #6]
 8015c56:	2bff      	cmp	r3, #255	; 0xff
 8015c58:	d005      	beq.n	8015c66 <dhcp_discover+0xe2>
    dhcp->tries++;
 8015c5a:	69bb      	ldr	r3, [r7, #24]
 8015c5c:	799b      	ldrb	r3, [r3, #6]
 8015c5e:	3301      	adds	r3, #1
 8015c60:	b2da      	uxtb	r2, r3
 8015c62:	69bb      	ldr	r3, [r7, #24]
 8015c64:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015c66:	69bb      	ldr	r3, [r7, #24]
 8015c68:	799b      	ldrb	r3, [r3, #6]
 8015c6a:	2b05      	cmp	r3, #5
 8015c6c:	d80d      	bhi.n	8015c8a <dhcp_discover+0x106>
 8015c6e:	69bb      	ldr	r3, [r7, #24]
 8015c70:	799b      	ldrb	r3, [r3, #6]
 8015c72:	461a      	mov	r2, r3
 8015c74:	2301      	movs	r3, #1
 8015c76:	4093      	lsls	r3, r2
 8015c78:	b29b      	uxth	r3, r3
 8015c7a:	461a      	mov	r2, r3
 8015c7c:	0152      	lsls	r2, r2, #5
 8015c7e:	1ad2      	subs	r2, r2, r3
 8015c80:	0092      	lsls	r2, r2, #2
 8015c82:	4413      	add	r3, r2
 8015c84:	00db      	lsls	r3, r3, #3
 8015c86:	b29b      	uxth	r3, r3
 8015c88:	e001      	b.n	8015c8e <dhcp_discover+0x10a>
 8015c8a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015c8e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015c90:	897b      	ldrh	r3, [r7, #10]
 8015c92:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015c96:	4a0b      	ldr	r2, [pc, #44]	; (8015cc4 <dhcp_discover+0x140>)
 8015c98:	fb82 1203 	smull	r1, r2, r2, r3
 8015c9c:	1152      	asrs	r2, r2, #5
 8015c9e:	17db      	asrs	r3, r3, #31
 8015ca0:	1ad3      	subs	r3, r2, r3
 8015ca2:	b29a      	uxth	r2, r3
 8015ca4:	69bb      	ldr	r3, [r7, #24]
 8015ca6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	3720      	adds	r7, #32
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}
 8015cb4:	2000001c 	.word	0x2000001c
 8015cb8:	20008b24 	.word	0x20008b24
 8015cbc:	08020b38 	.word	0x08020b38
 8015cc0:	08020b3c 	.word	0x08020b3c
 8015cc4:	10624dd3 	.word	0x10624dd3

08015cc8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b088      	sub	sp, #32
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d107      	bne.n	8015ce6 <dhcp_bind+0x1e>
 8015cd6:	4b64      	ldr	r3, [pc, #400]	; (8015e68 <dhcp_bind+0x1a0>)
 8015cd8:	f240 4215 	movw	r2, #1045	; 0x415
 8015cdc:	4963      	ldr	r1, [pc, #396]	; (8015e6c <dhcp_bind+0x1a4>)
 8015cde:	4864      	ldr	r0, [pc, #400]	; (8015e70 <dhcp_bind+0x1a8>)
 8015ce0:	f005 fdee 	bl	801b8c0 <iprintf>
 8015ce4:	e0bc      	b.n	8015e60 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cea:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015cec:	69bb      	ldr	r3, [r7, #24]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d107      	bne.n	8015d02 <dhcp_bind+0x3a>
 8015cf2:	4b5d      	ldr	r3, [pc, #372]	; (8015e68 <dhcp_bind+0x1a0>)
 8015cf4:	f240 4217 	movw	r2, #1047	; 0x417
 8015cf8:	495e      	ldr	r1, [pc, #376]	; (8015e74 <dhcp_bind+0x1ac>)
 8015cfa:	485d      	ldr	r0, [pc, #372]	; (8015e70 <dhcp_bind+0x1a8>)
 8015cfc:	f005 fde0 	bl	801b8c0 <iprintf>
 8015d00:	e0ae      	b.n	8015e60 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015d02:	69bb      	ldr	r3, [r7, #24]
 8015d04:	2200      	movs	r2, #0
 8015d06:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015d08:	69bb      	ldr	r3, [r7, #24]
 8015d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d10:	d019      	beq.n	8015d46 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015d12:	69bb      	ldr	r3, [r7, #24]
 8015d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d16:	331e      	adds	r3, #30
 8015d18:	4a57      	ldr	r2, [pc, #348]	; (8015e78 <dhcp_bind+0x1b0>)
 8015d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8015d1e:	095b      	lsrs	r3, r3, #5
 8015d20:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015d22:	69fb      	ldr	r3, [r7, #28]
 8015d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d28:	d302      	bcc.n	8015d30 <dhcp_bind+0x68>
      timeout = 0xffff;
 8015d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d2e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015d30:	69fb      	ldr	r3, [r7, #28]
 8015d32:	b29a      	uxth	r2, r3
 8015d34:	69bb      	ldr	r3, [r7, #24]
 8015d36:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015d38:	69bb      	ldr	r3, [r7, #24]
 8015d3a:	8a9b      	ldrh	r3, [r3, #20]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d102      	bne.n	8015d46 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015d40:	69bb      	ldr	r3, [r7, #24]
 8015d42:	2201      	movs	r2, #1
 8015d44:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015d46:	69bb      	ldr	r3, [r7, #24]
 8015d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d4e:	d01d      	beq.n	8015d8c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015d50:	69bb      	ldr	r3, [r7, #24]
 8015d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d54:	331e      	adds	r3, #30
 8015d56:	4a48      	ldr	r2, [pc, #288]	; (8015e78 <dhcp_bind+0x1b0>)
 8015d58:	fba2 2303 	umull	r2, r3, r2, r3
 8015d5c:	095b      	lsrs	r3, r3, #5
 8015d5e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015d60:	69fb      	ldr	r3, [r7, #28]
 8015d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d66:	d302      	bcc.n	8015d6e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d6c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015d6e:	69fb      	ldr	r3, [r7, #28]
 8015d70:	b29a      	uxth	r2, r3
 8015d72:	69bb      	ldr	r3, [r7, #24]
 8015d74:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015d76:	69bb      	ldr	r3, [r7, #24]
 8015d78:	895b      	ldrh	r3, [r3, #10]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d102      	bne.n	8015d84 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015d7e:	69bb      	ldr	r3, [r7, #24]
 8015d80:	2201      	movs	r2, #1
 8015d82:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015d84:	69bb      	ldr	r3, [r7, #24]
 8015d86:	895a      	ldrh	r2, [r3, #10]
 8015d88:	69bb      	ldr	r3, [r7, #24]
 8015d8a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015d8c:	69bb      	ldr	r3, [r7, #24]
 8015d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d94:	d01d      	beq.n	8015dd2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015d96:	69bb      	ldr	r3, [r7, #24]
 8015d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d9a:	331e      	adds	r3, #30
 8015d9c:	4a36      	ldr	r2, [pc, #216]	; (8015e78 <dhcp_bind+0x1b0>)
 8015d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8015da2:	095b      	lsrs	r3, r3, #5
 8015da4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015da6:	69fb      	ldr	r3, [r7, #28]
 8015da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015dac:	d302      	bcc.n	8015db4 <dhcp_bind+0xec>
      timeout = 0xffff;
 8015dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015db2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015db4:	69fb      	ldr	r3, [r7, #28]
 8015db6:	b29a      	uxth	r2, r3
 8015db8:	69bb      	ldr	r3, [r7, #24]
 8015dba:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015dbc:	69bb      	ldr	r3, [r7, #24]
 8015dbe:	899b      	ldrh	r3, [r3, #12]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d102      	bne.n	8015dca <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015dc4:	69bb      	ldr	r3, [r7, #24]
 8015dc6:	2201      	movs	r2, #1
 8015dc8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015dca:	69bb      	ldr	r3, [r7, #24]
 8015dcc:	899a      	ldrh	r2, [r3, #12]
 8015dce:	69bb      	ldr	r3, [r7, #24]
 8015dd0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015dd2:	69bb      	ldr	r3, [r7, #24]
 8015dd4:	895a      	ldrh	r2, [r3, #10]
 8015dd6:	69bb      	ldr	r3, [r7, #24]
 8015dd8:	899b      	ldrh	r3, [r3, #12]
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	d306      	bcc.n	8015dec <dhcp_bind+0x124>
 8015dde:	69bb      	ldr	r3, [r7, #24]
 8015de0:	899b      	ldrh	r3, [r3, #12]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d002      	beq.n	8015dec <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8015de6:	69bb      	ldr	r3, [r7, #24]
 8015de8:	2200      	movs	r2, #0
 8015dea:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015dec:	69bb      	ldr	r3, [r7, #24]
 8015dee:	79db      	ldrb	r3, [r3, #7]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d003      	beq.n	8015dfc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015df4:	69bb      	ldr	r3, [r7, #24]
 8015df6:	6a1b      	ldr	r3, [r3, #32]
 8015df8:	613b      	str	r3, [r7, #16]
 8015dfa:	e014      	b.n	8015e26 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015dfc:	69bb      	ldr	r3, [r7, #24]
 8015dfe:	331c      	adds	r3, #28
 8015e00:	781b      	ldrb	r3, [r3, #0]
 8015e02:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	db02      	blt.n	8015e12 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015e0c:	23ff      	movs	r3, #255	; 0xff
 8015e0e:	613b      	str	r3, [r7, #16]
 8015e10:	e009      	b.n	8015e26 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015e12:	7dfb      	ldrb	r3, [r7, #23]
 8015e14:	2bbf      	cmp	r3, #191	; 0xbf
 8015e16:	d903      	bls.n	8015e20 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015e18:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015e1c:	613b      	str	r3, [r7, #16]
 8015e1e:	e002      	b.n	8015e26 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e24:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015e26:	69bb      	ldr	r3, [r7, #24]
 8015e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e2a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d108      	bne.n	8015e44 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015e32:	69bb      	ldr	r3, [r7, #24]
 8015e34:	69da      	ldr	r2, [r3, #28]
 8015e36:	693b      	ldr	r3, [r7, #16]
 8015e38:	4013      	ands	r3, r2
 8015e3a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015e42:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015e44:	210a      	movs	r1, #10
 8015e46:	69b8      	ldr	r0, [r7, #24]
 8015e48:	f000 faa0 	bl	801638c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015e4c:	69bb      	ldr	r3, [r7, #24]
 8015e4e:	f103 011c 	add.w	r1, r3, #28
 8015e52:	f107 030c 	add.w	r3, r7, #12
 8015e56:	f107 0210 	add.w	r2, r7, #16
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f7f7 fa9c 	bl	800d398 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015e60:	3720      	adds	r7, #32
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}
 8015e66:	bf00      	nop
 8015e68:	0801fe7c 	.word	0x0801fe7c
 8015e6c:	0801ffdc 	.word	0x0801ffdc
 8015e70:	0801fedc 	.word	0x0801fedc
 8015e74:	0801fff8 	.word	0x0801fff8
 8015e78:	88888889 	.word	0x88888889

08015e7c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b08a      	sub	sp, #40	; 0x28
 8015e80:	af02      	add	r7, sp, #8
 8015e82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e88:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015e8a:	2105      	movs	r1, #5
 8015e8c:	69b8      	ldr	r0, [r7, #24]
 8015e8e:	f000 fa7d 	bl	801638c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015e92:	f107 030c 	add.w	r3, r7, #12
 8015e96:	2203      	movs	r2, #3
 8015e98:	69b9      	ldr	r1, [r7, #24]
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f000 ff02 	bl	8016ca4 <dhcp_create_msg>
 8015ea0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015ea2:	697b      	ldr	r3, [r7, #20]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d04e      	beq.n	8015f46 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015ea8:	697b      	ldr	r3, [r7, #20]
 8015eaa:	685b      	ldr	r3, [r3, #4]
 8015eac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015eae:	89b8      	ldrh	r0, [r7, #12]
 8015eb0:	693b      	ldr	r3, [r7, #16]
 8015eb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015eb6:	2302      	movs	r3, #2
 8015eb8:	2239      	movs	r2, #57	; 0x39
 8015eba:	f000 fa81 	bl	80163c0 <dhcp_option>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015ec2:	89b8      	ldrh	r0, [r7, #12]
 8015ec4:	693b      	ldr	r3, [r7, #16]
 8015ec6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ece:	461a      	mov	r2, r3
 8015ed0:	f000 fad0 	bl	8016474 <dhcp_option_short>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015ed8:	89b8      	ldrh	r0, [r7, #12]
 8015eda:	693b      	ldr	r3, [r7, #16]
 8015edc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ee0:	2303      	movs	r3, #3
 8015ee2:	2237      	movs	r2, #55	; 0x37
 8015ee4:	f000 fa6c 	bl	80163c0 <dhcp_option>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015eec:	2300      	movs	r3, #0
 8015eee:	77bb      	strb	r3, [r7, #30]
 8015ef0:	e00e      	b.n	8015f10 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015ef2:	89b8      	ldrh	r0, [r7, #12]
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015efa:	7fbb      	ldrb	r3, [r7, #30]
 8015efc:	4a2a      	ldr	r2, [pc, #168]	; (8015fa8 <dhcp_renew+0x12c>)
 8015efe:	5cd3      	ldrb	r3, [r2, r3]
 8015f00:	461a      	mov	r2, r3
 8015f02:	f000 fa91 	bl	8016428 <dhcp_option_byte>
 8015f06:	4603      	mov	r3, r0
 8015f08:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015f0a:	7fbb      	ldrb	r3, [r7, #30]
 8015f0c:	3301      	adds	r3, #1
 8015f0e:	77bb      	strb	r3, [r7, #30]
 8015f10:	7fbb      	ldrb	r3, [r7, #30]
 8015f12:	2b02      	cmp	r3, #2
 8015f14:	d9ed      	bls.n	8015ef2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015f16:	89b8      	ldrh	r0, [r7, #12]
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	33f0      	adds	r3, #240	; 0xf0
 8015f1c:	697a      	ldr	r2, [r7, #20]
 8015f1e:	4619      	mov	r1, r3
 8015f20:	f000 ff96 	bl	8016e50 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015f24:	4b21      	ldr	r3, [pc, #132]	; (8015fac <dhcp_renew+0x130>)
 8015f26:	6818      	ldr	r0, [r3, #0]
 8015f28:	69bb      	ldr	r3, [r7, #24]
 8015f2a:	f103 0218 	add.w	r2, r3, #24
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	9300      	str	r3, [sp, #0]
 8015f32:	2343      	movs	r3, #67	; 0x43
 8015f34:	6979      	ldr	r1, [r7, #20]
 8015f36:	f7fe fe1d 	bl	8014b74 <udp_sendto_if>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015f3e:	6978      	ldr	r0, [r7, #20]
 8015f40:	f7f7 ff6a 	bl	800de18 <pbuf_free>
 8015f44:	e001      	b.n	8015f4a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015f46:	23ff      	movs	r3, #255	; 0xff
 8015f48:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015f4a:	69bb      	ldr	r3, [r7, #24]
 8015f4c:	799b      	ldrb	r3, [r3, #6]
 8015f4e:	2bff      	cmp	r3, #255	; 0xff
 8015f50:	d005      	beq.n	8015f5e <dhcp_renew+0xe2>
    dhcp->tries++;
 8015f52:	69bb      	ldr	r3, [r7, #24]
 8015f54:	799b      	ldrb	r3, [r3, #6]
 8015f56:	3301      	adds	r3, #1
 8015f58:	b2da      	uxtb	r2, r3
 8015f5a:	69bb      	ldr	r3, [r7, #24]
 8015f5c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015f5e:	69bb      	ldr	r3, [r7, #24]
 8015f60:	799b      	ldrb	r3, [r3, #6]
 8015f62:	2b09      	cmp	r3, #9
 8015f64:	d80a      	bhi.n	8015f7c <dhcp_renew+0x100>
 8015f66:	69bb      	ldr	r3, [r7, #24]
 8015f68:	799b      	ldrb	r3, [r3, #6]
 8015f6a:	b29b      	uxth	r3, r3
 8015f6c:	461a      	mov	r2, r3
 8015f6e:	0152      	lsls	r2, r2, #5
 8015f70:	1ad2      	subs	r2, r2, r3
 8015f72:	0092      	lsls	r2, r2, #2
 8015f74:	4413      	add	r3, r2
 8015f76:	011b      	lsls	r3, r3, #4
 8015f78:	b29b      	uxth	r3, r3
 8015f7a:	e001      	b.n	8015f80 <dhcp_renew+0x104>
 8015f7c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015f80:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015f82:	89fb      	ldrh	r3, [r7, #14]
 8015f84:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015f88:	4a09      	ldr	r2, [pc, #36]	; (8015fb0 <dhcp_renew+0x134>)
 8015f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8015f8e:	1152      	asrs	r2, r2, #5
 8015f90:	17db      	asrs	r3, r3, #31
 8015f92:	1ad3      	subs	r3, r2, r3
 8015f94:	b29a      	uxth	r2, r3
 8015f96:	69bb      	ldr	r3, [r7, #24]
 8015f98:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015f9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3720      	adds	r7, #32
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}
 8015fa6:	bf00      	nop
 8015fa8:	2000001c 	.word	0x2000001c
 8015fac:	20008b24 	.word	0x20008b24
 8015fb0:	10624dd3 	.word	0x10624dd3

08015fb4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b08a      	sub	sp, #40	; 0x28
 8015fb8:	af02      	add	r7, sp, #8
 8015fba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fc0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015fc2:	2104      	movs	r1, #4
 8015fc4:	69b8      	ldr	r0, [r7, #24]
 8015fc6:	f000 f9e1 	bl	801638c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015fca:	f107 030c 	add.w	r3, r7, #12
 8015fce:	2203      	movs	r2, #3
 8015fd0:	69b9      	ldr	r1, [r7, #24]
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f000 fe66 	bl	8016ca4 <dhcp_create_msg>
 8015fd8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d04c      	beq.n	801607a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015fe0:	697b      	ldr	r3, [r7, #20]
 8015fe2:	685b      	ldr	r3, [r3, #4]
 8015fe4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015fe6:	89b8      	ldrh	r0, [r7, #12]
 8015fe8:	693b      	ldr	r3, [r7, #16]
 8015fea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015fee:	2302      	movs	r3, #2
 8015ff0:	2239      	movs	r2, #57	; 0x39
 8015ff2:	f000 f9e5 	bl	80163c0 <dhcp_option>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015ffa:	89b8      	ldrh	r0, [r7, #12]
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016006:	461a      	mov	r2, r3
 8016008:	f000 fa34 	bl	8016474 <dhcp_option_short>
 801600c:	4603      	mov	r3, r0
 801600e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016010:	89b8      	ldrh	r0, [r7, #12]
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016018:	2303      	movs	r3, #3
 801601a:	2237      	movs	r2, #55	; 0x37
 801601c:	f000 f9d0 	bl	80163c0 <dhcp_option>
 8016020:	4603      	mov	r3, r0
 8016022:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016024:	2300      	movs	r3, #0
 8016026:	77bb      	strb	r3, [r7, #30]
 8016028:	e00e      	b.n	8016048 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801602a:	89b8      	ldrh	r0, [r7, #12]
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016032:	7fbb      	ldrb	r3, [r7, #30]
 8016034:	4a29      	ldr	r2, [pc, #164]	; (80160dc <dhcp_rebind+0x128>)
 8016036:	5cd3      	ldrb	r3, [r2, r3]
 8016038:	461a      	mov	r2, r3
 801603a:	f000 f9f5 	bl	8016428 <dhcp_option_byte>
 801603e:	4603      	mov	r3, r0
 8016040:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016042:	7fbb      	ldrb	r3, [r7, #30]
 8016044:	3301      	adds	r3, #1
 8016046:	77bb      	strb	r3, [r7, #30]
 8016048:	7fbb      	ldrb	r3, [r7, #30]
 801604a:	2b02      	cmp	r3, #2
 801604c:	d9ed      	bls.n	801602a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801604e:	89b8      	ldrh	r0, [r7, #12]
 8016050:	693b      	ldr	r3, [r7, #16]
 8016052:	33f0      	adds	r3, #240	; 0xf0
 8016054:	697a      	ldr	r2, [r7, #20]
 8016056:	4619      	mov	r1, r3
 8016058:	f000 fefa 	bl	8016e50 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801605c:	4b20      	ldr	r3, [pc, #128]	; (80160e0 <dhcp_rebind+0x12c>)
 801605e:	6818      	ldr	r0, [r3, #0]
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	9300      	str	r3, [sp, #0]
 8016064:	2343      	movs	r3, #67	; 0x43
 8016066:	4a1f      	ldr	r2, [pc, #124]	; (80160e4 <dhcp_rebind+0x130>)
 8016068:	6979      	ldr	r1, [r7, #20]
 801606a:	f7fe fd83 	bl	8014b74 <udp_sendto_if>
 801606e:	4603      	mov	r3, r0
 8016070:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016072:	6978      	ldr	r0, [r7, #20]
 8016074:	f7f7 fed0 	bl	800de18 <pbuf_free>
 8016078:	e001      	b.n	801607e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801607a:	23ff      	movs	r3, #255	; 0xff
 801607c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801607e:	69bb      	ldr	r3, [r7, #24]
 8016080:	799b      	ldrb	r3, [r3, #6]
 8016082:	2bff      	cmp	r3, #255	; 0xff
 8016084:	d005      	beq.n	8016092 <dhcp_rebind+0xde>
    dhcp->tries++;
 8016086:	69bb      	ldr	r3, [r7, #24]
 8016088:	799b      	ldrb	r3, [r3, #6]
 801608a:	3301      	adds	r3, #1
 801608c:	b2da      	uxtb	r2, r3
 801608e:	69bb      	ldr	r3, [r7, #24]
 8016090:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	799b      	ldrb	r3, [r3, #6]
 8016096:	2b09      	cmp	r3, #9
 8016098:	d80a      	bhi.n	80160b0 <dhcp_rebind+0xfc>
 801609a:	69bb      	ldr	r3, [r7, #24]
 801609c:	799b      	ldrb	r3, [r3, #6]
 801609e:	b29b      	uxth	r3, r3
 80160a0:	461a      	mov	r2, r3
 80160a2:	0152      	lsls	r2, r2, #5
 80160a4:	1ad2      	subs	r2, r2, r3
 80160a6:	0092      	lsls	r2, r2, #2
 80160a8:	4413      	add	r3, r2
 80160aa:	00db      	lsls	r3, r3, #3
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	e001      	b.n	80160b4 <dhcp_rebind+0x100>
 80160b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80160b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80160b6:	89fb      	ldrh	r3, [r7, #14]
 80160b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80160bc:	4a0a      	ldr	r2, [pc, #40]	; (80160e8 <dhcp_rebind+0x134>)
 80160be:	fb82 1203 	smull	r1, r2, r2, r3
 80160c2:	1152      	asrs	r2, r2, #5
 80160c4:	17db      	asrs	r3, r3, #31
 80160c6:	1ad3      	subs	r3, r2, r3
 80160c8:	b29a      	uxth	r2, r3
 80160ca:	69bb      	ldr	r3, [r7, #24]
 80160cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80160ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80160d2:	4618      	mov	r0, r3
 80160d4:	3720      	adds	r7, #32
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bd80      	pop	{r7, pc}
 80160da:	bf00      	nop
 80160dc:	2000001c 	.word	0x2000001c
 80160e0:	20008b24 	.word	0x20008b24
 80160e4:	08020b3c 	.word	0x08020b3c
 80160e8:	10624dd3 	.word	0x10624dd3

080160ec <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80160ec:	b5b0      	push	{r4, r5, r7, lr}
 80160ee:	b08a      	sub	sp, #40	; 0x28
 80160f0:	af02      	add	r7, sp, #8
 80160f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160f8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80160fa:	2103      	movs	r1, #3
 80160fc:	69b8      	ldr	r0, [r7, #24]
 80160fe:	f000 f945 	bl	801638c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016102:	f107 030c 	add.w	r3, r7, #12
 8016106:	2203      	movs	r2, #3
 8016108:	69b9      	ldr	r1, [r7, #24]
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f000 fdca 	bl	8016ca4 <dhcp_create_msg>
 8016110:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016112:	697b      	ldr	r3, [r7, #20]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d066      	beq.n	80161e6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016118:	697b      	ldr	r3, [r7, #20]
 801611a:	685b      	ldr	r3, [r3, #4]
 801611c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801611e:	89b8      	ldrh	r0, [r7, #12]
 8016120:	693b      	ldr	r3, [r7, #16]
 8016122:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016126:	2302      	movs	r3, #2
 8016128:	2239      	movs	r2, #57	; 0x39
 801612a:	f000 f949 	bl	80163c0 <dhcp_option>
 801612e:	4603      	mov	r3, r0
 8016130:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016132:	89b8      	ldrh	r0, [r7, #12]
 8016134:	693b      	ldr	r3, [r7, #16]
 8016136:	33f0      	adds	r3, #240	; 0xf0
 8016138:	f44f 7210 	mov.w	r2, #576	; 0x240
 801613c:	4619      	mov	r1, r3
 801613e:	f000 f999 	bl	8016474 <dhcp_option_short>
 8016142:	4603      	mov	r3, r0
 8016144:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016146:	89b8      	ldrh	r0, [r7, #12]
 8016148:	693b      	ldr	r3, [r7, #16]
 801614a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801614e:	2304      	movs	r3, #4
 8016150:	2232      	movs	r2, #50	; 0x32
 8016152:	f000 f935 	bl	80163c0 <dhcp_option>
 8016156:	4603      	mov	r3, r0
 8016158:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801615a:	89bc      	ldrh	r4, [r7, #12]
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016162:	69bb      	ldr	r3, [r7, #24]
 8016164:	69db      	ldr	r3, [r3, #28]
 8016166:	4618      	mov	r0, r3
 8016168:	f7f6 fa81 	bl	800c66e <lwip_htonl>
 801616c:	4603      	mov	r3, r0
 801616e:	461a      	mov	r2, r3
 8016170:	4629      	mov	r1, r5
 8016172:	4620      	mov	r0, r4
 8016174:	f000 f9b0 	bl	80164d8 <dhcp_option_long>
 8016178:	4603      	mov	r3, r0
 801617a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801617c:	89b8      	ldrh	r0, [r7, #12]
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016184:	2303      	movs	r3, #3
 8016186:	2237      	movs	r2, #55	; 0x37
 8016188:	f000 f91a 	bl	80163c0 <dhcp_option>
 801618c:	4603      	mov	r3, r0
 801618e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016190:	2300      	movs	r3, #0
 8016192:	77bb      	strb	r3, [r7, #30]
 8016194:	e00e      	b.n	80161b4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016196:	89b8      	ldrh	r0, [r7, #12]
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801619e:	7fbb      	ldrb	r3, [r7, #30]
 80161a0:	4a29      	ldr	r2, [pc, #164]	; (8016248 <dhcp_reboot+0x15c>)
 80161a2:	5cd3      	ldrb	r3, [r2, r3]
 80161a4:	461a      	mov	r2, r3
 80161a6:	f000 f93f 	bl	8016428 <dhcp_option_byte>
 80161aa:	4603      	mov	r3, r0
 80161ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80161ae:	7fbb      	ldrb	r3, [r7, #30]
 80161b0:	3301      	adds	r3, #1
 80161b2:	77bb      	strb	r3, [r7, #30]
 80161b4:	7fbb      	ldrb	r3, [r7, #30]
 80161b6:	2b02      	cmp	r3, #2
 80161b8:	d9ed      	bls.n	8016196 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80161ba:	89b8      	ldrh	r0, [r7, #12]
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	33f0      	adds	r3, #240	; 0xf0
 80161c0:	697a      	ldr	r2, [r7, #20]
 80161c2:	4619      	mov	r1, r3
 80161c4:	f000 fe44 	bl	8016e50 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80161c8:	4b20      	ldr	r3, [pc, #128]	; (801624c <dhcp_reboot+0x160>)
 80161ca:	6818      	ldr	r0, [r3, #0]
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	9300      	str	r3, [sp, #0]
 80161d0:	2343      	movs	r3, #67	; 0x43
 80161d2:	4a1f      	ldr	r2, [pc, #124]	; (8016250 <dhcp_reboot+0x164>)
 80161d4:	6979      	ldr	r1, [r7, #20]
 80161d6:	f7fe fccd 	bl	8014b74 <udp_sendto_if>
 80161da:	4603      	mov	r3, r0
 80161dc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80161de:	6978      	ldr	r0, [r7, #20]
 80161e0:	f7f7 fe1a 	bl	800de18 <pbuf_free>
 80161e4:	e001      	b.n	80161ea <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80161e6:	23ff      	movs	r3, #255	; 0xff
 80161e8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80161ea:	69bb      	ldr	r3, [r7, #24]
 80161ec:	799b      	ldrb	r3, [r3, #6]
 80161ee:	2bff      	cmp	r3, #255	; 0xff
 80161f0:	d005      	beq.n	80161fe <dhcp_reboot+0x112>
    dhcp->tries++;
 80161f2:	69bb      	ldr	r3, [r7, #24]
 80161f4:	799b      	ldrb	r3, [r3, #6]
 80161f6:	3301      	adds	r3, #1
 80161f8:	b2da      	uxtb	r2, r3
 80161fa:	69bb      	ldr	r3, [r7, #24]
 80161fc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80161fe:	69bb      	ldr	r3, [r7, #24]
 8016200:	799b      	ldrb	r3, [r3, #6]
 8016202:	2b09      	cmp	r3, #9
 8016204:	d80a      	bhi.n	801621c <dhcp_reboot+0x130>
 8016206:	69bb      	ldr	r3, [r7, #24]
 8016208:	799b      	ldrb	r3, [r3, #6]
 801620a:	b29b      	uxth	r3, r3
 801620c:	461a      	mov	r2, r3
 801620e:	0152      	lsls	r2, r2, #5
 8016210:	1ad2      	subs	r2, r2, r3
 8016212:	0092      	lsls	r2, r2, #2
 8016214:	4413      	add	r3, r2
 8016216:	00db      	lsls	r3, r3, #3
 8016218:	b29b      	uxth	r3, r3
 801621a:	e001      	b.n	8016220 <dhcp_reboot+0x134>
 801621c:	f242 7310 	movw	r3, #10000	; 0x2710
 8016220:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016222:	89fb      	ldrh	r3, [r7, #14]
 8016224:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016228:	4a0a      	ldr	r2, [pc, #40]	; (8016254 <dhcp_reboot+0x168>)
 801622a:	fb82 1203 	smull	r1, r2, r2, r3
 801622e:	1152      	asrs	r2, r2, #5
 8016230:	17db      	asrs	r3, r3, #31
 8016232:	1ad3      	subs	r3, r2, r3
 8016234:	b29a      	uxth	r2, r3
 8016236:	69bb      	ldr	r3, [r7, #24]
 8016238:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801623a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801623e:	4618      	mov	r0, r3
 8016240:	3720      	adds	r7, #32
 8016242:	46bd      	mov	sp, r7
 8016244:	bdb0      	pop	{r4, r5, r7, pc}
 8016246:	bf00      	nop
 8016248:	2000001c 	.word	0x2000001c
 801624c:	20008b24 	.word	0x20008b24
 8016250:	08020b3c 	.word	0x08020b3c
 8016254:	10624dd3 	.word	0x10624dd3

08016258 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016258:	b5b0      	push	{r4, r5, r7, lr}
 801625a:	b08a      	sub	sp, #40	; 0x28
 801625c:	af02      	add	r7, sp, #8
 801625e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016264:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016266:	69fb      	ldr	r3, [r7, #28]
 8016268:	2b00      	cmp	r3, #0
 801626a:	f000 8084 	beq.w	8016376 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801626e:	69fb      	ldr	r3, [r7, #28]
 8016270:	795b      	ldrb	r3, [r3, #5]
 8016272:	2b00      	cmp	r3, #0
 8016274:	f000 8081 	beq.w	801637a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016278:	69fb      	ldr	r3, [r7, #28]
 801627a:	699b      	ldr	r3, [r3, #24]
 801627c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801627e:	69fb      	ldr	r3, [r7, #28]
 8016280:	2200      	movs	r2, #0
 8016282:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	2200      	movs	r2, #0
 8016288:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801628a:	69fb      	ldr	r3, [r7, #28]
 801628c:	2200      	movs	r2, #0
 801628e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016290:	69fb      	ldr	r3, [r7, #28]
 8016292:	2200      	movs	r2, #0
 8016294:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016296:	69fb      	ldr	r3, [r7, #28]
 8016298:	2200      	movs	r2, #0
 801629a:	631a      	str	r2, [r3, #48]	; 0x30
 801629c:	69fb      	ldr	r3, [r7, #28]
 801629e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80162a0:	69fb      	ldr	r3, [r7, #28]
 80162a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80162a4:	69fb      	ldr	r3, [r7, #28]
 80162a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162a8:	69fb      	ldr	r3, [r7, #28]
 80162aa:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80162ac:	69fb      	ldr	r3, [r7, #28]
 80162ae:	2200      	movs	r2, #0
 80162b0:	829a      	strh	r2, [r3, #20]
 80162b2:	69fb      	ldr	r3, [r7, #28]
 80162b4:	8a9a      	ldrh	r2, [r3, #20]
 80162b6:	69fb      	ldr	r3, [r7, #28]
 80162b8:	825a      	strh	r2, [r3, #18]
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	8a5a      	ldrh	r2, [r3, #18]
 80162be:	69fb      	ldr	r3, [r7, #28]
 80162c0:	821a      	strh	r2, [r3, #16]
 80162c2:	69fb      	ldr	r3, [r7, #28]
 80162c4:	8a1a      	ldrh	r2, [r3, #16]
 80162c6:	69fb      	ldr	r3, [r7, #28]
 80162c8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80162ca:	6878      	ldr	r0, [r7, #4]
 80162cc:	f000 fdee 	bl	8016eac <dhcp_supplied_address>
 80162d0:	4603      	mov	r3, r0
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d03b      	beq.n	801634e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80162d6:	f107 030e 	add.w	r3, r7, #14
 80162da:	2207      	movs	r2, #7
 80162dc:	69f9      	ldr	r1, [r7, #28]
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	f000 fce0 	bl	8016ca4 <dhcp_create_msg>
 80162e4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80162e6:	69bb      	ldr	r3, [r7, #24]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d030      	beq.n	801634e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80162ec:	69bb      	ldr	r3, [r7, #24]
 80162ee:	685b      	ldr	r3, [r3, #4]
 80162f0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80162f2:	89f8      	ldrh	r0, [r7, #14]
 80162f4:	697b      	ldr	r3, [r7, #20]
 80162f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80162fa:	2304      	movs	r3, #4
 80162fc:	2236      	movs	r2, #54	; 0x36
 80162fe:	f000 f85f 	bl	80163c0 <dhcp_option>
 8016302:	4603      	mov	r3, r0
 8016304:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016306:	89fc      	ldrh	r4, [r7, #14]
 8016308:	697b      	ldr	r3, [r7, #20]
 801630a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	4618      	mov	r0, r3
 8016312:	f7f6 f9ac 	bl	800c66e <lwip_htonl>
 8016316:	4603      	mov	r3, r0
 8016318:	461a      	mov	r2, r3
 801631a:	4629      	mov	r1, r5
 801631c:	4620      	mov	r0, r4
 801631e:	f000 f8db 	bl	80164d8 <dhcp_option_long>
 8016322:	4603      	mov	r3, r0
 8016324:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016326:	89f8      	ldrh	r0, [r7, #14]
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	33f0      	adds	r3, #240	; 0xf0
 801632c:	69ba      	ldr	r2, [r7, #24]
 801632e:	4619      	mov	r1, r3
 8016330:	f000 fd8e 	bl	8016e50 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016334:	4b13      	ldr	r3, [pc, #76]	; (8016384 <dhcp_release_and_stop+0x12c>)
 8016336:	6818      	ldr	r0, [r3, #0]
 8016338:	f107 0210 	add.w	r2, r7, #16
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	9300      	str	r3, [sp, #0]
 8016340:	2343      	movs	r3, #67	; 0x43
 8016342:	69b9      	ldr	r1, [r7, #24]
 8016344:	f7fe fc16 	bl	8014b74 <udp_sendto_if>
      pbuf_free(p_out);
 8016348:	69b8      	ldr	r0, [r7, #24]
 801634a:	f7f7 fd65 	bl	800de18 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801634e:	4b0e      	ldr	r3, [pc, #56]	; (8016388 <dhcp_release_and_stop+0x130>)
 8016350:	4a0d      	ldr	r2, [pc, #52]	; (8016388 <dhcp_release_and_stop+0x130>)
 8016352:	490d      	ldr	r1, [pc, #52]	; (8016388 <dhcp_release_and_stop+0x130>)
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	f7f7 f81f 	bl	800d398 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801635a:	2100      	movs	r1, #0
 801635c:	69f8      	ldr	r0, [r7, #28]
 801635e:	f000 f815 	bl	801638c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8016362:	69fb      	ldr	r3, [r7, #28]
 8016364:	791b      	ldrb	r3, [r3, #4]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d008      	beq.n	801637c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801636a:	f7fe ff83 	bl	8015274 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801636e:	69fb      	ldr	r3, [r7, #28]
 8016370:	2200      	movs	r2, #0
 8016372:	711a      	strb	r2, [r3, #4]
 8016374:	e002      	b.n	801637c <dhcp_release_and_stop+0x124>
    return;
 8016376:	bf00      	nop
 8016378:	e000      	b.n	801637c <dhcp_release_and_stop+0x124>
    return;
 801637a:	bf00      	nop
  }
}
 801637c:	3720      	adds	r7, #32
 801637e:	46bd      	mov	sp, r7
 8016380:	bdb0      	pop	{r4, r5, r7, pc}
 8016382:	bf00      	nop
 8016384:	20008b24 	.word	0x20008b24
 8016388:	08020b38 	.word	0x08020b38

0801638c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801638c:	b480      	push	{r7}
 801638e:	b083      	sub	sp, #12
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
 8016394:	460b      	mov	r3, r1
 8016396:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	795b      	ldrb	r3, [r3, #5]
 801639c:	78fa      	ldrb	r2, [r7, #3]
 801639e:	429a      	cmp	r2, r3
 80163a0:	d008      	beq.n	80163b4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	78fa      	ldrb	r2, [r7, #3]
 80163a6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2200      	movs	r2, #0
 80163ac:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2200      	movs	r2, #0
 80163b2:	811a      	strh	r2, [r3, #8]
  }
}
 80163b4:	bf00      	nop
 80163b6:	370c      	adds	r7, #12
 80163b8:	46bd      	mov	sp, r7
 80163ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163be:	4770      	bx	lr

080163c0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b082      	sub	sp, #8
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6039      	str	r1, [r7, #0]
 80163c8:	4611      	mov	r1, r2
 80163ca:	461a      	mov	r2, r3
 80163cc:	4603      	mov	r3, r0
 80163ce:	80fb      	strh	r3, [r7, #6]
 80163d0:	460b      	mov	r3, r1
 80163d2:	717b      	strb	r3, [r7, #5]
 80163d4:	4613      	mov	r3, r2
 80163d6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80163d8:	88fa      	ldrh	r2, [r7, #6]
 80163da:	793b      	ldrb	r3, [r7, #4]
 80163dc:	4413      	add	r3, r2
 80163de:	3302      	adds	r3, #2
 80163e0:	2b44      	cmp	r3, #68	; 0x44
 80163e2:	d906      	bls.n	80163f2 <dhcp_option+0x32>
 80163e4:	4b0d      	ldr	r3, [pc, #52]	; (801641c <dhcp_option+0x5c>)
 80163e6:	f240 529a 	movw	r2, #1434	; 0x59a
 80163ea:	490d      	ldr	r1, [pc, #52]	; (8016420 <dhcp_option+0x60>)
 80163ec:	480d      	ldr	r0, [pc, #52]	; (8016424 <dhcp_option+0x64>)
 80163ee:	f005 fa67 	bl	801b8c0 <iprintf>
  options[options_out_len++] = option_type;
 80163f2:	88fb      	ldrh	r3, [r7, #6]
 80163f4:	1c5a      	adds	r2, r3, #1
 80163f6:	80fa      	strh	r2, [r7, #6]
 80163f8:	461a      	mov	r2, r3
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	4413      	add	r3, r2
 80163fe:	797a      	ldrb	r2, [r7, #5]
 8016400:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016402:	88fb      	ldrh	r3, [r7, #6]
 8016404:	1c5a      	adds	r2, r3, #1
 8016406:	80fa      	strh	r2, [r7, #6]
 8016408:	461a      	mov	r2, r3
 801640a:	683b      	ldr	r3, [r7, #0]
 801640c:	4413      	add	r3, r2
 801640e:	793a      	ldrb	r2, [r7, #4]
 8016410:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016412:	88fb      	ldrh	r3, [r7, #6]
}
 8016414:	4618      	mov	r0, r3
 8016416:	3708      	adds	r7, #8
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}
 801641c:	0801fe7c 	.word	0x0801fe7c
 8016420:	08020010 	.word	0x08020010
 8016424:	0801fedc 	.word	0x0801fedc

08016428 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016428:	b580      	push	{r7, lr}
 801642a:	b082      	sub	sp, #8
 801642c:	af00      	add	r7, sp, #0
 801642e:	4603      	mov	r3, r0
 8016430:	6039      	str	r1, [r7, #0]
 8016432:	80fb      	strh	r3, [r7, #6]
 8016434:	4613      	mov	r3, r2
 8016436:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016438:	88fb      	ldrh	r3, [r7, #6]
 801643a:	2b43      	cmp	r3, #67	; 0x43
 801643c:	d906      	bls.n	801644c <dhcp_option_byte+0x24>
 801643e:	4b0a      	ldr	r3, [pc, #40]	; (8016468 <dhcp_option_byte+0x40>)
 8016440:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016444:	4909      	ldr	r1, [pc, #36]	; (801646c <dhcp_option_byte+0x44>)
 8016446:	480a      	ldr	r0, [pc, #40]	; (8016470 <dhcp_option_byte+0x48>)
 8016448:	f005 fa3a 	bl	801b8c0 <iprintf>
  options[options_out_len++] = value;
 801644c:	88fb      	ldrh	r3, [r7, #6]
 801644e:	1c5a      	adds	r2, r3, #1
 8016450:	80fa      	strh	r2, [r7, #6]
 8016452:	461a      	mov	r2, r3
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	4413      	add	r3, r2
 8016458:	797a      	ldrb	r2, [r7, #5]
 801645a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801645c:	88fb      	ldrh	r3, [r7, #6]
}
 801645e:	4618      	mov	r0, r3
 8016460:	3708      	adds	r7, #8
 8016462:	46bd      	mov	sp, r7
 8016464:	bd80      	pop	{r7, pc}
 8016466:	bf00      	nop
 8016468:	0801fe7c 	.word	0x0801fe7c
 801646c:	08020054 	.word	0x08020054
 8016470:	0801fedc 	.word	0x0801fedc

08016474 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b082      	sub	sp, #8
 8016478:	af00      	add	r7, sp, #0
 801647a:	4603      	mov	r3, r0
 801647c:	6039      	str	r1, [r7, #0]
 801647e:	80fb      	strh	r3, [r7, #6]
 8016480:	4613      	mov	r3, r2
 8016482:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016484:	88fb      	ldrh	r3, [r7, #6]
 8016486:	3302      	adds	r3, #2
 8016488:	2b44      	cmp	r3, #68	; 0x44
 801648a:	d906      	bls.n	801649a <dhcp_option_short+0x26>
 801648c:	4b0f      	ldr	r3, [pc, #60]	; (80164cc <dhcp_option_short+0x58>)
 801648e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8016492:	490f      	ldr	r1, [pc, #60]	; (80164d0 <dhcp_option_short+0x5c>)
 8016494:	480f      	ldr	r0, [pc, #60]	; (80164d4 <dhcp_option_short+0x60>)
 8016496:	f005 fa13 	bl	801b8c0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801649a:	88bb      	ldrh	r3, [r7, #4]
 801649c:	0a1b      	lsrs	r3, r3, #8
 801649e:	b29a      	uxth	r2, r3
 80164a0:	88fb      	ldrh	r3, [r7, #6]
 80164a2:	1c59      	adds	r1, r3, #1
 80164a4:	80f9      	strh	r1, [r7, #6]
 80164a6:	4619      	mov	r1, r3
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	440b      	add	r3, r1
 80164ac:	b2d2      	uxtb	r2, r2
 80164ae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80164b0:	88fb      	ldrh	r3, [r7, #6]
 80164b2:	1c5a      	adds	r2, r3, #1
 80164b4:	80fa      	strh	r2, [r7, #6]
 80164b6:	461a      	mov	r2, r3
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	4413      	add	r3, r2
 80164bc:	88ba      	ldrh	r2, [r7, #4]
 80164be:	b2d2      	uxtb	r2, r2
 80164c0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80164c2:	88fb      	ldrh	r3, [r7, #6]
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	3708      	adds	r7, #8
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}
 80164cc:	0801fe7c 	.word	0x0801fe7c
 80164d0:	0802008c 	.word	0x0802008c
 80164d4:	0801fedc 	.word	0x0801fedc

080164d8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b084      	sub	sp, #16
 80164dc:	af00      	add	r7, sp, #0
 80164de:	4603      	mov	r3, r0
 80164e0:	60b9      	str	r1, [r7, #8]
 80164e2:	607a      	str	r2, [r7, #4]
 80164e4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80164e6:	89fb      	ldrh	r3, [r7, #14]
 80164e8:	3304      	adds	r3, #4
 80164ea:	2b44      	cmp	r3, #68	; 0x44
 80164ec:	d906      	bls.n	80164fc <dhcp_option_long+0x24>
 80164ee:	4b19      	ldr	r3, [pc, #100]	; (8016554 <dhcp_option_long+0x7c>)
 80164f0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80164f4:	4918      	ldr	r1, [pc, #96]	; (8016558 <dhcp_option_long+0x80>)
 80164f6:	4819      	ldr	r0, [pc, #100]	; (801655c <dhcp_option_long+0x84>)
 80164f8:	f005 f9e2 	bl	801b8c0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	0e1a      	lsrs	r2, r3, #24
 8016500:	89fb      	ldrh	r3, [r7, #14]
 8016502:	1c59      	adds	r1, r3, #1
 8016504:	81f9      	strh	r1, [r7, #14]
 8016506:	4619      	mov	r1, r3
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	440b      	add	r3, r1
 801650c:	b2d2      	uxtb	r2, r2
 801650e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	0c1a      	lsrs	r2, r3, #16
 8016514:	89fb      	ldrh	r3, [r7, #14]
 8016516:	1c59      	adds	r1, r3, #1
 8016518:	81f9      	strh	r1, [r7, #14]
 801651a:	4619      	mov	r1, r3
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	440b      	add	r3, r1
 8016520:	b2d2      	uxtb	r2, r2
 8016522:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	0a1a      	lsrs	r2, r3, #8
 8016528:	89fb      	ldrh	r3, [r7, #14]
 801652a:	1c59      	adds	r1, r3, #1
 801652c:	81f9      	strh	r1, [r7, #14]
 801652e:	4619      	mov	r1, r3
 8016530:	68bb      	ldr	r3, [r7, #8]
 8016532:	440b      	add	r3, r1
 8016534:	b2d2      	uxtb	r2, r2
 8016536:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016538:	89fb      	ldrh	r3, [r7, #14]
 801653a:	1c5a      	adds	r2, r3, #1
 801653c:	81fa      	strh	r2, [r7, #14]
 801653e:	461a      	mov	r2, r3
 8016540:	68bb      	ldr	r3, [r7, #8]
 8016542:	4413      	add	r3, r2
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	b2d2      	uxtb	r2, r2
 8016548:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801654a:	89fb      	ldrh	r3, [r7, #14]
}
 801654c:	4618      	mov	r0, r3
 801654e:	3710      	adds	r7, #16
 8016550:	46bd      	mov	sp, r7
 8016552:	bd80      	pop	{r7, pc}
 8016554:	0801fe7c 	.word	0x0801fe7c
 8016558:	080200c8 	.word	0x080200c8
 801655c:	0801fedc 	.word	0x0801fedc

08016560 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b090      	sub	sp, #64	; 0x40
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
 8016568:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801656a:	2300      	movs	r3, #0
 801656c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801656e:	2300      	movs	r3, #0
 8016570:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016572:	2208      	movs	r2, #8
 8016574:	2100      	movs	r1, #0
 8016576:	48be      	ldr	r0, [pc, #760]	; (8016870 <dhcp_parse_reply+0x310>)
 8016578:	f005 f99a 	bl	801b8b0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	895b      	ldrh	r3, [r3, #10]
 8016580:	2b2b      	cmp	r3, #43	; 0x2b
 8016582:	d802      	bhi.n	801658a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016584:	f06f 0301 	mvn.w	r3, #1
 8016588:	e2a8      	b.n	8016adc <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016590:	23f0      	movs	r3, #240	; 0xf0
 8016592:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	891b      	ldrh	r3, [r3, #8]
 8016598:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801659e:	e00c      	b.n	80165ba <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80165a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a2:	895b      	ldrh	r3, [r3, #10]
 80165a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80165a6:	1ad3      	subs	r3, r2, r3
 80165a8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80165aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ac:	895b      	ldrh	r3, [r3, #10]
 80165ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80165b0:	1ad3      	subs	r3, r2, r3
 80165b2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80165b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80165ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d004      	beq.n	80165ca <dhcp_parse_reply+0x6a>
 80165c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c2:	895b      	ldrh	r3, [r3, #10]
 80165c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d2ea      	bcs.n	80165a0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80165ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d102      	bne.n	80165d6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80165d0:	f06f 0301 	mvn.w	r3, #1
 80165d4:	e282      	b.n	8016adc <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80165d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80165d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80165da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80165dc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80165de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80165e4:	e23a      	b.n	8016a5c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 80165e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80165e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80165ea:	4413      	add	r3, r2
 80165ec:	781b      	ldrb	r3, [r3, #0]
 80165ee:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80165f0:	2300      	movs	r3, #0
 80165f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80165f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165fa:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80165fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80165fe:	3302      	adds	r3, #2
 8016600:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8016602:	8bfa      	ldrh	r2, [r7, #30]
 8016604:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016606:	429a      	cmp	r2, r3
 8016608:	d202      	bcs.n	8016610 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801660a:	f06f 0301 	mvn.w	r3, #1
 801660e:	e265      	b.n	8016adc <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016610:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016612:	3301      	adds	r3, #1
 8016614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016616:	8952      	ldrh	r2, [r2, #10]
 8016618:	4293      	cmp	r3, r2
 801661a:	da07      	bge.n	801662c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801661c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801661e:	3301      	adds	r3, #1
 8016620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016622:	4413      	add	r3, r2
 8016624:	781b      	ldrb	r3, [r3, #0]
 8016626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801662a:	e00b      	b.n	8016644 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d004      	beq.n	801663e <dhcp_parse_reply+0xde>
 8016634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	685b      	ldr	r3, [r3, #4]
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	e000      	b.n	8016640 <dhcp_parse_reply+0xe0>
 801663e:	2300      	movs	r3, #0
 8016640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016648:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801664c:	7dfb      	ldrb	r3, [r7, #23]
 801664e:	2b3b      	cmp	r3, #59	; 0x3b
 8016650:	f200 812d 	bhi.w	80168ae <dhcp_parse_reply+0x34e>
 8016654:	a201      	add	r2, pc, #4	; (adr r2, 801665c <dhcp_parse_reply+0xfc>)
 8016656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801665a:	bf00      	nop
 801665c:	0801674d 	.word	0x0801674d
 8016660:	0801675d 	.word	0x0801675d
 8016664:	080168af 	.word	0x080168af
 8016668:	0801677f 	.word	0x0801677f
 801666c:	080168af 	.word	0x080168af
 8016670:	080168af 	.word	0x080168af
 8016674:	080168af 	.word	0x080168af
 8016678:	080168af 	.word	0x080168af
 801667c:	080168af 	.word	0x080168af
 8016680:	080168af 	.word	0x080168af
 8016684:	080168af 	.word	0x080168af
 8016688:	080168af 	.word	0x080168af
 801668c:	080168af 	.word	0x080168af
 8016690:	080168af 	.word	0x080168af
 8016694:	080168af 	.word	0x080168af
 8016698:	080168af 	.word	0x080168af
 801669c:	080168af 	.word	0x080168af
 80166a0:	080168af 	.word	0x080168af
 80166a4:	080168af 	.word	0x080168af
 80166a8:	080168af 	.word	0x080168af
 80166ac:	080168af 	.word	0x080168af
 80166b0:	080168af 	.word	0x080168af
 80166b4:	080168af 	.word	0x080168af
 80166b8:	080168af 	.word	0x080168af
 80166bc:	080168af 	.word	0x080168af
 80166c0:	080168af 	.word	0x080168af
 80166c4:	080168af 	.word	0x080168af
 80166c8:	080168af 	.word	0x080168af
 80166cc:	080168af 	.word	0x080168af
 80166d0:	080168af 	.word	0x080168af
 80166d4:	080168af 	.word	0x080168af
 80166d8:	080168af 	.word	0x080168af
 80166dc:	080168af 	.word	0x080168af
 80166e0:	080168af 	.word	0x080168af
 80166e4:	080168af 	.word	0x080168af
 80166e8:	080168af 	.word	0x080168af
 80166ec:	080168af 	.word	0x080168af
 80166f0:	080168af 	.word	0x080168af
 80166f4:	080168af 	.word	0x080168af
 80166f8:	080168af 	.word	0x080168af
 80166fc:	080168af 	.word	0x080168af
 8016700:	080168af 	.word	0x080168af
 8016704:	080168af 	.word	0x080168af
 8016708:	080168af 	.word	0x080168af
 801670c:	080168af 	.word	0x080168af
 8016710:	080168af 	.word	0x080168af
 8016714:	080168af 	.word	0x080168af
 8016718:	080168af 	.word	0x080168af
 801671c:	080168af 	.word	0x080168af
 8016720:	080168af 	.word	0x080168af
 8016724:	080168af 	.word	0x080168af
 8016728:	080167ab 	.word	0x080167ab
 801672c:	080167cd 	.word	0x080167cd
 8016730:	08016809 	.word	0x08016809
 8016734:	0801682b 	.word	0x0801682b
 8016738:	080168af 	.word	0x080168af
 801673c:	080168af 	.word	0x080168af
 8016740:	080168af 	.word	0x080168af
 8016744:	0801684d 	.word	0x0801684d
 8016748:	0801688d 	.word	0x0801688d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801674c:	2300      	movs	r3, #0
 801674e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016756:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801675a:	e0ac      	b.n	80168b6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801675c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016760:	2b04      	cmp	r3, #4
 8016762:	d009      	beq.n	8016778 <dhcp_parse_reply+0x218>
 8016764:	4b43      	ldr	r3, [pc, #268]	; (8016874 <dhcp_parse_reply+0x314>)
 8016766:	f240 622e 	movw	r2, #1582	; 0x62e
 801676a:	4943      	ldr	r1, [pc, #268]	; (8016878 <dhcp_parse_reply+0x318>)
 801676c:	4843      	ldr	r0, [pc, #268]	; (801687c <dhcp_parse_reply+0x31c>)
 801676e:	f005 f8a7 	bl	801b8c0 <iprintf>
 8016772:	f06f 0305 	mvn.w	r3, #5
 8016776:	e1b1      	b.n	8016adc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016778:	2306      	movs	r3, #6
 801677a:	623b      	str	r3, [r7, #32]
        break;
 801677c:	e09b      	b.n	80168b6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801677e:	2304      	movs	r3, #4
 8016780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016784:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016788:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801678c:	429a      	cmp	r2, r3
 801678e:	d209      	bcs.n	80167a4 <dhcp_parse_reply+0x244>
 8016790:	4b38      	ldr	r3, [pc, #224]	; (8016874 <dhcp_parse_reply+0x314>)
 8016792:	f240 6233 	movw	r2, #1587	; 0x633
 8016796:	493a      	ldr	r1, [pc, #232]	; (8016880 <dhcp_parse_reply+0x320>)
 8016798:	4838      	ldr	r0, [pc, #224]	; (801687c <dhcp_parse_reply+0x31c>)
 801679a:	f005 f891 	bl	801b8c0 <iprintf>
 801679e:	f06f 0305 	mvn.w	r3, #5
 80167a2:	e19b      	b.n	8016adc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80167a4:	2307      	movs	r3, #7
 80167a6:	623b      	str	r3, [r7, #32]
        break;
 80167a8:	e085      	b.n	80168b6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80167aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167ae:	2b04      	cmp	r3, #4
 80167b0:	d009      	beq.n	80167c6 <dhcp_parse_reply+0x266>
 80167b2:	4b30      	ldr	r3, [pc, #192]	; (8016874 <dhcp_parse_reply+0x314>)
 80167b4:	f240 6241 	movw	r2, #1601	; 0x641
 80167b8:	492f      	ldr	r1, [pc, #188]	; (8016878 <dhcp_parse_reply+0x318>)
 80167ba:	4830      	ldr	r0, [pc, #192]	; (801687c <dhcp_parse_reply+0x31c>)
 80167bc:	f005 f880 	bl	801b8c0 <iprintf>
 80167c0:	f06f 0305 	mvn.w	r3, #5
 80167c4:	e18a      	b.n	8016adc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80167c6:	2303      	movs	r3, #3
 80167c8:	623b      	str	r3, [r7, #32]
        break;
 80167ca:	e074      	b.n	80168b6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80167cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167d0:	2b01      	cmp	r3, #1
 80167d2:	d009      	beq.n	80167e8 <dhcp_parse_reply+0x288>
 80167d4:	4b27      	ldr	r3, [pc, #156]	; (8016874 <dhcp_parse_reply+0x314>)
 80167d6:	f240 624f 	movw	r2, #1615	; 0x64f
 80167da:	492a      	ldr	r1, [pc, #168]	; (8016884 <dhcp_parse_reply+0x324>)
 80167dc:	4827      	ldr	r0, [pc, #156]	; (801687c <dhcp_parse_reply+0x31c>)
 80167de:	f005 f86f 	bl	801b8c0 <iprintf>
 80167e2:	f06f 0305 	mvn.w	r3, #5
 80167e6:	e179      	b.n	8016adc <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80167e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80167ea:	2bf0      	cmp	r3, #240	; 0xf0
 80167ec:	d009      	beq.n	8016802 <dhcp_parse_reply+0x2a2>
 80167ee:	4b21      	ldr	r3, [pc, #132]	; (8016874 <dhcp_parse_reply+0x314>)
 80167f0:	f240 6251 	movw	r2, #1617	; 0x651
 80167f4:	4924      	ldr	r1, [pc, #144]	; (8016888 <dhcp_parse_reply+0x328>)
 80167f6:	4821      	ldr	r0, [pc, #132]	; (801687c <dhcp_parse_reply+0x31c>)
 80167f8:	f005 f862 	bl	801b8c0 <iprintf>
 80167fc:	f06f 0305 	mvn.w	r3, #5
 8016800:	e16c      	b.n	8016adc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016802:	2300      	movs	r3, #0
 8016804:	623b      	str	r3, [r7, #32]
        break;
 8016806:	e056      	b.n	80168b6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801680c:	2b01      	cmp	r3, #1
 801680e:	d009      	beq.n	8016824 <dhcp_parse_reply+0x2c4>
 8016810:	4b18      	ldr	r3, [pc, #96]	; (8016874 <dhcp_parse_reply+0x314>)
 8016812:	f240 6255 	movw	r2, #1621	; 0x655
 8016816:	491b      	ldr	r1, [pc, #108]	; (8016884 <dhcp_parse_reply+0x324>)
 8016818:	4818      	ldr	r0, [pc, #96]	; (801687c <dhcp_parse_reply+0x31c>)
 801681a:	f005 f851 	bl	801b8c0 <iprintf>
 801681e:	f06f 0305 	mvn.w	r3, #5
 8016822:	e15b      	b.n	8016adc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016824:	2301      	movs	r3, #1
 8016826:	623b      	str	r3, [r7, #32]
        break;
 8016828:	e045      	b.n	80168b6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801682a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801682e:	2b04      	cmp	r3, #4
 8016830:	d009      	beq.n	8016846 <dhcp_parse_reply+0x2e6>
 8016832:	4b10      	ldr	r3, [pc, #64]	; (8016874 <dhcp_parse_reply+0x314>)
 8016834:	f240 6259 	movw	r2, #1625	; 0x659
 8016838:	490f      	ldr	r1, [pc, #60]	; (8016878 <dhcp_parse_reply+0x318>)
 801683a:	4810      	ldr	r0, [pc, #64]	; (801687c <dhcp_parse_reply+0x31c>)
 801683c:	f005 f840 	bl	801b8c0 <iprintf>
 8016840:	f06f 0305 	mvn.w	r3, #5
 8016844:	e14a      	b.n	8016adc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016846:	2302      	movs	r3, #2
 8016848:	623b      	str	r3, [r7, #32]
        break;
 801684a:	e034      	b.n	80168b6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801684c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016850:	2b04      	cmp	r3, #4
 8016852:	d009      	beq.n	8016868 <dhcp_parse_reply+0x308>
 8016854:	4b07      	ldr	r3, [pc, #28]	; (8016874 <dhcp_parse_reply+0x314>)
 8016856:	f240 625d 	movw	r2, #1629	; 0x65d
 801685a:	4907      	ldr	r1, [pc, #28]	; (8016878 <dhcp_parse_reply+0x318>)
 801685c:	4807      	ldr	r0, [pc, #28]	; (801687c <dhcp_parse_reply+0x31c>)
 801685e:	f005 f82f 	bl	801b8c0 <iprintf>
 8016862:	f06f 0305 	mvn.w	r3, #5
 8016866:	e139      	b.n	8016adc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016868:	2304      	movs	r3, #4
 801686a:	623b      	str	r3, [r7, #32]
        break;
 801686c:	e023      	b.n	80168b6 <dhcp_parse_reply+0x356>
 801686e:	bf00      	nop
 8016870:	2001067c 	.word	0x2001067c
 8016874:	0801fe7c 	.word	0x0801fe7c
 8016878:	08020104 	.word	0x08020104
 801687c:	0801fedc 	.word	0x0801fedc
 8016880:	08020110 	.word	0x08020110
 8016884:	08020124 	.word	0x08020124
 8016888:	08020130 	.word	0x08020130
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801688c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016890:	2b04      	cmp	r3, #4
 8016892:	d009      	beq.n	80168a8 <dhcp_parse_reply+0x348>
 8016894:	4b93      	ldr	r3, [pc, #588]	; (8016ae4 <dhcp_parse_reply+0x584>)
 8016896:	f240 6261 	movw	r2, #1633	; 0x661
 801689a:	4993      	ldr	r1, [pc, #588]	; (8016ae8 <dhcp_parse_reply+0x588>)
 801689c:	4893      	ldr	r0, [pc, #588]	; (8016aec <dhcp_parse_reply+0x58c>)
 801689e:	f005 f80f 	bl	801b8c0 <iprintf>
 80168a2:	f06f 0305 	mvn.w	r3, #5
 80168a6:	e119      	b.n	8016adc <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80168a8:	2305      	movs	r3, #5
 80168aa:	623b      	str	r3, [r7, #32]
        break;
 80168ac:	e003      	b.n	80168b6 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80168ae:	2300      	movs	r3, #0
 80168b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80168b4:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80168b6:	7dfb      	ldrb	r3, [r7, #23]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d103      	bne.n	80168c4 <dhcp_parse_reply+0x364>
      offset++;
 80168bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80168be:	3301      	adds	r3, #1
 80168c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80168c2:	e0a1      	b.n	8016a08 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80168c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80168c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168ca:	4413      	add	r3, r2
 80168cc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80168d0:	4293      	cmp	r3, r2
 80168d2:	dd02      	ble.n	80168da <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80168d4:	f06f 0301 	mvn.w	r3, #1
 80168d8:	e100      	b.n	8016adc <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80168da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168de:	b29a      	uxth	r2, r3
 80168e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80168e2:	4413      	add	r3, r2
 80168e4:	b29b      	uxth	r3, r3
 80168e6:	3302      	adds	r3, #2
 80168e8:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80168ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	f000 808a 	beq.w	8016a08 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80168f4:	2300      	movs	r3, #0
 80168f6:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80168f8:	6a3b      	ldr	r3, [r7, #32]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	db02      	blt.n	8016904 <dhcp_parse_reply+0x3a4>
 80168fe:	6a3b      	ldr	r3, [r7, #32]
 8016900:	2b07      	cmp	r3, #7
 8016902:	dd06      	ble.n	8016912 <dhcp_parse_reply+0x3b2>
 8016904:	4b77      	ldr	r3, [pc, #476]	; (8016ae4 <dhcp_parse_reply+0x584>)
 8016906:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801690a:	4979      	ldr	r1, [pc, #484]	; (8016af0 <dhcp_parse_reply+0x590>)
 801690c:	4877      	ldr	r0, [pc, #476]	; (8016aec <dhcp_parse_reply+0x58c>)
 801690e:	f004 ffd7 	bl	801b8c0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8016912:	4a78      	ldr	r2, [pc, #480]	; (8016af4 <dhcp_parse_reply+0x594>)
 8016914:	6a3b      	ldr	r3, [r7, #32]
 8016916:	4413      	add	r3, r2
 8016918:	781b      	ldrb	r3, [r3, #0]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d174      	bne.n	8016a08 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801691e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016922:	2b04      	cmp	r3, #4
 8016924:	bf28      	it	cs
 8016926:	2304      	movcs	r3, #4
 8016928:	b2db      	uxtb	r3, r3
 801692a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801692c:	8bfb      	ldrh	r3, [r7, #30]
 801692e:	8aba      	ldrh	r2, [r7, #20]
 8016930:	f107 0108 	add.w	r1, r7, #8
 8016934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016936:	f7f7 fc75 	bl	800e224 <pbuf_copy_partial>
 801693a:	4603      	mov	r3, r0
 801693c:	461a      	mov	r2, r3
 801693e:	8abb      	ldrh	r3, [r7, #20]
 8016940:	4293      	cmp	r3, r2
 8016942:	d002      	beq.n	801694a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8016944:	f06f 0301 	mvn.w	r3, #1
 8016948:	e0c8      	b.n	8016adc <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801694a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801694e:	2b04      	cmp	r3, #4
 8016950:	d933      	bls.n	80169ba <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8016952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016956:	f003 0303 	and.w	r3, r3, #3
 801695a:	b2db      	uxtb	r3, r3
 801695c:	2b00      	cmp	r3, #0
 801695e:	d009      	beq.n	8016974 <dhcp_parse_reply+0x414>
 8016960:	4b60      	ldr	r3, [pc, #384]	; (8016ae4 <dhcp_parse_reply+0x584>)
 8016962:	f240 6281 	movw	r2, #1665	; 0x681
 8016966:	4964      	ldr	r1, [pc, #400]	; (8016af8 <dhcp_parse_reply+0x598>)
 8016968:	4860      	ldr	r0, [pc, #384]	; (8016aec <dhcp_parse_reply+0x58c>)
 801696a:	f004 ffa9 	bl	801b8c0 <iprintf>
 801696e:	f06f 0305 	mvn.w	r3, #5
 8016972:	e0b3      	b.n	8016adc <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8016974:	4a5f      	ldr	r2, [pc, #380]	; (8016af4 <dhcp_parse_reply+0x594>)
 8016976:	6a3b      	ldr	r3, [r7, #32]
 8016978:	4413      	add	r3, r2
 801697a:	2201      	movs	r2, #1
 801697c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	4618      	mov	r0, r3
 8016982:	f7f5 fe74 	bl	800c66e <lwip_htonl>
 8016986:	4602      	mov	r2, r0
 8016988:	495c      	ldr	r1, [pc, #368]	; (8016afc <dhcp_parse_reply+0x59c>)
 801698a:	6a3b      	ldr	r3, [r7, #32]
 801698c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8016990:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016994:	3b04      	subs	r3, #4
 8016996:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801699a:	8bfb      	ldrh	r3, [r7, #30]
 801699c:	3304      	adds	r3, #4
 801699e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80169a0:	8a7a      	ldrh	r2, [r7, #18]
 80169a2:	8bfb      	ldrh	r3, [r7, #30]
 80169a4:	429a      	cmp	r2, r3
 80169a6:	d202      	bcs.n	80169ae <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80169a8:	f06f 0301 	mvn.w	r3, #1
 80169ac:	e096      	b.n	8016adc <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80169ae:	8a7b      	ldrh	r3, [r7, #18]
 80169b0:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80169b2:	6a3b      	ldr	r3, [r7, #32]
 80169b4:	3301      	adds	r3, #1
 80169b6:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80169b8:	e79e      	b.n	80168f8 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80169ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169be:	2b04      	cmp	r3, #4
 80169c0:	d106      	bne.n	80169d0 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80169c2:	68bb      	ldr	r3, [r7, #8]
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7f5 fe52 	bl	800c66e <lwip_htonl>
 80169ca:	4603      	mov	r3, r0
 80169cc:	60bb      	str	r3, [r7, #8]
 80169ce:	e011      	b.n	80169f4 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80169d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169d4:	2b01      	cmp	r3, #1
 80169d6:	d009      	beq.n	80169ec <dhcp_parse_reply+0x48c>
 80169d8:	4b42      	ldr	r3, [pc, #264]	; (8016ae4 <dhcp_parse_reply+0x584>)
 80169da:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80169de:	4948      	ldr	r1, [pc, #288]	; (8016b00 <dhcp_parse_reply+0x5a0>)
 80169e0:	4842      	ldr	r0, [pc, #264]	; (8016aec <dhcp_parse_reply+0x58c>)
 80169e2:	f004 ff6d 	bl	801b8c0 <iprintf>
 80169e6:	f06f 0305 	mvn.w	r3, #5
 80169ea:	e077      	b.n	8016adc <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80169ec:	f107 0308 	add.w	r3, r7, #8
 80169f0:	781b      	ldrb	r3, [r3, #0]
 80169f2:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80169f4:	4a3f      	ldr	r2, [pc, #252]	; (8016af4 <dhcp_parse_reply+0x594>)
 80169f6:	6a3b      	ldr	r3, [r7, #32]
 80169f8:	4413      	add	r3, r2
 80169fa:	2201      	movs	r2, #1
 80169fc:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80169fe:	68ba      	ldr	r2, [r7, #8]
 8016a00:	493e      	ldr	r1, [pc, #248]	; (8016afc <dhcp_parse_reply+0x59c>)
 8016a02:	6a3b      	ldr	r3, [r7, #32]
 8016a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a0a:	895b      	ldrh	r3, [r3, #10]
 8016a0c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a0e:	429a      	cmp	r2, r3
 8016a10:	d324      	bcc.n	8016a5c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8016a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a14:	895b      	ldrh	r3, [r3, #10]
 8016a16:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a18:	1ad3      	subs	r3, r2, r3
 8016a1a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8016a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a1e:	895b      	ldrh	r3, [r3, #10]
 8016a20:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016a22:	1ad3      	subs	r3, r2, r3
 8016a24:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8016a26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016a2a:	429a      	cmp	r2, r3
 8016a2c:	d213      	bcs.n	8016a56 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8016a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8016a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d109      	bne.n	8016a4e <dhcp_parse_reply+0x4ee>
 8016a3a:	4b2a      	ldr	r3, [pc, #168]	; (8016ae4 <dhcp_parse_reply+0x584>)
 8016a3c:	f240 629d 	movw	r2, #1693	; 0x69d
 8016a40:	4930      	ldr	r1, [pc, #192]	; (8016b04 <dhcp_parse_reply+0x5a4>)
 8016a42:	482a      	ldr	r0, [pc, #168]	; (8016aec <dhcp_parse_reply+0x58c>)
 8016a44:	f004 ff3c 	bl	801b8c0 <iprintf>
 8016a48:	f06f 0305 	mvn.w	r3, #5
 8016a4c:	e046      	b.n	8016adc <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8016a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a54:	e002      	b.n	8016a5c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016a56:	f06f 0301 	mvn.w	r3, #1
 8016a5a:	e03f      	b.n	8016adc <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d00a      	beq.n	8016a78 <dhcp_parse_reply+0x518>
 8016a62:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016a66:	429a      	cmp	r2, r3
 8016a68:	d206      	bcs.n	8016a78 <dhcp_parse_reply+0x518>
 8016a6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016a6e:	4413      	add	r3, r2
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	2bff      	cmp	r3, #255	; 0xff
 8016a74:	f47f adb7 	bne.w	80165e6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016a78:	4b1e      	ldr	r3, [pc, #120]	; (8016af4 <dhcp_parse_reply+0x594>)
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d018      	beq.n	8016ab2 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016a80:	4b1e      	ldr	r3, [pc, #120]	; (8016afc <dhcp_parse_reply+0x59c>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016a86:	4b1b      	ldr	r3, [pc, #108]	; (8016af4 <dhcp_parse_reply+0x594>)
 8016a88:	2200      	movs	r2, #0
 8016a8a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	2b01      	cmp	r3, #1
 8016a90:	d102      	bne.n	8016a98 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8016a92:	2301      	movs	r3, #1
 8016a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a96:	e00c      	b.n	8016ab2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	2b02      	cmp	r3, #2
 8016a9c:	d102      	bne.n	8016aa4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8016a9e:	2301      	movs	r3, #1
 8016aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8016aa2:	e006      	b.n	8016ab2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	2b03      	cmp	r3, #3
 8016aa8:	d103      	bne.n	8016ab2 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8016aaa:	2301      	movs	r3, #1
 8016aac:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016aae:	2301      	movs	r3, #1
 8016ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8016ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d006      	beq.n	8016ac6 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016abc:	236c      	movs	r3, #108	; 0x6c
 8016abe:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8016ac0:	23ec      	movs	r3, #236	; 0xec
 8016ac2:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8016ac4:	e569      	b.n	801659a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d006      	beq.n	8016ada <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8016acc:	2300      	movs	r3, #0
 8016ace:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8016ad0:	232c      	movs	r3, #44	; 0x2c
 8016ad2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016ad4:	236c      	movs	r3, #108	; 0x6c
 8016ad6:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8016ad8:	e55f      	b.n	801659a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8016ada:	2300      	movs	r3, #0
}
 8016adc:	4618      	mov	r0, r3
 8016ade:	3740      	adds	r7, #64	; 0x40
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}
 8016ae4:	0801fe7c 	.word	0x0801fe7c
 8016ae8:	08020104 	.word	0x08020104
 8016aec:	0801fedc 	.word	0x0801fedc
 8016af0:	08020148 	.word	0x08020148
 8016af4:	2001067c 	.word	0x2001067c
 8016af8:	0802015c 	.word	0x0802015c
 8016afc:	20010684 	.word	0x20010684
 8016b00:	08020174 	.word	0x08020174
 8016b04:	08020188 	.word	0x08020188

08016b08 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b08a      	sub	sp, #40	; 0x28
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	60f8      	str	r0, [r7, #12]
 8016b10:	60b9      	str	r1, [r7, #8]
 8016b12:	607a      	str	r2, [r7, #4]
 8016b14:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8016b16:	4b60      	ldr	r3, [pc, #384]	; (8016c98 <dhcp_recv+0x190>)
 8016b18:	685b      	ldr	r3, [r3, #4]
 8016b1a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b1c:	6a3b      	ldr	r3, [r7, #32]
 8016b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b20:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	685b      	ldr	r3, [r3, #4]
 8016b26:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016b28:	69fb      	ldr	r3, [r7, #28]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	f000 809d 	beq.w	8016c6a <dhcp_recv+0x162>
 8016b30:	69fb      	ldr	r3, [r7, #28]
 8016b32:	791b      	ldrb	r3, [r3, #4]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	f000 8098 	beq.w	8016c6a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	895b      	ldrh	r3, [r3, #10]
 8016b3e:	2b2b      	cmp	r3, #43	; 0x2b
 8016b40:	f240 8095 	bls.w	8016c6e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016b44:	69bb      	ldr	r3, [r7, #24]
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2b02      	cmp	r3, #2
 8016b4a:	f040 8092 	bne.w	8016c72 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016b4e:	2300      	movs	r3, #0
 8016b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b54:	e012      	b.n	8016b7c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b5a:	6a3a      	ldr	r2, [r7, #32]
 8016b5c:	4413      	add	r3, r2
 8016b5e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8016b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b66:	69b9      	ldr	r1, [r7, #24]
 8016b68:	440b      	add	r3, r1
 8016b6a:	7f1b      	ldrb	r3, [r3, #28]
 8016b6c:	429a      	cmp	r2, r3
 8016b6e:	f040 8082 	bne.w	8016c76 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b76:	3301      	adds	r3, #1
 8016b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b7c:	6a3b      	ldr	r3, [r7, #32]
 8016b7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d203      	bcs.n	8016b92 <dhcp_recv+0x8a>
 8016b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b8e:	2b05      	cmp	r3, #5
 8016b90:	d9e1      	bls.n	8016b56 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8016b92:	69bb      	ldr	r3, [r7, #24]
 8016b94:	685b      	ldr	r3, [r3, #4]
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7f5 fd69 	bl	800c66e <lwip_htonl>
 8016b9c:	4602      	mov	r2, r0
 8016b9e:	69fb      	ldr	r3, [r7, #28]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	429a      	cmp	r2, r3
 8016ba4:	d169      	bne.n	8016c7a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016ba6:	69f9      	ldr	r1, [r7, #28]
 8016ba8:	6878      	ldr	r0, [r7, #4]
 8016baa:	f7ff fcd9 	bl	8016560 <dhcp_parse_reply>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d164      	bne.n	8016c7e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016bb4:	4b39      	ldr	r3, [pc, #228]	; (8016c9c <dhcp_recv+0x194>)
 8016bb6:	785b      	ldrb	r3, [r3, #1]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d062      	beq.n	8016c82 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016bc2:	4b37      	ldr	r3, [pc, #220]	; (8016ca0 <dhcp_recv+0x198>)
 8016bc4:	685b      	ldr	r3, [r3, #4]
 8016bc6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016bc8:	7cfb      	ldrb	r3, [r7, #19]
 8016bca:	2b05      	cmp	r3, #5
 8016bcc:	d12a      	bne.n	8016c24 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016bce:	69fb      	ldr	r3, [r7, #28]
 8016bd0:	795b      	ldrb	r3, [r3, #5]
 8016bd2:	2b01      	cmp	r3, #1
 8016bd4:	d112      	bne.n	8016bfc <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8016bd6:	6979      	ldr	r1, [r7, #20]
 8016bd8:	6a38      	ldr	r0, [r7, #32]
 8016bda:	f7fe fe17 	bl	801580c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016bde:	6a3b      	ldr	r3, [r7, #32]
 8016be0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016be4:	f003 0308 	and.w	r3, r3, #8
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d003      	beq.n	8016bf4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016bec:	6a38      	ldr	r0, [r7, #32]
 8016bee:	f7fe fb85 	bl	80152fc <dhcp_check>
 8016bf2:	e049      	b.n	8016c88 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016bf4:	6a38      	ldr	r0, [r7, #32]
 8016bf6:	f7ff f867 	bl	8015cc8 <dhcp_bind>
 8016bfa:	e045      	b.n	8016c88 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016bfc:	69fb      	ldr	r3, [r7, #28]
 8016bfe:	795b      	ldrb	r3, [r3, #5]
 8016c00:	2b03      	cmp	r3, #3
 8016c02:	d007      	beq.n	8016c14 <dhcp_recv+0x10c>
 8016c04:	69fb      	ldr	r3, [r7, #28]
 8016c06:	795b      	ldrb	r3, [r3, #5]
 8016c08:	2b04      	cmp	r3, #4
 8016c0a:	d003      	beq.n	8016c14 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016c0c:	69fb      	ldr	r3, [r7, #28]
 8016c0e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016c10:	2b05      	cmp	r3, #5
 8016c12:	d139      	bne.n	8016c88 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8016c14:	6979      	ldr	r1, [r7, #20]
 8016c16:	6a38      	ldr	r0, [r7, #32]
 8016c18:	f7fe fdf8 	bl	801580c <dhcp_handle_ack>
      dhcp_bind(netif);
 8016c1c:	6a38      	ldr	r0, [r7, #32]
 8016c1e:	f7ff f853 	bl	8015cc8 <dhcp_bind>
 8016c22:	e031      	b.n	8016c88 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016c24:	7cfb      	ldrb	r3, [r7, #19]
 8016c26:	2b06      	cmp	r3, #6
 8016c28:	d113      	bne.n	8016c52 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016c2e:	2b03      	cmp	r3, #3
 8016c30:	d00b      	beq.n	8016c4a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016c32:	69fb      	ldr	r3, [r7, #28]
 8016c34:	795b      	ldrb	r3, [r3, #5]
 8016c36:	2b01      	cmp	r3, #1
 8016c38:	d007      	beq.n	8016c4a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016c3a:	69fb      	ldr	r3, [r7, #28]
 8016c3c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016c3e:	2b04      	cmp	r3, #4
 8016c40:	d003      	beq.n	8016c4a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016c42:	69fb      	ldr	r3, [r7, #28]
 8016c44:	795b      	ldrb	r3, [r3, #5]
 8016c46:	2b05      	cmp	r3, #5
 8016c48:	d103      	bne.n	8016c52 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016c4a:	6a38      	ldr	r0, [r7, #32]
 8016c4c:	f7fe fb3c 	bl	80152c8 <dhcp_handle_nak>
 8016c50:	e01a      	b.n	8016c88 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8016c52:	7cfb      	ldrb	r3, [r7, #19]
 8016c54:	2b02      	cmp	r3, #2
 8016c56:	d116      	bne.n	8016c86 <dhcp_recv+0x17e>
 8016c58:	69fb      	ldr	r3, [r7, #28]
 8016c5a:	795b      	ldrb	r3, [r3, #5]
 8016c5c:	2b06      	cmp	r3, #6
 8016c5e:	d112      	bne.n	8016c86 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8016c60:	6979      	ldr	r1, [r7, #20]
 8016c62:	6a38      	ldr	r0, [r7, #32]
 8016c64:	f7fe fb7e 	bl	8015364 <dhcp_handle_offer>
 8016c68:	e00e      	b.n	8016c88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c6a:	bf00      	nop
 8016c6c:	e00c      	b.n	8016c88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c6e:	bf00      	nop
 8016c70:	e00a      	b.n	8016c88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c72:	bf00      	nop
 8016c74:	e008      	b.n	8016c88 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8016c76:	bf00      	nop
 8016c78:	e006      	b.n	8016c88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c7a:	bf00      	nop
 8016c7c:	e004      	b.n	8016c88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c7e:	bf00      	nop
 8016c80:	e002      	b.n	8016c88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016c82:	bf00      	nop
 8016c84:	e000      	b.n	8016c88 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8016c86:	bf00      	nop
  pbuf_free(p);
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f7f7 f8c5 	bl	800de18 <pbuf_free>
}
 8016c8e:	bf00      	nop
 8016c90:	3728      	adds	r7, #40	; 0x28
 8016c92:	46bd      	mov	sp, r7
 8016c94:	bd80      	pop	{r7, pc}
 8016c96:	bf00      	nop
 8016c98:	2000cf0c 	.word	0x2000cf0c
 8016c9c:	2001067c 	.word	0x2001067c
 8016ca0:	20010684 	.word	0x20010684

08016ca4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b088      	sub	sp, #32
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	60f8      	str	r0, [r7, #12]
 8016cac:	60b9      	str	r1, [r7, #8]
 8016cae:	603b      	str	r3, [r7, #0]
 8016cb0:	4613      	mov	r3, r2
 8016cb2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d108      	bne.n	8016ccc <dhcp_create_msg+0x28>
 8016cba:	4b5f      	ldr	r3, [pc, #380]	; (8016e38 <dhcp_create_msg+0x194>)
 8016cbc:	f240 7269 	movw	r2, #1897	; 0x769
 8016cc0:	495e      	ldr	r1, [pc, #376]	; (8016e3c <dhcp_create_msg+0x198>)
 8016cc2:	485f      	ldr	r0, [pc, #380]	; (8016e40 <dhcp_create_msg+0x19c>)
 8016cc4:	f004 fdfc 	bl	801b8c0 <iprintf>
 8016cc8:	2300      	movs	r3, #0
 8016cca:	e0b1      	b.n	8016e30 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016ccc:	68bb      	ldr	r3, [r7, #8]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d108      	bne.n	8016ce4 <dhcp_create_msg+0x40>
 8016cd2:	4b59      	ldr	r3, [pc, #356]	; (8016e38 <dhcp_create_msg+0x194>)
 8016cd4:	f240 726a 	movw	r2, #1898	; 0x76a
 8016cd8:	495a      	ldr	r1, [pc, #360]	; (8016e44 <dhcp_create_msg+0x1a0>)
 8016cda:	4859      	ldr	r0, [pc, #356]	; (8016e40 <dhcp_create_msg+0x19c>)
 8016cdc:	f004 fdf0 	bl	801b8c0 <iprintf>
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	e0a5      	b.n	8016e30 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016ce4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ce8:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016cec:	2036      	movs	r0, #54	; 0x36
 8016cee:	f7f6 fd7d 	bl	800d7ec <pbuf_alloc>
 8016cf2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016cf4:	69bb      	ldr	r3, [r7, #24]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d101      	bne.n	8016cfe <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	e098      	b.n	8016e30 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016cfe:	69bb      	ldr	r3, [r7, #24]
 8016d00:	895b      	ldrh	r3, [r3, #10]
 8016d02:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8016d06:	d206      	bcs.n	8016d16 <dhcp_create_msg+0x72>
 8016d08:	4b4b      	ldr	r3, [pc, #300]	; (8016e38 <dhcp_create_msg+0x194>)
 8016d0a:	f240 7271 	movw	r2, #1905	; 0x771
 8016d0e:	494e      	ldr	r1, [pc, #312]	; (8016e48 <dhcp_create_msg+0x1a4>)
 8016d10:	484b      	ldr	r0, [pc, #300]	; (8016e40 <dhcp_create_msg+0x19c>)
 8016d12:	f004 fdd5 	bl	801b8c0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8016d16:	79fb      	ldrb	r3, [r7, #7]
 8016d18:	2b03      	cmp	r3, #3
 8016d1a:	d103      	bne.n	8016d24 <dhcp_create_msg+0x80>
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	795b      	ldrb	r3, [r3, #5]
 8016d20:	2b03      	cmp	r3, #3
 8016d22:	d10d      	bne.n	8016d40 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	799b      	ldrb	r3, [r3, #6]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d105      	bne.n	8016d38 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016d2c:	f004 fe56 	bl	801b9dc <rand>
 8016d30:	4603      	mov	r3, r0
 8016d32:	461a      	mov	r2, r3
 8016d34:	4b45      	ldr	r3, [pc, #276]	; (8016e4c <dhcp_create_msg+0x1a8>)
 8016d36:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016d38:	4b44      	ldr	r3, [pc, #272]	; (8016e4c <dhcp_create_msg+0x1a8>)
 8016d3a:	681a      	ldr	r2, [r3, #0]
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016d40:	69bb      	ldr	r3, [r7, #24]
 8016d42:	685b      	ldr	r3, [r3, #4]
 8016d44:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8016d46:	f44f 729a 	mov.w	r2, #308	; 0x134
 8016d4a:	2100      	movs	r1, #0
 8016d4c:	6978      	ldr	r0, [r7, #20]
 8016d4e:	f004 fdaf 	bl	801b8b0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016d52:	697b      	ldr	r3, [r7, #20]
 8016d54:	2201      	movs	r2, #1
 8016d56:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016d58:	697b      	ldr	r3, [r7, #20]
 8016d5a:	2201      	movs	r2, #1
 8016d5c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016d64:	697b      	ldr	r3, [r7, #20]
 8016d66:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016d68:	68bb      	ldr	r3, [r7, #8]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7f5 fc7e 	bl	800c66e <lwip_htonl>
 8016d72:	4602      	mov	r2, r0
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016d78:	79fb      	ldrb	r3, [r7, #7]
 8016d7a:	2b08      	cmp	r3, #8
 8016d7c:	d010      	beq.n	8016da0 <dhcp_create_msg+0xfc>
 8016d7e:	79fb      	ldrb	r3, [r7, #7]
 8016d80:	2b04      	cmp	r3, #4
 8016d82:	d00d      	beq.n	8016da0 <dhcp_create_msg+0xfc>
 8016d84:	79fb      	ldrb	r3, [r7, #7]
 8016d86:	2b07      	cmp	r3, #7
 8016d88:	d00a      	beq.n	8016da0 <dhcp_create_msg+0xfc>
 8016d8a:	79fb      	ldrb	r3, [r7, #7]
 8016d8c:	2b03      	cmp	r3, #3
 8016d8e:	d10c      	bne.n	8016daa <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016d94:	2b05      	cmp	r3, #5
 8016d96:	d003      	beq.n	8016da0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	795b      	ldrb	r3, [r3, #5]
 8016d9c:	2b04      	cmp	r3, #4
 8016d9e:	d104      	bne.n	8016daa <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	3304      	adds	r3, #4
 8016da4:	681a      	ldr	r2, [r3, #0]
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016daa:	2300      	movs	r3, #0
 8016dac:	83fb      	strh	r3, [r7, #30]
 8016dae:	e00c      	b.n	8016dca <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016db0:	8bfa      	ldrh	r2, [r7, #30]
 8016db2:	8bfb      	ldrh	r3, [r7, #30]
 8016db4:	68f9      	ldr	r1, [r7, #12]
 8016db6:	440a      	add	r2, r1
 8016db8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016dbc:	697a      	ldr	r2, [r7, #20]
 8016dbe:	4413      	add	r3, r2
 8016dc0:	460a      	mov	r2, r1
 8016dc2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016dc4:	8bfb      	ldrh	r3, [r7, #30]
 8016dc6:	3301      	adds	r3, #1
 8016dc8:	83fb      	strh	r3, [r7, #30]
 8016dca:	8bfb      	ldrh	r3, [r7, #30]
 8016dcc:	2b05      	cmp	r3, #5
 8016dce:	d9ef      	bls.n	8016db0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016dd0:	697b      	ldr	r3, [r7, #20]
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016dd8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016ddc:	2200      	movs	r2, #0
 8016dde:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016de2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016de6:	2200      	movs	r2, #0
 8016de8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016dec:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016df0:	2200      	movs	r2, #0
 8016df2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016df6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8016dfa:	697b      	ldr	r3, [r7, #20]
 8016dfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e00:	2301      	movs	r3, #1
 8016e02:	2235      	movs	r2, #53	; 0x35
 8016e04:	2000      	movs	r0, #0
 8016e06:	f7ff fadb 	bl	80163c0 <dhcp_option>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016e0e:	697b      	ldr	r3, [r7, #20]
 8016e10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e14:	79fa      	ldrb	r2, [r7, #7]
 8016e16:	8a7b      	ldrh	r3, [r7, #18]
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f7ff fb05 	bl	8016428 <dhcp_option_byte>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d002      	beq.n	8016e2e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	8a7a      	ldrh	r2, [r7, #18]
 8016e2c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016e2e:	69bb      	ldr	r3, [r7, #24]
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3720      	adds	r7, #32
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd80      	pop	{r7, pc}
 8016e38:	0801fe7c 	.word	0x0801fe7c
 8016e3c:	0802019c 	.word	0x0802019c
 8016e40:	0801fedc 	.word	0x0801fedc
 8016e44:	080201bc 	.word	0x080201bc
 8016e48:	080201dc 	.word	0x080201dc
 8016e4c:	20008b2c 	.word	0x20008b2c

08016e50 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	4603      	mov	r3, r0
 8016e58:	60b9      	str	r1, [r7, #8]
 8016e5a:	607a      	str	r2, [r7, #4]
 8016e5c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016e5e:	89fb      	ldrh	r3, [r7, #14]
 8016e60:	1c5a      	adds	r2, r3, #1
 8016e62:	81fa      	strh	r2, [r7, #14]
 8016e64:	461a      	mov	r2, r3
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	4413      	add	r3, r2
 8016e6a:	22ff      	movs	r2, #255	; 0xff
 8016e6c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016e6e:	e007      	b.n	8016e80 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016e70:	89fb      	ldrh	r3, [r7, #14]
 8016e72:	1c5a      	adds	r2, r3, #1
 8016e74:	81fa      	strh	r2, [r7, #14]
 8016e76:	461a      	mov	r2, r3
 8016e78:	68bb      	ldr	r3, [r7, #8]
 8016e7a:	4413      	add	r3, r2
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016e80:	89fb      	ldrh	r3, [r7, #14]
 8016e82:	2b43      	cmp	r3, #67	; 0x43
 8016e84:	d904      	bls.n	8016e90 <dhcp_option_trailer+0x40>
 8016e86:	89fb      	ldrh	r3, [r7, #14]
 8016e88:	f003 0303 	and.w	r3, r3, #3
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d002      	beq.n	8016e96 <dhcp_option_trailer+0x46>
 8016e90:	89fb      	ldrh	r3, [r7, #14]
 8016e92:	2b43      	cmp	r3, #67	; 0x43
 8016e94:	d9ec      	bls.n	8016e70 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016e96:	89fb      	ldrh	r3, [r7, #14]
 8016e98:	33f0      	adds	r3, #240	; 0xf0
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	4619      	mov	r1, r3
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	f7f6 fe02 	bl	800daa8 <pbuf_realloc>
}
 8016ea4:	bf00      	nop
 8016ea6:	3710      	adds	r7, #16
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}

08016eac <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016eac:	b480      	push	{r7}
 8016eae:	b085      	sub	sp, #20
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d017      	beq.n	8016eea <dhcp_supplied_address+0x3e>
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d013      	beq.n	8016eea <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ec6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	795b      	ldrb	r3, [r3, #5]
 8016ecc:	2b0a      	cmp	r3, #10
 8016ece:	d007      	beq.n	8016ee0 <dhcp_supplied_address+0x34>
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	795b      	ldrb	r3, [r3, #5]
 8016ed4:	2b05      	cmp	r3, #5
 8016ed6:	d003      	beq.n	8016ee0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016edc:	2b04      	cmp	r3, #4
 8016ede:	d101      	bne.n	8016ee4 <dhcp_supplied_address+0x38>
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	e000      	b.n	8016ee6 <dhcp_supplied_address+0x3a>
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	b2db      	uxtb	r3, r3
 8016ee8:	e000      	b.n	8016eec <dhcp_supplied_address+0x40>
  }
  return 0;
 8016eea:	2300      	movs	r3, #0
}
 8016eec:	4618      	mov	r0, r3
 8016eee:	3714      	adds	r7, #20
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef6:	4770      	bx	lr

08016ef8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b082      	sub	sp, #8
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016f00:	4915      	ldr	r1, [pc, #84]	; (8016f58 <etharp_free_entry+0x60>)
 8016f02:	687a      	ldr	r2, [r7, #4]
 8016f04:	4613      	mov	r3, r2
 8016f06:	005b      	lsls	r3, r3, #1
 8016f08:	4413      	add	r3, r2
 8016f0a:	00db      	lsls	r3, r3, #3
 8016f0c:	440b      	add	r3, r1
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d013      	beq.n	8016f3c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016f14:	4910      	ldr	r1, [pc, #64]	; (8016f58 <etharp_free_entry+0x60>)
 8016f16:	687a      	ldr	r2, [r7, #4]
 8016f18:	4613      	mov	r3, r2
 8016f1a:	005b      	lsls	r3, r3, #1
 8016f1c:	4413      	add	r3, r2
 8016f1e:	00db      	lsls	r3, r3, #3
 8016f20:	440b      	add	r3, r1
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	4618      	mov	r0, r3
 8016f26:	f7f6 ff77 	bl	800de18 <pbuf_free>
    arp_table[i].q = NULL;
 8016f2a:	490b      	ldr	r1, [pc, #44]	; (8016f58 <etharp_free_entry+0x60>)
 8016f2c:	687a      	ldr	r2, [r7, #4]
 8016f2e:	4613      	mov	r3, r2
 8016f30:	005b      	lsls	r3, r3, #1
 8016f32:	4413      	add	r3, r2
 8016f34:	00db      	lsls	r3, r3, #3
 8016f36:	440b      	add	r3, r1
 8016f38:	2200      	movs	r2, #0
 8016f3a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016f3c:	4906      	ldr	r1, [pc, #24]	; (8016f58 <etharp_free_entry+0x60>)
 8016f3e:	687a      	ldr	r2, [r7, #4]
 8016f40:	4613      	mov	r3, r2
 8016f42:	005b      	lsls	r3, r3, #1
 8016f44:	4413      	add	r3, r2
 8016f46:	00db      	lsls	r3, r3, #3
 8016f48:	440b      	add	r3, r1
 8016f4a:	3314      	adds	r3, #20
 8016f4c:	2200      	movs	r2, #0
 8016f4e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016f50:	bf00      	nop
 8016f52:	3708      	adds	r7, #8
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bd80      	pop	{r7, pc}
 8016f58:	20008b30 	.word	0x20008b30

08016f5c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b082      	sub	sp, #8
 8016f60:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f62:	2300      	movs	r3, #0
 8016f64:	607b      	str	r3, [r7, #4]
 8016f66:	e096      	b.n	8017096 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016f68:	494f      	ldr	r1, [pc, #316]	; (80170a8 <etharp_tmr+0x14c>)
 8016f6a:	687a      	ldr	r2, [r7, #4]
 8016f6c:	4613      	mov	r3, r2
 8016f6e:	005b      	lsls	r3, r3, #1
 8016f70:	4413      	add	r3, r2
 8016f72:	00db      	lsls	r3, r3, #3
 8016f74:	440b      	add	r3, r1
 8016f76:	3314      	adds	r3, #20
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016f7c:	78fb      	ldrb	r3, [r7, #3]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	f000 8086 	beq.w	8017090 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016f84:	4948      	ldr	r1, [pc, #288]	; (80170a8 <etharp_tmr+0x14c>)
 8016f86:	687a      	ldr	r2, [r7, #4]
 8016f88:	4613      	mov	r3, r2
 8016f8a:	005b      	lsls	r3, r3, #1
 8016f8c:	4413      	add	r3, r2
 8016f8e:	00db      	lsls	r3, r3, #3
 8016f90:	440b      	add	r3, r1
 8016f92:	3312      	adds	r3, #18
 8016f94:	881b      	ldrh	r3, [r3, #0]
 8016f96:	3301      	adds	r3, #1
 8016f98:	b298      	uxth	r0, r3
 8016f9a:	4943      	ldr	r1, [pc, #268]	; (80170a8 <etharp_tmr+0x14c>)
 8016f9c:	687a      	ldr	r2, [r7, #4]
 8016f9e:	4613      	mov	r3, r2
 8016fa0:	005b      	lsls	r3, r3, #1
 8016fa2:	4413      	add	r3, r2
 8016fa4:	00db      	lsls	r3, r3, #3
 8016fa6:	440b      	add	r3, r1
 8016fa8:	3312      	adds	r3, #18
 8016faa:	4602      	mov	r2, r0
 8016fac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016fae:	493e      	ldr	r1, [pc, #248]	; (80170a8 <etharp_tmr+0x14c>)
 8016fb0:	687a      	ldr	r2, [r7, #4]
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	005b      	lsls	r3, r3, #1
 8016fb6:	4413      	add	r3, r2
 8016fb8:	00db      	lsls	r3, r3, #3
 8016fba:	440b      	add	r3, r1
 8016fbc:	3312      	adds	r3, #18
 8016fbe:	881b      	ldrh	r3, [r3, #0]
 8016fc0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016fc4:	d215      	bcs.n	8016ff2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016fc6:	4938      	ldr	r1, [pc, #224]	; (80170a8 <etharp_tmr+0x14c>)
 8016fc8:	687a      	ldr	r2, [r7, #4]
 8016fca:	4613      	mov	r3, r2
 8016fcc:	005b      	lsls	r3, r3, #1
 8016fce:	4413      	add	r3, r2
 8016fd0:	00db      	lsls	r3, r3, #3
 8016fd2:	440b      	add	r3, r1
 8016fd4:	3314      	adds	r3, #20
 8016fd6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016fd8:	2b01      	cmp	r3, #1
 8016fda:	d10e      	bne.n	8016ffa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016fdc:	4932      	ldr	r1, [pc, #200]	; (80170a8 <etharp_tmr+0x14c>)
 8016fde:	687a      	ldr	r2, [r7, #4]
 8016fe0:	4613      	mov	r3, r2
 8016fe2:	005b      	lsls	r3, r3, #1
 8016fe4:	4413      	add	r3, r2
 8016fe6:	00db      	lsls	r3, r3, #3
 8016fe8:	440b      	add	r3, r1
 8016fea:	3312      	adds	r3, #18
 8016fec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016fee:	2b04      	cmp	r3, #4
 8016ff0:	d903      	bls.n	8016ffa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f7ff ff80 	bl	8016ef8 <etharp_free_entry>
 8016ff8:	e04a      	b.n	8017090 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016ffa:	492b      	ldr	r1, [pc, #172]	; (80170a8 <etharp_tmr+0x14c>)
 8016ffc:	687a      	ldr	r2, [r7, #4]
 8016ffe:	4613      	mov	r3, r2
 8017000:	005b      	lsls	r3, r3, #1
 8017002:	4413      	add	r3, r2
 8017004:	00db      	lsls	r3, r3, #3
 8017006:	440b      	add	r3, r1
 8017008:	3314      	adds	r3, #20
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	2b03      	cmp	r3, #3
 801700e:	d10a      	bne.n	8017026 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017010:	4925      	ldr	r1, [pc, #148]	; (80170a8 <etharp_tmr+0x14c>)
 8017012:	687a      	ldr	r2, [r7, #4]
 8017014:	4613      	mov	r3, r2
 8017016:	005b      	lsls	r3, r3, #1
 8017018:	4413      	add	r3, r2
 801701a:	00db      	lsls	r3, r3, #3
 801701c:	440b      	add	r3, r1
 801701e:	3314      	adds	r3, #20
 8017020:	2204      	movs	r2, #4
 8017022:	701a      	strb	r2, [r3, #0]
 8017024:	e034      	b.n	8017090 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017026:	4920      	ldr	r1, [pc, #128]	; (80170a8 <etharp_tmr+0x14c>)
 8017028:	687a      	ldr	r2, [r7, #4]
 801702a:	4613      	mov	r3, r2
 801702c:	005b      	lsls	r3, r3, #1
 801702e:	4413      	add	r3, r2
 8017030:	00db      	lsls	r3, r3, #3
 8017032:	440b      	add	r3, r1
 8017034:	3314      	adds	r3, #20
 8017036:	781b      	ldrb	r3, [r3, #0]
 8017038:	2b04      	cmp	r3, #4
 801703a:	d10a      	bne.n	8017052 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801703c:	491a      	ldr	r1, [pc, #104]	; (80170a8 <etharp_tmr+0x14c>)
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	4613      	mov	r3, r2
 8017042:	005b      	lsls	r3, r3, #1
 8017044:	4413      	add	r3, r2
 8017046:	00db      	lsls	r3, r3, #3
 8017048:	440b      	add	r3, r1
 801704a:	3314      	adds	r3, #20
 801704c:	2202      	movs	r2, #2
 801704e:	701a      	strb	r2, [r3, #0]
 8017050:	e01e      	b.n	8017090 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017052:	4915      	ldr	r1, [pc, #84]	; (80170a8 <etharp_tmr+0x14c>)
 8017054:	687a      	ldr	r2, [r7, #4]
 8017056:	4613      	mov	r3, r2
 8017058:	005b      	lsls	r3, r3, #1
 801705a:	4413      	add	r3, r2
 801705c:	00db      	lsls	r3, r3, #3
 801705e:	440b      	add	r3, r1
 8017060:	3314      	adds	r3, #20
 8017062:	781b      	ldrb	r3, [r3, #0]
 8017064:	2b01      	cmp	r3, #1
 8017066:	d113      	bne.n	8017090 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017068:	490f      	ldr	r1, [pc, #60]	; (80170a8 <etharp_tmr+0x14c>)
 801706a:	687a      	ldr	r2, [r7, #4]
 801706c:	4613      	mov	r3, r2
 801706e:	005b      	lsls	r3, r3, #1
 8017070:	4413      	add	r3, r2
 8017072:	00db      	lsls	r3, r3, #3
 8017074:	440b      	add	r3, r1
 8017076:	3308      	adds	r3, #8
 8017078:	6818      	ldr	r0, [r3, #0]
 801707a:	687a      	ldr	r2, [r7, #4]
 801707c:	4613      	mov	r3, r2
 801707e:	005b      	lsls	r3, r3, #1
 8017080:	4413      	add	r3, r2
 8017082:	00db      	lsls	r3, r3, #3
 8017084:	4a08      	ldr	r2, [pc, #32]	; (80170a8 <etharp_tmr+0x14c>)
 8017086:	4413      	add	r3, r2
 8017088:	3304      	adds	r3, #4
 801708a:	4619      	mov	r1, r3
 801708c:	f000 fe72 	bl	8017d74 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	3301      	adds	r3, #1
 8017094:	607b      	str	r3, [r7, #4]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2b09      	cmp	r3, #9
 801709a:	f77f af65 	ble.w	8016f68 <etharp_tmr+0xc>
      }
    }
  }
}
 801709e:	bf00      	nop
 80170a0:	bf00      	nop
 80170a2:	3708      	adds	r7, #8
 80170a4:	46bd      	mov	sp, r7
 80170a6:	bd80      	pop	{r7, pc}
 80170a8:	20008b30 	.word	0x20008b30

080170ac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b08a      	sub	sp, #40	; 0x28
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	60f8      	str	r0, [r7, #12]
 80170b4:	460b      	mov	r3, r1
 80170b6:	607a      	str	r2, [r7, #4]
 80170b8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80170ba:	230a      	movs	r3, #10
 80170bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80170be:	230a      	movs	r3, #10
 80170c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80170c2:	230a      	movs	r3, #10
 80170c4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80170c6:	2300      	movs	r3, #0
 80170c8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80170ca:	230a      	movs	r3, #10
 80170cc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80170ce:	2300      	movs	r3, #0
 80170d0:	83bb      	strh	r3, [r7, #28]
 80170d2:	2300      	movs	r3, #0
 80170d4:	837b      	strh	r3, [r7, #26]
 80170d6:	2300      	movs	r3, #0
 80170d8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80170da:	2300      	movs	r3, #0
 80170dc:	843b      	strh	r3, [r7, #32]
 80170de:	e0ae      	b.n	801723e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80170e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170e4:	49a6      	ldr	r1, [pc, #664]	; (8017380 <etharp_find_entry+0x2d4>)
 80170e6:	4613      	mov	r3, r2
 80170e8:	005b      	lsls	r3, r3, #1
 80170ea:	4413      	add	r3, r2
 80170ec:	00db      	lsls	r3, r3, #3
 80170ee:	440b      	add	r3, r1
 80170f0:	3314      	adds	r3, #20
 80170f2:	781b      	ldrb	r3, [r3, #0]
 80170f4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80170f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80170fa:	2b0a      	cmp	r3, #10
 80170fc:	d105      	bne.n	801710a <etharp_find_entry+0x5e>
 80170fe:	7dfb      	ldrb	r3, [r7, #23]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d102      	bne.n	801710a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017104:	8c3b      	ldrh	r3, [r7, #32]
 8017106:	847b      	strh	r3, [r7, #34]	; 0x22
 8017108:	e095      	b.n	8017236 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801710a:	7dfb      	ldrb	r3, [r7, #23]
 801710c:	2b00      	cmp	r3, #0
 801710e:	f000 8092 	beq.w	8017236 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017112:	7dfb      	ldrb	r3, [r7, #23]
 8017114:	2b01      	cmp	r3, #1
 8017116:	d009      	beq.n	801712c <etharp_find_entry+0x80>
 8017118:	7dfb      	ldrb	r3, [r7, #23]
 801711a:	2b01      	cmp	r3, #1
 801711c:	d806      	bhi.n	801712c <etharp_find_entry+0x80>
 801711e:	4b99      	ldr	r3, [pc, #612]	; (8017384 <etharp_find_entry+0x2d8>)
 8017120:	f240 1223 	movw	r2, #291	; 0x123
 8017124:	4998      	ldr	r1, [pc, #608]	; (8017388 <etharp_find_entry+0x2dc>)
 8017126:	4899      	ldr	r0, [pc, #612]	; (801738c <etharp_find_entry+0x2e0>)
 8017128:	f004 fbca 	bl	801b8c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d020      	beq.n	8017174 <etharp_find_entry+0xc8>
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	6819      	ldr	r1, [r3, #0]
 8017136:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801713a:	4891      	ldr	r0, [pc, #580]	; (8017380 <etharp_find_entry+0x2d4>)
 801713c:	4613      	mov	r3, r2
 801713e:	005b      	lsls	r3, r3, #1
 8017140:	4413      	add	r3, r2
 8017142:	00db      	lsls	r3, r3, #3
 8017144:	4403      	add	r3, r0
 8017146:	3304      	adds	r3, #4
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	4299      	cmp	r1, r3
 801714c:	d112      	bne.n	8017174 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d00c      	beq.n	801716e <etharp_find_entry+0xc2>
 8017154:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017158:	4989      	ldr	r1, [pc, #548]	; (8017380 <etharp_find_entry+0x2d4>)
 801715a:	4613      	mov	r3, r2
 801715c:	005b      	lsls	r3, r3, #1
 801715e:	4413      	add	r3, r2
 8017160:	00db      	lsls	r3, r3, #3
 8017162:	440b      	add	r3, r1
 8017164:	3308      	adds	r3, #8
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	687a      	ldr	r2, [r7, #4]
 801716a:	429a      	cmp	r2, r3
 801716c:	d102      	bne.n	8017174 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801716e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017172:	e100      	b.n	8017376 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017174:	7dfb      	ldrb	r3, [r7, #23]
 8017176:	2b01      	cmp	r3, #1
 8017178:	d140      	bne.n	80171fc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801717a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801717e:	4980      	ldr	r1, [pc, #512]	; (8017380 <etharp_find_entry+0x2d4>)
 8017180:	4613      	mov	r3, r2
 8017182:	005b      	lsls	r3, r3, #1
 8017184:	4413      	add	r3, r2
 8017186:	00db      	lsls	r3, r3, #3
 8017188:	440b      	add	r3, r1
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d01a      	beq.n	80171c6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017190:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017194:	497a      	ldr	r1, [pc, #488]	; (8017380 <etharp_find_entry+0x2d4>)
 8017196:	4613      	mov	r3, r2
 8017198:	005b      	lsls	r3, r3, #1
 801719a:	4413      	add	r3, r2
 801719c:	00db      	lsls	r3, r3, #3
 801719e:	440b      	add	r3, r1
 80171a0:	3312      	adds	r3, #18
 80171a2:	881b      	ldrh	r3, [r3, #0]
 80171a4:	8bba      	ldrh	r2, [r7, #28]
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d845      	bhi.n	8017236 <etharp_find_entry+0x18a>
            old_queue = i;
 80171aa:	8c3b      	ldrh	r3, [r7, #32]
 80171ac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80171ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171b2:	4973      	ldr	r1, [pc, #460]	; (8017380 <etharp_find_entry+0x2d4>)
 80171b4:	4613      	mov	r3, r2
 80171b6:	005b      	lsls	r3, r3, #1
 80171b8:	4413      	add	r3, r2
 80171ba:	00db      	lsls	r3, r3, #3
 80171bc:	440b      	add	r3, r1
 80171be:	3312      	adds	r3, #18
 80171c0:	881b      	ldrh	r3, [r3, #0]
 80171c2:	83bb      	strh	r3, [r7, #28]
 80171c4:	e037      	b.n	8017236 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80171c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171ca:	496d      	ldr	r1, [pc, #436]	; (8017380 <etharp_find_entry+0x2d4>)
 80171cc:	4613      	mov	r3, r2
 80171ce:	005b      	lsls	r3, r3, #1
 80171d0:	4413      	add	r3, r2
 80171d2:	00db      	lsls	r3, r3, #3
 80171d4:	440b      	add	r3, r1
 80171d6:	3312      	adds	r3, #18
 80171d8:	881b      	ldrh	r3, [r3, #0]
 80171da:	8b7a      	ldrh	r2, [r7, #26]
 80171dc:	429a      	cmp	r2, r3
 80171de:	d82a      	bhi.n	8017236 <etharp_find_entry+0x18a>
            old_pending = i;
 80171e0:	8c3b      	ldrh	r3, [r7, #32]
 80171e2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80171e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171e8:	4965      	ldr	r1, [pc, #404]	; (8017380 <etharp_find_entry+0x2d4>)
 80171ea:	4613      	mov	r3, r2
 80171ec:	005b      	lsls	r3, r3, #1
 80171ee:	4413      	add	r3, r2
 80171f0:	00db      	lsls	r3, r3, #3
 80171f2:	440b      	add	r3, r1
 80171f4:	3312      	adds	r3, #18
 80171f6:	881b      	ldrh	r3, [r3, #0]
 80171f8:	837b      	strh	r3, [r7, #26]
 80171fa:	e01c      	b.n	8017236 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80171fc:	7dfb      	ldrb	r3, [r7, #23]
 80171fe:	2b01      	cmp	r3, #1
 8017200:	d919      	bls.n	8017236 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017202:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017206:	495e      	ldr	r1, [pc, #376]	; (8017380 <etharp_find_entry+0x2d4>)
 8017208:	4613      	mov	r3, r2
 801720a:	005b      	lsls	r3, r3, #1
 801720c:	4413      	add	r3, r2
 801720e:	00db      	lsls	r3, r3, #3
 8017210:	440b      	add	r3, r1
 8017212:	3312      	adds	r3, #18
 8017214:	881b      	ldrh	r3, [r3, #0]
 8017216:	8b3a      	ldrh	r2, [r7, #24]
 8017218:	429a      	cmp	r2, r3
 801721a:	d80c      	bhi.n	8017236 <etharp_find_entry+0x18a>
            old_stable = i;
 801721c:	8c3b      	ldrh	r3, [r7, #32]
 801721e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017220:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017224:	4956      	ldr	r1, [pc, #344]	; (8017380 <etharp_find_entry+0x2d4>)
 8017226:	4613      	mov	r3, r2
 8017228:	005b      	lsls	r3, r3, #1
 801722a:	4413      	add	r3, r2
 801722c:	00db      	lsls	r3, r3, #3
 801722e:	440b      	add	r3, r1
 8017230:	3312      	adds	r3, #18
 8017232:	881b      	ldrh	r3, [r3, #0]
 8017234:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017236:	8c3b      	ldrh	r3, [r7, #32]
 8017238:	3301      	adds	r3, #1
 801723a:	b29b      	uxth	r3, r3
 801723c:	843b      	strh	r3, [r7, #32]
 801723e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017242:	2b09      	cmp	r3, #9
 8017244:	f77f af4c 	ble.w	80170e0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017248:	7afb      	ldrb	r3, [r7, #11]
 801724a:	f003 0302 	and.w	r3, r3, #2
 801724e:	2b00      	cmp	r3, #0
 8017250:	d108      	bne.n	8017264 <etharp_find_entry+0x1b8>
 8017252:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017256:	2b0a      	cmp	r3, #10
 8017258:	d107      	bne.n	801726a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801725a:	7afb      	ldrb	r3, [r7, #11]
 801725c:	f003 0301 	and.w	r3, r3, #1
 8017260:	2b00      	cmp	r3, #0
 8017262:	d102      	bne.n	801726a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017268:	e085      	b.n	8017376 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801726a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801726e:	2b09      	cmp	r3, #9
 8017270:	dc02      	bgt.n	8017278 <etharp_find_entry+0x1cc>
    i = empty;
 8017272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017274:	843b      	strh	r3, [r7, #32]
 8017276:	e039      	b.n	80172ec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017278:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801727c:	2b09      	cmp	r3, #9
 801727e:	dc14      	bgt.n	80172aa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017282:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017284:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017288:	493d      	ldr	r1, [pc, #244]	; (8017380 <etharp_find_entry+0x2d4>)
 801728a:	4613      	mov	r3, r2
 801728c:	005b      	lsls	r3, r3, #1
 801728e:	4413      	add	r3, r2
 8017290:	00db      	lsls	r3, r3, #3
 8017292:	440b      	add	r3, r1
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d018      	beq.n	80172cc <etharp_find_entry+0x220>
 801729a:	4b3a      	ldr	r3, [pc, #232]	; (8017384 <etharp_find_entry+0x2d8>)
 801729c:	f240 126d 	movw	r2, #365	; 0x16d
 80172a0:	493b      	ldr	r1, [pc, #236]	; (8017390 <etharp_find_entry+0x2e4>)
 80172a2:	483a      	ldr	r0, [pc, #232]	; (801738c <etharp_find_entry+0x2e0>)
 80172a4:	f004 fb0c 	bl	801b8c0 <iprintf>
 80172a8:	e010      	b.n	80172cc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80172aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80172ae:	2b09      	cmp	r3, #9
 80172b0:	dc02      	bgt.n	80172b8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80172b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80172b4:	843b      	strh	r3, [r7, #32]
 80172b6:	e009      	b.n	80172cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80172b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80172bc:	2b09      	cmp	r3, #9
 80172be:	dc02      	bgt.n	80172c6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80172c0:	8bfb      	ldrh	r3, [r7, #30]
 80172c2:	843b      	strh	r3, [r7, #32]
 80172c4:	e002      	b.n	80172cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80172c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172ca:	e054      	b.n	8017376 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80172cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80172d0:	2b09      	cmp	r3, #9
 80172d2:	dd06      	ble.n	80172e2 <etharp_find_entry+0x236>
 80172d4:	4b2b      	ldr	r3, [pc, #172]	; (8017384 <etharp_find_entry+0x2d8>)
 80172d6:	f240 127f 	movw	r2, #383	; 0x17f
 80172da:	492e      	ldr	r1, [pc, #184]	; (8017394 <etharp_find_entry+0x2e8>)
 80172dc:	482b      	ldr	r0, [pc, #172]	; (801738c <etharp_find_entry+0x2e0>)
 80172de:	f004 faef 	bl	801b8c0 <iprintf>
    etharp_free_entry(i);
 80172e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80172e6:	4618      	mov	r0, r3
 80172e8:	f7ff fe06 	bl	8016ef8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80172ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80172f0:	2b09      	cmp	r3, #9
 80172f2:	dd06      	ble.n	8017302 <etharp_find_entry+0x256>
 80172f4:	4b23      	ldr	r3, [pc, #140]	; (8017384 <etharp_find_entry+0x2d8>)
 80172f6:	f240 1283 	movw	r2, #387	; 0x183
 80172fa:	4926      	ldr	r1, [pc, #152]	; (8017394 <etharp_find_entry+0x2e8>)
 80172fc:	4823      	ldr	r0, [pc, #140]	; (801738c <etharp_find_entry+0x2e0>)
 80172fe:	f004 fadf 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017302:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017306:	491e      	ldr	r1, [pc, #120]	; (8017380 <etharp_find_entry+0x2d4>)
 8017308:	4613      	mov	r3, r2
 801730a:	005b      	lsls	r3, r3, #1
 801730c:	4413      	add	r3, r2
 801730e:	00db      	lsls	r3, r3, #3
 8017310:	440b      	add	r3, r1
 8017312:	3314      	adds	r3, #20
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d006      	beq.n	8017328 <etharp_find_entry+0x27c>
 801731a:	4b1a      	ldr	r3, [pc, #104]	; (8017384 <etharp_find_entry+0x2d8>)
 801731c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017320:	491d      	ldr	r1, [pc, #116]	; (8017398 <etharp_find_entry+0x2ec>)
 8017322:	481a      	ldr	r0, [pc, #104]	; (801738c <etharp_find_entry+0x2e0>)
 8017324:	f004 facc 	bl	801b8c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d00b      	beq.n	8017346 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801732e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	6819      	ldr	r1, [r3, #0]
 8017336:	4812      	ldr	r0, [pc, #72]	; (8017380 <etharp_find_entry+0x2d4>)
 8017338:	4613      	mov	r3, r2
 801733a:	005b      	lsls	r3, r3, #1
 801733c:	4413      	add	r3, r2
 801733e:	00db      	lsls	r3, r3, #3
 8017340:	4403      	add	r3, r0
 8017342:	3304      	adds	r3, #4
 8017344:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801734a:	490d      	ldr	r1, [pc, #52]	; (8017380 <etharp_find_entry+0x2d4>)
 801734c:	4613      	mov	r3, r2
 801734e:	005b      	lsls	r3, r3, #1
 8017350:	4413      	add	r3, r2
 8017352:	00db      	lsls	r3, r3, #3
 8017354:	440b      	add	r3, r1
 8017356:	3312      	adds	r3, #18
 8017358:	2200      	movs	r2, #0
 801735a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801735c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017360:	4907      	ldr	r1, [pc, #28]	; (8017380 <etharp_find_entry+0x2d4>)
 8017362:	4613      	mov	r3, r2
 8017364:	005b      	lsls	r3, r3, #1
 8017366:	4413      	add	r3, r2
 8017368:	00db      	lsls	r3, r3, #3
 801736a:	440b      	add	r3, r1
 801736c:	3308      	adds	r3, #8
 801736e:	687a      	ldr	r2, [r7, #4]
 8017370:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017372:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017376:	4618      	mov	r0, r3
 8017378:	3728      	adds	r7, #40	; 0x28
 801737a:	46bd      	mov	sp, r7
 801737c:	bd80      	pop	{r7, pc}
 801737e:	bf00      	nop
 8017380:	20008b30 	.word	0x20008b30
 8017384:	0802021c 	.word	0x0802021c
 8017388:	08020254 	.word	0x08020254
 801738c:	08020294 	.word	0x08020294
 8017390:	080202bc 	.word	0x080202bc
 8017394:	080202d4 	.word	0x080202d4
 8017398:	080202e8 	.word	0x080202e8

0801739c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b088      	sub	sp, #32
 80173a0:	af02      	add	r7, sp, #8
 80173a2:	60f8      	str	r0, [r7, #12]
 80173a4:	60b9      	str	r1, [r7, #8]
 80173a6:	607a      	str	r2, [r7, #4]
 80173a8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80173b0:	2b06      	cmp	r3, #6
 80173b2:	d006      	beq.n	80173c2 <etharp_update_arp_entry+0x26>
 80173b4:	4b48      	ldr	r3, [pc, #288]	; (80174d8 <etharp_update_arp_entry+0x13c>)
 80173b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80173ba:	4948      	ldr	r1, [pc, #288]	; (80174dc <etharp_update_arp_entry+0x140>)
 80173bc:	4848      	ldr	r0, [pc, #288]	; (80174e0 <etharp_update_arp_entry+0x144>)
 80173be:	f004 fa7f 	bl	801b8c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d012      	beq.n	80173ee <etharp_update_arp_entry+0x52>
 80173c8:	68bb      	ldr	r3, [r7, #8]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d00e      	beq.n	80173ee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	68f9      	ldr	r1, [r7, #12]
 80173d6:	4618      	mov	r0, r3
 80173d8:	f001 f920 	bl	801861c <ip4_addr_isbroadcast_u32>
 80173dc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d105      	bne.n	80173ee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80173e2:	68bb      	ldr	r3, [r7, #8]
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80173ea:	2be0      	cmp	r3, #224	; 0xe0
 80173ec:	d102      	bne.n	80173f4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80173ee:	f06f 030f 	mvn.w	r3, #15
 80173f2:	e06c      	b.n	80174ce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80173f4:	78fb      	ldrb	r3, [r7, #3]
 80173f6:	68fa      	ldr	r2, [r7, #12]
 80173f8:	4619      	mov	r1, r3
 80173fa:	68b8      	ldr	r0, [r7, #8]
 80173fc:	f7ff fe56 	bl	80170ac <etharp_find_entry>
 8017400:	4603      	mov	r3, r0
 8017402:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017404:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017408:	2b00      	cmp	r3, #0
 801740a:	da02      	bge.n	8017412 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801740c:	8afb      	ldrh	r3, [r7, #22]
 801740e:	b25b      	sxtb	r3, r3
 8017410:	e05d      	b.n	80174ce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017412:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017416:	4933      	ldr	r1, [pc, #204]	; (80174e4 <etharp_update_arp_entry+0x148>)
 8017418:	4613      	mov	r3, r2
 801741a:	005b      	lsls	r3, r3, #1
 801741c:	4413      	add	r3, r2
 801741e:	00db      	lsls	r3, r3, #3
 8017420:	440b      	add	r3, r1
 8017422:	3314      	adds	r3, #20
 8017424:	2202      	movs	r2, #2
 8017426:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017428:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801742c:	492d      	ldr	r1, [pc, #180]	; (80174e4 <etharp_update_arp_entry+0x148>)
 801742e:	4613      	mov	r3, r2
 8017430:	005b      	lsls	r3, r3, #1
 8017432:	4413      	add	r3, r2
 8017434:	00db      	lsls	r3, r3, #3
 8017436:	440b      	add	r3, r1
 8017438:	3308      	adds	r3, #8
 801743a:	68fa      	ldr	r2, [r7, #12]
 801743c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801743e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017442:	4613      	mov	r3, r2
 8017444:	005b      	lsls	r3, r3, #1
 8017446:	4413      	add	r3, r2
 8017448:	00db      	lsls	r3, r3, #3
 801744a:	3308      	adds	r3, #8
 801744c:	4a25      	ldr	r2, [pc, #148]	; (80174e4 <etharp_update_arp_entry+0x148>)
 801744e:	4413      	add	r3, r2
 8017450:	3304      	adds	r3, #4
 8017452:	2206      	movs	r2, #6
 8017454:	6879      	ldr	r1, [r7, #4]
 8017456:	4618      	mov	r0, r3
 8017458:	f004 fa1c 	bl	801b894 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801745c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017460:	4920      	ldr	r1, [pc, #128]	; (80174e4 <etharp_update_arp_entry+0x148>)
 8017462:	4613      	mov	r3, r2
 8017464:	005b      	lsls	r3, r3, #1
 8017466:	4413      	add	r3, r2
 8017468:	00db      	lsls	r3, r3, #3
 801746a:	440b      	add	r3, r1
 801746c:	3312      	adds	r3, #18
 801746e:	2200      	movs	r2, #0
 8017470:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017472:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017476:	491b      	ldr	r1, [pc, #108]	; (80174e4 <etharp_update_arp_entry+0x148>)
 8017478:	4613      	mov	r3, r2
 801747a:	005b      	lsls	r3, r3, #1
 801747c:	4413      	add	r3, r2
 801747e:	00db      	lsls	r3, r3, #3
 8017480:	440b      	add	r3, r1
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d021      	beq.n	80174cc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017488:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801748c:	4915      	ldr	r1, [pc, #84]	; (80174e4 <etharp_update_arp_entry+0x148>)
 801748e:	4613      	mov	r3, r2
 8017490:	005b      	lsls	r3, r3, #1
 8017492:	4413      	add	r3, r2
 8017494:	00db      	lsls	r3, r3, #3
 8017496:	440b      	add	r3, r1
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801749c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80174a0:	4910      	ldr	r1, [pc, #64]	; (80174e4 <etharp_update_arp_entry+0x148>)
 80174a2:	4613      	mov	r3, r2
 80174a4:	005b      	lsls	r3, r3, #1
 80174a6:	4413      	add	r3, r2
 80174a8:	00db      	lsls	r3, r3, #3
 80174aa:	440b      	add	r3, r1
 80174ac:	2200      	movs	r2, #0
 80174ae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80174b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80174ba:	9300      	str	r3, [sp, #0]
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6939      	ldr	r1, [r7, #16]
 80174c0:	68f8      	ldr	r0, [r7, #12]
 80174c2:	f002 f8f1 	bl	80196a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80174c6:	6938      	ldr	r0, [r7, #16]
 80174c8:	f7f6 fca6 	bl	800de18 <pbuf_free>
  }
  return ERR_OK;
 80174cc:	2300      	movs	r3, #0
}
 80174ce:	4618      	mov	r0, r3
 80174d0:	3718      	adds	r7, #24
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}
 80174d6:	bf00      	nop
 80174d8:	0802021c 	.word	0x0802021c
 80174dc:	08020314 	.word	0x08020314
 80174e0:	08020294 	.word	0x08020294
 80174e4:	20008b30 	.word	0x20008b30

080174e8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b084      	sub	sp, #16
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80174f0:	2300      	movs	r3, #0
 80174f2:	60fb      	str	r3, [r7, #12]
 80174f4:	e01e      	b.n	8017534 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80174f6:	4913      	ldr	r1, [pc, #76]	; (8017544 <etharp_cleanup_netif+0x5c>)
 80174f8:	68fa      	ldr	r2, [r7, #12]
 80174fa:	4613      	mov	r3, r2
 80174fc:	005b      	lsls	r3, r3, #1
 80174fe:	4413      	add	r3, r2
 8017500:	00db      	lsls	r3, r3, #3
 8017502:	440b      	add	r3, r1
 8017504:	3314      	adds	r3, #20
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801750a:	7afb      	ldrb	r3, [r7, #11]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d00e      	beq.n	801752e <etharp_cleanup_netif+0x46>
 8017510:	490c      	ldr	r1, [pc, #48]	; (8017544 <etharp_cleanup_netif+0x5c>)
 8017512:	68fa      	ldr	r2, [r7, #12]
 8017514:	4613      	mov	r3, r2
 8017516:	005b      	lsls	r3, r3, #1
 8017518:	4413      	add	r3, r2
 801751a:	00db      	lsls	r3, r3, #3
 801751c:	440b      	add	r3, r1
 801751e:	3308      	adds	r3, #8
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	687a      	ldr	r2, [r7, #4]
 8017524:	429a      	cmp	r2, r3
 8017526:	d102      	bne.n	801752e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017528:	68f8      	ldr	r0, [r7, #12]
 801752a:	f7ff fce5 	bl	8016ef8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	3301      	adds	r3, #1
 8017532:	60fb      	str	r3, [r7, #12]
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	2b09      	cmp	r3, #9
 8017538:	dddd      	ble.n	80174f6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801753a:	bf00      	nop
 801753c:	bf00      	nop
 801753e:	3710      	adds	r7, #16
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}
 8017544:	20008b30 	.word	0x20008b30

08017548 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017548:	b5b0      	push	{r4, r5, r7, lr}
 801754a:	b08a      	sub	sp, #40	; 0x28
 801754c:	af04      	add	r7, sp, #16
 801754e:	6078      	str	r0, [r7, #4]
 8017550:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017552:	683b      	ldr	r3, [r7, #0]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d107      	bne.n	8017568 <etharp_input+0x20>
 8017558:	4b3f      	ldr	r3, [pc, #252]	; (8017658 <etharp_input+0x110>)
 801755a:	f240 228a 	movw	r2, #650	; 0x28a
 801755e:	493f      	ldr	r1, [pc, #252]	; (801765c <etharp_input+0x114>)
 8017560:	483f      	ldr	r0, [pc, #252]	; (8017660 <etharp_input+0x118>)
 8017562:	f004 f9ad 	bl	801b8c0 <iprintf>
 8017566:	e074      	b.n	8017652 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	685b      	ldr	r3, [r3, #4]
 801756c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	881b      	ldrh	r3, [r3, #0]
 8017572:	b29b      	uxth	r3, r3
 8017574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017578:	d10c      	bne.n	8017594 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801757a:	693b      	ldr	r3, [r7, #16]
 801757c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801757e:	2b06      	cmp	r3, #6
 8017580:	d108      	bne.n	8017594 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017582:	693b      	ldr	r3, [r7, #16]
 8017584:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017586:	2b04      	cmp	r3, #4
 8017588:	d104      	bne.n	8017594 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801758a:	693b      	ldr	r3, [r7, #16]
 801758c:	885b      	ldrh	r3, [r3, #2]
 801758e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017590:	2b08      	cmp	r3, #8
 8017592:	d003      	beq.n	801759c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f7f6 fc3f 	bl	800de18 <pbuf_free>
    return;
 801759a:	e05a      	b.n	8017652 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801759c:	693b      	ldr	r3, [r7, #16]
 801759e:	330e      	adds	r3, #14
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80175a4:	693b      	ldr	r3, [r7, #16]
 80175a6:	3318      	adds	r3, #24
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	3304      	adds	r3, #4
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d102      	bne.n	80175bc <etharp_input+0x74>
    for_us = 0;
 80175b6:	2300      	movs	r3, #0
 80175b8:	75fb      	strb	r3, [r7, #23]
 80175ba:	e009      	b.n	80175d0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80175bc:	68ba      	ldr	r2, [r7, #8]
 80175be:	683b      	ldr	r3, [r7, #0]
 80175c0:	3304      	adds	r3, #4
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	429a      	cmp	r2, r3
 80175c6:	bf0c      	ite	eq
 80175c8:	2301      	moveq	r3, #1
 80175ca:	2300      	movne	r3, #0
 80175cc:	b2db      	uxtb	r3, r3
 80175ce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80175d0:	693b      	ldr	r3, [r7, #16]
 80175d2:	f103 0208 	add.w	r2, r3, #8
 80175d6:	7dfb      	ldrb	r3, [r7, #23]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d001      	beq.n	80175e0 <etharp_input+0x98>
 80175dc:	2301      	movs	r3, #1
 80175de:	e000      	b.n	80175e2 <etharp_input+0x9a>
 80175e0:	2302      	movs	r3, #2
 80175e2:	f107 010c 	add.w	r1, r7, #12
 80175e6:	6838      	ldr	r0, [r7, #0]
 80175e8:	f7ff fed8 	bl	801739c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80175ec:	693b      	ldr	r3, [r7, #16]
 80175ee:	88db      	ldrh	r3, [r3, #6]
 80175f0:	b29b      	uxth	r3, r3
 80175f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80175f6:	d003      	beq.n	8017600 <etharp_input+0xb8>
 80175f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80175fc:	d01e      	beq.n	801763c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80175fe:	e025      	b.n	801764c <etharp_input+0x104>
      if (for_us) {
 8017600:	7dfb      	ldrb	r3, [r7, #23]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d021      	beq.n	801764a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017606:	683b      	ldr	r3, [r7, #0]
 8017608:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801760c:	693b      	ldr	r3, [r7, #16]
 801760e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017618:	683b      	ldr	r3, [r7, #0]
 801761a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801761c:	693a      	ldr	r2, [r7, #16]
 801761e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017620:	2102      	movs	r1, #2
 8017622:	9103      	str	r1, [sp, #12]
 8017624:	f107 010c 	add.w	r1, r7, #12
 8017628:	9102      	str	r1, [sp, #8]
 801762a:	9201      	str	r2, [sp, #4]
 801762c:	9300      	str	r3, [sp, #0]
 801762e:	462b      	mov	r3, r5
 8017630:	4622      	mov	r2, r4
 8017632:	4601      	mov	r1, r0
 8017634:	6838      	ldr	r0, [r7, #0]
 8017636:	f000 faef 	bl	8017c18 <etharp_raw>
      break;
 801763a:	e006      	b.n	801764a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801763c:	f107 030c 	add.w	r3, r7, #12
 8017640:	4619      	mov	r1, r3
 8017642:	6838      	ldr	r0, [r7, #0]
 8017644:	f7fe f9fc 	bl	8015a40 <dhcp_arp_reply>
      break;
 8017648:	e000      	b.n	801764c <etharp_input+0x104>
      break;
 801764a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f7f6 fbe3 	bl	800de18 <pbuf_free>
}
 8017652:	3718      	adds	r7, #24
 8017654:	46bd      	mov	sp, r7
 8017656:	bdb0      	pop	{r4, r5, r7, pc}
 8017658:	0802021c 	.word	0x0802021c
 801765c:	0802036c 	.word	0x0802036c
 8017660:	08020294 	.word	0x08020294

08017664 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b086      	sub	sp, #24
 8017668:	af02      	add	r7, sp, #8
 801766a:	60f8      	str	r0, [r7, #12]
 801766c:	60b9      	str	r1, [r7, #8]
 801766e:	4613      	mov	r3, r2
 8017670:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017672:	79fa      	ldrb	r2, [r7, #7]
 8017674:	4944      	ldr	r1, [pc, #272]	; (8017788 <etharp_output_to_arp_index+0x124>)
 8017676:	4613      	mov	r3, r2
 8017678:	005b      	lsls	r3, r3, #1
 801767a:	4413      	add	r3, r2
 801767c:	00db      	lsls	r3, r3, #3
 801767e:	440b      	add	r3, r1
 8017680:	3314      	adds	r3, #20
 8017682:	781b      	ldrb	r3, [r3, #0]
 8017684:	2b01      	cmp	r3, #1
 8017686:	d806      	bhi.n	8017696 <etharp_output_to_arp_index+0x32>
 8017688:	4b40      	ldr	r3, [pc, #256]	; (801778c <etharp_output_to_arp_index+0x128>)
 801768a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801768e:	4940      	ldr	r1, [pc, #256]	; (8017790 <etharp_output_to_arp_index+0x12c>)
 8017690:	4840      	ldr	r0, [pc, #256]	; (8017794 <etharp_output_to_arp_index+0x130>)
 8017692:	f004 f915 	bl	801b8c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017696:	79fa      	ldrb	r2, [r7, #7]
 8017698:	493b      	ldr	r1, [pc, #236]	; (8017788 <etharp_output_to_arp_index+0x124>)
 801769a:	4613      	mov	r3, r2
 801769c:	005b      	lsls	r3, r3, #1
 801769e:	4413      	add	r3, r2
 80176a0:	00db      	lsls	r3, r3, #3
 80176a2:	440b      	add	r3, r1
 80176a4:	3314      	adds	r3, #20
 80176a6:	781b      	ldrb	r3, [r3, #0]
 80176a8:	2b02      	cmp	r3, #2
 80176aa:	d153      	bne.n	8017754 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80176ac:	79fa      	ldrb	r2, [r7, #7]
 80176ae:	4936      	ldr	r1, [pc, #216]	; (8017788 <etharp_output_to_arp_index+0x124>)
 80176b0:	4613      	mov	r3, r2
 80176b2:	005b      	lsls	r3, r3, #1
 80176b4:	4413      	add	r3, r2
 80176b6:	00db      	lsls	r3, r3, #3
 80176b8:	440b      	add	r3, r1
 80176ba:	3312      	adds	r3, #18
 80176bc:	881b      	ldrh	r3, [r3, #0]
 80176be:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80176c2:	d919      	bls.n	80176f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80176c4:	79fa      	ldrb	r2, [r7, #7]
 80176c6:	4613      	mov	r3, r2
 80176c8:	005b      	lsls	r3, r3, #1
 80176ca:	4413      	add	r3, r2
 80176cc:	00db      	lsls	r3, r3, #3
 80176ce:	4a2e      	ldr	r2, [pc, #184]	; (8017788 <etharp_output_to_arp_index+0x124>)
 80176d0:	4413      	add	r3, r2
 80176d2:	3304      	adds	r3, #4
 80176d4:	4619      	mov	r1, r3
 80176d6:	68f8      	ldr	r0, [r7, #12]
 80176d8:	f000 fb4c 	bl	8017d74 <etharp_request>
 80176dc:	4603      	mov	r3, r0
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d138      	bne.n	8017754 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80176e2:	79fa      	ldrb	r2, [r7, #7]
 80176e4:	4928      	ldr	r1, [pc, #160]	; (8017788 <etharp_output_to_arp_index+0x124>)
 80176e6:	4613      	mov	r3, r2
 80176e8:	005b      	lsls	r3, r3, #1
 80176ea:	4413      	add	r3, r2
 80176ec:	00db      	lsls	r3, r3, #3
 80176ee:	440b      	add	r3, r1
 80176f0:	3314      	adds	r3, #20
 80176f2:	2203      	movs	r2, #3
 80176f4:	701a      	strb	r2, [r3, #0]
 80176f6:	e02d      	b.n	8017754 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80176f8:	79fa      	ldrb	r2, [r7, #7]
 80176fa:	4923      	ldr	r1, [pc, #140]	; (8017788 <etharp_output_to_arp_index+0x124>)
 80176fc:	4613      	mov	r3, r2
 80176fe:	005b      	lsls	r3, r3, #1
 8017700:	4413      	add	r3, r2
 8017702:	00db      	lsls	r3, r3, #3
 8017704:	440b      	add	r3, r1
 8017706:	3312      	adds	r3, #18
 8017708:	881b      	ldrh	r3, [r3, #0]
 801770a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801770e:	d321      	bcc.n	8017754 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017710:	79fa      	ldrb	r2, [r7, #7]
 8017712:	4613      	mov	r3, r2
 8017714:	005b      	lsls	r3, r3, #1
 8017716:	4413      	add	r3, r2
 8017718:	00db      	lsls	r3, r3, #3
 801771a:	4a1b      	ldr	r2, [pc, #108]	; (8017788 <etharp_output_to_arp_index+0x124>)
 801771c:	4413      	add	r3, r2
 801771e:	1d19      	adds	r1, r3, #4
 8017720:	79fa      	ldrb	r2, [r7, #7]
 8017722:	4613      	mov	r3, r2
 8017724:	005b      	lsls	r3, r3, #1
 8017726:	4413      	add	r3, r2
 8017728:	00db      	lsls	r3, r3, #3
 801772a:	3308      	adds	r3, #8
 801772c:	4a16      	ldr	r2, [pc, #88]	; (8017788 <etharp_output_to_arp_index+0x124>)
 801772e:	4413      	add	r3, r2
 8017730:	3304      	adds	r3, #4
 8017732:	461a      	mov	r2, r3
 8017734:	68f8      	ldr	r0, [r7, #12]
 8017736:	f000 fafb 	bl	8017d30 <etharp_request_dst>
 801773a:	4603      	mov	r3, r0
 801773c:	2b00      	cmp	r3, #0
 801773e:	d109      	bne.n	8017754 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017740:	79fa      	ldrb	r2, [r7, #7]
 8017742:	4911      	ldr	r1, [pc, #68]	; (8017788 <etharp_output_to_arp_index+0x124>)
 8017744:	4613      	mov	r3, r2
 8017746:	005b      	lsls	r3, r3, #1
 8017748:	4413      	add	r3, r2
 801774a:	00db      	lsls	r3, r3, #3
 801774c:	440b      	add	r3, r1
 801774e:	3314      	adds	r3, #20
 8017750:	2203      	movs	r2, #3
 8017752:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801775a:	79fa      	ldrb	r2, [r7, #7]
 801775c:	4613      	mov	r3, r2
 801775e:	005b      	lsls	r3, r3, #1
 8017760:	4413      	add	r3, r2
 8017762:	00db      	lsls	r3, r3, #3
 8017764:	3308      	adds	r3, #8
 8017766:	4a08      	ldr	r2, [pc, #32]	; (8017788 <etharp_output_to_arp_index+0x124>)
 8017768:	4413      	add	r3, r2
 801776a:	3304      	adds	r3, #4
 801776c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017770:	9200      	str	r2, [sp, #0]
 8017772:	460a      	mov	r2, r1
 8017774:	68b9      	ldr	r1, [r7, #8]
 8017776:	68f8      	ldr	r0, [r7, #12]
 8017778:	f001 ff96 	bl	80196a8 <ethernet_output>
 801777c:	4603      	mov	r3, r0
}
 801777e:	4618      	mov	r0, r3
 8017780:	3710      	adds	r7, #16
 8017782:	46bd      	mov	sp, r7
 8017784:	bd80      	pop	{r7, pc}
 8017786:	bf00      	nop
 8017788:	20008b30 	.word	0x20008b30
 801778c:	0802021c 	.word	0x0802021c
 8017790:	0802038c 	.word	0x0802038c
 8017794:	08020294 	.word	0x08020294

08017798 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b08a      	sub	sp, #40	; 0x28
 801779c:	af02      	add	r7, sp, #8
 801779e:	60f8      	str	r0, [r7, #12]
 80177a0:	60b9      	str	r1, [r7, #8]
 80177a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d106      	bne.n	80177bc <etharp_output+0x24>
 80177ae:	4b73      	ldr	r3, [pc, #460]	; (801797c <etharp_output+0x1e4>)
 80177b0:	f240 321e 	movw	r2, #798	; 0x31e
 80177b4:	4972      	ldr	r1, [pc, #456]	; (8017980 <etharp_output+0x1e8>)
 80177b6:	4873      	ldr	r0, [pc, #460]	; (8017984 <etharp_output+0x1ec>)
 80177b8:	f004 f882 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80177bc:	68bb      	ldr	r3, [r7, #8]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d106      	bne.n	80177d0 <etharp_output+0x38>
 80177c2:	4b6e      	ldr	r3, [pc, #440]	; (801797c <etharp_output+0x1e4>)
 80177c4:	f240 321f 	movw	r2, #799	; 0x31f
 80177c8:	496f      	ldr	r1, [pc, #444]	; (8017988 <etharp_output+0x1f0>)
 80177ca:	486e      	ldr	r0, [pc, #440]	; (8017984 <etharp_output+0x1ec>)
 80177cc:	f004 f878 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d106      	bne.n	80177e4 <etharp_output+0x4c>
 80177d6:	4b69      	ldr	r3, [pc, #420]	; (801797c <etharp_output+0x1e4>)
 80177d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80177dc:	496b      	ldr	r1, [pc, #428]	; (801798c <etharp_output+0x1f4>)
 80177de:	4869      	ldr	r0, [pc, #420]	; (8017984 <etharp_output+0x1ec>)
 80177e0:	f004 f86e 	bl	801b8c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	68f9      	ldr	r1, [r7, #12]
 80177ea:	4618      	mov	r0, r3
 80177ec:	f000 ff16 	bl	801861c <ip4_addr_isbroadcast_u32>
 80177f0:	4603      	mov	r3, r0
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d002      	beq.n	80177fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80177f6:	4b66      	ldr	r3, [pc, #408]	; (8017990 <etharp_output+0x1f8>)
 80177f8:	61fb      	str	r3, [r7, #28]
 80177fa:	e0af      	b.n	801795c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017804:	2be0      	cmp	r3, #224	; 0xe0
 8017806:	d118      	bne.n	801783a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017808:	2301      	movs	r3, #1
 801780a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801780c:	2300      	movs	r3, #0
 801780e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017810:	235e      	movs	r3, #94	; 0x5e
 8017812:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	3301      	adds	r3, #1
 8017818:	781b      	ldrb	r3, [r3, #0]
 801781a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801781e:	b2db      	uxtb	r3, r3
 8017820:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	3302      	adds	r3, #2
 8017826:	781b      	ldrb	r3, [r3, #0]
 8017828:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	3303      	adds	r3, #3
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017832:	f107 0310 	add.w	r3, r7, #16
 8017836:	61fb      	str	r3, [r7, #28]
 8017838:	e090      	b.n	801795c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	681a      	ldr	r2, [r3, #0]
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	3304      	adds	r3, #4
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	405a      	eors	r2, r3
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	3308      	adds	r3, #8
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	4013      	ands	r3, r2
 801784e:	2b00      	cmp	r3, #0
 8017850:	d012      	beq.n	8017878 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017858:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801785c:	4293      	cmp	r3, r2
 801785e:	d00b      	beq.n	8017878 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	330c      	adds	r3, #12
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d003      	beq.n	8017872 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	330c      	adds	r3, #12
 801786e:	61bb      	str	r3, [r7, #24]
 8017870:	e002      	b.n	8017878 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017872:	f06f 0303 	mvn.w	r3, #3
 8017876:	e07d      	b.n	8017974 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017878:	4b46      	ldr	r3, [pc, #280]	; (8017994 <etharp_output+0x1fc>)
 801787a:	781b      	ldrb	r3, [r3, #0]
 801787c:	4619      	mov	r1, r3
 801787e:	4a46      	ldr	r2, [pc, #280]	; (8017998 <etharp_output+0x200>)
 8017880:	460b      	mov	r3, r1
 8017882:	005b      	lsls	r3, r3, #1
 8017884:	440b      	add	r3, r1
 8017886:	00db      	lsls	r3, r3, #3
 8017888:	4413      	add	r3, r2
 801788a:	3314      	adds	r3, #20
 801788c:	781b      	ldrb	r3, [r3, #0]
 801788e:	2b01      	cmp	r3, #1
 8017890:	d925      	bls.n	80178de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017892:	4b40      	ldr	r3, [pc, #256]	; (8017994 <etharp_output+0x1fc>)
 8017894:	781b      	ldrb	r3, [r3, #0]
 8017896:	4619      	mov	r1, r3
 8017898:	4a3f      	ldr	r2, [pc, #252]	; (8017998 <etharp_output+0x200>)
 801789a:	460b      	mov	r3, r1
 801789c:	005b      	lsls	r3, r3, #1
 801789e:	440b      	add	r3, r1
 80178a0:	00db      	lsls	r3, r3, #3
 80178a2:	4413      	add	r3, r2
 80178a4:	3308      	adds	r3, #8
 80178a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80178a8:	68fa      	ldr	r2, [r7, #12]
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d117      	bne.n	80178de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80178ae:	69bb      	ldr	r3, [r7, #24]
 80178b0:	681a      	ldr	r2, [r3, #0]
 80178b2:	4b38      	ldr	r3, [pc, #224]	; (8017994 <etharp_output+0x1fc>)
 80178b4:	781b      	ldrb	r3, [r3, #0]
 80178b6:	4618      	mov	r0, r3
 80178b8:	4937      	ldr	r1, [pc, #220]	; (8017998 <etharp_output+0x200>)
 80178ba:	4603      	mov	r3, r0
 80178bc:	005b      	lsls	r3, r3, #1
 80178be:	4403      	add	r3, r0
 80178c0:	00db      	lsls	r3, r3, #3
 80178c2:	440b      	add	r3, r1
 80178c4:	3304      	adds	r3, #4
 80178c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80178c8:	429a      	cmp	r2, r3
 80178ca:	d108      	bne.n	80178de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80178cc:	4b31      	ldr	r3, [pc, #196]	; (8017994 <etharp_output+0x1fc>)
 80178ce:	781b      	ldrb	r3, [r3, #0]
 80178d0:	461a      	mov	r2, r3
 80178d2:	68b9      	ldr	r1, [r7, #8]
 80178d4:	68f8      	ldr	r0, [r7, #12]
 80178d6:	f7ff fec5 	bl	8017664 <etharp_output_to_arp_index>
 80178da:	4603      	mov	r3, r0
 80178dc:	e04a      	b.n	8017974 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80178de:	2300      	movs	r3, #0
 80178e0:	75fb      	strb	r3, [r7, #23]
 80178e2:	e031      	b.n	8017948 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80178e4:	7dfa      	ldrb	r2, [r7, #23]
 80178e6:	492c      	ldr	r1, [pc, #176]	; (8017998 <etharp_output+0x200>)
 80178e8:	4613      	mov	r3, r2
 80178ea:	005b      	lsls	r3, r3, #1
 80178ec:	4413      	add	r3, r2
 80178ee:	00db      	lsls	r3, r3, #3
 80178f0:	440b      	add	r3, r1
 80178f2:	3314      	adds	r3, #20
 80178f4:	781b      	ldrb	r3, [r3, #0]
 80178f6:	2b01      	cmp	r3, #1
 80178f8:	d923      	bls.n	8017942 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80178fa:	7dfa      	ldrb	r2, [r7, #23]
 80178fc:	4926      	ldr	r1, [pc, #152]	; (8017998 <etharp_output+0x200>)
 80178fe:	4613      	mov	r3, r2
 8017900:	005b      	lsls	r3, r3, #1
 8017902:	4413      	add	r3, r2
 8017904:	00db      	lsls	r3, r3, #3
 8017906:	440b      	add	r3, r1
 8017908:	3308      	adds	r3, #8
 801790a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801790c:	68fa      	ldr	r2, [r7, #12]
 801790e:	429a      	cmp	r2, r3
 8017910:	d117      	bne.n	8017942 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017912:	69bb      	ldr	r3, [r7, #24]
 8017914:	6819      	ldr	r1, [r3, #0]
 8017916:	7dfa      	ldrb	r2, [r7, #23]
 8017918:	481f      	ldr	r0, [pc, #124]	; (8017998 <etharp_output+0x200>)
 801791a:	4613      	mov	r3, r2
 801791c:	005b      	lsls	r3, r3, #1
 801791e:	4413      	add	r3, r2
 8017920:	00db      	lsls	r3, r3, #3
 8017922:	4403      	add	r3, r0
 8017924:	3304      	adds	r3, #4
 8017926:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017928:	4299      	cmp	r1, r3
 801792a:	d10a      	bne.n	8017942 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801792c:	4a19      	ldr	r2, [pc, #100]	; (8017994 <etharp_output+0x1fc>)
 801792e:	7dfb      	ldrb	r3, [r7, #23]
 8017930:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017932:	7dfb      	ldrb	r3, [r7, #23]
 8017934:	461a      	mov	r2, r3
 8017936:	68b9      	ldr	r1, [r7, #8]
 8017938:	68f8      	ldr	r0, [r7, #12]
 801793a:	f7ff fe93 	bl	8017664 <etharp_output_to_arp_index>
 801793e:	4603      	mov	r3, r0
 8017940:	e018      	b.n	8017974 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017942:	7dfb      	ldrb	r3, [r7, #23]
 8017944:	3301      	adds	r3, #1
 8017946:	75fb      	strb	r3, [r7, #23]
 8017948:	7dfb      	ldrb	r3, [r7, #23]
 801794a:	2b09      	cmp	r3, #9
 801794c:	d9ca      	bls.n	80178e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801794e:	68ba      	ldr	r2, [r7, #8]
 8017950:	69b9      	ldr	r1, [r7, #24]
 8017952:	68f8      	ldr	r0, [r7, #12]
 8017954:	f000 f822 	bl	801799c <etharp_query>
 8017958:	4603      	mov	r3, r0
 801795a:	e00b      	b.n	8017974 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017966:	9300      	str	r3, [sp, #0]
 8017968:	69fb      	ldr	r3, [r7, #28]
 801796a:	68b9      	ldr	r1, [r7, #8]
 801796c:	68f8      	ldr	r0, [r7, #12]
 801796e:	f001 fe9b 	bl	80196a8 <ethernet_output>
 8017972:	4603      	mov	r3, r0
}
 8017974:	4618      	mov	r0, r3
 8017976:	3720      	adds	r7, #32
 8017978:	46bd      	mov	sp, r7
 801797a:	bd80      	pop	{r7, pc}
 801797c:	0802021c 	.word	0x0802021c
 8017980:	0802036c 	.word	0x0802036c
 8017984:	08020294 	.word	0x08020294
 8017988:	080203bc 	.word	0x080203bc
 801798c:	0802035c 	.word	0x0802035c
 8017990:	08020b40 	.word	0x08020b40
 8017994:	20008c20 	.word	0x20008c20
 8017998:	20008b30 	.word	0x20008b30

0801799c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b08c      	sub	sp, #48	; 0x30
 80179a0:	af02      	add	r7, sp, #8
 80179a2:	60f8      	str	r0, [r7, #12]
 80179a4:	60b9      	str	r1, [r7, #8]
 80179a6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	332a      	adds	r3, #42	; 0x2a
 80179ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80179ae:	23ff      	movs	r3, #255	; 0xff
 80179b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80179b4:	2300      	movs	r3, #0
 80179b6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80179b8:	68bb      	ldr	r3, [r7, #8]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	68f9      	ldr	r1, [r7, #12]
 80179be:	4618      	mov	r0, r3
 80179c0:	f000 fe2c 	bl	801861c <ip4_addr_isbroadcast_u32>
 80179c4:	4603      	mov	r3, r0
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d10c      	bne.n	80179e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80179ca:	68bb      	ldr	r3, [r7, #8]
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80179d2:	2be0      	cmp	r3, #224	; 0xe0
 80179d4:	d006      	beq.n	80179e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80179d6:	68bb      	ldr	r3, [r7, #8]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d003      	beq.n	80179e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80179dc:	68bb      	ldr	r3, [r7, #8]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d102      	bne.n	80179ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80179e4:	f06f 030f 	mvn.w	r3, #15
 80179e8:	e101      	b.n	8017bee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80179ea:	68fa      	ldr	r2, [r7, #12]
 80179ec:	2101      	movs	r1, #1
 80179ee:	68b8      	ldr	r0, [r7, #8]
 80179f0:	f7ff fb5c 	bl	80170ac <etharp_find_entry>
 80179f4:	4603      	mov	r3, r0
 80179f6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80179f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	da02      	bge.n	8017a06 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017a00:	8a7b      	ldrh	r3, [r7, #18]
 8017a02:	b25b      	sxtb	r3, r3
 8017a04:	e0f3      	b.n	8017bee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017a06:	8a7b      	ldrh	r3, [r7, #18]
 8017a08:	2b7e      	cmp	r3, #126	; 0x7e
 8017a0a:	d906      	bls.n	8017a1a <etharp_query+0x7e>
 8017a0c:	4b7a      	ldr	r3, [pc, #488]	; (8017bf8 <etharp_query+0x25c>)
 8017a0e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017a12:	497a      	ldr	r1, [pc, #488]	; (8017bfc <etharp_query+0x260>)
 8017a14:	487a      	ldr	r0, [pc, #488]	; (8017c00 <etharp_query+0x264>)
 8017a16:	f003 ff53 	bl	801b8c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017a1a:	8a7b      	ldrh	r3, [r7, #18]
 8017a1c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017a1e:	7c7a      	ldrb	r2, [r7, #17]
 8017a20:	4978      	ldr	r1, [pc, #480]	; (8017c04 <etharp_query+0x268>)
 8017a22:	4613      	mov	r3, r2
 8017a24:	005b      	lsls	r3, r3, #1
 8017a26:	4413      	add	r3, r2
 8017a28:	00db      	lsls	r3, r3, #3
 8017a2a:	440b      	add	r3, r1
 8017a2c:	3314      	adds	r3, #20
 8017a2e:	781b      	ldrb	r3, [r3, #0]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d115      	bne.n	8017a60 <etharp_query+0xc4>
    is_new_entry = 1;
 8017a34:	2301      	movs	r3, #1
 8017a36:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017a38:	7c7a      	ldrb	r2, [r7, #17]
 8017a3a:	4972      	ldr	r1, [pc, #456]	; (8017c04 <etharp_query+0x268>)
 8017a3c:	4613      	mov	r3, r2
 8017a3e:	005b      	lsls	r3, r3, #1
 8017a40:	4413      	add	r3, r2
 8017a42:	00db      	lsls	r3, r3, #3
 8017a44:	440b      	add	r3, r1
 8017a46:	3314      	adds	r3, #20
 8017a48:	2201      	movs	r2, #1
 8017a4a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017a4c:	7c7a      	ldrb	r2, [r7, #17]
 8017a4e:	496d      	ldr	r1, [pc, #436]	; (8017c04 <etharp_query+0x268>)
 8017a50:	4613      	mov	r3, r2
 8017a52:	005b      	lsls	r3, r3, #1
 8017a54:	4413      	add	r3, r2
 8017a56:	00db      	lsls	r3, r3, #3
 8017a58:	440b      	add	r3, r1
 8017a5a:	3308      	adds	r3, #8
 8017a5c:	68fa      	ldr	r2, [r7, #12]
 8017a5e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017a60:	7c7a      	ldrb	r2, [r7, #17]
 8017a62:	4968      	ldr	r1, [pc, #416]	; (8017c04 <etharp_query+0x268>)
 8017a64:	4613      	mov	r3, r2
 8017a66:	005b      	lsls	r3, r3, #1
 8017a68:	4413      	add	r3, r2
 8017a6a:	00db      	lsls	r3, r3, #3
 8017a6c:	440b      	add	r3, r1
 8017a6e:	3314      	adds	r3, #20
 8017a70:	781b      	ldrb	r3, [r3, #0]
 8017a72:	2b01      	cmp	r3, #1
 8017a74:	d011      	beq.n	8017a9a <etharp_query+0xfe>
 8017a76:	7c7a      	ldrb	r2, [r7, #17]
 8017a78:	4962      	ldr	r1, [pc, #392]	; (8017c04 <etharp_query+0x268>)
 8017a7a:	4613      	mov	r3, r2
 8017a7c:	005b      	lsls	r3, r3, #1
 8017a7e:	4413      	add	r3, r2
 8017a80:	00db      	lsls	r3, r3, #3
 8017a82:	440b      	add	r3, r1
 8017a84:	3314      	adds	r3, #20
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	2b01      	cmp	r3, #1
 8017a8a:	d806      	bhi.n	8017a9a <etharp_query+0xfe>
 8017a8c:	4b5a      	ldr	r3, [pc, #360]	; (8017bf8 <etharp_query+0x25c>)
 8017a8e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017a92:	495d      	ldr	r1, [pc, #372]	; (8017c08 <etharp_query+0x26c>)
 8017a94:	485a      	ldr	r0, [pc, #360]	; (8017c00 <etharp_query+0x264>)
 8017a96:	f003 ff13 	bl	801b8c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017a9a:	6a3b      	ldr	r3, [r7, #32]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d102      	bne.n	8017aa6 <etharp_query+0x10a>
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d10c      	bne.n	8017ac0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017aa6:	68b9      	ldr	r1, [r7, #8]
 8017aa8:	68f8      	ldr	r0, [r7, #12]
 8017aaa:	f000 f963 	bl	8017d74 <etharp_request>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d102      	bne.n	8017ac0 <etharp_query+0x124>
      return result;
 8017aba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017abe:	e096      	b.n	8017bee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d106      	bne.n	8017ad4 <etharp_query+0x138>
 8017ac6:	4b4c      	ldr	r3, [pc, #304]	; (8017bf8 <etharp_query+0x25c>)
 8017ac8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017acc:	494f      	ldr	r1, [pc, #316]	; (8017c0c <etharp_query+0x270>)
 8017ace:	484c      	ldr	r0, [pc, #304]	; (8017c00 <etharp_query+0x264>)
 8017ad0:	f003 fef6 	bl	801b8c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017ad4:	7c7a      	ldrb	r2, [r7, #17]
 8017ad6:	494b      	ldr	r1, [pc, #300]	; (8017c04 <etharp_query+0x268>)
 8017ad8:	4613      	mov	r3, r2
 8017ada:	005b      	lsls	r3, r3, #1
 8017adc:	4413      	add	r3, r2
 8017ade:	00db      	lsls	r3, r3, #3
 8017ae0:	440b      	add	r3, r1
 8017ae2:	3314      	adds	r3, #20
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	2b01      	cmp	r3, #1
 8017ae8:	d917      	bls.n	8017b1a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017aea:	4a49      	ldr	r2, [pc, #292]	; (8017c10 <etharp_query+0x274>)
 8017aec:	7c7b      	ldrb	r3, [r7, #17]
 8017aee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017af0:	7c7a      	ldrb	r2, [r7, #17]
 8017af2:	4613      	mov	r3, r2
 8017af4:	005b      	lsls	r3, r3, #1
 8017af6:	4413      	add	r3, r2
 8017af8:	00db      	lsls	r3, r3, #3
 8017afa:	3308      	adds	r3, #8
 8017afc:	4a41      	ldr	r2, [pc, #260]	; (8017c04 <etharp_query+0x268>)
 8017afe:	4413      	add	r3, r2
 8017b00:	3304      	adds	r3, #4
 8017b02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017b06:	9200      	str	r2, [sp, #0]
 8017b08:	697a      	ldr	r2, [r7, #20]
 8017b0a:	6879      	ldr	r1, [r7, #4]
 8017b0c:	68f8      	ldr	r0, [r7, #12]
 8017b0e:	f001 fdcb 	bl	80196a8 <ethernet_output>
 8017b12:	4603      	mov	r3, r0
 8017b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017b18:	e067      	b.n	8017bea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017b1a:	7c7a      	ldrb	r2, [r7, #17]
 8017b1c:	4939      	ldr	r1, [pc, #228]	; (8017c04 <etharp_query+0x268>)
 8017b1e:	4613      	mov	r3, r2
 8017b20:	005b      	lsls	r3, r3, #1
 8017b22:	4413      	add	r3, r2
 8017b24:	00db      	lsls	r3, r3, #3
 8017b26:	440b      	add	r3, r1
 8017b28:	3314      	adds	r3, #20
 8017b2a:	781b      	ldrb	r3, [r3, #0]
 8017b2c:	2b01      	cmp	r3, #1
 8017b2e:	d15c      	bne.n	8017bea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017b30:	2300      	movs	r3, #0
 8017b32:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017b38:	e01c      	b.n	8017b74 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017b3a:	69fb      	ldr	r3, [r7, #28]
 8017b3c:	895a      	ldrh	r2, [r3, #10]
 8017b3e:	69fb      	ldr	r3, [r7, #28]
 8017b40:	891b      	ldrh	r3, [r3, #8]
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d10a      	bne.n	8017b5c <etharp_query+0x1c0>
 8017b46:	69fb      	ldr	r3, [r7, #28]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d006      	beq.n	8017b5c <etharp_query+0x1c0>
 8017b4e:	4b2a      	ldr	r3, [pc, #168]	; (8017bf8 <etharp_query+0x25c>)
 8017b50:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017b54:	492f      	ldr	r1, [pc, #188]	; (8017c14 <etharp_query+0x278>)
 8017b56:	482a      	ldr	r0, [pc, #168]	; (8017c00 <etharp_query+0x264>)
 8017b58:	f003 feb2 	bl	801b8c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017b5c:	69fb      	ldr	r3, [r7, #28]
 8017b5e:	7b1b      	ldrb	r3, [r3, #12]
 8017b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d002      	beq.n	8017b6e <etharp_query+0x1d2>
        copy_needed = 1;
 8017b68:	2301      	movs	r3, #1
 8017b6a:	61bb      	str	r3, [r7, #24]
        break;
 8017b6c:	e005      	b.n	8017b7a <etharp_query+0x1de>
      }
      p = p->next;
 8017b6e:	69fb      	ldr	r3, [r7, #28]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017b74:	69fb      	ldr	r3, [r7, #28]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d1df      	bne.n	8017b3a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017b7a:	69bb      	ldr	r3, [r7, #24]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d007      	beq.n	8017b90 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017b80:	687a      	ldr	r2, [r7, #4]
 8017b82:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017b86:	200e      	movs	r0, #14
 8017b88:	f7f6 fbbe 	bl	800e308 <pbuf_clone>
 8017b8c:	61f8      	str	r0, [r7, #28]
 8017b8e:	e004      	b.n	8017b9a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017b94:	69f8      	ldr	r0, [r7, #28]
 8017b96:	f7f6 f9e5 	bl	800df64 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017b9a:	69fb      	ldr	r3, [r7, #28]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d021      	beq.n	8017be4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017ba0:	7c7a      	ldrb	r2, [r7, #17]
 8017ba2:	4918      	ldr	r1, [pc, #96]	; (8017c04 <etharp_query+0x268>)
 8017ba4:	4613      	mov	r3, r2
 8017ba6:	005b      	lsls	r3, r3, #1
 8017ba8:	4413      	add	r3, r2
 8017baa:	00db      	lsls	r3, r3, #3
 8017bac:	440b      	add	r3, r1
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d00a      	beq.n	8017bca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017bb4:	7c7a      	ldrb	r2, [r7, #17]
 8017bb6:	4913      	ldr	r1, [pc, #76]	; (8017c04 <etharp_query+0x268>)
 8017bb8:	4613      	mov	r3, r2
 8017bba:	005b      	lsls	r3, r3, #1
 8017bbc:	4413      	add	r3, r2
 8017bbe:	00db      	lsls	r3, r3, #3
 8017bc0:	440b      	add	r3, r1
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	f7f6 f927 	bl	800de18 <pbuf_free>
      }
      arp_table[i].q = p;
 8017bca:	7c7a      	ldrb	r2, [r7, #17]
 8017bcc:	490d      	ldr	r1, [pc, #52]	; (8017c04 <etharp_query+0x268>)
 8017bce:	4613      	mov	r3, r2
 8017bd0:	005b      	lsls	r3, r3, #1
 8017bd2:	4413      	add	r3, r2
 8017bd4:	00db      	lsls	r3, r3, #3
 8017bd6:	440b      	add	r3, r1
 8017bd8:	69fa      	ldr	r2, [r7, #28]
 8017bda:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017bdc:	2300      	movs	r3, #0
 8017bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017be2:	e002      	b.n	8017bea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017be4:	23ff      	movs	r3, #255	; 0xff
 8017be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017bea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017bee:	4618      	mov	r0, r3
 8017bf0:	3728      	adds	r7, #40	; 0x28
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd80      	pop	{r7, pc}
 8017bf6:	bf00      	nop
 8017bf8:	0802021c 	.word	0x0802021c
 8017bfc:	080203c8 	.word	0x080203c8
 8017c00:	08020294 	.word	0x08020294
 8017c04:	20008b30 	.word	0x20008b30
 8017c08:	080203d8 	.word	0x080203d8
 8017c0c:	080203bc 	.word	0x080203bc
 8017c10:	20008c20 	.word	0x20008c20
 8017c14:	08020400 	.word	0x08020400

08017c18 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b08a      	sub	sp, #40	; 0x28
 8017c1c:	af02      	add	r7, sp, #8
 8017c1e:	60f8      	str	r0, [r7, #12]
 8017c20:	60b9      	str	r1, [r7, #8]
 8017c22:	607a      	str	r2, [r7, #4]
 8017c24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017c26:	2300      	movs	r3, #0
 8017c28:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d106      	bne.n	8017c3e <etharp_raw+0x26>
 8017c30:	4b3a      	ldr	r3, [pc, #232]	; (8017d1c <etharp_raw+0x104>)
 8017c32:	f240 4257 	movw	r2, #1111	; 0x457
 8017c36:	493a      	ldr	r1, [pc, #232]	; (8017d20 <etharp_raw+0x108>)
 8017c38:	483a      	ldr	r0, [pc, #232]	; (8017d24 <etharp_raw+0x10c>)
 8017c3a:	f003 fe41 	bl	801b8c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017c3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c42:	211c      	movs	r1, #28
 8017c44:	200e      	movs	r0, #14
 8017c46:	f7f5 fdd1 	bl	800d7ec <pbuf_alloc>
 8017c4a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017c4c:	69bb      	ldr	r3, [r7, #24]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d102      	bne.n	8017c58 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017c56:	e05d      	b.n	8017d14 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017c58:	69bb      	ldr	r3, [r7, #24]
 8017c5a:	895b      	ldrh	r3, [r3, #10]
 8017c5c:	2b1b      	cmp	r3, #27
 8017c5e:	d806      	bhi.n	8017c6e <etharp_raw+0x56>
 8017c60:	4b2e      	ldr	r3, [pc, #184]	; (8017d1c <etharp_raw+0x104>)
 8017c62:	f240 4262 	movw	r2, #1122	; 0x462
 8017c66:	4930      	ldr	r1, [pc, #192]	; (8017d28 <etharp_raw+0x110>)
 8017c68:	482e      	ldr	r0, [pc, #184]	; (8017d24 <etharp_raw+0x10c>)
 8017c6a:	f003 fe29 	bl	801b8c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017c6e:	69bb      	ldr	r3, [r7, #24]
 8017c70:	685b      	ldr	r3, [r3, #4]
 8017c72:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017c74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017c76:	4618      	mov	r0, r3
 8017c78:	f7f4 fce4 	bl	800c644 <lwip_htons>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	461a      	mov	r2, r3
 8017c80:	697b      	ldr	r3, [r7, #20]
 8017c82:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c8a:	2b06      	cmp	r3, #6
 8017c8c:	d006      	beq.n	8017c9c <etharp_raw+0x84>
 8017c8e:	4b23      	ldr	r3, [pc, #140]	; (8017d1c <etharp_raw+0x104>)
 8017c90:	f240 4269 	movw	r2, #1129	; 0x469
 8017c94:	4925      	ldr	r1, [pc, #148]	; (8017d2c <etharp_raw+0x114>)
 8017c96:	4823      	ldr	r0, [pc, #140]	; (8017d24 <etharp_raw+0x10c>)
 8017c98:	f003 fe12 	bl	801b8c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017c9c:	697b      	ldr	r3, [r7, #20]
 8017c9e:	3308      	adds	r3, #8
 8017ca0:	2206      	movs	r2, #6
 8017ca2:	6839      	ldr	r1, [r7, #0]
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f003 fdf5 	bl	801b894 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017caa:	697b      	ldr	r3, [r7, #20]
 8017cac:	3312      	adds	r3, #18
 8017cae:	2206      	movs	r2, #6
 8017cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f003 fdee 	bl	801b894 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017cb8:	697b      	ldr	r3, [r7, #20]
 8017cba:	330e      	adds	r3, #14
 8017cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017cbe:	6812      	ldr	r2, [r2, #0]
 8017cc0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017cc2:	697b      	ldr	r3, [r7, #20]
 8017cc4:	3318      	adds	r3, #24
 8017cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cc8:	6812      	ldr	r2, [r2, #0]
 8017cca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017ccc:	697b      	ldr	r3, [r7, #20]
 8017cce:	2200      	movs	r2, #0
 8017cd0:	701a      	strb	r2, [r3, #0]
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	f042 0201 	orr.w	r2, r2, #1
 8017cd8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017cda:	697b      	ldr	r3, [r7, #20]
 8017cdc:	2200      	movs	r2, #0
 8017cde:	f042 0208 	orr.w	r2, r2, #8
 8017ce2:	709a      	strb	r2, [r3, #2]
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017ce8:	697b      	ldr	r3, [r7, #20]
 8017cea:	2206      	movs	r2, #6
 8017cec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	2204      	movs	r2, #4
 8017cf2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017cf4:	f640 0306 	movw	r3, #2054	; 0x806
 8017cf8:	9300      	str	r3, [sp, #0]
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	68ba      	ldr	r2, [r7, #8]
 8017cfe:	69b9      	ldr	r1, [r7, #24]
 8017d00:	68f8      	ldr	r0, [r7, #12]
 8017d02:	f001 fcd1 	bl	80196a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017d06:	69b8      	ldr	r0, [r7, #24]
 8017d08:	f7f6 f886 	bl	800de18 <pbuf_free>
  p = NULL;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017d10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3720      	adds	r7, #32
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}
 8017d1c:	0802021c 	.word	0x0802021c
 8017d20:	0802036c 	.word	0x0802036c
 8017d24:	08020294 	.word	0x08020294
 8017d28:	0802041c 	.word	0x0802041c
 8017d2c:	08020450 	.word	0x08020450

08017d30 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b088      	sub	sp, #32
 8017d34:	af04      	add	r7, sp, #16
 8017d36:	60f8      	str	r0, [r7, #12]
 8017d38:	60b9      	str	r1, [r7, #8]
 8017d3a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017d4c:	2201      	movs	r2, #1
 8017d4e:	9203      	str	r2, [sp, #12]
 8017d50:	68ba      	ldr	r2, [r7, #8]
 8017d52:	9202      	str	r2, [sp, #8]
 8017d54:	4a06      	ldr	r2, [pc, #24]	; (8017d70 <etharp_request_dst+0x40>)
 8017d56:	9201      	str	r2, [sp, #4]
 8017d58:	9300      	str	r3, [sp, #0]
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	687a      	ldr	r2, [r7, #4]
 8017d5e:	68f8      	ldr	r0, [r7, #12]
 8017d60:	f7ff ff5a 	bl	8017c18 <etharp_raw>
 8017d64:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017d66:	4618      	mov	r0, r3
 8017d68:	3710      	adds	r7, #16
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bd80      	pop	{r7, pc}
 8017d6e:	bf00      	nop
 8017d70:	08020b48 	.word	0x08020b48

08017d74 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b082      	sub	sp, #8
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	6078      	str	r0, [r7, #4]
 8017d7c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017d7e:	4a05      	ldr	r2, [pc, #20]	; (8017d94 <etharp_request+0x20>)
 8017d80:	6839      	ldr	r1, [r7, #0]
 8017d82:	6878      	ldr	r0, [r7, #4]
 8017d84:	f7ff ffd4 	bl	8017d30 <etharp_request_dst>
 8017d88:	4603      	mov	r3, r0
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	3708      	adds	r7, #8
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}
 8017d92:	bf00      	nop
 8017d94:	08020b40 	.word	0x08020b40

08017d98 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b08e      	sub	sp, #56	; 0x38
 8017d9c:	af04      	add	r7, sp, #16
 8017d9e:	6078      	str	r0, [r7, #4]
 8017da0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017da2:	4b79      	ldr	r3, [pc, #484]	; (8017f88 <icmp_input+0x1f0>)
 8017da4:	689b      	ldr	r3, [r3, #8]
 8017da6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017daa:	781b      	ldrb	r3, [r3, #0]
 8017dac:	f003 030f 	and.w	r3, r3, #15
 8017db0:	b2db      	uxtb	r3, r3
 8017db2:	009b      	lsls	r3, r3, #2
 8017db4:	b2db      	uxtb	r3, r3
 8017db6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017db8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017dba:	2b13      	cmp	r3, #19
 8017dbc:	f240 80cd 	bls.w	8017f5a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	895b      	ldrh	r3, [r3, #10]
 8017dc4:	2b03      	cmp	r3, #3
 8017dc6:	f240 80ca 	bls.w	8017f5e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	685b      	ldr	r3, [r3, #4]
 8017dce:	781b      	ldrb	r3, [r3, #0]
 8017dd0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017dd4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	f000 80b7 	beq.w	8017f4c <icmp_input+0x1b4>
 8017dde:	2b08      	cmp	r3, #8
 8017de0:	f040 80b7 	bne.w	8017f52 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017de4:	4b69      	ldr	r3, [pc, #420]	; (8017f8c <icmp_input+0x1f4>)
 8017de6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017de8:	4b67      	ldr	r3, [pc, #412]	; (8017f88 <icmp_input+0x1f0>)
 8017dea:	695b      	ldr	r3, [r3, #20]
 8017dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017df0:	2be0      	cmp	r3, #224	; 0xe0
 8017df2:	f000 80bb 	beq.w	8017f6c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017df6:	4b64      	ldr	r3, [pc, #400]	; (8017f88 <icmp_input+0x1f0>)
 8017df8:	695b      	ldr	r3, [r3, #20]
 8017dfa:	4a63      	ldr	r2, [pc, #396]	; (8017f88 <icmp_input+0x1f0>)
 8017dfc:	6812      	ldr	r2, [r2, #0]
 8017dfe:	4611      	mov	r1, r2
 8017e00:	4618      	mov	r0, r3
 8017e02:	f000 fc0b 	bl	801861c <ip4_addr_isbroadcast_u32>
 8017e06:	4603      	mov	r3, r0
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	f040 80b1 	bne.w	8017f70 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	891b      	ldrh	r3, [r3, #8]
 8017e12:	2b07      	cmp	r3, #7
 8017e14:	f240 80a5 	bls.w	8017f62 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017e18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e1a:	330e      	adds	r3, #14
 8017e1c:	4619      	mov	r1, r3
 8017e1e:	6878      	ldr	r0, [r7, #4]
 8017e20:	f7f5 ff32 	bl	800dc88 <pbuf_add_header>
 8017e24:	4603      	mov	r3, r0
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d04b      	beq.n	8017ec2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	891a      	ldrh	r2, [r3, #8]
 8017e2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e30:	4413      	add	r3, r2
 8017e32:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	891b      	ldrh	r3, [r3, #8]
 8017e38:	8b7a      	ldrh	r2, [r7, #26]
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	f0c0 809a 	bcc.w	8017f74 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017e40:	8b7b      	ldrh	r3, [r7, #26]
 8017e42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e46:	4619      	mov	r1, r3
 8017e48:	200e      	movs	r0, #14
 8017e4a:	f7f5 fccf 	bl	800d7ec <pbuf_alloc>
 8017e4e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017e50:	697b      	ldr	r3, [r7, #20]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	f000 8090 	beq.w	8017f78 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017e58:	697b      	ldr	r3, [r7, #20]
 8017e5a:	895b      	ldrh	r3, [r3, #10]
 8017e5c:	461a      	mov	r2, r3
 8017e5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e60:	3308      	adds	r3, #8
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d203      	bcs.n	8017e6e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017e66:	6978      	ldr	r0, [r7, #20]
 8017e68:	f7f5 ffd6 	bl	800de18 <pbuf_free>
          goto icmperr;
 8017e6c:	e085      	b.n	8017f7a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017e6e:	697b      	ldr	r3, [r7, #20]
 8017e70:	685b      	ldr	r3, [r3, #4]
 8017e72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e76:	4618      	mov	r0, r3
 8017e78:	f003 fd0c 	bl	801b894 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e7e:	4619      	mov	r1, r3
 8017e80:	6978      	ldr	r0, [r7, #20]
 8017e82:	f7f5 ff11 	bl	800dca8 <pbuf_remove_header>
 8017e86:	4603      	mov	r3, r0
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d009      	beq.n	8017ea0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017e8c:	4b40      	ldr	r3, [pc, #256]	; (8017f90 <icmp_input+0x1f8>)
 8017e8e:	22b6      	movs	r2, #182	; 0xb6
 8017e90:	4940      	ldr	r1, [pc, #256]	; (8017f94 <icmp_input+0x1fc>)
 8017e92:	4841      	ldr	r0, [pc, #260]	; (8017f98 <icmp_input+0x200>)
 8017e94:	f003 fd14 	bl	801b8c0 <iprintf>
          pbuf_free(r);
 8017e98:	6978      	ldr	r0, [r7, #20]
 8017e9a:	f7f5 ffbd 	bl	800de18 <pbuf_free>
          goto icmperr;
 8017e9e:	e06c      	b.n	8017f7a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017ea0:	6879      	ldr	r1, [r7, #4]
 8017ea2:	6978      	ldr	r0, [r7, #20]
 8017ea4:	f7f6 f8ec 	bl	800e080 <pbuf_copy>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d003      	beq.n	8017eb6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017eae:	6978      	ldr	r0, [r7, #20]
 8017eb0:	f7f5 ffb2 	bl	800de18 <pbuf_free>
          goto icmperr;
 8017eb4:	e061      	b.n	8017f7a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017eb6:	6878      	ldr	r0, [r7, #4]
 8017eb8:	f7f5 ffae 	bl	800de18 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017ebc:	697b      	ldr	r3, [r7, #20]
 8017ebe:	607b      	str	r3, [r7, #4]
 8017ec0:	e00f      	b.n	8017ee2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017ec2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ec4:	330e      	adds	r3, #14
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	6878      	ldr	r0, [r7, #4]
 8017eca:	f7f5 feed 	bl	800dca8 <pbuf_remove_header>
 8017ece:	4603      	mov	r3, r0
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d006      	beq.n	8017ee2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017ed4:	4b2e      	ldr	r3, [pc, #184]	; (8017f90 <icmp_input+0x1f8>)
 8017ed6:	22c7      	movs	r2, #199	; 0xc7
 8017ed8:	4930      	ldr	r1, [pc, #192]	; (8017f9c <icmp_input+0x204>)
 8017eda:	482f      	ldr	r0, [pc, #188]	; (8017f98 <icmp_input+0x200>)
 8017edc:	f003 fcf0 	bl	801b8c0 <iprintf>
          goto icmperr;
 8017ee0:	e04b      	b.n	8017f7a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	685b      	ldr	r3, [r3, #4]
 8017ee6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017eea:	4619      	mov	r1, r3
 8017eec:	6878      	ldr	r0, [r7, #4]
 8017eee:	f7f5 fecb 	bl	800dc88 <pbuf_add_header>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d12b      	bne.n	8017f50 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	685b      	ldr	r3, [r3, #4]
 8017efc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	681a      	ldr	r2, [r3, #0]
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017f06:	4b20      	ldr	r3, [pc, #128]	; (8017f88 <icmp_input+0x1f0>)
 8017f08:	691a      	ldr	r2, [r3, #16]
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017f0e:	693b      	ldr	r3, [r7, #16]
 8017f10:	2200      	movs	r2, #0
 8017f12:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017f14:	693b      	ldr	r3, [r7, #16]
 8017f16:	2200      	movs	r2, #0
 8017f18:	709a      	strb	r2, [r3, #2]
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	22ff      	movs	r2, #255	; 0xff
 8017f22:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	2200      	movs	r2, #0
 8017f28:	729a      	strb	r2, [r3, #10]
 8017f2a:	2200      	movs	r2, #0
 8017f2c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017f2e:	683b      	ldr	r3, [r7, #0]
 8017f30:	9302      	str	r3, [sp, #8]
 8017f32:	2301      	movs	r3, #1
 8017f34:	9301      	str	r3, [sp, #4]
 8017f36:	2300      	movs	r3, #0
 8017f38:	9300      	str	r3, [sp, #0]
 8017f3a:	23ff      	movs	r3, #255	; 0xff
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	69f9      	ldr	r1, [r7, #28]
 8017f40:	6878      	ldr	r0, [r7, #4]
 8017f42:	f000 fa93 	bl	801846c <ip4_output_if>
 8017f46:	4603      	mov	r3, r0
 8017f48:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017f4a:	e001      	b.n	8017f50 <icmp_input+0x1b8>
      break;
 8017f4c:	bf00      	nop
 8017f4e:	e000      	b.n	8017f52 <icmp_input+0x1ba>
      break;
 8017f50:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	f7f5 ff60 	bl	800de18 <pbuf_free>
  return;
 8017f58:	e013      	b.n	8017f82 <icmp_input+0x1ea>
    goto lenerr;
 8017f5a:	bf00      	nop
 8017f5c:	e002      	b.n	8017f64 <icmp_input+0x1cc>
    goto lenerr;
 8017f5e:	bf00      	nop
 8017f60:	e000      	b.n	8017f64 <icmp_input+0x1cc>
        goto lenerr;
 8017f62:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017f64:	6878      	ldr	r0, [r7, #4]
 8017f66:	f7f5 ff57 	bl	800de18 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017f6a:	e00a      	b.n	8017f82 <icmp_input+0x1ea>
        goto icmperr;
 8017f6c:	bf00      	nop
 8017f6e:	e004      	b.n	8017f7a <icmp_input+0x1e2>
        goto icmperr;
 8017f70:	bf00      	nop
 8017f72:	e002      	b.n	8017f7a <icmp_input+0x1e2>
          goto icmperr;
 8017f74:	bf00      	nop
 8017f76:	e000      	b.n	8017f7a <icmp_input+0x1e2>
          goto icmperr;
 8017f78:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017f7a:	6878      	ldr	r0, [r7, #4]
 8017f7c:	f7f5 ff4c 	bl	800de18 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017f80:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017f82:	3728      	adds	r7, #40	; 0x28
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}
 8017f88:	2000cf0c 	.word	0x2000cf0c
 8017f8c:	2000cf20 	.word	0x2000cf20
 8017f90:	08020494 	.word	0x08020494
 8017f94:	080204cc 	.word	0x080204cc
 8017f98:	08020504 	.word	0x08020504
 8017f9c:	0802052c 	.word	0x0802052c

08017fa0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	460b      	mov	r3, r1
 8017faa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017fac:	78fb      	ldrb	r3, [r7, #3]
 8017fae:	461a      	mov	r2, r3
 8017fb0:	2103      	movs	r1, #3
 8017fb2:	6878      	ldr	r0, [r7, #4]
 8017fb4:	f000 f814 	bl	8017fe0 <icmp_send_response>
}
 8017fb8:	bf00      	nop
 8017fba:	3708      	adds	r7, #8
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bd80      	pop	{r7, pc}

08017fc0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b082      	sub	sp, #8
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
 8017fc8:	460b      	mov	r3, r1
 8017fca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017fcc:	78fb      	ldrb	r3, [r7, #3]
 8017fce:	461a      	mov	r2, r3
 8017fd0:	210b      	movs	r1, #11
 8017fd2:	6878      	ldr	r0, [r7, #4]
 8017fd4:	f000 f804 	bl	8017fe0 <icmp_send_response>
}
 8017fd8:	bf00      	nop
 8017fda:	3708      	adds	r7, #8
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}

08017fe0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b08c      	sub	sp, #48	; 0x30
 8017fe4:	af04      	add	r7, sp, #16
 8017fe6:	6078      	str	r0, [r7, #4]
 8017fe8:	460b      	mov	r3, r1
 8017fea:	70fb      	strb	r3, [r7, #3]
 8017fec:	4613      	mov	r3, r2
 8017fee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017ff0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017ff4:	2124      	movs	r1, #36	; 0x24
 8017ff6:	2022      	movs	r0, #34	; 0x22
 8017ff8:	f7f5 fbf8 	bl	800d7ec <pbuf_alloc>
 8017ffc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017ffe:	69fb      	ldr	r3, [r7, #28]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d04c      	beq.n	801809e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018004:	69fb      	ldr	r3, [r7, #28]
 8018006:	895b      	ldrh	r3, [r3, #10]
 8018008:	2b23      	cmp	r3, #35	; 0x23
 801800a:	d806      	bhi.n	801801a <icmp_send_response+0x3a>
 801800c:	4b26      	ldr	r3, [pc, #152]	; (80180a8 <icmp_send_response+0xc8>)
 801800e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018012:	4926      	ldr	r1, [pc, #152]	; (80180ac <icmp_send_response+0xcc>)
 8018014:	4826      	ldr	r0, [pc, #152]	; (80180b0 <icmp_send_response+0xd0>)
 8018016:	f003 fc53 	bl	801b8c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	685b      	ldr	r3, [r3, #4]
 801801e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018020:	69fb      	ldr	r3, [r7, #28]
 8018022:	685b      	ldr	r3, [r3, #4]
 8018024:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018026:	697b      	ldr	r3, [r7, #20]
 8018028:	78fa      	ldrb	r2, [r7, #3]
 801802a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	78ba      	ldrb	r2, [r7, #2]
 8018030:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018032:	697b      	ldr	r3, [r7, #20]
 8018034:	2200      	movs	r2, #0
 8018036:	711a      	strb	r2, [r3, #4]
 8018038:	2200      	movs	r2, #0
 801803a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	2200      	movs	r2, #0
 8018040:	719a      	strb	r2, [r3, #6]
 8018042:	2200      	movs	r2, #0
 8018044:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018046:	69fb      	ldr	r3, [r7, #28]
 8018048:	685b      	ldr	r3, [r3, #4]
 801804a:	f103 0008 	add.w	r0, r3, #8
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	685b      	ldr	r3, [r3, #4]
 8018052:	221c      	movs	r2, #28
 8018054:	4619      	mov	r1, r3
 8018056:	f003 fc1d 	bl	801b894 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801805a:	69bb      	ldr	r3, [r7, #24]
 801805c:	68db      	ldr	r3, [r3, #12]
 801805e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018060:	f107 030c 	add.w	r3, r7, #12
 8018064:	4618      	mov	r0, r3
 8018066:	f000 f825 	bl	80180b4 <ip4_route>
 801806a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801806c:	693b      	ldr	r3, [r7, #16]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d011      	beq.n	8018096 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018072:	697b      	ldr	r3, [r7, #20]
 8018074:	2200      	movs	r2, #0
 8018076:	709a      	strb	r2, [r3, #2]
 8018078:	2200      	movs	r2, #0
 801807a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801807c:	f107 020c 	add.w	r2, r7, #12
 8018080:	693b      	ldr	r3, [r7, #16]
 8018082:	9302      	str	r3, [sp, #8]
 8018084:	2301      	movs	r3, #1
 8018086:	9301      	str	r3, [sp, #4]
 8018088:	2300      	movs	r3, #0
 801808a:	9300      	str	r3, [sp, #0]
 801808c:	23ff      	movs	r3, #255	; 0xff
 801808e:	2100      	movs	r1, #0
 8018090:	69f8      	ldr	r0, [r7, #28]
 8018092:	f000 f9eb 	bl	801846c <ip4_output_if>
  }
  pbuf_free(q);
 8018096:	69f8      	ldr	r0, [r7, #28]
 8018098:	f7f5 febe 	bl	800de18 <pbuf_free>
 801809c:	e000      	b.n	80180a0 <icmp_send_response+0xc0>
    return;
 801809e:	bf00      	nop
}
 80180a0:	3720      	adds	r7, #32
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd80      	pop	{r7, pc}
 80180a6:	bf00      	nop
 80180a8:	08020494 	.word	0x08020494
 80180ac:	08020560 	.word	0x08020560
 80180b0:	08020504 	.word	0x08020504

080180b4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80180b4:	b480      	push	{r7}
 80180b6:	b085      	sub	sp, #20
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80180bc:	4b33      	ldr	r3, [pc, #204]	; (801818c <ip4_route+0xd8>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	60fb      	str	r3, [r7, #12]
 80180c2:	e036      	b.n	8018132 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80180ca:	f003 0301 	and.w	r3, r3, #1
 80180ce:	b2db      	uxtb	r3, r3
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d02b      	beq.n	801812c <ip4_route+0x78>
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80180da:	089b      	lsrs	r3, r3, #2
 80180dc:	f003 0301 	and.w	r3, r3, #1
 80180e0:	b2db      	uxtb	r3, r3
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d022      	beq.n	801812c <ip4_route+0x78>
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	3304      	adds	r3, #4
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d01d      	beq.n	801812c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	681a      	ldr	r2, [r3, #0]
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	3304      	adds	r3, #4
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	405a      	eors	r2, r3
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	3308      	adds	r3, #8
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	4013      	ands	r3, r2
 8018104:	2b00      	cmp	r3, #0
 8018106:	d101      	bne.n	801810c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	e038      	b.n	801817e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018112:	f003 0302 	and.w	r3, r3, #2
 8018116:	2b00      	cmp	r3, #0
 8018118:	d108      	bne.n	801812c <ip4_route+0x78>
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681a      	ldr	r2, [r3, #0]
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	330c      	adds	r3, #12
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	429a      	cmp	r2, r3
 8018126:	d101      	bne.n	801812c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	e028      	b.n	801817e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	60fb      	str	r3, [r7, #12]
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d1c5      	bne.n	80180c4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018138:	4b15      	ldr	r3, [pc, #84]	; (8018190 <ip4_route+0xdc>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d01a      	beq.n	8018176 <ip4_route+0xc2>
 8018140:	4b13      	ldr	r3, [pc, #76]	; (8018190 <ip4_route+0xdc>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018148:	f003 0301 	and.w	r3, r3, #1
 801814c:	2b00      	cmp	r3, #0
 801814e:	d012      	beq.n	8018176 <ip4_route+0xc2>
 8018150:	4b0f      	ldr	r3, [pc, #60]	; (8018190 <ip4_route+0xdc>)
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018158:	f003 0304 	and.w	r3, r3, #4
 801815c:	2b00      	cmp	r3, #0
 801815e:	d00a      	beq.n	8018176 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018160:	4b0b      	ldr	r3, [pc, #44]	; (8018190 <ip4_route+0xdc>)
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	3304      	adds	r3, #4
 8018166:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018168:	2b00      	cmp	r3, #0
 801816a:	d004      	beq.n	8018176 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	b2db      	uxtb	r3, r3
 8018172:	2b7f      	cmp	r3, #127	; 0x7f
 8018174:	d101      	bne.n	801817a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018176:	2300      	movs	r3, #0
 8018178:	e001      	b.n	801817e <ip4_route+0xca>
  }

  return netif_default;
 801817a:	4b05      	ldr	r3, [pc, #20]	; (8018190 <ip4_route+0xdc>)
 801817c:	681b      	ldr	r3, [r3, #0]
}
 801817e:	4618      	mov	r0, r3
 8018180:	3714      	adds	r7, #20
 8018182:	46bd      	mov	sp, r7
 8018184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018188:	4770      	bx	lr
 801818a:	bf00      	nop
 801818c:	20010650 	.word	0x20010650
 8018190:	20010654 	.word	0x20010654

08018194 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b082      	sub	sp, #8
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80181a2:	f003 0301 	and.w	r3, r3, #1
 80181a6:	b2db      	uxtb	r3, r3
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d016      	beq.n	80181da <ip4_input_accept+0x46>
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	3304      	adds	r3, #4
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d011      	beq.n	80181da <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80181b6:	4b0b      	ldr	r3, [pc, #44]	; (80181e4 <ip4_input_accept+0x50>)
 80181b8:	695a      	ldr	r2, [r3, #20]
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	3304      	adds	r3, #4
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	429a      	cmp	r2, r3
 80181c2:	d008      	beq.n	80181d6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80181c4:	4b07      	ldr	r3, [pc, #28]	; (80181e4 <ip4_input_accept+0x50>)
 80181c6:	695b      	ldr	r3, [r3, #20]
 80181c8:	6879      	ldr	r1, [r7, #4]
 80181ca:	4618      	mov	r0, r3
 80181cc:	f000 fa26 	bl	801861c <ip4_addr_isbroadcast_u32>
 80181d0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d001      	beq.n	80181da <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80181d6:	2301      	movs	r3, #1
 80181d8:	e000      	b.n	80181dc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80181da:	2300      	movs	r3, #0
}
 80181dc:	4618      	mov	r0, r3
 80181de:	3708      	adds	r7, #8
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd80      	pop	{r7, pc}
 80181e4:	2000cf0c 	.word	0x2000cf0c

080181e8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b088      	sub	sp, #32
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
 80181f0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80181f2:	2301      	movs	r3, #1
 80181f4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	685b      	ldr	r3, [r3, #4]
 80181fa:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80181fc:	69fb      	ldr	r3, [r7, #28]
 80181fe:	781b      	ldrb	r3, [r3, #0]
 8018200:	091b      	lsrs	r3, r3, #4
 8018202:	b2db      	uxtb	r3, r3
 8018204:	2b04      	cmp	r3, #4
 8018206:	d004      	beq.n	8018212 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018208:	6878      	ldr	r0, [r7, #4]
 801820a:	f7f5 fe05 	bl	800de18 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801820e:	2300      	movs	r3, #0
 8018210:	e123      	b.n	801845a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018212:	69fb      	ldr	r3, [r7, #28]
 8018214:	781b      	ldrb	r3, [r3, #0]
 8018216:	f003 030f 	and.w	r3, r3, #15
 801821a:	b2db      	uxtb	r3, r3
 801821c:	009b      	lsls	r3, r3, #2
 801821e:	b2db      	uxtb	r3, r3
 8018220:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018222:	69fb      	ldr	r3, [r7, #28]
 8018224:	885b      	ldrh	r3, [r3, #2]
 8018226:	b29b      	uxth	r3, r3
 8018228:	4618      	mov	r0, r3
 801822a:	f7f4 fa0b 	bl	800c644 <lwip_htons>
 801822e:	4603      	mov	r3, r0
 8018230:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	891b      	ldrh	r3, [r3, #8]
 8018236:	8a3a      	ldrh	r2, [r7, #16]
 8018238:	429a      	cmp	r2, r3
 801823a:	d204      	bcs.n	8018246 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801823c:	8a3b      	ldrh	r3, [r7, #16]
 801823e:	4619      	mov	r1, r3
 8018240:	6878      	ldr	r0, [r7, #4]
 8018242:	f7f5 fc31 	bl	800daa8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	895b      	ldrh	r3, [r3, #10]
 801824a:	8a7a      	ldrh	r2, [r7, #18]
 801824c:	429a      	cmp	r2, r3
 801824e:	d807      	bhi.n	8018260 <ip4_input+0x78>
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	891b      	ldrh	r3, [r3, #8]
 8018254:	8a3a      	ldrh	r2, [r7, #16]
 8018256:	429a      	cmp	r2, r3
 8018258:	d802      	bhi.n	8018260 <ip4_input+0x78>
 801825a:	8a7b      	ldrh	r3, [r7, #18]
 801825c:	2b13      	cmp	r3, #19
 801825e:	d804      	bhi.n	801826a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018260:	6878      	ldr	r0, [r7, #4]
 8018262:	f7f5 fdd9 	bl	800de18 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018266:	2300      	movs	r3, #0
 8018268:	e0f7      	b.n	801845a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801826a:	69fb      	ldr	r3, [r7, #28]
 801826c:	691b      	ldr	r3, [r3, #16]
 801826e:	4a7d      	ldr	r2, [pc, #500]	; (8018464 <ip4_input+0x27c>)
 8018270:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018272:	69fb      	ldr	r3, [r7, #28]
 8018274:	68db      	ldr	r3, [r3, #12]
 8018276:	4a7b      	ldr	r2, [pc, #492]	; (8018464 <ip4_input+0x27c>)
 8018278:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801827a:	4b7a      	ldr	r3, [pc, #488]	; (8018464 <ip4_input+0x27c>)
 801827c:	695b      	ldr	r3, [r3, #20]
 801827e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018282:	2be0      	cmp	r3, #224	; 0xe0
 8018284:	d112      	bne.n	80182ac <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018286:	683b      	ldr	r3, [r7, #0]
 8018288:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801828c:	f003 0301 	and.w	r3, r3, #1
 8018290:	b2db      	uxtb	r3, r3
 8018292:	2b00      	cmp	r3, #0
 8018294:	d007      	beq.n	80182a6 <ip4_input+0xbe>
 8018296:	683b      	ldr	r3, [r7, #0]
 8018298:	3304      	adds	r3, #4
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d002      	beq.n	80182a6 <ip4_input+0xbe>
      netif = inp;
 80182a0:	683b      	ldr	r3, [r7, #0]
 80182a2:	61bb      	str	r3, [r7, #24]
 80182a4:	e02a      	b.n	80182fc <ip4_input+0x114>
    } else {
      netif = NULL;
 80182a6:	2300      	movs	r3, #0
 80182a8:	61bb      	str	r3, [r7, #24]
 80182aa:	e027      	b.n	80182fc <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80182ac:	6838      	ldr	r0, [r7, #0]
 80182ae:	f7ff ff71 	bl	8018194 <ip4_input_accept>
 80182b2:	4603      	mov	r3, r0
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d002      	beq.n	80182be <ip4_input+0xd6>
      netif = inp;
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	61bb      	str	r3, [r7, #24]
 80182bc:	e01e      	b.n	80182fc <ip4_input+0x114>
    } else {
      netif = NULL;
 80182be:	2300      	movs	r3, #0
 80182c0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80182c2:	4b68      	ldr	r3, [pc, #416]	; (8018464 <ip4_input+0x27c>)
 80182c4:	695b      	ldr	r3, [r3, #20]
 80182c6:	b2db      	uxtb	r3, r3
 80182c8:	2b7f      	cmp	r3, #127	; 0x7f
 80182ca:	d017      	beq.n	80182fc <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80182cc:	4b66      	ldr	r3, [pc, #408]	; (8018468 <ip4_input+0x280>)
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	61bb      	str	r3, [r7, #24]
 80182d2:	e00e      	b.n	80182f2 <ip4_input+0x10a>
          if (netif == inp) {
 80182d4:	69ba      	ldr	r2, [r7, #24]
 80182d6:	683b      	ldr	r3, [r7, #0]
 80182d8:	429a      	cmp	r2, r3
 80182da:	d006      	beq.n	80182ea <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80182dc:	69b8      	ldr	r0, [r7, #24]
 80182de:	f7ff ff59 	bl	8018194 <ip4_input_accept>
 80182e2:	4603      	mov	r3, r0
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d108      	bne.n	80182fa <ip4_input+0x112>
 80182e8:	e000      	b.n	80182ec <ip4_input+0x104>
            continue;
 80182ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 80182ec:	69bb      	ldr	r3, [r7, #24]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	61bb      	str	r3, [r7, #24]
 80182f2:	69bb      	ldr	r3, [r7, #24]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d1ed      	bne.n	80182d4 <ip4_input+0xec>
 80182f8:	e000      	b.n	80182fc <ip4_input+0x114>
            break;
 80182fa:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80182fc:	69bb      	ldr	r3, [r7, #24]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d111      	bne.n	8018326 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018302:	69fb      	ldr	r3, [r7, #28]
 8018304:	7a5b      	ldrb	r3, [r3, #9]
 8018306:	2b11      	cmp	r3, #17
 8018308:	d10d      	bne.n	8018326 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801830a:	8a7b      	ldrh	r3, [r7, #18]
 801830c:	69fa      	ldr	r2, [r7, #28]
 801830e:	4413      	add	r3, r2
 8018310:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	885b      	ldrh	r3, [r3, #2]
 8018316:	b29b      	uxth	r3, r3
 8018318:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801831c:	d103      	bne.n	8018326 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8018322:	2300      	movs	r3, #0
 8018324:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018326:	697b      	ldr	r3, [r7, #20]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d017      	beq.n	801835c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801832c:	4b4d      	ldr	r3, [pc, #308]	; (8018464 <ip4_input+0x27c>)
 801832e:	691b      	ldr	r3, [r3, #16]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d013      	beq.n	801835c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018334:	4b4b      	ldr	r3, [pc, #300]	; (8018464 <ip4_input+0x27c>)
 8018336:	691b      	ldr	r3, [r3, #16]
 8018338:	6839      	ldr	r1, [r7, #0]
 801833a:	4618      	mov	r0, r3
 801833c:	f000 f96e 	bl	801861c <ip4_addr_isbroadcast_u32>
 8018340:	4603      	mov	r3, r0
 8018342:	2b00      	cmp	r3, #0
 8018344:	d105      	bne.n	8018352 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018346:	4b47      	ldr	r3, [pc, #284]	; (8018464 <ip4_input+0x27c>)
 8018348:	691b      	ldr	r3, [r3, #16]
 801834a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801834e:	2be0      	cmp	r3, #224	; 0xe0
 8018350:	d104      	bne.n	801835c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018352:	6878      	ldr	r0, [r7, #4]
 8018354:	f7f5 fd60 	bl	800de18 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018358:	2300      	movs	r3, #0
 801835a:	e07e      	b.n	801845a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801835c:	69bb      	ldr	r3, [r7, #24]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d104      	bne.n	801836c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018362:	6878      	ldr	r0, [r7, #4]
 8018364:	f7f5 fd58 	bl	800de18 <pbuf_free>
    return ERR_OK;
 8018368:	2300      	movs	r3, #0
 801836a:	e076      	b.n	801845a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801836c:	69fb      	ldr	r3, [r7, #28]
 801836e:	88db      	ldrh	r3, [r3, #6]
 8018370:	b29b      	uxth	r3, r3
 8018372:	461a      	mov	r2, r3
 8018374:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018378:	4013      	ands	r3, r2
 801837a:	2b00      	cmp	r3, #0
 801837c:	d00b      	beq.n	8018396 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801837e:	6878      	ldr	r0, [r7, #4]
 8018380:	f000 fdd0 	bl	8018f24 <ip4_reass>
 8018384:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d101      	bne.n	8018390 <ip4_input+0x1a8>
      return ERR_OK;
 801838c:	2300      	movs	r3, #0
 801838e:	e064      	b.n	801845a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	685b      	ldr	r3, [r3, #4]
 8018394:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018396:	4a33      	ldr	r2, [pc, #204]	; (8018464 <ip4_input+0x27c>)
 8018398:	69bb      	ldr	r3, [r7, #24]
 801839a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801839c:	4a31      	ldr	r2, [pc, #196]	; (8018464 <ip4_input+0x27c>)
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80183a2:	4a30      	ldr	r2, [pc, #192]	; (8018464 <ip4_input+0x27c>)
 80183a4:	69fb      	ldr	r3, [r7, #28]
 80183a6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80183a8:	69fb      	ldr	r3, [r7, #28]
 80183aa:	781b      	ldrb	r3, [r3, #0]
 80183ac:	f003 030f 	and.w	r3, r3, #15
 80183b0:	b2db      	uxtb	r3, r3
 80183b2:	009b      	lsls	r3, r3, #2
 80183b4:	b2db      	uxtb	r3, r3
 80183b6:	b29a      	uxth	r2, r3
 80183b8:	4b2a      	ldr	r3, [pc, #168]	; (8018464 <ip4_input+0x27c>)
 80183ba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80183bc:	8a7b      	ldrh	r3, [r7, #18]
 80183be:	4619      	mov	r1, r3
 80183c0:	6878      	ldr	r0, [r7, #4]
 80183c2:	f7f5 fc71 	bl	800dca8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80183c6:	69fb      	ldr	r3, [r7, #28]
 80183c8:	7a5b      	ldrb	r3, [r3, #9]
 80183ca:	2b11      	cmp	r3, #17
 80183cc:	d006      	beq.n	80183dc <ip4_input+0x1f4>
 80183ce:	2b11      	cmp	r3, #17
 80183d0:	dc13      	bgt.n	80183fa <ip4_input+0x212>
 80183d2:	2b01      	cmp	r3, #1
 80183d4:	d00c      	beq.n	80183f0 <ip4_input+0x208>
 80183d6:	2b06      	cmp	r3, #6
 80183d8:	d005      	beq.n	80183e6 <ip4_input+0x1fe>
 80183da:	e00e      	b.n	80183fa <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80183dc:	6839      	ldr	r1, [r7, #0]
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f7fc fa24 	bl	801482c <udp_input>
        break;
 80183e4:	e026      	b.n	8018434 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80183e6:	6839      	ldr	r1, [r7, #0]
 80183e8:	6878      	ldr	r0, [r7, #4]
 80183ea:	f7f7 fde1 	bl	800ffb0 <tcp_input>
        break;
 80183ee:	e021      	b.n	8018434 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80183f0:	6839      	ldr	r1, [r7, #0]
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	f7ff fcd0 	bl	8017d98 <icmp_input>
        break;
 80183f8:	e01c      	b.n	8018434 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80183fa:	4b1a      	ldr	r3, [pc, #104]	; (8018464 <ip4_input+0x27c>)
 80183fc:	695b      	ldr	r3, [r3, #20]
 80183fe:	69b9      	ldr	r1, [r7, #24]
 8018400:	4618      	mov	r0, r3
 8018402:	f000 f90b 	bl	801861c <ip4_addr_isbroadcast_u32>
 8018406:	4603      	mov	r3, r0
 8018408:	2b00      	cmp	r3, #0
 801840a:	d10f      	bne.n	801842c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801840c:	4b15      	ldr	r3, [pc, #84]	; (8018464 <ip4_input+0x27c>)
 801840e:	695b      	ldr	r3, [r3, #20]
 8018410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018414:	2be0      	cmp	r3, #224	; 0xe0
 8018416:	d009      	beq.n	801842c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018418:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801841c:	4619      	mov	r1, r3
 801841e:	6878      	ldr	r0, [r7, #4]
 8018420:	f7f5 fcb5 	bl	800dd8e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018424:	2102      	movs	r1, #2
 8018426:	6878      	ldr	r0, [r7, #4]
 8018428:	f7ff fdba 	bl	8017fa0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801842c:	6878      	ldr	r0, [r7, #4]
 801842e:	f7f5 fcf3 	bl	800de18 <pbuf_free>
        break;
 8018432:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018434:	4b0b      	ldr	r3, [pc, #44]	; (8018464 <ip4_input+0x27c>)
 8018436:	2200      	movs	r2, #0
 8018438:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801843a:	4b0a      	ldr	r3, [pc, #40]	; (8018464 <ip4_input+0x27c>)
 801843c:	2200      	movs	r2, #0
 801843e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018440:	4b08      	ldr	r3, [pc, #32]	; (8018464 <ip4_input+0x27c>)
 8018442:	2200      	movs	r2, #0
 8018444:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018446:	4b07      	ldr	r3, [pc, #28]	; (8018464 <ip4_input+0x27c>)
 8018448:	2200      	movs	r2, #0
 801844a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801844c:	4b05      	ldr	r3, [pc, #20]	; (8018464 <ip4_input+0x27c>)
 801844e:	2200      	movs	r2, #0
 8018450:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018452:	4b04      	ldr	r3, [pc, #16]	; (8018464 <ip4_input+0x27c>)
 8018454:	2200      	movs	r2, #0
 8018456:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018458:	2300      	movs	r3, #0
}
 801845a:	4618      	mov	r0, r3
 801845c:	3720      	adds	r7, #32
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}
 8018462:	bf00      	nop
 8018464:	2000cf0c 	.word	0x2000cf0c
 8018468:	20010650 	.word	0x20010650

0801846c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b08a      	sub	sp, #40	; 0x28
 8018470:	af04      	add	r7, sp, #16
 8018472:	60f8      	str	r0, [r7, #12]
 8018474:	60b9      	str	r1, [r7, #8]
 8018476:	607a      	str	r2, [r7, #4]
 8018478:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801847a:	68bb      	ldr	r3, [r7, #8]
 801847c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d009      	beq.n	8018498 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018484:	68bb      	ldr	r3, [r7, #8]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d003      	beq.n	8018492 <ip4_output_if+0x26>
 801848a:	68bb      	ldr	r3, [r7, #8]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d102      	bne.n	8018498 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018494:	3304      	adds	r3, #4
 8018496:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018498:	78fa      	ldrb	r2, [r7, #3]
 801849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801849c:	9302      	str	r3, [sp, #8]
 801849e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80184a2:	9301      	str	r3, [sp, #4]
 80184a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80184a8:	9300      	str	r3, [sp, #0]
 80184aa:	4613      	mov	r3, r2
 80184ac:	687a      	ldr	r2, [r7, #4]
 80184ae:	6979      	ldr	r1, [r7, #20]
 80184b0:	68f8      	ldr	r0, [r7, #12]
 80184b2:	f000 f805 	bl	80184c0 <ip4_output_if_src>
 80184b6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80184b8:	4618      	mov	r0, r3
 80184ba:	3718      	adds	r7, #24
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}

080184c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b088      	sub	sp, #32
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	60f8      	str	r0, [r7, #12]
 80184c8:	60b9      	str	r1, [r7, #8]
 80184ca:	607a      	str	r2, [r7, #4]
 80184cc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	7b9b      	ldrb	r3, [r3, #14]
 80184d2:	2b01      	cmp	r3, #1
 80184d4:	d006      	beq.n	80184e4 <ip4_output_if_src+0x24>
 80184d6:	4b4b      	ldr	r3, [pc, #300]	; (8018604 <ip4_output_if_src+0x144>)
 80184d8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80184dc:	494a      	ldr	r1, [pc, #296]	; (8018608 <ip4_output_if_src+0x148>)
 80184de:	484b      	ldr	r0, [pc, #300]	; (801860c <ip4_output_if_src+0x14c>)
 80184e0:	f003 f9ee 	bl	801b8c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d060      	beq.n	80185ac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80184ea:	2314      	movs	r3, #20
 80184ec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80184ee:	2114      	movs	r1, #20
 80184f0:	68f8      	ldr	r0, [r7, #12]
 80184f2:	f7f5 fbc9 	bl	800dc88 <pbuf_add_header>
 80184f6:	4603      	mov	r3, r0
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d002      	beq.n	8018502 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80184fc:	f06f 0301 	mvn.w	r3, #1
 8018500:	e07c      	b.n	80185fc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	685b      	ldr	r3, [r3, #4]
 8018506:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	895b      	ldrh	r3, [r3, #10]
 801850c:	2b13      	cmp	r3, #19
 801850e:	d806      	bhi.n	801851e <ip4_output_if_src+0x5e>
 8018510:	4b3c      	ldr	r3, [pc, #240]	; (8018604 <ip4_output_if_src+0x144>)
 8018512:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018516:	493e      	ldr	r1, [pc, #248]	; (8018610 <ip4_output_if_src+0x150>)
 8018518:	483c      	ldr	r0, [pc, #240]	; (801860c <ip4_output_if_src+0x14c>)
 801851a:	f003 f9d1 	bl	801b8c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801851e:	69fb      	ldr	r3, [r7, #28]
 8018520:	78fa      	ldrb	r2, [r7, #3]
 8018522:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018524:	69fb      	ldr	r3, [r7, #28]
 8018526:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801852a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	681a      	ldr	r2, [r3, #0]
 8018530:	69fb      	ldr	r3, [r7, #28]
 8018532:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018534:	8b7b      	ldrh	r3, [r7, #26]
 8018536:	089b      	lsrs	r3, r3, #2
 8018538:	b29b      	uxth	r3, r3
 801853a:	b2db      	uxtb	r3, r3
 801853c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018540:	b2da      	uxtb	r2, r3
 8018542:	69fb      	ldr	r3, [r7, #28]
 8018544:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018546:	69fb      	ldr	r3, [r7, #28]
 8018548:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801854c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	891b      	ldrh	r3, [r3, #8]
 8018552:	4618      	mov	r0, r3
 8018554:	f7f4 f876 	bl	800c644 <lwip_htons>
 8018558:	4603      	mov	r3, r0
 801855a:	461a      	mov	r2, r3
 801855c:	69fb      	ldr	r3, [r7, #28]
 801855e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018560:	69fb      	ldr	r3, [r7, #28]
 8018562:	2200      	movs	r2, #0
 8018564:	719a      	strb	r2, [r3, #6]
 8018566:	2200      	movs	r2, #0
 8018568:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801856a:	4b2a      	ldr	r3, [pc, #168]	; (8018614 <ip4_output_if_src+0x154>)
 801856c:	881b      	ldrh	r3, [r3, #0]
 801856e:	4618      	mov	r0, r3
 8018570:	f7f4 f868 	bl	800c644 <lwip_htons>
 8018574:	4603      	mov	r3, r0
 8018576:	461a      	mov	r2, r3
 8018578:	69fb      	ldr	r3, [r7, #28]
 801857a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801857c:	4b25      	ldr	r3, [pc, #148]	; (8018614 <ip4_output_if_src+0x154>)
 801857e:	881b      	ldrh	r3, [r3, #0]
 8018580:	3301      	adds	r3, #1
 8018582:	b29a      	uxth	r2, r3
 8018584:	4b23      	ldr	r3, [pc, #140]	; (8018614 <ip4_output_if_src+0x154>)
 8018586:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018588:	68bb      	ldr	r3, [r7, #8]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d104      	bne.n	8018598 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801858e:	4b22      	ldr	r3, [pc, #136]	; (8018618 <ip4_output_if_src+0x158>)
 8018590:	681a      	ldr	r2, [r3, #0]
 8018592:	69fb      	ldr	r3, [r7, #28]
 8018594:	60da      	str	r2, [r3, #12]
 8018596:	e003      	b.n	80185a0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018598:	68bb      	ldr	r3, [r7, #8]
 801859a:	681a      	ldr	r2, [r3, #0]
 801859c:	69fb      	ldr	r3, [r7, #28]
 801859e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80185a0:	69fb      	ldr	r3, [r7, #28]
 80185a2:	2200      	movs	r2, #0
 80185a4:	729a      	strb	r2, [r3, #10]
 80185a6:	2200      	movs	r2, #0
 80185a8:	72da      	strb	r2, [r3, #11]
 80185aa:	e00f      	b.n	80185cc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	895b      	ldrh	r3, [r3, #10]
 80185b0:	2b13      	cmp	r3, #19
 80185b2:	d802      	bhi.n	80185ba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80185b4:	f06f 0301 	mvn.w	r3, #1
 80185b8:	e020      	b.n	80185fc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	685b      	ldr	r3, [r3, #4]
 80185be:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80185c0:	69fb      	ldr	r3, [r7, #28]
 80185c2:	691b      	ldr	r3, [r3, #16]
 80185c4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80185c6:	f107 0314 	add.w	r3, r7, #20
 80185ca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80185cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d00c      	beq.n	80185ee <ip4_output_if_src+0x12e>
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	891a      	ldrh	r2, [r3, #8]
 80185d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80185dc:	429a      	cmp	r2, r3
 80185de:	d906      	bls.n	80185ee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80185e0:	687a      	ldr	r2, [r7, #4]
 80185e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80185e4:	68f8      	ldr	r0, [r7, #12]
 80185e6:	f000 fe8b 	bl	8019300 <ip4_frag>
 80185ea:	4603      	mov	r3, r0
 80185ec:	e006      	b.n	80185fc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80185ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f0:	695b      	ldr	r3, [r3, #20]
 80185f2:	687a      	ldr	r2, [r7, #4]
 80185f4:	68f9      	ldr	r1, [r7, #12]
 80185f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185f8:	4798      	blx	r3
 80185fa:	4603      	mov	r3, r0
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	3720      	adds	r7, #32
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}
 8018604:	0802058c 	.word	0x0802058c
 8018608:	080205c0 	.word	0x080205c0
 801860c:	080205cc 	.word	0x080205cc
 8018610:	080205f4 	.word	0x080205f4
 8018614:	20008c22 	.word	0x20008c22
 8018618:	08020b38 	.word	0x08020b38

0801861c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801861c:	b480      	push	{r7}
 801861e:	b085      	sub	sp, #20
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
 8018624:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018630:	d002      	beq.n	8018638 <ip4_addr_isbroadcast_u32+0x1c>
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	2b00      	cmp	r3, #0
 8018636:	d101      	bne.n	801863c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018638:	2301      	movs	r3, #1
 801863a:	e02a      	b.n	8018692 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801863c:	683b      	ldr	r3, [r7, #0]
 801863e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018642:	f003 0302 	and.w	r3, r3, #2
 8018646:	2b00      	cmp	r3, #0
 8018648:	d101      	bne.n	801864e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801864a:	2300      	movs	r3, #0
 801864c:	e021      	b.n	8018692 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801864e:	683b      	ldr	r3, [r7, #0]
 8018650:	3304      	adds	r3, #4
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	687a      	ldr	r2, [r7, #4]
 8018656:	429a      	cmp	r2, r3
 8018658:	d101      	bne.n	801865e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801865a:	2300      	movs	r3, #0
 801865c:	e019      	b.n	8018692 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801865e:	68fa      	ldr	r2, [r7, #12]
 8018660:	683b      	ldr	r3, [r7, #0]
 8018662:	3304      	adds	r3, #4
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	405a      	eors	r2, r3
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	3308      	adds	r3, #8
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	4013      	ands	r3, r2
 8018670:	2b00      	cmp	r3, #0
 8018672:	d10d      	bne.n	8018690 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018674:	683b      	ldr	r3, [r7, #0]
 8018676:	3308      	adds	r3, #8
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	43da      	mvns	r2, r3
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	3308      	adds	r3, #8
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018688:	429a      	cmp	r2, r3
 801868a:	d101      	bne.n	8018690 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801868c:	2301      	movs	r3, #1
 801868e:	e000      	b.n	8018692 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018690:	2300      	movs	r3, #0
  }
}
 8018692:	4618      	mov	r0, r3
 8018694:	3714      	adds	r7, #20
 8018696:	46bd      	mov	sp, r7
 8018698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869c:	4770      	bx	lr

0801869e <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 801869e:	b580      	push	{r7, lr}
 80186a0:	b084      	sub	sp, #16
 80186a2:	af00      	add	r7, sp, #0
 80186a4:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 80186a6:	f107 030c 	add.w	r3, r7, #12
 80186aa:	4619      	mov	r1, r3
 80186ac:	6878      	ldr	r0, [r7, #4]
 80186ae:	f000 f80b 	bl	80186c8 <ip4addr_aton>
 80186b2:	4603      	mov	r3, r0
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d001      	beq.n	80186bc <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	e001      	b.n	80186c0 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 80186bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	3710      	adds	r7, #16
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}

080186c8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b08a      	sub	sp, #40	; 0x28
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	6078      	str	r0, [r7, #4]
 80186d0:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 80186d2:	f107 030c 	add.w	r3, r7, #12
 80186d6:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	781b      	ldrb	r3, [r3, #0]
 80186dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80186e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80186e4:	3301      	adds	r3, #1
 80186e6:	4a89      	ldr	r2, [pc, #548]	; (801890c <ip4addr_aton+0x244>)
 80186e8:	4413      	add	r3, r2
 80186ea:	781b      	ldrb	r3, [r3, #0]
 80186ec:	f003 0304 	and.w	r3, r3, #4
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d101      	bne.n	80186f8 <ip4addr_aton+0x30>
      return 0;
 80186f4:	2300      	movs	r3, #0
 80186f6:	e105      	b.n	8018904 <ip4addr_aton+0x23c>
    }
    val = 0;
 80186f8:	2300      	movs	r3, #0
 80186fa:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 80186fc:	230a      	movs	r3, #10
 80186fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8018702:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018706:	2b30      	cmp	r3, #48	; 0x30
 8018708:	d11c      	bne.n	8018744 <ip4addr_aton+0x7c>
      c = *++cp;
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	3301      	adds	r3, #1
 801870e:	607b      	str	r3, [r7, #4]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	781b      	ldrb	r3, [r3, #0]
 8018714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8018718:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801871c:	2b78      	cmp	r3, #120	; 0x78
 801871e:	d003      	beq.n	8018728 <ip4addr_aton+0x60>
 8018720:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018724:	2b58      	cmp	r3, #88	; 0x58
 8018726:	d10a      	bne.n	801873e <ip4addr_aton+0x76>
        base = 16;
 8018728:	2310      	movs	r3, #16
 801872a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	3301      	adds	r3, #1
 8018732:	607b      	str	r3, [r7, #4]
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	781b      	ldrb	r3, [r3, #0]
 8018738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801873c:	e002      	b.n	8018744 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801873e:	2308      	movs	r3, #8
 8018740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8018744:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018748:	3301      	adds	r3, #1
 801874a:	4a70      	ldr	r2, [pc, #448]	; (801890c <ip4addr_aton+0x244>)
 801874c:	4413      	add	r3, r2
 801874e:	781b      	ldrb	r3, [r3, #0]
 8018750:	f003 0304 	and.w	r3, r3, #4
 8018754:	2b00      	cmp	r3, #0
 8018756:	d011      	beq.n	801877c <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8018758:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801875c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801875e:	fb02 f203 	mul.w	r2, r2, r3
 8018762:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018766:	4413      	add	r3, r2
 8018768:	3b30      	subs	r3, #48	; 0x30
 801876a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	3301      	adds	r3, #1
 8018770:	607b      	str	r3, [r7, #4]
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	781b      	ldrb	r3, [r3, #0]
 8018776:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801877a:	e7e3      	b.n	8018744 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801877c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018780:	2b10      	cmp	r3, #16
 8018782:	d127      	bne.n	80187d4 <ip4addr_aton+0x10c>
 8018784:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018788:	3301      	adds	r3, #1
 801878a:	4a60      	ldr	r2, [pc, #384]	; (801890c <ip4addr_aton+0x244>)
 801878c:	4413      	add	r3, r2
 801878e:	781b      	ldrb	r3, [r3, #0]
 8018790:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8018794:	2b00      	cmp	r3, #0
 8018796:	d01d      	beq.n	80187d4 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8018798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801879a:	011b      	lsls	r3, r3, #4
 801879c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80187a0:	f102 010a 	add.w	r1, r2, #10
 80187a4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80187a8:	3201      	adds	r2, #1
 80187aa:	4858      	ldr	r0, [pc, #352]	; (801890c <ip4addr_aton+0x244>)
 80187ac:	4402      	add	r2, r0
 80187ae:	7812      	ldrb	r2, [r2, #0]
 80187b0:	f002 0203 	and.w	r2, r2, #3
 80187b4:	2a02      	cmp	r2, #2
 80187b6:	d101      	bne.n	80187bc <ip4addr_aton+0xf4>
 80187b8:	2261      	movs	r2, #97	; 0x61
 80187ba:	e000      	b.n	80187be <ip4addr_aton+0xf6>
 80187bc:	2241      	movs	r2, #65	; 0x41
 80187be:	1a8a      	subs	r2, r1, r2
 80187c0:	4313      	orrs	r3, r2
 80187c2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	3301      	adds	r3, #1
 80187c8:	607b      	str	r3, [r7, #4]
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	781b      	ldrb	r3, [r3, #0]
 80187ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 80187d2:	e7b7      	b.n	8018744 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 80187d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80187d8:	2b2e      	cmp	r3, #46	; 0x2e
 80187da:	d114      	bne.n	8018806 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80187dc:	f107 030c 	add.w	r3, r7, #12
 80187e0:	330c      	adds	r3, #12
 80187e2:	69fa      	ldr	r2, [r7, #28]
 80187e4:	429a      	cmp	r2, r3
 80187e6:	d301      	bcc.n	80187ec <ip4addr_aton+0x124>
        return 0;
 80187e8:	2300      	movs	r3, #0
 80187ea:	e08b      	b.n	8018904 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80187ec:	69fb      	ldr	r3, [r7, #28]
 80187ee:	1d1a      	adds	r2, r3, #4
 80187f0:	61fa      	str	r2, [r7, #28]
 80187f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187f4:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	3301      	adds	r3, #1
 80187fa:	607b      	str	r3, [r7, #4]
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8018804:	e76c      	b.n	80186e0 <ip4addr_aton+0x18>
    } else {
      break;
 8018806:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8018808:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801880c:	2b00      	cmp	r3, #0
 801880e:	d00b      	beq.n	8018828 <ip4addr_aton+0x160>
 8018810:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018814:	3301      	adds	r3, #1
 8018816:	4a3d      	ldr	r2, [pc, #244]	; (801890c <ip4addr_aton+0x244>)
 8018818:	4413      	add	r3, r2
 801881a:	781b      	ldrb	r3, [r3, #0]
 801881c:	f003 0308 	and.w	r3, r3, #8
 8018820:	2b00      	cmp	r3, #0
 8018822:	d101      	bne.n	8018828 <ip4addr_aton+0x160>
    return 0;
 8018824:	2300      	movs	r3, #0
 8018826:	e06d      	b.n	8018904 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8018828:	f107 030c 	add.w	r3, r7, #12
 801882c:	69fa      	ldr	r2, [r7, #28]
 801882e:	1ad3      	subs	r3, r2, r3
 8018830:	109b      	asrs	r3, r3, #2
 8018832:	3301      	adds	r3, #1
 8018834:	2b04      	cmp	r3, #4
 8018836:	d853      	bhi.n	80188e0 <ip4addr_aton+0x218>
 8018838:	a201      	add	r2, pc, #4	; (adr r2, 8018840 <ip4addr_aton+0x178>)
 801883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801883e:	bf00      	nop
 8018840:	08018855 	.word	0x08018855
 8018844:	080188ef 	.word	0x080188ef
 8018848:	08018859 	.word	0x08018859
 801884c:	0801887b 	.word	0x0801887b
 8018850:	080188a9 	.word	0x080188a9

    case 0:
      return 0;       /* initial nondigit */
 8018854:	2300      	movs	r3, #0
 8018856:	e055      	b.n	8018904 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8018858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801885a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801885e:	d301      	bcc.n	8018864 <ip4addr_aton+0x19c>
        return 0;
 8018860:	2300      	movs	r3, #0
 8018862:	e04f      	b.n	8018904 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	2bff      	cmp	r3, #255	; 0xff
 8018868:	d901      	bls.n	801886e <ip4addr_aton+0x1a6>
        return 0;
 801886a:	2300      	movs	r3, #0
 801886c:	e04a      	b.n	8018904 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	061b      	lsls	r3, r3, #24
 8018872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018874:	4313      	orrs	r3, r2
 8018876:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8018878:	e03a      	b.n	80188f0 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801887c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018880:	d301      	bcc.n	8018886 <ip4addr_aton+0x1be>
        return 0;
 8018882:	2300      	movs	r3, #0
 8018884:	e03e      	b.n	8018904 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	2bff      	cmp	r3, #255	; 0xff
 801888a:	d802      	bhi.n	8018892 <ip4addr_aton+0x1ca>
 801888c:	693b      	ldr	r3, [r7, #16]
 801888e:	2bff      	cmp	r3, #255	; 0xff
 8018890:	d901      	bls.n	8018896 <ip4addr_aton+0x1ce>
        return 0;
 8018892:	2300      	movs	r3, #0
 8018894:	e036      	b.n	8018904 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	061a      	lsls	r2, r3, #24
 801889a:	693b      	ldr	r3, [r7, #16]
 801889c:	041b      	lsls	r3, r3, #16
 801889e:	4313      	orrs	r3, r2
 80188a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188a2:	4313      	orrs	r3, r2
 80188a4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80188a6:	e023      	b.n	80188f0 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 80188a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188aa:	2bff      	cmp	r3, #255	; 0xff
 80188ac:	d901      	bls.n	80188b2 <ip4addr_aton+0x1ea>
        return 0;
 80188ae:	2300      	movs	r3, #0
 80188b0:	e028      	b.n	8018904 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	2bff      	cmp	r3, #255	; 0xff
 80188b6:	d805      	bhi.n	80188c4 <ip4addr_aton+0x1fc>
 80188b8:	693b      	ldr	r3, [r7, #16]
 80188ba:	2bff      	cmp	r3, #255	; 0xff
 80188bc:	d802      	bhi.n	80188c4 <ip4addr_aton+0x1fc>
 80188be:	697b      	ldr	r3, [r7, #20]
 80188c0:	2bff      	cmp	r3, #255	; 0xff
 80188c2:	d901      	bls.n	80188c8 <ip4addr_aton+0x200>
        return 0;
 80188c4:	2300      	movs	r3, #0
 80188c6:	e01d      	b.n	8018904 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	061a      	lsls	r2, r3, #24
 80188cc:	693b      	ldr	r3, [r7, #16]
 80188ce:	041b      	lsls	r3, r3, #16
 80188d0:	431a      	orrs	r2, r3
 80188d2:	697b      	ldr	r3, [r7, #20]
 80188d4:	021b      	lsls	r3, r3, #8
 80188d6:	4313      	orrs	r3, r2
 80188d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188da:	4313      	orrs	r3, r2
 80188dc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80188de:	e007      	b.n	80188f0 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80188e0:	4b0b      	ldr	r3, [pc, #44]	; (8018910 <ip4addr_aton+0x248>)
 80188e2:	22f9      	movs	r2, #249	; 0xf9
 80188e4:	490b      	ldr	r1, [pc, #44]	; (8018914 <ip4addr_aton+0x24c>)
 80188e6:	480c      	ldr	r0, [pc, #48]	; (8018918 <ip4addr_aton+0x250>)
 80188e8:	f002 ffea 	bl	801b8c0 <iprintf>
      break;
 80188ec:	e000      	b.n	80188f0 <ip4addr_aton+0x228>
      break;
 80188ee:	bf00      	nop
  }
  if (addr) {
 80188f0:	683b      	ldr	r3, [r7, #0]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d005      	beq.n	8018902 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80188f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80188f8:	f7f3 feb9 	bl	800c66e <lwip_htonl>
 80188fc:	4602      	mov	r2, r0
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8018902:	2301      	movs	r3, #1
}
 8018904:	4618      	mov	r0, r3
 8018906:	3728      	adds	r7, #40	; 0x28
 8018908:	46bd      	mov	sp, r7
 801890a:	bd80      	pop	{r7, pc}
 801890c:	08020b58 	.word	0x08020b58
 8018910:	08020624 	.word	0x08020624
 8018914:	08020660 	.word	0x08020660
 8018918:	0802066c 	.word	0x0802066c

0801891c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b084      	sub	sp, #16
 8018920:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018922:	2300      	movs	r3, #0
 8018924:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018926:	4b12      	ldr	r3, [pc, #72]	; (8018970 <ip_reass_tmr+0x54>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801892c:	e018      	b.n	8018960 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	7fdb      	ldrb	r3, [r3, #31]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d00b      	beq.n	801894e <ip_reass_tmr+0x32>
      r->timer--;
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	7fdb      	ldrb	r3, [r3, #31]
 801893a:	3b01      	subs	r3, #1
 801893c:	b2da      	uxtb	r2, r3
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	60fb      	str	r3, [r7, #12]
 801894c:	e008      	b.n	8018960 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018958:	68b9      	ldr	r1, [r7, #8]
 801895a:	6878      	ldr	r0, [r7, #4]
 801895c:	f000 f80a 	bl	8018974 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d1e3      	bne.n	801892e <ip_reass_tmr+0x12>
    }
  }
}
 8018966:	bf00      	nop
 8018968:	bf00      	nop
 801896a:	3710      	adds	r7, #16
 801896c:	46bd      	mov	sp, r7
 801896e:	bd80      	pop	{r7, pc}
 8018970:	20008c24 	.word	0x20008c24

08018974 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b088      	sub	sp, #32
 8018978:	af00      	add	r7, sp, #0
 801897a:	6078      	str	r0, [r7, #4]
 801897c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801897e:	2300      	movs	r3, #0
 8018980:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018982:	683a      	ldr	r2, [r7, #0]
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	429a      	cmp	r2, r3
 8018988:	d105      	bne.n	8018996 <ip_reass_free_complete_datagram+0x22>
 801898a:	4b45      	ldr	r3, [pc, #276]	; (8018aa0 <ip_reass_free_complete_datagram+0x12c>)
 801898c:	22ab      	movs	r2, #171	; 0xab
 801898e:	4945      	ldr	r1, [pc, #276]	; (8018aa4 <ip_reass_free_complete_datagram+0x130>)
 8018990:	4845      	ldr	r0, [pc, #276]	; (8018aa8 <ip_reass_free_complete_datagram+0x134>)
 8018992:	f002 ff95 	bl	801b8c0 <iprintf>
  if (prev != NULL) {
 8018996:	683b      	ldr	r3, [r7, #0]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d00a      	beq.n	80189b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801899c:	683b      	ldr	r3, [r7, #0]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	687a      	ldr	r2, [r7, #4]
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d005      	beq.n	80189b2 <ip_reass_free_complete_datagram+0x3e>
 80189a6:	4b3e      	ldr	r3, [pc, #248]	; (8018aa0 <ip_reass_free_complete_datagram+0x12c>)
 80189a8:	22ad      	movs	r2, #173	; 0xad
 80189aa:	4940      	ldr	r1, [pc, #256]	; (8018aac <ip_reass_free_complete_datagram+0x138>)
 80189ac:	483e      	ldr	r0, [pc, #248]	; (8018aa8 <ip_reass_free_complete_datagram+0x134>)
 80189ae:	f002 ff87 	bl	801b8c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	685b      	ldr	r3, [r3, #4]
 80189b6:	685b      	ldr	r3, [r3, #4]
 80189b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80189ba:	697b      	ldr	r3, [r7, #20]
 80189bc:	889b      	ldrh	r3, [r3, #4]
 80189be:	b29b      	uxth	r3, r3
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d12a      	bne.n	8018a1a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	685b      	ldr	r3, [r3, #4]
 80189c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80189ca:	697b      	ldr	r3, [r7, #20]
 80189cc:	681a      	ldr	r2, [r3, #0]
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80189d2:	69bb      	ldr	r3, [r7, #24]
 80189d4:	6858      	ldr	r0, [r3, #4]
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	3308      	adds	r3, #8
 80189da:	2214      	movs	r2, #20
 80189dc:	4619      	mov	r1, r3
 80189de:	f002 ff59 	bl	801b894 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80189e2:	2101      	movs	r1, #1
 80189e4:	69b8      	ldr	r0, [r7, #24]
 80189e6:	f7ff faeb 	bl	8017fc0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80189ea:	69b8      	ldr	r0, [r7, #24]
 80189ec:	f7f5 faa2 	bl	800df34 <pbuf_clen>
 80189f0:	4603      	mov	r3, r0
 80189f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80189f4:	8bfa      	ldrh	r2, [r7, #30]
 80189f6:	8a7b      	ldrh	r3, [r7, #18]
 80189f8:	4413      	add	r3, r2
 80189fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80189fe:	db05      	blt.n	8018a0c <ip_reass_free_complete_datagram+0x98>
 8018a00:	4b27      	ldr	r3, [pc, #156]	; (8018aa0 <ip_reass_free_complete_datagram+0x12c>)
 8018a02:	22bc      	movs	r2, #188	; 0xbc
 8018a04:	492a      	ldr	r1, [pc, #168]	; (8018ab0 <ip_reass_free_complete_datagram+0x13c>)
 8018a06:	4828      	ldr	r0, [pc, #160]	; (8018aa8 <ip_reass_free_complete_datagram+0x134>)
 8018a08:	f002 ff5a 	bl	801b8c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018a0c:	8bfa      	ldrh	r2, [r7, #30]
 8018a0e:	8a7b      	ldrh	r3, [r7, #18]
 8018a10:	4413      	add	r3, r2
 8018a12:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018a14:	69b8      	ldr	r0, [r7, #24]
 8018a16:	f7f5 f9ff 	bl	800de18 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	685b      	ldr	r3, [r3, #4]
 8018a1e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018a20:	e01f      	b.n	8018a62 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018a22:	69bb      	ldr	r3, [r7, #24]
 8018a24:	685b      	ldr	r3, [r3, #4]
 8018a26:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018a28:	69bb      	ldr	r3, [r7, #24]
 8018a2a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018a32:	68f8      	ldr	r0, [r7, #12]
 8018a34:	f7f5 fa7e 	bl	800df34 <pbuf_clen>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018a3c:	8bfa      	ldrh	r2, [r7, #30]
 8018a3e:	8a7b      	ldrh	r3, [r7, #18]
 8018a40:	4413      	add	r3, r2
 8018a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018a46:	db05      	blt.n	8018a54 <ip_reass_free_complete_datagram+0xe0>
 8018a48:	4b15      	ldr	r3, [pc, #84]	; (8018aa0 <ip_reass_free_complete_datagram+0x12c>)
 8018a4a:	22cc      	movs	r2, #204	; 0xcc
 8018a4c:	4918      	ldr	r1, [pc, #96]	; (8018ab0 <ip_reass_free_complete_datagram+0x13c>)
 8018a4e:	4816      	ldr	r0, [pc, #88]	; (8018aa8 <ip_reass_free_complete_datagram+0x134>)
 8018a50:	f002 ff36 	bl	801b8c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018a54:	8bfa      	ldrh	r2, [r7, #30]
 8018a56:	8a7b      	ldrh	r3, [r7, #18]
 8018a58:	4413      	add	r3, r2
 8018a5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018a5c:	68f8      	ldr	r0, [r7, #12]
 8018a5e:	f7f5 f9db 	bl	800de18 <pbuf_free>
  while (p != NULL) {
 8018a62:	69bb      	ldr	r3, [r7, #24]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d1dc      	bne.n	8018a22 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018a68:	6839      	ldr	r1, [r7, #0]
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	f000 f8c2 	bl	8018bf4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018a70:	4b10      	ldr	r3, [pc, #64]	; (8018ab4 <ip_reass_free_complete_datagram+0x140>)
 8018a72:	881b      	ldrh	r3, [r3, #0]
 8018a74:	8bfa      	ldrh	r2, [r7, #30]
 8018a76:	429a      	cmp	r2, r3
 8018a78:	d905      	bls.n	8018a86 <ip_reass_free_complete_datagram+0x112>
 8018a7a:	4b09      	ldr	r3, [pc, #36]	; (8018aa0 <ip_reass_free_complete_datagram+0x12c>)
 8018a7c:	22d2      	movs	r2, #210	; 0xd2
 8018a7e:	490e      	ldr	r1, [pc, #56]	; (8018ab8 <ip_reass_free_complete_datagram+0x144>)
 8018a80:	4809      	ldr	r0, [pc, #36]	; (8018aa8 <ip_reass_free_complete_datagram+0x134>)
 8018a82:	f002 ff1d 	bl	801b8c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018a86:	4b0b      	ldr	r3, [pc, #44]	; (8018ab4 <ip_reass_free_complete_datagram+0x140>)
 8018a88:	881a      	ldrh	r2, [r3, #0]
 8018a8a:	8bfb      	ldrh	r3, [r7, #30]
 8018a8c:	1ad3      	subs	r3, r2, r3
 8018a8e:	b29a      	uxth	r2, r3
 8018a90:	4b08      	ldr	r3, [pc, #32]	; (8018ab4 <ip_reass_free_complete_datagram+0x140>)
 8018a92:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018a94:	8bfb      	ldrh	r3, [r7, #30]
}
 8018a96:	4618      	mov	r0, r3
 8018a98:	3720      	adds	r7, #32
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	bd80      	pop	{r7, pc}
 8018a9e:	bf00      	nop
 8018aa0:	08020694 	.word	0x08020694
 8018aa4:	080206d0 	.word	0x080206d0
 8018aa8:	080206dc 	.word	0x080206dc
 8018aac:	08020704 	.word	0x08020704
 8018ab0:	08020718 	.word	0x08020718
 8018ab4:	20008c28 	.word	0x20008c28
 8018ab8:	08020738 	.word	0x08020738

08018abc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b08a      	sub	sp, #40	; 0x28
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
 8018ac4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018aca:	2300      	movs	r3, #0
 8018acc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018ace:	2300      	movs	r3, #0
 8018ad0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018ada:	4b28      	ldr	r3, [pc, #160]	; (8018b7c <ip_reass_remove_oldest_datagram+0xc0>)
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018ae0:	e030      	b.n	8018b44 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ae4:	695a      	ldr	r2, [r3, #20]
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	68db      	ldr	r3, [r3, #12]
 8018aea:	429a      	cmp	r2, r3
 8018aec:	d10c      	bne.n	8018b08 <ip_reass_remove_oldest_datagram+0x4c>
 8018aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018af0:	699a      	ldr	r2, [r3, #24]
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	691b      	ldr	r3, [r3, #16]
 8018af6:	429a      	cmp	r2, r3
 8018af8:	d106      	bne.n	8018b08 <ip_reass_remove_oldest_datagram+0x4c>
 8018afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018afc:	899a      	ldrh	r2, [r3, #12]
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	889b      	ldrh	r3, [r3, #4]
 8018b02:	b29b      	uxth	r3, r3
 8018b04:	429a      	cmp	r2, r3
 8018b06:	d014      	beq.n	8018b32 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018b08:	693b      	ldr	r3, [r7, #16]
 8018b0a:	3301      	adds	r3, #1
 8018b0c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018b0e:	6a3b      	ldr	r3, [r7, #32]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d104      	bne.n	8018b1e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b16:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018b18:	69fb      	ldr	r3, [r7, #28]
 8018b1a:	61bb      	str	r3, [r7, #24]
 8018b1c:	e009      	b.n	8018b32 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b20:	7fda      	ldrb	r2, [r3, #31]
 8018b22:	6a3b      	ldr	r3, [r7, #32]
 8018b24:	7fdb      	ldrb	r3, [r3, #31]
 8018b26:	429a      	cmp	r2, r3
 8018b28:	d803      	bhi.n	8018b32 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b2c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018b2e:	69fb      	ldr	r3, [r7, #28]
 8018b30:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d001      	beq.n	8018b3e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b3c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d1cb      	bne.n	8018ae2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018b4a:	6a3b      	ldr	r3, [r7, #32]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d008      	beq.n	8018b62 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018b50:	69b9      	ldr	r1, [r7, #24]
 8018b52:	6a38      	ldr	r0, [r7, #32]
 8018b54:	f7ff ff0e 	bl	8018974 <ip_reass_free_complete_datagram>
 8018b58:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018b5a:	697a      	ldr	r2, [r7, #20]
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	4413      	add	r3, r2
 8018b60:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018b62:	697a      	ldr	r2, [r7, #20]
 8018b64:	683b      	ldr	r3, [r7, #0]
 8018b66:	429a      	cmp	r2, r3
 8018b68:	da02      	bge.n	8018b70 <ip_reass_remove_oldest_datagram+0xb4>
 8018b6a:	693b      	ldr	r3, [r7, #16]
 8018b6c:	2b01      	cmp	r3, #1
 8018b6e:	dcac      	bgt.n	8018aca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018b70:	697b      	ldr	r3, [r7, #20]
}
 8018b72:	4618      	mov	r0, r3
 8018b74:	3728      	adds	r7, #40	; 0x28
 8018b76:	46bd      	mov	sp, r7
 8018b78:	bd80      	pop	{r7, pc}
 8018b7a:	bf00      	nop
 8018b7c:	20008c24 	.word	0x20008c24

08018b80 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b084      	sub	sp, #16
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
 8018b88:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018b8a:	2004      	movs	r0, #4
 8018b8c:	f7f4 fa10 	bl	800cfb0 <memp_malloc>
 8018b90:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d110      	bne.n	8018bba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018b98:	6839      	ldr	r1, [r7, #0]
 8018b9a:	6878      	ldr	r0, [r7, #4]
 8018b9c:	f7ff ff8e 	bl	8018abc <ip_reass_remove_oldest_datagram>
 8018ba0:	4602      	mov	r2, r0
 8018ba2:	683b      	ldr	r3, [r7, #0]
 8018ba4:	4293      	cmp	r3, r2
 8018ba6:	dc03      	bgt.n	8018bb0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018ba8:	2004      	movs	r0, #4
 8018baa:	f7f4 fa01 	bl	800cfb0 <memp_malloc>
 8018bae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d101      	bne.n	8018bba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	e016      	b.n	8018be8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018bba:	2220      	movs	r2, #32
 8018bbc:	2100      	movs	r1, #0
 8018bbe:	68f8      	ldr	r0, [r7, #12]
 8018bc0:	f002 fe76 	bl	801b8b0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	220f      	movs	r2, #15
 8018bc8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018bca:	4b09      	ldr	r3, [pc, #36]	; (8018bf0 <ip_reass_enqueue_new_datagram+0x70>)
 8018bcc:	681a      	ldr	r2, [r3, #0]
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018bd2:	4a07      	ldr	r2, [pc, #28]	; (8018bf0 <ip_reass_enqueue_new_datagram+0x70>)
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	3308      	adds	r3, #8
 8018bdc:	2214      	movs	r2, #20
 8018bde:	6879      	ldr	r1, [r7, #4]
 8018be0:	4618      	mov	r0, r3
 8018be2:	f002 fe57 	bl	801b894 <memcpy>
  return ipr;
 8018be6:	68fb      	ldr	r3, [r7, #12]
}
 8018be8:	4618      	mov	r0, r3
 8018bea:	3710      	adds	r7, #16
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	20008c24 	.word	0x20008c24

08018bf4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b082      	sub	sp, #8
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
 8018bfc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018bfe:	4b10      	ldr	r3, [pc, #64]	; (8018c40 <ip_reass_dequeue_datagram+0x4c>)
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	687a      	ldr	r2, [r7, #4]
 8018c04:	429a      	cmp	r2, r3
 8018c06:	d104      	bne.n	8018c12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	4a0c      	ldr	r2, [pc, #48]	; (8018c40 <ip_reass_dequeue_datagram+0x4c>)
 8018c0e:	6013      	str	r3, [r2, #0]
 8018c10:	e00d      	b.n	8018c2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018c12:	683b      	ldr	r3, [r7, #0]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d106      	bne.n	8018c26 <ip_reass_dequeue_datagram+0x32>
 8018c18:	4b0a      	ldr	r3, [pc, #40]	; (8018c44 <ip_reass_dequeue_datagram+0x50>)
 8018c1a:	f240 1245 	movw	r2, #325	; 0x145
 8018c1e:	490a      	ldr	r1, [pc, #40]	; (8018c48 <ip_reass_dequeue_datagram+0x54>)
 8018c20:	480a      	ldr	r0, [pc, #40]	; (8018c4c <ip_reass_dequeue_datagram+0x58>)
 8018c22:	f002 fe4d 	bl	801b8c0 <iprintf>
    prev->next = ipr->next;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	681a      	ldr	r2, [r3, #0]
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018c2e:	6879      	ldr	r1, [r7, #4]
 8018c30:	2004      	movs	r0, #4
 8018c32:	f7f4 fa0f 	bl	800d054 <memp_free>
}
 8018c36:	bf00      	nop
 8018c38:	3708      	adds	r7, #8
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd80      	pop	{r7, pc}
 8018c3e:	bf00      	nop
 8018c40:	20008c24 	.word	0x20008c24
 8018c44:	08020694 	.word	0x08020694
 8018c48:	0802075c 	.word	0x0802075c
 8018c4c:	080206dc 	.word	0x080206dc

08018c50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b08c      	sub	sp, #48	; 0x30
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	60f8      	str	r0, [r7, #12]
 8018c58:	60b9      	str	r1, [r7, #8]
 8018c5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018c60:	2301      	movs	r3, #1
 8018c62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018c64:	68bb      	ldr	r3, [r7, #8]
 8018c66:	685b      	ldr	r3, [r3, #4]
 8018c68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018c6a:	69fb      	ldr	r3, [r7, #28]
 8018c6c:	885b      	ldrh	r3, [r3, #2]
 8018c6e:	b29b      	uxth	r3, r3
 8018c70:	4618      	mov	r0, r3
 8018c72:	f7f3 fce7 	bl	800c644 <lwip_htons>
 8018c76:	4603      	mov	r3, r0
 8018c78:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018c7a:	69fb      	ldr	r3, [r7, #28]
 8018c7c:	781b      	ldrb	r3, [r3, #0]
 8018c7e:	f003 030f 	and.w	r3, r3, #15
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	009b      	lsls	r3, r3, #2
 8018c86:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018c88:	7e7b      	ldrb	r3, [r7, #25]
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	8b7a      	ldrh	r2, [r7, #26]
 8018c8e:	429a      	cmp	r2, r3
 8018c90:	d202      	bcs.n	8018c98 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c96:	e135      	b.n	8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018c98:	7e7b      	ldrb	r3, [r7, #25]
 8018c9a:	b29b      	uxth	r3, r3
 8018c9c:	8b7a      	ldrh	r2, [r7, #26]
 8018c9e:	1ad3      	subs	r3, r2, r3
 8018ca0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018ca2:	69fb      	ldr	r3, [r7, #28]
 8018ca4:	88db      	ldrh	r3, [r3, #6]
 8018ca6:	b29b      	uxth	r3, r3
 8018ca8:	4618      	mov	r0, r3
 8018caa:	f7f3 fccb 	bl	800c644 <lwip_htons>
 8018cae:	4603      	mov	r3, r0
 8018cb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018cb4:	b29b      	uxth	r3, r3
 8018cb6:	00db      	lsls	r3, r3, #3
 8018cb8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018cba:	68bb      	ldr	r3, [r7, #8]
 8018cbc:	685b      	ldr	r3, [r3, #4]
 8018cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	701a      	strb	r2, [r3, #0]
 8018cc6:	2200      	movs	r2, #0
 8018cc8:	705a      	strb	r2, [r3, #1]
 8018cca:	2200      	movs	r2, #0
 8018ccc:	709a      	strb	r2, [r3, #2]
 8018cce:	2200      	movs	r2, #0
 8018cd0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cd4:	8afa      	ldrh	r2, [r7, #22]
 8018cd6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018cd8:	8afa      	ldrh	r2, [r7, #22]
 8018cda:	8b7b      	ldrh	r3, [r7, #26]
 8018cdc:	4413      	add	r3, r2
 8018cde:	b29a      	uxth	r2, r3
 8018ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ce2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ce6:	88db      	ldrh	r3, [r3, #6]
 8018ce8:	b29b      	uxth	r3, r3
 8018cea:	8afa      	ldrh	r2, [r7, #22]
 8018cec:	429a      	cmp	r2, r3
 8018cee:	d902      	bls.n	8018cf6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018cf4:	e106      	b.n	8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	685b      	ldr	r3, [r3, #4]
 8018cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8018cfc:	e068      	b.n	8018dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d00:	685b      	ldr	r3, [r3, #4]
 8018d02:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d06:	889b      	ldrh	r3, [r3, #4]
 8018d08:	b29a      	uxth	r2, r3
 8018d0a:	693b      	ldr	r3, [r7, #16]
 8018d0c:	889b      	ldrh	r3, [r3, #4]
 8018d0e:	b29b      	uxth	r3, r3
 8018d10:	429a      	cmp	r2, r3
 8018d12:	d235      	bcs.n	8018d80 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d18:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d020      	beq.n	8018d62 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d22:	889b      	ldrh	r3, [r3, #4]
 8018d24:	b29a      	uxth	r2, r3
 8018d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d28:	88db      	ldrh	r3, [r3, #6]
 8018d2a:	b29b      	uxth	r3, r3
 8018d2c:	429a      	cmp	r2, r3
 8018d2e:	d307      	bcc.n	8018d40 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d32:	88db      	ldrh	r3, [r3, #6]
 8018d34:	b29a      	uxth	r2, r3
 8018d36:	693b      	ldr	r3, [r7, #16]
 8018d38:	889b      	ldrh	r3, [r3, #4]
 8018d3a:	b29b      	uxth	r3, r3
 8018d3c:	429a      	cmp	r2, r3
 8018d3e:	d902      	bls.n	8018d46 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d44:	e0de      	b.n	8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d48:	68ba      	ldr	r2, [r7, #8]
 8018d4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d4e:	88db      	ldrh	r3, [r3, #6]
 8018d50:	b29a      	uxth	r2, r3
 8018d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d54:	889b      	ldrh	r3, [r3, #4]
 8018d56:	b29b      	uxth	r3, r3
 8018d58:	429a      	cmp	r2, r3
 8018d5a:	d03d      	beq.n	8018dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018d5c:	2300      	movs	r3, #0
 8018d5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018d60:	e03a      	b.n	8018dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d64:	88db      	ldrh	r3, [r3, #6]
 8018d66:	b29a      	uxth	r2, r3
 8018d68:	693b      	ldr	r3, [r7, #16]
 8018d6a:	889b      	ldrh	r3, [r3, #4]
 8018d6c:	b29b      	uxth	r3, r3
 8018d6e:	429a      	cmp	r2, r3
 8018d70:	d902      	bls.n	8018d78 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d76:	e0c5      	b.n	8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	68ba      	ldr	r2, [r7, #8]
 8018d7c:	605a      	str	r2, [r3, #4]
      break;
 8018d7e:	e02b      	b.n	8018dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d82:	889b      	ldrh	r3, [r3, #4]
 8018d84:	b29a      	uxth	r2, r3
 8018d86:	693b      	ldr	r3, [r7, #16]
 8018d88:	889b      	ldrh	r3, [r3, #4]
 8018d8a:	b29b      	uxth	r3, r3
 8018d8c:	429a      	cmp	r2, r3
 8018d8e:	d102      	bne.n	8018d96 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d94:	e0b6      	b.n	8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d98:	889b      	ldrh	r3, [r3, #4]
 8018d9a:	b29a      	uxth	r2, r3
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	88db      	ldrh	r3, [r3, #6]
 8018da0:	b29b      	uxth	r3, r3
 8018da2:	429a      	cmp	r2, r3
 8018da4:	d202      	bcs.n	8018dac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018daa:	e0ab      	b.n	8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d009      	beq.n	8018dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018db4:	88db      	ldrh	r3, [r3, #6]
 8018db6:	b29a      	uxth	r2, r3
 8018db8:	693b      	ldr	r3, [r7, #16]
 8018dba:	889b      	ldrh	r3, [r3, #4]
 8018dbc:	b29b      	uxth	r3, r3
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	d001      	beq.n	8018dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018dc6:	693b      	ldr	r3, [r7, #16]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018dcc:	693b      	ldr	r3, [r7, #16]
 8018dce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d193      	bne.n	8018cfe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018dd6:	e000      	b.n	8018dda <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018dd8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d12d      	bne.n	8018e3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d01c      	beq.n	8018e20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018de8:	88db      	ldrh	r3, [r3, #6]
 8018dea:	b29a      	uxth	r2, r3
 8018dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dee:	889b      	ldrh	r3, [r3, #4]
 8018df0:	b29b      	uxth	r3, r3
 8018df2:	429a      	cmp	r2, r3
 8018df4:	d906      	bls.n	8018e04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018df6:	4b45      	ldr	r3, [pc, #276]	; (8018f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018df8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018dfc:	4944      	ldr	r1, [pc, #272]	; (8018f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018dfe:	4845      	ldr	r0, [pc, #276]	; (8018f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018e00:	f002 fd5e 	bl	801b8c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e06:	68ba      	ldr	r2, [r7, #8]
 8018e08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e0c:	88db      	ldrh	r3, [r3, #6]
 8018e0e:	b29a      	uxth	r2, r3
 8018e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e12:	889b      	ldrh	r3, [r3, #4]
 8018e14:	b29b      	uxth	r3, r3
 8018e16:	429a      	cmp	r2, r3
 8018e18:	d010      	beq.n	8018e3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	623b      	str	r3, [r7, #32]
 8018e1e:	e00d      	b.n	8018e3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	685b      	ldr	r3, [r3, #4]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d006      	beq.n	8018e36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018e28:	4b38      	ldr	r3, [pc, #224]	; (8018f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018e2a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018e2e:	493a      	ldr	r1, [pc, #232]	; (8018f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018e30:	4838      	ldr	r0, [pc, #224]	; (8018f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018e32:	f002 fd45 	bl	801b8c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	68ba      	ldr	r2, [r7, #8]
 8018e3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d105      	bne.n	8018e4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	7f9b      	ldrb	r3, [r3, #30]
 8018e46:	f003 0301 	and.w	r3, r3, #1
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d059      	beq.n	8018f02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018e4e:	6a3b      	ldr	r3, [r7, #32]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d04f      	beq.n	8018ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	685b      	ldr	r3, [r3, #4]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d006      	beq.n	8018e6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	685b      	ldr	r3, [r3, #4]
 8018e60:	685b      	ldr	r3, [r3, #4]
 8018e62:	889b      	ldrh	r3, [r3, #4]
 8018e64:	b29b      	uxth	r3, r3
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d002      	beq.n	8018e70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	623b      	str	r3, [r7, #32]
 8018e6e:	e041      	b.n	8018ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e72:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018e7a:	e012      	b.n	8018ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e7e:	685b      	ldr	r3, [r3, #4]
 8018e80:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e84:	88db      	ldrh	r3, [r3, #6]
 8018e86:	b29a      	uxth	r2, r3
 8018e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e8a:	889b      	ldrh	r3, [r3, #4]
 8018e8c:	b29b      	uxth	r3, r3
 8018e8e:	429a      	cmp	r2, r3
 8018e90:	d002      	beq.n	8018e98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018e92:	2300      	movs	r3, #0
 8018e94:	623b      	str	r3, [r7, #32]
            break;
 8018e96:	e007      	b.n	8018ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e9a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d1e9      	bne.n	8018e7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018ea8:	6a3b      	ldr	r3, [r7, #32]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d022      	beq.n	8018ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d106      	bne.n	8018ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018eb6:	4b15      	ldr	r3, [pc, #84]	; (8018f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018eb8:	f240 12df 	movw	r2, #479	; 0x1df
 8018ebc:	4917      	ldr	r1, [pc, #92]	; (8018f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018ebe:	4815      	ldr	r0, [pc, #84]	; (8018f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018ec0:	f002 fcfe 	bl	801b8c0 <iprintf>
          LWIP_ASSERT("sanity check",
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	685b      	ldr	r3, [r3, #4]
 8018ec8:	685b      	ldr	r3, [r3, #4]
 8018eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ecc:	429a      	cmp	r2, r3
 8018ece:	d106      	bne.n	8018ede <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018ed0:	4b0e      	ldr	r3, [pc, #56]	; (8018f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ed2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018ed6:	4911      	ldr	r1, [pc, #68]	; (8018f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018ed8:	480e      	ldr	r0, [pc, #56]	; (8018f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018eda:	f002 fcf1 	bl	801b8c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d006      	beq.n	8018ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018ee6:	4b09      	ldr	r3, [pc, #36]	; (8018f0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ee8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018eec:	490c      	ldr	r1, [pc, #48]	; (8018f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018eee:	4809      	ldr	r0, [pc, #36]	; (8018f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018ef0:	f002 fce6 	bl	801b8c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018ef4:	6a3b      	ldr	r3, [r7, #32]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	bf14      	ite	ne
 8018efa:	2301      	movne	r3, #1
 8018efc:	2300      	moveq	r3, #0
 8018efe:	b2db      	uxtb	r3, r3
 8018f00:	e000      	b.n	8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018f02:	2300      	movs	r3, #0
}
 8018f04:	4618      	mov	r0, r3
 8018f06:	3730      	adds	r7, #48	; 0x30
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	bd80      	pop	{r7, pc}
 8018f0c:	08020694 	.word	0x08020694
 8018f10:	08020778 	.word	0x08020778
 8018f14:	080206dc 	.word	0x080206dc
 8018f18:	08020798 	.word	0x08020798
 8018f1c:	080207d0 	.word	0x080207d0
 8018f20:	080207e0 	.word	0x080207e0

08018f24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b08e      	sub	sp, #56	; 0x38
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	685b      	ldr	r3, [r3, #4]
 8018f30:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f34:	781b      	ldrb	r3, [r3, #0]
 8018f36:	f003 030f 	and.w	r3, r3, #15
 8018f3a:	b2db      	uxtb	r3, r3
 8018f3c:	009b      	lsls	r3, r3, #2
 8018f3e:	b2db      	uxtb	r3, r3
 8018f40:	2b14      	cmp	r3, #20
 8018f42:	f040 8167 	bne.w	8019214 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f48:	88db      	ldrh	r3, [r3, #6]
 8018f4a:	b29b      	uxth	r3, r3
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f7f3 fb79 	bl	800c644 <lwip_htons>
 8018f52:	4603      	mov	r3, r0
 8018f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018f58:	b29b      	uxth	r3, r3
 8018f5a:	00db      	lsls	r3, r3, #3
 8018f5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f60:	885b      	ldrh	r3, [r3, #2]
 8018f62:	b29b      	uxth	r3, r3
 8018f64:	4618      	mov	r0, r3
 8018f66:	f7f3 fb6d 	bl	800c644 <lwip_htons>
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f70:	781b      	ldrb	r3, [r3, #0]
 8018f72:	f003 030f 	and.w	r3, r3, #15
 8018f76:	b2db      	uxtb	r3, r3
 8018f78:	009b      	lsls	r3, r3, #2
 8018f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018f86:	429a      	cmp	r2, r3
 8018f88:	f0c0 8146 	bcc.w	8019218 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018f90:	b29b      	uxth	r3, r3
 8018f92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018f94:	1ad3      	subs	r3, r2, r3
 8018f96:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018f98:	6878      	ldr	r0, [r7, #4]
 8018f9a:	f7f4 ffcb 	bl	800df34 <pbuf_clen>
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018fa2:	4b9f      	ldr	r3, [pc, #636]	; (8019220 <ip4_reass+0x2fc>)
 8018fa4:	881b      	ldrh	r3, [r3, #0]
 8018fa6:	461a      	mov	r2, r3
 8018fa8:	8c3b      	ldrh	r3, [r7, #32]
 8018faa:	4413      	add	r3, r2
 8018fac:	2b0a      	cmp	r3, #10
 8018fae:	dd10      	ble.n	8018fd2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018fb0:	8c3b      	ldrh	r3, [r7, #32]
 8018fb2:	4619      	mov	r1, r3
 8018fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fb6:	f7ff fd81 	bl	8018abc <ip_reass_remove_oldest_datagram>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	f000 812d 	beq.w	801921c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018fc2:	4b97      	ldr	r3, [pc, #604]	; (8019220 <ip4_reass+0x2fc>)
 8018fc4:	881b      	ldrh	r3, [r3, #0]
 8018fc6:	461a      	mov	r2, r3
 8018fc8:	8c3b      	ldrh	r3, [r7, #32]
 8018fca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018fcc:	2b0a      	cmp	r3, #10
 8018fce:	f300 8125 	bgt.w	801921c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018fd2:	4b94      	ldr	r3, [pc, #592]	; (8019224 <ip4_reass+0x300>)
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8018fd8:	e015      	b.n	8019006 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fdc:	695a      	ldr	r2, [r3, #20]
 8018fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe0:	68db      	ldr	r3, [r3, #12]
 8018fe2:	429a      	cmp	r2, r3
 8018fe4:	d10c      	bne.n	8019000 <ip4_reass+0xdc>
 8018fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fe8:	699a      	ldr	r2, [r3, #24]
 8018fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fec:	691b      	ldr	r3, [r3, #16]
 8018fee:	429a      	cmp	r2, r3
 8018ff0:	d106      	bne.n	8019000 <ip4_reass+0xdc>
 8018ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ff4:	899a      	ldrh	r2, [r3, #12]
 8018ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ff8:	889b      	ldrh	r3, [r3, #4]
 8018ffa:	b29b      	uxth	r3, r3
 8018ffc:	429a      	cmp	r2, r3
 8018ffe:	d006      	beq.n	801900e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	633b      	str	r3, [r7, #48]	; 0x30
 8019006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019008:	2b00      	cmp	r3, #0
 801900a:	d1e6      	bne.n	8018fda <ip4_reass+0xb6>
 801900c:	e000      	b.n	8019010 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801900e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019012:	2b00      	cmp	r3, #0
 8019014:	d109      	bne.n	801902a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019016:	8c3b      	ldrh	r3, [r7, #32]
 8019018:	4619      	mov	r1, r3
 801901a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801901c:	f7ff fdb0 	bl	8018b80 <ip_reass_enqueue_new_datagram>
 8019020:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019024:	2b00      	cmp	r3, #0
 8019026:	d11c      	bne.n	8019062 <ip4_reass+0x13e>
      goto nullreturn;
 8019028:	e109      	b.n	801923e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801902c:	88db      	ldrh	r3, [r3, #6]
 801902e:	b29b      	uxth	r3, r3
 8019030:	4618      	mov	r0, r3
 8019032:	f7f3 fb07 	bl	800c644 <lwip_htons>
 8019036:	4603      	mov	r3, r0
 8019038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801903c:	2b00      	cmp	r3, #0
 801903e:	d110      	bne.n	8019062 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019042:	89db      	ldrh	r3, [r3, #14]
 8019044:	4618      	mov	r0, r3
 8019046:	f7f3 fafd 	bl	800c644 <lwip_htons>
 801904a:	4603      	mov	r3, r0
 801904c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019050:	2b00      	cmp	r3, #0
 8019052:	d006      	beq.n	8019062 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019056:	3308      	adds	r3, #8
 8019058:	2214      	movs	r2, #20
 801905a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801905c:	4618      	mov	r0, r3
 801905e:	f002 fc19 	bl	801b894 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019064:	88db      	ldrh	r3, [r3, #6]
 8019066:	b29b      	uxth	r3, r3
 8019068:	f003 0320 	and.w	r3, r3, #32
 801906c:	2b00      	cmp	r3, #0
 801906e:	bf0c      	ite	eq
 8019070:	2301      	moveq	r3, #1
 8019072:	2300      	movne	r3, #0
 8019074:	b2db      	uxtb	r3, r3
 8019076:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019078:	69fb      	ldr	r3, [r7, #28]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d00e      	beq.n	801909c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801907e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019082:	4413      	add	r3, r2
 8019084:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019086:	8b7a      	ldrh	r2, [r7, #26]
 8019088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801908a:	429a      	cmp	r2, r3
 801908c:	f0c0 80a0 	bcc.w	80191d0 <ip4_reass+0x2ac>
 8019090:	8b7b      	ldrh	r3, [r7, #26]
 8019092:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019096:	4293      	cmp	r3, r2
 8019098:	f200 809a 	bhi.w	80191d0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801909c:	69fa      	ldr	r2, [r7, #28]
 801909e:	6879      	ldr	r1, [r7, #4]
 80190a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190a2:	f7ff fdd5 	bl	8018c50 <ip_reass_chain_frag_into_datagram_and_validate>
 80190a6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80190a8:	697b      	ldr	r3, [r7, #20]
 80190aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80190ae:	f000 8091 	beq.w	80191d4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80190b2:	4b5b      	ldr	r3, [pc, #364]	; (8019220 <ip4_reass+0x2fc>)
 80190b4:	881a      	ldrh	r2, [r3, #0]
 80190b6:	8c3b      	ldrh	r3, [r7, #32]
 80190b8:	4413      	add	r3, r2
 80190ba:	b29a      	uxth	r2, r3
 80190bc:	4b58      	ldr	r3, [pc, #352]	; (8019220 <ip4_reass+0x2fc>)
 80190be:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80190c0:	69fb      	ldr	r3, [r7, #28]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d00d      	beq.n	80190e2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80190c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80190c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190ca:	4413      	add	r3, r2
 80190cc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80190ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190d0:	8a7a      	ldrh	r2, [r7, #18]
 80190d2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80190d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190d6:	7f9b      	ldrb	r3, [r3, #30]
 80190d8:	f043 0301 	orr.w	r3, r3, #1
 80190dc:	b2da      	uxtb	r2, r3
 80190de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190e0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80190e2:	697b      	ldr	r3, [r7, #20]
 80190e4:	2b01      	cmp	r3, #1
 80190e6:	d171      	bne.n	80191cc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80190e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190ea:	8b9b      	ldrh	r3, [r3, #28]
 80190ec:	3314      	adds	r3, #20
 80190ee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80190f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190f2:	685b      	ldr	r3, [r3, #4]
 80190f4:	685b      	ldr	r3, [r3, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80190fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190fc:	685b      	ldr	r3, [r3, #4]
 80190fe:	685b      	ldr	r3, [r3, #4]
 8019100:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019104:	3308      	adds	r3, #8
 8019106:	2214      	movs	r2, #20
 8019108:	4619      	mov	r1, r3
 801910a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801910c:	f002 fbc2 	bl	801b894 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019110:	8a3b      	ldrh	r3, [r7, #16]
 8019112:	4618      	mov	r0, r3
 8019114:	f7f3 fa96 	bl	800c644 <lwip_htons>
 8019118:	4603      	mov	r3, r0
 801911a:	461a      	mov	r2, r3
 801911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801911e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019122:	2200      	movs	r2, #0
 8019124:	719a      	strb	r2, [r3, #6]
 8019126:	2200      	movs	r2, #0
 8019128:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801912c:	2200      	movs	r2, #0
 801912e:	729a      	strb	r2, [r3, #10]
 8019130:	2200      	movs	r2, #0
 8019132:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019136:	685b      	ldr	r3, [r3, #4]
 8019138:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801913a:	e00d      	b.n	8019158 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801913c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801913e:	685b      	ldr	r3, [r3, #4]
 8019140:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019142:	2114      	movs	r1, #20
 8019144:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019146:	f7f4 fdaf 	bl	800dca8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801914a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801914c:	6878      	ldr	r0, [r7, #4]
 801914e:	f7f4 ff31 	bl	800dfb4 <pbuf_cat>
      r = iprh->next_pbuf;
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801915a:	2b00      	cmp	r3, #0
 801915c:	d1ee      	bne.n	801913c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801915e:	4b31      	ldr	r3, [pc, #196]	; (8019224 <ip4_reass+0x300>)
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019164:	429a      	cmp	r2, r3
 8019166:	d102      	bne.n	801916e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019168:	2300      	movs	r3, #0
 801916a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801916c:	e010      	b.n	8019190 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801916e:	4b2d      	ldr	r3, [pc, #180]	; (8019224 <ip4_reass+0x300>)
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019174:	e007      	b.n	8019186 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801917c:	429a      	cmp	r2, r3
 801917e:	d006      	beq.n	801918e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019188:	2b00      	cmp	r3, #0
 801918a:	d1f4      	bne.n	8019176 <ip4_reass+0x252>
 801918c:	e000      	b.n	8019190 <ip4_reass+0x26c>
          break;
 801918e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019190:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019194:	f7ff fd2e 	bl	8018bf4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019198:	6878      	ldr	r0, [r7, #4]
 801919a:	f7f4 fecb 	bl	800df34 <pbuf_clen>
 801919e:	4603      	mov	r3, r0
 80191a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80191a2:	4b1f      	ldr	r3, [pc, #124]	; (8019220 <ip4_reass+0x2fc>)
 80191a4:	881b      	ldrh	r3, [r3, #0]
 80191a6:	8c3a      	ldrh	r2, [r7, #32]
 80191a8:	429a      	cmp	r2, r3
 80191aa:	d906      	bls.n	80191ba <ip4_reass+0x296>
 80191ac:	4b1e      	ldr	r3, [pc, #120]	; (8019228 <ip4_reass+0x304>)
 80191ae:	f240 229b 	movw	r2, #667	; 0x29b
 80191b2:	491e      	ldr	r1, [pc, #120]	; (801922c <ip4_reass+0x308>)
 80191b4:	481e      	ldr	r0, [pc, #120]	; (8019230 <ip4_reass+0x30c>)
 80191b6:	f002 fb83 	bl	801b8c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80191ba:	4b19      	ldr	r3, [pc, #100]	; (8019220 <ip4_reass+0x2fc>)
 80191bc:	881a      	ldrh	r2, [r3, #0]
 80191be:	8c3b      	ldrh	r3, [r7, #32]
 80191c0:	1ad3      	subs	r3, r2, r3
 80191c2:	b29a      	uxth	r2, r3
 80191c4:	4b16      	ldr	r3, [pc, #88]	; (8019220 <ip4_reass+0x2fc>)
 80191c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	e03c      	b.n	8019246 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80191cc:	2300      	movs	r3, #0
 80191ce:	e03a      	b.n	8019246 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80191d0:	bf00      	nop
 80191d2:	e000      	b.n	80191d6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80191d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80191d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d106      	bne.n	80191ea <ip4_reass+0x2c6>
 80191dc:	4b12      	ldr	r3, [pc, #72]	; (8019228 <ip4_reass+0x304>)
 80191de:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80191e2:	4914      	ldr	r1, [pc, #80]	; (8019234 <ip4_reass+0x310>)
 80191e4:	4812      	ldr	r0, [pc, #72]	; (8019230 <ip4_reass+0x30c>)
 80191e6:	f002 fb6b 	bl	801b8c0 <iprintf>
  if (ipr->p == NULL) {
 80191ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191ec:	685b      	ldr	r3, [r3, #4]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d124      	bne.n	801923c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80191f2:	4b0c      	ldr	r3, [pc, #48]	; (8019224 <ip4_reass+0x300>)
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80191f8:	429a      	cmp	r2, r3
 80191fa:	d006      	beq.n	801920a <ip4_reass+0x2e6>
 80191fc:	4b0a      	ldr	r3, [pc, #40]	; (8019228 <ip4_reass+0x304>)
 80191fe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019202:	490d      	ldr	r1, [pc, #52]	; (8019238 <ip4_reass+0x314>)
 8019204:	480a      	ldr	r0, [pc, #40]	; (8019230 <ip4_reass+0x30c>)
 8019206:	f002 fb5b 	bl	801b8c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801920a:	2100      	movs	r1, #0
 801920c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801920e:	f7ff fcf1 	bl	8018bf4 <ip_reass_dequeue_datagram>
 8019212:	e014      	b.n	801923e <ip4_reass+0x31a>
    goto nullreturn;
 8019214:	bf00      	nop
 8019216:	e012      	b.n	801923e <ip4_reass+0x31a>
    goto nullreturn;
 8019218:	bf00      	nop
 801921a:	e010      	b.n	801923e <ip4_reass+0x31a>
      goto nullreturn;
 801921c:	bf00      	nop
 801921e:	e00e      	b.n	801923e <ip4_reass+0x31a>
 8019220:	20008c28 	.word	0x20008c28
 8019224:	20008c24 	.word	0x20008c24
 8019228:	08020694 	.word	0x08020694
 801922c:	08020804 	.word	0x08020804
 8019230:	080206dc 	.word	0x080206dc
 8019234:	08020820 	.word	0x08020820
 8019238:	0802082c 	.word	0x0802082c
  }

nullreturn:
 801923c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801923e:	6878      	ldr	r0, [r7, #4]
 8019240:	f7f4 fdea 	bl	800de18 <pbuf_free>
  return NULL;
 8019244:	2300      	movs	r3, #0
}
 8019246:	4618      	mov	r0, r3
 8019248:	3738      	adds	r7, #56	; 0x38
 801924a:	46bd      	mov	sp, r7
 801924c:	bd80      	pop	{r7, pc}
 801924e:	bf00      	nop

08019250 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019250:	b580      	push	{r7, lr}
 8019252:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019254:	2005      	movs	r0, #5
 8019256:	f7f3 feab 	bl	800cfb0 <memp_malloc>
 801925a:	4603      	mov	r3, r0
}
 801925c:	4618      	mov	r0, r3
 801925e:	bd80      	pop	{r7, pc}

08019260 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b082      	sub	sp, #8
 8019264:	af00      	add	r7, sp, #0
 8019266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d106      	bne.n	801927c <ip_frag_free_pbuf_custom_ref+0x1c>
 801926e:	4b07      	ldr	r3, [pc, #28]	; (801928c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019270:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019274:	4906      	ldr	r1, [pc, #24]	; (8019290 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019276:	4807      	ldr	r0, [pc, #28]	; (8019294 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019278:	f002 fb22 	bl	801b8c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801927c:	6879      	ldr	r1, [r7, #4]
 801927e:	2005      	movs	r0, #5
 8019280:	f7f3 fee8 	bl	800d054 <memp_free>
}
 8019284:	bf00      	nop
 8019286:	3708      	adds	r7, #8
 8019288:	46bd      	mov	sp, r7
 801928a:	bd80      	pop	{r7, pc}
 801928c:	08020694 	.word	0x08020694
 8019290:	0802084c 	.word	0x0802084c
 8019294:	080206dc 	.word	0x080206dc

08019298 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b084      	sub	sp, #16
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d106      	bne.n	80192b8 <ipfrag_free_pbuf_custom+0x20>
 80192aa:	4b11      	ldr	r3, [pc, #68]	; (80192f0 <ipfrag_free_pbuf_custom+0x58>)
 80192ac:	f240 22ce 	movw	r2, #718	; 0x2ce
 80192b0:	4910      	ldr	r1, [pc, #64]	; (80192f4 <ipfrag_free_pbuf_custom+0x5c>)
 80192b2:	4811      	ldr	r0, [pc, #68]	; (80192f8 <ipfrag_free_pbuf_custom+0x60>)
 80192b4:	f002 fb04 	bl	801b8c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80192b8:	68fa      	ldr	r2, [r7, #12]
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	429a      	cmp	r2, r3
 80192be:	d006      	beq.n	80192ce <ipfrag_free_pbuf_custom+0x36>
 80192c0:	4b0b      	ldr	r3, [pc, #44]	; (80192f0 <ipfrag_free_pbuf_custom+0x58>)
 80192c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80192c6:	490d      	ldr	r1, [pc, #52]	; (80192fc <ipfrag_free_pbuf_custom+0x64>)
 80192c8:	480b      	ldr	r0, [pc, #44]	; (80192f8 <ipfrag_free_pbuf_custom+0x60>)
 80192ca:	f002 faf9 	bl	801b8c0 <iprintf>
  if (pcr->original != NULL) {
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	695b      	ldr	r3, [r3, #20]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d004      	beq.n	80192e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	695b      	ldr	r3, [r3, #20]
 80192da:	4618      	mov	r0, r3
 80192dc:	f7f4 fd9c 	bl	800de18 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80192e0:	68f8      	ldr	r0, [r7, #12]
 80192e2:	f7ff ffbd 	bl	8019260 <ip_frag_free_pbuf_custom_ref>
}
 80192e6:	bf00      	nop
 80192e8:	3710      	adds	r7, #16
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
 80192ee:	bf00      	nop
 80192f0:	08020694 	.word	0x08020694
 80192f4:	08020858 	.word	0x08020858
 80192f8:	080206dc 	.word	0x080206dc
 80192fc:	08020864 	.word	0x08020864

08019300 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019300:	b580      	push	{r7, lr}
 8019302:	b094      	sub	sp, #80	; 0x50
 8019304:	af02      	add	r7, sp, #8
 8019306:	60f8      	str	r0, [r7, #12]
 8019308:	60b9      	str	r1, [r7, #8]
 801930a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801930c:	2300      	movs	r3, #0
 801930e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019312:	68bb      	ldr	r3, [r7, #8]
 8019314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019316:	3b14      	subs	r3, #20
 8019318:	2b00      	cmp	r3, #0
 801931a:	da00      	bge.n	801931e <ip4_frag+0x1e>
 801931c:	3307      	adds	r3, #7
 801931e:	10db      	asrs	r3, r3, #3
 8019320:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019322:	2314      	movs	r3, #20
 8019324:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	685b      	ldr	r3, [r3, #4]
 801932a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801932e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019332:	781b      	ldrb	r3, [r3, #0]
 8019334:	f003 030f 	and.w	r3, r3, #15
 8019338:	b2db      	uxtb	r3, r3
 801933a:	009b      	lsls	r3, r3, #2
 801933c:	b2db      	uxtb	r3, r3
 801933e:	2b14      	cmp	r3, #20
 8019340:	d002      	beq.n	8019348 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019342:	f06f 0305 	mvn.w	r3, #5
 8019346:	e110      	b.n	801956a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	895b      	ldrh	r3, [r3, #10]
 801934c:	2b13      	cmp	r3, #19
 801934e:	d809      	bhi.n	8019364 <ip4_frag+0x64>
 8019350:	4b88      	ldr	r3, [pc, #544]	; (8019574 <ip4_frag+0x274>)
 8019352:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019356:	4988      	ldr	r1, [pc, #544]	; (8019578 <ip4_frag+0x278>)
 8019358:	4888      	ldr	r0, [pc, #544]	; (801957c <ip4_frag+0x27c>)
 801935a:	f002 fab1 	bl	801b8c0 <iprintf>
 801935e:	f06f 0305 	mvn.w	r3, #5
 8019362:	e102      	b.n	801956a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019366:	88db      	ldrh	r3, [r3, #6]
 8019368:	b29b      	uxth	r3, r3
 801936a:	4618      	mov	r0, r3
 801936c:	f7f3 f96a 	bl	800c644 <lwip_htons>
 8019370:	4603      	mov	r3, r0
 8019372:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019374:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019376:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801937a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801937e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019384:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	891b      	ldrh	r3, [r3, #8]
 801938a:	3b14      	subs	r3, #20
 801938c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019390:	e0e1      	b.n	8019556 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019392:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019394:	00db      	lsls	r3, r3, #3
 8019396:	b29b      	uxth	r3, r3
 8019398:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801939c:	4293      	cmp	r3, r2
 801939e:	bf28      	it	cs
 80193a0:	4613      	movcs	r3, r2
 80193a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80193a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80193a8:	2114      	movs	r1, #20
 80193aa:	200e      	movs	r0, #14
 80193ac:	f7f4 fa1e 	bl	800d7ec <pbuf_alloc>
 80193b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80193b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	f000 80d5 	beq.w	8019564 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80193ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193bc:	895b      	ldrh	r3, [r3, #10]
 80193be:	2b13      	cmp	r3, #19
 80193c0:	d806      	bhi.n	80193d0 <ip4_frag+0xd0>
 80193c2:	4b6c      	ldr	r3, [pc, #432]	; (8019574 <ip4_frag+0x274>)
 80193c4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80193c8:	496d      	ldr	r1, [pc, #436]	; (8019580 <ip4_frag+0x280>)
 80193ca:	486c      	ldr	r0, [pc, #432]	; (801957c <ip4_frag+0x27c>)
 80193cc:	f002 fa78 	bl	801b8c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80193d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193d2:	685b      	ldr	r3, [r3, #4]
 80193d4:	2214      	movs	r2, #20
 80193d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80193d8:	4618      	mov	r0, r3
 80193da:	f002 fa5b 	bl	801b894 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80193de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193e0:	685b      	ldr	r3, [r3, #4]
 80193e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80193e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80193e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80193ea:	e064      	b.n	80194b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	895a      	ldrh	r2, [r3, #10]
 80193f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80193f2:	1ad3      	subs	r3, r2, r3
 80193f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	895b      	ldrh	r3, [r3, #10]
 80193fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80193fc:	429a      	cmp	r2, r3
 80193fe:	d906      	bls.n	801940e <ip4_frag+0x10e>
 8019400:	4b5c      	ldr	r3, [pc, #368]	; (8019574 <ip4_frag+0x274>)
 8019402:	f240 322d 	movw	r2, #813	; 0x32d
 8019406:	495f      	ldr	r1, [pc, #380]	; (8019584 <ip4_frag+0x284>)
 8019408:	485c      	ldr	r0, [pc, #368]	; (801957c <ip4_frag+0x27c>)
 801940a:	f002 fa59 	bl	801b8c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801940e:	8bfa      	ldrh	r2, [r7, #30]
 8019410:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019414:	4293      	cmp	r3, r2
 8019416:	bf28      	it	cs
 8019418:	4613      	movcs	r3, r2
 801941a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801941e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019422:	2b00      	cmp	r3, #0
 8019424:	d105      	bne.n	8019432 <ip4_frag+0x132>
        poff = 0;
 8019426:	2300      	movs	r3, #0
 8019428:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	60fb      	str	r3, [r7, #12]
        continue;
 8019430:	e041      	b.n	80194b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019432:	f7ff ff0d 	bl	8019250 <ip_frag_alloc_pbuf_custom_ref>
 8019436:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019438:	69bb      	ldr	r3, [r7, #24]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d103      	bne.n	8019446 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801943e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019440:	f7f4 fcea 	bl	800de18 <pbuf_free>
        goto memerr;
 8019444:	e08f      	b.n	8019566 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019446:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801944c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801944e:	4413      	add	r3, r2
 8019450:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019454:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019458:	9201      	str	r2, [sp, #4]
 801945a:	9300      	str	r3, [sp, #0]
 801945c:	4603      	mov	r3, r0
 801945e:	2241      	movs	r2, #65	; 0x41
 8019460:	2000      	movs	r0, #0
 8019462:	f7f4 faed 	bl	800da40 <pbuf_alloced_custom>
 8019466:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019468:	697b      	ldr	r3, [r7, #20]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d106      	bne.n	801947c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801946e:	69b8      	ldr	r0, [r7, #24]
 8019470:	f7ff fef6 	bl	8019260 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019476:	f7f4 fccf 	bl	800de18 <pbuf_free>
        goto memerr;
 801947a:	e074      	b.n	8019566 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801947c:	68f8      	ldr	r0, [r7, #12]
 801947e:	f7f4 fd71 	bl	800df64 <pbuf_ref>
      pcr->original = p;
 8019482:	69bb      	ldr	r3, [r7, #24]
 8019484:	68fa      	ldr	r2, [r7, #12]
 8019486:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019488:	69bb      	ldr	r3, [r7, #24]
 801948a:	4a3f      	ldr	r2, [pc, #252]	; (8019588 <ip4_frag+0x288>)
 801948c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801948e:	6979      	ldr	r1, [r7, #20]
 8019490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019492:	f7f4 fd8f 	bl	800dfb4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019496:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801949a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801949e:	1ad3      	subs	r3, r2, r3
 80194a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80194a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d004      	beq.n	80194b6 <ip4_frag+0x1b6>
        poff = 0;
 80194ac:	2300      	movs	r3, #0
 80194ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80194b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d196      	bne.n	80193ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80194be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80194c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80194c4:	4413      	add	r3, r2
 80194c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80194c8:	68bb      	ldr	r3, [r7, #8]
 80194ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80194cc:	f1a3 0213 	sub.w	r2, r3, #19
 80194d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80194d4:	429a      	cmp	r2, r3
 80194d6:	bfcc      	ite	gt
 80194d8:	2301      	movgt	r3, #1
 80194da:	2300      	movle	r3, #0
 80194dc:	b2db      	uxtb	r3, r3
 80194de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80194e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80194e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80194e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80194ea:	6a3b      	ldr	r3, [r7, #32]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d002      	beq.n	80194f6 <ip4_frag+0x1f6>
 80194f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d003      	beq.n	80194fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80194f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80194f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80194fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80194fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019500:	4618      	mov	r0, r3
 8019502:	f7f3 f89f 	bl	800c644 <lwip_htons>
 8019506:	4603      	mov	r3, r0
 8019508:	461a      	mov	r2, r3
 801950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801950c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801950e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019510:	3314      	adds	r3, #20
 8019512:	b29b      	uxth	r3, r3
 8019514:	4618      	mov	r0, r3
 8019516:	f7f3 f895 	bl	800c644 <lwip_htons>
 801951a:	4603      	mov	r3, r0
 801951c:	461a      	mov	r2, r3
 801951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019520:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019524:	2200      	movs	r2, #0
 8019526:	729a      	strb	r2, [r3, #10]
 8019528:	2200      	movs	r2, #0
 801952a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	695b      	ldr	r3, [r3, #20]
 8019530:	687a      	ldr	r2, [r7, #4]
 8019532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019534:	68b8      	ldr	r0, [r7, #8]
 8019536:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801953a:	f7f4 fc6d 	bl	800de18 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801953e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019544:	1ad3      	subs	r3, r2, r3
 8019546:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801954a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801954e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019550:	4413      	add	r3, r2
 8019552:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019556:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801955a:	2b00      	cmp	r3, #0
 801955c:	f47f af19 	bne.w	8019392 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019560:	2300      	movs	r3, #0
 8019562:	e002      	b.n	801956a <ip4_frag+0x26a>
      goto memerr;
 8019564:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801956a:	4618      	mov	r0, r3
 801956c:	3748      	adds	r7, #72	; 0x48
 801956e:	46bd      	mov	sp, r7
 8019570:	bd80      	pop	{r7, pc}
 8019572:	bf00      	nop
 8019574:	08020694 	.word	0x08020694
 8019578:	08020870 	.word	0x08020870
 801957c:	080206dc 	.word	0x080206dc
 8019580:	0802088c 	.word	0x0802088c
 8019584:	080208ac 	.word	0x080208ac
 8019588:	08019299 	.word	0x08019299

0801958c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801958c:	b580      	push	{r7, lr}
 801958e:	b086      	sub	sp, #24
 8019590:	af00      	add	r7, sp, #0
 8019592:	6078      	str	r0, [r7, #4]
 8019594:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019596:	230e      	movs	r3, #14
 8019598:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	895b      	ldrh	r3, [r3, #10]
 801959e:	2b0e      	cmp	r3, #14
 80195a0:	d96e      	bls.n	8019680 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	7bdb      	ldrb	r3, [r3, #15]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d106      	bne.n	80195b8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80195b0:	3301      	adds	r3, #1
 80195b2:	b2da      	uxtb	r2, r3
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	685b      	ldr	r3, [r3, #4]
 80195bc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80195be:	693b      	ldr	r3, [r7, #16]
 80195c0:	7b1a      	ldrb	r2, [r3, #12]
 80195c2:	7b5b      	ldrb	r3, [r3, #13]
 80195c4:	021b      	lsls	r3, r3, #8
 80195c6:	4313      	orrs	r3, r2
 80195c8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80195ca:	693b      	ldr	r3, [r7, #16]
 80195cc:	781b      	ldrb	r3, [r3, #0]
 80195ce:	f003 0301 	and.w	r3, r3, #1
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d023      	beq.n	801961e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80195d6:	693b      	ldr	r3, [r7, #16]
 80195d8:	781b      	ldrb	r3, [r3, #0]
 80195da:	2b01      	cmp	r3, #1
 80195dc:	d10f      	bne.n	80195fe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80195de:	693b      	ldr	r3, [r7, #16]
 80195e0:	785b      	ldrb	r3, [r3, #1]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d11b      	bne.n	801961e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80195e6:	693b      	ldr	r3, [r7, #16]
 80195e8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80195ea:	2b5e      	cmp	r3, #94	; 0x5e
 80195ec:	d117      	bne.n	801961e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	7b5b      	ldrb	r3, [r3, #13]
 80195f2:	f043 0310 	orr.w	r3, r3, #16
 80195f6:	b2da      	uxtb	r2, r3
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	735a      	strb	r2, [r3, #13]
 80195fc:	e00f      	b.n	801961e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80195fe:	693b      	ldr	r3, [r7, #16]
 8019600:	2206      	movs	r2, #6
 8019602:	4928      	ldr	r1, [pc, #160]	; (80196a4 <ethernet_input+0x118>)
 8019604:	4618      	mov	r0, r3
 8019606:	f002 f937 	bl	801b878 <memcmp>
 801960a:	4603      	mov	r3, r0
 801960c:	2b00      	cmp	r3, #0
 801960e:	d106      	bne.n	801961e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	7b5b      	ldrb	r3, [r3, #13]
 8019614:	f043 0308 	orr.w	r3, r3, #8
 8019618:	b2da      	uxtb	r2, r3
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801961e:	89fb      	ldrh	r3, [r7, #14]
 8019620:	2b08      	cmp	r3, #8
 8019622:	d003      	beq.n	801962c <ethernet_input+0xa0>
 8019624:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019628:	d014      	beq.n	8019654 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801962a:	e032      	b.n	8019692 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019632:	f003 0308 	and.w	r3, r3, #8
 8019636:	2b00      	cmp	r3, #0
 8019638:	d024      	beq.n	8019684 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801963a:	8afb      	ldrh	r3, [r7, #22]
 801963c:	4619      	mov	r1, r3
 801963e:	6878      	ldr	r0, [r7, #4]
 8019640:	f7f4 fb32 	bl	800dca8 <pbuf_remove_header>
 8019644:	4603      	mov	r3, r0
 8019646:	2b00      	cmp	r3, #0
 8019648:	d11e      	bne.n	8019688 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801964a:	6839      	ldr	r1, [r7, #0]
 801964c:	6878      	ldr	r0, [r7, #4]
 801964e:	f7fe fdcb 	bl	80181e8 <ip4_input>
      break;
 8019652:	e013      	b.n	801967c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019654:	683b      	ldr	r3, [r7, #0]
 8019656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801965a:	f003 0308 	and.w	r3, r3, #8
 801965e:	2b00      	cmp	r3, #0
 8019660:	d014      	beq.n	801968c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019662:	8afb      	ldrh	r3, [r7, #22]
 8019664:	4619      	mov	r1, r3
 8019666:	6878      	ldr	r0, [r7, #4]
 8019668:	f7f4 fb1e 	bl	800dca8 <pbuf_remove_header>
 801966c:	4603      	mov	r3, r0
 801966e:	2b00      	cmp	r3, #0
 8019670:	d10e      	bne.n	8019690 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019672:	6839      	ldr	r1, [r7, #0]
 8019674:	6878      	ldr	r0, [r7, #4]
 8019676:	f7fd ff67 	bl	8017548 <etharp_input>
      break;
 801967a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801967c:	2300      	movs	r3, #0
 801967e:	e00c      	b.n	801969a <ethernet_input+0x10e>
    goto free_and_return;
 8019680:	bf00      	nop
 8019682:	e006      	b.n	8019692 <ethernet_input+0x106>
        goto free_and_return;
 8019684:	bf00      	nop
 8019686:	e004      	b.n	8019692 <ethernet_input+0x106>
        goto free_and_return;
 8019688:	bf00      	nop
 801968a:	e002      	b.n	8019692 <ethernet_input+0x106>
        goto free_and_return;
 801968c:	bf00      	nop
 801968e:	e000      	b.n	8019692 <ethernet_input+0x106>
        goto free_and_return;
 8019690:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019692:	6878      	ldr	r0, [r7, #4]
 8019694:	f7f4 fbc0 	bl	800de18 <pbuf_free>
  return ERR_OK;
 8019698:	2300      	movs	r3, #0
}
 801969a:	4618      	mov	r0, r3
 801969c:	3718      	adds	r7, #24
 801969e:	46bd      	mov	sp, r7
 80196a0:	bd80      	pop	{r7, pc}
 80196a2:	bf00      	nop
 80196a4:	08020b40 	.word	0x08020b40

080196a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b086      	sub	sp, #24
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	60f8      	str	r0, [r7, #12]
 80196b0:	60b9      	str	r1, [r7, #8]
 80196b2:	607a      	str	r2, [r7, #4]
 80196b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80196b6:	8c3b      	ldrh	r3, [r7, #32]
 80196b8:	4618      	mov	r0, r3
 80196ba:	f7f2 ffc3 	bl	800c644 <lwip_htons>
 80196be:	4603      	mov	r3, r0
 80196c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80196c2:	210e      	movs	r1, #14
 80196c4:	68b8      	ldr	r0, [r7, #8]
 80196c6:	f7f4 fadf 	bl	800dc88 <pbuf_add_header>
 80196ca:	4603      	mov	r3, r0
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d125      	bne.n	801971c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80196d0:	68bb      	ldr	r3, [r7, #8]
 80196d2:	685b      	ldr	r3, [r3, #4]
 80196d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80196d6:	693b      	ldr	r3, [r7, #16]
 80196d8:	8afa      	ldrh	r2, [r7, #22]
 80196da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80196dc:	693b      	ldr	r3, [r7, #16]
 80196de:	2206      	movs	r2, #6
 80196e0:	6839      	ldr	r1, [r7, #0]
 80196e2:	4618      	mov	r0, r3
 80196e4:	f002 f8d6 	bl	801b894 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	3306      	adds	r3, #6
 80196ec:	2206      	movs	r2, #6
 80196ee:	6879      	ldr	r1, [r7, #4]
 80196f0:	4618      	mov	r0, r3
 80196f2:	f002 f8cf 	bl	801b894 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80196fc:	2b06      	cmp	r3, #6
 80196fe:	d006      	beq.n	801970e <ethernet_output+0x66>
 8019700:	4b0a      	ldr	r3, [pc, #40]	; (801972c <ethernet_output+0x84>)
 8019702:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019706:	490a      	ldr	r1, [pc, #40]	; (8019730 <ethernet_output+0x88>)
 8019708:	480a      	ldr	r0, [pc, #40]	; (8019734 <ethernet_output+0x8c>)
 801970a:	f002 f8d9 	bl	801b8c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	699b      	ldr	r3, [r3, #24]
 8019712:	68b9      	ldr	r1, [r7, #8]
 8019714:	68f8      	ldr	r0, [r7, #12]
 8019716:	4798      	blx	r3
 8019718:	4603      	mov	r3, r0
 801971a:	e002      	b.n	8019722 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801971c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801971e:	f06f 0301 	mvn.w	r3, #1
}
 8019722:	4618      	mov	r0, r3
 8019724:	3718      	adds	r7, #24
 8019726:	46bd      	mov	sp, r7
 8019728:	bd80      	pop	{r7, pc}
 801972a:	bf00      	nop
 801972c:	080208bc 	.word	0x080208bc
 8019730:	080208f4 	.word	0x080208f4
 8019734:	08020928 	.word	0x08020928

08019738 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b086      	sub	sp, #24
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
 8019740:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019742:	683b      	ldr	r3, [r7, #0]
 8019744:	60bb      	str	r3, [r7, #8]
 8019746:	2304      	movs	r3, #4
 8019748:	60fb      	str	r3, [r7, #12]
 801974a:	2300      	movs	r3, #0
 801974c:	613b      	str	r3, [r7, #16]
 801974e:	2300      	movs	r3, #0
 8019750:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019752:	f107 0308 	add.w	r3, r7, #8
 8019756:	2100      	movs	r1, #0
 8019758:	4618      	mov	r0, r3
 801975a:	f7ec fc34 	bl	8005fc6 <osMessageCreate>
 801975e:	4602      	mov	r2, r0
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d102      	bne.n	8019772 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801976c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019770:	e000      	b.n	8019774 <sys_mbox_new+0x3c>

  return ERR_OK;
 8019772:	2300      	movs	r3, #0
}
 8019774:	4618      	mov	r0, r3
 8019776:	3718      	adds	r7, #24
 8019778:	46bd      	mov	sp, r7
 801977a:	bd80      	pop	{r7, pc}

0801977c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b082      	sub	sp, #8
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	4618      	mov	r0, r3
 801978a:	f7ec fcf9 	bl	8006180 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	4618      	mov	r0, r3
 8019794:	f7ec fd0a 	bl	80061ac <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019798:	bf00      	nop
 801979a:	3708      	adds	r7, #8
 801979c:	46bd      	mov	sp, r7
 801979e:	bd80      	pop	{r7, pc}

080197a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b084      	sub	sp, #16
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]
 80197a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	6839      	ldr	r1, [r7, #0]
 80197b0:	2200      	movs	r2, #0
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7ec fc30 	bl	8006018 <osMessagePut>
 80197b8:	4603      	mov	r3, r0
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d102      	bne.n	80197c4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80197be:	2300      	movs	r3, #0
 80197c0:	73fb      	strb	r3, [r7, #15]
 80197c2:	e001      	b.n	80197c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80197c4:	23ff      	movs	r3, #255	; 0xff
 80197c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80197c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80197cc:	4618      	mov	r0, r3
 80197ce:	3710      	adds	r7, #16
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}

080197d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b08c      	sub	sp, #48	; 0x30
 80197d8:	af00      	add	r7, sp, #0
 80197da:	61f8      	str	r0, [r7, #28]
 80197dc:	61b9      	str	r1, [r7, #24]
 80197de:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80197e0:	f7ec fa1b 	bl	8005c1a <osKernelSysTick>
 80197e4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80197e6:	697b      	ldr	r3, [r7, #20]
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d017      	beq.n	801981c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80197ec:	69fb      	ldr	r3, [r7, #28]
 80197ee:	6819      	ldr	r1, [r3, #0]
 80197f0:	f107 0320 	add.w	r3, r7, #32
 80197f4:	697a      	ldr	r2, [r7, #20]
 80197f6:	4618      	mov	r0, r3
 80197f8:	f7ec fc4e 	bl	8006098 <osMessageGet>

    if(event.status == osEventMessage)
 80197fc:	6a3b      	ldr	r3, [r7, #32]
 80197fe:	2b10      	cmp	r3, #16
 8019800:	d109      	bne.n	8019816 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019804:	461a      	mov	r2, r3
 8019806:	69bb      	ldr	r3, [r7, #24]
 8019808:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801980a:	f7ec fa06 	bl	8005c1a <osKernelSysTick>
 801980e:	4602      	mov	r2, r0
 8019810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019812:	1ad3      	subs	r3, r2, r3
 8019814:	e019      	b.n	801984a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801981a:	e016      	b.n	801984a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801981c:	69fb      	ldr	r3, [r7, #28]
 801981e:	6819      	ldr	r1, [r3, #0]
 8019820:	463b      	mov	r3, r7
 8019822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019826:	4618      	mov	r0, r3
 8019828:	f7ec fc36 	bl	8006098 <osMessageGet>
 801982c:	f107 0320 	add.w	r3, r7, #32
 8019830:	463a      	mov	r2, r7
 8019832:	ca07      	ldmia	r2, {r0, r1, r2}
 8019834:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801983a:	461a      	mov	r2, r3
 801983c:	69bb      	ldr	r3, [r7, #24]
 801983e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019840:	f7ec f9eb 	bl	8005c1a <osKernelSysTick>
 8019844:	4602      	mov	r2, r0
 8019846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019848:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801984a:	4618      	mov	r0, r3
 801984c:	3730      	adds	r7, #48	; 0x30
 801984e:	46bd      	mov	sp, r7
 8019850:	bd80      	pop	{r7, pc}

08019852 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019852:	b580      	push	{r7, lr}
 8019854:	b086      	sub	sp, #24
 8019856:	af00      	add	r7, sp, #0
 8019858:	6078      	str	r0, [r7, #4]
 801985a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	6819      	ldr	r1, [r3, #0]
 8019860:	f107 030c 	add.w	r3, r7, #12
 8019864:	2200      	movs	r2, #0
 8019866:	4618      	mov	r0, r3
 8019868:	f7ec fc16 	bl	8006098 <osMessageGet>

  if(event.status == osEventMessage)
 801986c:	68fb      	ldr	r3, [r7, #12]
 801986e:	2b10      	cmp	r3, #16
 8019870:	d105      	bne.n	801987e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8019872:	693b      	ldr	r3, [r7, #16]
 8019874:	461a      	mov	r2, r3
 8019876:	683b      	ldr	r3, [r7, #0]
 8019878:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801987a:	2300      	movs	r3, #0
 801987c:	e001      	b.n	8019882 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801987e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8019882:	4618      	mov	r0, r3
 8019884:	3718      	adds	r7, #24
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}

0801988a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801988a:	b480      	push	{r7}
 801988c:	b083      	sub	sp, #12
 801988e:	af00      	add	r7, sp, #0
 8019890:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d101      	bne.n	801989e <sys_mbox_valid+0x14>
    return 0;
 801989a:	2300      	movs	r3, #0
 801989c:	e000      	b.n	80198a0 <sys_mbox_valid+0x16>
  else
    return 1;
 801989e:	2301      	movs	r3, #1
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	370c      	adds	r7, #12
 80198a4:	46bd      	mov	sp, r7
 80198a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198aa:	4770      	bx	lr

080198ac <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80198ac:	b480      	push	{r7}
 80198ae:	b083      	sub	sp, #12
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	2200      	movs	r2, #0
 80198b8:	601a      	str	r2, [r3, #0]
}
 80198ba:	bf00      	nop
 80198bc:	370c      	adds	r7, #12
 80198be:	46bd      	mov	sp, r7
 80198c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c4:	4770      	bx	lr

080198c6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80198c6:	b580      	push	{r7, lr}
 80198c8:	b084      	sub	sp, #16
 80198ca:	af00      	add	r7, sp, #0
 80198cc:	6078      	str	r0, [r7, #4]
 80198ce:	460b      	mov	r3, r1
 80198d0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80198d2:	2300      	movs	r3, #0
 80198d4:	60bb      	str	r3, [r7, #8]
 80198d6:	2300      	movs	r3, #0
 80198d8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80198da:	f107 0308 	add.w	r3, r7, #8
 80198de:	2101      	movs	r1, #1
 80198e0:	4618      	mov	r0, r3
 80198e2:	f7ec faa7 	bl	8005e34 <osSemaphoreCreate>
 80198e6:	4602      	mov	r2, r0
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d102      	bne.n	80198fa <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80198f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80198f8:	e009      	b.n	801990e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80198fa:	78fb      	ldrb	r3, [r7, #3]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d105      	bne.n	801990c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	2100      	movs	r1, #0
 8019906:	4618      	mov	r0, r3
 8019908:	f7ec fac6 	bl	8005e98 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801990c:	2300      	movs	r3, #0
}
 801990e:	4618      	mov	r0, r3
 8019910:	3710      	adds	r7, #16
 8019912:	46bd      	mov	sp, r7
 8019914:	bd80      	pop	{r7, pc}

08019916 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019916:	b580      	push	{r7, lr}
 8019918:	b084      	sub	sp, #16
 801991a:	af00      	add	r7, sp, #0
 801991c:	6078      	str	r0, [r7, #4]
 801991e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8019920:	f7ec f97b 	bl	8005c1a <osKernelSysTick>
 8019924:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019926:	683b      	ldr	r3, [r7, #0]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d011      	beq.n	8019950 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	6839      	ldr	r1, [r7, #0]
 8019932:	4618      	mov	r0, r3
 8019934:	f7ec fab0 	bl	8005e98 <osSemaphoreWait>
 8019938:	4603      	mov	r3, r0
 801993a:	2b00      	cmp	r3, #0
 801993c:	d105      	bne.n	801994a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801993e:	f7ec f96c 	bl	8005c1a <osKernelSysTick>
 8019942:	4602      	mov	r2, r0
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	1ad3      	subs	r3, r2, r3
 8019948:	e012      	b.n	8019970 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801994a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801994e:	e00f      	b.n	8019970 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8019950:	bf00      	nop
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801995a:	4618      	mov	r0, r3
 801995c:	f7ec fa9c 	bl	8005e98 <osSemaphoreWait>
 8019960:	4603      	mov	r3, r0
 8019962:	2b00      	cmp	r3, #0
 8019964:	d1f5      	bne.n	8019952 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8019966:	f7ec f958 	bl	8005c1a <osKernelSysTick>
 801996a:	4602      	mov	r2, r0
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019970:	4618      	mov	r0, r3
 8019972:	3710      	adds	r7, #16
 8019974:	46bd      	mov	sp, r7
 8019976:	bd80      	pop	{r7, pc}

08019978 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019978:	b580      	push	{r7, lr}
 801997a:	b082      	sub	sp, #8
 801997c:	af00      	add	r7, sp, #0
 801997e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	4618      	mov	r0, r3
 8019986:	f7ec fad5 	bl	8005f34 <osSemaphoreRelease>
}
 801998a:	bf00      	nop
 801998c:	3708      	adds	r7, #8
 801998e:	46bd      	mov	sp, r7
 8019990:	bd80      	pop	{r7, pc}

08019992 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019992:	b580      	push	{r7, lr}
 8019994:	b082      	sub	sp, #8
 8019996:	af00      	add	r7, sp, #0
 8019998:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	4618      	mov	r0, r3
 80199a0:	f7ec fafe 	bl	8005fa0 <osSemaphoreDelete>
}
 80199a4:	bf00      	nop
 80199a6:	3708      	adds	r7, #8
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}

080199ac <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80199ac:	b480      	push	{r7}
 80199ae:	b083      	sub	sp, #12
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d101      	bne.n	80199c0 <sys_sem_valid+0x14>
    return 0;
 80199bc:	2300      	movs	r3, #0
 80199be:	e000      	b.n	80199c2 <sys_sem_valid+0x16>
  else
    return 1;
 80199c0:	2301      	movs	r3, #1
}
 80199c2:	4618      	mov	r0, r3
 80199c4:	370c      	adds	r7, #12
 80199c6:	46bd      	mov	sp, r7
 80199c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199cc:	4770      	bx	lr

080199ce <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80199ce:	b480      	push	{r7}
 80199d0:	b083      	sub	sp, #12
 80199d2:	af00      	add	r7, sp, #0
 80199d4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	2200      	movs	r2, #0
 80199da:	601a      	str	r2, [r3, #0]
}
 80199dc:	bf00      	nop
 80199de:	370c      	adds	r7, #12
 80199e0:	46bd      	mov	sp, r7
 80199e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e6:	4770      	bx	lr

080199e8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80199e8:	b580      	push	{r7, lr}
 80199ea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80199ec:	4803      	ldr	r0, [pc, #12]	; (80199fc <sys_init+0x14>)
 80199ee:	f7ec f984 	bl	8005cfa <osMutexCreate>
 80199f2:	4603      	mov	r3, r0
 80199f4:	4a02      	ldr	r2, [pc, #8]	; (8019a00 <sys_init+0x18>)
 80199f6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80199f8:	bf00      	nop
 80199fa:	bd80      	pop	{r7, pc}
 80199fc:	08020b50 	.word	0x08020b50
 8019a00:	200106a8 	.word	0x200106a8

08019a04 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019a04:	b580      	push	{r7, lr}
 8019a06:	b084      	sub	sp, #16
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	60bb      	str	r3, [r7, #8]
 8019a10:	2300      	movs	r3, #0
 8019a12:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019a14:	f107 0308 	add.w	r3, r7, #8
 8019a18:	4618      	mov	r0, r3
 8019a1a:	f7ec f96e 	bl	8005cfa <osMutexCreate>
 8019a1e:	4602      	mov	r2, r0
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d102      	bne.n	8019a32 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019a30:	e000      	b.n	8019a34 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019a32:	2300      	movs	r3, #0
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	3710      	adds	r7, #16
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	bd80      	pop	{r7, pc}

08019a3c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b082      	sub	sp, #8
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f7ec f96d 	bl	8005d2c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019a52:	bf00      	nop
 8019a54:	3708      	adds	r7, #8
 8019a56:	46bd      	mov	sp, r7
 8019a58:	bd80      	pop	{r7, pc}

08019a5a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019a5a:	b580      	push	{r7, lr}
 8019a5c:	b082      	sub	sp, #8
 8019a5e:	af00      	add	r7, sp, #0
 8019a60:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	4618      	mov	r0, r3
 8019a68:	f7ec f9ae 	bl	8005dc8 <osMutexRelease>
}
 8019a6c:	bf00      	nop
 8019a6e:	3708      	adds	r7, #8
 8019a70:	46bd      	mov	sp, r7
 8019a72:	bd80      	pop	{r7, pc}

08019a74 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019a74:	b580      	push	{r7, lr}
 8019a76:	b08c      	sub	sp, #48	; 0x30
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	60f8      	str	r0, [r7, #12]
 8019a7c:	60b9      	str	r1, [r7, #8]
 8019a7e:	607a      	str	r2, [r7, #4]
 8019a80:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019a82:	f107 0314 	add.w	r3, r7, #20
 8019a86:	2200      	movs	r2, #0
 8019a88:	601a      	str	r2, [r3, #0]
 8019a8a:	605a      	str	r2, [r3, #4]
 8019a8c:	609a      	str	r2, [r3, #8]
 8019a8e:	60da      	str	r2, [r3, #12]
 8019a90:	611a      	str	r2, [r3, #16]
 8019a92:	615a      	str	r2, [r3, #20]
 8019a94:	619a      	str	r2, [r3, #24]
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	617b      	str	r3, [r7, #20]
 8019a9a:	68bb      	ldr	r3, [r7, #8]
 8019a9c:	61bb      	str	r3, [r7, #24]
 8019a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019aa0:	b21b      	sxth	r3, r3
 8019aa2:	83bb      	strh	r3, [r7, #28]
 8019aa4:	683b      	ldr	r3, [r7, #0]
 8019aa6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019aa8:	f107 0314 	add.w	r3, r7, #20
 8019aac:	6879      	ldr	r1, [r7, #4]
 8019aae:	4618      	mov	r0, r3
 8019ab0:	f7ec f8c3 	bl	8005c3a <osThreadCreate>
 8019ab4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	3730      	adds	r7, #48	; 0x30
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}
	...

08019ac0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019ac4:	4b04      	ldr	r3, [pc, #16]	; (8019ad8 <sys_arch_protect+0x18>)
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019acc:	4618      	mov	r0, r3
 8019ace:	f7ec f92d 	bl	8005d2c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019ad2:	2301      	movs	r3, #1
}
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	bd80      	pop	{r7, pc}
 8019ad8:	200106a8 	.word	0x200106a8

08019adc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b082      	sub	sp, #8
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019ae4:	4b04      	ldr	r3, [pc, #16]	; (8019af8 <sys_arch_unprotect+0x1c>)
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	4618      	mov	r0, r3
 8019aea:	f7ec f96d 	bl	8005dc8 <osMutexRelease>
}
 8019aee:	bf00      	nop
 8019af0:	3708      	adds	r7, #8
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd80      	pop	{r7, pc}
 8019af6:	bf00      	nop
 8019af8:	200106a8 	.word	0x200106a8

08019afc <NewMessageData>:
 *******************************************************************************/
#include <MQTTClient.h>
#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8019afc:	b480      	push	{r7}
 8019afe:	b085      	sub	sp, #20
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	60f8      	str	r0, [r7, #12]
 8019b04:	60b9      	str	r1, [r7, #8]
 8019b06:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	68ba      	ldr	r2, [r7, #8]
 8019b0c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	687a      	ldr	r2, [r7, #4]
 8019b12:	601a      	str	r2, [r3, #0]
}
 8019b14:	bf00      	nop
 8019b16:	3714      	adds	r7, #20
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b1e:	4770      	bx	lr

08019b20 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8019b20:	b480      	push	{r7}
 8019b22:	b083      	sub	sp, #12
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b30:	4293      	cmp	r3, r2
 8019b32:	d003      	beq.n	8019b3c <getNextPacketId+0x1c>
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	3301      	adds	r3, #1
 8019b3a:	e000      	b.n	8019b3e <getNextPacketId+0x1e>
 8019b3c:	2301      	movs	r3, #1
 8019b3e:	687a      	ldr	r2, [r7, #4]
 8019b40:	6013      	str	r3, [r2, #0]
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	681b      	ldr	r3, [r3, #0]
}
 8019b46:	4618      	mov	r0, r3
 8019b48:	370c      	adds	r7, #12
 8019b4a:	46bd      	mov	sp, r7
 8019b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b50:	4770      	bx	lr

08019b52 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8019b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b54:	b087      	sub	sp, #28
 8019b56:	af00      	add	r7, sp, #0
 8019b58:	60f8      	str	r0, [r7, #12]
 8019b5a:	60b9      	str	r1, [r7, #8]
 8019b5c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8019b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b62:	617b      	str	r3, [r7, #20]
        sent = 0;
 8019b64:	2300      	movs	r3, #0
 8019b66:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8019b68:	e018      	b.n	8019b9c <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b6e:	689c      	ldr	r4, [r3, #8]
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	691a      	ldr	r2, [r3, #16]
 8019b78:	693b      	ldr	r3, [r7, #16]
 8019b7a:	18d6      	adds	r6, r2, r3
 8019b7c:	6878      	ldr	r0, [r7, #4]
 8019b7e:	f000 fecd 	bl	801a91c <TimerLeftMS>
 8019b82:	4603      	mov	r3, r0
 8019b84:	68ba      	ldr	r2, [r7, #8]
 8019b86:	4631      	mov	r1, r6
 8019b88:	4628      	mov	r0, r5
 8019b8a:	47a0      	blx	r4
 8019b8c:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8019b8e:	697b      	ldr	r3, [r7, #20]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	db0e      	blt.n	8019bb2 <sendPacket+0x60>
            break;
        sent += rc;
 8019b94:	693a      	ldr	r2, [r7, #16]
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	4413      	add	r3, r2
 8019b9a:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8019b9c:	693a      	ldr	r2, [r7, #16]
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	429a      	cmp	r2, r3
 8019ba2:	da07      	bge.n	8019bb4 <sendPacket+0x62>
 8019ba4:	6878      	ldr	r0, [r7, #4]
 8019ba6:	f000 fe77 	bl	801a898 <TimerIsExpired>
 8019baa:	4603      	mov	r3, r0
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d0dc      	beq.n	8019b6a <sendPacket+0x18>
 8019bb0:	e000      	b.n	8019bb4 <sendPacket+0x62>
            break;
 8019bb2:	bf00      	nop
    }
    if (sent == length)
 8019bb4:	693a      	ldr	r2, [r7, #16]
 8019bb6:	68bb      	ldr	r3, [r7, #8]
 8019bb8:	429a      	cmp	r2, r3
 8019bba:	d10b      	bne.n	8019bd4 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully sent the packet
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	699b      	ldr	r3, [r3, #24]
 8019bc6:	4619      	mov	r1, r3
 8019bc8:	4610      	mov	r0, r2
 8019bca:	f000 fe8f 	bl	801a8ec <TimerCountdown>
        rc = MQTT_SUCCESS;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	617b      	str	r3, [r7, #20]
 8019bd2:	e002      	b.n	8019bda <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8019bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019bd8:	617b      	str	r3, [r7, #20]
    return rc;
 8019bda:	697b      	ldr	r3, [r7, #20]
}
 8019bdc:	4618      	mov	r0, r3
 8019bde:	371c      	adds	r7, #28
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019be4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8019be4:	b580      	push	{r7, lr}
 8019be6:	b086      	sub	sp, #24
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	60f8      	str	r0, [r7, #12]
 8019bec:	60b9      	str	r1, [r7, #8]
 8019bee:	607a      	str	r2, [r7, #4]
 8019bf0:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	68ba      	ldr	r2, [r7, #8]
 8019bf6:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	617b      	str	r3, [r7, #20]
 8019bfc:	e008      	b.n	8019c10 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	697a      	ldr	r2, [r7, #20]
 8019c02:	3205      	adds	r2, #5
 8019c04:	2100      	movs	r1, #0
 8019c06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8019c0a:	697b      	ldr	r3, [r7, #20]
 8019c0c:	3301      	adds	r3, #1
 8019c0e:	617b      	str	r3, [r7, #20]
 8019c10:	697b      	ldr	r3, [r7, #20]
 8019c12:	2b04      	cmp	r3, #4
 8019c14:	ddf3      	ble.n	8019bfe <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	687a      	ldr	r2, [r7, #4]
 8019c1a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	683a      	ldr	r2, [r7, #0]
 8019c20:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	6a3a      	ldr	r2, [r7, #32]
 8019c26:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c2c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c32:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	2200      	movs	r2, #0
 8019c38:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	2200      	movs	r2, #0
 8019c44:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	2200      	movs	r2, #0
 8019c4a:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 8019c4c:	68fb      	ldr	r3, [r7, #12]
 8019c4e:	2201      	movs	r2, #1
 8019c50:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	3358      	adds	r3, #88	; 0x58
 8019c56:	4618      	mov	r0, r3
 8019c58:	f000 fe76 	bl	801a948 <TimerInit>
    TimerInit(&c->last_received);
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	3360      	adds	r3, #96	; 0x60
 8019c60:	4618      	mov	r0, r3
 8019c62:	f000 fe71 	bl	801a948 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 8019c66:	bf00      	nop
 8019c68:	3718      	adds	r7, #24
 8019c6a:	46bd      	mov	sp, r7
 8019c6c:	bd80      	pop	{r7, pc}

08019c6e <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8019c6e:	b590      	push	{r4, r7, lr}
 8019c70:	b08b      	sub	sp, #44	; 0x2c
 8019c72:	af00      	add	r7, sp, #0
 8019c74:	60f8      	str	r0, [r7, #12]
 8019c76:	60b9      	str	r1, [r7, #8]
 8019c78:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8019c7a:	2301      	movs	r3, #1
 8019c7c:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8019c7e:	2300      	movs	r3, #0
 8019c80:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8019c82:	2304      	movs	r3, #4
 8019c84:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	2200      	movs	r2, #0
 8019c8a:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8019c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c90:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8019c92:	6a3b      	ldr	r3, [r7, #32]
 8019c94:	3301      	adds	r3, #1
 8019c96:	623b      	str	r3, [r7, #32]
 8019c98:	6a3a      	ldr	r2, [r7, #32]
 8019c9a:	69fb      	ldr	r3, [r7, #28]
 8019c9c:	429a      	cmp	r2, r3
 8019c9e:	dd03      	ble.n	8019ca8 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8019ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ca4:	61bb      	str	r3, [r7, #24]
            goto exit;
 8019ca6:	e021      	b.n	8019cec <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019cac:	685c      	ldr	r4, [r3, #4]
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8019cb2:	f107 0117 	add.w	r1, r7, #23
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	2201      	movs	r2, #1
 8019cba:	47a0      	blx	r4
 8019cbc:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8019cbe:	69bb      	ldr	r3, [r7, #24]
 8019cc0:	2b01      	cmp	r3, #1
 8019cc2:	d112      	bne.n	8019cea <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8019cc4:	68bb      	ldr	r3, [r7, #8]
 8019cc6:	681a      	ldr	r2, [r3, #0]
 8019cc8:	7dfb      	ldrb	r3, [r7, #23]
 8019cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019cd0:	fb01 f303 	mul.w	r3, r1, r3
 8019cd4:	441a      	add	r2, r3
 8019cd6:	68bb      	ldr	r3, [r7, #8]
 8019cd8:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8019cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cdc:	01db      	lsls	r3, r3, #7
 8019cde:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8019ce0:	7dfb      	ldrb	r3, [r7, #23]
 8019ce2:	b25b      	sxtb	r3, r3
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	dbd1      	blt.n	8019c8c <decodePacket+0x1e>
exit:
 8019ce8:	e000      	b.n	8019cec <decodePacket+0x7e>
            goto exit;
 8019cea:	bf00      	nop
    return len;
 8019cec:	6a3b      	ldr	r3, [r7, #32]
}
 8019cee:	4618      	mov	r0, r3
 8019cf0:	372c      	adds	r7, #44	; 0x2c
 8019cf2:	46bd      	mov	sp, r7
 8019cf4:	bd90      	pop	{r4, r7, pc}

08019cf6 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8019cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cf8:	b089      	sub	sp, #36	; 0x24
 8019cfa:	af00      	add	r7, sp, #0
 8019cfc:	60f8      	str	r0, [r7, #12]
 8019cfe:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8019d00:	2300      	movs	r3, #0
 8019d02:	617b      	str	r3, [r7, #20]
    int len = 0;
 8019d04:	2300      	movs	r3, #0
 8019d06:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8019d08:	2300      	movs	r3, #0
 8019d0a:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d10:	685c      	ldr	r4, [r3, #4]
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	695e      	ldr	r6, [r3, #20]
 8019d1a:	68b8      	ldr	r0, [r7, #8]
 8019d1c:	f000 fdfe 	bl	801a91c <TimerLeftMS>
 8019d20:	4603      	mov	r3, r0
 8019d22:	2201      	movs	r2, #1
 8019d24:	4631      	mov	r1, r6
 8019d26:	4628      	mov	r0, r5
 8019d28:	47a0      	blx	r4
 8019d2a:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 8019d2c:	69fb      	ldr	r3, [r7, #28]
 8019d2e:	2b01      	cmp	r3, #1
 8019d30:	d15d      	bne.n	8019dee <readPacket+0xf8>
        goto exit;

    len = 1;
 8019d32:	2301      	movs	r3, #1
 8019d34:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8019d36:	68b8      	ldr	r0, [r7, #8]
 8019d38:	f000 fdf0 	bl	801a91c <TimerLeftMS>
 8019d3c:	4602      	mov	r2, r0
 8019d3e:	f107 0310 	add.w	r3, r7, #16
 8019d42:	4619      	mov	r1, r3
 8019d44:	68f8      	ldr	r0, [r7, #12]
 8019d46:	f7ff ff92 	bl	8019c6e <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	695b      	ldr	r3, [r3, #20]
 8019d4e:	3301      	adds	r3, #1
 8019d50:	693a      	ldr	r2, [r7, #16]
 8019d52:	4611      	mov	r1, r2
 8019d54:	4618      	mov	r0, r3
 8019d56:	f001 f96f 	bl	801b038 <MQTTPacket_encode>
 8019d5a:	4602      	mov	r2, r0
 8019d5c:	69bb      	ldr	r3, [r7, #24]
 8019d5e:	4413      	add	r3, r2
 8019d60:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	68da      	ldr	r2, [r3, #12]
 8019d66:	69bb      	ldr	r3, [r7, #24]
 8019d68:	1ad3      	subs	r3, r2, r3
 8019d6a:	693a      	ldr	r2, [r7, #16]
 8019d6c:	4293      	cmp	r3, r2
 8019d6e:	d203      	bcs.n	8019d78 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8019d70:	f06f 0301 	mvn.w	r3, #1
 8019d74:	61fb      	str	r3, [r7, #28]
        goto exit;
 8019d76:	e03d      	b.n	8019df4 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 8019d78:	693b      	ldr	r3, [r7, #16]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	dd20      	ble.n	8019dc0 <readPacket+0xca>
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d82:	685c      	ldr	r4, [r3, #4]
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	695a      	ldr	r2, [r3, #20]
 8019d8c:	69bb      	ldr	r3, [r7, #24]
 8019d8e:	18d6      	adds	r6, r2, r3
 8019d90:	693b      	ldr	r3, [r7, #16]
 8019d92:	607b      	str	r3, [r7, #4]
 8019d94:	68b8      	ldr	r0, [r7, #8]
 8019d96:	f000 fdc1 	bl	801a91c <TimerLeftMS>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	687a      	ldr	r2, [r7, #4]
 8019d9e:	4631      	mov	r1, r6
 8019da0:	4628      	mov	r0, r5
 8019da2:	47a0      	blx	r4
 8019da4:	4602      	mov	r2, r0
 8019da6:	693b      	ldr	r3, [r7, #16]
 8019da8:	429a      	cmp	r2, r3
 8019daa:	bf14      	ite	ne
 8019dac:	2301      	movne	r3, #1
 8019dae:	2300      	moveq	r3, #0
 8019db0:	b2db      	uxtb	r3, r3
 8019db2:	61fb      	str	r3, [r7, #28]
 8019db4:	69fb      	ldr	r3, [r7, #28]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d002      	beq.n	8019dc0 <readPacket+0xca>
        rc = 0;
 8019dba:	2300      	movs	r3, #0
 8019dbc:	61fb      	str	r3, [r7, #28]
        goto exit;
 8019dbe:	e019      	b.n	8019df4 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	695b      	ldr	r3, [r3, #20]
 8019dc4:	781b      	ldrb	r3, [r3, #0]
 8019dc6:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8019dc8:	7d3b      	ldrb	r3, [r7, #20]
 8019dca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8019dce:	b2db      	uxtb	r3, r3
 8019dd0:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	699b      	ldr	r3, [r3, #24]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d00b      	beq.n	8019df2 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully received a packet
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	699b      	ldr	r3, [r3, #24]
 8019de4:	4619      	mov	r1, r3
 8019de6:	4610      	mov	r0, r2
 8019de8:	f000 fd80 	bl	801a8ec <TimerCountdown>
 8019dec:	e002      	b.n	8019df4 <readPacket+0xfe>
        goto exit;
 8019dee:	bf00      	nop
 8019df0:	e000      	b.n	8019df4 <readPacket+0xfe>
exit:
 8019df2:	bf00      	nop
    return rc;
 8019df4:	69fb      	ldr	r3, [r7, #28]
}
 8019df6:	4618      	mov	r0, r3
 8019df8:	3724      	adds	r7, #36	; 0x24
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019dfe <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8019dfe:	b480      	push	{r7}
 8019e00:	b087      	sub	sp, #28
 8019e02:	af00      	add	r7, sp, #0
 8019e04:	6078      	str	r0, [r7, #4]
 8019e06:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	689b      	ldr	r3, [r3, #8]
 8019e10:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8019e12:	683b      	ldr	r3, [r7, #0]
 8019e14:	685b      	ldr	r3, [r3, #4]
 8019e16:	461a      	mov	r2, r3
 8019e18:	693b      	ldr	r3, [r7, #16]
 8019e1a:	4413      	add	r3, r2
 8019e1c:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8019e1e:	e039      	b.n	8019e94 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8019e20:	693b      	ldr	r3, [r7, #16]
 8019e22:	781b      	ldrb	r3, [r3, #0]
 8019e24:	2b2f      	cmp	r3, #47	; 0x2f
 8019e26:	d103      	bne.n	8019e30 <isTopicMatched+0x32>
 8019e28:	697b      	ldr	r3, [r7, #20]
 8019e2a:	781b      	ldrb	r3, [r3, #0]
 8019e2c:	2b2f      	cmp	r3, #47	; 0x2f
 8019e2e:	d13a      	bne.n	8019ea6 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8019e30:	697b      	ldr	r3, [r7, #20]
 8019e32:	781b      	ldrb	r3, [r3, #0]
 8019e34:	2b2b      	cmp	r3, #43	; 0x2b
 8019e36:	d009      	beq.n	8019e4c <isTopicMatched+0x4e>
 8019e38:	697b      	ldr	r3, [r7, #20]
 8019e3a:	781b      	ldrb	r3, [r3, #0]
 8019e3c:	2b23      	cmp	r3, #35	; 0x23
 8019e3e:	d005      	beq.n	8019e4c <isTopicMatched+0x4e>
 8019e40:	697b      	ldr	r3, [r7, #20]
 8019e42:	781a      	ldrb	r2, [r3, #0]
 8019e44:	693b      	ldr	r3, [r7, #16]
 8019e46:	781b      	ldrb	r3, [r3, #0]
 8019e48:	429a      	cmp	r2, r3
 8019e4a:	d12e      	bne.n	8019eaa <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	781b      	ldrb	r3, [r3, #0]
 8019e50:	2b2b      	cmp	r3, #43	; 0x2b
 8019e52:	d112      	bne.n	8019e7a <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8019e54:	693b      	ldr	r3, [r7, #16]
 8019e56:	3301      	adds	r3, #1
 8019e58:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8019e5a:	e005      	b.n	8019e68 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8019e5c:	693b      	ldr	r3, [r7, #16]
 8019e5e:	3301      	adds	r3, #1
 8019e60:	613b      	str	r3, [r7, #16]
 8019e62:	693b      	ldr	r3, [r7, #16]
 8019e64:	3301      	adds	r3, #1
 8019e66:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8019e68:	68fa      	ldr	r2, [r7, #12]
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	429a      	cmp	r2, r3
 8019e6e:	d20b      	bcs.n	8019e88 <isTopicMatched+0x8a>
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	781b      	ldrb	r3, [r3, #0]
 8019e74:	2b2f      	cmp	r3, #47	; 0x2f
 8019e76:	d1f1      	bne.n	8019e5c <isTopicMatched+0x5e>
 8019e78:	e006      	b.n	8019e88 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8019e7a:	697b      	ldr	r3, [r7, #20]
 8019e7c:	781b      	ldrb	r3, [r3, #0]
 8019e7e:	2b23      	cmp	r3, #35	; 0x23
 8019e80:	d102      	bne.n	8019e88 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8019e82:	68bb      	ldr	r3, [r7, #8]
 8019e84:	3b01      	subs	r3, #1
 8019e86:	613b      	str	r3, [r7, #16]
        curf++;
 8019e88:	697b      	ldr	r3, [r7, #20]
 8019e8a:	3301      	adds	r3, #1
 8019e8c:	617b      	str	r3, [r7, #20]
        curn++;
 8019e8e:	693b      	ldr	r3, [r7, #16]
 8019e90:	3301      	adds	r3, #1
 8019e92:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8019e94:	697b      	ldr	r3, [r7, #20]
 8019e96:	781b      	ldrb	r3, [r3, #0]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d007      	beq.n	8019eac <isTopicMatched+0xae>
 8019e9c:	693a      	ldr	r2, [r7, #16]
 8019e9e:	68bb      	ldr	r3, [r7, #8]
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	d3bd      	bcc.n	8019e20 <isTopicMatched+0x22>
 8019ea4:	e002      	b.n	8019eac <isTopicMatched+0xae>
            break;
 8019ea6:	bf00      	nop
 8019ea8:	e000      	b.n	8019eac <isTopicMatched+0xae>
            break;
 8019eaa:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8019eac:	693a      	ldr	r2, [r7, #16]
 8019eae:	68bb      	ldr	r3, [r7, #8]
 8019eb0:	429a      	cmp	r2, r3
 8019eb2:	d105      	bne.n	8019ec0 <isTopicMatched+0xc2>
 8019eb4:	697b      	ldr	r3, [r7, #20]
 8019eb6:	781b      	ldrb	r3, [r3, #0]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d101      	bne.n	8019ec0 <isTopicMatched+0xc2>
 8019ebc:	2301      	movs	r3, #1
 8019ebe:	e000      	b.n	8019ec2 <isTopicMatched+0xc4>
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	b2db      	uxtb	r3, r3
}
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	371c      	adds	r7, #28
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ece:	4770      	bx	lr

08019ed0 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b08a      	sub	sp, #40	; 0x28
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	60f8      	str	r0, [r7, #12]
 8019ed8:	60b9      	str	r1, [r7, #8]
 8019eda:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8019edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ee0:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8019ee6:	e03c      	b.n	8019f62 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019eec:	3205      	adds	r2, #5
 8019eee:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d032      	beq.n	8019f5c <deliverMessage+0x8c>
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019efa:	3205      	adds	r2, #5
 8019efc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8019f00:	4619      	mov	r1, r3
 8019f02:	68b8      	ldr	r0, [r7, #8]
 8019f04:	f001 fa68 	bl	801b3d8 <MQTTPacket_equals>
 8019f08:	4603      	mov	r3, r0
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d10b      	bne.n	8019f26 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f12:	3205      	adds	r2, #5
 8019f14:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8019f18:	68b9      	ldr	r1, [r7, #8]
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f7ff ff6f 	bl	8019dfe <isTopicMatched>
 8019f20:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d01a      	beq.n	8019f5c <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8019f26:	68fa      	ldr	r2, [r7, #12]
 8019f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f2a:	3305      	adds	r3, #5
 8019f2c:	00db      	lsls	r3, r3, #3
 8019f2e:	4413      	add	r3, r2
 8019f30:	685b      	ldr	r3, [r3, #4]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d012      	beq.n	8019f5c <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8019f36:	f107 0318 	add.w	r3, r7, #24
 8019f3a:	687a      	ldr	r2, [r7, #4]
 8019f3c:	68b9      	ldr	r1, [r7, #8]
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f7ff fddc 	bl	8019afc <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8019f44:	68fa      	ldr	r2, [r7, #12]
 8019f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f48:	3305      	adds	r3, #5
 8019f4a:	00db      	lsls	r3, r3, #3
 8019f4c:	4413      	add	r3, r2
 8019f4e:	685b      	ldr	r3, [r3, #4]
 8019f50:	f107 0218 	add.w	r2, r7, #24
 8019f54:	4610      	mov	r0, r2
 8019f56:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 8019f58:	2300      	movs	r3, #0
 8019f5a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8019f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f5e:	3301      	adds	r3, #1
 8019f60:	627b      	str	r3, [r7, #36]	; 0x24
 8019f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f64:	2b04      	cmp	r3, #4
 8019f66:	ddbf      	ble.n	8019ee8 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8019f68:	6a3b      	ldr	r3, [r7, #32]
 8019f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019f6e:	d112      	bne.n	8019f96 <deliverMessage+0xc6>
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d00e      	beq.n	8019f96 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8019f78:	f107 0310 	add.w	r3, r7, #16
 8019f7c:	687a      	ldr	r2, [r7, #4]
 8019f7e:	68b9      	ldr	r1, [r7, #8]
 8019f80:	4618      	mov	r0, r3
 8019f82:	f7ff fdbb 	bl	8019afc <NewMessageData>
        c->defaultMessageHandler(&md);
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f8a:	f107 0210 	add.w	r2, r7, #16
 8019f8e:	4610      	mov	r0, r2
 8019f90:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8019f92:	2300      	movs	r3, #0
 8019f94:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8019f96:	6a3b      	ldr	r3, [r7, #32]
}
 8019f98:	4618      	mov	r0, r3
 8019f9a:	3728      	adds	r7, #40	; 0x28
 8019f9c:	46bd      	mov	sp, r7
 8019f9e:	bd80      	pop	{r7, pc}

08019fa0 <keepalive>:


int keepalive(MQTTClient* c)
{
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b086      	sub	sp, #24
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 8019fa8:	2300      	movs	r3, #0
 8019faa:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	699b      	ldr	r3, [r3, #24]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d03e      	beq.n	801a032 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	3358      	adds	r3, #88	; 0x58
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f000 fc6d 	bl	801a898 <TimerIsExpired>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d107      	bne.n	8019fd4 <keepalive+0x34>
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	3360      	adds	r3, #96	; 0x60
 8019fc8:	4618      	mov	r0, r3
 8019fca:	f000 fc65 	bl	801a898 <TimerIsExpired>
 8019fce:	4603      	mov	r3, r0
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d030      	beq.n	801a036 <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	7f1b      	ldrb	r3, [r3, #28]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d003      	beq.n	8019fe4 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8019fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019fe0:	617b      	str	r3, [r7, #20]
 8019fe2:	e029      	b.n	801a038 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8019fe4:	f107 0308 	add.w	r3, r7, #8
 8019fe8:	4618      	mov	r0, r3
 8019fea:	f000 fcad 	bl	801a948 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8019fee:	f107 0308 	add.w	r3, r7, #8
 8019ff2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	f000 fc64 	bl	801a8c4 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	691a      	ldr	r2, [r3, #16]
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	689b      	ldr	r3, [r3, #8]
 801a004:	4619      	mov	r1, r3
 801a006:	4610      	mov	r0, r2
 801a008:	f000 ff4a 	bl	801aea0 <MQTTSerialize_pingreq>
 801a00c:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 801a00e:	693b      	ldr	r3, [r7, #16]
 801a010:	2b00      	cmp	r3, #0
 801a012:	dd11      	ble.n	801a038 <keepalive+0x98>
 801a014:	f107 0308 	add.w	r3, r7, #8
 801a018:	461a      	mov	r2, r3
 801a01a:	6939      	ldr	r1, [r7, #16]
 801a01c:	6878      	ldr	r0, [r7, #4]
 801a01e:	f7ff fd98 	bl	8019b52 <sendPacket>
 801a022:	6178      	str	r0, [r7, #20]
 801a024:	697b      	ldr	r3, [r7, #20]
 801a026:	2b00      	cmp	r3, #0
 801a028:	d106      	bne.n	801a038 <keepalive+0x98>
                c->ping_outstanding = 1;
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	2201      	movs	r2, #1
 801a02e:	771a      	strb	r2, [r3, #28]
 801a030:	e002      	b.n	801a038 <keepalive+0x98>
        goto exit;
 801a032:	bf00      	nop
 801a034:	e000      	b.n	801a038 <keepalive+0x98>
        }
    }

exit:
 801a036:	bf00      	nop
    return rc;
 801a038:	697b      	ldr	r3, [r7, #20]
}
 801a03a:	4618      	mov	r0, r3
 801a03c:	3718      	adds	r7, #24
 801a03e:	46bd      	mov	sp, r7
 801a040:	bd80      	pop	{r7, pc}

0801a042 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 801a042:	b480      	push	{r7}
 801a044:	b085      	sub	sp, #20
 801a046:	af00      	add	r7, sp, #0
 801a048:	6078      	str	r0, [r7, #4]
    int i = 0;
 801a04a:	2300      	movs	r3, #0
 801a04c:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a04e:	2300      	movs	r3, #0
 801a050:	60fb      	str	r3, [r7, #12]
 801a052:	e008      	b.n	801a066 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	68fa      	ldr	r2, [r7, #12]
 801a058:	3205      	adds	r2, #5
 801a05a:	2100      	movs	r1, #0
 801a05c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a060:	68fb      	ldr	r3, [r7, #12]
 801a062:	3301      	adds	r3, #1
 801a064:	60fb      	str	r3, [r7, #12]
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	2b04      	cmp	r3, #4
 801a06a:	ddf3      	ble.n	801a054 <MQTTCleanSession+0x12>
}
 801a06c:	bf00      	nop
 801a06e:	bf00      	nop
 801a070:	3714      	adds	r7, #20
 801a072:	46bd      	mov	sp, r7
 801a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a078:	4770      	bx	lr

0801a07a <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 801a07a:	b580      	push	{r7, lr}
 801a07c:	b082      	sub	sp, #8
 801a07e:	af00      	add	r7, sp, #0
 801a080:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	2200      	movs	r2, #0
 801a086:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	2200      	movs	r2, #0
 801a08c:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a092:	2b00      	cmp	r3, #0
 801a094:	d002      	beq.n	801a09c <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 801a096:	6878      	ldr	r0, [r7, #4]
 801a098:	f7ff ffd3 	bl	801a042 <MQTTCleanSession>
}
 801a09c:	bf00      	nop
 801a09e:	3708      	adds	r7, #8
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	bd80      	pop	{r7, pc}

0801a0a4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 801a0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0a6:	b095      	sub	sp, #84	; 0x54
 801a0a8:	af06      	add	r7, sp, #24
 801a0aa:	6078      	str	r0, [r7, #4]
 801a0ac:	6039      	str	r1, [r7, #0]
    int len = 0,
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTT_SUCCESS;
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 801a0b6:	6839      	ldr	r1, [r7, #0]
 801a0b8:	6878      	ldr	r0, [r7, #4]
 801a0ba:	f7ff fe1c 	bl	8019cf6 <readPacket>
 801a0be:	62f8      	str	r0, [r7, #44]	; 0x2c
 801a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c2:	2b0d      	cmp	r3, #13
 801a0c4:	d81e      	bhi.n	801a104 <cycle+0x60>
 801a0c6:	a201      	add	r2, pc, #4	; (adr r2, 801a0cc <cycle+0x28>)
 801a0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0cc:	0801a25b 	.word	0x0801a25b
 801a0d0:	0801a105 	.word	0x0801a105
 801a0d4:	0801a25b 	.word	0x0801a25b
 801a0d8:	0801a10b 	.word	0x0801a10b
 801a0dc:	0801a25b 	.word	0x0801a25b
 801a0e0:	0801a1d7 	.word	0x0801a1d7
 801a0e4:	0801a1d7 	.word	0x0801a1d7
 801a0e8:	0801a25b 	.word	0x0801a25b
 801a0ec:	0801a105 	.word	0x0801a105
 801a0f0:	0801a25b 	.word	0x0801a25b
 801a0f4:	0801a105 	.word	0x0801a105
 801a0f8:	0801a25b 	.word	0x0801a25b
 801a0fc:	0801a105 	.word	0x0801a105
 801a100:	0801a253 	.word	0x0801a253

    switch (packet_type)
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 801a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a106:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 801a108:	e0b9      	b.n	801a27e <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 801a10a:	2300      	movs	r3, #0
 801a10c:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801a112:	687a      	ldr	r2, [r7, #4]
 801a114:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801a116:	4616      	mov	r6, r2
 801a118:	f107 0210 	add.w	r2, r7, #16
 801a11c:	1d15      	adds	r5, r2, #4
 801a11e:	f107 0210 	add.w	r2, r7, #16
 801a122:	1c54      	adds	r4, r2, #1
 801a124:	f107 010c 	add.w	r1, r7, #12
 801a128:	f107 0210 	add.w	r2, r7, #16
 801a12c:	1c90      	adds	r0, r2, #2
 801a12e:	9604      	str	r6, [sp, #16]
 801a130:	9303      	str	r3, [sp, #12]
 801a132:	f107 0310 	add.w	r3, r7, #16
 801a136:	330c      	adds	r3, #12
 801a138:	9302      	str	r3, [sp, #8]
 801a13a:	f107 0310 	add.w	r3, r7, #16
 801a13e:	3308      	adds	r3, #8
 801a140:	9301      	str	r3, [sp, #4]
 801a142:	f107 0320 	add.w	r3, r7, #32
 801a146:	9300      	str	r3, [sp, #0]
 801a148:	462b      	mov	r3, r5
 801a14a:	4622      	mov	r2, r4
 801a14c:	f000 feb7 	bl	801aebe <MQTTDeserialize_publish>
 801a150:	4603      	mov	r3, r0
 801a152:	2b01      	cmp	r3, #1
 801a154:	f040 8090 	bne.w	801a278 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	b2db      	uxtb	r3, r3
 801a15c:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801a15e:	f107 0210 	add.w	r2, r7, #16
 801a162:	f107 0320 	add.w	r3, r7, #32
 801a166:	4619      	mov	r1, r3
 801a168:	6878      	ldr	r0, [r7, #4]
 801a16a:	f7ff feb1 	bl	8019ed0 <deliverMessage>
            if (msg.qos != QOS0)
 801a16e:	7c3b      	ldrb	r3, [r7, #16]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d074      	beq.n	801a25e <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 801a174:	7c3b      	ldrb	r3, [r7, #16]
 801a176:	2b01      	cmp	r3, #1
 801a178:	d10c      	bne.n	801a194 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	6918      	ldr	r0, [r3, #16]
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	689b      	ldr	r3, [r3, #8]
 801a182:	4619      	mov	r1, r3
 801a184:	8abb      	ldrh	r3, [r7, #20]
 801a186:	9300      	str	r3, [sp, #0]
 801a188:	2300      	movs	r3, #0
 801a18a:	2204      	movs	r2, #4
 801a18c:	f001 f9f1 	bl	801b572 <MQTTSerialize_ack>
 801a190:	6378      	str	r0, [r7, #52]	; 0x34
 801a192:	e00e      	b.n	801a1b2 <cycle+0x10e>
                else if (msg.qos == QOS2)
 801a194:	7c3b      	ldrb	r3, [r7, #16]
 801a196:	2b02      	cmp	r3, #2
 801a198:	d10b      	bne.n	801a1b2 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	6918      	ldr	r0, [r3, #16]
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	689b      	ldr	r3, [r3, #8]
 801a1a2:	4619      	mov	r1, r3
 801a1a4:	8abb      	ldrh	r3, [r7, #20]
 801a1a6:	9300      	str	r3, [sp, #0]
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	2205      	movs	r2, #5
 801a1ac:	f001 f9e1 	bl	801b572 <MQTTSerialize_ack>
 801a1b0:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 801a1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	dc03      	bgt.n	801a1c0 <cycle+0x11c>
                    rc = FAILURE;
 801a1b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1bc:	633b      	str	r3, [r7, #48]	; 0x30
 801a1be:	e005      	b.n	801a1cc <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 801a1c0:	683a      	ldr	r2, [r7, #0]
 801a1c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a1c4:	6878      	ldr	r0, [r7, #4]
 801a1c6:	f7ff fcc4 	bl	8019b52 <sendPacket>
 801a1ca:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a1d2:	d144      	bne.n	801a25e <cycle+0x1ba>
                    goto exit; // there was a problem
 801a1d4:	e053      	b.n	801a27e <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	695c      	ldr	r4, [r3, #20]
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	68db      	ldr	r3, [r3, #12]
 801a1de:	f107 020a 	add.w	r2, r7, #10
 801a1e2:	f107 0109 	add.w	r1, r7, #9
 801a1e6:	f107 0008 	add.w	r0, r7, #8
 801a1ea:	9300      	str	r3, [sp, #0]
 801a1ec:	4623      	mov	r3, r4
 801a1ee:	f000 fed8 	bl	801afa2 <MQTTDeserialize_ack>
 801a1f2:	4603      	mov	r3, r0
 801a1f4:	2b01      	cmp	r3, #1
 801a1f6:	d003      	beq.n	801a200 <cycle+0x15c>
                rc = FAILURE;
 801a1f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1fc:	633b      	str	r3, [r7, #48]	; 0x30
 801a1fe:	e023      	b.n	801a248 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	6918      	ldr	r0, [r3, #16]
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	689b      	ldr	r3, [r3, #8]
 801a208:	4619      	mov	r1, r3
 801a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a20c:	2b05      	cmp	r3, #5
 801a20e:	d101      	bne.n	801a214 <cycle+0x170>
 801a210:	2206      	movs	r2, #6
 801a212:	e000      	b.n	801a216 <cycle+0x172>
 801a214:	2207      	movs	r2, #7
 801a216:	897b      	ldrh	r3, [r7, #10]
 801a218:	9300      	str	r3, [sp, #0]
 801a21a:	2300      	movs	r3, #0
 801a21c:	f001 f9a9 	bl	801b572 <MQTTSerialize_ack>
 801a220:	6378      	str	r0, [r7, #52]	; 0x34
 801a222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a224:	2b00      	cmp	r3, #0
 801a226:	dc03      	bgt.n	801a230 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 801a228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a22c:	633b      	str	r3, [r7, #48]	; 0x30
 801a22e:	e00b      	b.n	801a248 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 801a230:	683a      	ldr	r2, [r7, #0]
 801a232:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a234:	6878      	ldr	r0, [r7, #4]
 801a236:	f7ff fc8c 	bl	8019b52 <sendPacket>
 801a23a:	6338      	str	r0, [r7, #48]	; 0x30
 801a23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d002      	beq.n	801a248 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 801a242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a246:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 801a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a24a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a24e:	d108      	bne.n	801a262 <cycle+0x1be>
                goto exit; // there was a problem
 801a250:	e015      	b.n	801a27e <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	2200      	movs	r2, #0
 801a256:	771a      	strb	r2, [r3, #28]
            break;
 801a258:	e004      	b.n	801a264 <cycle+0x1c0>
            break;
 801a25a:	bf00      	nop
 801a25c:	e002      	b.n	801a264 <cycle+0x1c0>
            break;
 801a25e:	bf00      	nop
 801a260:	e000      	b.n	801a264 <cycle+0x1c0>
            break;
 801a262:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 801a264:	6878      	ldr	r0, [r7, #4]
 801a266:	f7ff fe9b 	bl	8019fa0 <keepalive>
 801a26a:	4603      	mov	r3, r0
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d005      	beq.n	801a27c <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 801a270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a274:	633b      	str	r3, [r7, #48]	; 0x30
 801a276:	e002      	b.n	801a27e <cycle+0x1da>
                goto exit;
 801a278:	bf00      	nop
 801a27a:	e000      	b.n	801a27e <cycle+0x1da>
    }

exit:
 801a27c:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 801a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a280:	2b00      	cmp	r3, #0
 801a282:	d102      	bne.n	801a28a <cycle+0x1e6>
        rc = packet_type;
 801a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a286:	633b      	str	r3, [r7, #48]	; 0x30
 801a288:	e006      	b.n	801a298 <cycle+0x1f4>
    else if (c->isconnected)
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	6a1b      	ldr	r3, [r3, #32]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d002      	beq.n	801a298 <cycle+0x1f4>
        MQTTCloseSession(c);
 801a292:	6878      	ldr	r0, [r7, #4]
 801a294:	f7ff fef1 	bl	801a07a <MQTTCloseSession>
    return rc;
 801a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801a29a:	4618      	mov	r0, r3
 801a29c:	373c      	adds	r7, #60	; 0x3c
 801a29e:	46bd      	mov	sp, r7
 801a2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2a2:	bf00      	nop

0801a2a4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	b086      	sub	sp, #24
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	6078      	str	r0, [r7, #4]
 801a2ac:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 801a2b2:	f107 030c 	add.w	r3, r7, #12
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f000 fb46 	bl	801a948 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 801a2bc:	683a      	ldr	r2, [r7, #0]
 801a2be:	f107 030c 	add.w	r3, r7, #12
 801a2c2:	4611      	mov	r1, r2
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	f000 fafd 	bl	801a8c4 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 801a2ca:	f107 030c 	add.w	r3, r7, #12
 801a2ce:	4619      	mov	r1, r3
 801a2d0:	6878      	ldr	r0, [r7, #4]
 801a2d2:	f7ff fee7 	bl	801a0a4 <cycle>
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	da03      	bge.n	801a2e4 <MQTTYield+0x40>
        {
            rc = FAILURE;
 801a2dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a2e0:	617b      	str	r3, [r7, #20]
            break;
 801a2e2:	e007      	b.n	801a2f4 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 801a2e4:	f107 030c 	add.w	r3, r7, #12
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	f000 fad5 	bl	801a898 <TimerIsExpired>
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d0ea      	beq.n	801a2ca <MQTTYield+0x26>

    return rc;
 801a2f4:	697b      	ldr	r3, [r7, #20]
}
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	3718      	adds	r7, #24
 801a2fa:	46bd      	mov	sp, r7
 801a2fc:	bd80      	pop	{r7, pc}

0801a2fe <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801a2fe:	b580      	push	{r7, lr}
 801a300:	b086      	sub	sp, #24
 801a302:	af00      	add	r7, sp, #0
 801a304:	60f8      	str	r0, [r7, #12]
 801a306:	60b9      	str	r1, [r7, #8]
 801a308:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801a30a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a30e:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 801a310:	6878      	ldr	r0, [r7, #4]
 801a312:	f000 fac1 	bl	801a898 <TimerIsExpired>
 801a316:	4603      	mov	r3, r0
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d10c      	bne.n	801a336 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 801a31c:	6879      	ldr	r1, [r7, #4]
 801a31e:	68f8      	ldr	r0, [r7, #12]
 801a320:	f7ff fec0 	bl	801a0a4 <cycle>
 801a324:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 801a326:	697a      	ldr	r2, [r7, #20]
 801a328:	68bb      	ldr	r3, [r7, #8]
 801a32a:	429a      	cmp	r2, r3
 801a32c:	d004      	beq.n	801a338 <waitfor+0x3a>
 801a32e:	697b      	ldr	r3, [r7, #20]
 801a330:	2b00      	cmp	r3, #0
 801a332:	daed      	bge.n	801a310 <waitfor+0x12>
 801a334:	e000      	b.n	801a338 <waitfor+0x3a>
            break; // we timed out
 801a336:	bf00      	nop

    return rc;
 801a338:	697b      	ldr	r3, [r7, #20]
}
 801a33a:	4618      	mov	r0, r3
 801a33c:	3718      	adds	r7, #24
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd80      	pop	{r7, pc}
	...

0801a344 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b09e      	sub	sp, #120	; 0x78
 801a348:	af00      	add	r7, sp, #0
 801a34a:	60f8      	str	r0, [r7, #12]
 801a34c:	60b9      	str	r1, [r7, #8]
 801a34e:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 801a350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a354:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801a356:	4a43      	ldr	r2, [pc, #268]	; (801a464 <MQTTConnectWithResults+0x120>)
 801a358:	f107 0310 	add.w	r3, r7, #16
 801a35c:	4611      	mov	r1, r2
 801a35e:	2258      	movs	r2, #88	; 0x58
 801a360:	4618      	mov	r0, r3
 801a362:	f001 fa97 	bl	801b894 <memcpy>
    int len = 0;
 801a366:	2300      	movs	r3, #0
 801a368:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	6a1b      	ldr	r3, [r3, #32]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d164      	bne.n	801a43c <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 801a372:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a376:	4618      	mov	r0, r3
 801a378:	f000 fae6 	bl	801a948 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	685a      	ldr	r2, [r3, #4]
 801a380:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a384:	4611      	mov	r1, r2
 801a386:	4618      	mov	r0, r3
 801a388:	f000 fa9c 	bl	801a8c4 <TimerCountdownMS>

    if (options == 0)
 801a38c:	68bb      	ldr	r3, [r7, #8]
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d102      	bne.n	801a398 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 801a392:	f107 0310 	add.w	r3, r7, #16
 801a396:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 801a398:	68bb      	ldr	r3, [r7, #8]
 801a39a:	8b1b      	ldrh	r3, [r3, #24]
 801a39c:	461a      	mov	r2, r3
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	7e9b      	ldrb	r3, [r3, #26]
 801a3a6:	461a      	mov	r2, r3
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	f103 0260 	add.w	r2, r3, #96	; 0x60
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	699b      	ldr	r3, [r3, #24]
 801a3b6:	4619      	mov	r1, r3
 801a3b8:	4610      	mov	r0, r2
 801a3ba:	f000 fa97 	bl	801a8ec <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	6918      	ldr	r0, [r3, #16]
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	689b      	ldr	r3, [r3, #8]
 801a3c6:	68ba      	ldr	r2, [r7, #8]
 801a3c8:	4619      	mov	r1, r3
 801a3ca:	f000 fbe1 	bl	801ab90 <MQTTSerialize_connect>
 801a3ce:	6738      	str	r0, [r7, #112]	; 0x70
 801a3d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	dd34      	ble.n	801a440 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 801a3d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a3da:	461a      	mov	r2, r3
 801a3dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801a3de:	68f8      	ldr	r0, [r7, #12]
 801a3e0:	f7ff fbb7 	bl	8019b52 <sendPacket>
 801a3e4:	6778      	str	r0, [r7, #116]	; 0x74
 801a3e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d12b      	bne.n	801a444 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801a3ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a3f0:	461a      	mov	r2, r3
 801a3f2:	2102      	movs	r1, #2
 801a3f4:	68f8      	ldr	r0, [r7, #12]
 801a3f6:	f7ff ff82 	bl	801a2fe <waitfor>
 801a3fa:	4603      	mov	r3, r0
 801a3fc:	2b02      	cmp	r3, #2
 801a3fe:	d119      	bne.n	801a434 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	2200      	movs	r2, #0
 801a404:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	2200      	movs	r2, #0
 801a40a:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	1c58      	adds	r0, r3, #1
 801a410:	6879      	ldr	r1, [r7, #4]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	695a      	ldr	r2, [r3, #20]
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	68db      	ldr	r3, [r3, #12]
 801a41a:	f000 fca5 	bl	801ad68 <MQTTDeserialize_connack>
 801a41e:	4603      	mov	r3, r0
 801a420:	2b01      	cmp	r3, #1
 801a422:	d103      	bne.n	801a42c <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	781b      	ldrb	r3, [r3, #0]
 801a428:	677b      	str	r3, [r7, #116]	; 0x74
 801a42a:	e00c      	b.n	801a446 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 801a42c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a430:	677b      	str	r3, [r7, #116]	; 0x74
 801a432:	e008      	b.n	801a446 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 801a434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a438:	677b      	str	r3, [r7, #116]	; 0x74
 801a43a:	e004      	b.n	801a446 <MQTTConnectWithResults+0x102>
		  goto exit;
 801a43c:	bf00      	nop
 801a43e:	e002      	b.n	801a446 <MQTTConnectWithResults+0x102>
        goto exit;
 801a440:	bf00      	nop
 801a442:	e000      	b.n	801a446 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 801a444:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 801a446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d105      	bne.n	801a458 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	2201      	movs	r2, #1
 801a450:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 801a452:	68fb      	ldr	r3, [r7, #12]
 801a454:	2200      	movs	r2, #0
 801a456:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 801a458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801a45a:	4618      	mov	r0, r3
 801a45c:	3778      	adds	r7, #120	; 0x78
 801a45e:	46bd      	mov	sp, r7
 801a460:	bd80      	pop	{r7, pc}
 801a462:	bf00      	nop
 801a464:	08020950 	.word	0x08020950

0801a468 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b084      	sub	sp, #16
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
 801a470:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 801a472:	f107 030c 	add.w	r3, r7, #12
 801a476:	461a      	mov	r2, r3
 801a478:	6839      	ldr	r1, [r7, #0]
 801a47a:	6878      	ldr	r0, [r7, #4]
 801a47c:	f7ff ff62 	bl	801a344 <MQTTConnectWithResults>
 801a480:	4603      	mov	r3, r0
}
 801a482:	4618      	mov	r0, r3
 801a484:	3710      	adds	r7, #16
 801a486:	46bd      	mov	sp, r7
 801a488:	bd80      	pop	{r7, pc}

0801a48a <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 801a48a:	b580      	push	{r7, lr}
 801a48c:	b086      	sub	sp, #24
 801a48e:	af00      	add	r7, sp, #0
 801a490:	60f8      	str	r0, [r7, #12]
 801a492:	60b9      	str	r1, [r7, #8]
 801a494:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801a496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a49a:	617b      	str	r3, [r7, #20]
    int i = -1;
 801a49c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a4a0:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	613b      	str	r3, [r7, #16]
 801a4a6:	e028      	b.n	801a4fa <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	693a      	ldr	r2, [r7, #16]
 801a4ac:	3205      	adds	r2, #5
 801a4ae:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d01e      	beq.n	801a4f4 <MQTTSetMessageHandler+0x6a>
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	693a      	ldr	r2, [r7, #16]
 801a4ba:	3205      	adds	r2, #5
 801a4bc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801a4c0:	68b9      	ldr	r1, [r7, #8]
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	f7e5 febc 	bl	8000240 <strcmp>
 801a4c8:	4603      	mov	r3, r0
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d112      	bne.n	801a4f4 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d10c      	bne.n	801a4ee <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	693a      	ldr	r2, [r7, #16]
 801a4d8:	3205      	adds	r2, #5
 801a4da:	2100      	movs	r1, #0
 801a4dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 801a4e0:	68fa      	ldr	r2, [r7, #12]
 801a4e2:	693b      	ldr	r3, [r7, #16]
 801a4e4:	3305      	adds	r3, #5
 801a4e6:	00db      	lsls	r3, r3, #3
 801a4e8:	4413      	add	r3, r2
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 801a4ee:	2300      	movs	r3, #0
 801a4f0:	617b      	str	r3, [r7, #20]
            break;
 801a4f2:	e005      	b.n	801a500 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a4f4:	693b      	ldr	r3, [r7, #16]
 801a4f6:	3301      	adds	r3, #1
 801a4f8:	613b      	str	r3, [r7, #16]
 801a4fa:	693b      	ldr	r3, [r7, #16]
 801a4fc:	2b04      	cmp	r3, #4
 801a4fe:	ddd3      	ble.n	801a4a8 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d026      	beq.n	801a554 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 801a506:	697b      	ldr	r3, [r7, #20]
 801a508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a50c:	d112      	bne.n	801a534 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a50e:	2300      	movs	r3, #0
 801a510:	613b      	str	r3, [r7, #16]
 801a512:	e00c      	b.n	801a52e <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	693a      	ldr	r2, [r7, #16]
 801a518:	3205      	adds	r2, #5
 801a51a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d102      	bne.n	801a528 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 801a522:	2300      	movs	r3, #0
 801a524:	617b      	str	r3, [r7, #20]
                    break;
 801a526:	e005      	b.n	801a534 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a528:	693b      	ldr	r3, [r7, #16]
 801a52a:	3301      	adds	r3, #1
 801a52c:	613b      	str	r3, [r7, #16]
 801a52e:	693b      	ldr	r3, [r7, #16]
 801a530:	2b04      	cmp	r3, #4
 801a532:	ddef      	ble.n	801a514 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 801a534:	693b      	ldr	r3, [r7, #16]
 801a536:	2b04      	cmp	r3, #4
 801a538:	dc0c      	bgt.n	801a554 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	693a      	ldr	r2, [r7, #16]
 801a53e:	3205      	adds	r2, #5
 801a540:	68b9      	ldr	r1, [r7, #8]
 801a542:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 801a546:	68fa      	ldr	r2, [r7, #12]
 801a548:	693b      	ldr	r3, [r7, #16]
 801a54a:	3305      	adds	r3, #5
 801a54c:	00db      	lsls	r3, r3, #3
 801a54e:	4413      	add	r3, r2
 801a550:	687a      	ldr	r2, [r7, #4]
 801a552:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 801a554:	697b      	ldr	r3, [r7, #20]
}
 801a556:	4618      	mov	r0, r3
 801a558:	3718      	adds	r7, #24
 801a55a:	46bd      	mov	sp, r7
 801a55c:	bd80      	pop	{r7, pc}

0801a55e <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 801a55e:	b5b0      	push	{r4, r5, r7, lr}
 801a560:	b092      	sub	sp, #72	; 0x48
 801a562:	af04      	add	r7, sp, #16
 801a564:	60f8      	str	r0, [r7, #12]
 801a566:	60b9      	str	r1, [r7, #8]
 801a568:	603b      	str	r3, [r7, #0]
 801a56a:	4613      	mov	r3, r2
 801a56c:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 801a56e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a572:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 801a574:	2300      	movs	r3, #0
 801a576:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 801a578:	2300      	movs	r3, #0
 801a57a:	61fb      	str	r3, [r7, #28]
 801a57c:	2300      	movs	r3, #0
 801a57e:	623b      	str	r3, [r7, #32]
 801a580:	2300      	movs	r3, #0
 801a582:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 801a584:	68bb      	ldr	r3, [r7, #8]
 801a586:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	6a1b      	ldr	r3, [r3, #32]
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d063      	beq.n	801a658 <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 801a590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a594:	4618      	mov	r0, r3
 801a596:	f000 f9d7 	bl	801a948 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	685a      	ldr	r2, [r3, #4]
 801a59e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a5a2:	4611      	mov	r1, r2
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f000 f98d 	bl	801a8c4 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	691c      	ldr	r4, [r3, #16]
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	689b      	ldr	r3, [r3, #8]
 801a5b2:	461d      	mov	r5, r3
 801a5b4:	68f8      	ldr	r0, [r7, #12]
 801a5b6:	f7ff fab3 	bl	8019b20 <getNextPacketId>
 801a5ba:	4603      	mov	r3, r0
 801a5bc:	b29a      	uxth	r2, r3
 801a5be:	1dfb      	adds	r3, r7, #7
 801a5c0:	9302      	str	r3, [sp, #8]
 801a5c2:	f107 031c 	add.w	r3, r7, #28
 801a5c6:	9301      	str	r3, [sp, #4]
 801a5c8:	2301      	movs	r3, #1
 801a5ca:	9300      	str	r3, [sp, #0]
 801a5cc:	4613      	mov	r3, r2
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	4629      	mov	r1, r5
 801a5d2:	4620      	mov	r0, r4
 801a5d4:	f001 f849 	bl	801b66a <MQTTSerialize_subscribe>
 801a5d8:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	dd3d      	ble.n	801a65c <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 801a5e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a5e4:	461a      	mov	r2, r3
 801a5e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a5e8:	68f8      	ldr	r0, [r7, #12]
 801a5ea:	f7ff fab2 	bl	8019b52 <sendPacket>
 801a5ee:	6378      	str	r0, [r7, #52]	; 0x34
 801a5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d134      	bne.n	801a660 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 801a5f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a5fa:	461a      	mov	r2, r3
 801a5fc:	2109      	movs	r1, #9
 801a5fe:	68f8      	ldr	r0, [r7, #12]
 801a600:	f7ff fe7d 	bl	801a2fe <waitfor>
 801a604:	4603      	mov	r3, r0
 801a606:	2b09      	cmp	r3, #9
 801a608:	d122      	bne.n	801a650 <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 801a60a:	2300      	movs	r3, #0
 801a60c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 801a60e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a610:	2200      	movs	r2, #0
 801a612:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 801a614:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a616:	68fb      	ldr	r3, [r7, #12]
 801a618:	695b      	ldr	r3, [r3, #20]
 801a61a:	68fa      	ldr	r2, [r7, #12]
 801a61c:	68d2      	ldr	r2, [r2, #12]
 801a61e:	4614      	mov	r4, r2
 801a620:	f107 0218 	add.w	r2, r7, #24
 801a624:	f107 0016 	add.w	r0, r7, #22
 801a628:	9401      	str	r4, [sp, #4]
 801a62a:	9300      	str	r3, [sp, #0]
 801a62c:	460b      	mov	r3, r1
 801a62e:	2101      	movs	r1, #1
 801a630:	f001 f897 	bl	801b762 <MQTTDeserialize_suback>
 801a634:	4603      	mov	r3, r0
 801a636:	2b01      	cmp	r3, #1
 801a638:	d113      	bne.n	801a662 <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 801a63a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a63c:	781b      	ldrb	r3, [r3, #0]
 801a63e:	2b80      	cmp	r3, #128	; 0x80
 801a640:	d00f      	beq.n	801a662 <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 801a642:	683a      	ldr	r2, [r7, #0]
 801a644:	68b9      	ldr	r1, [r7, #8]
 801a646:	68f8      	ldr	r0, [r7, #12]
 801a648:	f7ff ff1f 	bl	801a48a <MQTTSetMessageHandler>
 801a64c:	6378      	str	r0, [r7, #52]	; 0x34
 801a64e:	e008      	b.n	801a662 <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 801a650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a654:	637b      	str	r3, [r7, #52]	; 0x34
 801a656:	e004      	b.n	801a662 <MQTTSubscribeWithResults+0x104>
		    goto exit;
 801a658:	bf00      	nop
 801a65a:	e002      	b.n	801a662 <MQTTSubscribeWithResults+0x104>
        goto exit;
 801a65c:	bf00      	nop
 801a65e:	e000      	b.n	801a662 <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 801a660:	bf00      	nop

exit:
    if (rc == FAILURE)
 801a662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a668:	d102      	bne.n	801a670 <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 801a66a:	68f8      	ldr	r0, [r7, #12]
 801a66c:	f7ff fd05 	bl	801a07a <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801a670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a672:	4618      	mov	r0, r3
 801a674:	3738      	adds	r7, #56	; 0x38
 801a676:	46bd      	mov	sp, r7
 801a678:	bdb0      	pop	{r4, r5, r7, pc}

0801a67a <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 801a67a:	b580      	push	{r7, lr}
 801a67c:	b088      	sub	sp, #32
 801a67e:	af02      	add	r7, sp, #8
 801a680:	60f8      	str	r0, [r7, #12]
 801a682:	60b9      	str	r1, [r7, #8]
 801a684:	603b      	str	r3, [r7, #0]
 801a686:	4613      	mov	r3, r2
 801a688:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 801a68a:	79fa      	ldrb	r2, [r7, #7]
 801a68c:	f107 0314 	add.w	r3, r7, #20
 801a690:	9300      	str	r3, [sp, #0]
 801a692:	683b      	ldr	r3, [r7, #0]
 801a694:	68b9      	ldr	r1, [r7, #8]
 801a696:	68f8      	ldr	r0, [r7, #12]
 801a698:	f7ff ff61 	bl	801a55e <MQTTSubscribeWithResults>
 801a69c:	4603      	mov	r3, r0
}
 801a69e:	4618      	mov	r0, r3
 801a6a0:	3718      	adds	r7, #24
 801a6a2:	46bd      	mov	sp, r7
 801a6a4:	bd80      	pop	{r7, pc}

0801a6a6 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801a6a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6a8:	b097      	sub	sp, #92	; 0x5c
 801a6aa:	af08      	add	r7, sp, #32
 801a6ac:	60f8      	str	r0, [r7, #12]
 801a6ae:	60b9      	str	r1, [r7, #8]
 801a6b0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801a6b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a6b6:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	61fb      	str	r3, [r7, #28]
 801a6bc:	2300      	movs	r3, #0
 801a6be:	623b      	str	r3, [r7, #32]
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 801a6c4:	68bb      	ldr	r3, [r7, #8]
 801a6c6:	61fb      	str	r3, [r7, #28]
    int len = 0;
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	6a1b      	ldr	r3, [r3, #32]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	f000 809b 	beq.w	801a80c <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 801a6d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f000 f934 	bl	801a948 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	685a      	ldr	r2, [r3, #4]
 801a6e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a6e8:	4611      	mov	r1, r2
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	f000 f8ea 	bl	801a8c4 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	781b      	ldrb	r3, [r3, #0]
 801a6f4:	2b01      	cmp	r3, #1
 801a6f6:	d003      	beq.n	801a700 <MQTTPublish+0x5a>
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	781b      	ldrb	r3, [r3, #0]
 801a6fc:	2b02      	cmp	r3, #2
 801a6fe:	d106      	bne.n	801a70e <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801a700:	68f8      	ldr	r0, [r7, #12]
 801a702:	f7ff fa0d 	bl	8019b20 <getNextPacketId>
 801a706:	4603      	mov	r3, r0
 801a708:	b29a      	uxth	r2, r3
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	691b      	ldr	r3, [r3, #16]
 801a712:	603b      	str	r3, [r7, #0]
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	689b      	ldr	r3, [r3, #8]
 801a718:	469c      	mov	ip, r3
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	781b      	ldrb	r3, [r3, #0]
 801a71e:	469e      	mov	lr, r3
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	785d      	ldrb	r5, [r3, #1]
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	689b      	ldr	r3, [r3, #8]
 801a72c:	687a      	ldr	r2, [r7, #4]
 801a72e:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801a730:	9206      	str	r2, [sp, #24]
 801a732:	9305      	str	r3, [sp, #20]
 801a734:	ac02      	add	r4, sp, #8
 801a736:	f107 031c 	add.w	r3, r7, #28
 801a73a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a73e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a742:	9601      	str	r6, [sp, #4]
 801a744:	9500      	str	r5, [sp, #0]
 801a746:	4673      	mov	r3, lr
 801a748:	2200      	movs	r2, #0
 801a74a:	4661      	mov	r1, ip
 801a74c:	6838      	ldr	r0, [r7, #0]
 801a74e:	f000 fe9a 	bl	801b486 <MQTTSerialize_publish>
 801a752:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a756:	2b00      	cmp	r3, #0
 801a758:	dd5a      	ble.n	801a810 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 801a75a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a75e:	461a      	mov	r2, r3
 801a760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a762:	68f8      	ldr	r0, [r7, #12]
 801a764:	f7ff f9f5 	bl	8019b52 <sendPacket>
 801a768:	6378      	str	r0, [r7, #52]	; 0x34
 801a76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d151      	bne.n	801a814 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	781b      	ldrb	r3, [r3, #0]
 801a774:	2b01      	cmp	r3, #1
 801a776:	d122      	bne.n	801a7be <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 801a778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a77c:	461a      	mov	r2, r3
 801a77e:	2104      	movs	r1, #4
 801a780:	68f8      	ldr	r0, [r7, #12]
 801a782:	f7ff fdbc 	bl	801a2fe <waitfor>
 801a786:	4603      	mov	r3, r0
 801a788:	2b04      	cmp	r3, #4
 801a78a:	d114      	bne.n	801a7b6 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	695c      	ldr	r4, [r3, #20]
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	68db      	ldr	r3, [r3, #12]
 801a794:	f107 021a 	add.w	r2, r7, #26
 801a798:	f107 0119 	add.w	r1, r7, #25
 801a79c:	f107 0018 	add.w	r0, r7, #24
 801a7a0:	9300      	str	r3, [sp, #0]
 801a7a2:	4623      	mov	r3, r4
 801a7a4:	f000 fbfd 	bl	801afa2 <MQTTDeserialize_ack>
 801a7a8:	4603      	mov	r3, r0
 801a7aa:	2b01      	cmp	r3, #1
 801a7ac:	d035      	beq.n	801a81a <MQTTPublish+0x174>
                rc = FAILURE;
 801a7ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a7b2:	637b      	str	r3, [r7, #52]	; 0x34
 801a7b4:	e031      	b.n	801a81a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801a7b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a7ba:	637b      	str	r3, [r7, #52]	; 0x34
 801a7bc:	e02d      	b.n	801a81a <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	781b      	ldrb	r3, [r3, #0]
 801a7c2:	2b02      	cmp	r3, #2
 801a7c4:	d128      	bne.n	801a818 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 801a7c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a7ca:	461a      	mov	r2, r3
 801a7cc:	2107      	movs	r1, #7
 801a7ce:	68f8      	ldr	r0, [r7, #12]
 801a7d0:	f7ff fd95 	bl	801a2fe <waitfor>
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	2b07      	cmp	r3, #7
 801a7d8:	d114      	bne.n	801a804 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	695c      	ldr	r4, [r3, #20]
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	68db      	ldr	r3, [r3, #12]
 801a7e2:	f107 0216 	add.w	r2, r7, #22
 801a7e6:	f107 0115 	add.w	r1, r7, #21
 801a7ea:	f107 0014 	add.w	r0, r7, #20
 801a7ee:	9300      	str	r3, [sp, #0]
 801a7f0:	4623      	mov	r3, r4
 801a7f2:	f000 fbd6 	bl	801afa2 <MQTTDeserialize_ack>
 801a7f6:	4603      	mov	r3, r0
 801a7f8:	2b01      	cmp	r3, #1
 801a7fa:	d00e      	beq.n	801a81a <MQTTPublish+0x174>
                rc = FAILURE;
 801a7fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a800:	637b      	str	r3, [r7, #52]	; 0x34
 801a802:	e00a      	b.n	801a81a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801a804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a808:	637b      	str	r3, [r7, #52]	; 0x34
 801a80a:	e006      	b.n	801a81a <MQTTPublish+0x174>
		    goto exit;
 801a80c:	bf00      	nop
 801a80e:	e004      	b.n	801a81a <MQTTPublish+0x174>
        goto exit;
 801a810:	bf00      	nop
 801a812:	e002      	b.n	801a81a <MQTTPublish+0x174>
        goto exit; // there was a problem
 801a814:	bf00      	nop
 801a816:	e000      	b.n	801a81a <MQTTPublish+0x174>
    }

exit:
 801a818:	bf00      	nop
    if (rc == FAILURE)
 801a81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a81c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a820:	d102      	bne.n	801a828 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 801a822:	68f8      	ldr	r0, [r7, #12]
 801a824:	f7ff fc29 	bl	801a07a <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801a828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a82a:	4618      	mov	r0, r3
 801a82c:	373c      	adds	r7, #60	; 0x3c
 801a82e:	46bd      	mov	sp, r7
 801a830:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a832 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 801a832:	b580      	push	{r7, lr}
 801a834:	b086      	sub	sp, #24
 801a836:	af00      	add	r7, sp, #0
 801a838:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801a83a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a83e:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 801a840:	2300      	movs	r3, #0
 801a842:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 801a844:	f107 0308 	add.w	r3, r7, #8
 801a848:	4618      	mov	r0, r3
 801a84a:	f000 f87d 	bl	801a948 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	685a      	ldr	r2, [r3, #4]
 801a852:	f107 0308 	add.w	r3, r7, #8
 801a856:	4611      	mov	r1, r2
 801a858:	4618      	mov	r0, r3
 801a85a:	f000 f833 	bl	801a8c4 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	691a      	ldr	r2, [r3, #16]
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	689b      	ldr	r3, [r3, #8]
 801a866:	4619      	mov	r1, r3
 801a868:	4610      	mov	r0, r2
 801a86a:	f000 fb0a 	bl	801ae82 <MQTTSerialize_disconnect>
 801a86e:	6138      	str	r0, [r7, #16]
    if (len > 0)
 801a870:	693b      	ldr	r3, [r7, #16]
 801a872:	2b00      	cmp	r3, #0
 801a874:	dd07      	ble.n	801a886 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 801a876:	f107 0308 	add.w	r3, r7, #8
 801a87a:	461a      	mov	r2, r3
 801a87c:	6939      	ldr	r1, [r7, #16]
 801a87e:	6878      	ldr	r0, [r7, #4]
 801a880:	f7ff f967 	bl	8019b52 <sendPacket>
 801a884:	6178      	str	r0, [r7, #20]
    MQTTCloseSession(c);
 801a886:	6878      	ldr	r0, [r7, #4]
 801a888:	f7ff fbf7 	bl	801a07a <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801a88c:	697b      	ldr	r3, [r7, #20]
}
 801a88e:	4618      	mov	r0, r3
 801a890:	3718      	adds	r7, #24
 801a892:	46bd      	mov	sp, r7
 801a894:	bd80      	pop	{r7, pc}
	...

0801a898 <TimerIsExpired>:
#define SERVER_IP4	227

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
 801a898:	b480      	push	{r7}
 801a89a:	b085      	sub	sp, #20
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	685a      	ldr	r2, [r3, #4]
 801a8a4:	4b06      	ldr	r3, [pc, #24]	; (801a8c0 <TimerIsExpired+0x28>)
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	1ad3      	subs	r3, r2, r3
 801a8aa:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	0fdb      	lsrs	r3, r3, #31
 801a8b0:	b2db      	uxtb	r3, r3
}
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	3714      	adds	r7, #20
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8bc:	4770      	bx	lr
 801a8be:	bf00      	nop
 801a8c0:	200106ac 	.word	0x200106ac

0801a8c4 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 801a8c4:	b480      	push	{r7}
 801a8c6:	b083      	sub	sp, #12
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
 801a8cc:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801a8ce:	4b06      	ldr	r3, [pc, #24]	; (801a8e8 <TimerCountdownMS+0x24>)
 801a8d0:	681a      	ldr	r2, [r3, #0]
 801a8d2:	683b      	ldr	r3, [r7, #0]
 801a8d4:	441a      	add	r2, r3
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	605a      	str	r2, [r3, #4]
}
 801a8da:	bf00      	nop
 801a8dc:	370c      	adds	r7, #12
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e4:	4770      	bx	lr
 801a8e6:	bf00      	nop
 801a8e8:	200106ac 	.word	0x200106ac

0801a8ec <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 801a8ec:	b480      	push	{r7}
 801a8ee:	b083      	sub	sp, #12
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	6078      	str	r0, [r7, #4]
 801a8f4:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 801a8f6:	683b      	ldr	r3, [r7, #0]
 801a8f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a8fc:	fb02 f203 	mul.w	r2, r2, r3
 801a900:	4b05      	ldr	r3, [pc, #20]	; (801a918 <TimerCountdown+0x2c>)
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	441a      	add	r2, r3
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	605a      	str	r2, [r3, #4]
}
 801a90a:	bf00      	nop
 801a90c:	370c      	adds	r7, #12
 801a90e:	46bd      	mov	sp, r7
 801a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a914:	4770      	bx	lr
 801a916:	bf00      	nop
 801a918:	200106ac 	.word	0x200106ac

0801a91c <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 801a91c:	b480      	push	{r7}
 801a91e:	b085      	sub	sp, #20
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	685a      	ldr	r2, [r3, #4]
 801a928:	4b06      	ldr	r3, [pc, #24]	; (801a944 <TimerLeftMS+0x28>)
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	1ad3      	subs	r3, r2, r3
 801a92e:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801a936:	4618      	mov	r0, r3
 801a938:	3714      	adds	r7, #20
 801a93a:	46bd      	mov	sp, r7
 801a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a940:	4770      	bx	lr
 801a942:	bf00      	nop
 801a944:	200106ac 	.word	0x200106ac

0801a948 <TimerInit>:

void TimerInit(Timer *timer) {
 801a948:	b480      	push	{r7}
 801a94a:	b083      	sub	sp, #12
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	2200      	movs	r2, #0
 801a954:	605a      	str	r2, [r3, #4]
}
 801a956:	bf00      	nop
 801a958:	370c      	adds	r7, #12
 801a95a:	46bd      	mov	sp, r7
 801a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a960:	4770      	bx	lr
	...

0801a964 <NewNetwork>:

#ifdef MQTT_LWIP_SOCKET
void NewNetwork(Network *n) {
 801a964:	b480      	push	{r7}
 801a966:	b083      	sub	sp, #12
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
	n->socket = 0; //clear
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	2200      	movs	r2, #0
 801a970:	601a      	str	r2, [r3, #0]
	n->mqttread = net_read; //receive function
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	4a06      	ldr	r2, [pc, #24]	; (801a990 <NewNetwork+0x2c>)
 801a976:	605a      	str	r2, [r3, #4]
	n->mqttwrite = net_write; //send function
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	4a06      	ldr	r2, [pc, #24]	; (801a994 <NewNetwork+0x30>)
 801a97c:	609a      	str	r2, [r3, #8]
	n->disconnect = net_disconnect; //disconnection function
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	4a05      	ldr	r2, [pc, #20]	; (801a998 <NewNetwork+0x34>)
 801a982:	60da      	str	r2, [r3, #12]
}
 801a984:	bf00      	nop
 801a986:	370c      	adds	r7, #12
 801a988:	46bd      	mov	sp, r7
 801a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a98e:	4770      	bx	lr
 801a990:	0801aa39 	.word	0x0801aa39
 801a994:	0801aa89 	.word	0x0801aa89
 801a998:	0801aaaf 	.word	0x0801aaaf

0801a99c <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b088      	sub	sp, #32
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	60f8      	str	r0, [r7, #12]
 801a9a4:	60b9      	str	r1, [r7, #8]
 801a9a6:	607a      	str	r2, [r7, #4]
	struct sockaddr_in server_addr;

	if(n->socket)
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d004      	beq.n	801a9ba <ConnectNetwork+0x1e>
	{
		close(n->socket);
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	4618      	mov	r0, r3
 801a9b6:	f7f0 fcf3 	bl	800b3a0 <lwip_close>
	}

	n->socket = socket(PF_INET, SOCK_STREAM, 0); //create socket
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	2101      	movs	r1, #1
 801a9be:	2002      	movs	r0, #2
 801a9c0:	f7f1 fa00 	bl	800bdc4 <lwip_socket>
 801a9c4:	4602      	mov	r2, r0
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	601a      	str	r2, [r3, #0]
	if(n->socket < 0)
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	da05      	bge.n	801a9de <ConnectNetwork+0x42>
	{
		n->socket = 0;
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	601a      	str	r2, [r3, #0]
		return -1;
 801a9d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a9dc:	e028      	b.n	801aa30 <ConnectNetwork+0x94>
	}

	memset(&server_addr, 0, sizeof(struct sockaddr_in)); //broker address info
 801a9de:	f107 0310 	add.w	r3, r7, #16
 801a9e2:	2210      	movs	r2, #16
 801a9e4:	2100      	movs	r1, #0
 801a9e6:	4618      	mov	r0, r3
 801a9e8:	f000 ff62 	bl	801b8b0 <memset>
	server_addr.sin_family = AF_INET;
 801a9ec:	2302      	movs	r3, #2
 801a9ee:	747b      	strb	r3, [r7, #17]
	server_addr.sin_addr.s_addr = inet_addr(ip);
 801a9f0:	68b8      	ldr	r0, [r7, #8]
 801a9f2:	f7fd fe54 	bl	801869e <ipaddr_addr>
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	617b      	str	r3, [r7, #20]
	server_addr.sin_port = htons(port);
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	b29b      	uxth	r3, r3
 801a9fe:	4618      	mov	r0, r3
 801aa00:	f7f1 fe20 	bl	800c644 <lwip_htons>
 801aa04:	4603      	mov	r3, r0
 801aa06:	827b      	strh	r3, [r7, #18]

	if(connect(n->socket, (struct sockaddr*)&server_addr, sizeof(struct sockaddr_in)) < 0) //connect to the broker
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	f107 0110 	add.w	r1, r7, #16
 801aa10:	2210      	movs	r2, #16
 801aa12:	4618      	mov	r0, r3
 801aa14:	f7f0 fd1a 	bl	800b44c <lwip_connect>
 801aa18:	4603      	mov	r3, r0
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	da07      	bge.n	801aa2e <ConnectNetwork+0x92>
	{
		close(n->socket);
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	4618      	mov	r0, r3
 801aa24:	f7f0 fcbc 	bl	800b3a0 <lwip_close>
		return -1;
 801aa28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa2c:	e000      	b.n	801aa30 <ConnectNetwork+0x94>
	}
	return 0;
 801aa2e:	2300      	movs	r3, #0
}
 801aa30:	4618      	mov	r0, r3
 801aa32:	3720      	adds	r7, #32
 801aa34:	46bd      	mov	sp, r7
 801aa36:	bd80      	pop	{r7, pc}

0801aa38 <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 801aa38:	b580      	push	{r7, lr}
 801aa3a:	b086      	sub	sp, #24
 801aa3c:	af00      	add	r7, sp, #0
 801aa3e:	60f8      	str	r0, [r7, #12]
 801aa40:	60b9      	str	r1, [r7, #8]
 801aa42:	607a      	str	r2, [r7, #4]
 801aa44:	603b      	str	r3, [r7, #0]
	int available;

	/* !!! LWIP_SO_RCVBUF must be enabled !!! */
	if(ioctl(n->socket, FIONREAD, &available) < 0) return -1; //check receive buffer
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	f107 0214 	add.w	r2, r7, #20
 801aa4e:	490d      	ldr	r1, [pc, #52]	; (801aa84 <net_read+0x4c>)
 801aa50:	4618      	mov	r0, r3
 801aa52:	f7f1 fb9b 	bl	800c18c <lwip_ioctl>
 801aa56:	4603      	mov	r3, r0
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	da02      	bge.n	801aa62 <net_read+0x2a>
 801aa5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa60:	e00c      	b.n	801aa7c <net_read+0x44>

	if(available > 0)
 801aa62:	697b      	ldr	r3, [r7, #20]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	dd08      	ble.n	801aa7a <net_read+0x42>
	{
		return recv(n->socket, buffer, len, 0);
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	6818      	ldr	r0, [r3, #0]
 801aa6c:	687a      	ldr	r2, [r7, #4]
 801aa6e:	2300      	movs	r3, #0
 801aa70:	68b9      	ldr	r1, [r7, #8]
 801aa72:	f7f1 f881 	bl	800bb78 <lwip_recv>
 801aa76:	4603      	mov	r3, r0
 801aa78:	e000      	b.n	801aa7c <net_read+0x44>
	}

	return 0;
 801aa7a:	2300      	movs	r3, #0
}
 801aa7c:	4618      	mov	r0, r3
 801aa7e:	3718      	adds	r7, #24
 801aa80:	46bd      	mov	sp, r7
 801aa82:	bd80      	pop	{r7, pc}
 801aa84:	4004667f 	.word	0x4004667f

0801aa88 <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 801aa88:	b580      	push	{r7, lr}
 801aa8a:	b084      	sub	sp, #16
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	60f8      	str	r0, [r7, #12]
 801aa90:	60b9      	str	r1, [r7, #8]
 801aa92:	607a      	str	r2, [r7, #4]
 801aa94:	603b      	str	r3, [r7, #0]
	return send(n->socket, buffer, len, 0);
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	6818      	ldr	r0, [r3, #0]
 801aa9a:	687a      	ldr	r2, [r7, #4]
 801aa9c:	2300      	movs	r3, #0
 801aa9e:	68b9      	ldr	r1, [r7, #8]
 801aaa0:	f7f1 f880 	bl	800bba4 <lwip_send>
 801aaa4:	4603      	mov	r3, r0
}
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	3710      	adds	r7, #16
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	bd80      	pop	{r7, pc}

0801aaae <net_disconnect>:

void net_disconnect(Network *n) {
 801aaae:	b580      	push	{r7, lr}
 801aab0:	b082      	sub	sp, #8
 801aab2:	af00      	add	r7, sp, #0
 801aab4:	6078      	str	r0, [r7, #4]
	close(n->socket);
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	4618      	mov	r0, r3
 801aabc:	f7f0 fc70 	bl	800b3a0 <lwip_close>
	n->socket = 0;
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	2200      	movs	r2, #0
 801aac4:	601a      	str	r2, [r3, #0]
}
 801aac6:	bf00      	nop
 801aac8:	3708      	adds	r7, #8
 801aaca:	46bd      	mov	sp, r7
 801aacc:	bd80      	pop	{r7, pc}

0801aace <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801aace:	b590      	push	{r4, r7, lr}
 801aad0:	b085      	sub	sp, #20
 801aad2:	af00      	add	r7, sp, #0
 801aad4:	6078      	str	r0, [r7, #4]
	int len = 0;
 801aad6:	2300      	movs	r3, #0
 801aad8:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	7a1b      	ldrb	r3, [r3, #8]
 801aade:	2b03      	cmp	r3, #3
 801aae0:	d102      	bne.n	801aae8 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801aae2:	230c      	movs	r3, #12
 801aae4:	60fb      	str	r3, [r7, #12]
 801aae6:	e005      	b.n	801aaf4 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	7a1b      	ldrb	r3, [r3, #8]
 801aaec:	2b04      	cmp	r3, #4
 801aaee:	d101      	bne.n	801aaf4 <MQTTSerialize_connectLength+0x26>
		len = 10;
 801aaf0:	230a      	movs	r3, #10
 801aaf2:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	330c      	adds	r3, #12
 801aaf8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801aafc:	f000 fc53 	bl	801b3a6 <MQTTstrlen>
 801ab00:	4603      	mov	r3, r0
 801ab02:	3302      	adds	r3, #2
 801ab04:	68fa      	ldr	r2, [r7, #12]
 801ab06:	4413      	add	r3, r2
 801ab08:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	7edb      	ldrb	r3, [r3, #27]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d013      	beq.n	801ab3a <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	3324      	adds	r3, #36	; 0x24
 801ab16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab1a:	f000 fc44 	bl	801b3a6 <MQTTstrlen>
 801ab1e:	4603      	mov	r3, r0
 801ab20:	1c9c      	adds	r4, r3, #2
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	3330      	adds	r3, #48	; 0x30
 801ab26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab2a:	f000 fc3c 	bl	801b3a6 <MQTTstrlen>
 801ab2e:	4603      	mov	r3, r0
 801ab30:	4423      	add	r3, r4
 801ab32:	3302      	adds	r3, #2
 801ab34:	68fa      	ldr	r2, [r7, #12]
 801ab36:	4413      	add	r3, r2
 801ab38:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d103      	bne.n	801ab4a <MQTTSerialize_connectLength+0x7c>
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d00a      	beq.n	801ab60 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	3340      	adds	r3, #64	; 0x40
 801ab4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab52:	f000 fc28 	bl	801b3a6 <MQTTstrlen>
 801ab56:	4603      	mov	r3, r0
 801ab58:	3302      	adds	r3, #2
 801ab5a:	68fa      	ldr	r2, [r7, #12]
 801ab5c:	4413      	add	r3, r2
 801ab5e:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d103      	bne.n	801ab70 <MQTTSerialize_connectLength+0xa2>
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d00a      	beq.n	801ab86 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	334c      	adds	r3, #76	; 0x4c
 801ab74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab78:	f000 fc15 	bl	801b3a6 <MQTTstrlen>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	3302      	adds	r3, #2
 801ab80:	68fa      	ldr	r2, [r7, #12]
 801ab82:	4413      	add	r3, r2
 801ab84:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 801ab86:	68fb      	ldr	r3, [r7, #12]
}
 801ab88:	4618      	mov	r0, r3
 801ab8a:	3714      	adds	r7, #20
 801ab8c:	46bd      	mov	sp, r7
 801ab8e:	bd90      	pop	{r4, r7, pc}

0801ab90 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b08a      	sub	sp, #40	; 0x28
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	60f8      	str	r0, [r7, #12]
 801ab98:	60b9      	str	r1, [r7, #8]
 801ab9a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801aba0:	2300      	movs	r3, #0
 801aba2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 801aba4:	2300      	movs	r3, #0
 801aba6:	617b      	str	r3, [r7, #20]
	int len = 0;
 801aba8:	2300      	movs	r3, #0
 801abaa:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801abac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801abb0:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801abb2:	6878      	ldr	r0, [r7, #4]
 801abb4:	f7ff ff8b 	bl	801aace <MQTTSerialize_connectLength>
 801abb8:	6238      	str	r0, [r7, #32]
 801abba:	6a38      	ldr	r0, [r7, #32]
 801abbc:	f000 faa8 	bl	801b110 <MQTTPacket_len>
 801abc0:	4602      	mov	r2, r0
 801abc2:	68bb      	ldr	r3, [r7, #8]
 801abc4:	4293      	cmp	r3, r2
 801abc6:	da03      	bge.n	801abd0 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801abc8:	f06f 0301 	mvn.w	r3, #1
 801abcc:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801abce:	e0c2      	b.n	801ad56 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801abd0:	2300      	movs	r3, #0
 801abd2:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 801abd4:	7e3b      	ldrb	r3, [r7, #24]
 801abd6:	2201      	movs	r2, #1
 801abd8:	f362 1307 	bfi	r3, r2, #4, #4
 801abdc:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801abde:	7e3a      	ldrb	r2, [r7, #24]
 801abe0:	f107 031c 	add.w	r3, r7, #28
 801abe4:	4611      	mov	r1, r2
 801abe6:	4618      	mov	r0, r3
 801abe8:	f000 fb21 	bl	801b22e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801abec:	69fb      	ldr	r3, [r7, #28]
 801abee:	6a39      	ldr	r1, [r7, #32]
 801abf0:	4618      	mov	r0, r3
 801abf2:	f000 fa21 	bl	801b038 <MQTTPacket_encode>
 801abf6:	4602      	mov	r2, r0
 801abf8:	69fb      	ldr	r3, [r7, #28]
 801abfa:	4413      	add	r3, r2
 801abfc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	7a1b      	ldrb	r3, [r3, #8]
 801ac02:	2b04      	cmp	r3, #4
 801ac04:	d10c      	bne.n	801ac20 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801ac06:	f107 031c 	add.w	r3, r7, #28
 801ac0a:	4955      	ldr	r1, [pc, #340]	; (801ad60 <MQTTSerialize_connect+0x1d0>)
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	f000 fb4c 	bl	801b2aa <writeCString>
		writeChar(&ptr, (char) 4);
 801ac12:	f107 031c 	add.w	r3, r7, #28
 801ac16:	2104      	movs	r1, #4
 801ac18:	4618      	mov	r0, r3
 801ac1a:	f000 fb08 	bl	801b22e <writeChar>
 801ac1e:	e00b      	b.n	801ac38 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801ac20:	f107 031c 	add.w	r3, r7, #28
 801ac24:	494f      	ldr	r1, [pc, #316]	; (801ad64 <MQTTSerialize_connect+0x1d4>)
 801ac26:	4618      	mov	r0, r3
 801ac28:	f000 fb3f 	bl	801b2aa <writeCString>
		writeChar(&ptr, (char) 3);
 801ac2c:	f107 031c 	add.w	r3, r7, #28
 801ac30:	2103      	movs	r1, #3
 801ac32:	4618      	mov	r0, r3
 801ac34:	f000 fafb 	bl	801b22e <writeChar>
	}

	flags.all = 0;
 801ac38:	2300      	movs	r3, #0
 801ac3a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	7e9b      	ldrb	r3, [r3, #26]
 801ac40:	f003 0301 	and.w	r3, r3, #1
 801ac44:	b2da      	uxtb	r2, r3
 801ac46:	7d3b      	ldrb	r3, [r7, #20]
 801ac48:	f362 0341 	bfi	r3, r2, #1, #1
 801ac4c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	7edb      	ldrb	r3, [r3, #27]
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	bf14      	ite	ne
 801ac56:	2301      	movne	r3, #1
 801ac58:	2300      	moveq	r3, #0
 801ac5a:	b2da      	uxtb	r2, r3
 801ac5c:	7d3b      	ldrb	r3, [r7, #20]
 801ac5e:	f362 0382 	bfi	r3, r2, #2, #1
 801ac62:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 801ac64:	7d3b      	ldrb	r3, [r7, #20]
 801ac66:	f003 0304 	and.w	r3, r3, #4
 801ac6a:	b2db      	uxtb	r3, r3
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d013      	beq.n	801ac98 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ac76:	f003 0303 	and.w	r3, r3, #3
 801ac7a:	b2da      	uxtb	r2, r3
 801ac7c:	7d3b      	ldrb	r3, [r7, #20]
 801ac7e:	f362 03c4 	bfi	r3, r2, #3, #2
 801ac82:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ac8a:	f003 0301 	and.w	r3, r3, #1
 801ac8e:	b2da      	uxtb	r2, r3
 801ac90:	7d3b      	ldrb	r3, [r7, #20]
 801ac92:	f362 1345 	bfi	r3, r2, #5, #1
 801ac96:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d103      	bne.n	801aca8 <MQTTSerialize_connect+0x118>
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d003      	beq.n	801acb0 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 801aca8:	7d3b      	ldrb	r3, [r7, #20]
 801acaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801acae:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d103      	bne.n	801acc0 <MQTTSerialize_connect+0x130>
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d003      	beq.n	801acc8 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801acc0:	7d3b      	ldrb	r3, [r7, #20]
 801acc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801acc6:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 801acc8:	7d3a      	ldrb	r2, [r7, #20]
 801acca:	f107 031c 	add.w	r3, r7, #28
 801acce:	4611      	mov	r1, r2
 801acd0:	4618      	mov	r0, r3
 801acd2:	f000 faac 	bl	801b22e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	8b1b      	ldrh	r3, [r3, #24]
 801acda:	461a      	mov	r2, r3
 801acdc:	f107 031c 	add.w	r3, r7, #28
 801ace0:	4611      	mov	r1, r2
 801ace2:	4618      	mov	r0, r3
 801ace4:	f000 fab8 	bl	801b258 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	f107 001c 	add.w	r0, r7, #28
 801acee:	330c      	adds	r3, #12
 801acf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801acf2:	f000 faf9 	bl	801b2e8 <writeMQTTString>
	if (options->willFlag)
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	7edb      	ldrb	r3, [r3, #27]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d00d      	beq.n	801ad1a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	f107 001c 	add.w	r0, r7, #28
 801ad04:	3324      	adds	r3, #36	; 0x24
 801ad06:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad08:	f000 faee 	bl	801b2e8 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	f107 001c 	add.w	r0, r7, #28
 801ad12:	3330      	adds	r3, #48	; 0x30
 801ad14:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad16:	f000 fae7 	bl	801b2e8 <writeMQTTString>
	}
	if (flags.bits.username)
 801ad1a:	7d3b      	ldrb	r3, [r7, #20]
 801ad1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801ad20:	b2db      	uxtb	r3, r3
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d006      	beq.n	801ad34 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	f107 001c 	add.w	r0, r7, #28
 801ad2c:	3340      	adds	r3, #64	; 0x40
 801ad2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad30:	f000 fada 	bl	801b2e8 <writeMQTTString>
	if (flags.bits.password)
 801ad34:	7d3b      	ldrb	r3, [r7, #20]
 801ad36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad3a:	b2db      	uxtb	r3, r3
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d006      	beq.n	801ad4e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	f107 001c 	add.w	r0, r7, #28
 801ad46:	334c      	adds	r3, #76	; 0x4c
 801ad48:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad4a:	f000 facd 	bl	801b2e8 <writeMQTTString>

	rc = ptr - buf;
 801ad4e:	69fa      	ldr	r2, [r7, #28]
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	1ad3      	subs	r3, r2, r3
 801ad54:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801ad56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ad58:	4618      	mov	r0, r3
 801ad5a:	3728      	adds	r7, #40	; 0x28
 801ad5c:	46bd      	mov	sp, r7
 801ad5e:	bd80      	pop	{r7, pc}
 801ad60:	080209a8 	.word	0x080209a8
 801ad64:	080209b0 	.word	0x080209b0

0801ad68 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b08a      	sub	sp, #40	; 0x28
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	60f8      	str	r0, [r7, #12]
 801ad70:	60b9      	str	r1, [r7, #8]
 801ad72:	607a      	str	r2, [r7, #4]
 801ad74:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801ad76:	2300      	movs	r3, #0
 801ad78:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801ad82:	2300      	movs	r3, #0
 801ad84:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 801ad86:	2300      	movs	r3, #0
 801ad88:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801ad8a:	f107 0318 	add.w	r3, r7, #24
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f000 fa39 	bl	801b206 <readChar>
 801ad94:	4603      	mov	r3, r0
 801ad96:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 801ad98:	7f3b      	ldrb	r3, [r7, #28]
 801ad9a:	f023 030f 	bic.w	r3, r3, #15
 801ad9e:	b2db      	uxtb	r3, r3
 801ada0:	2b20      	cmp	r3, #32
 801ada2:	d12e      	bne.n	801ae02 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801ada4:	69bb      	ldr	r3, [r7, #24]
 801ada6:	f107 0214 	add.w	r2, r7, #20
 801adaa:	4611      	mov	r1, r2
 801adac:	4618      	mov	r0, r3
 801adae:	f000 f9f9 	bl	801b1a4 <MQTTPacket_decodeBuf>
 801adb2:	6278      	str	r0, [r7, #36]	; 0x24
 801adb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801adb6:	69bb      	ldr	r3, [r7, #24]
 801adb8:	4413      	add	r3, r2
 801adba:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801adbc:	69bb      	ldr	r3, [r7, #24]
 801adbe:	697a      	ldr	r2, [r7, #20]
 801adc0:	4413      	add	r3, r2
 801adc2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801adc4:	69bb      	ldr	r3, [r7, #24]
 801adc6:	6a3a      	ldr	r2, [r7, #32]
 801adc8:	1ad3      	subs	r3, r2, r3
 801adca:	2b01      	cmp	r3, #1
 801adcc:	dd1b      	ble.n	801ae06 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801adce:	f107 0318 	add.w	r3, r7, #24
 801add2:	4618      	mov	r0, r3
 801add4:	f000 fa17 	bl	801b206 <readChar>
 801add8:	4603      	mov	r3, r0
 801adda:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801addc:	7c3b      	ldrb	r3, [r7, #16]
 801adde:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ade2:	b2db      	uxtb	r3, r3
 801ade4:	461a      	mov	r2, r3
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801adea:	f107 0318 	add.w	r3, r7, #24
 801adee:	4618      	mov	r0, r3
 801adf0:	f000 fa09 	bl	801b206 <readChar>
 801adf4:	4603      	mov	r3, r0
 801adf6:	461a      	mov	r2, r3
 801adf8:	68bb      	ldr	r3, [r7, #8]
 801adfa:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801adfc:	2301      	movs	r3, #1
 801adfe:	627b      	str	r3, [r7, #36]	; 0x24
 801ae00:	e002      	b.n	801ae08 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801ae02:	bf00      	nop
 801ae04:	e000      	b.n	801ae08 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801ae06:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ae0a:	4618      	mov	r0, r3
 801ae0c:	3728      	adds	r7, #40	; 0x28
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	bd80      	pop	{r7, pc}

0801ae12 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801ae12:	b580      	push	{r7, lr}
 801ae14:	b088      	sub	sp, #32
 801ae16:	af00      	add	r7, sp, #0
 801ae18:	60f8      	str	r0, [r7, #12]
 801ae1a:	60b9      	str	r1, [r7, #8]
 801ae1c:	4613      	mov	r3, r2
 801ae1e:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801ae20:	2300      	movs	r3, #0
 801ae22:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801ae24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae28:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801ae2e:	68bb      	ldr	r3, [r7, #8]
 801ae30:	2b01      	cmp	r3, #1
 801ae32:	dc03      	bgt.n	801ae3c <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801ae34:	f06f 0301 	mvn.w	r3, #1
 801ae38:	61fb      	str	r3, [r7, #28]
		goto exit;
 801ae3a:	e01d      	b.n	801ae78 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801ae40:	79fb      	ldrb	r3, [r7, #7]
 801ae42:	f003 030f 	and.w	r3, r3, #15
 801ae46:	b2da      	uxtb	r2, r3
 801ae48:	7e3b      	ldrb	r3, [r7, #24]
 801ae4a:	f362 1307 	bfi	r3, r2, #4, #4
 801ae4e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801ae50:	7e3a      	ldrb	r2, [r7, #24]
 801ae52:	f107 0314 	add.w	r3, r7, #20
 801ae56:	4611      	mov	r1, r2
 801ae58:	4618      	mov	r0, r3
 801ae5a:	f000 f9e8 	bl	801b22e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801ae5e:	697b      	ldr	r3, [r7, #20]
 801ae60:	2100      	movs	r1, #0
 801ae62:	4618      	mov	r0, r3
 801ae64:	f000 f8e8 	bl	801b038 <MQTTPacket_encode>
 801ae68:	4602      	mov	r2, r0
 801ae6a:	697b      	ldr	r3, [r7, #20]
 801ae6c:	4413      	add	r3, r2
 801ae6e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801ae70:	697a      	ldr	r2, [r7, #20]
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	1ad3      	subs	r3, r2, r3
 801ae76:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801ae78:	69fb      	ldr	r3, [r7, #28]
}
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	3720      	adds	r7, #32
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}

0801ae82 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 801ae82:	b580      	push	{r7, lr}
 801ae84:	b082      	sub	sp, #8
 801ae86:	af00      	add	r7, sp, #0
 801ae88:	6078      	str	r0, [r7, #4]
 801ae8a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 801ae8c:	220e      	movs	r2, #14
 801ae8e:	6839      	ldr	r1, [r7, #0]
 801ae90:	6878      	ldr	r0, [r7, #4]
 801ae92:	f7ff ffbe 	bl	801ae12 <MQTTSerialize_zero>
 801ae96:	4603      	mov	r3, r0
}
 801ae98:	4618      	mov	r0, r3
 801ae9a:	3708      	adds	r7, #8
 801ae9c:	46bd      	mov	sp, r7
 801ae9e:	bd80      	pop	{r7, pc}

0801aea0 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b082      	sub	sp, #8
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	6078      	str	r0, [r7, #4]
 801aea8:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801aeaa:	220c      	movs	r2, #12
 801aeac:	6839      	ldr	r1, [r7, #0]
 801aeae:	6878      	ldr	r0, [r7, #4]
 801aeb0:	f7ff ffaf 	bl	801ae12 <MQTTSerialize_zero>
 801aeb4:	4603      	mov	r3, r0
}
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	3708      	adds	r7, #8
 801aeba:	46bd      	mov	sp, r7
 801aebc:	bd80      	pop	{r7, pc}

0801aebe <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801aebe:	b580      	push	{r7, lr}
 801aec0:	b08a      	sub	sp, #40	; 0x28
 801aec2:	af00      	add	r7, sp, #0
 801aec4:	60f8      	str	r0, [r7, #12]
 801aec6:	60b9      	str	r1, [r7, #8]
 801aec8:	607a      	str	r2, [r7, #4]
 801aeca:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801aecc:	2300      	movs	r3, #0
 801aece:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aed2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801aed4:	2300      	movs	r3, #0
 801aed6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801aed8:	2300      	movs	r3, #0
 801aeda:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 801aedc:	2300      	movs	r3, #0
 801aede:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801aee0:	f107 0318 	add.w	r3, r7, #24
 801aee4:	4618      	mov	r0, r3
 801aee6:	f000 f98e 	bl	801b206 <readChar>
 801aeea:	4603      	mov	r3, r0
 801aeec:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801aeee:	7f3b      	ldrb	r3, [r7, #28]
 801aef0:	f023 030f 	bic.w	r3, r3, #15
 801aef4:	b2db      	uxtb	r3, r3
 801aef6:	2b30      	cmp	r3, #48	; 0x30
 801aef8:	d14b      	bne.n	801af92 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801aefa:	7f3b      	ldrb	r3, [r7, #28]
 801aefc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801af00:	b2db      	uxtb	r3, r3
 801af02:	461a      	mov	r2, r3
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 801af08:	7f3b      	ldrb	r3, [r7, #28]
 801af0a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801af0e:	b2db      	uxtb	r3, r3
 801af10:	461a      	mov	r2, r3
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 801af16:	7f3b      	ldrb	r3, [r7, #28]
 801af18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801af1c:	b2db      	uxtb	r3, r3
 801af1e:	461a      	mov	r2, r3
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801af24:	69bb      	ldr	r3, [r7, #24]
 801af26:	f107 0214 	add.w	r2, r7, #20
 801af2a:	4611      	mov	r1, r2
 801af2c:	4618      	mov	r0, r3
 801af2e:	f000 f939 	bl	801b1a4 <MQTTPacket_decodeBuf>
 801af32:	6278      	str	r0, [r7, #36]	; 0x24
 801af34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af36:	69bb      	ldr	r3, [r7, #24]
 801af38:	4413      	add	r3, r2
 801af3a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801af3c:	69bb      	ldr	r3, [r7, #24]
 801af3e:	697a      	ldr	r2, [r7, #20]
 801af40:	4413      	add	r3, r2
 801af42:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801af44:	f107 0318 	add.w	r3, r7, #24
 801af48:	6a3a      	ldr	r2, [r7, #32]
 801af4a:	4619      	mov	r1, r3
 801af4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af4e:	f000 f9f9 	bl	801b344 <readMQTTLenString>
 801af52:	4603      	mov	r3, r0
 801af54:	2b00      	cmp	r3, #0
 801af56:	d01e      	beq.n	801af96 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801af58:	69bb      	ldr	r3, [r7, #24]
 801af5a:	6a3a      	ldr	r2, [r7, #32]
 801af5c:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801af5e:	2b00      	cmp	r3, #0
 801af60:	db19      	blt.n	801af96 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	2b00      	cmp	r3, #0
 801af68:	dd08      	ble.n	801af7c <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801af6a:	f107 0318 	add.w	r3, r7, #24
 801af6e:	4618      	mov	r0, r3
 801af70:	f000 f92e 	bl	801b1d0 <readInt>
 801af74:	4603      	mov	r3, r0
 801af76:	b29a      	uxth	r2, r3
 801af78:	683b      	ldr	r3, [r7, #0]
 801af7a:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801af7c:	69bb      	ldr	r3, [r7, #24]
 801af7e:	6a3a      	ldr	r2, [r7, #32]
 801af80:	1ad2      	subs	r2, r2, r3
 801af82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af84:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 801af86:	69ba      	ldr	r2, [r7, #24]
 801af88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af8a:	601a      	str	r2, [r3, #0]
	rc = 1;
 801af8c:	2301      	movs	r3, #1
 801af8e:	627b      	str	r3, [r7, #36]	; 0x24
 801af90:	e002      	b.n	801af98 <MQTTDeserialize_publish+0xda>
		goto exit;
 801af92:	bf00      	nop
 801af94:	e000      	b.n	801af98 <MQTTDeserialize_publish+0xda>
		goto exit;
 801af96:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801af9a:	4618      	mov	r0, r3
 801af9c:	3728      	adds	r7, #40	; 0x28
 801af9e:	46bd      	mov	sp, r7
 801afa0:	bd80      	pop	{r7, pc}

0801afa2 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801afa2:	b580      	push	{r7, lr}
 801afa4:	b08a      	sub	sp, #40	; 0x28
 801afa6:	af00      	add	r7, sp, #0
 801afa8:	60f8      	str	r0, [r7, #12]
 801afaa:	60b9      	str	r1, [r7, #8]
 801afac:	607a      	str	r2, [r7, #4]
 801afae:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801afb0:	2300      	movs	r3, #0
 801afb2:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801afb4:	683b      	ldr	r3, [r7, #0]
 801afb6:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801afb8:	2300      	movs	r3, #0
 801afba:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801afbc:	2300      	movs	r3, #0
 801afbe:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801afc0:	f107 0318 	add.w	r3, r7, #24
 801afc4:	4618      	mov	r0, r3
 801afc6:	f000 f91e 	bl	801b206 <readChar>
 801afca:	4603      	mov	r3, r0
 801afcc:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801afce:	7f3b      	ldrb	r3, [r7, #28]
 801afd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801afd4:	b2db      	uxtb	r3, r3
 801afd6:	461a      	mov	r2, r3
 801afd8:	68bb      	ldr	r3, [r7, #8]
 801afda:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801afdc:	7f3b      	ldrb	r3, [r7, #28]
 801afde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801afe2:	b2db      	uxtb	r3, r3
 801afe4:	461a      	mov	r2, r3
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801afea:	69bb      	ldr	r3, [r7, #24]
 801afec:	f107 0214 	add.w	r2, r7, #20
 801aff0:	4611      	mov	r1, r2
 801aff2:	4618      	mov	r0, r3
 801aff4:	f000 f8d6 	bl	801b1a4 <MQTTPacket_decodeBuf>
 801aff8:	6278      	str	r0, [r7, #36]	; 0x24
 801affa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801affc:	69bb      	ldr	r3, [r7, #24]
 801affe:	4413      	add	r3, r2
 801b000:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801b002:	69bb      	ldr	r3, [r7, #24]
 801b004:	697a      	ldr	r2, [r7, #20]
 801b006:	4413      	add	r3, r2
 801b008:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801b00a:	69bb      	ldr	r3, [r7, #24]
 801b00c:	6a3a      	ldr	r2, [r7, #32]
 801b00e:	1ad3      	subs	r3, r2, r3
 801b010:	2b01      	cmp	r3, #1
 801b012:	dd0b      	ble.n	801b02c <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 801b014:	f107 0318 	add.w	r3, r7, #24
 801b018:	4618      	mov	r0, r3
 801b01a:	f000 f8d9 	bl	801b1d0 <readInt>
 801b01e:	4603      	mov	r3, r0
 801b020:	b29a      	uxth	r2, r3
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	801a      	strh	r2, [r3, #0]

	rc = 1;
 801b026:	2301      	movs	r3, #1
 801b028:	627b      	str	r3, [r7, #36]	; 0x24
 801b02a:	e000      	b.n	801b02e <MQTTDeserialize_ack+0x8c>
		goto exit;
 801b02c:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b030:	4618      	mov	r0, r3
 801b032:	3728      	adds	r7, #40	; 0x28
 801b034:	46bd      	mov	sp, r7
 801b036:	bd80      	pop	{r7, pc}

0801b038 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 801b038:	b480      	push	{r7}
 801b03a:	b085      	sub	sp, #20
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	6078      	str	r0, [r7, #4]
 801b040:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801b042:	2300      	movs	r3, #0
 801b044:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801b046:	683b      	ldr	r3, [r7, #0]
 801b048:	425a      	negs	r2, r3
 801b04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b04e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b052:	bf58      	it	pl
 801b054:	4253      	negpl	r3, r2
 801b056:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 801b058:	683b      	ldr	r3, [r7, #0]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	da00      	bge.n	801b060 <MQTTPacket_encode+0x28>
 801b05e:	337f      	adds	r3, #127	; 0x7f
 801b060:	11db      	asrs	r3, r3, #7
 801b062:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801b064:	683b      	ldr	r3, [r7, #0]
 801b066:	2b00      	cmp	r3, #0
 801b068:	dd03      	ble.n	801b072 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 801b06a:	7afb      	ldrb	r3, [r7, #11]
 801b06c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b070:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	1c5a      	adds	r2, r3, #1
 801b076:	60fa      	str	r2, [r7, #12]
 801b078:	461a      	mov	r2, r3
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	4413      	add	r3, r2
 801b07e:	7afa      	ldrb	r2, [r7, #11]
 801b080:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801b082:	683b      	ldr	r3, [r7, #0]
 801b084:	2b00      	cmp	r3, #0
 801b086:	dcde      	bgt.n	801b046 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 801b088:	68fb      	ldr	r3, [r7, #12]
}
 801b08a:	4618      	mov	r0, r3
 801b08c:	3714      	adds	r7, #20
 801b08e:	46bd      	mov	sp, r7
 801b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b094:	4770      	bx	lr

0801b096 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 801b096:	b580      	push	{r7, lr}
 801b098:	b086      	sub	sp, #24
 801b09a:	af00      	add	r7, sp, #0
 801b09c:	6078      	str	r0, [r7, #4]
 801b09e:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801b0a0:	2301      	movs	r3, #1
 801b0a2:	617b      	str	r3, [r7, #20]
	int len = 0;
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801b0ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0b2:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801b0b4:	693b      	ldr	r3, [r7, #16]
 801b0b6:	3301      	adds	r3, #1
 801b0b8:	613b      	str	r3, [r7, #16]
 801b0ba:	693b      	ldr	r3, [r7, #16]
 801b0bc:	2b04      	cmp	r3, #4
 801b0be:	dd03      	ble.n	801b0c8 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801b0c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0c4:	60fb      	str	r3, [r7, #12]
			goto exit;
 801b0c6:	e01d      	b.n	801b104 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801b0c8:	f107 020b 	add.w	r2, r7, #11
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	2101      	movs	r1, #1
 801b0d0:	4610      	mov	r0, r2
 801b0d2:	4798      	blx	r3
 801b0d4:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	2b01      	cmp	r3, #1
 801b0da:	d112      	bne.n	801b102 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801b0dc:	683b      	ldr	r3, [r7, #0]
 801b0de:	681a      	ldr	r2, [r3, #0]
 801b0e0:	7afb      	ldrb	r3, [r7, #11]
 801b0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b0e6:	6979      	ldr	r1, [r7, #20]
 801b0e8:	fb01 f303 	mul.w	r3, r1, r3
 801b0ec:	441a      	add	r2, r3
 801b0ee:	683b      	ldr	r3, [r7, #0]
 801b0f0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801b0f2:	697b      	ldr	r3, [r7, #20]
 801b0f4:	01db      	lsls	r3, r3, #7
 801b0f6:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801b0f8:	7afb      	ldrb	r3, [r7, #11]
 801b0fa:	b25b      	sxtb	r3, r3
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	dbd6      	blt.n	801b0ae <MQTTPacket_decode+0x18>
exit:
 801b100:	e000      	b.n	801b104 <MQTTPacket_decode+0x6e>
			goto exit;
 801b102:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801b104:	693b      	ldr	r3, [r7, #16]
}
 801b106:	4618      	mov	r0, r3
 801b108:	3718      	adds	r7, #24
 801b10a:	46bd      	mov	sp, r7
 801b10c:	bd80      	pop	{r7, pc}
	...

0801b110 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801b110:	b480      	push	{r7}
 801b112:	b083      	sub	sp, #12
 801b114:	af00      	add	r7, sp, #0
 801b116:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	3301      	adds	r3, #1
 801b11c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	2b7f      	cmp	r3, #127	; 0x7f
 801b122:	dc03      	bgt.n	801b12c <MQTTPacket_len+0x1c>
		rem_len += 1;
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	3301      	adds	r3, #1
 801b128:	607b      	str	r3, [r7, #4]
 801b12a:	e012      	b.n	801b152 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b132:	da03      	bge.n	801b13c <MQTTPacket_len+0x2c>
		rem_len += 2;
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	3302      	adds	r3, #2
 801b138:	607b      	str	r3, [r7, #4]
 801b13a:	e00a      	b.n	801b152 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	4a08      	ldr	r2, [pc, #32]	; (801b160 <MQTTPacket_len+0x50>)
 801b140:	4293      	cmp	r3, r2
 801b142:	dc03      	bgt.n	801b14c <MQTTPacket_len+0x3c>
		rem_len += 3;
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	3303      	adds	r3, #3
 801b148:	607b      	str	r3, [r7, #4]
 801b14a:	e002      	b.n	801b152 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	3304      	adds	r3, #4
 801b150:	607b      	str	r3, [r7, #4]
	return rem_len;
 801b152:	687b      	ldr	r3, [r7, #4]
}
 801b154:	4618      	mov	r0, r3
 801b156:	370c      	adds	r7, #12
 801b158:	46bd      	mov	sp, r7
 801b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b15e:	4770      	bx	lr
 801b160:	001ffffe 	.word	0x001ffffe

0801b164 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801b164:	b480      	push	{r7}
 801b166:	b085      	sub	sp, #20
 801b168:	af00      	add	r7, sp, #0
 801b16a:	6078      	str	r0, [r7, #4]
 801b16c:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801b16e:	2300      	movs	r3, #0
 801b170:	60fb      	str	r3, [r7, #12]
 801b172:	e00a      	b.n	801b18a <bufchar+0x26>
		*c = *bufptr++;
 801b174:	4b0a      	ldr	r3, [pc, #40]	; (801b1a0 <bufchar+0x3c>)
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	1c5a      	adds	r2, r3, #1
 801b17a:	4909      	ldr	r1, [pc, #36]	; (801b1a0 <bufchar+0x3c>)
 801b17c:	600a      	str	r2, [r1, #0]
 801b17e:	781a      	ldrb	r2, [r3, #0]
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	3301      	adds	r3, #1
 801b188:	60fb      	str	r3, [r7, #12]
 801b18a:	68fa      	ldr	r2, [r7, #12]
 801b18c:	683b      	ldr	r3, [r7, #0]
 801b18e:	429a      	cmp	r2, r3
 801b190:	dbf0      	blt.n	801b174 <bufchar+0x10>
	return count;
 801b192:	683b      	ldr	r3, [r7, #0]
}
 801b194:	4618      	mov	r0, r3
 801b196:	3714      	adds	r7, #20
 801b198:	46bd      	mov	sp, r7
 801b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b19e:	4770      	bx	lr
 801b1a0:	20008c2c 	.word	0x20008c2c

0801b1a4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	b082      	sub	sp, #8
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
 801b1ac:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801b1ae:	4a06      	ldr	r2, [pc, #24]	; (801b1c8 <MQTTPacket_decodeBuf+0x24>)
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801b1b4:	6839      	ldr	r1, [r7, #0]
 801b1b6:	4805      	ldr	r0, [pc, #20]	; (801b1cc <MQTTPacket_decodeBuf+0x28>)
 801b1b8:	f7ff ff6d 	bl	801b096 <MQTTPacket_decode>
 801b1bc:	4603      	mov	r3, r0
}
 801b1be:	4618      	mov	r0, r3
 801b1c0:	3708      	adds	r7, #8
 801b1c2:	46bd      	mov	sp, r7
 801b1c4:	bd80      	pop	{r7, pc}
 801b1c6:	bf00      	nop
 801b1c8:	20008c2c 	.word	0x20008c2c
 801b1cc:	0801b165 	.word	0x0801b165

0801b1d0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801b1d0:	b480      	push	{r7}
 801b1d2:	b085      	sub	sp, #20
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	781b      	ldrb	r3, [r3, #0]
 801b1e2:	021b      	lsls	r3, r3, #8
 801b1e4:	68fa      	ldr	r2, [r7, #12]
 801b1e6:	3201      	adds	r2, #1
 801b1e8:	7812      	ldrb	r2, [r2, #0]
 801b1ea:	4413      	add	r3, r2
 801b1ec:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	1c9a      	adds	r2, r3, #2
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	601a      	str	r2, [r3, #0]
	return len;
 801b1f8:	68bb      	ldr	r3, [r7, #8]
}
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	3714      	adds	r7, #20
 801b1fe:	46bd      	mov	sp, r7
 801b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b204:	4770      	bx	lr

0801b206 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801b206:	b480      	push	{r7}
 801b208:	b085      	sub	sp, #20
 801b20a:	af00      	add	r7, sp, #0
 801b20c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	781b      	ldrb	r3, [r3, #0]
 801b214:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	1c5a      	adds	r2, r3, #1
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	601a      	str	r2, [r3, #0]
	return c;
 801b220:	7bfb      	ldrb	r3, [r7, #15]
}
 801b222:	4618      	mov	r0, r3
 801b224:	3714      	adds	r7, #20
 801b226:	46bd      	mov	sp, r7
 801b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b22c:	4770      	bx	lr

0801b22e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801b22e:	b480      	push	{r7}
 801b230:	b083      	sub	sp, #12
 801b232:	af00      	add	r7, sp, #0
 801b234:	6078      	str	r0, [r7, #4]
 801b236:	460b      	mov	r3, r1
 801b238:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	78fa      	ldrb	r2, [r7, #3]
 801b240:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	1c5a      	adds	r2, r3, #1
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	601a      	str	r2, [r3, #0]
}
 801b24c:	bf00      	nop
 801b24e:	370c      	adds	r7, #12
 801b250:	46bd      	mov	sp, r7
 801b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b256:	4770      	bx	lr

0801b258 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801b258:	b480      	push	{r7}
 801b25a:	b083      	sub	sp, #12
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	6078      	str	r0, [r7, #4]
 801b260:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801b262:	683b      	ldr	r3, [r7, #0]
 801b264:	2b00      	cmp	r3, #0
 801b266:	da00      	bge.n	801b26a <writeInt+0x12>
 801b268:	33ff      	adds	r3, #255	; 0xff
 801b26a:	121b      	asrs	r3, r3, #8
 801b26c:	461a      	mov	r2, r3
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	b2d2      	uxtb	r2, r2
 801b274:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	1c5a      	adds	r2, r3, #1
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801b280:	683b      	ldr	r3, [r7, #0]
 801b282:	425a      	negs	r2, r3
 801b284:	b2db      	uxtb	r3, r3
 801b286:	b2d2      	uxtb	r2, r2
 801b288:	bf58      	it	pl
 801b28a:	4253      	negpl	r3, r2
 801b28c:	687a      	ldr	r2, [r7, #4]
 801b28e:	6812      	ldr	r2, [r2, #0]
 801b290:	b2db      	uxtb	r3, r3
 801b292:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	1c5a      	adds	r2, r3, #1
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	601a      	str	r2, [r3, #0]
}
 801b29e:	bf00      	nop
 801b2a0:	370c      	adds	r7, #12
 801b2a2:	46bd      	mov	sp, r7
 801b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a8:	4770      	bx	lr

0801b2aa <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801b2aa:	b580      	push	{r7, lr}
 801b2ac:	b084      	sub	sp, #16
 801b2ae:	af00      	add	r7, sp, #0
 801b2b0:	6078      	str	r0, [r7, #4]
 801b2b2:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801b2b4:	6838      	ldr	r0, [r7, #0]
 801b2b6:	f7e4 ffcd 	bl	8000254 <strlen>
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801b2be:	68f9      	ldr	r1, [r7, #12]
 801b2c0:	6878      	ldr	r0, [r7, #4]
 801b2c2:	f7ff ffc9 	bl	801b258 <writeInt>
	memcpy(*pptr, string, len);
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	68fa      	ldr	r2, [r7, #12]
 801b2cc:	6839      	ldr	r1, [r7, #0]
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	f000 fae0 	bl	801b894 <memcpy>
	*pptr += len;
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	681a      	ldr	r2, [r3, #0]
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	441a      	add	r2, r3
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	601a      	str	r2, [r3, #0]
}
 801b2e0:	bf00      	nop
 801b2e2:	3710      	adds	r7, #16
 801b2e4:	46bd      	mov	sp, r7
 801b2e6:	bd80      	pop	{r7, pc}

0801b2e8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801b2e8:	b580      	push	{r7, lr}
 801b2ea:	b084      	sub	sp, #16
 801b2ec:	af00      	add	r7, sp, #0
 801b2ee:	60f8      	str	r0, [r7, #12]
 801b2f0:	4638      	mov	r0, r7
 801b2f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	dd12      	ble.n	801b322 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	4619      	mov	r1, r3
 801b300:	68f8      	ldr	r0, [r7, #12]
 801b302:	f7ff ffa9 	bl	801b258 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	68b9      	ldr	r1, [r7, #8]
 801b30c:	687a      	ldr	r2, [r7, #4]
 801b30e:	4618      	mov	r0, r3
 801b310:	f000 fac0 	bl	801b894 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	687a      	ldr	r2, [r7, #4]
 801b31a:	441a      	add	r2, r3
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801b320:	e00c      	b.n	801b33c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801b322:	683b      	ldr	r3, [r7, #0]
 801b324:	2b00      	cmp	r3, #0
 801b326:	d005      	beq.n	801b334 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	4619      	mov	r1, r3
 801b32c:	68f8      	ldr	r0, [r7, #12]
 801b32e:	f7ff ffbc 	bl	801b2aa <writeCString>
}
 801b332:	e003      	b.n	801b33c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801b334:	2100      	movs	r1, #0
 801b336:	68f8      	ldr	r0, [r7, #12]
 801b338:	f7ff ff8e 	bl	801b258 <writeInt>
}
 801b33c:	bf00      	nop
 801b33e:	3710      	adds	r7, #16
 801b340:	46bd      	mov	sp, r7
 801b342:	bd80      	pop	{r7, pc}

0801b344 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b086      	sub	sp, #24
 801b348:	af00      	add	r7, sp, #0
 801b34a:	60f8      	str	r0, [r7, #12]
 801b34c:	60b9      	str	r1, [r7, #8]
 801b34e:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801b350:	2300      	movs	r3, #0
 801b352:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801b354:	68bb      	ldr	r3, [r7, #8]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	687a      	ldr	r2, [r7, #4]
 801b35a:	1ad3      	subs	r3, r2, r3
 801b35c:	2b01      	cmp	r3, #1
 801b35e:	dd1a      	ble.n	801b396 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801b360:	68b8      	ldr	r0, [r7, #8]
 801b362:	f7ff ff35 	bl	801b1d0 <readInt>
 801b366:	4602      	mov	r2, r0
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801b36c:	68bb      	ldr	r3, [r7, #8]
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	68fa      	ldr	r2, [r7, #12]
 801b372:	6852      	ldr	r2, [r2, #4]
 801b374:	4413      	add	r3, r2
 801b376:	687a      	ldr	r2, [r7, #4]
 801b378:	429a      	cmp	r2, r3
 801b37a:	d30c      	bcc.n	801b396 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801b37c:	68bb      	ldr	r3, [r7, #8]
 801b37e:	681a      	ldr	r2, [r3, #0]
 801b380:	68fb      	ldr	r3, [r7, #12]
 801b382:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801b384:	68bb      	ldr	r3, [r7, #8]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	68fa      	ldr	r2, [r7, #12]
 801b38a:	6852      	ldr	r2, [r2, #4]
 801b38c:	441a      	add	r2, r3
 801b38e:	68bb      	ldr	r3, [r7, #8]
 801b390:	601a      	str	r2, [r3, #0]
			rc = 1;
 801b392:	2301      	movs	r3, #1
 801b394:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	2200      	movs	r2, #0
 801b39a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801b39c:	697b      	ldr	r3, [r7, #20]
}
 801b39e:	4618      	mov	r0, r3
 801b3a0:	3718      	adds	r7, #24
 801b3a2:	46bd      	mov	sp, r7
 801b3a4:	bd80      	pop	{r7, pc}

0801b3a6 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801b3a6:	b580      	push	{r7, lr}
 801b3a8:	b086      	sub	sp, #24
 801b3aa:	af00      	add	r7, sp, #0
 801b3ac:	1d3b      	adds	r3, r7, #4
 801b3ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d006      	beq.n	801b3ca <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	4618      	mov	r0, r3
 801b3c0:	f7e4 ff48 	bl	8000254 <strlen>
 801b3c4:	4603      	mov	r3, r0
 801b3c6:	617b      	str	r3, [r7, #20]
 801b3c8:	e001      	b.n	801b3ce <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801b3ca:	68bb      	ldr	r3, [r7, #8]
 801b3cc:	617b      	str	r3, [r7, #20]
	return rc;
 801b3ce:	697b      	ldr	r3, [r7, #20]
}
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	3718      	adds	r7, #24
 801b3d4:	46bd      	mov	sp, r7
 801b3d6:	bd80      	pop	{r7, pc}

0801b3d8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b086      	sub	sp, #24
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
 801b3e0:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	617b      	str	r3, [r7, #20]
		blen = 0;
 801b3e6:	2300      	movs	r3, #0
 801b3e8:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d00a      	beq.n	801b408 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	f7e4 ff29 	bl	8000254 <strlen>
 801b402:	4603      	mov	r3, r0
 801b404:	617b      	str	r3, [r7, #20]
 801b406:	e005      	b.n	801b414 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	689b      	ldr	r3, [r3, #8]
 801b40c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	685b      	ldr	r3, [r3, #4]
 801b412:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801b414:	6838      	ldr	r0, [r7, #0]
 801b416:	f7e4 ff1d 	bl	8000254 <strlen>
 801b41a:	4603      	mov	r3, r0
 801b41c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801b41e:	697a      	ldr	r2, [r7, #20]
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	429a      	cmp	r2, r3
 801b424:	d10a      	bne.n	801b43c <MQTTPacket_equals+0x64>
 801b426:	697b      	ldr	r3, [r7, #20]
 801b428:	461a      	mov	r2, r3
 801b42a:	6839      	ldr	r1, [r7, #0]
 801b42c:	6938      	ldr	r0, [r7, #16]
 801b42e:	f000 fb15 	bl	801ba5c <strncmp>
 801b432:	4603      	mov	r3, r0
 801b434:	2b00      	cmp	r3, #0
 801b436:	d101      	bne.n	801b43c <MQTTPacket_equals+0x64>
 801b438:	2301      	movs	r3, #1
 801b43a:	e000      	b.n	801b43e <MQTTPacket_equals+0x66>
 801b43c:	2300      	movs	r3, #0
}
 801b43e:	4618      	mov	r0, r3
 801b440:	3718      	adds	r7, #24
 801b442:	46bd      	mov	sp, r7
 801b444:	bd80      	pop	{r7, pc}

0801b446 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801b446:	b580      	push	{r7, lr}
 801b448:	b086      	sub	sp, #24
 801b44a:	af00      	add	r7, sp, #0
 801b44c:	60f8      	str	r0, [r7, #12]
 801b44e:	4638      	mov	r0, r7
 801b450:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801b454:	2300      	movs	r3, #0
 801b456:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801b458:	463b      	mov	r3, r7
 801b45a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b45e:	f7ff ffa2 	bl	801b3a6 <MQTTstrlen>
 801b462:	4603      	mov	r3, r0
 801b464:	1c9a      	adds	r2, r3, #2
 801b466:	6a3b      	ldr	r3, [r7, #32]
 801b468:	4413      	add	r3, r2
 801b46a:	697a      	ldr	r2, [r7, #20]
 801b46c:	4413      	add	r3, r2
 801b46e:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	2b00      	cmp	r3, #0
 801b474:	dd02      	ble.n	801b47c <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801b476:	697b      	ldr	r3, [r7, #20]
 801b478:	3302      	adds	r3, #2
 801b47a:	617b      	str	r3, [r7, #20]
	return len;
 801b47c:	697b      	ldr	r3, [r7, #20]
}
 801b47e:	4618      	mov	r0, r3
 801b480:	3718      	adds	r7, #24
 801b482:	46bd      	mov	sp, r7
 801b484:	bd80      	pop	{r7, pc}

0801b486 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801b486:	b580      	push	{r7, lr}
 801b488:	b08a      	sub	sp, #40	; 0x28
 801b48a:	af02      	add	r7, sp, #8
 801b48c:	60f8      	str	r0, [r7, #12]
 801b48e:	60b9      	str	r1, [r7, #8]
 801b490:	603b      	str	r3, [r7, #0]
 801b492:	4613      	mov	r3, r2
 801b494:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801b49a:	2300      	movs	r3, #0
 801b49c:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801b49e:	2300      	movs	r3, #0
 801b4a0:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801b4a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b4a8:	9300      	str	r3, [sp, #0]
 801b4aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b4ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b4b0:	6838      	ldr	r0, [r7, #0]
 801b4b2:	f7ff ffc8 	bl	801b446 <MQTTSerialize_publishLength>
 801b4b6:	61b8      	str	r0, [r7, #24]
 801b4b8:	69b8      	ldr	r0, [r7, #24]
 801b4ba:	f7ff fe29 	bl	801b110 <MQTTPacket_len>
 801b4be:	4602      	mov	r2, r0
 801b4c0:	68bb      	ldr	r3, [r7, #8]
 801b4c2:	4293      	cmp	r3, r2
 801b4c4:	da03      	bge.n	801b4ce <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801b4c6:	f06f 0301 	mvn.w	r3, #1
 801b4ca:	61fb      	str	r3, [r7, #28]
		goto exit;
 801b4cc:	e04c      	b.n	801b568 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801b4ce:	7c3b      	ldrb	r3, [r7, #16]
 801b4d0:	2203      	movs	r2, #3
 801b4d2:	f362 1307 	bfi	r3, r2, #4, #4
 801b4d6:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801b4d8:	79fb      	ldrb	r3, [r7, #7]
 801b4da:	f003 0301 	and.w	r3, r3, #1
 801b4de:	b2da      	uxtb	r2, r3
 801b4e0:	7c3b      	ldrb	r3, [r7, #16]
 801b4e2:	f362 03c3 	bfi	r3, r2, #3, #1
 801b4e6:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801b4e8:	683b      	ldr	r3, [r7, #0]
 801b4ea:	f003 0303 	and.w	r3, r3, #3
 801b4ee:	b2da      	uxtb	r2, r3
 801b4f0:	7c3b      	ldrb	r3, [r7, #16]
 801b4f2:	f362 0342 	bfi	r3, r2, #1, #2
 801b4f6:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801b4f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b4fc:	f003 0301 	and.w	r3, r3, #1
 801b500:	b2da      	uxtb	r2, r3
 801b502:	7c3b      	ldrb	r3, [r7, #16]
 801b504:	f362 0300 	bfi	r3, r2, #0, #1
 801b508:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801b50a:	7c3a      	ldrb	r2, [r7, #16]
 801b50c:	f107 0314 	add.w	r3, r7, #20
 801b510:	4611      	mov	r1, r2
 801b512:	4618      	mov	r0, r3
 801b514:	f7ff fe8b 	bl	801b22e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801b518:	697b      	ldr	r3, [r7, #20]
 801b51a:	69b9      	ldr	r1, [r7, #24]
 801b51c:	4618      	mov	r0, r3
 801b51e:	f7ff fd8b 	bl	801b038 <MQTTPacket_encode>
 801b522:	4602      	mov	r2, r0
 801b524:	697b      	ldr	r3, [r7, #20]
 801b526:	4413      	add	r3, r2
 801b528:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801b52a:	f107 0014 	add.w	r0, r7, #20
 801b52e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b532:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b534:	f7ff fed8 	bl	801b2e8 <writeMQTTString>

	if (qos > 0)
 801b538:	683b      	ldr	r3, [r7, #0]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	dd06      	ble.n	801b54c <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801b53e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801b540:	f107 0314 	add.w	r3, r7, #20
 801b544:	4611      	mov	r1, r2
 801b546:	4618      	mov	r0, r3
 801b548:	f7ff fe86 	bl	801b258 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801b54c:	697b      	ldr	r3, [r7, #20]
 801b54e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b552:	4618      	mov	r0, r3
 801b554:	f000 f99e 	bl	801b894 <memcpy>
	ptr += payloadlen;
 801b558:	697a      	ldr	r2, [r7, #20]
 801b55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b55c:	4413      	add	r3, r2
 801b55e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801b560:	697a      	ldr	r2, [r7, #20]
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	1ad3      	subs	r3, r2, r3
 801b566:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801b568:	69fb      	ldr	r3, [r7, #28]
}
 801b56a:	4618      	mov	r0, r3
 801b56c:	3720      	adds	r7, #32
 801b56e:	46bd      	mov	sp, r7
 801b570:	bd80      	pop	{r7, pc}

0801b572 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801b572:	b580      	push	{r7, lr}
 801b574:	b088      	sub	sp, #32
 801b576:	af00      	add	r7, sp, #0
 801b578:	60f8      	str	r0, [r7, #12]
 801b57a:	60b9      	str	r1, [r7, #8]
 801b57c:	4611      	mov	r1, r2
 801b57e:	461a      	mov	r2, r3
 801b580:	460b      	mov	r3, r1
 801b582:	71fb      	strb	r3, [r7, #7]
 801b584:	4613      	mov	r3, r2
 801b586:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801b588:	2300      	movs	r3, #0
 801b58a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801b58c:	2300      	movs	r3, #0
 801b58e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801b594:	68bb      	ldr	r3, [r7, #8]
 801b596:	2b03      	cmp	r3, #3
 801b598:	dc03      	bgt.n	801b5a2 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801b59a:	f06f 0301 	mvn.w	r3, #1
 801b59e:	61fb      	str	r3, [r7, #28]
		goto exit;
 801b5a0:	e037      	b.n	801b612 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801b5a2:	79fb      	ldrb	r3, [r7, #7]
 801b5a4:	f003 030f 	and.w	r3, r3, #15
 801b5a8:	b2da      	uxtb	r2, r3
 801b5aa:	7e3b      	ldrb	r3, [r7, #24]
 801b5ac:	f362 1307 	bfi	r3, r2, #4, #4
 801b5b0:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801b5b2:	79bb      	ldrb	r3, [r7, #6]
 801b5b4:	f003 0301 	and.w	r3, r3, #1
 801b5b8:	b2da      	uxtb	r2, r3
 801b5ba:	7e3b      	ldrb	r3, [r7, #24]
 801b5bc:	f362 03c3 	bfi	r3, r2, #3, #1
 801b5c0:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801b5c2:	79fb      	ldrb	r3, [r7, #7]
 801b5c4:	2b06      	cmp	r3, #6
 801b5c6:	bf0c      	ite	eq
 801b5c8:	2301      	moveq	r3, #1
 801b5ca:	2300      	movne	r3, #0
 801b5cc:	b2db      	uxtb	r3, r3
 801b5ce:	f003 0303 	and.w	r3, r3, #3
 801b5d2:	b2da      	uxtb	r2, r3
 801b5d4:	7e3b      	ldrb	r3, [r7, #24]
 801b5d6:	f362 0342 	bfi	r3, r2, #1, #2
 801b5da:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801b5dc:	7e3a      	ldrb	r2, [r7, #24]
 801b5de:	f107 0314 	add.w	r3, r7, #20
 801b5e2:	4611      	mov	r1, r2
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7ff fe22 	bl	801b22e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801b5ea:	697b      	ldr	r3, [r7, #20]
 801b5ec:	2102      	movs	r1, #2
 801b5ee:	4618      	mov	r0, r3
 801b5f0:	f7ff fd22 	bl	801b038 <MQTTPacket_encode>
 801b5f4:	4602      	mov	r2, r0
 801b5f6:	697b      	ldr	r3, [r7, #20]
 801b5f8:	4413      	add	r3, r2
 801b5fa:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801b5fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801b5fe:	f107 0314 	add.w	r3, r7, #20
 801b602:	4611      	mov	r1, r2
 801b604:	4618      	mov	r0, r3
 801b606:	f7ff fe27 	bl	801b258 <writeInt>
	rc = ptr - buf;
 801b60a:	697a      	ldr	r2, [r7, #20]
 801b60c:	68fb      	ldr	r3, [r7, #12]
 801b60e:	1ad3      	subs	r3, r2, r3
 801b610:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801b612:	69fb      	ldr	r3, [r7, #28]
}
 801b614:	4618      	mov	r0, r3
 801b616:	3720      	adds	r7, #32
 801b618:	46bd      	mov	sp, r7
 801b61a:	bd80      	pop	{r7, pc}

0801b61c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 801b61c:	b580      	push	{r7, lr}
 801b61e:	b084      	sub	sp, #16
 801b620:	af00      	add	r7, sp, #0
 801b622:	6078      	str	r0, [r7, #4]
 801b624:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 801b626:	2302      	movs	r3, #2
 801b628:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 801b62a:	2300      	movs	r3, #0
 801b62c:	60fb      	str	r3, [r7, #12]
 801b62e:	e013      	b.n	801b658 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 801b630:	68fa      	ldr	r2, [r7, #12]
 801b632:	4613      	mov	r3, r2
 801b634:	005b      	lsls	r3, r3, #1
 801b636:	4413      	add	r3, r2
 801b638:	009b      	lsls	r3, r3, #2
 801b63a:	461a      	mov	r2, r3
 801b63c:	683b      	ldr	r3, [r7, #0]
 801b63e:	4413      	add	r3, r2
 801b640:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b644:	f7ff feaf 	bl	801b3a6 <MQTTstrlen>
 801b648:	4603      	mov	r3, r0
 801b64a:	3303      	adds	r3, #3
 801b64c:	68ba      	ldr	r2, [r7, #8]
 801b64e:	4413      	add	r3, r2
 801b650:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 801b652:	68fb      	ldr	r3, [r7, #12]
 801b654:	3301      	adds	r3, #1
 801b656:	60fb      	str	r3, [r7, #12]
 801b658:	68fa      	ldr	r2, [r7, #12]
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	429a      	cmp	r2, r3
 801b65e:	dbe7      	blt.n	801b630 <MQTTSerialize_subscribeLength+0x14>
	return len;
 801b660:	68bb      	ldr	r3, [r7, #8]
}
 801b662:	4618      	mov	r0, r3
 801b664:	3710      	adds	r7, #16
 801b666:	46bd      	mov	sp, r7
 801b668:	bd80      	pop	{r7, pc}

0801b66a <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 801b66a:	b580      	push	{r7, lr}
 801b66c:	b08a      	sub	sp, #40	; 0x28
 801b66e:	af00      	add	r7, sp, #0
 801b670:	60f8      	str	r0, [r7, #12]
 801b672:	60b9      	str	r1, [r7, #8]
 801b674:	4611      	mov	r1, r2
 801b676:	461a      	mov	r2, r3
 801b678:	460b      	mov	r3, r1
 801b67a:	71fb      	strb	r3, [r7, #7]
 801b67c:	4613      	mov	r3, r2
 801b67e:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 801b684:	2300      	movs	r3, #0
 801b686:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 801b688:	2300      	movs	r3, #0
 801b68a:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 801b68c:	2300      	movs	r3, #0
 801b68e:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 801b690:	2300      	movs	r3, #0
 801b692:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 801b694:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b698:	f7ff ffc0 	bl	801b61c <MQTTSerialize_subscribeLength>
 801b69c:	61f8      	str	r0, [r7, #28]
 801b69e:	69f8      	ldr	r0, [r7, #28]
 801b6a0:	f7ff fd36 	bl	801b110 <MQTTPacket_len>
 801b6a4:	4602      	mov	r2, r0
 801b6a6:	68bb      	ldr	r3, [r7, #8]
 801b6a8:	4293      	cmp	r3, r2
 801b6aa:	da03      	bge.n	801b6b4 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801b6ac:	f06f 0301 	mvn.w	r3, #1
 801b6b0:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801b6b2:	e051      	b.n	801b758 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 801b6b4:	2300      	movs	r3, #0
 801b6b6:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 801b6b8:	7d3b      	ldrb	r3, [r7, #20]
 801b6ba:	2208      	movs	r2, #8
 801b6bc:	f362 1307 	bfi	r3, r2, #4, #4
 801b6c0:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 801b6c2:	79fb      	ldrb	r3, [r7, #7]
 801b6c4:	f003 0301 	and.w	r3, r3, #1
 801b6c8:	b2da      	uxtb	r2, r3
 801b6ca:	7d3b      	ldrb	r3, [r7, #20]
 801b6cc:	f362 03c3 	bfi	r3, r2, #3, #1
 801b6d0:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 801b6d2:	7d3b      	ldrb	r3, [r7, #20]
 801b6d4:	2201      	movs	r2, #1
 801b6d6:	f362 0342 	bfi	r3, r2, #1, #2
 801b6da:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 801b6dc:	7d3a      	ldrb	r2, [r7, #20]
 801b6de:	f107 0318 	add.w	r3, r7, #24
 801b6e2:	4611      	mov	r1, r2
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	f7ff fda2 	bl	801b22e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801b6ea:	69bb      	ldr	r3, [r7, #24]
 801b6ec:	69f9      	ldr	r1, [r7, #28]
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	f7ff fca2 	bl	801b038 <MQTTPacket_encode>
 801b6f4:	4602      	mov	r2, r0
 801b6f6:	69bb      	ldr	r3, [r7, #24]
 801b6f8:	4413      	add	r3, r2
 801b6fa:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 801b6fc:	88ba      	ldrh	r2, [r7, #4]
 801b6fe:	f107 0318 	add.w	r3, r7, #24
 801b702:	4611      	mov	r1, r2
 801b704:	4618      	mov	r0, r3
 801b706:	f7ff fda7 	bl	801b258 <writeInt>

	for (i = 0; i < count; ++i)
 801b70a:	2300      	movs	r3, #0
 801b70c:	623b      	str	r3, [r7, #32]
 801b70e:	e01b      	b.n	801b748 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 801b710:	6a3a      	ldr	r2, [r7, #32]
 801b712:	4613      	mov	r3, r2
 801b714:	005b      	lsls	r3, r3, #1
 801b716:	4413      	add	r3, r2
 801b718:	009b      	lsls	r3, r3, #2
 801b71a:	461a      	mov	r2, r3
 801b71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b71e:	4413      	add	r3, r2
 801b720:	f107 0018 	add.w	r0, r7, #24
 801b724:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b726:	f7ff fddf 	bl	801b2e8 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 801b72a:	6a3b      	ldr	r3, [r7, #32]
 801b72c:	009b      	lsls	r3, r3, #2
 801b72e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b730:	4413      	add	r3, r2
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	b2da      	uxtb	r2, r3
 801b736:	f107 0318 	add.w	r3, r7, #24
 801b73a:	4611      	mov	r1, r2
 801b73c:	4618      	mov	r0, r3
 801b73e:	f7ff fd76 	bl	801b22e <writeChar>
	for (i = 0; i < count; ++i)
 801b742:	6a3b      	ldr	r3, [r7, #32]
 801b744:	3301      	adds	r3, #1
 801b746:	623b      	str	r3, [r7, #32]
 801b748:	6a3a      	ldr	r2, [r7, #32]
 801b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b74c:	429a      	cmp	r2, r3
 801b74e:	dbdf      	blt.n	801b710 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 801b750:	69ba      	ldr	r2, [r7, #24]
 801b752:	68fb      	ldr	r3, [r7, #12]
 801b754:	1ad3      	subs	r3, r2, r3
 801b756:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b75a:	4618      	mov	r0, r3
 801b75c:	3728      	adds	r7, #40	; 0x28
 801b75e:	46bd      	mov	sp, r7
 801b760:	bd80      	pop	{r7, pc}

0801b762 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 801b762:	b580      	push	{r7, lr}
 801b764:	b08a      	sub	sp, #40	; 0x28
 801b766:	af00      	add	r7, sp, #0
 801b768:	60f8      	str	r0, [r7, #12]
 801b76a:	60b9      	str	r1, [r7, #8]
 801b76c:	607a      	str	r2, [r7, #4]
 801b76e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801b770:	2300      	movs	r3, #0
 801b772:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b776:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801b778:	2300      	movs	r3, #0
 801b77a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801b77c:	2300      	movs	r3, #0
 801b77e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801b780:	f107 0318 	add.w	r3, r7, #24
 801b784:	4618      	mov	r0, r3
 801b786:	f7ff fd3e 	bl	801b206 <readChar>
 801b78a:	4603      	mov	r3, r0
 801b78c:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 801b78e:	7f3b      	ldrb	r3, [r7, #28]
 801b790:	f023 030f 	bic.w	r3, r3, #15
 801b794:	b2db      	uxtb	r3, r3
 801b796:	2b90      	cmp	r3, #144	; 0x90
 801b798:	d142      	bne.n	801b820 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801b79a:	69bb      	ldr	r3, [r7, #24]
 801b79c:	f107 0214 	add.w	r2, r7, #20
 801b7a0:	4611      	mov	r1, r2
 801b7a2:	4618      	mov	r0, r3
 801b7a4:	f7ff fcfe 	bl	801b1a4 <MQTTPacket_decodeBuf>
 801b7a8:	6278      	str	r0, [r7, #36]	; 0x24
 801b7aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b7ac:	69bb      	ldr	r3, [r7, #24]
 801b7ae:	4413      	add	r3, r2
 801b7b0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801b7b2:	69bb      	ldr	r3, [r7, #24]
 801b7b4:	697a      	ldr	r2, [r7, #20]
 801b7b6:	4413      	add	r3, r2
 801b7b8:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801b7ba:	69bb      	ldr	r3, [r7, #24]
 801b7bc:	6a3a      	ldr	r2, [r7, #32]
 801b7be:	1ad3      	subs	r3, r2, r3
 801b7c0:	2b01      	cmp	r3, #1
 801b7c2:	dd2f      	ble.n	801b824 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 801b7c4:	f107 0318 	add.w	r3, r7, #24
 801b7c8:	4618      	mov	r0, r3
 801b7ca:	f7ff fd01 	bl	801b1d0 <readInt>
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	b29a      	uxth	r2, r3
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	801a      	strh	r2, [r3, #0]

	*count = 0;
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	2200      	movs	r2, #0
 801b7da:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801b7dc:	e019      	b.n	801b812 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	68ba      	ldr	r2, [r7, #8]
 801b7e4:	429a      	cmp	r2, r3
 801b7e6:	da03      	bge.n	801b7f0 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 801b7e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b7ec:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 801b7ee:	e01a      	b.n	801b826 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 801b7f0:	f107 0318 	add.w	r3, r7, #24
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	f7ff fd06 	bl	801b206 <readChar>
 801b7fa:	4603      	mov	r3, r0
 801b7fc:	4618      	mov	r0, r3
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	681b      	ldr	r3, [r3, #0]
 801b802:	1c59      	adds	r1, r3, #1
 801b804:	687a      	ldr	r2, [r7, #4]
 801b806:	6011      	str	r1, [r2, #0]
 801b808:	009b      	lsls	r3, r3, #2
 801b80a:	683a      	ldr	r2, [r7, #0]
 801b80c:	4413      	add	r3, r2
 801b80e:	4602      	mov	r2, r0
 801b810:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801b812:	69bb      	ldr	r3, [r7, #24]
 801b814:	6a3a      	ldr	r2, [r7, #32]
 801b816:	429a      	cmp	r2, r3
 801b818:	d8e1      	bhi.n	801b7de <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 801b81a:	2301      	movs	r3, #1
 801b81c:	627b      	str	r3, [r7, #36]	; 0x24
 801b81e:	e002      	b.n	801b826 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801b820:	bf00      	nop
 801b822:	e000      	b.n	801b826 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801b824:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b828:	4618      	mov	r0, r3
 801b82a:	3728      	adds	r7, #40	; 0x28
 801b82c:	46bd      	mov	sp, r7
 801b82e:	bd80      	pop	{r7, pc}

0801b830 <__libc_init_array>:
 801b830:	b570      	push	{r4, r5, r6, lr}
 801b832:	4d0d      	ldr	r5, [pc, #52]	; (801b868 <__libc_init_array+0x38>)
 801b834:	4c0d      	ldr	r4, [pc, #52]	; (801b86c <__libc_init_array+0x3c>)
 801b836:	1b64      	subs	r4, r4, r5
 801b838:	10a4      	asrs	r4, r4, #2
 801b83a:	2600      	movs	r6, #0
 801b83c:	42a6      	cmp	r6, r4
 801b83e:	d109      	bne.n	801b854 <__libc_init_array+0x24>
 801b840:	4d0b      	ldr	r5, [pc, #44]	; (801b870 <__libc_init_array+0x40>)
 801b842:	4c0c      	ldr	r4, [pc, #48]	; (801b874 <__libc_init_array+0x44>)
 801b844:	f001 f8de 	bl	801ca04 <_init>
 801b848:	1b64      	subs	r4, r4, r5
 801b84a:	10a4      	asrs	r4, r4, #2
 801b84c:	2600      	movs	r6, #0
 801b84e:	42a6      	cmp	r6, r4
 801b850:	d105      	bne.n	801b85e <__libc_init_array+0x2e>
 801b852:	bd70      	pop	{r4, r5, r6, pc}
 801b854:	f855 3b04 	ldr.w	r3, [r5], #4
 801b858:	4798      	blx	r3
 801b85a:	3601      	adds	r6, #1
 801b85c:	e7ee      	b.n	801b83c <__libc_init_array+0xc>
 801b85e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b862:	4798      	blx	r3
 801b864:	3601      	adds	r6, #1
 801b866:	e7f2      	b.n	801b84e <__libc_init_array+0x1e>
 801b868:	08020db0 	.word	0x08020db0
 801b86c:	08020db0 	.word	0x08020db0
 801b870:	08020db0 	.word	0x08020db0
 801b874:	08020db4 	.word	0x08020db4

0801b878 <memcmp>:
 801b878:	b530      	push	{r4, r5, lr}
 801b87a:	3901      	subs	r1, #1
 801b87c:	2400      	movs	r4, #0
 801b87e:	42a2      	cmp	r2, r4
 801b880:	d101      	bne.n	801b886 <memcmp+0xe>
 801b882:	2000      	movs	r0, #0
 801b884:	e005      	b.n	801b892 <memcmp+0x1a>
 801b886:	5d03      	ldrb	r3, [r0, r4]
 801b888:	3401      	adds	r4, #1
 801b88a:	5d0d      	ldrb	r5, [r1, r4]
 801b88c:	42ab      	cmp	r3, r5
 801b88e:	d0f6      	beq.n	801b87e <memcmp+0x6>
 801b890:	1b58      	subs	r0, r3, r5
 801b892:	bd30      	pop	{r4, r5, pc}

0801b894 <memcpy>:
 801b894:	440a      	add	r2, r1
 801b896:	4291      	cmp	r1, r2
 801b898:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801b89c:	d100      	bne.n	801b8a0 <memcpy+0xc>
 801b89e:	4770      	bx	lr
 801b8a0:	b510      	push	{r4, lr}
 801b8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b8a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b8aa:	4291      	cmp	r1, r2
 801b8ac:	d1f9      	bne.n	801b8a2 <memcpy+0xe>
 801b8ae:	bd10      	pop	{r4, pc}

0801b8b0 <memset>:
 801b8b0:	4402      	add	r2, r0
 801b8b2:	4603      	mov	r3, r0
 801b8b4:	4293      	cmp	r3, r2
 801b8b6:	d100      	bne.n	801b8ba <memset+0xa>
 801b8b8:	4770      	bx	lr
 801b8ba:	f803 1b01 	strb.w	r1, [r3], #1
 801b8be:	e7f9      	b.n	801b8b4 <memset+0x4>

0801b8c0 <iprintf>:
 801b8c0:	b40f      	push	{r0, r1, r2, r3}
 801b8c2:	4b0a      	ldr	r3, [pc, #40]	; (801b8ec <iprintf+0x2c>)
 801b8c4:	b513      	push	{r0, r1, r4, lr}
 801b8c6:	681c      	ldr	r4, [r3, #0]
 801b8c8:	b124      	cbz	r4, 801b8d4 <iprintf+0x14>
 801b8ca:	69a3      	ldr	r3, [r4, #24]
 801b8cc:	b913      	cbnz	r3, 801b8d4 <iprintf+0x14>
 801b8ce:	4620      	mov	r0, r4
 801b8d0:	f000 face 	bl	801be70 <__sinit>
 801b8d4:	ab05      	add	r3, sp, #20
 801b8d6:	9a04      	ldr	r2, [sp, #16]
 801b8d8:	68a1      	ldr	r1, [r4, #8]
 801b8da:	9301      	str	r3, [sp, #4]
 801b8dc:	4620      	mov	r0, r4
 801b8de:	f000 fcb9 	bl	801c254 <_vfiprintf_r>
 801b8e2:	b002      	add	sp, #8
 801b8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8e8:	b004      	add	sp, #16
 801b8ea:	4770      	bx	lr
 801b8ec:	20000020 	.word	0x20000020

0801b8f0 <_puts_r>:
 801b8f0:	b570      	push	{r4, r5, r6, lr}
 801b8f2:	460e      	mov	r6, r1
 801b8f4:	4605      	mov	r5, r0
 801b8f6:	b118      	cbz	r0, 801b900 <_puts_r+0x10>
 801b8f8:	6983      	ldr	r3, [r0, #24]
 801b8fa:	b90b      	cbnz	r3, 801b900 <_puts_r+0x10>
 801b8fc:	f000 fab8 	bl	801be70 <__sinit>
 801b900:	69ab      	ldr	r3, [r5, #24]
 801b902:	68ac      	ldr	r4, [r5, #8]
 801b904:	b913      	cbnz	r3, 801b90c <_puts_r+0x1c>
 801b906:	4628      	mov	r0, r5
 801b908:	f000 fab2 	bl	801be70 <__sinit>
 801b90c:	4b2c      	ldr	r3, [pc, #176]	; (801b9c0 <_puts_r+0xd0>)
 801b90e:	429c      	cmp	r4, r3
 801b910:	d120      	bne.n	801b954 <_puts_r+0x64>
 801b912:	686c      	ldr	r4, [r5, #4]
 801b914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b916:	07db      	lsls	r3, r3, #31
 801b918:	d405      	bmi.n	801b926 <_puts_r+0x36>
 801b91a:	89a3      	ldrh	r3, [r4, #12]
 801b91c:	0598      	lsls	r0, r3, #22
 801b91e:	d402      	bmi.n	801b926 <_puts_r+0x36>
 801b920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b922:	f000 fb55 	bl	801bfd0 <__retarget_lock_acquire_recursive>
 801b926:	89a3      	ldrh	r3, [r4, #12]
 801b928:	0719      	lsls	r1, r3, #28
 801b92a:	d51d      	bpl.n	801b968 <_puts_r+0x78>
 801b92c:	6923      	ldr	r3, [r4, #16]
 801b92e:	b1db      	cbz	r3, 801b968 <_puts_r+0x78>
 801b930:	3e01      	subs	r6, #1
 801b932:	68a3      	ldr	r3, [r4, #8]
 801b934:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b938:	3b01      	subs	r3, #1
 801b93a:	60a3      	str	r3, [r4, #8]
 801b93c:	bb39      	cbnz	r1, 801b98e <_puts_r+0x9e>
 801b93e:	2b00      	cmp	r3, #0
 801b940:	da38      	bge.n	801b9b4 <_puts_r+0xc4>
 801b942:	4622      	mov	r2, r4
 801b944:	210a      	movs	r1, #10
 801b946:	4628      	mov	r0, r5
 801b948:	f000 f89a 	bl	801ba80 <__swbuf_r>
 801b94c:	3001      	adds	r0, #1
 801b94e:	d011      	beq.n	801b974 <_puts_r+0x84>
 801b950:	250a      	movs	r5, #10
 801b952:	e011      	b.n	801b978 <_puts_r+0x88>
 801b954:	4b1b      	ldr	r3, [pc, #108]	; (801b9c4 <_puts_r+0xd4>)
 801b956:	429c      	cmp	r4, r3
 801b958:	d101      	bne.n	801b95e <_puts_r+0x6e>
 801b95a:	68ac      	ldr	r4, [r5, #8]
 801b95c:	e7da      	b.n	801b914 <_puts_r+0x24>
 801b95e:	4b1a      	ldr	r3, [pc, #104]	; (801b9c8 <_puts_r+0xd8>)
 801b960:	429c      	cmp	r4, r3
 801b962:	bf08      	it	eq
 801b964:	68ec      	ldreq	r4, [r5, #12]
 801b966:	e7d5      	b.n	801b914 <_puts_r+0x24>
 801b968:	4621      	mov	r1, r4
 801b96a:	4628      	mov	r0, r5
 801b96c:	f000 f8da 	bl	801bb24 <__swsetup_r>
 801b970:	2800      	cmp	r0, #0
 801b972:	d0dd      	beq.n	801b930 <_puts_r+0x40>
 801b974:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b97a:	07da      	lsls	r2, r3, #31
 801b97c:	d405      	bmi.n	801b98a <_puts_r+0x9a>
 801b97e:	89a3      	ldrh	r3, [r4, #12]
 801b980:	059b      	lsls	r3, r3, #22
 801b982:	d402      	bmi.n	801b98a <_puts_r+0x9a>
 801b984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b986:	f000 fb24 	bl	801bfd2 <__retarget_lock_release_recursive>
 801b98a:	4628      	mov	r0, r5
 801b98c:	bd70      	pop	{r4, r5, r6, pc}
 801b98e:	2b00      	cmp	r3, #0
 801b990:	da04      	bge.n	801b99c <_puts_r+0xac>
 801b992:	69a2      	ldr	r2, [r4, #24]
 801b994:	429a      	cmp	r2, r3
 801b996:	dc06      	bgt.n	801b9a6 <_puts_r+0xb6>
 801b998:	290a      	cmp	r1, #10
 801b99a:	d004      	beq.n	801b9a6 <_puts_r+0xb6>
 801b99c:	6823      	ldr	r3, [r4, #0]
 801b99e:	1c5a      	adds	r2, r3, #1
 801b9a0:	6022      	str	r2, [r4, #0]
 801b9a2:	7019      	strb	r1, [r3, #0]
 801b9a4:	e7c5      	b.n	801b932 <_puts_r+0x42>
 801b9a6:	4622      	mov	r2, r4
 801b9a8:	4628      	mov	r0, r5
 801b9aa:	f000 f869 	bl	801ba80 <__swbuf_r>
 801b9ae:	3001      	adds	r0, #1
 801b9b0:	d1bf      	bne.n	801b932 <_puts_r+0x42>
 801b9b2:	e7df      	b.n	801b974 <_puts_r+0x84>
 801b9b4:	6823      	ldr	r3, [r4, #0]
 801b9b6:	250a      	movs	r5, #10
 801b9b8:	1c5a      	adds	r2, r3, #1
 801b9ba:	6022      	str	r2, [r4, #0]
 801b9bc:	701d      	strb	r5, [r3, #0]
 801b9be:	e7db      	b.n	801b978 <_puts_r+0x88>
 801b9c0:	08020d34 	.word	0x08020d34
 801b9c4:	08020d54 	.word	0x08020d54
 801b9c8:	08020d14 	.word	0x08020d14

0801b9cc <puts>:
 801b9cc:	4b02      	ldr	r3, [pc, #8]	; (801b9d8 <puts+0xc>)
 801b9ce:	4601      	mov	r1, r0
 801b9d0:	6818      	ldr	r0, [r3, #0]
 801b9d2:	f7ff bf8d 	b.w	801b8f0 <_puts_r>
 801b9d6:	bf00      	nop
 801b9d8:	20000020 	.word	0x20000020

0801b9dc <rand>:
 801b9dc:	4b17      	ldr	r3, [pc, #92]	; (801ba3c <rand+0x60>)
 801b9de:	b510      	push	{r4, lr}
 801b9e0:	681c      	ldr	r4, [r3, #0]
 801b9e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b9e4:	b9b3      	cbnz	r3, 801ba14 <rand+0x38>
 801b9e6:	2018      	movs	r0, #24
 801b9e8:	f000 fb58 	bl	801c09c <malloc>
 801b9ec:	63a0      	str	r0, [r4, #56]	; 0x38
 801b9ee:	b928      	cbnz	r0, 801b9fc <rand+0x20>
 801b9f0:	4602      	mov	r2, r0
 801b9f2:	4b13      	ldr	r3, [pc, #76]	; (801ba40 <rand+0x64>)
 801b9f4:	4813      	ldr	r0, [pc, #76]	; (801ba44 <rand+0x68>)
 801b9f6:	214e      	movs	r1, #78	; 0x4e
 801b9f8:	f000 f902 	bl	801bc00 <__assert_func>
 801b9fc:	4a12      	ldr	r2, [pc, #72]	; (801ba48 <rand+0x6c>)
 801b9fe:	4b13      	ldr	r3, [pc, #76]	; (801ba4c <rand+0x70>)
 801ba00:	e9c0 2300 	strd	r2, r3, [r0]
 801ba04:	4b12      	ldr	r3, [pc, #72]	; (801ba50 <rand+0x74>)
 801ba06:	6083      	str	r3, [r0, #8]
 801ba08:	230b      	movs	r3, #11
 801ba0a:	8183      	strh	r3, [r0, #12]
 801ba0c:	2201      	movs	r2, #1
 801ba0e:	2300      	movs	r3, #0
 801ba10:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ba14:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ba16:	480f      	ldr	r0, [pc, #60]	; (801ba54 <rand+0x78>)
 801ba18:	690a      	ldr	r2, [r1, #16]
 801ba1a:	694b      	ldr	r3, [r1, #20]
 801ba1c:	4c0e      	ldr	r4, [pc, #56]	; (801ba58 <rand+0x7c>)
 801ba1e:	4350      	muls	r0, r2
 801ba20:	fb04 0003 	mla	r0, r4, r3, r0
 801ba24:	fba2 3404 	umull	r3, r4, r2, r4
 801ba28:	1c5a      	adds	r2, r3, #1
 801ba2a:	4404      	add	r4, r0
 801ba2c:	f144 0000 	adc.w	r0, r4, #0
 801ba30:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ba34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ba38:	bd10      	pop	{r4, pc}
 801ba3a:	bf00      	nop
 801ba3c:	20000020 	.word	0x20000020
 801ba40:	08020c60 	.word	0x08020c60
 801ba44:	08020c77 	.word	0x08020c77
 801ba48:	abcd330e 	.word	0xabcd330e
 801ba4c:	e66d1234 	.word	0xe66d1234
 801ba50:	0005deec 	.word	0x0005deec
 801ba54:	5851f42d 	.word	0x5851f42d
 801ba58:	4c957f2d 	.word	0x4c957f2d

0801ba5c <strncmp>:
 801ba5c:	b510      	push	{r4, lr}
 801ba5e:	b16a      	cbz	r2, 801ba7c <strncmp+0x20>
 801ba60:	3901      	subs	r1, #1
 801ba62:	1884      	adds	r4, r0, r2
 801ba64:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ba68:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ba6c:	4293      	cmp	r3, r2
 801ba6e:	d103      	bne.n	801ba78 <strncmp+0x1c>
 801ba70:	42a0      	cmp	r0, r4
 801ba72:	d001      	beq.n	801ba78 <strncmp+0x1c>
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d1f5      	bne.n	801ba64 <strncmp+0x8>
 801ba78:	1a98      	subs	r0, r3, r2
 801ba7a:	bd10      	pop	{r4, pc}
 801ba7c:	4610      	mov	r0, r2
 801ba7e:	e7fc      	b.n	801ba7a <strncmp+0x1e>

0801ba80 <__swbuf_r>:
 801ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba82:	460e      	mov	r6, r1
 801ba84:	4614      	mov	r4, r2
 801ba86:	4605      	mov	r5, r0
 801ba88:	b118      	cbz	r0, 801ba92 <__swbuf_r+0x12>
 801ba8a:	6983      	ldr	r3, [r0, #24]
 801ba8c:	b90b      	cbnz	r3, 801ba92 <__swbuf_r+0x12>
 801ba8e:	f000 f9ef 	bl	801be70 <__sinit>
 801ba92:	4b21      	ldr	r3, [pc, #132]	; (801bb18 <__swbuf_r+0x98>)
 801ba94:	429c      	cmp	r4, r3
 801ba96:	d12b      	bne.n	801baf0 <__swbuf_r+0x70>
 801ba98:	686c      	ldr	r4, [r5, #4]
 801ba9a:	69a3      	ldr	r3, [r4, #24]
 801ba9c:	60a3      	str	r3, [r4, #8]
 801ba9e:	89a3      	ldrh	r3, [r4, #12]
 801baa0:	071a      	lsls	r2, r3, #28
 801baa2:	d52f      	bpl.n	801bb04 <__swbuf_r+0x84>
 801baa4:	6923      	ldr	r3, [r4, #16]
 801baa6:	b36b      	cbz	r3, 801bb04 <__swbuf_r+0x84>
 801baa8:	6923      	ldr	r3, [r4, #16]
 801baaa:	6820      	ldr	r0, [r4, #0]
 801baac:	1ac0      	subs	r0, r0, r3
 801baae:	6963      	ldr	r3, [r4, #20]
 801bab0:	b2f6      	uxtb	r6, r6
 801bab2:	4283      	cmp	r3, r0
 801bab4:	4637      	mov	r7, r6
 801bab6:	dc04      	bgt.n	801bac2 <__swbuf_r+0x42>
 801bab8:	4621      	mov	r1, r4
 801baba:	4628      	mov	r0, r5
 801babc:	f000 f944 	bl	801bd48 <_fflush_r>
 801bac0:	bb30      	cbnz	r0, 801bb10 <__swbuf_r+0x90>
 801bac2:	68a3      	ldr	r3, [r4, #8]
 801bac4:	3b01      	subs	r3, #1
 801bac6:	60a3      	str	r3, [r4, #8]
 801bac8:	6823      	ldr	r3, [r4, #0]
 801baca:	1c5a      	adds	r2, r3, #1
 801bacc:	6022      	str	r2, [r4, #0]
 801bace:	701e      	strb	r6, [r3, #0]
 801bad0:	6963      	ldr	r3, [r4, #20]
 801bad2:	3001      	adds	r0, #1
 801bad4:	4283      	cmp	r3, r0
 801bad6:	d004      	beq.n	801bae2 <__swbuf_r+0x62>
 801bad8:	89a3      	ldrh	r3, [r4, #12]
 801bada:	07db      	lsls	r3, r3, #31
 801badc:	d506      	bpl.n	801baec <__swbuf_r+0x6c>
 801bade:	2e0a      	cmp	r6, #10
 801bae0:	d104      	bne.n	801baec <__swbuf_r+0x6c>
 801bae2:	4621      	mov	r1, r4
 801bae4:	4628      	mov	r0, r5
 801bae6:	f000 f92f 	bl	801bd48 <_fflush_r>
 801baea:	b988      	cbnz	r0, 801bb10 <__swbuf_r+0x90>
 801baec:	4638      	mov	r0, r7
 801baee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801baf0:	4b0a      	ldr	r3, [pc, #40]	; (801bb1c <__swbuf_r+0x9c>)
 801baf2:	429c      	cmp	r4, r3
 801baf4:	d101      	bne.n	801bafa <__swbuf_r+0x7a>
 801baf6:	68ac      	ldr	r4, [r5, #8]
 801baf8:	e7cf      	b.n	801ba9a <__swbuf_r+0x1a>
 801bafa:	4b09      	ldr	r3, [pc, #36]	; (801bb20 <__swbuf_r+0xa0>)
 801bafc:	429c      	cmp	r4, r3
 801bafe:	bf08      	it	eq
 801bb00:	68ec      	ldreq	r4, [r5, #12]
 801bb02:	e7ca      	b.n	801ba9a <__swbuf_r+0x1a>
 801bb04:	4621      	mov	r1, r4
 801bb06:	4628      	mov	r0, r5
 801bb08:	f000 f80c 	bl	801bb24 <__swsetup_r>
 801bb0c:	2800      	cmp	r0, #0
 801bb0e:	d0cb      	beq.n	801baa8 <__swbuf_r+0x28>
 801bb10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bb14:	e7ea      	b.n	801baec <__swbuf_r+0x6c>
 801bb16:	bf00      	nop
 801bb18:	08020d34 	.word	0x08020d34
 801bb1c:	08020d54 	.word	0x08020d54
 801bb20:	08020d14 	.word	0x08020d14

0801bb24 <__swsetup_r>:
 801bb24:	4b32      	ldr	r3, [pc, #200]	; (801bbf0 <__swsetup_r+0xcc>)
 801bb26:	b570      	push	{r4, r5, r6, lr}
 801bb28:	681d      	ldr	r5, [r3, #0]
 801bb2a:	4606      	mov	r6, r0
 801bb2c:	460c      	mov	r4, r1
 801bb2e:	b125      	cbz	r5, 801bb3a <__swsetup_r+0x16>
 801bb30:	69ab      	ldr	r3, [r5, #24]
 801bb32:	b913      	cbnz	r3, 801bb3a <__swsetup_r+0x16>
 801bb34:	4628      	mov	r0, r5
 801bb36:	f000 f99b 	bl	801be70 <__sinit>
 801bb3a:	4b2e      	ldr	r3, [pc, #184]	; (801bbf4 <__swsetup_r+0xd0>)
 801bb3c:	429c      	cmp	r4, r3
 801bb3e:	d10f      	bne.n	801bb60 <__swsetup_r+0x3c>
 801bb40:	686c      	ldr	r4, [r5, #4]
 801bb42:	89a3      	ldrh	r3, [r4, #12]
 801bb44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb48:	0719      	lsls	r1, r3, #28
 801bb4a:	d42c      	bmi.n	801bba6 <__swsetup_r+0x82>
 801bb4c:	06dd      	lsls	r5, r3, #27
 801bb4e:	d411      	bmi.n	801bb74 <__swsetup_r+0x50>
 801bb50:	2309      	movs	r3, #9
 801bb52:	6033      	str	r3, [r6, #0]
 801bb54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bb58:	81a3      	strh	r3, [r4, #12]
 801bb5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bb5e:	e03e      	b.n	801bbde <__swsetup_r+0xba>
 801bb60:	4b25      	ldr	r3, [pc, #148]	; (801bbf8 <__swsetup_r+0xd4>)
 801bb62:	429c      	cmp	r4, r3
 801bb64:	d101      	bne.n	801bb6a <__swsetup_r+0x46>
 801bb66:	68ac      	ldr	r4, [r5, #8]
 801bb68:	e7eb      	b.n	801bb42 <__swsetup_r+0x1e>
 801bb6a:	4b24      	ldr	r3, [pc, #144]	; (801bbfc <__swsetup_r+0xd8>)
 801bb6c:	429c      	cmp	r4, r3
 801bb6e:	bf08      	it	eq
 801bb70:	68ec      	ldreq	r4, [r5, #12]
 801bb72:	e7e6      	b.n	801bb42 <__swsetup_r+0x1e>
 801bb74:	0758      	lsls	r0, r3, #29
 801bb76:	d512      	bpl.n	801bb9e <__swsetup_r+0x7a>
 801bb78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb7a:	b141      	cbz	r1, 801bb8e <__swsetup_r+0x6a>
 801bb7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb80:	4299      	cmp	r1, r3
 801bb82:	d002      	beq.n	801bb8a <__swsetup_r+0x66>
 801bb84:	4630      	mov	r0, r6
 801bb86:	f000 fa91 	bl	801c0ac <_free_r>
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	6363      	str	r3, [r4, #52]	; 0x34
 801bb8e:	89a3      	ldrh	r3, [r4, #12]
 801bb90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bb94:	81a3      	strh	r3, [r4, #12]
 801bb96:	2300      	movs	r3, #0
 801bb98:	6063      	str	r3, [r4, #4]
 801bb9a:	6923      	ldr	r3, [r4, #16]
 801bb9c:	6023      	str	r3, [r4, #0]
 801bb9e:	89a3      	ldrh	r3, [r4, #12]
 801bba0:	f043 0308 	orr.w	r3, r3, #8
 801bba4:	81a3      	strh	r3, [r4, #12]
 801bba6:	6923      	ldr	r3, [r4, #16]
 801bba8:	b94b      	cbnz	r3, 801bbbe <__swsetup_r+0x9a>
 801bbaa:	89a3      	ldrh	r3, [r4, #12]
 801bbac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bbb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bbb4:	d003      	beq.n	801bbbe <__swsetup_r+0x9a>
 801bbb6:	4621      	mov	r1, r4
 801bbb8:	4630      	mov	r0, r6
 801bbba:	f000 fa2f 	bl	801c01c <__smakebuf_r>
 801bbbe:	89a0      	ldrh	r0, [r4, #12]
 801bbc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bbc4:	f010 0301 	ands.w	r3, r0, #1
 801bbc8:	d00a      	beq.n	801bbe0 <__swsetup_r+0xbc>
 801bbca:	2300      	movs	r3, #0
 801bbcc:	60a3      	str	r3, [r4, #8]
 801bbce:	6963      	ldr	r3, [r4, #20]
 801bbd0:	425b      	negs	r3, r3
 801bbd2:	61a3      	str	r3, [r4, #24]
 801bbd4:	6923      	ldr	r3, [r4, #16]
 801bbd6:	b943      	cbnz	r3, 801bbea <__swsetup_r+0xc6>
 801bbd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bbdc:	d1ba      	bne.n	801bb54 <__swsetup_r+0x30>
 801bbde:	bd70      	pop	{r4, r5, r6, pc}
 801bbe0:	0781      	lsls	r1, r0, #30
 801bbe2:	bf58      	it	pl
 801bbe4:	6963      	ldrpl	r3, [r4, #20]
 801bbe6:	60a3      	str	r3, [r4, #8]
 801bbe8:	e7f4      	b.n	801bbd4 <__swsetup_r+0xb0>
 801bbea:	2000      	movs	r0, #0
 801bbec:	e7f7      	b.n	801bbde <__swsetup_r+0xba>
 801bbee:	bf00      	nop
 801bbf0:	20000020 	.word	0x20000020
 801bbf4:	08020d34 	.word	0x08020d34
 801bbf8:	08020d54 	.word	0x08020d54
 801bbfc:	08020d14 	.word	0x08020d14

0801bc00 <__assert_func>:
 801bc00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bc02:	4614      	mov	r4, r2
 801bc04:	461a      	mov	r2, r3
 801bc06:	4b09      	ldr	r3, [pc, #36]	; (801bc2c <__assert_func+0x2c>)
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	4605      	mov	r5, r0
 801bc0c:	68d8      	ldr	r0, [r3, #12]
 801bc0e:	b14c      	cbz	r4, 801bc24 <__assert_func+0x24>
 801bc10:	4b07      	ldr	r3, [pc, #28]	; (801bc30 <__assert_func+0x30>)
 801bc12:	9100      	str	r1, [sp, #0]
 801bc14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bc18:	4906      	ldr	r1, [pc, #24]	; (801bc34 <__assert_func+0x34>)
 801bc1a:	462b      	mov	r3, r5
 801bc1c:	f000 f9a6 	bl	801bf6c <fiprintf>
 801bc20:	f000 fe42 	bl	801c8a8 <abort>
 801bc24:	4b04      	ldr	r3, [pc, #16]	; (801bc38 <__assert_func+0x38>)
 801bc26:	461c      	mov	r4, r3
 801bc28:	e7f3      	b.n	801bc12 <__assert_func+0x12>
 801bc2a:	bf00      	nop
 801bc2c:	20000020 	.word	0x20000020
 801bc30:	08020cd6 	.word	0x08020cd6
 801bc34:	08020ce3 	.word	0x08020ce3
 801bc38:	08020d11 	.word	0x08020d11

0801bc3c <__sflush_r>:
 801bc3c:	898a      	ldrh	r2, [r1, #12]
 801bc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc42:	4605      	mov	r5, r0
 801bc44:	0710      	lsls	r0, r2, #28
 801bc46:	460c      	mov	r4, r1
 801bc48:	d458      	bmi.n	801bcfc <__sflush_r+0xc0>
 801bc4a:	684b      	ldr	r3, [r1, #4]
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	dc05      	bgt.n	801bc5c <__sflush_r+0x20>
 801bc50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	dc02      	bgt.n	801bc5c <__sflush_r+0x20>
 801bc56:	2000      	movs	r0, #0
 801bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc5e:	2e00      	cmp	r6, #0
 801bc60:	d0f9      	beq.n	801bc56 <__sflush_r+0x1a>
 801bc62:	2300      	movs	r3, #0
 801bc64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bc68:	682f      	ldr	r7, [r5, #0]
 801bc6a:	602b      	str	r3, [r5, #0]
 801bc6c:	d032      	beq.n	801bcd4 <__sflush_r+0x98>
 801bc6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bc70:	89a3      	ldrh	r3, [r4, #12]
 801bc72:	075a      	lsls	r2, r3, #29
 801bc74:	d505      	bpl.n	801bc82 <__sflush_r+0x46>
 801bc76:	6863      	ldr	r3, [r4, #4]
 801bc78:	1ac0      	subs	r0, r0, r3
 801bc7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bc7c:	b10b      	cbz	r3, 801bc82 <__sflush_r+0x46>
 801bc7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bc80:	1ac0      	subs	r0, r0, r3
 801bc82:	2300      	movs	r3, #0
 801bc84:	4602      	mov	r2, r0
 801bc86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bc88:	6a21      	ldr	r1, [r4, #32]
 801bc8a:	4628      	mov	r0, r5
 801bc8c:	47b0      	blx	r6
 801bc8e:	1c43      	adds	r3, r0, #1
 801bc90:	89a3      	ldrh	r3, [r4, #12]
 801bc92:	d106      	bne.n	801bca2 <__sflush_r+0x66>
 801bc94:	6829      	ldr	r1, [r5, #0]
 801bc96:	291d      	cmp	r1, #29
 801bc98:	d82c      	bhi.n	801bcf4 <__sflush_r+0xb8>
 801bc9a:	4a2a      	ldr	r2, [pc, #168]	; (801bd44 <__sflush_r+0x108>)
 801bc9c:	40ca      	lsrs	r2, r1
 801bc9e:	07d6      	lsls	r6, r2, #31
 801bca0:	d528      	bpl.n	801bcf4 <__sflush_r+0xb8>
 801bca2:	2200      	movs	r2, #0
 801bca4:	6062      	str	r2, [r4, #4]
 801bca6:	04d9      	lsls	r1, r3, #19
 801bca8:	6922      	ldr	r2, [r4, #16]
 801bcaa:	6022      	str	r2, [r4, #0]
 801bcac:	d504      	bpl.n	801bcb8 <__sflush_r+0x7c>
 801bcae:	1c42      	adds	r2, r0, #1
 801bcb0:	d101      	bne.n	801bcb6 <__sflush_r+0x7a>
 801bcb2:	682b      	ldr	r3, [r5, #0]
 801bcb4:	b903      	cbnz	r3, 801bcb8 <__sflush_r+0x7c>
 801bcb6:	6560      	str	r0, [r4, #84]	; 0x54
 801bcb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bcba:	602f      	str	r7, [r5, #0]
 801bcbc:	2900      	cmp	r1, #0
 801bcbe:	d0ca      	beq.n	801bc56 <__sflush_r+0x1a>
 801bcc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bcc4:	4299      	cmp	r1, r3
 801bcc6:	d002      	beq.n	801bcce <__sflush_r+0x92>
 801bcc8:	4628      	mov	r0, r5
 801bcca:	f000 f9ef 	bl	801c0ac <_free_r>
 801bcce:	2000      	movs	r0, #0
 801bcd0:	6360      	str	r0, [r4, #52]	; 0x34
 801bcd2:	e7c1      	b.n	801bc58 <__sflush_r+0x1c>
 801bcd4:	6a21      	ldr	r1, [r4, #32]
 801bcd6:	2301      	movs	r3, #1
 801bcd8:	4628      	mov	r0, r5
 801bcda:	47b0      	blx	r6
 801bcdc:	1c41      	adds	r1, r0, #1
 801bcde:	d1c7      	bne.n	801bc70 <__sflush_r+0x34>
 801bce0:	682b      	ldr	r3, [r5, #0]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d0c4      	beq.n	801bc70 <__sflush_r+0x34>
 801bce6:	2b1d      	cmp	r3, #29
 801bce8:	d001      	beq.n	801bcee <__sflush_r+0xb2>
 801bcea:	2b16      	cmp	r3, #22
 801bcec:	d101      	bne.n	801bcf2 <__sflush_r+0xb6>
 801bcee:	602f      	str	r7, [r5, #0]
 801bcf0:	e7b1      	b.n	801bc56 <__sflush_r+0x1a>
 801bcf2:	89a3      	ldrh	r3, [r4, #12]
 801bcf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bcf8:	81a3      	strh	r3, [r4, #12]
 801bcfa:	e7ad      	b.n	801bc58 <__sflush_r+0x1c>
 801bcfc:	690f      	ldr	r7, [r1, #16]
 801bcfe:	2f00      	cmp	r7, #0
 801bd00:	d0a9      	beq.n	801bc56 <__sflush_r+0x1a>
 801bd02:	0793      	lsls	r3, r2, #30
 801bd04:	680e      	ldr	r6, [r1, #0]
 801bd06:	bf08      	it	eq
 801bd08:	694b      	ldreq	r3, [r1, #20]
 801bd0a:	600f      	str	r7, [r1, #0]
 801bd0c:	bf18      	it	ne
 801bd0e:	2300      	movne	r3, #0
 801bd10:	eba6 0807 	sub.w	r8, r6, r7
 801bd14:	608b      	str	r3, [r1, #8]
 801bd16:	f1b8 0f00 	cmp.w	r8, #0
 801bd1a:	dd9c      	ble.n	801bc56 <__sflush_r+0x1a>
 801bd1c:	6a21      	ldr	r1, [r4, #32]
 801bd1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bd20:	4643      	mov	r3, r8
 801bd22:	463a      	mov	r2, r7
 801bd24:	4628      	mov	r0, r5
 801bd26:	47b0      	blx	r6
 801bd28:	2800      	cmp	r0, #0
 801bd2a:	dc06      	bgt.n	801bd3a <__sflush_r+0xfe>
 801bd2c:	89a3      	ldrh	r3, [r4, #12]
 801bd2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd32:	81a3      	strh	r3, [r4, #12]
 801bd34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd38:	e78e      	b.n	801bc58 <__sflush_r+0x1c>
 801bd3a:	4407      	add	r7, r0
 801bd3c:	eba8 0800 	sub.w	r8, r8, r0
 801bd40:	e7e9      	b.n	801bd16 <__sflush_r+0xda>
 801bd42:	bf00      	nop
 801bd44:	20400001 	.word	0x20400001

0801bd48 <_fflush_r>:
 801bd48:	b538      	push	{r3, r4, r5, lr}
 801bd4a:	690b      	ldr	r3, [r1, #16]
 801bd4c:	4605      	mov	r5, r0
 801bd4e:	460c      	mov	r4, r1
 801bd50:	b913      	cbnz	r3, 801bd58 <_fflush_r+0x10>
 801bd52:	2500      	movs	r5, #0
 801bd54:	4628      	mov	r0, r5
 801bd56:	bd38      	pop	{r3, r4, r5, pc}
 801bd58:	b118      	cbz	r0, 801bd62 <_fflush_r+0x1a>
 801bd5a:	6983      	ldr	r3, [r0, #24]
 801bd5c:	b90b      	cbnz	r3, 801bd62 <_fflush_r+0x1a>
 801bd5e:	f000 f887 	bl	801be70 <__sinit>
 801bd62:	4b14      	ldr	r3, [pc, #80]	; (801bdb4 <_fflush_r+0x6c>)
 801bd64:	429c      	cmp	r4, r3
 801bd66:	d11b      	bne.n	801bda0 <_fflush_r+0x58>
 801bd68:	686c      	ldr	r4, [r5, #4]
 801bd6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d0ef      	beq.n	801bd52 <_fflush_r+0xa>
 801bd72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bd74:	07d0      	lsls	r0, r2, #31
 801bd76:	d404      	bmi.n	801bd82 <_fflush_r+0x3a>
 801bd78:	0599      	lsls	r1, r3, #22
 801bd7a:	d402      	bmi.n	801bd82 <_fflush_r+0x3a>
 801bd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd7e:	f000 f927 	bl	801bfd0 <__retarget_lock_acquire_recursive>
 801bd82:	4628      	mov	r0, r5
 801bd84:	4621      	mov	r1, r4
 801bd86:	f7ff ff59 	bl	801bc3c <__sflush_r>
 801bd8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd8c:	07da      	lsls	r2, r3, #31
 801bd8e:	4605      	mov	r5, r0
 801bd90:	d4e0      	bmi.n	801bd54 <_fflush_r+0xc>
 801bd92:	89a3      	ldrh	r3, [r4, #12]
 801bd94:	059b      	lsls	r3, r3, #22
 801bd96:	d4dd      	bmi.n	801bd54 <_fflush_r+0xc>
 801bd98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd9a:	f000 f91a 	bl	801bfd2 <__retarget_lock_release_recursive>
 801bd9e:	e7d9      	b.n	801bd54 <_fflush_r+0xc>
 801bda0:	4b05      	ldr	r3, [pc, #20]	; (801bdb8 <_fflush_r+0x70>)
 801bda2:	429c      	cmp	r4, r3
 801bda4:	d101      	bne.n	801bdaa <_fflush_r+0x62>
 801bda6:	68ac      	ldr	r4, [r5, #8]
 801bda8:	e7df      	b.n	801bd6a <_fflush_r+0x22>
 801bdaa:	4b04      	ldr	r3, [pc, #16]	; (801bdbc <_fflush_r+0x74>)
 801bdac:	429c      	cmp	r4, r3
 801bdae:	bf08      	it	eq
 801bdb0:	68ec      	ldreq	r4, [r5, #12]
 801bdb2:	e7da      	b.n	801bd6a <_fflush_r+0x22>
 801bdb4:	08020d34 	.word	0x08020d34
 801bdb8:	08020d54 	.word	0x08020d54
 801bdbc:	08020d14 	.word	0x08020d14

0801bdc0 <std>:
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	b510      	push	{r4, lr}
 801bdc4:	4604      	mov	r4, r0
 801bdc6:	e9c0 3300 	strd	r3, r3, [r0]
 801bdca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bdce:	6083      	str	r3, [r0, #8]
 801bdd0:	8181      	strh	r1, [r0, #12]
 801bdd2:	6643      	str	r3, [r0, #100]	; 0x64
 801bdd4:	81c2      	strh	r2, [r0, #14]
 801bdd6:	6183      	str	r3, [r0, #24]
 801bdd8:	4619      	mov	r1, r3
 801bdda:	2208      	movs	r2, #8
 801bddc:	305c      	adds	r0, #92	; 0x5c
 801bdde:	f7ff fd67 	bl	801b8b0 <memset>
 801bde2:	4b05      	ldr	r3, [pc, #20]	; (801bdf8 <std+0x38>)
 801bde4:	6263      	str	r3, [r4, #36]	; 0x24
 801bde6:	4b05      	ldr	r3, [pc, #20]	; (801bdfc <std+0x3c>)
 801bde8:	62a3      	str	r3, [r4, #40]	; 0x28
 801bdea:	4b05      	ldr	r3, [pc, #20]	; (801be00 <std+0x40>)
 801bdec:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bdee:	4b05      	ldr	r3, [pc, #20]	; (801be04 <std+0x44>)
 801bdf0:	6224      	str	r4, [r4, #32]
 801bdf2:	6323      	str	r3, [r4, #48]	; 0x30
 801bdf4:	bd10      	pop	{r4, pc}
 801bdf6:	bf00      	nop
 801bdf8:	0801c7fd 	.word	0x0801c7fd
 801bdfc:	0801c81f 	.word	0x0801c81f
 801be00:	0801c857 	.word	0x0801c857
 801be04:	0801c87b 	.word	0x0801c87b

0801be08 <_cleanup_r>:
 801be08:	4901      	ldr	r1, [pc, #4]	; (801be10 <_cleanup_r+0x8>)
 801be0a:	f000 b8c1 	b.w	801bf90 <_fwalk_reent>
 801be0e:	bf00      	nop
 801be10:	0801bd49 	.word	0x0801bd49

0801be14 <__sfmoreglue>:
 801be14:	b570      	push	{r4, r5, r6, lr}
 801be16:	1e4a      	subs	r2, r1, #1
 801be18:	2568      	movs	r5, #104	; 0x68
 801be1a:	4355      	muls	r5, r2
 801be1c:	460e      	mov	r6, r1
 801be1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801be22:	f000 f993 	bl	801c14c <_malloc_r>
 801be26:	4604      	mov	r4, r0
 801be28:	b140      	cbz	r0, 801be3c <__sfmoreglue+0x28>
 801be2a:	2100      	movs	r1, #0
 801be2c:	e9c0 1600 	strd	r1, r6, [r0]
 801be30:	300c      	adds	r0, #12
 801be32:	60a0      	str	r0, [r4, #8]
 801be34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801be38:	f7ff fd3a 	bl	801b8b0 <memset>
 801be3c:	4620      	mov	r0, r4
 801be3e:	bd70      	pop	{r4, r5, r6, pc}

0801be40 <__sfp_lock_acquire>:
 801be40:	4801      	ldr	r0, [pc, #4]	; (801be48 <__sfp_lock_acquire+0x8>)
 801be42:	f000 b8c5 	b.w	801bfd0 <__retarget_lock_acquire_recursive>
 801be46:	bf00      	nop
 801be48:	200106b8 	.word	0x200106b8

0801be4c <__sfp_lock_release>:
 801be4c:	4801      	ldr	r0, [pc, #4]	; (801be54 <__sfp_lock_release+0x8>)
 801be4e:	f000 b8c0 	b.w	801bfd2 <__retarget_lock_release_recursive>
 801be52:	bf00      	nop
 801be54:	200106b8 	.word	0x200106b8

0801be58 <__sinit_lock_acquire>:
 801be58:	4801      	ldr	r0, [pc, #4]	; (801be60 <__sinit_lock_acquire+0x8>)
 801be5a:	f000 b8b9 	b.w	801bfd0 <__retarget_lock_acquire_recursive>
 801be5e:	bf00      	nop
 801be60:	200106b3 	.word	0x200106b3

0801be64 <__sinit_lock_release>:
 801be64:	4801      	ldr	r0, [pc, #4]	; (801be6c <__sinit_lock_release+0x8>)
 801be66:	f000 b8b4 	b.w	801bfd2 <__retarget_lock_release_recursive>
 801be6a:	bf00      	nop
 801be6c:	200106b3 	.word	0x200106b3

0801be70 <__sinit>:
 801be70:	b510      	push	{r4, lr}
 801be72:	4604      	mov	r4, r0
 801be74:	f7ff fff0 	bl	801be58 <__sinit_lock_acquire>
 801be78:	69a3      	ldr	r3, [r4, #24]
 801be7a:	b11b      	cbz	r3, 801be84 <__sinit+0x14>
 801be7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be80:	f7ff bff0 	b.w	801be64 <__sinit_lock_release>
 801be84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801be88:	6523      	str	r3, [r4, #80]	; 0x50
 801be8a:	4b13      	ldr	r3, [pc, #76]	; (801bed8 <__sinit+0x68>)
 801be8c:	4a13      	ldr	r2, [pc, #76]	; (801bedc <__sinit+0x6c>)
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	62a2      	str	r2, [r4, #40]	; 0x28
 801be92:	42a3      	cmp	r3, r4
 801be94:	bf04      	itt	eq
 801be96:	2301      	moveq	r3, #1
 801be98:	61a3      	streq	r3, [r4, #24]
 801be9a:	4620      	mov	r0, r4
 801be9c:	f000 f820 	bl	801bee0 <__sfp>
 801bea0:	6060      	str	r0, [r4, #4]
 801bea2:	4620      	mov	r0, r4
 801bea4:	f000 f81c 	bl	801bee0 <__sfp>
 801bea8:	60a0      	str	r0, [r4, #8]
 801beaa:	4620      	mov	r0, r4
 801beac:	f000 f818 	bl	801bee0 <__sfp>
 801beb0:	2200      	movs	r2, #0
 801beb2:	60e0      	str	r0, [r4, #12]
 801beb4:	2104      	movs	r1, #4
 801beb6:	6860      	ldr	r0, [r4, #4]
 801beb8:	f7ff ff82 	bl	801bdc0 <std>
 801bebc:	68a0      	ldr	r0, [r4, #8]
 801bebe:	2201      	movs	r2, #1
 801bec0:	2109      	movs	r1, #9
 801bec2:	f7ff ff7d 	bl	801bdc0 <std>
 801bec6:	68e0      	ldr	r0, [r4, #12]
 801bec8:	2202      	movs	r2, #2
 801beca:	2112      	movs	r1, #18
 801becc:	f7ff ff78 	bl	801bdc0 <std>
 801bed0:	2301      	movs	r3, #1
 801bed2:	61a3      	str	r3, [r4, #24]
 801bed4:	e7d2      	b.n	801be7c <__sinit+0xc>
 801bed6:	bf00      	nop
 801bed8:	08020c5c 	.word	0x08020c5c
 801bedc:	0801be09 	.word	0x0801be09

0801bee0 <__sfp>:
 801bee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bee2:	4607      	mov	r7, r0
 801bee4:	f7ff ffac 	bl	801be40 <__sfp_lock_acquire>
 801bee8:	4b1e      	ldr	r3, [pc, #120]	; (801bf64 <__sfp+0x84>)
 801beea:	681e      	ldr	r6, [r3, #0]
 801beec:	69b3      	ldr	r3, [r6, #24]
 801beee:	b913      	cbnz	r3, 801bef6 <__sfp+0x16>
 801bef0:	4630      	mov	r0, r6
 801bef2:	f7ff ffbd 	bl	801be70 <__sinit>
 801bef6:	3648      	adds	r6, #72	; 0x48
 801bef8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801befc:	3b01      	subs	r3, #1
 801befe:	d503      	bpl.n	801bf08 <__sfp+0x28>
 801bf00:	6833      	ldr	r3, [r6, #0]
 801bf02:	b30b      	cbz	r3, 801bf48 <__sfp+0x68>
 801bf04:	6836      	ldr	r6, [r6, #0]
 801bf06:	e7f7      	b.n	801bef8 <__sfp+0x18>
 801bf08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bf0c:	b9d5      	cbnz	r5, 801bf44 <__sfp+0x64>
 801bf0e:	4b16      	ldr	r3, [pc, #88]	; (801bf68 <__sfp+0x88>)
 801bf10:	60e3      	str	r3, [r4, #12]
 801bf12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bf16:	6665      	str	r5, [r4, #100]	; 0x64
 801bf18:	f000 f859 	bl	801bfce <__retarget_lock_init_recursive>
 801bf1c:	f7ff ff96 	bl	801be4c <__sfp_lock_release>
 801bf20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bf24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bf28:	6025      	str	r5, [r4, #0]
 801bf2a:	61a5      	str	r5, [r4, #24]
 801bf2c:	2208      	movs	r2, #8
 801bf2e:	4629      	mov	r1, r5
 801bf30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bf34:	f7ff fcbc 	bl	801b8b0 <memset>
 801bf38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bf3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bf40:	4620      	mov	r0, r4
 801bf42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf44:	3468      	adds	r4, #104	; 0x68
 801bf46:	e7d9      	b.n	801befc <__sfp+0x1c>
 801bf48:	2104      	movs	r1, #4
 801bf4a:	4638      	mov	r0, r7
 801bf4c:	f7ff ff62 	bl	801be14 <__sfmoreglue>
 801bf50:	4604      	mov	r4, r0
 801bf52:	6030      	str	r0, [r6, #0]
 801bf54:	2800      	cmp	r0, #0
 801bf56:	d1d5      	bne.n	801bf04 <__sfp+0x24>
 801bf58:	f7ff ff78 	bl	801be4c <__sfp_lock_release>
 801bf5c:	230c      	movs	r3, #12
 801bf5e:	603b      	str	r3, [r7, #0]
 801bf60:	e7ee      	b.n	801bf40 <__sfp+0x60>
 801bf62:	bf00      	nop
 801bf64:	08020c5c 	.word	0x08020c5c
 801bf68:	ffff0001 	.word	0xffff0001

0801bf6c <fiprintf>:
 801bf6c:	b40e      	push	{r1, r2, r3}
 801bf6e:	b503      	push	{r0, r1, lr}
 801bf70:	4601      	mov	r1, r0
 801bf72:	ab03      	add	r3, sp, #12
 801bf74:	4805      	ldr	r0, [pc, #20]	; (801bf8c <fiprintf+0x20>)
 801bf76:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf7a:	6800      	ldr	r0, [r0, #0]
 801bf7c:	9301      	str	r3, [sp, #4]
 801bf7e:	f000 f969 	bl	801c254 <_vfiprintf_r>
 801bf82:	b002      	add	sp, #8
 801bf84:	f85d eb04 	ldr.w	lr, [sp], #4
 801bf88:	b003      	add	sp, #12
 801bf8a:	4770      	bx	lr
 801bf8c:	20000020 	.word	0x20000020

0801bf90 <_fwalk_reent>:
 801bf90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf94:	4606      	mov	r6, r0
 801bf96:	4688      	mov	r8, r1
 801bf98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bf9c:	2700      	movs	r7, #0
 801bf9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bfa2:	f1b9 0901 	subs.w	r9, r9, #1
 801bfa6:	d505      	bpl.n	801bfb4 <_fwalk_reent+0x24>
 801bfa8:	6824      	ldr	r4, [r4, #0]
 801bfaa:	2c00      	cmp	r4, #0
 801bfac:	d1f7      	bne.n	801bf9e <_fwalk_reent+0xe>
 801bfae:	4638      	mov	r0, r7
 801bfb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bfb4:	89ab      	ldrh	r3, [r5, #12]
 801bfb6:	2b01      	cmp	r3, #1
 801bfb8:	d907      	bls.n	801bfca <_fwalk_reent+0x3a>
 801bfba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bfbe:	3301      	adds	r3, #1
 801bfc0:	d003      	beq.n	801bfca <_fwalk_reent+0x3a>
 801bfc2:	4629      	mov	r1, r5
 801bfc4:	4630      	mov	r0, r6
 801bfc6:	47c0      	blx	r8
 801bfc8:	4307      	orrs	r7, r0
 801bfca:	3568      	adds	r5, #104	; 0x68
 801bfcc:	e7e9      	b.n	801bfa2 <_fwalk_reent+0x12>

0801bfce <__retarget_lock_init_recursive>:
 801bfce:	4770      	bx	lr

0801bfd0 <__retarget_lock_acquire_recursive>:
 801bfd0:	4770      	bx	lr

0801bfd2 <__retarget_lock_release_recursive>:
 801bfd2:	4770      	bx	lr

0801bfd4 <__swhatbuf_r>:
 801bfd4:	b570      	push	{r4, r5, r6, lr}
 801bfd6:	460e      	mov	r6, r1
 801bfd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfdc:	2900      	cmp	r1, #0
 801bfde:	b096      	sub	sp, #88	; 0x58
 801bfe0:	4614      	mov	r4, r2
 801bfe2:	461d      	mov	r5, r3
 801bfe4:	da07      	bge.n	801bff6 <__swhatbuf_r+0x22>
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	602b      	str	r3, [r5, #0]
 801bfea:	89b3      	ldrh	r3, [r6, #12]
 801bfec:	061a      	lsls	r2, r3, #24
 801bfee:	d410      	bmi.n	801c012 <__swhatbuf_r+0x3e>
 801bff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bff4:	e00e      	b.n	801c014 <__swhatbuf_r+0x40>
 801bff6:	466a      	mov	r2, sp
 801bff8:	f000 fc6e 	bl	801c8d8 <_fstat_r>
 801bffc:	2800      	cmp	r0, #0
 801bffe:	dbf2      	blt.n	801bfe6 <__swhatbuf_r+0x12>
 801c000:	9a01      	ldr	r2, [sp, #4]
 801c002:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c006:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c00a:	425a      	negs	r2, r3
 801c00c:	415a      	adcs	r2, r3
 801c00e:	602a      	str	r2, [r5, #0]
 801c010:	e7ee      	b.n	801bff0 <__swhatbuf_r+0x1c>
 801c012:	2340      	movs	r3, #64	; 0x40
 801c014:	2000      	movs	r0, #0
 801c016:	6023      	str	r3, [r4, #0]
 801c018:	b016      	add	sp, #88	; 0x58
 801c01a:	bd70      	pop	{r4, r5, r6, pc}

0801c01c <__smakebuf_r>:
 801c01c:	898b      	ldrh	r3, [r1, #12]
 801c01e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c020:	079d      	lsls	r5, r3, #30
 801c022:	4606      	mov	r6, r0
 801c024:	460c      	mov	r4, r1
 801c026:	d507      	bpl.n	801c038 <__smakebuf_r+0x1c>
 801c028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c02c:	6023      	str	r3, [r4, #0]
 801c02e:	6123      	str	r3, [r4, #16]
 801c030:	2301      	movs	r3, #1
 801c032:	6163      	str	r3, [r4, #20]
 801c034:	b002      	add	sp, #8
 801c036:	bd70      	pop	{r4, r5, r6, pc}
 801c038:	ab01      	add	r3, sp, #4
 801c03a:	466a      	mov	r2, sp
 801c03c:	f7ff ffca 	bl	801bfd4 <__swhatbuf_r>
 801c040:	9900      	ldr	r1, [sp, #0]
 801c042:	4605      	mov	r5, r0
 801c044:	4630      	mov	r0, r6
 801c046:	f000 f881 	bl	801c14c <_malloc_r>
 801c04a:	b948      	cbnz	r0, 801c060 <__smakebuf_r+0x44>
 801c04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c050:	059a      	lsls	r2, r3, #22
 801c052:	d4ef      	bmi.n	801c034 <__smakebuf_r+0x18>
 801c054:	f023 0303 	bic.w	r3, r3, #3
 801c058:	f043 0302 	orr.w	r3, r3, #2
 801c05c:	81a3      	strh	r3, [r4, #12]
 801c05e:	e7e3      	b.n	801c028 <__smakebuf_r+0xc>
 801c060:	4b0d      	ldr	r3, [pc, #52]	; (801c098 <__smakebuf_r+0x7c>)
 801c062:	62b3      	str	r3, [r6, #40]	; 0x28
 801c064:	89a3      	ldrh	r3, [r4, #12]
 801c066:	6020      	str	r0, [r4, #0]
 801c068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c06c:	81a3      	strh	r3, [r4, #12]
 801c06e:	9b00      	ldr	r3, [sp, #0]
 801c070:	6163      	str	r3, [r4, #20]
 801c072:	9b01      	ldr	r3, [sp, #4]
 801c074:	6120      	str	r0, [r4, #16]
 801c076:	b15b      	cbz	r3, 801c090 <__smakebuf_r+0x74>
 801c078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c07c:	4630      	mov	r0, r6
 801c07e:	f000 fc3d 	bl	801c8fc <_isatty_r>
 801c082:	b128      	cbz	r0, 801c090 <__smakebuf_r+0x74>
 801c084:	89a3      	ldrh	r3, [r4, #12]
 801c086:	f023 0303 	bic.w	r3, r3, #3
 801c08a:	f043 0301 	orr.w	r3, r3, #1
 801c08e:	81a3      	strh	r3, [r4, #12]
 801c090:	89a0      	ldrh	r0, [r4, #12]
 801c092:	4305      	orrs	r5, r0
 801c094:	81a5      	strh	r5, [r4, #12]
 801c096:	e7cd      	b.n	801c034 <__smakebuf_r+0x18>
 801c098:	0801be09 	.word	0x0801be09

0801c09c <malloc>:
 801c09c:	4b02      	ldr	r3, [pc, #8]	; (801c0a8 <malloc+0xc>)
 801c09e:	4601      	mov	r1, r0
 801c0a0:	6818      	ldr	r0, [r3, #0]
 801c0a2:	f000 b853 	b.w	801c14c <_malloc_r>
 801c0a6:	bf00      	nop
 801c0a8:	20000020 	.word	0x20000020

0801c0ac <_free_r>:
 801c0ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c0ae:	2900      	cmp	r1, #0
 801c0b0:	d048      	beq.n	801c144 <_free_r+0x98>
 801c0b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c0b6:	9001      	str	r0, [sp, #4]
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	f1a1 0404 	sub.w	r4, r1, #4
 801c0be:	bfb8      	it	lt
 801c0c0:	18e4      	addlt	r4, r4, r3
 801c0c2:	f000 fc3d 	bl	801c940 <__malloc_lock>
 801c0c6:	4a20      	ldr	r2, [pc, #128]	; (801c148 <_free_r+0x9c>)
 801c0c8:	9801      	ldr	r0, [sp, #4]
 801c0ca:	6813      	ldr	r3, [r2, #0]
 801c0cc:	4615      	mov	r5, r2
 801c0ce:	b933      	cbnz	r3, 801c0de <_free_r+0x32>
 801c0d0:	6063      	str	r3, [r4, #4]
 801c0d2:	6014      	str	r4, [r2, #0]
 801c0d4:	b003      	add	sp, #12
 801c0d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c0da:	f000 bc37 	b.w	801c94c <__malloc_unlock>
 801c0de:	42a3      	cmp	r3, r4
 801c0e0:	d90b      	bls.n	801c0fa <_free_r+0x4e>
 801c0e2:	6821      	ldr	r1, [r4, #0]
 801c0e4:	1862      	adds	r2, r4, r1
 801c0e6:	4293      	cmp	r3, r2
 801c0e8:	bf04      	itt	eq
 801c0ea:	681a      	ldreq	r2, [r3, #0]
 801c0ec:	685b      	ldreq	r3, [r3, #4]
 801c0ee:	6063      	str	r3, [r4, #4]
 801c0f0:	bf04      	itt	eq
 801c0f2:	1852      	addeq	r2, r2, r1
 801c0f4:	6022      	streq	r2, [r4, #0]
 801c0f6:	602c      	str	r4, [r5, #0]
 801c0f8:	e7ec      	b.n	801c0d4 <_free_r+0x28>
 801c0fa:	461a      	mov	r2, r3
 801c0fc:	685b      	ldr	r3, [r3, #4]
 801c0fe:	b10b      	cbz	r3, 801c104 <_free_r+0x58>
 801c100:	42a3      	cmp	r3, r4
 801c102:	d9fa      	bls.n	801c0fa <_free_r+0x4e>
 801c104:	6811      	ldr	r1, [r2, #0]
 801c106:	1855      	adds	r5, r2, r1
 801c108:	42a5      	cmp	r5, r4
 801c10a:	d10b      	bne.n	801c124 <_free_r+0x78>
 801c10c:	6824      	ldr	r4, [r4, #0]
 801c10e:	4421      	add	r1, r4
 801c110:	1854      	adds	r4, r2, r1
 801c112:	42a3      	cmp	r3, r4
 801c114:	6011      	str	r1, [r2, #0]
 801c116:	d1dd      	bne.n	801c0d4 <_free_r+0x28>
 801c118:	681c      	ldr	r4, [r3, #0]
 801c11a:	685b      	ldr	r3, [r3, #4]
 801c11c:	6053      	str	r3, [r2, #4]
 801c11e:	4421      	add	r1, r4
 801c120:	6011      	str	r1, [r2, #0]
 801c122:	e7d7      	b.n	801c0d4 <_free_r+0x28>
 801c124:	d902      	bls.n	801c12c <_free_r+0x80>
 801c126:	230c      	movs	r3, #12
 801c128:	6003      	str	r3, [r0, #0]
 801c12a:	e7d3      	b.n	801c0d4 <_free_r+0x28>
 801c12c:	6825      	ldr	r5, [r4, #0]
 801c12e:	1961      	adds	r1, r4, r5
 801c130:	428b      	cmp	r3, r1
 801c132:	bf04      	itt	eq
 801c134:	6819      	ldreq	r1, [r3, #0]
 801c136:	685b      	ldreq	r3, [r3, #4]
 801c138:	6063      	str	r3, [r4, #4]
 801c13a:	bf04      	itt	eq
 801c13c:	1949      	addeq	r1, r1, r5
 801c13e:	6021      	streq	r1, [r4, #0]
 801c140:	6054      	str	r4, [r2, #4]
 801c142:	e7c7      	b.n	801c0d4 <_free_r+0x28>
 801c144:	b003      	add	sp, #12
 801c146:	bd30      	pop	{r4, r5, pc}
 801c148:	20008c30 	.word	0x20008c30

0801c14c <_malloc_r>:
 801c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c14e:	1ccd      	adds	r5, r1, #3
 801c150:	f025 0503 	bic.w	r5, r5, #3
 801c154:	3508      	adds	r5, #8
 801c156:	2d0c      	cmp	r5, #12
 801c158:	bf38      	it	cc
 801c15a:	250c      	movcc	r5, #12
 801c15c:	2d00      	cmp	r5, #0
 801c15e:	4606      	mov	r6, r0
 801c160:	db01      	blt.n	801c166 <_malloc_r+0x1a>
 801c162:	42a9      	cmp	r1, r5
 801c164:	d903      	bls.n	801c16e <_malloc_r+0x22>
 801c166:	230c      	movs	r3, #12
 801c168:	6033      	str	r3, [r6, #0]
 801c16a:	2000      	movs	r0, #0
 801c16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c16e:	f000 fbe7 	bl	801c940 <__malloc_lock>
 801c172:	4921      	ldr	r1, [pc, #132]	; (801c1f8 <_malloc_r+0xac>)
 801c174:	680a      	ldr	r2, [r1, #0]
 801c176:	4614      	mov	r4, r2
 801c178:	b99c      	cbnz	r4, 801c1a2 <_malloc_r+0x56>
 801c17a:	4f20      	ldr	r7, [pc, #128]	; (801c1fc <_malloc_r+0xb0>)
 801c17c:	683b      	ldr	r3, [r7, #0]
 801c17e:	b923      	cbnz	r3, 801c18a <_malloc_r+0x3e>
 801c180:	4621      	mov	r1, r4
 801c182:	4630      	mov	r0, r6
 801c184:	f000 fb2a 	bl	801c7dc <_sbrk_r>
 801c188:	6038      	str	r0, [r7, #0]
 801c18a:	4629      	mov	r1, r5
 801c18c:	4630      	mov	r0, r6
 801c18e:	f000 fb25 	bl	801c7dc <_sbrk_r>
 801c192:	1c43      	adds	r3, r0, #1
 801c194:	d123      	bne.n	801c1de <_malloc_r+0x92>
 801c196:	230c      	movs	r3, #12
 801c198:	6033      	str	r3, [r6, #0]
 801c19a:	4630      	mov	r0, r6
 801c19c:	f000 fbd6 	bl	801c94c <__malloc_unlock>
 801c1a0:	e7e3      	b.n	801c16a <_malloc_r+0x1e>
 801c1a2:	6823      	ldr	r3, [r4, #0]
 801c1a4:	1b5b      	subs	r3, r3, r5
 801c1a6:	d417      	bmi.n	801c1d8 <_malloc_r+0x8c>
 801c1a8:	2b0b      	cmp	r3, #11
 801c1aa:	d903      	bls.n	801c1b4 <_malloc_r+0x68>
 801c1ac:	6023      	str	r3, [r4, #0]
 801c1ae:	441c      	add	r4, r3
 801c1b0:	6025      	str	r5, [r4, #0]
 801c1b2:	e004      	b.n	801c1be <_malloc_r+0x72>
 801c1b4:	6863      	ldr	r3, [r4, #4]
 801c1b6:	42a2      	cmp	r2, r4
 801c1b8:	bf0c      	ite	eq
 801c1ba:	600b      	streq	r3, [r1, #0]
 801c1bc:	6053      	strne	r3, [r2, #4]
 801c1be:	4630      	mov	r0, r6
 801c1c0:	f000 fbc4 	bl	801c94c <__malloc_unlock>
 801c1c4:	f104 000b 	add.w	r0, r4, #11
 801c1c8:	1d23      	adds	r3, r4, #4
 801c1ca:	f020 0007 	bic.w	r0, r0, #7
 801c1ce:	1ac2      	subs	r2, r0, r3
 801c1d0:	d0cc      	beq.n	801c16c <_malloc_r+0x20>
 801c1d2:	1a1b      	subs	r3, r3, r0
 801c1d4:	50a3      	str	r3, [r4, r2]
 801c1d6:	e7c9      	b.n	801c16c <_malloc_r+0x20>
 801c1d8:	4622      	mov	r2, r4
 801c1da:	6864      	ldr	r4, [r4, #4]
 801c1dc:	e7cc      	b.n	801c178 <_malloc_r+0x2c>
 801c1de:	1cc4      	adds	r4, r0, #3
 801c1e0:	f024 0403 	bic.w	r4, r4, #3
 801c1e4:	42a0      	cmp	r0, r4
 801c1e6:	d0e3      	beq.n	801c1b0 <_malloc_r+0x64>
 801c1e8:	1a21      	subs	r1, r4, r0
 801c1ea:	4630      	mov	r0, r6
 801c1ec:	f000 faf6 	bl	801c7dc <_sbrk_r>
 801c1f0:	3001      	adds	r0, #1
 801c1f2:	d1dd      	bne.n	801c1b0 <_malloc_r+0x64>
 801c1f4:	e7cf      	b.n	801c196 <_malloc_r+0x4a>
 801c1f6:	bf00      	nop
 801c1f8:	20008c30 	.word	0x20008c30
 801c1fc:	20008c34 	.word	0x20008c34

0801c200 <__sfputc_r>:
 801c200:	6893      	ldr	r3, [r2, #8]
 801c202:	3b01      	subs	r3, #1
 801c204:	2b00      	cmp	r3, #0
 801c206:	b410      	push	{r4}
 801c208:	6093      	str	r3, [r2, #8]
 801c20a:	da08      	bge.n	801c21e <__sfputc_r+0x1e>
 801c20c:	6994      	ldr	r4, [r2, #24]
 801c20e:	42a3      	cmp	r3, r4
 801c210:	db01      	blt.n	801c216 <__sfputc_r+0x16>
 801c212:	290a      	cmp	r1, #10
 801c214:	d103      	bne.n	801c21e <__sfputc_r+0x1e>
 801c216:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c21a:	f7ff bc31 	b.w	801ba80 <__swbuf_r>
 801c21e:	6813      	ldr	r3, [r2, #0]
 801c220:	1c58      	adds	r0, r3, #1
 801c222:	6010      	str	r0, [r2, #0]
 801c224:	7019      	strb	r1, [r3, #0]
 801c226:	4608      	mov	r0, r1
 801c228:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c22c:	4770      	bx	lr

0801c22e <__sfputs_r>:
 801c22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c230:	4606      	mov	r6, r0
 801c232:	460f      	mov	r7, r1
 801c234:	4614      	mov	r4, r2
 801c236:	18d5      	adds	r5, r2, r3
 801c238:	42ac      	cmp	r4, r5
 801c23a:	d101      	bne.n	801c240 <__sfputs_r+0x12>
 801c23c:	2000      	movs	r0, #0
 801c23e:	e007      	b.n	801c250 <__sfputs_r+0x22>
 801c240:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c244:	463a      	mov	r2, r7
 801c246:	4630      	mov	r0, r6
 801c248:	f7ff ffda 	bl	801c200 <__sfputc_r>
 801c24c:	1c43      	adds	r3, r0, #1
 801c24e:	d1f3      	bne.n	801c238 <__sfputs_r+0xa>
 801c250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c254 <_vfiprintf_r>:
 801c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c258:	460d      	mov	r5, r1
 801c25a:	b09d      	sub	sp, #116	; 0x74
 801c25c:	4614      	mov	r4, r2
 801c25e:	4698      	mov	r8, r3
 801c260:	4606      	mov	r6, r0
 801c262:	b118      	cbz	r0, 801c26c <_vfiprintf_r+0x18>
 801c264:	6983      	ldr	r3, [r0, #24]
 801c266:	b90b      	cbnz	r3, 801c26c <_vfiprintf_r+0x18>
 801c268:	f7ff fe02 	bl	801be70 <__sinit>
 801c26c:	4b89      	ldr	r3, [pc, #548]	; (801c494 <_vfiprintf_r+0x240>)
 801c26e:	429d      	cmp	r5, r3
 801c270:	d11b      	bne.n	801c2aa <_vfiprintf_r+0x56>
 801c272:	6875      	ldr	r5, [r6, #4]
 801c274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c276:	07d9      	lsls	r1, r3, #31
 801c278:	d405      	bmi.n	801c286 <_vfiprintf_r+0x32>
 801c27a:	89ab      	ldrh	r3, [r5, #12]
 801c27c:	059a      	lsls	r2, r3, #22
 801c27e:	d402      	bmi.n	801c286 <_vfiprintf_r+0x32>
 801c280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c282:	f7ff fea5 	bl	801bfd0 <__retarget_lock_acquire_recursive>
 801c286:	89ab      	ldrh	r3, [r5, #12]
 801c288:	071b      	lsls	r3, r3, #28
 801c28a:	d501      	bpl.n	801c290 <_vfiprintf_r+0x3c>
 801c28c:	692b      	ldr	r3, [r5, #16]
 801c28e:	b9eb      	cbnz	r3, 801c2cc <_vfiprintf_r+0x78>
 801c290:	4629      	mov	r1, r5
 801c292:	4630      	mov	r0, r6
 801c294:	f7ff fc46 	bl	801bb24 <__swsetup_r>
 801c298:	b1c0      	cbz	r0, 801c2cc <_vfiprintf_r+0x78>
 801c29a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c29c:	07dc      	lsls	r4, r3, #31
 801c29e:	d50e      	bpl.n	801c2be <_vfiprintf_r+0x6a>
 801c2a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c2a4:	b01d      	add	sp, #116	; 0x74
 801c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2aa:	4b7b      	ldr	r3, [pc, #492]	; (801c498 <_vfiprintf_r+0x244>)
 801c2ac:	429d      	cmp	r5, r3
 801c2ae:	d101      	bne.n	801c2b4 <_vfiprintf_r+0x60>
 801c2b0:	68b5      	ldr	r5, [r6, #8]
 801c2b2:	e7df      	b.n	801c274 <_vfiprintf_r+0x20>
 801c2b4:	4b79      	ldr	r3, [pc, #484]	; (801c49c <_vfiprintf_r+0x248>)
 801c2b6:	429d      	cmp	r5, r3
 801c2b8:	bf08      	it	eq
 801c2ba:	68f5      	ldreq	r5, [r6, #12]
 801c2bc:	e7da      	b.n	801c274 <_vfiprintf_r+0x20>
 801c2be:	89ab      	ldrh	r3, [r5, #12]
 801c2c0:	0598      	lsls	r0, r3, #22
 801c2c2:	d4ed      	bmi.n	801c2a0 <_vfiprintf_r+0x4c>
 801c2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c2c6:	f7ff fe84 	bl	801bfd2 <__retarget_lock_release_recursive>
 801c2ca:	e7e9      	b.n	801c2a0 <_vfiprintf_r+0x4c>
 801c2cc:	2300      	movs	r3, #0
 801c2ce:	9309      	str	r3, [sp, #36]	; 0x24
 801c2d0:	2320      	movs	r3, #32
 801c2d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 801c2da:	2330      	movs	r3, #48	; 0x30
 801c2dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c4a0 <_vfiprintf_r+0x24c>
 801c2e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c2e4:	f04f 0901 	mov.w	r9, #1
 801c2e8:	4623      	mov	r3, r4
 801c2ea:	469a      	mov	sl, r3
 801c2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c2f0:	b10a      	cbz	r2, 801c2f6 <_vfiprintf_r+0xa2>
 801c2f2:	2a25      	cmp	r2, #37	; 0x25
 801c2f4:	d1f9      	bne.n	801c2ea <_vfiprintf_r+0x96>
 801c2f6:	ebba 0b04 	subs.w	fp, sl, r4
 801c2fa:	d00b      	beq.n	801c314 <_vfiprintf_r+0xc0>
 801c2fc:	465b      	mov	r3, fp
 801c2fe:	4622      	mov	r2, r4
 801c300:	4629      	mov	r1, r5
 801c302:	4630      	mov	r0, r6
 801c304:	f7ff ff93 	bl	801c22e <__sfputs_r>
 801c308:	3001      	adds	r0, #1
 801c30a:	f000 80aa 	beq.w	801c462 <_vfiprintf_r+0x20e>
 801c30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c310:	445a      	add	r2, fp
 801c312:	9209      	str	r2, [sp, #36]	; 0x24
 801c314:	f89a 3000 	ldrb.w	r3, [sl]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	f000 80a2 	beq.w	801c462 <_vfiprintf_r+0x20e>
 801c31e:	2300      	movs	r3, #0
 801c320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c328:	f10a 0a01 	add.w	sl, sl, #1
 801c32c:	9304      	str	r3, [sp, #16]
 801c32e:	9307      	str	r3, [sp, #28]
 801c330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c334:	931a      	str	r3, [sp, #104]	; 0x68
 801c336:	4654      	mov	r4, sl
 801c338:	2205      	movs	r2, #5
 801c33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c33e:	4858      	ldr	r0, [pc, #352]	; (801c4a0 <_vfiprintf_r+0x24c>)
 801c340:	f7e3 ff96 	bl	8000270 <memchr>
 801c344:	9a04      	ldr	r2, [sp, #16]
 801c346:	b9d8      	cbnz	r0, 801c380 <_vfiprintf_r+0x12c>
 801c348:	06d1      	lsls	r1, r2, #27
 801c34a:	bf44      	itt	mi
 801c34c:	2320      	movmi	r3, #32
 801c34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c352:	0713      	lsls	r3, r2, #28
 801c354:	bf44      	itt	mi
 801c356:	232b      	movmi	r3, #43	; 0x2b
 801c358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c35c:	f89a 3000 	ldrb.w	r3, [sl]
 801c360:	2b2a      	cmp	r3, #42	; 0x2a
 801c362:	d015      	beq.n	801c390 <_vfiprintf_r+0x13c>
 801c364:	9a07      	ldr	r2, [sp, #28]
 801c366:	4654      	mov	r4, sl
 801c368:	2000      	movs	r0, #0
 801c36a:	f04f 0c0a 	mov.w	ip, #10
 801c36e:	4621      	mov	r1, r4
 801c370:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c374:	3b30      	subs	r3, #48	; 0x30
 801c376:	2b09      	cmp	r3, #9
 801c378:	d94e      	bls.n	801c418 <_vfiprintf_r+0x1c4>
 801c37a:	b1b0      	cbz	r0, 801c3aa <_vfiprintf_r+0x156>
 801c37c:	9207      	str	r2, [sp, #28]
 801c37e:	e014      	b.n	801c3aa <_vfiprintf_r+0x156>
 801c380:	eba0 0308 	sub.w	r3, r0, r8
 801c384:	fa09 f303 	lsl.w	r3, r9, r3
 801c388:	4313      	orrs	r3, r2
 801c38a:	9304      	str	r3, [sp, #16]
 801c38c:	46a2      	mov	sl, r4
 801c38e:	e7d2      	b.n	801c336 <_vfiprintf_r+0xe2>
 801c390:	9b03      	ldr	r3, [sp, #12]
 801c392:	1d19      	adds	r1, r3, #4
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	9103      	str	r1, [sp, #12]
 801c398:	2b00      	cmp	r3, #0
 801c39a:	bfbb      	ittet	lt
 801c39c:	425b      	neglt	r3, r3
 801c39e:	f042 0202 	orrlt.w	r2, r2, #2
 801c3a2:	9307      	strge	r3, [sp, #28]
 801c3a4:	9307      	strlt	r3, [sp, #28]
 801c3a6:	bfb8      	it	lt
 801c3a8:	9204      	strlt	r2, [sp, #16]
 801c3aa:	7823      	ldrb	r3, [r4, #0]
 801c3ac:	2b2e      	cmp	r3, #46	; 0x2e
 801c3ae:	d10c      	bne.n	801c3ca <_vfiprintf_r+0x176>
 801c3b0:	7863      	ldrb	r3, [r4, #1]
 801c3b2:	2b2a      	cmp	r3, #42	; 0x2a
 801c3b4:	d135      	bne.n	801c422 <_vfiprintf_r+0x1ce>
 801c3b6:	9b03      	ldr	r3, [sp, #12]
 801c3b8:	1d1a      	adds	r2, r3, #4
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	9203      	str	r2, [sp, #12]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	bfb8      	it	lt
 801c3c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c3c6:	3402      	adds	r4, #2
 801c3c8:	9305      	str	r3, [sp, #20]
 801c3ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c4b0 <_vfiprintf_r+0x25c>
 801c3ce:	7821      	ldrb	r1, [r4, #0]
 801c3d0:	2203      	movs	r2, #3
 801c3d2:	4650      	mov	r0, sl
 801c3d4:	f7e3 ff4c 	bl	8000270 <memchr>
 801c3d8:	b140      	cbz	r0, 801c3ec <_vfiprintf_r+0x198>
 801c3da:	2340      	movs	r3, #64	; 0x40
 801c3dc:	eba0 000a 	sub.w	r0, r0, sl
 801c3e0:	fa03 f000 	lsl.w	r0, r3, r0
 801c3e4:	9b04      	ldr	r3, [sp, #16]
 801c3e6:	4303      	orrs	r3, r0
 801c3e8:	3401      	adds	r4, #1
 801c3ea:	9304      	str	r3, [sp, #16]
 801c3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3f0:	482c      	ldr	r0, [pc, #176]	; (801c4a4 <_vfiprintf_r+0x250>)
 801c3f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c3f6:	2206      	movs	r2, #6
 801c3f8:	f7e3 ff3a 	bl	8000270 <memchr>
 801c3fc:	2800      	cmp	r0, #0
 801c3fe:	d03f      	beq.n	801c480 <_vfiprintf_r+0x22c>
 801c400:	4b29      	ldr	r3, [pc, #164]	; (801c4a8 <_vfiprintf_r+0x254>)
 801c402:	bb1b      	cbnz	r3, 801c44c <_vfiprintf_r+0x1f8>
 801c404:	9b03      	ldr	r3, [sp, #12]
 801c406:	3307      	adds	r3, #7
 801c408:	f023 0307 	bic.w	r3, r3, #7
 801c40c:	3308      	adds	r3, #8
 801c40e:	9303      	str	r3, [sp, #12]
 801c410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c412:	443b      	add	r3, r7
 801c414:	9309      	str	r3, [sp, #36]	; 0x24
 801c416:	e767      	b.n	801c2e8 <_vfiprintf_r+0x94>
 801c418:	fb0c 3202 	mla	r2, ip, r2, r3
 801c41c:	460c      	mov	r4, r1
 801c41e:	2001      	movs	r0, #1
 801c420:	e7a5      	b.n	801c36e <_vfiprintf_r+0x11a>
 801c422:	2300      	movs	r3, #0
 801c424:	3401      	adds	r4, #1
 801c426:	9305      	str	r3, [sp, #20]
 801c428:	4619      	mov	r1, r3
 801c42a:	f04f 0c0a 	mov.w	ip, #10
 801c42e:	4620      	mov	r0, r4
 801c430:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c434:	3a30      	subs	r2, #48	; 0x30
 801c436:	2a09      	cmp	r2, #9
 801c438:	d903      	bls.n	801c442 <_vfiprintf_r+0x1ee>
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d0c5      	beq.n	801c3ca <_vfiprintf_r+0x176>
 801c43e:	9105      	str	r1, [sp, #20]
 801c440:	e7c3      	b.n	801c3ca <_vfiprintf_r+0x176>
 801c442:	fb0c 2101 	mla	r1, ip, r1, r2
 801c446:	4604      	mov	r4, r0
 801c448:	2301      	movs	r3, #1
 801c44a:	e7f0      	b.n	801c42e <_vfiprintf_r+0x1da>
 801c44c:	ab03      	add	r3, sp, #12
 801c44e:	9300      	str	r3, [sp, #0]
 801c450:	462a      	mov	r2, r5
 801c452:	4b16      	ldr	r3, [pc, #88]	; (801c4ac <_vfiprintf_r+0x258>)
 801c454:	a904      	add	r1, sp, #16
 801c456:	4630      	mov	r0, r6
 801c458:	f3af 8000 	nop.w
 801c45c:	4607      	mov	r7, r0
 801c45e:	1c78      	adds	r0, r7, #1
 801c460:	d1d6      	bne.n	801c410 <_vfiprintf_r+0x1bc>
 801c462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c464:	07d9      	lsls	r1, r3, #31
 801c466:	d405      	bmi.n	801c474 <_vfiprintf_r+0x220>
 801c468:	89ab      	ldrh	r3, [r5, #12]
 801c46a:	059a      	lsls	r2, r3, #22
 801c46c:	d402      	bmi.n	801c474 <_vfiprintf_r+0x220>
 801c46e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c470:	f7ff fdaf 	bl	801bfd2 <__retarget_lock_release_recursive>
 801c474:	89ab      	ldrh	r3, [r5, #12]
 801c476:	065b      	lsls	r3, r3, #25
 801c478:	f53f af12 	bmi.w	801c2a0 <_vfiprintf_r+0x4c>
 801c47c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c47e:	e711      	b.n	801c2a4 <_vfiprintf_r+0x50>
 801c480:	ab03      	add	r3, sp, #12
 801c482:	9300      	str	r3, [sp, #0]
 801c484:	462a      	mov	r2, r5
 801c486:	4b09      	ldr	r3, [pc, #36]	; (801c4ac <_vfiprintf_r+0x258>)
 801c488:	a904      	add	r1, sp, #16
 801c48a:	4630      	mov	r0, r6
 801c48c:	f000 f880 	bl	801c590 <_printf_i>
 801c490:	e7e4      	b.n	801c45c <_vfiprintf_r+0x208>
 801c492:	bf00      	nop
 801c494:	08020d34 	.word	0x08020d34
 801c498:	08020d54 	.word	0x08020d54
 801c49c:	08020d14 	.word	0x08020d14
 801c4a0:	08020d74 	.word	0x08020d74
 801c4a4:	08020d7e 	.word	0x08020d7e
 801c4a8:	00000000 	.word	0x00000000
 801c4ac:	0801c22f 	.word	0x0801c22f
 801c4b0:	08020d7a 	.word	0x08020d7a

0801c4b4 <_printf_common>:
 801c4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c4b8:	4616      	mov	r6, r2
 801c4ba:	4699      	mov	r9, r3
 801c4bc:	688a      	ldr	r2, [r1, #8]
 801c4be:	690b      	ldr	r3, [r1, #16]
 801c4c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c4c4:	4293      	cmp	r3, r2
 801c4c6:	bfb8      	it	lt
 801c4c8:	4613      	movlt	r3, r2
 801c4ca:	6033      	str	r3, [r6, #0]
 801c4cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c4d0:	4607      	mov	r7, r0
 801c4d2:	460c      	mov	r4, r1
 801c4d4:	b10a      	cbz	r2, 801c4da <_printf_common+0x26>
 801c4d6:	3301      	adds	r3, #1
 801c4d8:	6033      	str	r3, [r6, #0]
 801c4da:	6823      	ldr	r3, [r4, #0]
 801c4dc:	0699      	lsls	r1, r3, #26
 801c4de:	bf42      	ittt	mi
 801c4e0:	6833      	ldrmi	r3, [r6, #0]
 801c4e2:	3302      	addmi	r3, #2
 801c4e4:	6033      	strmi	r3, [r6, #0]
 801c4e6:	6825      	ldr	r5, [r4, #0]
 801c4e8:	f015 0506 	ands.w	r5, r5, #6
 801c4ec:	d106      	bne.n	801c4fc <_printf_common+0x48>
 801c4ee:	f104 0a19 	add.w	sl, r4, #25
 801c4f2:	68e3      	ldr	r3, [r4, #12]
 801c4f4:	6832      	ldr	r2, [r6, #0]
 801c4f6:	1a9b      	subs	r3, r3, r2
 801c4f8:	42ab      	cmp	r3, r5
 801c4fa:	dc26      	bgt.n	801c54a <_printf_common+0x96>
 801c4fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c500:	1e13      	subs	r3, r2, #0
 801c502:	6822      	ldr	r2, [r4, #0]
 801c504:	bf18      	it	ne
 801c506:	2301      	movne	r3, #1
 801c508:	0692      	lsls	r2, r2, #26
 801c50a:	d42b      	bmi.n	801c564 <_printf_common+0xb0>
 801c50c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c510:	4649      	mov	r1, r9
 801c512:	4638      	mov	r0, r7
 801c514:	47c0      	blx	r8
 801c516:	3001      	adds	r0, #1
 801c518:	d01e      	beq.n	801c558 <_printf_common+0xa4>
 801c51a:	6823      	ldr	r3, [r4, #0]
 801c51c:	68e5      	ldr	r5, [r4, #12]
 801c51e:	6832      	ldr	r2, [r6, #0]
 801c520:	f003 0306 	and.w	r3, r3, #6
 801c524:	2b04      	cmp	r3, #4
 801c526:	bf08      	it	eq
 801c528:	1aad      	subeq	r5, r5, r2
 801c52a:	68a3      	ldr	r3, [r4, #8]
 801c52c:	6922      	ldr	r2, [r4, #16]
 801c52e:	bf0c      	ite	eq
 801c530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c534:	2500      	movne	r5, #0
 801c536:	4293      	cmp	r3, r2
 801c538:	bfc4      	itt	gt
 801c53a:	1a9b      	subgt	r3, r3, r2
 801c53c:	18ed      	addgt	r5, r5, r3
 801c53e:	2600      	movs	r6, #0
 801c540:	341a      	adds	r4, #26
 801c542:	42b5      	cmp	r5, r6
 801c544:	d11a      	bne.n	801c57c <_printf_common+0xc8>
 801c546:	2000      	movs	r0, #0
 801c548:	e008      	b.n	801c55c <_printf_common+0xa8>
 801c54a:	2301      	movs	r3, #1
 801c54c:	4652      	mov	r2, sl
 801c54e:	4649      	mov	r1, r9
 801c550:	4638      	mov	r0, r7
 801c552:	47c0      	blx	r8
 801c554:	3001      	adds	r0, #1
 801c556:	d103      	bne.n	801c560 <_printf_common+0xac>
 801c558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c560:	3501      	adds	r5, #1
 801c562:	e7c6      	b.n	801c4f2 <_printf_common+0x3e>
 801c564:	18e1      	adds	r1, r4, r3
 801c566:	1c5a      	adds	r2, r3, #1
 801c568:	2030      	movs	r0, #48	; 0x30
 801c56a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c56e:	4422      	add	r2, r4
 801c570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c578:	3302      	adds	r3, #2
 801c57a:	e7c7      	b.n	801c50c <_printf_common+0x58>
 801c57c:	2301      	movs	r3, #1
 801c57e:	4622      	mov	r2, r4
 801c580:	4649      	mov	r1, r9
 801c582:	4638      	mov	r0, r7
 801c584:	47c0      	blx	r8
 801c586:	3001      	adds	r0, #1
 801c588:	d0e6      	beq.n	801c558 <_printf_common+0xa4>
 801c58a:	3601      	adds	r6, #1
 801c58c:	e7d9      	b.n	801c542 <_printf_common+0x8e>
	...

0801c590 <_printf_i>:
 801c590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c594:	460c      	mov	r4, r1
 801c596:	4691      	mov	r9, r2
 801c598:	7e27      	ldrb	r7, [r4, #24]
 801c59a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c59c:	2f78      	cmp	r7, #120	; 0x78
 801c59e:	4680      	mov	r8, r0
 801c5a0:	469a      	mov	sl, r3
 801c5a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c5a6:	d807      	bhi.n	801c5b8 <_printf_i+0x28>
 801c5a8:	2f62      	cmp	r7, #98	; 0x62
 801c5aa:	d80a      	bhi.n	801c5c2 <_printf_i+0x32>
 801c5ac:	2f00      	cmp	r7, #0
 801c5ae:	f000 80d8 	beq.w	801c762 <_printf_i+0x1d2>
 801c5b2:	2f58      	cmp	r7, #88	; 0x58
 801c5b4:	f000 80a3 	beq.w	801c6fe <_printf_i+0x16e>
 801c5b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c5bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c5c0:	e03a      	b.n	801c638 <_printf_i+0xa8>
 801c5c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c5c6:	2b15      	cmp	r3, #21
 801c5c8:	d8f6      	bhi.n	801c5b8 <_printf_i+0x28>
 801c5ca:	a001      	add	r0, pc, #4	; (adr r0, 801c5d0 <_printf_i+0x40>)
 801c5cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c5d0:	0801c629 	.word	0x0801c629
 801c5d4:	0801c63d 	.word	0x0801c63d
 801c5d8:	0801c5b9 	.word	0x0801c5b9
 801c5dc:	0801c5b9 	.word	0x0801c5b9
 801c5e0:	0801c5b9 	.word	0x0801c5b9
 801c5e4:	0801c5b9 	.word	0x0801c5b9
 801c5e8:	0801c63d 	.word	0x0801c63d
 801c5ec:	0801c5b9 	.word	0x0801c5b9
 801c5f0:	0801c5b9 	.word	0x0801c5b9
 801c5f4:	0801c5b9 	.word	0x0801c5b9
 801c5f8:	0801c5b9 	.word	0x0801c5b9
 801c5fc:	0801c749 	.word	0x0801c749
 801c600:	0801c66d 	.word	0x0801c66d
 801c604:	0801c72b 	.word	0x0801c72b
 801c608:	0801c5b9 	.word	0x0801c5b9
 801c60c:	0801c5b9 	.word	0x0801c5b9
 801c610:	0801c76b 	.word	0x0801c76b
 801c614:	0801c5b9 	.word	0x0801c5b9
 801c618:	0801c66d 	.word	0x0801c66d
 801c61c:	0801c5b9 	.word	0x0801c5b9
 801c620:	0801c5b9 	.word	0x0801c5b9
 801c624:	0801c733 	.word	0x0801c733
 801c628:	680b      	ldr	r3, [r1, #0]
 801c62a:	1d1a      	adds	r2, r3, #4
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	600a      	str	r2, [r1, #0]
 801c630:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c638:	2301      	movs	r3, #1
 801c63a:	e0a3      	b.n	801c784 <_printf_i+0x1f4>
 801c63c:	6825      	ldr	r5, [r4, #0]
 801c63e:	6808      	ldr	r0, [r1, #0]
 801c640:	062e      	lsls	r6, r5, #24
 801c642:	f100 0304 	add.w	r3, r0, #4
 801c646:	d50a      	bpl.n	801c65e <_printf_i+0xce>
 801c648:	6805      	ldr	r5, [r0, #0]
 801c64a:	600b      	str	r3, [r1, #0]
 801c64c:	2d00      	cmp	r5, #0
 801c64e:	da03      	bge.n	801c658 <_printf_i+0xc8>
 801c650:	232d      	movs	r3, #45	; 0x2d
 801c652:	426d      	negs	r5, r5
 801c654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c658:	485e      	ldr	r0, [pc, #376]	; (801c7d4 <_printf_i+0x244>)
 801c65a:	230a      	movs	r3, #10
 801c65c:	e019      	b.n	801c692 <_printf_i+0x102>
 801c65e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c662:	6805      	ldr	r5, [r0, #0]
 801c664:	600b      	str	r3, [r1, #0]
 801c666:	bf18      	it	ne
 801c668:	b22d      	sxthne	r5, r5
 801c66a:	e7ef      	b.n	801c64c <_printf_i+0xbc>
 801c66c:	680b      	ldr	r3, [r1, #0]
 801c66e:	6825      	ldr	r5, [r4, #0]
 801c670:	1d18      	adds	r0, r3, #4
 801c672:	6008      	str	r0, [r1, #0]
 801c674:	0628      	lsls	r0, r5, #24
 801c676:	d501      	bpl.n	801c67c <_printf_i+0xec>
 801c678:	681d      	ldr	r5, [r3, #0]
 801c67a:	e002      	b.n	801c682 <_printf_i+0xf2>
 801c67c:	0669      	lsls	r1, r5, #25
 801c67e:	d5fb      	bpl.n	801c678 <_printf_i+0xe8>
 801c680:	881d      	ldrh	r5, [r3, #0]
 801c682:	4854      	ldr	r0, [pc, #336]	; (801c7d4 <_printf_i+0x244>)
 801c684:	2f6f      	cmp	r7, #111	; 0x6f
 801c686:	bf0c      	ite	eq
 801c688:	2308      	moveq	r3, #8
 801c68a:	230a      	movne	r3, #10
 801c68c:	2100      	movs	r1, #0
 801c68e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c692:	6866      	ldr	r6, [r4, #4]
 801c694:	60a6      	str	r6, [r4, #8]
 801c696:	2e00      	cmp	r6, #0
 801c698:	bfa2      	ittt	ge
 801c69a:	6821      	ldrge	r1, [r4, #0]
 801c69c:	f021 0104 	bicge.w	r1, r1, #4
 801c6a0:	6021      	strge	r1, [r4, #0]
 801c6a2:	b90d      	cbnz	r5, 801c6a8 <_printf_i+0x118>
 801c6a4:	2e00      	cmp	r6, #0
 801c6a6:	d04d      	beq.n	801c744 <_printf_i+0x1b4>
 801c6a8:	4616      	mov	r6, r2
 801c6aa:	fbb5 f1f3 	udiv	r1, r5, r3
 801c6ae:	fb03 5711 	mls	r7, r3, r1, r5
 801c6b2:	5dc7      	ldrb	r7, [r0, r7]
 801c6b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c6b8:	462f      	mov	r7, r5
 801c6ba:	42bb      	cmp	r3, r7
 801c6bc:	460d      	mov	r5, r1
 801c6be:	d9f4      	bls.n	801c6aa <_printf_i+0x11a>
 801c6c0:	2b08      	cmp	r3, #8
 801c6c2:	d10b      	bne.n	801c6dc <_printf_i+0x14c>
 801c6c4:	6823      	ldr	r3, [r4, #0]
 801c6c6:	07df      	lsls	r7, r3, #31
 801c6c8:	d508      	bpl.n	801c6dc <_printf_i+0x14c>
 801c6ca:	6923      	ldr	r3, [r4, #16]
 801c6cc:	6861      	ldr	r1, [r4, #4]
 801c6ce:	4299      	cmp	r1, r3
 801c6d0:	bfde      	ittt	le
 801c6d2:	2330      	movle	r3, #48	; 0x30
 801c6d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c6d8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801c6dc:	1b92      	subs	r2, r2, r6
 801c6de:	6122      	str	r2, [r4, #16]
 801c6e0:	f8cd a000 	str.w	sl, [sp]
 801c6e4:	464b      	mov	r3, r9
 801c6e6:	aa03      	add	r2, sp, #12
 801c6e8:	4621      	mov	r1, r4
 801c6ea:	4640      	mov	r0, r8
 801c6ec:	f7ff fee2 	bl	801c4b4 <_printf_common>
 801c6f0:	3001      	adds	r0, #1
 801c6f2:	d14c      	bne.n	801c78e <_printf_i+0x1fe>
 801c6f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c6f8:	b004      	add	sp, #16
 801c6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6fe:	4835      	ldr	r0, [pc, #212]	; (801c7d4 <_printf_i+0x244>)
 801c700:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c704:	6823      	ldr	r3, [r4, #0]
 801c706:	680e      	ldr	r6, [r1, #0]
 801c708:	061f      	lsls	r7, r3, #24
 801c70a:	f856 5b04 	ldr.w	r5, [r6], #4
 801c70e:	600e      	str	r6, [r1, #0]
 801c710:	d514      	bpl.n	801c73c <_printf_i+0x1ac>
 801c712:	07d9      	lsls	r1, r3, #31
 801c714:	bf44      	itt	mi
 801c716:	f043 0320 	orrmi.w	r3, r3, #32
 801c71a:	6023      	strmi	r3, [r4, #0]
 801c71c:	b91d      	cbnz	r5, 801c726 <_printf_i+0x196>
 801c71e:	6823      	ldr	r3, [r4, #0]
 801c720:	f023 0320 	bic.w	r3, r3, #32
 801c724:	6023      	str	r3, [r4, #0]
 801c726:	2310      	movs	r3, #16
 801c728:	e7b0      	b.n	801c68c <_printf_i+0xfc>
 801c72a:	6823      	ldr	r3, [r4, #0]
 801c72c:	f043 0320 	orr.w	r3, r3, #32
 801c730:	6023      	str	r3, [r4, #0]
 801c732:	2378      	movs	r3, #120	; 0x78
 801c734:	4828      	ldr	r0, [pc, #160]	; (801c7d8 <_printf_i+0x248>)
 801c736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c73a:	e7e3      	b.n	801c704 <_printf_i+0x174>
 801c73c:	065e      	lsls	r6, r3, #25
 801c73e:	bf48      	it	mi
 801c740:	b2ad      	uxthmi	r5, r5
 801c742:	e7e6      	b.n	801c712 <_printf_i+0x182>
 801c744:	4616      	mov	r6, r2
 801c746:	e7bb      	b.n	801c6c0 <_printf_i+0x130>
 801c748:	680b      	ldr	r3, [r1, #0]
 801c74a:	6826      	ldr	r6, [r4, #0]
 801c74c:	6960      	ldr	r0, [r4, #20]
 801c74e:	1d1d      	adds	r5, r3, #4
 801c750:	600d      	str	r5, [r1, #0]
 801c752:	0635      	lsls	r5, r6, #24
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	d501      	bpl.n	801c75c <_printf_i+0x1cc>
 801c758:	6018      	str	r0, [r3, #0]
 801c75a:	e002      	b.n	801c762 <_printf_i+0x1d2>
 801c75c:	0671      	lsls	r1, r6, #25
 801c75e:	d5fb      	bpl.n	801c758 <_printf_i+0x1c8>
 801c760:	8018      	strh	r0, [r3, #0]
 801c762:	2300      	movs	r3, #0
 801c764:	6123      	str	r3, [r4, #16]
 801c766:	4616      	mov	r6, r2
 801c768:	e7ba      	b.n	801c6e0 <_printf_i+0x150>
 801c76a:	680b      	ldr	r3, [r1, #0]
 801c76c:	1d1a      	adds	r2, r3, #4
 801c76e:	600a      	str	r2, [r1, #0]
 801c770:	681e      	ldr	r6, [r3, #0]
 801c772:	6862      	ldr	r2, [r4, #4]
 801c774:	2100      	movs	r1, #0
 801c776:	4630      	mov	r0, r6
 801c778:	f7e3 fd7a 	bl	8000270 <memchr>
 801c77c:	b108      	cbz	r0, 801c782 <_printf_i+0x1f2>
 801c77e:	1b80      	subs	r0, r0, r6
 801c780:	6060      	str	r0, [r4, #4]
 801c782:	6863      	ldr	r3, [r4, #4]
 801c784:	6123      	str	r3, [r4, #16]
 801c786:	2300      	movs	r3, #0
 801c788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c78c:	e7a8      	b.n	801c6e0 <_printf_i+0x150>
 801c78e:	6923      	ldr	r3, [r4, #16]
 801c790:	4632      	mov	r2, r6
 801c792:	4649      	mov	r1, r9
 801c794:	4640      	mov	r0, r8
 801c796:	47d0      	blx	sl
 801c798:	3001      	adds	r0, #1
 801c79a:	d0ab      	beq.n	801c6f4 <_printf_i+0x164>
 801c79c:	6823      	ldr	r3, [r4, #0]
 801c79e:	079b      	lsls	r3, r3, #30
 801c7a0:	d413      	bmi.n	801c7ca <_printf_i+0x23a>
 801c7a2:	68e0      	ldr	r0, [r4, #12]
 801c7a4:	9b03      	ldr	r3, [sp, #12]
 801c7a6:	4298      	cmp	r0, r3
 801c7a8:	bfb8      	it	lt
 801c7aa:	4618      	movlt	r0, r3
 801c7ac:	e7a4      	b.n	801c6f8 <_printf_i+0x168>
 801c7ae:	2301      	movs	r3, #1
 801c7b0:	4632      	mov	r2, r6
 801c7b2:	4649      	mov	r1, r9
 801c7b4:	4640      	mov	r0, r8
 801c7b6:	47d0      	blx	sl
 801c7b8:	3001      	adds	r0, #1
 801c7ba:	d09b      	beq.n	801c6f4 <_printf_i+0x164>
 801c7bc:	3501      	adds	r5, #1
 801c7be:	68e3      	ldr	r3, [r4, #12]
 801c7c0:	9903      	ldr	r1, [sp, #12]
 801c7c2:	1a5b      	subs	r3, r3, r1
 801c7c4:	42ab      	cmp	r3, r5
 801c7c6:	dcf2      	bgt.n	801c7ae <_printf_i+0x21e>
 801c7c8:	e7eb      	b.n	801c7a2 <_printf_i+0x212>
 801c7ca:	2500      	movs	r5, #0
 801c7cc:	f104 0619 	add.w	r6, r4, #25
 801c7d0:	e7f5      	b.n	801c7be <_printf_i+0x22e>
 801c7d2:	bf00      	nop
 801c7d4:	08020d85 	.word	0x08020d85
 801c7d8:	08020d96 	.word	0x08020d96

0801c7dc <_sbrk_r>:
 801c7dc:	b538      	push	{r3, r4, r5, lr}
 801c7de:	4d06      	ldr	r5, [pc, #24]	; (801c7f8 <_sbrk_r+0x1c>)
 801c7e0:	2300      	movs	r3, #0
 801c7e2:	4604      	mov	r4, r0
 801c7e4:	4608      	mov	r0, r1
 801c7e6:	602b      	str	r3, [r5, #0]
 801c7e8:	f7e4 fb54 	bl	8000e94 <_sbrk>
 801c7ec:	1c43      	adds	r3, r0, #1
 801c7ee:	d102      	bne.n	801c7f6 <_sbrk_r+0x1a>
 801c7f0:	682b      	ldr	r3, [r5, #0]
 801c7f2:	b103      	cbz	r3, 801c7f6 <_sbrk_r+0x1a>
 801c7f4:	6023      	str	r3, [r4, #0]
 801c7f6:	bd38      	pop	{r3, r4, r5, pc}
 801c7f8:	200106a4 	.word	0x200106a4

0801c7fc <__sread>:
 801c7fc:	b510      	push	{r4, lr}
 801c7fe:	460c      	mov	r4, r1
 801c800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c804:	f000 f8a8 	bl	801c958 <_read_r>
 801c808:	2800      	cmp	r0, #0
 801c80a:	bfab      	itete	ge
 801c80c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c80e:	89a3      	ldrhlt	r3, [r4, #12]
 801c810:	181b      	addge	r3, r3, r0
 801c812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c816:	bfac      	ite	ge
 801c818:	6563      	strge	r3, [r4, #84]	; 0x54
 801c81a:	81a3      	strhlt	r3, [r4, #12]
 801c81c:	bd10      	pop	{r4, pc}

0801c81e <__swrite>:
 801c81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c822:	461f      	mov	r7, r3
 801c824:	898b      	ldrh	r3, [r1, #12]
 801c826:	05db      	lsls	r3, r3, #23
 801c828:	4605      	mov	r5, r0
 801c82a:	460c      	mov	r4, r1
 801c82c:	4616      	mov	r6, r2
 801c82e:	d505      	bpl.n	801c83c <__swrite+0x1e>
 801c830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c834:	2302      	movs	r3, #2
 801c836:	2200      	movs	r2, #0
 801c838:	f000 f870 	bl	801c91c <_lseek_r>
 801c83c:	89a3      	ldrh	r3, [r4, #12]
 801c83e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c846:	81a3      	strh	r3, [r4, #12]
 801c848:	4632      	mov	r2, r6
 801c84a:	463b      	mov	r3, r7
 801c84c:	4628      	mov	r0, r5
 801c84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c852:	f000 b817 	b.w	801c884 <_write_r>

0801c856 <__sseek>:
 801c856:	b510      	push	{r4, lr}
 801c858:	460c      	mov	r4, r1
 801c85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c85e:	f000 f85d 	bl	801c91c <_lseek_r>
 801c862:	1c43      	adds	r3, r0, #1
 801c864:	89a3      	ldrh	r3, [r4, #12]
 801c866:	bf15      	itete	ne
 801c868:	6560      	strne	r0, [r4, #84]	; 0x54
 801c86a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c86e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c872:	81a3      	strheq	r3, [r4, #12]
 801c874:	bf18      	it	ne
 801c876:	81a3      	strhne	r3, [r4, #12]
 801c878:	bd10      	pop	{r4, pc}

0801c87a <__sclose>:
 801c87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c87e:	f000 b81b 	b.w	801c8b8 <_close_r>
	...

0801c884 <_write_r>:
 801c884:	b538      	push	{r3, r4, r5, lr}
 801c886:	4d07      	ldr	r5, [pc, #28]	; (801c8a4 <_write_r+0x20>)
 801c888:	4604      	mov	r4, r0
 801c88a:	4608      	mov	r0, r1
 801c88c:	4611      	mov	r1, r2
 801c88e:	2200      	movs	r2, #0
 801c890:	602a      	str	r2, [r5, #0]
 801c892:	461a      	mov	r2, r3
 801c894:	f7e4 f8f7 	bl	8000a86 <_write>
 801c898:	1c43      	adds	r3, r0, #1
 801c89a:	d102      	bne.n	801c8a2 <_write_r+0x1e>
 801c89c:	682b      	ldr	r3, [r5, #0]
 801c89e:	b103      	cbz	r3, 801c8a2 <_write_r+0x1e>
 801c8a0:	6023      	str	r3, [r4, #0]
 801c8a2:	bd38      	pop	{r3, r4, r5, pc}
 801c8a4:	200106a4 	.word	0x200106a4

0801c8a8 <abort>:
 801c8a8:	b508      	push	{r3, lr}
 801c8aa:	2006      	movs	r0, #6
 801c8ac:	f000 f88e 	bl	801c9cc <raise>
 801c8b0:	2001      	movs	r0, #1
 801c8b2:	f7e4 fa93 	bl	8000ddc <_exit>
	...

0801c8b8 <_close_r>:
 801c8b8:	b538      	push	{r3, r4, r5, lr}
 801c8ba:	4d06      	ldr	r5, [pc, #24]	; (801c8d4 <_close_r+0x1c>)
 801c8bc:	2300      	movs	r3, #0
 801c8be:	4604      	mov	r4, r0
 801c8c0:	4608      	mov	r0, r1
 801c8c2:	602b      	str	r3, [r5, #0]
 801c8c4:	f7e4 fab1 	bl	8000e2a <_close>
 801c8c8:	1c43      	adds	r3, r0, #1
 801c8ca:	d102      	bne.n	801c8d2 <_close_r+0x1a>
 801c8cc:	682b      	ldr	r3, [r5, #0]
 801c8ce:	b103      	cbz	r3, 801c8d2 <_close_r+0x1a>
 801c8d0:	6023      	str	r3, [r4, #0]
 801c8d2:	bd38      	pop	{r3, r4, r5, pc}
 801c8d4:	200106a4 	.word	0x200106a4

0801c8d8 <_fstat_r>:
 801c8d8:	b538      	push	{r3, r4, r5, lr}
 801c8da:	4d07      	ldr	r5, [pc, #28]	; (801c8f8 <_fstat_r+0x20>)
 801c8dc:	2300      	movs	r3, #0
 801c8de:	4604      	mov	r4, r0
 801c8e0:	4608      	mov	r0, r1
 801c8e2:	4611      	mov	r1, r2
 801c8e4:	602b      	str	r3, [r5, #0]
 801c8e6:	f7e4 faac 	bl	8000e42 <_fstat>
 801c8ea:	1c43      	adds	r3, r0, #1
 801c8ec:	d102      	bne.n	801c8f4 <_fstat_r+0x1c>
 801c8ee:	682b      	ldr	r3, [r5, #0]
 801c8f0:	b103      	cbz	r3, 801c8f4 <_fstat_r+0x1c>
 801c8f2:	6023      	str	r3, [r4, #0]
 801c8f4:	bd38      	pop	{r3, r4, r5, pc}
 801c8f6:	bf00      	nop
 801c8f8:	200106a4 	.word	0x200106a4

0801c8fc <_isatty_r>:
 801c8fc:	b538      	push	{r3, r4, r5, lr}
 801c8fe:	4d06      	ldr	r5, [pc, #24]	; (801c918 <_isatty_r+0x1c>)
 801c900:	2300      	movs	r3, #0
 801c902:	4604      	mov	r4, r0
 801c904:	4608      	mov	r0, r1
 801c906:	602b      	str	r3, [r5, #0]
 801c908:	f7e4 faab 	bl	8000e62 <_isatty>
 801c90c:	1c43      	adds	r3, r0, #1
 801c90e:	d102      	bne.n	801c916 <_isatty_r+0x1a>
 801c910:	682b      	ldr	r3, [r5, #0]
 801c912:	b103      	cbz	r3, 801c916 <_isatty_r+0x1a>
 801c914:	6023      	str	r3, [r4, #0]
 801c916:	bd38      	pop	{r3, r4, r5, pc}
 801c918:	200106a4 	.word	0x200106a4

0801c91c <_lseek_r>:
 801c91c:	b538      	push	{r3, r4, r5, lr}
 801c91e:	4d07      	ldr	r5, [pc, #28]	; (801c93c <_lseek_r+0x20>)
 801c920:	4604      	mov	r4, r0
 801c922:	4608      	mov	r0, r1
 801c924:	4611      	mov	r1, r2
 801c926:	2200      	movs	r2, #0
 801c928:	602a      	str	r2, [r5, #0]
 801c92a:	461a      	mov	r2, r3
 801c92c:	f7e4 faa4 	bl	8000e78 <_lseek>
 801c930:	1c43      	adds	r3, r0, #1
 801c932:	d102      	bne.n	801c93a <_lseek_r+0x1e>
 801c934:	682b      	ldr	r3, [r5, #0]
 801c936:	b103      	cbz	r3, 801c93a <_lseek_r+0x1e>
 801c938:	6023      	str	r3, [r4, #0]
 801c93a:	bd38      	pop	{r3, r4, r5, pc}
 801c93c:	200106a4 	.word	0x200106a4

0801c940 <__malloc_lock>:
 801c940:	4801      	ldr	r0, [pc, #4]	; (801c948 <__malloc_lock+0x8>)
 801c942:	f7ff bb45 	b.w	801bfd0 <__retarget_lock_acquire_recursive>
 801c946:	bf00      	nop
 801c948:	200106b4 	.word	0x200106b4

0801c94c <__malloc_unlock>:
 801c94c:	4801      	ldr	r0, [pc, #4]	; (801c954 <__malloc_unlock+0x8>)
 801c94e:	f7ff bb40 	b.w	801bfd2 <__retarget_lock_release_recursive>
 801c952:	bf00      	nop
 801c954:	200106b4 	.word	0x200106b4

0801c958 <_read_r>:
 801c958:	b538      	push	{r3, r4, r5, lr}
 801c95a:	4d07      	ldr	r5, [pc, #28]	; (801c978 <_read_r+0x20>)
 801c95c:	4604      	mov	r4, r0
 801c95e:	4608      	mov	r0, r1
 801c960:	4611      	mov	r1, r2
 801c962:	2200      	movs	r2, #0
 801c964:	602a      	str	r2, [r5, #0]
 801c966:	461a      	mov	r2, r3
 801c968:	f7e4 fa42 	bl	8000df0 <_read>
 801c96c:	1c43      	adds	r3, r0, #1
 801c96e:	d102      	bne.n	801c976 <_read_r+0x1e>
 801c970:	682b      	ldr	r3, [r5, #0]
 801c972:	b103      	cbz	r3, 801c976 <_read_r+0x1e>
 801c974:	6023      	str	r3, [r4, #0]
 801c976:	bd38      	pop	{r3, r4, r5, pc}
 801c978:	200106a4 	.word	0x200106a4

0801c97c <_raise_r>:
 801c97c:	291f      	cmp	r1, #31
 801c97e:	b538      	push	{r3, r4, r5, lr}
 801c980:	4604      	mov	r4, r0
 801c982:	460d      	mov	r5, r1
 801c984:	d904      	bls.n	801c990 <_raise_r+0x14>
 801c986:	2316      	movs	r3, #22
 801c988:	6003      	str	r3, [r0, #0]
 801c98a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c98e:	bd38      	pop	{r3, r4, r5, pc}
 801c990:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c992:	b112      	cbz	r2, 801c99a <_raise_r+0x1e>
 801c994:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c998:	b94b      	cbnz	r3, 801c9ae <_raise_r+0x32>
 801c99a:	4620      	mov	r0, r4
 801c99c:	f000 f830 	bl	801ca00 <_getpid_r>
 801c9a0:	462a      	mov	r2, r5
 801c9a2:	4601      	mov	r1, r0
 801c9a4:	4620      	mov	r0, r4
 801c9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c9aa:	f000 b817 	b.w	801c9dc <_kill_r>
 801c9ae:	2b01      	cmp	r3, #1
 801c9b0:	d00a      	beq.n	801c9c8 <_raise_r+0x4c>
 801c9b2:	1c59      	adds	r1, r3, #1
 801c9b4:	d103      	bne.n	801c9be <_raise_r+0x42>
 801c9b6:	2316      	movs	r3, #22
 801c9b8:	6003      	str	r3, [r0, #0]
 801c9ba:	2001      	movs	r0, #1
 801c9bc:	e7e7      	b.n	801c98e <_raise_r+0x12>
 801c9be:	2400      	movs	r4, #0
 801c9c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c9c4:	4628      	mov	r0, r5
 801c9c6:	4798      	blx	r3
 801c9c8:	2000      	movs	r0, #0
 801c9ca:	e7e0      	b.n	801c98e <_raise_r+0x12>

0801c9cc <raise>:
 801c9cc:	4b02      	ldr	r3, [pc, #8]	; (801c9d8 <raise+0xc>)
 801c9ce:	4601      	mov	r1, r0
 801c9d0:	6818      	ldr	r0, [r3, #0]
 801c9d2:	f7ff bfd3 	b.w	801c97c <_raise_r>
 801c9d6:	bf00      	nop
 801c9d8:	20000020 	.word	0x20000020

0801c9dc <_kill_r>:
 801c9dc:	b538      	push	{r3, r4, r5, lr}
 801c9de:	4d07      	ldr	r5, [pc, #28]	; (801c9fc <_kill_r+0x20>)
 801c9e0:	2300      	movs	r3, #0
 801c9e2:	4604      	mov	r4, r0
 801c9e4:	4608      	mov	r0, r1
 801c9e6:	4611      	mov	r1, r2
 801c9e8:	602b      	str	r3, [r5, #0]
 801c9ea:	f7e4 f9e5 	bl	8000db8 <_kill>
 801c9ee:	1c43      	adds	r3, r0, #1
 801c9f0:	d102      	bne.n	801c9f8 <_kill_r+0x1c>
 801c9f2:	682b      	ldr	r3, [r5, #0]
 801c9f4:	b103      	cbz	r3, 801c9f8 <_kill_r+0x1c>
 801c9f6:	6023      	str	r3, [r4, #0]
 801c9f8:	bd38      	pop	{r3, r4, r5, pc}
 801c9fa:	bf00      	nop
 801c9fc:	200106a4 	.word	0x200106a4

0801ca00 <_getpid_r>:
 801ca00:	f7e4 b9d2 	b.w	8000da8 <_getpid>

0801ca04 <_init>:
 801ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca06:	bf00      	nop
 801ca08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ca0a:	bc08      	pop	{r3}
 801ca0c:	469e      	mov	lr, r3
 801ca0e:	4770      	bx	lr

0801ca10 <_fini>:
 801ca10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca12:	bf00      	nop
 801ca14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ca16:	bc08      	pop	{r3}
 801ca18:	469e      	mov	lr, r3
 801ca1a:	4770      	bx	lr
