
FW_frtos_mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c86c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000438c  0801ca6c  0801ca6c  0002ca6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020df8  08020df8  00040084  2**0
                  CONTENTS
  4 .ARM          00000008  08020df8  08020df8  00030df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020e00  08020e00  00040084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020e00  08020e00  00030e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020e04  08020e04  00030e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08020e08  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010638  20000084  08020e8c  00040084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200106bc  08020e8c  000406bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005b58b  00000000  00000000  000400b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000aa21  00000000  00000000  0009b63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bc8  00000000  00000000  000a6060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a58  00000000  00000000  000a8c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dc4c  00000000  00000000  000ab680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046b15  00000000  00000000  000e92cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001275ca  00000000  00000000  0012fde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002573ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bcc0  00000000  00000000  00257400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	0801ca54 	.word	0x0801ca54

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	0801ca54 	.word	0x0801ca54

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	//HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);


}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <vApplicationGetIdleTaskMemory+0x2c>)
 8000630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <vApplicationGetIdleTaskMemory+0x30>)
 8000636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	200000a0 	.word	0x200000a0
 8000650:	200000f4 	.word	0x200000f4

08000654 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_FREERTOS_Init+0x30>)
 800065c:	1d3c      	adds	r4, r7, #4
 800065e:	461d      	mov	r5, r3
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f005 fb0e 	bl	8005c92 <osThreadCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a03      	ldr	r2, [pc, #12]	; (8000688 <MX_FREERTOS_Init+0x34>)
 800067a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bdb0      	pop	{r4, r5, r7, pc}
 8000684:	0801caa0 	.word	0x0801caa0
 8000688:	20008c38 	.word	0x20008c38

0800068c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b090      	sub	sp, #64	; 0x40
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000694:	f004 fe2a 	bl	80052ec <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  	osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE); //subscribe task
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <StartDefaultTask+0x6c>)
 800069a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE); //publish task
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <StartDefaultTask+0x70>)
 80006ae:	f107 0408 	add.w	r4, r7, #8
 80006b2:	461d      	mov	r5, r3
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 80006c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 fae3 	bl	8005c92 <osThreadCreate>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <StartDefaultTask+0x74>)
 80006d0:	6013      	str	r3, [r2, #0]
  	mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f005 fada 	bl	8005c92 <osThreadCreate>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <StartDefaultTask+0x78>)
 80006e2:	6013      	str	r3, [r2, #0]

  	/* Infinite loop */
  	for(;;)
  	{
  		HAL_GPIO_TogglePin(GPIOB, LD1_Pin); //toggle_led
 80006e4:	2101      	movs	r1, #1
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <StartDefaultTask+0x7c>)
 80006e8:	f002 f9d3 	bl	8002a92 <HAL_GPIO_TogglePin>
  		osDelay(500);
 80006ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f0:	f005 fb1b 	bl	8005d2a <osDelay>
  		HAL_GPIO_TogglePin(GPIOB, LD1_Pin); //toggle_led
 80006f4:	e7f6      	b.n	80006e4 <StartDefaultTask+0x58>
 80006f6:	bf00      	nop
 80006f8:	0801cabc 	.word	0x0801cabc
 80006fc:	0801cad8 	.word	0x0801cad8
 8000700:	200098b8 	.word	0x200098b8
 8000704:	200094b4 	.word	0x200094b4
 8000708:	40020400 	.word	0x40020400

0800070c <MqttClientSubTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MqttClientSubTask(void const *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MqttClientSubTask+0x68>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d007      	beq.n	800072c <MqttClientSubTask+0x20>
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MqttClientSubTask+0x68>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <MqttClientSubTask+0x20>
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MqttClientSubTask+0x68>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d104      	bne.n	8000736 <MqttClientSubTask+0x2a>
		{
			osDelay(1000);
 800072c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000730:	f005 fafb 	bl	8005d2a <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000734:	e7ee      	b.n	8000714 <MqttClientSubTask+0x8>
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 8000736:	4810      	ldr	r0, [pc, #64]	; (8000778 <MqttClientSubTask+0x6c>)
 8000738:	f01b f970 	bl	801ba1c <puts>
			break;
 800073c:	bf00      	nop
		}
	}

	while(1)
	{
		if(!mqttClient.isconnected)
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MqttClientSubTask+0x70>)
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10d      	bne.n	8000762 <MqttClientSubTask+0x56>
		{
			HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000746:	2180      	movs	r1, #128	; 0x80
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <MqttClientSubTask+0x74>)
 800074a:	f002 f9a2 	bl	8002a92 <HAL_GPIO_TogglePin>

			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <MqttClientSubTask+0x70>)
 8000750:	f01a f897 	bl	801a882 <MQTTDisconnect>
			MqttConnectBroker();
 8000754:	f000 f840 	bl	80007d8 <MqttConnectBroker>
			osDelay(1000);
 8000758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800075c:	f005 fae5 	bl	8005d2a <osDelay>
 8000760:	e7ed      	b.n	800073e <MqttClientSubTask+0x32>
		}
		else
		{
			MQTTYield(&mqttClient, 1000); //handle timer
 8000762:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MqttClientSubTask+0x70>)
 8000768:	f019 fdc4 	bl	801a2f4 <MQTTYield>
			osDelay(100);
 800076c:	2064      	movs	r0, #100	; 0x64
 800076e:	f005 fadc 	bl	8005d2a <osDelay>
		if(!mqttClient.isconnected)
 8000772:	e7e4      	b.n	800073e <MqttClientSubTask+0x32>
 8000774:	20009d9c 	.word	0x20009d9c
 8000778:	0801caf4 	.word	0x0801caf4
 800077c:	20008c3c 	.word	0x20008c3c
 8000780:	40020400 	.word	0x40020400

08000784 <MqttClientPubTask>:
		}
	}
}

void MqttClientPubTask(void const *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	const char* str = "MQTT message from STM32";
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MqttClientPubTask+0x44>)
 800078e:	61fb      	str	r3, [r7, #28]
	MQTTMessage message;

	while(1)
	{
		if(mqttClient.isconnected)
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MqttClientPubTask+0x48>)
 8000792:	6a1b      	ldr	r3, [r3, #32]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00d      	beq.n	80007b4 <MqttClientPubTask+0x30>
		{
			message.payload = (void*)str;
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	617b      	str	r3, [r7, #20]
			message.payloadlen = strlen(str);
 800079c:	69f8      	ldr	r0, [r7, #28]
 800079e:	f7ff fd59 	bl	8000254 <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	61bb      	str	r3, [r7, #24]

			MQTTPublish(&mqttClient, "test", &message); //publish a message
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	461a      	mov	r2, r3
 80007ac:	4908      	ldr	r1, [pc, #32]	; (80007d0 <MqttClientPubTask+0x4c>)
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <MqttClientPubTask+0x48>)
 80007b0:	f019 ffa1 	bl	801a6f6 <MQTTPublish>
		}
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 80007b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MqttClientPubTask+0x50>)
 80007ba:	f002 f96a 	bl	8002a92 <HAL_GPIO_TogglePin>
		osDelay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c2:	f005 fab2 	bl	8005d2a <osDelay>
		if(mqttClient.isconnected)
 80007c6:	e7e3      	b.n	8000790 <MqttClientPubTask+0xc>
 80007c8:	0801cb08 	.word	0x0801cb08
 80007cc:	20008c3c 	.word	0x20008c3c
 80007d0:	0801cb20 	.word	0x0801cb20
 80007d4:	40020400 	.word	0x40020400

080007d8 <MqttConnectBroker>:
	}
}


int MqttConnectBroker()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af04      	add	r7, sp, #16
	int ret;

	NewNetwork(&net);
 80007de:	482e      	ldr	r0, [pc, #184]	; (8000898 <MqttConnectBroker+0xc0>)
 80007e0:	f01a f8e8 	bl	801a9b4 <NewNetwork>
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 80007e4:	f240 725b 	movw	r2, #1883	; 0x75b
 80007e8:	492c      	ldr	r1, [pc, #176]	; (800089c <MqttConnectBroker+0xc4>)
 80007ea:	482b      	ldr	r0, [pc, #172]	; (8000898 <MqttConnectBroker+0xc0>)
 80007ec:	f01a f8fe 	bl	801a9ec <ConnectNetwork>
 80007f0:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 80007f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d005      	beq.n	8000804 <MqttConnectBroker+0x2c>
	{
		printf("ConnectNetwork failed.\n");
 80007f8:	4829      	ldr	r0, [pc, #164]	; (80008a0 <MqttConnectBroker+0xc8>)
 80007fa:	f01b f90f 	bl	801ba1c <puts>
		return -1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000802:	e044      	b.n	800088e <MqttConnectBroker+0xb6>
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	9302      	str	r3, [sp, #8]
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MqttConnectBroker+0xcc>)
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MqttConnectBroker+0xd0>)
 8000816:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800081a:	491f      	ldr	r1, [pc, #124]	; (8000898 <MqttConnectBroker+0xc0>)
 800081c:	4823      	ldr	r0, [pc, #140]	; (80008ac <MqttConnectBroker+0xd4>)
 800081e:	f019 fa09 	bl	8019c34 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8000822:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <MqttConnectBroker+0xd8>)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4611      	mov	r1, r2
 8000828:	2258      	movs	r2, #88	; 0x58
 800082a:	4618      	mov	r0, r3
 800082c:	f01b f85a 	bl	801b8e4 <memcpy>
	data.willFlag = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	77fb      	strb	r3, [r7, #31]
	data.MQTTVersion = 3;
 8000834:	2303      	movs	r3, #3
 8000836:	733b      	strb	r3, [r7, #12]
	data.clientID.cstring = "STM32F7";
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MqttConnectBroker+0xdc>)
 800083a:	613b      	str	r3, [r7, #16]
	data.username.cstring = "STM32F7";
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MqttConnectBroker+0xdc>)
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
	data.password.cstring = "";
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MqttConnectBroker+0xe0>)
 8000842:	653b      	str	r3, [r7, #80]	; 0x50
	data.keepAliveInterval = 60;
 8000844:	233c      	movs	r3, #60	; 0x3c
 8000846:	83bb      	strh	r3, [r7, #28]
	data.cleansession = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	77bb      	strb	r3, [r7, #30]

	ret = MQTTConnect(&mqttClient, &data);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4816      	ldr	r0, [pc, #88]	; (80008ac <MqttConnectBroker+0xd4>)
 8000852:	f019 fe31 	bl	801a4b8 <MQTTConnect>
 8000856:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 8000858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800085a:	2b00      	cmp	r3, #0
 800085c:	d004      	beq.n	8000868 <MqttConnectBroker+0x90>
	{
		printf("MQTTConnect failed.\n");
 800085e:	4817      	ldr	r0, [pc, #92]	; (80008bc <MqttConnectBroker+0xe4>)
 8000860:	f01b f8dc 	bl	801ba1c <puts>
		return ret;
 8000864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000866:	e012      	b.n	800088e <MqttConnectBroker+0xb6>
	}

	ret = MQTTSubscribe(&mqttClient, "/status/get", QOS0, MqttMessageArrived);
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MqttConnectBroker+0xe8>)
 800086a:	2200      	movs	r2, #0
 800086c:	4915      	ldr	r1, [pc, #84]	; (80008c4 <MqttConnectBroker+0xec>)
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <MqttConnectBroker+0xd4>)
 8000870:	f019 ff2b 	bl	801a6ca <MQTTSubscribe>
 8000874:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 8000876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000878:	2b00      	cmp	r3, #0
 800087a:	d004      	beq.n	8000886 <MqttConnectBroker+0xae>
	{
		printf("MQTTSubscribe failed.\n");
 800087c:	4812      	ldr	r0, [pc, #72]	; (80008c8 <MqttConnectBroker+0xf0>)
 800087e:	f01b f8cd 	bl	801ba1c <puts>
		return ret;
 8000882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000884:	e003      	b.n	800088e <MqttConnectBroker+0xb6>
	}

	printf("MQTT_ConnectBroker O.K.\n");
 8000886:	4811      	ldr	r0, [pc, #68]	; (80008cc <MqttConnectBroker+0xf4>)
 8000888:	f01b f8c8 	bl	801ba1c <puts>
	return MQTT_SUCCESS;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3760      	adds	r7, #96	; 0x60
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20008ca4 	.word	0x20008ca4
 800089c:	0801cb28 	.word	0x0801cb28
 80008a0:	0801cb38 	.word	0x0801cb38
 80008a4:	200094b8 	.word	0x200094b8
 80008a8:	200090b4 	.word	0x200090b4
 80008ac:	20008c3c 	.word	0x20008c3c
 80008b0:	0801cbac 	.word	0x0801cbac
 80008b4:	0801cb50 	.word	0x0801cb50
 80008b8:	0801cb58 	.word	0x0801cb58
 80008bc:	0801cb5c 	.word	0x0801cb5c
 80008c0:	080008d1 	.word	0x080008d1
 80008c4:	0801cb70 	.word	0x0801cb70
 80008c8:	0801cb7c 	.word	0x0801cb7c
 80008cc:	0801cb94 	.word	0x0801cb94

080008d0 <MqttMessageArrived>:

void MqttMessageArrived(MessageData* msg)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); //toggle pin when new message arrived
 	MQTTMessage* message = msg->message;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
	memset(msgBuffer, 0, sizeof(msgBuffer));
 80008de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e2:	2100      	movs	r1, #0
 80008e4:	480a      	ldr	r0, [pc, #40]	; (8000910 <MqttMessageArrived+0x40>)
 80008e6:	f01b f80b 	bl	801b900 <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6899      	ldr	r1, [r3, #8]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4806      	ldr	r0, [pc, #24]	; (8000910 <MqttMessageArrived+0x40>)
 80008f6:	f01a fff5 	bl	801b8e4 <memcpy>

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <MqttMessageArrived+0x40>)
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <MqttMessageArrived+0x44>)
 8000904:	f01b f804 	bl	801b910 <iprintf>
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20008cb4 	.word	0x20008cb4
 8000914:	0801cc04 	.word	0x0801cc04

08000918 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	; 0x30
 800091c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b46      	ldr	r3, [pc, #280]	; (8000a48 <MX_GPIO_Init+0x130>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a45      	ldr	r2, [pc, #276]	; (8000a48 <MX_GPIO_Init+0x130>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <MX_GPIO_Init+0x130>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <MX_GPIO_Init+0x130>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a3f      	ldr	r2, [pc, #252]	; (8000a48 <MX_GPIO_Init+0x130>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <MX_GPIO_Init+0x130>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <MX_GPIO_Init+0x130>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a39      	ldr	r2, [pc, #228]	; (8000a48 <MX_GPIO_Init+0x130>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <MX_GPIO_Init+0x130>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <MX_GPIO_Init+0x130>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a33      	ldr	r2, [pc, #204]	; (8000a48 <MX_GPIO_Init+0x130>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <MX_GPIO_Init+0x130>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <MX_GPIO_Init+0x130>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a2d      	ldr	r2, [pc, #180]	; (8000a48 <MX_GPIO_Init+0x130>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <MX_GPIO_Init+0x130>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <MX_GPIO_Init+0x130>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a27      	ldr	r2, [pc, #156]	; (8000a48 <MX_GPIO_Init+0x130>)
 80009ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_GPIO_Init+0x130>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009c4:	4821      	ldr	r0, [pc, #132]	; (8000a4c <MX_GPIO_Init+0x134>)
 80009c6:	f002 f84b 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	4820      	ldr	r0, [pc, #128]	; (8000a50 <MX_GPIO_Init+0x138>)
 80009d0:	f002 f846 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_GPIO_Init+0x13c>)
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	481b      	ldr	r0, [pc, #108]	; (8000a58 <MX_GPIO_Init+0x140>)
 80009ea:	f001 fe8d 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ee:	f244 0381 	movw	r3, #16513	; 0x4081
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4811      	ldr	r0, [pc, #68]	; (8000a4c <MX_GPIO_Init+0x134>)
 8000a08:	f001 fe7e 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	480b      	ldr	r0, [pc, #44]	; (8000a50 <MX_GPIO_Init+0x138>)
 8000a24:	f001 fe70 	bl	8002708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_GPIO_Init+0x138>)
 8000a3c:	f001 fe64 	bl	8002708 <HAL_GPIO_Init>

}
 8000a40:	bf00      	nop
 8000a42:	3730      	adds	r7, #48	; 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40021800 	.word	0x40021800
 8000a54:	10110000 	.word	0x10110000
 8000a58:	40020800 	.word	0x40020800

08000a5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d013      	beq.n	8000a9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00b      	beq.n	8000a9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a84:	e000      	b.n	8000a88 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a86:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f9      	beq.n	8000a86 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ffc9 	bl	8000a5c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
  }
  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae8:	f000 fb57 	bl	800119a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aec:	f000 f810 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af0:	f7ff ff12 	bl	8000918 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000af4:	f000 fa2a 	bl	8000f4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000af8:	f000 fa9c 	bl	8001034 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("Don't remove this printf to prevent hard fault.\r\n");
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <main+0x28>)
 8000afe:	f01a ff8d 	bl	801ba1c <puts>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b02:	f7ff fda7 	bl	8000654 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b06:	f005 f8ad 	bl	8005c64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <main+0x26>
 8000b0c:	0801cc18 	.word	0x0801cc18

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0b8      	sub	sp, #224	; 0xe0
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b1a:	2234      	movs	r2, #52	; 0x34
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f01a feee 	bl	801b900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	2290      	movs	r2, #144	; 0x90
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f01a fedf 	bl	801b900 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b42:	f002 f909 	bl	8002d58 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <SystemClock_Config+0x114>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a36      	ldr	r2, [pc, #216]	; (8000c24 <SystemClock_Config+0x114>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <SystemClock_Config+0x114>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b5e:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <SystemClock_Config+0x118>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b66:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <SystemClock_Config+0x118>)
 8000b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <SystemClock_Config+0x118>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b80:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b96:	2304      	movs	r3, #4
 8000b98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b9c:	23a8      	movs	r3, #168	; 0xa8
 8000b9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 f8e0 	bl	8002d78 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bbe:	f000 f855 	bl	8000c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000be4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000be8:	2105      	movs	r1, #5
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 fb72 	bl	80032d4 <HAL_RCC_ClockConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000bf6:	f000 f839 	bl	8000c6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <SystemClock_Config+0x11c>)
 8000bfc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fd95 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000c18:	f000 f828 	bl	8000c6c <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	37e0      	adds	r7, #224	; 0xe0
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000
 8000c2c:	00200100 	.word	0x00200100

08000c30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d101      	bne.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c42:	f000 fab7 	bl	80011b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d104      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x2a>
      MilliTimer++;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3301      	adds	r3, #1
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c58:	6013      	str	r3, [r2, #0]
    }


  /* USER CODE END Callback 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40001000 	.word	0x40001000
 8000c68:	200106ac 	.word	0x200106ac

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	210f      	movs	r1, #15
 8000cb2:	f06f 0001 	mvn.w	r0, #1
 8000cb6:	f000 fb79 	bl	80013ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	2036      	movs	r0, #54	; 0x36
 8000cde:	f000 fb65 	bl	80013ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ce2:	2036      	movs	r0, #54	; 0x36
 8000ce4:	f000 fb7e 	bl	80013e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <HAL_InitTick+0xa0>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <HAL_InitTick+0xa0>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_InitTick+0xa0>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fce4 	bl	80036d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d10:	f002 fcba 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8000d14:	4603      	mov	r3, r0
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1c:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <HAL_InitTick+0xa4>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	0c9b      	lsrs	r3, r3, #18
 8000d24:	3b01      	subs	r3, #1
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_InitTick+0xa8>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <HAL_InitTick+0xac>)
 8000d2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_InitTick+0xa8>)
 8000d30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_InitTick+0xa8>)
 8000d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_InitTick+0xa8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_InitTick+0xa8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <HAL_InitTick+0xa8>)
 8000d4a:	f003 f91f 	bl	8003f8c <HAL_TIM_Base_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d104      	bne.n	8000d5e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d54:	4806      	ldr	r0, [pc, #24]	; (8000d70 <HAL_InitTick+0xa8>)
 8000d56:	f003 f97b 	bl	8004050 <HAL_TIM_Base_Start_IT>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3730      	adds	r7, #48	; 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	200098bc 	.word	0x200098bc
 8000d74:	40001000 	.word	0x40001000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM6_DAC_IRQHandler+0x10>)
 8000daa:	f003 f9c9 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200098bc 	.word	0x200098bc

08000db8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <ETH_IRQHandler+0x10>)
 8000dbe:	f000 ff01 	bl	8001bc4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000b6b0 	.word	0x2000b6b0

08000dcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	return 1;
 8000dd0:	2301      	movs	r3, #1
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_kill>:

int _kill(int pid, int sig)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <_kill+0x20>)
 8000de8:	2216      	movs	r2, #22
 8000dea:	601a      	str	r2, [r3, #0]
	return -1;
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	200106a4 	.word	0x200106a4

08000e00 <_exit>:

void _exit (int status)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ffe5 	bl	8000ddc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e12:	e7fe      	b.n	8000e12 <_exit+0x12>

08000e14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e00a      	b.n	8000e3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e26:	f3af 8000 	nop.w
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	b2ca      	uxtb	r2, r1
 8000e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dbf0      	blt.n	8000e26 <_read+0x12>
	}

return len;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	return -1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e76:	605a      	str	r2, [r3, #4]
	return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_isatty>:

int _isatty(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d205      	bcs.n	8000ef4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <_sbrk+0x6c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20080000 	.word	0x20080000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	200008f4 	.word	0x200008f4
 8000f20:	200106c0 	.word	0x200106c0
 8000f24:	200106a4 	.word	0x200106a4

08000f28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <MX_USART3_UART_Init+0x5c>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_USART3_UART_Init+0x58>)
 8000f90:	f003 fadc 	bl	800454c <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f7ff fe67 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20009908 	.word	0x20009908
 8000fa8:	40004800 	.word	0x40004800

08000fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_UART_MspInit+0x7c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d128      	bne.n	8001020 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_UART_MspInit+0x80>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ffe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001010:	2307      	movs	r3, #7
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_UART_MspInit+0x84>)
 800101c:	f001 fb74 	bl	8002708 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40004800 	.word	0x40004800
 800102c:	40023800 	.word	0x40023800
 8001030:	40020c00 	.word	0x40020c00

08001034 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800103e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001042:	2206      	movs	r2, #6
 8001044:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001048:	2202      	movs	r2, #2
 800104a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001054:	2202      	movs	r2, #2
 8001056:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800105a:	2201      	movs	r2, #1
 800105c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800106c:	2201      	movs	r2, #1
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001078:	f001 fd25 	bl	8002ac6 <HAL_PCD_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001082:	f7ff fdf3 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000998c 	.word	0x2000998c

08001090 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b0:	d141      	bne.n	8001136 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <HAL_PCD_MspInit+0xb0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a22      	ldr	r2, [pc, #136]	; (8001140 <HAL_PCD_MspInit+0xb0>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_PCD_MspInit+0xb0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010dc:	230a      	movs	r3, #10
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4817      	ldr	r0, [pc, #92]	; (8001144 <HAL_PCD_MspInit+0xb4>)
 80010e8:	f001 fb0e 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4810      	ldr	r0, [pc, #64]	; (8001144 <HAL_PCD_MspInit+0xb4>)
 8001102:	f001 fb01 	bl	8002708 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_PCD_MspInit+0xb0>)
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <HAL_PCD_MspInit+0xb0>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	6353      	str	r3, [r2, #52]	; 0x34
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_PCD_MspInit+0xb0>)
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_PCD_MspInit+0xb0>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_PCD_MspInit+0xb0>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_PCD_MspInit+0xb0>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800114e:	490e      	ldr	r1, [pc, #56]	; (8001188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001164:	4c0b      	ldr	r4, [pc, #44]	; (8001194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001172:	f7ff fed9 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f01a fb83 	bl	801b880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff fcb3 	bl	8000ae4 <main>
  bx  lr    
 800117e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800118c:	08020e08 	.word	0x08020e08
  ldr r2, =_sbss
 8001190:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001194:	200106bc 	.word	0x200106bc

08001198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>

0800119a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 f8f9 	bl	8001396 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff fd8f 	bl	8000cc8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011aa:	f7ff fd65 	bl	8000c78 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20009d90 	.word	0x20009d90

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20009d90 	.word	0x20009d90

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff ffee 	bl	80011dc <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_Delay+0x44>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121a:	bf00      	nop
 800121c:	f7ff ffde 	bl	80011dc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008

0800123c <__NVIC_SetPriorityGrouping>:
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	4313      	orrs	r3, r2
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	05fa0000 	.word	0x05fa0000

08001284 <__NVIC_GetPriorityGrouping>:
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff4c 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013be:	f7ff ff61 	bl	8001284 <__NVIC_GetPriorityGrouping>
 80013c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	68b9      	ldr	r1, [r7, #8]
 80013c8:	6978      	ldr	r0, [r7, #20]
 80013ca:	f7ff ffb1 	bl	8001330 <NVIC_EncodePriority>
 80013ce:	4602      	mov	r2, r0
 80013d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff80 	bl	80012dc <__NVIC_SetPriority>
}
 80013dc:	bf00      	nop
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff54 	bl	80012a0 <__NVIC_EnableIRQ>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001410:	4ba9      	ldr	r3, [pc, #676]	; (80016b8 <HAL_ETH_Init+0x2b8>)
 8001412:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e181      	b.n	800172a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f003 ffc6 	bl	80053cc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001440:	4b9e      	ldr	r3, [pc, #632]	; (80016bc <HAL_ETH_Init+0x2bc>)
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	4a9d      	ldr	r2, [pc, #628]	; (80016bc <HAL_ETH_Init+0x2bc>)
 8001446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144a:	6453      	str	r3, [r2, #68]	; 0x44
 800144c:	4b9b      	ldr	r3, [pc, #620]	; (80016bc <HAL_ETH_Init+0x2bc>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001458:	4b99      	ldr	r3, [pc, #612]	; (80016c0 <HAL_ETH_Init+0x2c0>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a98      	ldr	r2, [pc, #608]	; (80016c0 <HAL_ETH_Init+0x2c0>)
 800145e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001462:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001464:	4b96      	ldr	r3, [pc, #600]	; (80016c0 <HAL_ETH_Init+0x2c0>)
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4994      	ldr	r1, [pc, #592]	; (80016c0 <HAL_ETH_Init+0x2c0>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0201 	orr.w	r2, r2, #1
 8001484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001488:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800148a:	f7ff fea7 	bl	80011dc <HAL_GetTick>
 800148e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001490:	e011      	b.n	80014b6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001492:	f7ff fea3 	bl	80011dc <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014a0:	d909      	bls.n	80014b6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2203      	movs	r2, #3
 80014a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e139      	b.n	800172a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1e4      	bne.n	8001492 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f023 031c 	bic.w	r3, r3, #28
 80014d6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014d8:	f002 f8ca 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80014dc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	4a78      	ldr	r2, [pc, #480]	; (80016c4 <HAL_ETH_Init+0x2c4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d908      	bls.n	80014f8 <HAL_ETH_Init+0xf8>
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4a77      	ldr	r2, [pc, #476]	; (80016c8 <HAL_ETH_Init+0x2c8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d804      	bhi.n	80014f8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	e027      	b.n	8001548 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	4a73      	ldr	r2, [pc, #460]	; (80016c8 <HAL_ETH_Init+0x2c8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d908      	bls.n	8001512 <HAL_ETH_Init+0x112>
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	4a6d      	ldr	r2, [pc, #436]	; (80016b8 <HAL_ETH_Init+0x2b8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d204      	bcs.n	8001512 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f043 030c 	orr.w	r3, r3, #12
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	e01a      	b.n	8001548 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4a68      	ldr	r2, [pc, #416]	; (80016b8 <HAL_ETH_Init+0x2b8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d303      	bcc.n	8001522 <HAL_ETH_Init+0x122>
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4a6b      	ldr	r2, [pc, #428]	; (80016cc <HAL_ETH_Init+0x2cc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d911      	bls.n	8001546 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4a69      	ldr	r2, [pc, #420]	; (80016cc <HAL_ETH_Init+0x2cc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d908      	bls.n	800153c <HAL_ETH_Init+0x13c>
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4a68      	ldr	r2, [pc, #416]	; (80016d0 <HAL_ETH_Init+0x2d0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d804      	bhi.n	800153c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e005      	b.n	8001548 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	e000      	b.n	8001548 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001546:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001550:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001554:	2100      	movs	r1, #0
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 fc17 	bl	8001d8a <HAL_ETH_WritePHYRegister>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001566:	6939      	ldr	r1, [r7, #16]
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fdcd 	bl	8002108 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e0d7      	b.n	800172a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800157a:	20ff      	movs	r0, #255	; 0xff
 800157c:	f7ff fe3a 	bl	80011f4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80a5 	beq.w	80016d4 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800158a:	f7ff fe27 	bl	80011dc <HAL_GetTick>
 800158e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	461a      	mov	r2, r3
 8001596:	2101      	movs	r1, #1
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 fb8e 	bl	8001cba <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800159e:	f7ff fe1d 	bl	80011dc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d90f      	bls.n	80015d0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015b4:	6939      	ldr	r1, [r7, #16]
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fda6 	bl	8002108 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0ac      	b.n	800172a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0da      	beq.n	8001590 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015de:	2100      	movs	r1, #0
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 fbd2 	bl	8001d8a <HAL_ETH_WritePHYRegister>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00b      	beq.n	8001604 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015f0:	6939      	ldr	r1, [r7, #16]
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fd88 	bl	8002108 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001600:	2301      	movs	r3, #1
 8001602:	e092      	b.n	800172a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff fdea 	bl	80011dc <HAL_GetTick>
 8001608:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	461a      	mov	r2, r3
 8001610:	2101      	movs	r1, #1
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fb51 	bl	8001cba <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001618:	f7ff fde0 	bl	80011dc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d90f      	bls.n	800164a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800162e:	6939      	ldr	r1, [r7, #16]
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fd69 	bl	8002108 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e06f      	b.n	800172a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f003 0320 	and.w	r3, r3, #32
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0da      	beq.n	800160a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	461a      	mov	r2, r3
 800165a:	2110      	movs	r1, #16
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 fb2c 	bl	8001cba <HAL_ETH_ReadPHYRegister>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00b      	beq.n	8001680 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800166c:	6939      	ldr	r1, [r7, #16]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fd4a 	bl	8002108 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800167c:	2301      	movs	r3, #1
 800167e:	e054      	b.n	800172a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d004      	beq.n	8001694 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	e002      	b.n	800169a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	e035      	b.n	8001718 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	e030      	b.n	8001718 <HAL_ETH_Init+0x318>
 80016b6:	bf00      	nop
 80016b8:	03938700 	.word	0x03938700
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40013800 	.word	0x40013800
 80016c4:	01312cff 	.word	0x01312cff
 80016c8:	02160ebf 	.word	0x02160ebf
 80016cc:	05f5e0ff 	.word	0x05f5e0ff
 80016d0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	085b      	lsrs	r3, r3, #1
 80016e2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fb4c 	bl	8001d8a <HAL_ETH_WritePHYRegister>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00b      	beq.n	8001710 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016fc:	6939      	ldr	r1, [r7, #16]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fd02 	bl	8002108 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e00c      	b.n	800172a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001710:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001714:	f7ff fd6e 	bl	80011f4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001718:	6939      	ldr	r1, [r7, #16]
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 fcf4 	bl	8002108 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop

08001734 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_ETH_DMATxDescListInit+0x20>
 8001750:	2302      	movs	r3, #2
 8001752:	e052      	b.n	80017fa <HAL_ETH_DMATxDescListInit+0xc6>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	e030      	b.n	80017d2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	015b      	lsls	r3, r3, #5
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	4413      	add	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001780:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	461a      	mov	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d105      	bne.n	80017aa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d208      	bcs.n	80017c6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3301      	adds	r3, #1
 80017b8:	015b      	lsls	r3, r3, #5
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	4413      	add	r3, r2
 80017be:	461a      	mov	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	e002      	b.n	80017cc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d3ca      	bcc.n	8001770 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6819      	ldr	r1, [r3, #0]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f241 0310 	movw	r3, #4112	; 0x1010
 80017e4:	440b      	add	r3, r1
 80017e6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001806:	b480      	push	{r7}
 8001808:	b087      	sub	sp, #28
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_ETH_DMARxDescListInit+0x20>
 8001822:	2302      	movs	r3, #2
 8001824:	e056      	b.n	80018d4 <HAL_ETH_DMARxDescListInit+0xce>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2202      	movs	r2, #2
 8001832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e034      	b.n	80018ac <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	015b      	lsls	r3, r3, #5
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	4413      	add	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001852:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800185a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	461a      	mov	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3b01      	subs	r3, #1
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	429a      	cmp	r2, r3
 800188c:	d208      	bcs.n	80018a0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	015b      	lsls	r3, r3, #5
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	4413      	add	r3, r2
 8001898:	461a      	mov	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	e002      	b.n	80018a6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3c6      	bcc.n	8001842 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	f241 030c 	movw	r3, #4108	; 0x100c
 80018be:	440b      	add	r3, r1
 80018c0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_ETH_TransmitFrame+0x24>
 8001900:	2302      	movs	r3, #2
 8001902:	e0cd      	b.n	8001aa0 <HAL_ETH_TransmitFrame+0x1c0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800192a:	2301      	movs	r3, #1
 800192c:	e0b8      	b.n	8001aa0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	da09      	bge.n	800194c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2212      	movs	r2, #18
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0a9      	b.n	8001aa0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001952:	4293      	cmp	r3, r2
 8001954:	d915      	bls.n	8001982 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	4a54      	ldr	r2, [pc, #336]	; (8001aac <HAL_ETH_TransmitFrame+0x1cc>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0a9b      	lsrs	r3, r3, #10
 8001960:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	4b51      	ldr	r3, [pc, #324]	; (8001aac <HAL_ETH_TransmitFrame+0x1cc>)
 8001966:	fba3 1302 	umull	r1, r3, r3, r2
 800196a:	0a9b      	lsrs	r3, r3, #10
 800196c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e001      	b.n	8001986 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001982:	2301      	movs	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d11c      	bne.n	80019c6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800199a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019a6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019b6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019c4:	e04b      	b.n	8001a5e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e044      	b.n	8001a56 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019da:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019f0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019fa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d116      	bne.n	8001a34 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a14:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <HAL_ETH_TransmitFrame+0x1d0>)
 8001a1a:	fb02 f203 	mul.w	r2, r2, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	4413      	add	r3, r2
 8001a22:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a26:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a32:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a42:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	3301      	adds	r3, #1
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d3b6      	bcc.n	80019cc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a66:	4413      	add	r3, r2
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a88:	4413      	add	r3, r2
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	ac02b00b 	.word	0xac02b00b
 8001ab0:	fffffa0c 	.word	0xfffffa0c

08001ab4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e074      	b.n	8001bb8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ade:	e05a      	b.n	8001b96 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af4:	d10d      	bne.n	8001b12 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b10:	e041      	b.n	8001b96 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10b      	bne.n	8001b38 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	461a      	mov	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
 8001b36:	e02e      	b.n	8001b96 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d103      	bne.n	8001b5a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b66:	1f1a      	subs	r2, r3, #4
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e010      	b.n	8001bb8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db02      	blt.n	8001ba6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d99c      	bls.n	8001ae0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bd4:	4413      	add	r3, r2
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	d112      	bne.n	8001c06 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f003 fcb3 	bl	800554c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bee:	4413      	add	r3, r2
 8001bf0:	2240      	movs	r2, #64	; 0x40
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c04:	e01b      	b.n	8001c3e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d111      	bne.n	8001c3e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f839 	bl	8001c92 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c28:	4413      	add	r3, r2
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c46:	4413      	add	r3, r2
 8001c48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c4c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c56:	4413      	add	r3, r2
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c62:	d112      	bne.n	8001c8a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f81e 	bl	8001ca6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c72:	4413      	add	r3, r2
 8001c74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c78:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b82      	cmp	r3, #130	; 0x82
 8001cda:	d101      	bne.n	8001ce0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e050      	b.n	8001d82 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2282      	movs	r2, #130	; 0x82
 8001ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 031c 	and.w	r3, r3, #28
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8a1b      	ldrh	r3, [r3, #16]
 8001cfc:	02db      	lsls	r3, r3, #11
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d06:	897b      	ldrh	r3, [r7, #10]
 8001d08:	019b      	lsls	r3, r3, #6
 8001d0a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f023 0302 	bic.w	r3, r3, #2
 8001d1a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d2c:	f7ff fa56 	bl	80011dc <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d32:	e015      	b.n	8001d60 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d34:	f7ff fa52 	bl	80011dc <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d42:	d309      	bcc.n	8001d58 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e014      	b.n	8001d82 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1e4      	bne.n	8001d34 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	460b      	mov	r3, r1
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b42      	cmp	r3, #66	; 0x42
 8001daa:	d101      	bne.n	8001db0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
 8001dae:	e04e      	b.n	8001e4e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2242      	movs	r2, #66	; 0x42
 8001db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 031c 	and.w	r3, r3, #28
 8001dc6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8a1b      	ldrh	r3, [r3, #16]
 8001dcc:	02db      	lsls	r3, r3, #11
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e06:	f7ff f9e9 	bl	80011dc <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e0c:	e015      	b.n	8001e3a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e0e:	f7ff f9e5 	bl	80011dc <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1c:	d309      	bcc.n	8001e32 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e00d      	b.n	8001e4e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e4      	bne.n	8001e0e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_ETH_Start+0x16>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e01f      	b.n	8001eac <HAL_ETH_Start+0x56>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fb45 	bl	800250c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fb7c 	bl	8002580 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fc13 	bl	80026b4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fbb0 	bl	80025f4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fbdd 	bl	8002654 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_ETH_Stop+0x16>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e01f      	b.n	8001f0a <HAL_ETH_Stop+0x56>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fba2 	bl	8002624 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fbcf 	bl	8002684 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fb67 	bl	80025ba <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fbe1 	bl	80026b4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fb27 	bl	8002546 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_ETH_ConfigMAC+0x1c>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e0e4      	b.n	80020fa <HAL_ETH_ConfigMAC+0x1e6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80b1 	beq.w	80020aa <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4b6c      	ldr	r3, [pc, #432]	; (8002104 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f60:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f66:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f6c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f72:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f78:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f7e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f84:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f8a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001f90:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001f96:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001f9c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001fa2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff f91a 	bl	80011f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fd0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001fd6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001fdc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001fe2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001fe8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001fee:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001ffa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ffc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002006:	2001      	movs	r0, #1
 8002008:	f7ff f8f4 	bl	80011f4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800201c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002026:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002044:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800204a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002050:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002056:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800205c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002074:	2001      	movs	r0, #1
 8002076:	f7ff f8bd 	bl	80011f4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff f8aa 	bl	80011f4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	61da      	str	r2, [r3, #28]
 80020a8:	e01e      	b.n	80020e8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020b8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020da:	2001      	movs	r0, #1
 80020dc:	f7ff f88a 	bl	80011f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	ff20810f 	.word	0xff20810f

08002108 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b0b0      	sub	sp, #192	; 0xc0
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002124:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002136:	2300      	movs	r3, #0
 8002138:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800214e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002152:	663b      	str	r3, [r7, #96]	; 0x60
 8002154:	e001      	b.n	800215a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800215a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002164:	2300      	movs	r3, #0
 8002166:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002174:	2340      	movs	r3, #64	; 0x40
 8002176:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800217e:	2300      	movs	r3, #0
 8002180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80021dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e0:	4bab      	ldr	r3, [pc, #684]	; (8002490 <ETH_MACDMAConfig+0x388>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80021ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021ec:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80021ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80021f0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80021f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80021f4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80021fa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80021fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80021fe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002202:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002208:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800220a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800220c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800220e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002210:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002214:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002218:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800221a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800221c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800221e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002230:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800223c:	2001      	movs	r0, #1
 800223e:	f7fe ffd9 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800224a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800224c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800224e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002250:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002254:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002256:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800225a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800225c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002260:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002262:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002266:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800226c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002270:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002278:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800227a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002286:	2001      	movs	r0, #1
 8002288:	f7fe ffb4 	bl	80011f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002294:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800229e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022a8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80022b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022bc:	4013      	ands	r3, r2
 80022be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022c6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022cc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022d2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022d8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022de:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80022e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80022e4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002304:	2001      	movs	r0, #1
 8002306:	f7fe ff75 	bl	80011f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002312:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002314:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002318:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800232e:	2001      	movs	r0, #1
 8002330:	f7fe ff60 	bl	80011f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800233c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002346:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800234c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002350:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002362:	2304      	movs	r3, #4
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800236c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002372:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800237c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002382:	2300      	movs	r3, #0
 8002384:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002386:	2300      	movs	r3, #0
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002392:	4413      	add	r3, r2
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800239a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <ETH_MACDMAConfig+0x38c>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023a6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023a8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023aa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023ac:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023ae:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023b0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023b2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023b4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80023b6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80023b8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80023ba:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80023bc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80023be:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80023c2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023c6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	f241 0318 	movw	r3, #4120	; 0x1018
 80023da:	4413      	add	r3, r2
 80023dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f241 0318 	movw	r3, #4120	; 0x1018
 80023ea:	4413      	add	r3, r2
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f7fe fefe 	bl	80011f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002400:	4413      	add	r3, r2
 8002402:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002406:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800240c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002410:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002414:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002418:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800241a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800241e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002422:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800242c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002430:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002440:	2001      	movs	r0, #1
 8002442:	f7fe fed7 	bl	80011f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002452:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10d      	bne.n	8002478 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	f241 031c 	movw	r3, #4124	; 0x101c
 8002464:	4413      	add	r3, r2
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6811      	ldr	r1, [r2, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <ETH_MACDMAConfig+0x390>)
 800246e:	431a      	orrs	r2, r3
 8002470:	f241 031c 	movw	r3, #4124	; 0x101c
 8002474:	440b      	add	r3, r1
 8002476:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	461a      	mov	r2, r3
 800247e:	2100      	movs	r1, #0
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f80b 	bl	800249c <ETH_MACAddressConfig>
}
 8002486:	bf00      	nop
 8002488:	37c0      	adds	r7, #192	; 0xc0
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	ff20810f 	.word	0xff20810f
 8002494:	f8de3f23 	.word	0xf8de3f23
 8002498:	00010040 	.word	0x00010040

0800249c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3305      	adds	r3, #5
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	3204      	adds	r2, #4
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <ETH_MACAddressConfig+0x68>)
 80024be:	4413      	add	r3, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3303      	adds	r3, #3
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	061a      	lsls	r2, r3, #24
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3302      	adds	r3, #2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	4313      	orrs	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <ETH_MACAddressConfig+0x6c>)
 80024ee:	4413      	add	r3, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	6013      	str	r3, [r2, #0]
}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40028040 	.word	0x40028040
 8002508:	40028044 	.word	0x40028044

0800250c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0208 	orr.w	r2, r2, #8
 8002526:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002530:	2001      	movs	r0, #1
 8002532:	f7fe fe5f 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	601a      	str	r2, [r3, #0]
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0208 	bic.w	r2, r2, #8
 8002560:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800256a:	2001      	movs	r0, #1
 800256c:	f7fe fe42 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0204 	orr.w	r2, r2, #4
 800259a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025a4:	2001      	movs	r0, #1
 80025a6:	f7fe fe25 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0204 	bic.w	r2, r2, #4
 80025d4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025de:	2001      	movs	r0, #1
 80025e0:	f7fe fe08 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	f241 0318 	movw	r3, #4120	; 0x1018
 8002604:	4413      	add	r3, r2
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6811      	ldr	r1, [r2, #0]
 800260c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002610:	f241 0318 	movw	r3, #4120	; 0x1018
 8002614:	440b      	add	r3, r1
 8002616:	601a      	str	r2, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	f241 0318 	movw	r3, #4120	; 0x1018
 8002634:	4413      	add	r3, r2
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6811      	ldr	r1, [r2, #0]
 800263c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002640:	f241 0318 	movw	r3, #4120	; 0x1018
 8002644:	440b      	add	r3, r1
 8002646:	601a      	str	r2, [r3, #0]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	f241 0318 	movw	r3, #4120	; 0x1018
 8002664:	4413      	add	r3, r2
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6811      	ldr	r1, [r2, #0]
 800266c:	f043 0202 	orr.w	r2, r3, #2
 8002670:	f241 0318 	movw	r3, #4120	; 0x1018
 8002674:	440b      	add	r3, r1
 8002676:	601a      	str	r2, [r3, #0]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	f241 0318 	movw	r3, #4120	; 0x1018
 8002694:	4413      	add	r3, r2
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6811      	ldr	r1, [r2, #0]
 800269c:	f023 0202 	bic.w	r2, r3, #2
 80026a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80026a4:	440b      	add	r3, r1
 80026a6:	601a      	str	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026c8:	4413      	add	r3, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6811      	ldr	r1, [r2, #0]
 80026d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026d8:	440b      	add	r3, r1
 80026da:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80026e4:	4413      	add	r3, r2
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ea:	2001      	movs	r0, #1
 80026ec:	f7fe fd82 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	f241 0318 	movw	r3, #4120	; 0x1018
 80026fa:	440b      	add	r3, r1
 80026fc:	601a      	str	r2, [r3, #0]
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	e175      	b.n	8002a14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002728:	2201      	movs	r2, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	f040 8164 	bne.w	8002a0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d00b      	beq.n	8002766 <HAL_GPIO_Init+0x5e>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800275a:	2b11      	cmp	r3, #17
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b12      	cmp	r3, #18
 8002764:	d130      	bne.n	80027c8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279c:	2201      	movs	r2, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 0201 	and.w	r2, r3, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x100>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b12      	cmp	r3, #18
 8002806:	d123      	bne.n	8002850 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	08da      	lsrs	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3208      	adds	r2, #8
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	69b9      	ldr	r1, [r7, #24]
 800284c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0203 	and.w	r2, r3, #3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80be 	beq.w	8002a0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_GPIO_Init+0x324>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a65      	ldr	r2, [pc, #404]	; (8002a2c <HAL_GPIO_Init+0x324>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <HAL_GPIO_Init+0x324>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028aa:	4a61      	ldr	r2, [pc, #388]	; (8002a30 <HAL_GPIO_Init+0x328>)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_GPIO_Init+0x32c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d037      	beq.n	8002946 <HAL_GPIO_Init+0x23e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a57      	ldr	r2, [pc, #348]	; (8002a38 <HAL_GPIO_Init+0x330>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d031      	beq.n	8002942 <HAL_GPIO_Init+0x23a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a56      	ldr	r2, [pc, #344]	; (8002a3c <HAL_GPIO_Init+0x334>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d02b      	beq.n	800293e <HAL_GPIO_Init+0x236>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a55      	ldr	r2, [pc, #340]	; (8002a40 <HAL_GPIO_Init+0x338>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d025      	beq.n	800293a <HAL_GPIO_Init+0x232>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a54      	ldr	r2, [pc, #336]	; (8002a44 <HAL_GPIO_Init+0x33c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01f      	beq.n	8002936 <HAL_GPIO_Init+0x22e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a53      	ldr	r2, [pc, #332]	; (8002a48 <HAL_GPIO_Init+0x340>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d019      	beq.n	8002932 <HAL_GPIO_Init+0x22a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a52      	ldr	r2, [pc, #328]	; (8002a4c <HAL_GPIO_Init+0x344>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x226>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a51      	ldr	r2, [pc, #324]	; (8002a50 <HAL_GPIO_Init+0x348>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x222>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a50      	ldr	r2, [pc, #320]	; (8002a54 <HAL_GPIO_Init+0x34c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x21e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4f      	ldr	r2, [pc, #316]	; (8002a58 <HAL_GPIO_Init+0x350>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x21a>
 800291e:	2309      	movs	r3, #9
 8002920:	e012      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002922:	230a      	movs	r3, #10
 8002924:	e010      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002926:	2308      	movs	r3, #8
 8002928:	e00e      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800292a:	2307      	movs	r3, #7
 800292c:	e00c      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800292e:	2306      	movs	r3, #6
 8002930:	e00a      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002932:	2305      	movs	r3, #5
 8002934:	e008      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002936:	2304      	movs	r3, #4
 8002938:	e006      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800293a:	2303      	movs	r3, #3
 800293c:	e004      	b.n	8002948 <HAL_GPIO_Init+0x240>
 800293e:	2302      	movs	r3, #2
 8002940:	e002      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_GPIO_Init+0x240>
 8002946:	2300      	movs	r3, #0
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f002 0203 	and.w	r2, r2, #3
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	4093      	lsls	r3, r2
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002958:	4935      	ldr	r1, [pc, #212]	; (8002a30 <HAL_GPIO_Init+0x328>)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	3302      	adds	r3, #2
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002966:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <HAL_GPIO_Init+0x354>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800298a:	4a34      	ldr	r2, [pc, #208]	; (8002a5c <HAL_GPIO_Init+0x354>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002990:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_GPIO_Init+0x354>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b4:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029de:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_GPIO_Init+0x354>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_GPIO_Init+0x354>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3301      	adds	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b0f      	cmp	r3, #15
 8002a18:	f67f ae86 	bls.w	8002728 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	3724      	adds	r7, #36	; 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020c00 	.word	0x40020c00
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40021400 	.word	0x40021400
 8002a4c:	40021800 	.word	0x40021800
 8002a50:	40021c00 	.word	0x40021c00
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40022400 	.word	0x40022400
 8002a5c:	40013c00 	.word	0x40013c00

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a7c:	e003      	b.n	8002a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	041a      	lsls	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	619a      	str	r2, [r3, #24]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aa4:	887a      	ldrh	r2, [r7, #2]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	041a      	lsls	r2, r3, #16
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	400b      	ands	r3, r1
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	619a      	str	r2, [r3, #24]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac8:	b08f      	sub	sp, #60	; 0x3c
 8002aca:	af0a      	add	r7, sp, #40	; 0x28
 8002acc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e116      	b.n	8002d06 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe facc 	bl	8001090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2203      	movs	r2, #3
 8002afc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 f988 	bl	8004e2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	687e      	ldr	r6, [r7, #4]
 8002b24:	466d      	mov	r5, sp
 8002b26:	f106 0410 	add.w	r4, r6, #16
 8002b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b3a:	1d33      	adds	r3, r6, #4
 8002b3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b3e:	6838      	ldr	r0, [r7, #0]
 8002b40:	f002 f91c 	bl	8004d7c <USB_CoreInit>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0d7      	b.n	8002d06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 f976 	bl	8004e4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	e04a      	b.n	8002bfe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	333d      	adds	r3, #61	; 0x3d
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	333c      	adds	r3, #60	; 0x3c
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	b298      	uxth	r0, r3
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3342      	adds	r3, #66	; 0x42
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	333f      	adds	r3, #63	; 0x3f
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3344      	adds	r3, #68	; 0x44
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3348      	adds	r3, #72	; 0x48
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3350      	adds	r3, #80	; 0x50
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3af      	bcc.n	8002b68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e044      	b.n	8002c98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	3301      	adds	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3b5      	bcc.n	8002c0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	687e      	ldr	r6, [r7, #4]
 8002caa:	466d      	mov	r5, sp
 8002cac:	f106 0410 	add.w	r4, r6, #16
 8002cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cc0:	1d33      	adds	r3, r6, #4
 8002cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cc4:	6838      	ldr	r0, [r7, #0]
 8002cc6:	f002 f8ed 	bl	8004ea4 <USB_DevInit>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e014      	b.n	8002d06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d102      	bne.n	8002cfa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f80b 	bl	8002d10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fa9f 	bl	8005242 <USB_DevDisconnect>

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	10000003 	.word	0x10000003

08002d58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40007000 	.word	0x40007000

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e29b      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8087 	beq.w	8002eaa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d9c:	4b96      	ldr	r3, [pc, #600]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d00c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da8:	4b93      	ldr	r3, [pc, #588]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d112      	bne.n	8002dda <HAL_RCC_OscConfig+0x62>
 8002db4:	4b90      	ldr	r3, [pc, #576]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc0:	d10b      	bne.n	8002dda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d06c      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x130>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d168      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e275      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x7a>
 8002de4:	4b84      	ldr	r3, [pc, #528]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a83      	ldr	r2, [pc, #524]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	e02e      	b.n	8002e50 <HAL_RCC_OscConfig+0xd8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x9c>
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b7c      	ldr	r3, [pc, #496]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7b      	ldr	r2, [pc, #492]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e01d      	b.n	8002e50 <HAL_RCC_OscConfig+0xd8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0xc0>
 8002e1e:	4b76      	ldr	r3, [pc, #472]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a75      	ldr	r2, [pc, #468]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b73      	ldr	r3, [pc, #460]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a72      	ldr	r2, [pc, #456]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0xd8>
 8002e38:	4b6f      	ldr	r3, [pc, #444]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6b      	ldr	r2, [pc, #428]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe f9c0 	bl	80011dc <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe f9bc 	bl	80011dc <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e229      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b61      	ldr	r3, [pc, #388]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0xe8>
 8002e7e:	e014      	b.n	8002eaa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe f9ac 	bl	80011dc <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fe f9a8 	bl	80011dc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e215      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9a:	4b57      	ldr	r3, [pc, #348]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x110>
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d069      	beq.n	8002f8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eb6:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec2:	4b4d      	ldr	r3, [pc, #308]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d11c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x190>
 8002ece:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x17a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e1e9      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	493d      	ldr	r1, [pc, #244]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	e040      	b.n	8002f8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d023      	beq.n	8002f58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f10:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a38      	ldr	r2, [pc, #224]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe f95e 	bl	80011dc <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f24:	f7fe f95a 	bl	80011dc <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1c7      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4929      	ldr	r1, [pc, #164]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
 8002f56:	e018      	b.n	8002f8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f58:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe f93a 	bl	80011dc <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fe f936 	bl	80011dc <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1a3      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d038      	beq.n	8003008 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d019      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fe f917 	bl	80011dc <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7fe f913 	bl	80011dc <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e180      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x23a>
 8002fd0:	e01a      	b.n	8003008 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd6:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fe f8fd 	bl	80011dc <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7fe f8f9 	bl	80011dc <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d903      	bls.n	8002ffc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e166      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
 8002ff8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	4b92      	ldr	r3, [pc, #584]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8002ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ee      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80a4 	beq.w	800315e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003016:	4b8c      	ldr	r3, [pc, #560]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10d      	bne.n	800303e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	4b89      	ldr	r3, [pc, #548]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	4a88      	ldr	r2, [pc, #544]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302c:	6413      	str	r3, [r2, #64]	; 0x40
 800302e:	4b86      	ldr	r3, [pc, #536]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303a:	2301      	movs	r3, #1
 800303c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303e:	4b83      	ldr	r3, [pc, #524]	; (800324c <HAL_RCC_OscConfig+0x4d4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d118      	bne.n	800307c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800304a:	4b80      	ldr	r3, [pc, #512]	; (800324c <HAL_RCC_OscConfig+0x4d4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7f      	ldr	r2, [pc, #508]	; (800324c <HAL_RCC_OscConfig+0x4d4>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003056:	f7fe f8c1 	bl	80011dc <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305e:	f7fe f8bd 	bl	80011dc <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b64      	cmp	r3, #100	; 0x64
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e12a      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003070:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x4d4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x31a>
 8003084:	4b70      	ldr	r3, [pc, #448]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a6f      	ldr	r2, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
 8003090:	e02d      	b.n	80030ee <HAL_RCC_OscConfig+0x376>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x33c>
 800309a:	4b6b      	ldr	r3, [pc, #428]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a6a      	ldr	r2, [pc, #424]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70
 80030a6:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	4a67      	ldr	r2, [pc, #412]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	6713      	str	r3, [r2, #112]	; 0x70
 80030b2:	e01c      	b.n	80030ee <HAL_RCC_OscConfig+0x376>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d10c      	bne.n	80030d6 <HAL_RCC_OscConfig+0x35e>
 80030bc:	4b62      	ldr	r3, [pc, #392]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4a61      	ldr	r2, [pc, #388]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6713      	str	r3, [r2, #112]	; 0x70
 80030c8:	4b5f      	ldr	r3, [pc, #380]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4a5e      	ldr	r2, [pc, #376]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6713      	str	r3, [r2, #112]	; 0x70
 80030d4:	e00b      	b.n	80030ee <HAL_RCC_OscConfig+0x376>
 80030d6:	4b5c      	ldr	r3, [pc, #368]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	4a5b      	ldr	r2, [pc, #364]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	6713      	str	r3, [r2, #112]	; 0x70
 80030e2:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	4a58      	ldr	r2, [pc, #352]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80030e8:	f023 0304 	bic.w	r3, r3, #4
 80030ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d015      	beq.n	8003122 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fe f871 	bl	80011dc <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe f86d 	bl	80011dc <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0d8      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003114:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0ee      	beq.n	80030fe <HAL_RCC_OscConfig+0x386>
 8003120:	e014      	b.n	800314c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe f85b 	bl	80011dc <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe f857 	bl	80011dc <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	; 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0c2      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003140:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ee      	bne.n	800312a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d105      	bne.n	800315e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80ae 	beq.w	80032c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003168:	4b37      	ldr	r3, [pc, #220]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d06d      	beq.n	8003250 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d14b      	bne.n	8003214 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317c:	4b32      	ldr	r3, [pc, #200]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a31      	ldr	r2, [pc, #196]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe f828 	bl	80011dc <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe f824 	bl	80011dc <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e091      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	4b29      	ldr	r3, [pc, #164]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	3b01      	subs	r3, #1
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	491b      	ldr	r1, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a18      	ldr	r2, [pc, #96]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fd fff6 	bl	80011dc <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fd fff2 	bl	80011dc <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e05f      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x47c>
 8003212:	e057      	b.n	80032c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0b      	ldr	r2, [pc, #44]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 800321a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800321e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fd ffdc 	bl	80011dc <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fd ffd8 	bl	80011dc <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e045      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_RCC_OscConfig+0x4d0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x4b0>
 8003246:	e03d      	b.n	80032c4 <HAL_RCC_OscConfig+0x54c>
 8003248:	40023800 	.word	0x40023800
 800324c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <HAL_RCC_OscConfig+0x558>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d030      	beq.n	80032c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d129      	bne.n	80032c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d122      	bne.n	80032c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003280:	4013      	ands	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003286:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003288:	4293      	cmp	r3, r2
 800328a:	d119      	bne.n	80032c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	3b01      	subs	r3, #1
 800329a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d10f      	bne.n	80032c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800

080032d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0d0      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d910      	bls.n	800331c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 020f 	bic.w	r2, r3, #15
 8003302:	4965      	ldr	r1, [pc, #404]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b8      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d020      	beq.n	800336a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003334:	4b59      	ldr	r3, [pc, #356]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 800333a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800333e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800334c:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003356:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003358:	4b50      	ldr	r3, [pc, #320]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	494d      	ldr	r1, [pc, #308]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d040      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d115      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e07f      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e073      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a6:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06b      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	4b39      	ldr	r3, [pc, #228]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4936      	ldr	r1, [pc, #216]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c8:	f7fd ff08 	bl	80011dc <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7fd ff04 	bl	80011dc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e053      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 020c 	and.w	r2, r3, #12
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d1eb      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d210      	bcs.n	8003428 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 020f 	bic.w	r2, r3, #15
 800340e:	4922      	ldr	r1, [pc, #136]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e032      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4916      	ldr	r1, [pc, #88]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	490e      	ldr	r1, [pc, #56]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003466:	f000 f821 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 800346a:	4602      	mov	r2, r0
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	490a      	ldr	r1, [pc, #40]	; (80034a0 <HAL_RCC_ClockConfig+0x1cc>)
 8003478:	5ccb      	ldrb	r3, [r1, r3]
 800347a:	fa22 f303 	lsr.w	r3, r2, r3
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fc1e 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023c00 	.word	0x40023c00
 800349c:	40023800 	.word	0x40023800
 80034a0:	08020a08 	.word	0x08020a08
 80034a4:	20000000 	.word	0x20000000
 80034a8:	20000004 	.word	0x20000004

080034ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	2300      	movs	r3, #0
 80034be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c4:	4b67      	ldr	r3, [pc, #412]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d00d      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x40>
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	f200 80bd 	bhi.w	8003650 <HAL_RCC_GetSysClockFreq+0x1a4>
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x34>
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034de:	e0b7      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e0:	4b61      	ldr	r3, [pc, #388]	; (8003668 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034e2:	60bb      	str	r3, [r7, #8]
      break;
 80034e4:	e0b7      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034e6:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80034e8:	60bb      	str	r3, [r7, #8]
      break;
 80034ea:	e0b4      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ec:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034f6:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d04d      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003502:	4b58      	ldr	r3, [pc, #352]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	461a      	mov	r2, r3
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	ea02 0800 	and.w	r8, r2, r0
 800351a:	ea03 0901 	and.w	r9, r3, r1
 800351e:	4640      	mov	r0, r8
 8003520:	4649      	mov	r1, r9
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	014b      	lsls	r3, r1, #5
 800352c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003530:	0142      	lsls	r2, r0, #5
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	ebb0 0008 	subs.w	r0, r0, r8
 800353a:	eb61 0109 	sbc.w	r1, r1, r9
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	018b      	lsls	r3, r1, #6
 8003548:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800354c:	0182      	lsls	r2, r0, #6
 800354e:	1a12      	subs	r2, r2, r0
 8003550:	eb63 0301 	sbc.w	r3, r3, r1
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	00d9      	lsls	r1, r3, #3
 800355e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003562:	00d0      	lsls	r0, r2, #3
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	eb12 0208 	adds.w	r2, r2, r8
 800356c:	eb43 0309 	adc.w	r3, r3, r9
 8003570:	f04f 0000 	mov.w	r0, #0
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	0259      	lsls	r1, r3, #9
 800357a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800357e:	0250      	lsls	r0, r2, #9
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	461a      	mov	r2, r3
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	f7fc febe 	bl	8000310 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e04a      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359e:	4b31      	ldr	r3, [pc, #196]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	099b      	lsrs	r3, r3, #6
 80035a4:	461a      	mov	r2, r3
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035ae:	f04f 0100 	mov.w	r1, #0
 80035b2:	ea02 0400 	and.w	r4, r2, r0
 80035b6:	ea03 0501 	and.w	r5, r3, r1
 80035ba:	4620      	mov	r0, r4
 80035bc:	4629      	mov	r1, r5
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	014b      	lsls	r3, r1, #5
 80035c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035cc:	0142      	lsls	r2, r0, #5
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	1b00      	subs	r0, r0, r4
 80035d4:	eb61 0105 	sbc.w	r1, r1, r5
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	018b      	lsls	r3, r1, #6
 80035e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035e6:	0182      	lsls	r2, r0, #6
 80035e8:	1a12      	subs	r2, r2, r0
 80035ea:	eb63 0301 	sbc.w	r3, r3, r1
 80035ee:	f04f 0000 	mov.w	r0, #0
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	00d9      	lsls	r1, r3, #3
 80035f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035fc:	00d0      	lsls	r0, r2, #3
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	1912      	adds	r2, r2, r4
 8003604:	eb45 0303 	adc.w	r3, r5, r3
 8003608:	f04f 0000 	mov.w	r0, #0
 800360c:	f04f 0100 	mov.w	r1, #0
 8003610:	0299      	lsls	r1, r3, #10
 8003612:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003616:	0290      	lsls	r0, r2, #10
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	461a      	mov	r2, r3
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f7fc fe72 	bl	8000310 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	3301      	adds	r3, #1
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	60bb      	str	r3, [r7, #8]
      break;
 800364e:	e002      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003652:	60bb      	str	r3, [r7, #8]
      break;
 8003654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003656:	68bb      	ldr	r3, [r7, #8]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	00f42400 	.word	0x00f42400
 800366c:	007a1200 	.word	0x007a1200

08003670 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCC_GetHCLKFreq+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000000 	.word	0x20000000

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800368c:	f7ff fff0 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	0a9b      	lsrs	r3, r3, #10
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	08020a18 	.word	0x08020a18

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036b4:	f7ff ffdc 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0b5b      	lsrs	r3, r3, #13
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	08020a18 	.word	0x08020a18

080036d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	220f      	movs	r2, #15
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0203 	and.w	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_RCC_GetClockConfig+0x5c>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <HAL_RCC_GetClockConfig+0x60>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 020f 	and.w	r2, r3, #15
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40023c00 	.word	0x40023c00

0800373c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d012      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003764:	4b69      	ldr	r3, [pc, #420]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a68      	ldr	r2, [pc, #416]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	4b66      	ldr	r3, [pc, #408]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	4964      	ldr	r1, [pc, #400]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003786:	2301      	movs	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d017      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003796:	4b5d      	ldr	r3, [pc, #372]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800379c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	4959      	ldr	r1, [pc, #356]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b4:	d101      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d017      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037d2:	4b4e      	ldr	r3, [pc, #312]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	494a      	ldr	r1, [pc, #296]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f0:	d101      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037f2:	2301      	movs	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037fe:	2301      	movs	r3, #1
 8003800:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800380e:	2301      	movs	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 808b 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003820:	4b3a      	ldr	r3, [pc, #232]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a39      	ldr	r2, [pc, #228]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
 800382c:	4b37      	ldr	r3, [pc, #220]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003838:	4b35      	ldr	r3, [pc, #212]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a34      	ldr	r2, [pc, #208]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800383e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003844:	f7fd fcca 	bl	80011dc <HAL_GetTick>
 8003848:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384c:	f7fd fcc6 	bl	80011dc <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e38f      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800385e:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800386a:	4b28      	ldr	r3, [pc, #160]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d035      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	429a      	cmp	r2, r3
 8003886:	d02e      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003888:	4b20      	ldr	r3, [pc, #128]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003890:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a1d      	ldr	r2, [pc, #116]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80038aa:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d114      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fd fc8e 	bl	80011dc <HAL_GetTick>
 80038c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c2:	e00a      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c4:	f7fd fc8a 	bl	80011dc <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e351      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0ee      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f2:	d111      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003902:	400b      	ands	r3, r1
 8003904:	4901      	ldr	r1, [pc, #4]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
 800390a:	e00b      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800390c:	40023800 	.word	0x40023800
 8003910:	40007000 	.word	0x40007000
 8003914:	0ffffcff 	.word	0x0ffffcff
 8003918:	4bb3      	ldr	r3, [pc, #716]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4ab2      	ldr	r2, [pc, #712]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800391e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003922:	6093      	str	r3, [r2, #8]
 8003924:	4bb0      	ldr	r3, [pc, #704]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	49ad      	ldr	r1, [pc, #692]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003932:	4313      	orrs	r3, r2
 8003934:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003942:	4ba9      	ldr	r3, [pc, #676]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003948:	4aa7      	ldr	r2, [pc, #668]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800394e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003952:	4ba5      	ldr	r3, [pc, #660]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003954:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	49a2      	ldr	r1, [pc, #648]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003970:	4b9d      	ldr	r3, [pc, #628]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397e:	499a      	ldr	r1, [pc, #616]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003992:	4b95      	ldr	r3, [pc, #596]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a0:	4991      	ldr	r1, [pc, #580]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039b4:	4b8c      	ldr	r3, [pc, #560]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c2:	4989      	ldr	r1, [pc, #548]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039d6:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	4980      	ldr	r1, [pc, #512]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039f8:	4b7b      	ldr	r3, [pc, #492]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	4978      	ldr	r1, [pc, #480]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a1a:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f023 020c 	bic.w	r2, r3, #12
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	496f      	ldr	r1, [pc, #444]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a3c:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	4967      	ldr	r1, [pc, #412]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a5e:	4b62      	ldr	r3, [pc, #392]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6c:	495e      	ldr	r1, [pc, #376]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a80:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8e:	4956      	ldr	r1, [pc, #344]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003aa2:	4b51      	ldr	r3, [pc, #324]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	494d      	ldr	r1, [pc, #308]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ac4:	4b48      	ldr	r3, [pc, #288]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	4945      	ldr	r1, [pc, #276]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ae6:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	493c      	ldr	r1, [pc, #240]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b08:	4b37      	ldr	r3, [pc, #220]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b16:	4934      	ldr	r1, [pc, #208]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d011      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b38:	492b      	ldr	r1, [pc, #172]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b78:	491b      	ldr	r1, [pc, #108]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b8c:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b9c:	4912      	ldr	r1, [pc, #72]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc0:	4909      	ldr	r1, [pc, #36]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00f      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	e002      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	4986      	ldr	r1, [pc, #536]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00b      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c00:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c10:	497d      	ldr	r1, [pc, #500]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d006      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80d6 	beq.w	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c2c:	4b76      	ldr	r3, [pc, #472]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a75      	ldr	r2, [pc, #468]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c38:	f7fd fad0 	bl	80011dc <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c40:	f7fd facc 	bl	80011dc <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e195      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c52:	4b6d      	ldr	r3, [pc, #436]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d021      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11d      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c72:	4b65      	ldr	r3, [pc, #404]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c80:	4b61      	ldr	r3, [pc, #388]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c86:	0e1b      	lsrs	r3, r3, #24
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	019a      	lsls	r2, r3, #6
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	071b      	lsls	r3, r3, #28
 8003ca6:	4958      	ldr	r1, [pc, #352]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d02e      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd8:	d129      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cda:	4b4b      	ldr	r3, [pc, #300]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ce8:	4b47      	ldr	r3, [pc, #284]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cee:	0f1b      	lsrs	r3, r3, #28
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	019a      	lsls	r2, r3, #6
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	061b      	lsls	r3, r3, #24
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	071b      	lsls	r3, r3, #28
 8003d0e:	493e      	ldr	r1, [pc, #248]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d16:	4b3c      	ldr	r3, [pc, #240]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d1c:	f023 021f 	bic.w	r2, r3, #31
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	3b01      	subs	r3, #1
 8003d26:	4938      	ldr	r1, [pc, #224]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01d      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d3a:	4b33      	ldr	r3, [pc, #204]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d40:	0e1b      	lsrs	r3, r3, #24
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d48:	4b2f      	ldr	r3, [pc, #188]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4e:	0f1b      	lsrs	r3, r3, #28
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	019a      	lsls	r2, r3, #6
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	071b      	lsls	r3, r3, #28
 8003d6e:	4926      	ldr	r1, [pc, #152]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d011      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	019a      	lsls	r2, r3, #6
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	491a      	ldr	r1, [pc, #104]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003da6:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db2:	f7fd fa13 	bl	80011dc <HAL_GetTick>
 8003db6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dba:	f7fd fa0f 	bl	80011dc <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b64      	cmp	r3, #100	; 0x64
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e0d8      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	f040 80ce 	bne.w	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dec:	f7fd f9f6 	bl	80011dc <HAL_GetTick>
 8003df0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003df2:	e00b      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003df4:	f7fd f9f2 	bl	80011dc <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d904      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e0bb      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e0c:	4b5e      	ldr	r3, [pc, #376]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e18:	d0ec      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d02e      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d12a      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e42:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e50:	4b4d      	ldr	r3, [pc, #308]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	0f1b      	lsrs	r3, r3, #28
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	019a      	lsls	r2, r3, #6
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	431a      	orrs	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	071b      	lsls	r3, r3, #28
 8003e76:	4944      	ldr	r1, [pc, #272]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e7e:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	493d      	ldr	r1, [pc, #244]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d022      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eac:	d11d      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eae:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb4:	0e1b      	lsrs	r3, r3, #24
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ebc:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec2:	0f1b      	lsrs	r3, r3, #28
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	019a      	lsls	r2, r3, #6
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	041b      	lsls	r3, r3, #16
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	071b      	lsls	r3, r3, #28
 8003ee2:	4929      	ldr	r1, [pc, #164]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d028      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ef6:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	0e1b      	lsrs	r3, r3, #24
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f04:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	019a      	lsls	r2, r3, #6
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	071b      	lsls	r3, r3, #28
 8003f2a:	4917      	ldr	r1, [pc, #92]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4911      	ldr	r1, [pc, #68]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a0e      	ldr	r2, [pc, #56]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f54:	f7fd f942 	bl	80011dc <HAL_GetTick>
 8003f58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f5c:	f7fd f93e 	bl	80011dc <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e007      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f7a:	d1ef      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800

08003f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e049      	b.n	8004032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f841 	bl	800403a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f000 fa00 	bl	80043d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e054      	b.n	8004112 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <HAL_TIM_Base_Start_IT+0xd0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d022      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004092:	d01d      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a22      	ldr	r2, [pc, #136]	; (8004124 <HAL_TIM_Base_Start_IT+0xd4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d018      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a21      	ldr	r2, [pc, #132]	; (8004128 <HAL_TIM_Base_Start_IT+0xd8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d013      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1f      	ldr	r2, [pc, #124]	; (800412c <HAL_TIM_Base_Start_IT+0xdc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00e      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <HAL_TIM_Base_Start_IT+0xe0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d009      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1c      	ldr	r2, [pc, #112]	; (8004134 <HAL_TIM_Base_Start_IT+0xe4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_TIM_Base_Start_IT+0xe8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d115      	bne.n	80040fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	4b19      	ldr	r3, [pc, #100]	; (800413c <HAL_TIM_Base_Start_IT+0xec>)
 80040d8:	4013      	ands	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b06      	cmp	r3, #6
 80040e0:	d015      	beq.n	800410e <HAL_TIM_Base_Start_IT+0xbe>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d011      	beq.n	800410e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	e008      	b.n	800410e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e000      	b.n	8004110 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40010400 	.word	0x40010400
 8004134:	40014000 	.word	0x40014000
 8004138:	40001800 	.word	0x40001800
 800413c:	00010007 	.word	0x00010007

08004140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b02      	cmp	r3, #2
 8004154:	d122      	bne.n	800419c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d11b      	bne.n	800419c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0202 	mvn.w	r2, #2
 800416c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f905 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 8004188:	e005      	b.n	8004196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8f7 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f908 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d122      	bne.n	80041f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d11b      	bne.n	80041f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0204 	mvn.w	r2, #4
 80041c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8db 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8cd 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f8de 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d122      	bne.n	8004244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b08      	cmp	r3, #8
 800420a:	d11b      	bne.n	8004244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0208 	mvn.w	r2, #8
 8004214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2204      	movs	r2, #4
 800421a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8b1 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 8004230:	e005      	b.n	800423e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8a3 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8b4 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b10      	cmp	r3, #16
 8004250:	d122      	bne.n	8004298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b10      	cmp	r3, #16
 800425e:	d11b      	bne.n	8004298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0210 	mvn.w	r2, #16
 8004268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2208      	movs	r2, #8
 800426e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f887 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 8004284:	e005      	b.n	8004292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f879 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f88a 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d10e      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d107      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0201 	mvn.w	r2, #1
 80042bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc fcb6 	bl	8000c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d10e      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042dc:	2b80      	cmp	r3, #128	; 0x80
 80042de:	d107      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f91a 	bl	8004524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fe:	d10e      	bne.n	800431e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b80      	cmp	r3, #128	; 0x80
 800430c:	d107      	bne.n	800431e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f90d 	bl	8004538 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d10e      	bne.n	800434a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d107      	bne.n	800434a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f838 	bl	80043ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b20      	cmp	r3, #32
 8004356:	d10e      	bne.n	8004376 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b20      	cmp	r3, #32
 8004364:	d107      	bne.n	8004376 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f06f 0220 	mvn.w	r2, #32
 800436e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8cd 	bl	8004510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a40      	ldr	r2, [pc, #256]	; (80044e4 <TIM_Base_SetConfig+0x114>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d013      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ee:	d00f      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a3d      	ldr	r2, [pc, #244]	; (80044e8 <TIM_Base_SetConfig+0x118>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00b      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a3c      	ldr	r2, [pc, #240]	; (80044ec <TIM_Base_SetConfig+0x11c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a3b      	ldr	r2, [pc, #236]	; (80044f0 <TIM_Base_SetConfig+0x120>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a3a      	ldr	r2, [pc, #232]	; (80044f4 <TIM_Base_SetConfig+0x124>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d108      	bne.n	8004422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a2f      	ldr	r2, [pc, #188]	; (80044e4 <TIM_Base_SetConfig+0x114>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d02b      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004430:	d027      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <TIM_Base_SetConfig+0x118>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d023      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a2b      	ldr	r2, [pc, #172]	; (80044ec <TIM_Base_SetConfig+0x11c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01f      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <TIM_Base_SetConfig+0x120>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01b      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a29      	ldr	r2, [pc, #164]	; (80044f4 <TIM_Base_SetConfig+0x124>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d017      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a28      	ldr	r2, [pc, #160]	; (80044f8 <TIM_Base_SetConfig+0x128>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a27      	ldr	r2, [pc, #156]	; (80044fc <TIM_Base_SetConfig+0x12c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00f      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a26      	ldr	r2, [pc, #152]	; (8004500 <TIM_Base_SetConfig+0x130>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00b      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a25      	ldr	r2, [pc, #148]	; (8004504 <TIM_Base_SetConfig+0x134>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d007      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a24      	ldr	r2, [pc, #144]	; (8004508 <TIM_Base_SetConfig+0x138>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d003      	beq.n	8004482 <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a23      	ldr	r2, [pc, #140]	; (800450c <TIM_Base_SetConfig+0x13c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d108      	bne.n	8004494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <TIM_Base_SetConfig+0x114>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_Base_SetConfig+0xf8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a0c      	ldr	r2, [pc, #48]	; (80044f4 <TIM_Base_SetConfig+0x124>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d103      	bne.n	80044d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	615a      	str	r2, [r3, #20]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40010400 	.word	0x40010400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40014400 	.word	0x40014400
 8004500:	40014800 	.word	0x40014800
 8004504:	40001800 	.word	0x40001800
 8004508:	40001c00 	.word	0x40001c00
 800450c:	40002000 	.word	0x40002000

08004510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e040      	b.n	80045e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc fd1c 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	; 0x24
 8004578:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f82c 	bl	80045e8 <UART_SetConfig>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e022      	b.n	80045e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fa82 	bl	8004aac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fb09 	bl	8004bf0 <UART_CheckIdleState>
 80045de:	4603      	mov	r3, r0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4ba7      	ldr	r3, [pc, #668]	; (80048b0 <UART_SetConfig+0x2c8>)
 8004614:	4013      	ands	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	6979      	ldr	r1, [r7, #20]
 800461c:	430b      	orrs	r3, r1
 800461e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	430a      	orrs	r2, r1
 8004658:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a95      	ldr	r2, [pc, #596]	; (80048b4 <UART_SetConfig+0x2cc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d120      	bne.n	80046a6 <UART_SetConfig+0xbe>
 8004664:	4b94      	ldr	r3, [pc, #592]	; (80048b8 <UART_SetConfig+0x2d0>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b03      	cmp	r3, #3
 8004670:	d816      	bhi.n	80046a0 <UART_SetConfig+0xb8>
 8004672:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <UART_SetConfig+0x90>)
 8004674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004678:	08004689 	.word	0x08004689
 800467c:	08004695 	.word	0x08004695
 8004680:	0800468f 	.word	0x0800468f
 8004684:	0800469b 	.word	0x0800469b
 8004688:	2301      	movs	r3, #1
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e14f      	b.n	800492e <UART_SetConfig+0x346>
 800468e:	2302      	movs	r3, #2
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e14c      	b.n	800492e <UART_SetConfig+0x346>
 8004694:	2304      	movs	r3, #4
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e149      	b.n	800492e <UART_SetConfig+0x346>
 800469a:	2308      	movs	r3, #8
 800469c:	77fb      	strb	r3, [r7, #31]
 800469e:	e146      	b.n	800492e <UART_SetConfig+0x346>
 80046a0:	2310      	movs	r3, #16
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e143      	b.n	800492e <UART_SetConfig+0x346>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a84      	ldr	r2, [pc, #528]	; (80048bc <UART_SetConfig+0x2d4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d132      	bne.n	8004716 <UART_SetConfig+0x12e>
 80046b0:	4b81      	ldr	r3, [pc, #516]	; (80048b8 <UART_SetConfig+0x2d0>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b0c      	cmp	r3, #12
 80046bc:	d828      	bhi.n	8004710 <UART_SetConfig+0x128>
 80046be:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <UART_SetConfig+0xdc>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	080046f9 	.word	0x080046f9
 80046c8:	08004711 	.word	0x08004711
 80046cc:	08004711 	.word	0x08004711
 80046d0:	08004711 	.word	0x08004711
 80046d4:	08004705 	.word	0x08004705
 80046d8:	08004711 	.word	0x08004711
 80046dc:	08004711 	.word	0x08004711
 80046e0:	08004711 	.word	0x08004711
 80046e4:	080046ff 	.word	0x080046ff
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004711 	.word	0x08004711
 80046f4:	0800470b 	.word	0x0800470b
 80046f8:	2300      	movs	r3, #0
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e117      	b.n	800492e <UART_SetConfig+0x346>
 80046fe:	2302      	movs	r3, #2
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e114      	b.n	800492e <UART_SetConfig+0x346>
 8004704:	2304      	movs	r3, #4
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e111      	b.n	800492e <UART_SetConfig+0x346>
 800470a:	2308      	movs	r3, #8
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e10e      	b.n	800492e <UART_SetConfig+0x346>
 8004710:	2310      	movs	r3, #16
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e10b      	b.n	800492e <UART_SetConfig+0x346>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a69      	ldr	r2, [pc, #420]	; (80048c0 <UART_SetConfig+0x2d8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d120      	bne.n	8004762 <UART_SetConfig+0x17a>
 8004720:	4b65      	ldr	r3, [pc, #404]	; (80048b8 <UART_SetConfig+0x2d0>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800472a:	2b30      	cmp	r3, #48	; 0x30
 800472c:	d013      	beq.n	8004756 <UART_SetConfig+0x16e>
 800472e:	2b30      	cmp	r3, #48	; 0x30
 8004730:	d814      	bhi.n	800475c <UART_SetConfig+0x174>
 8004732:	2b20      	cmp	r3, #32
 8004734:	d009      	beq.n	800474a <UART_SetConfig+0x162>
 8004736:	2b20      	cmp	r3, #32
 8004738:	d810      	bhi.n	800475c <UART_SetConfig+0x174>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <UART_SetConfig+0x15c>
 800473e:	2b10      	cmp	r3, #16
 8004740:	d006      	beq.n	8004750 <UART_SetConfig+0x168>
 8004742:	e00b      	b.n	800475c <UART_SetConfig+0x174>
 8004744:	2300      	movs	r3, #0
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e0f1      	b.n	800492e <UART_SetConfig+0x346>
 800474a:	2302      	movs	r3, #2
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e0ee      	b.n	800492e <UART_SetConfig+0x346>
 8004750:	2304      	movs	r3, #4
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e0eb      	b.n	800492e <UART_SetConfig+0x346>
 8004756:	2308      	movs	r3, #8
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e0e8      	b.n	800492e <UART_SetConfig+0x346>
 800475c:	2310      	movs	r3, #16
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e0e5      	b.n	800492e <UART_SetConfig+0x346>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a57      	ldr	r2, [pc, #348]	; (80048c4 <UART_SetConfig+0x2dc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d120      	bne.n	80047ae <UART_SetConfig+0x1c6>
 800476c:	4b52      	ldr	r3, [pc, #328]	; (80048b8 <UART_SetConfig+0x2d0>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004776:	2bc0      	cmp	r3, #192	; 0xc0
 8004778:	d013      	beq.n	80047a2 <UART_SetConfig+0x1ba>
 800477a:	2bc0      	cmp	r3, #192	; 0xc0
 800477c:	d814      	bhi.n	80047a8 <UART_SetConfig+0x1c0>
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	d009      	beq.n	8004796 <UART_SetConfig+0x1ae>
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d810      	bhi.n	80047a8 <UART_SetConfig+0x1c0>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <UART_SetConfig+0x1a8>
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d006      	beq.n	800479c <UART_SetConfig+0x1b4>
 800478e:	e00b      	b.n	80047a8 <UART_SetConfig+0x1c0>
 8004790:	2300      	movs	r3, #0
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e0cb      	b.n	800492e <UART_SetConfig+0x346>
 8004796:	2302      	movs	r3, #2
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e0c8      	b.n	800492e <UART_SetConfig+0x346>
 800479c:	2304      	movs	r3, #4
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e0c5      	b.n	800492e <UART_SetConfig+0x346>
 80047a2:	2308      	movs	r3, #8
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e0c2      	b.n	800492e <UART_SetConfig+0x346>
 80047a8:	2310      	movs	r3, #16
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e0bf      	b.n	800492e <UART_SetConfig+0x346>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a45      	ldr	r2, [pc, #276]	; (80048c8 <UART_SetConfig+0x2e0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d125      	bne.n	8004804 <UART_SetConfig+0x21c>
 80047b8:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <UART_SetConfig+0x2d0>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c6:	d017      	beq.n	80047f8 <UART_SetConfig+0x210>
 80047c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047cc:	d817      	bhi.n	80047fe <UART_SetConfig+0x216>
 80047ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d2:	d00b      	beq.n	80047ec <UART_SetConfig+0x204>
 80047d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d8:	d811      	bhi.n	80047fe <UART_SetConfig+0x216>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <UART_SetConfig+0x1fe>
 80047de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e2:	d006      	beq.n	80047f2 <UART_SetConfig+0x20a>
 80047e4:	e00b      	b.n	80047fe <UART_SetConfig+0x216>
 80047e6:	2300      	movs	r3, #0
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e0a0      	b.n	800492e <UART_SetConfig+0x346>
 80047ec:	2302      	movs	r3, #2
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e09d      	b.n	800492e <UART_SetConfig+0x346>
 80047f2:	2304      	movs	r3, #4
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e09a      	b.n	800492e <UART_SetConfig+0x346>
 80047f8:	2308      	movs	r3, #8
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e097      	b.n	800492e <UART_SetConfig+0x346>
 80047fe:	2310      	movs	r3, #16
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e094      	b.n	800492e <UART_SetConfig+0x346>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a30      	ldr	r2, [pc, #192]	; (80048cc <UART_SetConfig+0x2e4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d125      	bne.n	800485a <UART_SetConfig+0x272>
 800480e:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <UART_SetConfig+0x2d0>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800481c:	d017      	beq.n	800484e <UART_SetConfig+0x266>
 800481e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004822:	d817      	bhi.n	8004854 <UART_SetConfig+0x26c>
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004828:	d00b      	beq.n	8004842 <UART_SetConfig+0x25a>
 800482a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482e:	d811      	bhi.n	8004854 <UART_SetConfig+0x26c>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <UART_SetConfig+0x254>
 8004834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004838:	d006      	beq.n	8004848 <UART_SetConfig+0x260>
 800483a:	e00b      	b.n	8004854 <UART_SetConfig+0x26c>
 800483c:	2301      	movs	r3, #1
 800483e:	77fb      	strb	r3, [r7, #31]
 8004840:	e075      	b.n	800492e <UART_SetConfig+0x346>
 8004842:	2302      	movs	r3, #2
 8004844:	77fb      	strb	r3, [r7, #31]
 8004846:	e072      	b.n	800492e <UART_SetConfig+0x346>
 8004848:	2304      	movs	r3, #4
 800484a:	77fb      	strb	r3, [r7, #31]
 800484c:	e06f      	b.n	800492e <UART_SetConfig+0x346>
 800484e:	2308      	movs	r3, #8
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	e06c      	b.n	800492e <UART_SetConfig+0x346>
 8004854:	2310      	movs	r3, #16
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e069      	b.n	800492e <UART_SetConfig+0x346>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1c      	ldr	r2, [pc, #112]	; (80048d0 <UART_SetConfig+0x2e8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d137      	bne.n	80048d4 <UART_SetConfig+0x2ec>
 8004864:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <UART_SetConfig+0x2d0>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800486e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004872:	d017      	beq.n	80048a4 <UART_SetConfig+0x2bc>
 8004874:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004878:	d817      	bhi.n	80048aa <UART_SetConfig+0x2c2>
 800487a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487e:	d00b      	beq.n	8004898 <UART_SetConfig+0x2b0>
 8004880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004884:	d811      	bhi.n	80048aa <UART_SetConfig+0x2c2>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <UART_SetConfig+0x2aa>
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488e:	d006      	beq.n	800489e <UART_SetConfig+0x2b6>
 8004890:	e00b      	b.n	80048aa <UART_SetConfig+0x2c2>
 8004892:	2300      	movs	r3, #0
 8004894:	77fb      	strb	r3, [r7, #31]
 8004896:	e04a      	b.n	800492e <UART_SetConfig+0x346>
 8004898:	2302      	movs	r3, #2
 800489a:	77fb      	strb	r3, [r7, #31]
 800489c:	e047      	b.n	800492e <UART_SetConfig+0x346>
 800489e:	2304      	movs	r3, #4
 80048a0:	77fb      	strb	r3, [r7, #31]
 80048a2:	e044      	b.n	800492e <UART_SetConfig+0x346>
 80048a4:	2308      	movs	r3, #8
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e041      	b.n	800492e <UART_SetConfig+0x346>
 80048aa:	2310      	movs	r3, #16
 80048ac:	77fb      	strb	r3, [r7, #31]
 80048ae:	e03e      	b.n	800492e <UART_SetConfig+0x346>
 80048b0:	efff69f3 	.word	0xefff69f3
 80048b4:	40011000 	.word	0x40011000
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40004400 	.word	0x40004400
 80048c0:	40004800 	.word	0x40004800
 80048c4:	40004c00 	.word	0x40004c00
 80048c8:	40005000 	.word	0x40005000
 80048cc:	40011400 	.word	0x40011400
 80048d0:	40007800 	.word	0x40007800
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a71      	ldr	r2, [pc, #452]	; (8004aa0 <UART_SetConfig+0x4b8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d125      	bne.n	800492a <UART_SetConfig+0x342>
 80048de:	4b71      	ldr	r3, [pc, #452]	; (8004aa4 <UART_SetConfig+0x4bc>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048ec:	d017      	beq.n	800491e <UART_SetConfig+0x336>
 80048ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048f2:	d817      	bhi.n	8004924 <UART_SetConfig+0x33c>
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	d00b      	beq.n	8004912 <UART_SetConfig+0x32a>
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fe:	d811      	bhi.n	8004924 <UART_SetConfig+0x33c>
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <UART_SetConfig+0x324>
 8004904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004908:	d006      	beq.n	8004918 <UART_SetConfig+0x330>
 800490a:	e00b      	b.n	8004924 <UART_SetConfig+0x33c>
 800490c:	2300      	movs	r3, #0
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e00d      	b.n	800492e <UART_SetConfig+0x346>
 8004912:	2302      	movs	r3, #2
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e00a      	b.n	800492e <UART_SetConfig+0x346>
 8004918:	2304      	movs	r3, #4
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e007      	b.n	800492e <UART_SetConfig+0x346>
 800491e:	2308      	movs	r3, #8
 8004920:	77fb      	strb	r3, [r7, #31]
 8004922:	e004      	b.n	800492e <UART_SetConfig+0x346>
 8004924:	2310      	movs	r3, #16
 8004926:	77fb      	strb	r3, [r7, #31]
 8004928:	e001      	b.n	800492e <UART_SetConfig+0x346>
 800492a:	2310      	movs	r3, #16
 800492c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004936:	d15b      	bne.n	80049f0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004938:	7ffb      	ldrb	r3, [r7, #31]
 800493a:	2b08      	cmp	r3, #8
 800493c:	d827      	bhi.n	800498e <UART_SetConfig+0x3a6>
 800493e:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <UART_SetConfig+0x35c>)
 8004940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004944:	08004969 	.word	0x08004969
 8004948:	08004971 	.word	0x08004971
 800494c:	08004979 	.word	0x08004979
 8004950:	0800498f 	.word	0x0800498f
 8004954:	0800497f 	.word	0x0800497f
 8004958:	0800498f 	.word	0x0800498f
 800495c:	0800498f 	.word	0x0800498f
 8004960:	0800498f 	.word	0x0800498f
 8004964:	08004987 	.word	0x08004987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004968:	f7fe fe8e 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 800496c:	61b8      	str	r0, [r7, #24]
        break;
 800496e:	e013      	b.n	8004998 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004970:	f7fe fe9e 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 8004974:	61b8      	str	r0, [r7, #24]
        break;
 8004976:	e00f      	b.n	8004998 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004978:	4b4b      	ldr	r3, [pc, #300]	; (8004aa8 <UART_SetConfig+0x4c0>)
 800497a:	61bb      	str	r3, [r7, #24]
        break;
 800497c:	e00c      	b.n	8004998 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497e:	f7fe fd95 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8004982:	61b8      	str	r0, [r7, #24]
        break;
 8004984:	e008      	b.n	8004998 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498a:	61bb      	str	r3, [r7, #24]
        break;
 800498c:	e004      	b.n	8004998 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	77bb      	strb	r3, [r7, #30]
        break;
 8004996:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d074      	beq.n	8004a88 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	005a      	lsls	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	441a      	add	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b0f      	cmp	r3, #15
 80049ba:	d916      	bls.n	80049ea <UART_SetConfig+0x402>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c2:	d212      	bcs.n	80049ea <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f023 030f 	bic.w	r3, r3, #15
 80049cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	085b      	lsrs	r3, r3, #1
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	b29a      	uxth	r2, r3
 80049da:	89fb      	ldrh	r3, [r7, #14]
 80049dc:	4313      	orrs	r3, r2
 80049de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	89fa      	ldrh	r2, [r7, #14]
 80049e6:	60da      	str	r2, [r3, #12]
 80049e8:	e04e      	b.n	8004a88 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	77bb      	strb	r3, [r7, #30]
 80049ee:	e04b      	b.n	8004a88 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049f0:	7ffb      	ldrb	r3, [r7, #31]
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d827      	bhi.n	8004a46 <UART_SetConfig+0x45e>
 80049f6:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0x414>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a37 	.word	0x08004a37
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a47 	.word	0x08004a47
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	08004a3f 	.word	0x08004a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fe fe32 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8004a24:	61b8      	str	r0, [r7, #24]
        break;
 8004a26:	e013      	b.n	8004a50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7fe fe42 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	61b8      	str	r0, [r7, #24]
        break;
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a30:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <UART_SetConfig+0x4c0>)
 8004a32:	61bb      	str	r3, [r7, #24]
        break;
 8004a34:	e00c      	b.n	8004a50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fe fd39 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8004a3a:	61b8      	str	r0, [r7, #24]
        break;
 8004a3c:	e008      	b.n	8004a50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	61bb      	str	r3, [r7, #24]
        break;
 8004a44:	e004      	b.n	8004a50 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d018      	beq.n	8004a88 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	085a      	lsrs	r2, r3, #1
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	441a      	add	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d908      	bls.n	8004a84 <UART_SetConfig+0x49c>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d204      	bcs.n	8004a84 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	e001      	b.n	8004a88 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a94:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40007c00 	.word	0x40007c00
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	00f42400 	.word	0x00f42400

08004aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01a      	beq.n	8004bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004baa:	d10a      	bne.n	8004bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	605a      	str	r2, [r3, #4]
  }
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c00:	f7fc faec 	bl	80011dc <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d10e      	bne.n	8004c32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f82d 	bl	8004c82 <UART_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e023      	b.n	8004c7a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d10e      	bne.n	8004c5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f817 	bl	8004c82 <UART_WaitOnFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e00d      	b.n	8004c7a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c92:	e05e      	b.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c9a:	d05a      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9c:	f7fc fa9e 	bl	80011dc <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d302      	bcc.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d11b      	bne.n	8004cea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cc0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e043      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02c      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d06:	d124      	bne.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e00f      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d091      	beq.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	f107 001c 	add.w	r0, r7, #28
 8004d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d120      	bne.n	8004dd6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <USB_CoreInit+0xac>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d105      	bne.n	8004dca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fa5a 	bl	8005284 <USB_CoreReset>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
 8004dd4:	e010      	b.n	8004df8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa4e 	bl	8005284 <USB_CoreReset>
 8004de8:	4603      	mov	r3, r0
 8004dea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d10b      	bne.n	8004e16 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f043 0206 	orr.w	r2, r3, #6
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e22:	b004      	add	sp, #16
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	ffbdffbf 	.word	0xffbdffbf

08004e2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f023 0201 	bic.w	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	460b      	mov	r3, r1
 8004e58:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d106      	bne.n	8004e7a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	e00b      	b.n	8004e92 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	60da      	str	r2, [r3, #12]
 8004e8c:	e001      	b.n	8004e92 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e003      	b.n	8004e9a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e92:	2032      	movs	r0, #50	; 0x32
 8004e94:	f7fc f9ae 	bl	80011f4 <HAL_Delay>

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b086      	sub	sp, #24
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	e009      	b.n	8004ed8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	3340      	adds	r3, #64	; 0x40
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	2200      	movs	r2, #0
 8004ed0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b0e      	cmp	r3, #14
 8004edc:	d9f2      	bls.n	8004ec4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d11c      	bne.n	8004f1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef2:	f043 0302 	orr.w	r3, r3, #2
 8004ef6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e005      	b.n	8004f2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f30:	461a      	mov	r2, r3
 8004f32:	2300      	movs	r3, #0
 8004f34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f44:	461a      	mov	r2, r3
 8004f46:	680b      	ldr	r3, [r1, #0]
 8004f48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d10c      	bne.n	8004f6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d104      	bne.n	8004f60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f56:	2100      	movs	r1, #0
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f959 	bl	8005210 <USB_SetDevSpeed>
 8004f5e:	e018      	b.n	8004f92 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f60:	2101      	movs	r1, #1
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f954 	bl	8005210 <USB_SetDevSpeed>
 8004f68:	e013      	b.n	8004f92 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d10c      	bne.n	8004f8a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f76:	2100      	movs	r1, #0
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f949 	bl	8005210 <USB_SetDevSpeed>
 8004f7e:	e008      	b.n	8004f92 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f80:	2101      	movs	r1, #1
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f944 	bl	8005210 <USB_SetDevSpeed>
 8004f88:	e003      	b.n	8004f92 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f8a:	2103      	movs	r1, #3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f93f 	bl	8005210 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f92:	2110      	movs	r1, #16
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f8f3 	bl	8005180 <USB_FlushTxFifo>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f911 	bl	80051cc <USB_FlushRxFifo>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	e043      	b.n	8005066 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ff4:	d118      	bne.n	8005028 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10a      	bne.n	8005012 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005008:	461a      	mov	r2, r3
 800500a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	e013      	b.n	800503a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	461a      	mov	r2, r3
 8005020:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e008      	b.n	800503a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	461a      	mov	r2, r3
 8005036:	2300      	movs	r3, #0
 8005038:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005046:	461a      	mov	r2, r3
 8005048:	2300      	movs	r3, #0
 800504a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005058:	461a      	mov	r2, r3
 800505a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800505e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	3301      	adds	r3, #1
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	429a      	cmp	r2, r3
 800506c:	d3b7      	bcc.n	8004fde <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e043      	b.n	80050fc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800508a:	d118      	bne.n	80050be <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509e:	461a      	mov	r2, r3
 80050a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e013      	b.n	80050d0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b4:	461a      	mov	r2, r3
 80050b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	e008      	b.n	80050d0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	461a      	mov	r2, r3
 80050cc:	2300      	movs	r3, #0
 80050ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	461a      	mov	r2, r3
 80050de:	2300      	movs	r3, #0
 80050e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ee:	461a      	mov	r2, r3
 80050f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	3301      	adds	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	429a      	cmp	r2, r3
 8005102:	d3b7      	bcc.n	8005074 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005112:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005116:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005124:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f043 0210 	orr.w	r2, r3, #16
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <USB_DevInit+0x2d4>)
 800513e:	4313      	orrs	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f043 0208 	orr.w	r2, r3, #8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d105      	bne.n	8005168 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <USB_DevInit+0x2d8>)
 8005162:	4313      	orrs	r3, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005168:	7dfb      	ldrb	r3, [r7, #23]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005174:	b004      	add	sp, #16
 8005176:	4770      	bx	lr
 8005178:	803c3800 	.word	0x803c3800
 800517c:	40000004 	.word	0x40000004

08005180 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a09      	ldr	r2, [pc, #36]	; (80051c8 <USB_FlushTxFifo+0x48>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e006      	b.n	80051ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d0f0      	beq.n	800519a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	00030d40 	.word	0x00030d40

080051cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2210      	movs	r2, #16
 80051dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3301      	adds	r3, #1
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a09      	ldr	r2, [pc, #36]	; (800520c <USB_FlushRxFifo+0x40>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d901      	bls.n	80051f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e006      	b.n	80051fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d0f0      	beq.n	80051de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	00030d40 	.word	0x00030d40

08005210 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	68f9      	ldr	r1, [r7, #12]
 800522c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800525c:	f023 0303 	bic.w	r3, r3, #3
 8005260:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <USB_CoreReset+0x64>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e01b      	b.n	80052da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	daf2      	bge.n	8005290 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f043 0201 	orr.w	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <USB_CoreReset+0x64>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e006      	b.n	80052da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d0f0      	beq.n	80052ba <USB_CoreReset+0x36>

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	00030d40 	.word	0x00030d40

080052ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80052ec:	b5b0      	push	{r4, r5, r7, lr}
 80052ee:	b08e      	sub	sp, #56	; 0x38
 80052f0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80052f2:	2100      	movs	r1, #0
 80052f4:	2000      	movs	r0, #0
 80052f6:	f007 f983 	bl	800c600 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80052fa:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <MX_LWIP_Init+0xb8>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005300:	4b29      	ldr	r3, [pc, #164]	; (80053a8 <MX_LWIP_Init+0xbc>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005306:	4b29      	ldr	r3, [pc, #164]	; (80053ac <MX_LWIP_Init+0xc0>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800530c:	4b28      	ldr	r3, [pc, #160]	; (80053b0 <MX_LWIP_Init+0xc4>)
 800530e:	9302      	str	r3, [sp, #8]
 8005310:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <MX_LWIP_Init+0xc8>)
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	2300      	movs	r3, #0
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4b24      	ldr	r3, [pc, #144]	; (80053ac <MX_LWIP_Init+0xc0>)
 800531a:	4a23      	ldr	r2, [pc, #140]	; (80053a8 <MX_LWIP_Init+0xbc>)
 800531c:	4921      	ldr	r1, [pc, #132]	; (80053a4 <MX_LWIP_Init+0xb8>)
 800531e:	4826      	ldr	r0, [pc, #152]	; (80053b8 <MX_LWIP_Init+0xcc>)
 8005320:	f007 fef2 	bl	800d108 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005324:	4824      	ldr	r0, [pc, #144]	; (80053b8 <MX_LWIP_Init+0xcc>)
 8005326:	f008 f8a9 	bl	800d47c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800532a:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <MX_LWIP_Init+0xcc>)
 800532c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005330:	089b      	lsrs	r3, r3, #2
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800533c:	481e      	ldr	r0, [pc, #120]	; (80053b8 <MX_LWIP_Init+0xcc>)
 800533e:	f008 f8ad 	bl	800d49c <netif_set_up>
 8005342:	e002      	b.n	800534a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005344:	481c      	ldr	r0, [pc, #112]	; (80053b8 <MX_LWIP_Init+0xcc>)
 8005346:	f008 f915 	bl	800d574 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800534a:	491c      	ldr	r1, [pc, #112]	; (80053bc <MX_LWIP_Init+0xd0>)
 800534c:	481a      	ldr	r0, [pc, #104]	; (80053b8 <MX_LWIP_Init+0xcc>)
 800534e:	f008 f9ab 	bl	800d6a8 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8005352:	2300      	movs	r3, #0
 8005354:	623b      	str	r3, [r7, #32]
 8005356:	2300      	movs	r3, #0
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800535a:	f107 0320 	add.w	r3, r7, #32
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fd93 	bl	8005e8c <osSemaphoreCreate>
 8005366:	4603      	mov	r3, r0
 8005368:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <MX_LWIP_Init+0xd4>)
 800536a:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800536c:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <MX_LWIP_Init+0xd8>)
 800536e:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <MX_LWIP_Init+0xcc>)
 8005370:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005372:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <MX_LWIP_Init+0xd4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a13      	ldr	r2, [pc, #76]	; (80053c4 <MX_LWIP_Init+0xd8>)
 8005378:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800537a:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <MX_LWIP_Init+0xdc>)
 800537c:	1d3c      	adds	r4, r7, #4
 800537e:	461d      	mov	r5, r3
 8005380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005388:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800538c:	1d3b      	adds	r3, r7, #4
 800538e:	490d      	ldr	r1, [pc, #52]	; (80053c4 <MX_LWIP_Init+0xd8>)
 8005390:	4618      	mov	r0, r3
 8005392:	f000 fc7e 	bl	8005c92 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005396:	4808      	ldr	r0, [pc, #32]	; (80053b8 <MX_LWIP_Init+0xcc>)
 8005398:	f010 fac0 	bl	801591c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800539c:	bf00      	nop
 800539e:	3728      	adds	r7, #40	; 0x28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bdb0      	pop	{r4, r5, r7, pc}
 80053a4:	20009dd4 	.word	0x20009dd4
 80053a8:	20009dd8 	.word	0x20009dd8
 80053ac:	20009ddc 	.word	0x20009ddc
 80053b0:	0800c511 	.word	0x0800c511
 80053b4:	08005a21 	.word	0x08005a21
 80053b8:	20009d9c 	.word	0x20009d9c
 80053bc:	08005b05 	.word	0x08005b05
 80053c0:	200008f8 	.word	0x200008f8
 80053c4:	20009d94 	.word	0x20009d94
 80053c8:	0801cc54 	.word	0x0801cc54

080053cc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	; 0x38
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	605a      	str	r2, [r3, #4]
 80053de:	609a      	str	r2, [r3, #8]
 80053e0:	60da      	str	r2, [r3, #12]
 80053e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a52      	ldr	r2, [pc, #328]	; (8005534 <HAL_ETH_MspInit+0x168>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	f040 809e 	bne.w	800552c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80053f0:	4b51      	ldr	r3, [pc, #324]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	4a50      	ldr	r2, [pc, #320]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 80053f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053fa:	6313      	str	r3, [r2, #48]	; 0x30
 80053fc:	4b4e      	ldr	r3, [pc, #312]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	4b4b      	ldr	r3, [pc, #300]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	4a4a      	ldr	r2, [pc, #296]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 800540e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005412:	6313      	str	r3, [r2, #48]	; 0x30
 8005414:	4b48      	ldr	r3, [pc, #288]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4b45      	ldr	r3, [pc, #276]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	4a44      	ldr	r2, [pc, #272]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 8005426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800542a:	6313      	str	r3, [r2, #48]	; 0x30
 800542c:	4b42      	ldr	r3, [pc, #264]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005438:	4b3f      	ldr	r3, [pc, #252]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	4a3e      	ldr	r2, [pc, #248]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 800543e:	f043 0304 	orr.w	r3, r3, #4
 8005442:	6313      	str	r3, [r2, #48]	; 0x30
 8005444:	4b3c      	ldr	r3, [pc, #240]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005450:	4b39      	ldr	r3, [pc, #228]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	4a38      	ldr	r2, [pc, #224]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	6313      	str	r3, [r2, #48]	; 0x30
 800545c:	4b36      	ldr	r3, [pc, #216]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005468:	4b33      	ldr	r3, [pc, #204]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	4a32      	ldr	r2, [pc, #200]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 800546e:	f043 0302 	orr.w	r3, r3, #2
 8005472:	6313      	str	r3, [r2, #48]	; 0x30
 8005474:	4b30      	ldr	r3, [pc, #192]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005480:	4b2d      	ldr	r3, [pc, #180]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	4a2c      	ldr	r2, [pc, #176]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 8005486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800548a:	6313      	str	r3, [r2, #48]	; 0x30
 800548c:	4b2a      	ldr	r3, [pc, #168]	; (8005538 <HAL_ETH_MspInit+0x16c>)
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005498:	2332      	movs	r3, #50	; 0x32
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800549c:	2302      	movs	r3, #2
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a4:	2303      	movs	r3, #3
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054a8:	230b      	movs	r3, #11
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b0:	4619      	mov	r1, r3
 80054b2:	4822      	ldr	r0, [pc, #136]	; (800553c <HAL_ETH_MspInit+0x170>)
 80054b4:	f7fd f928 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80054b8:	2386      	movs	r3, #134	; 0x86
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054bc:	2302      	movs	r3, #2
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c4:	2303      	movs	r3, #3
 80054c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054c8:	230b      	movs	r3, #11
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054d0:	4619      	mov	r1, r3
 80054d2:	481b      	ldr	r0, [pc, #108]	; (8005540 <HAL_ETH_MspInit+0x174>)
 80054d4:	f7fd f918 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80054d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054de:	2302      	movs	r3, #2
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e6:	2303      	movs	r3, #3
 80054e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054ea:	230b      	movs	r3, #11
 80054ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80054ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f2:	4619      	mov	r1, r3
 80054f4:	4813      	ldr	r0, [pc, #76]	; (8005544 <HAL_ETH_MspInit+0x178>)
 80054f6:	f7fd f907 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80054fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005500:	2302      	movs	r3, #2
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005508:	2303      	movs	r3, #3
 800550a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800550c:	230b      	movs	r3, #11
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005514:	4619      	mov	r1, r3
 8005516:	480c      	ldr	r0, [pc, #48]	; (8005548 <HAL_ETH_MspInit+0x17c>)
 8005518:	f7fd f8f6 	bl	8002708 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800551c:	2200      	movs	r2, #0
 800551e:	2105      	movs	r1, #5
 8005520:	203d      	movs	r0, #61	; 0x3d
 8005522:	f7fb ff43 	bl	80013ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005526:	203d      	movs	r0, #61	; 0x3d
 8005528:	f7fb ff5c 	bl	80013e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800552c:	bf00      	nop
 800552e:	3738      	adds	r7, #56	; 0x38
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40028000 	.word	0x40028000
 8005538:	40023800 	.word	0x40023800
 800553c:	40020800 	.word	0x40020800
 8005540:	40020000 	.word	0x40020000
 8005544:	40020400 	.word	0x40020400
 8005548:	40021800 	.word	0x40021800

0800554c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005554:	4b04      	ldr	r3, [pc, #16]	; (8005568 <HAL_ETH_RxCpltCallback+0x1c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fd17 	bl	8005f8c <osSemaphoreRelease>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200008fc 	.word	0x200008fc

0800556c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800556c:	b5b0      	push	{r4, r5, r7, lr}
 800556e:	b090      	sub	sp, #64	; 0x40
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005578:	4b60      	ldr	r3, [pc, #384]	; (80056fc <low_level_init+0x190>)
 800557a:	4a61      	ldr	r2, [pc, #388]	; (8005700 <low_level_init+0x194>)
 800557c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800557e:	4b5f      	ldr	r3, [pc, #380]	; (80056fc <low_level_init+0x190>)
 8005580:	2201      	movs	r2, #1
 8005582:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005584:	4b5d      	ldr	r3, [pc, #372]	; (80056fc <low_level_init+0x190>)
 8005586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800558a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800558c:	4b5b      	ldr	r3, [pc, #364]	; (80056fc <low_level_init+0x190>)
 800558e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005592:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005594:	4b59      	ldr	r3, [pc, #356]	; (80056fc <low_level_init+0x190>)
 8005596:	2200      	movs	r2, #0
 8005598:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800559a:	2300      	movs	r3, #0
 800559c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80055a0:	2380      	movs	r3, #128	; 0x80
 80055a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80055a6:	23e1      	movs	r3, #225	; 0xe1
 80055a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80055be:	4a4f      	ldr	r2, [pc, #316]	; (80056fc <low_level_init+0x190>)
 80055c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055c4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80055c6:	4b4d      	ldr	r3, [pc, #308]	; (80056fc <low_level_init+0x190>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80055cc:	4b4b      	ldr	r3, [pc, #300]	; (80056fc <low_level_init+0x190>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80055d2:	4b4a      	ldr	r3, [pc, #296]	; (80056fc <low_level_init+0x190>)
 80055d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80055d8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80055da:	4848      	ldr	r0, [pc, #288]	; (80056fc <low_level_init+0x190>)
 80055dc:	f7fb ff10 	bl	8001400 <HAL_ETH_Init>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80055e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d108      	bne.n	8005600 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055f4:	f043 0304 	orr.w	r3, r3, #4
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005600:	2304      	movs	r3, #4
 8005602:	4a40      	ldr	r2, [pc, #256]	; (8005704 <low_level_init+0x198>)
 8005604:	4940      	ldr	r1, [pc, #256]	; (8005708 <low_level_init+0x19c>)
 8005606:	483d      	ldr	r0, [pc, #244]	; (80056fc <low_level_init+0x190>)
 8005608:	f7fc f894 	bl	8001734 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800560c:	2304      	movs	r3, #4
 800560e:	4a3f      	ldr	r2, [pc, #252]	; (800570c <low_level_init+0x1a0>)
 8005610:	493f      	ldr	r1, [pc, #252]	; (8005710 <low_level_init+0x1a4>)
 8005612:	483a      	ldr	r0, [pc, #232]	; (80056fc <low_level_init+0x190>)
 8005614:	f7fc f8f7 	bl	8001806 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2206      	movs	r2, #6
 800561c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005620:	4b36      	ldr	r3, [pc, #216]	; (80056fc <low_level_init+0x190>)
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800562c:	4b33      	ldr	r3, [pc, #204]	; (80056fc <low_level_init+0x190>)
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	785a      	ldrb	r2, [r3, #1]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005638:	4b30      	ldr	r3, [pc, #192]	; (80056fc <low_level_init+0x190>)
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	789a      	ldrb	r2, [r3, #2]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <low_level_init+0x190>)
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	78da      	ldrb	r2, [r3, #3]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005650:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <low_level_init+0x190>)
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	791a      	ldrb	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800565c:	4b27      	ldr	r3, [pc, #156]	; (80056fc <low_level_init+0x190>)
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	795a      	ldrb	r2, [r3, #5]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800566e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005676:	f043 030a 	orr.w	r3, r3, #10
 800567a:	b2da      	uxtb	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8005682:	2300      	movs	r3, #0
 8005684:	62bb      	str	r3, [r7, #40]	; 0x28
 8005686:	2300      	movs	r3, #0
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800568a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800568e:	2101      	movs	r1, #1
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fbfb 	bl	8005e8c <osSemaphoreCreate>
 8005696:	4603      	mov	r3, r0
 8005698:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <low_level_init+0x1a8>)
 800569a:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800569c:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <low_level_init+0x1ac>)
 800569e:	f107 040c 	add.w	r4, r7, #12
 80056a2:	461d      	mov	r5, r3
 80056a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80056ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80056b0:	f107 030c 	add.w	r3, r7, #12
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 faeb 	bl	8005c92 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80056bc:	480f      	ldr	r0, [pc, #60]	; (80056fc <low_level_init+0x190>)
 80056be:	f7fc fbca 	bl	8001e56 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80056c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056c6:	461a      	mov	r2, r3
 80056c8:	211d      	movs	r1, #29
 80056ca:	480c      	ldr	r0, [pc, #48]	; (80056fc <low_level_init+0x190>)
 80056cc:	f7fc faf5 	bl	8001cba <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	f043 030b 	orr.w	r3, r3, #11
 80056d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	461a      	mov	r2, r3
 80056dc:	211d      	movs	r1, #29
 80056de:	4807      	ldr	r0, [pc, #28]	; (80056fc <low_level_init+0x190>)
 80056e0:	f7fc fb53 	bl	8001d8a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80056e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056e8:	461a      	mov	r2, r3
 80056ea:	211d      	movs	r1, #29
 80056ec:	4803      	ldr	r0, [pc, #12]	; (80056fc <low_level_init+0x190>)
 80056ee:	f7fc fae4 	bl	8001cba <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80056f2:	bf00      	nop
 80056f4:	3740      	adds	r7, #64	; 0x40
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bdb0      	pop	{r4, r5, r7, pc}
 80056fa:	bf00      	nop
 80056fc:	2000b6b0 	.word	0x2000b6b0
 8005700:	40028000 	.word	0x40028000
 8005704:	2000b6f8 	.word	0x2000b6f8
 8005708:	20009de0 	.word	0x20009de0
 800570c:	20009e60 	.word	0x20009e60
 8005710:	2000b630 	.word	0x2000b630
 8005714:	200008fc 	.word	0x200008fc
 8005718:	0801cc78 	.word	0x0801cc78

0800571c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	; 0x28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005726:	4b4b      	ldr	r3, [pc, #300]	; (8005854 <low_level_output+0x138>)
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800573e:	4b45      	ldr	r3, [pc, #276]	; (8005854 <low_level_output+0x138>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	623b      	str	r3, [r7, #32]
 800574c:	e05a      	b.n	8005804 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	da03      	bge.n	800575e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005756:	23f8      	movs	r3, #248	; 0xf8
 8005758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800575c:	e05c      	b.n	8005818 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	895b      	ldrh	r3, [r3, #10]
 8005762:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005768:	e02f      	b.n	80057ca <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	18d0      	adds	r0, r2, r3
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	18d1      	adds	r1, r2, r3
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	461a      	mov	r2, r3
 8005782:	f016 f8af 	bl	801b8e4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	da03      	bge.n	800579c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005794:	23f8      	movs	r3, #248	; 0xf8
 8005796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800579a:	e03d      	b.n	8005818 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80057ac:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80057b8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80057c4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d8c8      	bhi.n	800576a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	18d0      	adds	r0, r2, r3
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4413      	add	r3, r2
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4619      	mov	r1, r3
 80057ea:	f016 f87b 	bl	801b8e4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	623b      	str	r3, [r7, #32]
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1a1      	bne.n	800574e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800580a:	6979      	ldr	r1, [r7, #20]
 800580c:	4811      	ldr	r0, [pc, #68]	; (8005854 <low_level_output+0x138>)
 800580e:	f7fc f867 	bl	80018e0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005818:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <low_level_output+0x138>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005820:	4413      	add	r3, r2
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00d      	beq.n	8005848 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800582c:	4b09      	ldr	r3, [pc, #36]	; (8005854 <low_level_output+0x138>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	f241 0314 	movw	r3, #4116	; 0x1014
 8005834:	4413      	add	r3, r2
 8005836:	2220      	movs	r2, #32
 8005838:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <low_level_output+0x138>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005842:	4413      	add	r3, r2
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005848:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800584c:	4618      	mov	r0, r3
 800584e:	3728      	adds	r7, #40	; 0x28
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	2000b6b0 	.word	0x2000b6b0

08005858 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08c      	sub	sp, #48	; 0x30
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800587c:	484f      	ldr	r0, [pc, #316]	; (80059bc <low_level_input+0x164>)
 800587e:	f7fc f919 	bl	8001ab4 <HAL_ETH_GetReceivedFrame_IT>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <low_level_input+0x34>

    return NULL;
 8005888:	2300      	movs	r3, #0
 800588a:	e092      	b.n	80059b2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800588c:	4b4b      	ldr	r3, [pc, #300]	; (80059bc <low_level_input+0x164>)
 800588e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005890:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005892:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <low_level_input+0x164>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005898:	89fb      	ldrh	r3, [r7, #14]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800589e:	89fb      	ldrh	r3, [r7, #14]
 80058a0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80058a4:	4619      	mov	r1, r3
 80058a6:	2000      	movs	r0, #0
 80058a8:	f007 ffc8 	bl	800d83c <pbuf_alloc>
 80058ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d04b      	beq.n	800594c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80058b4:	4b41      	ldr	r3, [pc, #260]	; (80059bc <low_level_input+0x164>)
 80058b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c2:	e040      	b.n	8005946 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	895b      	ldrh	r3, [r3, #10]
 80058c8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80058ce:	e021      	b.n	8005914 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	18d0      	adds	r0, r2, r3
 80058d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	18d1      	adds	r1, r2, r3
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	461a      	mov	r2, r3
 80058e8:	f015 fffc 	bl	801b8e4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	4413      	add	r3, r2
 80058fe:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005902:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800590e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800591e:	4293      	cmp	r3, r2
 8005920:	d8d6      	bhi.n	80058d0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	18d0      	adds	r0, r2, r3
 800592a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4619      	mov	r1, r3
 8005934:	f015 ffd6 	bl	801b8e4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1bb      	bne.n	80058c4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800594c:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <low_level_input+0x164>)
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	e00b      	b.n	8005970 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	3301      	adds	r3, #1
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	4b12      	ldr	r3, [pc, #72]	; (80059bc <low_level_input+0x164>)
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	429a      	cmp	r2, r3
 8005978:	d3ee      	bcc.n	8005958 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <low_level_input+0x164>)
 800597c:	2200      	movs	r2, #0
 800597e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005980:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <low_level_input+0x164>)
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	f241 0314 	movw	r3, #4116	; 0x1014
 8005988:	4413      	add	r3, r2
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <low_level_input+0x164>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	f241 0314 	movw	r3, #4116	; 0x1014
 800599c:	4413      	add	r3, r2
 800599e:	2280      	movs	r2, #128	; 0x80
 80059a0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <low_level_input+0x164>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	f241 0308 	movw	r3, #4104	; 0x1008
 80059aa:	4413      	add	r3, r2
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
  }
  return p;
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3730      	adds	r7, #48	; 0x30
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	2000b6b0 	.word	0x2000b6b0

080059c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80059cc:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <ethernetif_input+0x58>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fa8b 	bl	8005ef0 <osSemaphoreWait>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f5      	bne.n	80059cc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80059e0:	480e      	ldr	r0, [pc, #56]	; (8005a1c <ethernetif_input+0x5c>)
 80059e2:	f014 f853 	bl	8019a8c <sys_mutex_lock>
        p = low_level_input( netif );
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff ff36 	bl	8005858 <low_level_input>
 80059ec:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	68f9      	ldr	r1, [r7, #12]
 80059fa:	68b8      	ldr	r0, [r7, #8]
 80059fc:	4798      	blx	r3
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005a04:	68b8      	ldr	r0, [r7, #8]
 8005a06:	f008 fa2f 	bl	800de68 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005a0a:	4804      	ldr	r0, [pc, #16]	; (8005a1c <ethernetif_input+0x5c>)
 8005a0c:	f014 f84d 	bl	8019aaa <sys_mutex_unlock>
      } while(p!=NULL);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e4      	bne.n	80059e0 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005a16:	e7d9      	b.n	80059cc <ethernetif_input+0xc>
 8005a18:	200008fc 	.word	0x200008fc
 8005a1c:	2000cf08 	.word	0x2000cf08

08005a20 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <ethernetif_init+0x1c>
 8005a2e:	4b0e      	ldr	r3, [pc, #56]	; (8005a68 <ethernetif_init+0x48>)
 8005a30:	f240 2235 	movw	r2, #565	; 0x235
 8005a34:	490d      	ldr	r1, [pc, #52]	; (8005a6c <ethernetif_init+0x4c>)
 8005a36:	480e      	ldr	r0, [pc, #56]	; (8005a70 <ethernetif_init+0x50>)
 8005a38:	f015 ff6a 	bl	801b910 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2273      	movs	r2, #115	; 0x73
 8005a40:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2274      	movs	r2, #116	; 0x74
 8005a48:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <ethernetif_init+0x54>)
 8005a50:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <ethernetif_init+0x58>)
 8005a56:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff fd87 	bl	800556c <low_level_init>

  return ERR_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	0801cc94 	.word	0x0801cc94
 8005a6c:	0801ccb0 	.word	0x0801ccb0
 8005a70:	0801ccc0 	.word	0x0801ccc0
 8005a74:	080177e9 	.word	0x080177e9
 8005a78:	0800571d 	.word	0x0800571d

08005a7c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005a80:	f7fb fbac 	bl	80011dc <HAL_GetTick>
 8005a84:	4603      	mov	r3, r0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005a9c:	f107 0308 	add.w	r3, r7, #8
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	4816      	ldr	r0, [pc, #88]	; (8005b00 <ethernetif_set_link+0x74>)
 8005aa6:	f7fc f908 	bl	8001cba <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d108      	bne.n	8005ad4 <ethernetif_set_link+0x48>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f007 fd83 	bl	800d5d8 <netif_set_link_up>
 8005ad2:	e011      	b.n	8005af8 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <ethernetif_set_link+0x6c>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f007 fda8 	bl	800d648 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005af8:	20c8      	movs	r0, #200	; 0xc8
 8005afa:	f000 f916 	bl	8005d2a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005afe:	e7cd      	b.n	8005a9c <ethernetif_set_link+0x10>
 8005b00:	2000b6b0 	.word	0x2000b6b0

08005b04 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d05d      	beq.n	8005be2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005b26:	4b34      	ldr	r3, [pc, #208]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d03f      	beq.n	8005bae <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005b2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b32:	2100      	movs	r1, #0
 8005b34:	4830      	ldr	r0, [pc, #192]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005b36:	f7fc f928 	bl	8001d8a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005b3a:	f7fb fb4f 	bl	80011dc <HAL_GetTick>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	461a      	mov	r2, r3
 8005b48:	2101      	movs	r1, #1
 8005b4a:	482b      	ldr	r0, [pc, #172]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005b4c:	f7fc f8b5 	bl	8001cba <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005b50:	f7fb fb44 	bl	80011dc <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b5e:	d828      	bhi.n	8005bb2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0eb      	beq.n	8005b42 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005b6a:	f107 0308 	add.w	r3, r7, #8
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2110      	movs	r1, #16
 8005b72:	4821      	ldr	r0, [pc, #132]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005b74:	f7fc f8a1 	bl	8001cba <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005b82:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b88:	60da      	str	r2, [r3, #12]
 8005b8a:	e002      	b.n	8005b92 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005b9c:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	609a      	str	r2, [r3, #8]
 8005ba2:	e016      	b.n	8005bd2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005ba4:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005baa:	609a      	str	r2, [r3, #8]
 8005bac:	e011      	b.n	8005bd2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005bae:	bf00      	nop
 8005bb0:	e000      	b.n	8005bb4 <ethernetif_update_config+0xb0>
          goto error;
 8005bb2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	08db      	lsrs	r3, r3, #3
 8005bba:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2100      	movs	r1, #0
 8005bcc:	480a      	ldr	r0, [pc, #40]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005bce:	f7fc f8dc 	bl	8001d8a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4808      	ldr	r0, [pc, #32]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005bd6:	f7fc f99d 	bl	8001f14 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005bda:	4807      	ldr	r0, [pc, #28]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005bdc:	f7fc f93b 	bl	8001e56 <HAL_ETH_Start>
 8005be0:	e002      	b.n	8005be8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005be2:	4805      	ldr	r0, [pc, #20]	; (8005bf8 <ethernetif_update_config+0xf4>)
 8005be4:	f7fc f966 	bl	8001eb4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f807 	bl	8005bfc <ethernetif_notify_conn_changed>
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	2000b6b0 	.word	0x2000b6b0

08005bfc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c22:	2b84      	cmp	r3, #132	; 0x84
 8005c24:	d005      	beq.n	8005c32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	3303      	adds	r3, #3
 8005c30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c32:	68fb      	ldr	r3, [r7, #12]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c46:	f3ef 8305 	mrs	r3, IPSR
 8005c4a:	607b      	str	r3, [r7, #4]
  return(result);
 8005c4c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf14      	ite	ne
 8005c52:	2301      	movne	r3, #1
 8005c54:	2300      	moveq	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c68:	f001 fd7c 	bl	8007764 <vTaskStartScheduler>
  
  return osOK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005c76:	f7ff ffe3 	bl	8005c40 <inHandlerMode>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005c80:	f001 fe90 	bl	80079a4 <xTaskGetTickCountFromISR>
 8005c84:	4603      	mov	r3, r0
 8005c86:	e002      	b.n	8005c8e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005c88:	f001 fe7c 	bl	8007984 <xTaskGetTickCount>
 8005c8c:	4603      	mov	r3, r0
  }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c94:	b089      	sub	sp, #36	; 0x24
 8005c96:	af04      	add	r7, sp, #16
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d020      	beq.n	8005ce6 <osThreadCreate+0x54>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01c      	beq.n	8005ce6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685c      	ldr	r4, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681d      	ldr	r5, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691e      	ldr	r6, [r3, #16]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff ffa6 	bl	8005c10 <makeFreeRtosPriority>
 8005cc4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cce:	9202      	str	r2, [sp, #8]
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	9100      	str	r1, [sp, #0]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	4632      	mov	r2, r6
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f001 fb68 	bl	80073b0 <xTaskCreateStatic>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e01c      	b.n	8005d20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685c      	ldr	r4, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cf2:	b29e      	uxth	r6, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff ff88 	bl	8005c10 <makeFreeRtosPriority>
 8005d00:	4602      	mov	r2, r0
 8005d02:	f107 030c 	add.w	r3, r7, #12
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	9200      	str	r2, [sp, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4620      	mov	r0, r4
 8005d12:	f001 fbb0 	bl	8007476 <xTaskCreate>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d001      	beq.n	8005d20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e000      	b.n	8005d22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d20:	68fb      	ldr	r3, [r7, #12]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <osDelay+0x16>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	e000      	b.n	8005d42 <osDelay+0x18>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 fcd8 	bl	80076f8 <vTaskDelay>
  
  return osOK;
 8005d48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	4619      	mov	r1, r3
 8005d68:	2001      	movs	r0, #1
 8005d6a:	f000 fc92 	bl	8006692 <xQueueCreateMutexStatic>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	e003      	b.n	8005d7a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005d72:	2001      	movs	r0, #1
 8005d74:	f000 fc75 	bl	8006662 <xQueueCreateMutex>
 8005d78:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <osMutexWait+0x18>
    return osErrorParameter;
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	e03a      	b.n	8005e12 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da6:	d103      	bne.n	8005db0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e009      	b.n	8005dc4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <osMutexWait+0x40>
      ticks = 1;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005dc4:	f7ff ff3c 	bl	8005c40 <inHandlerMode>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d017      	beq.n	8005dfe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005dce:	f107 0308 	add.w	r3, r7, #8
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 f8ac 	bl	8006f34 <xQueueReceiveFromISR>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d001      	beq.n	8005de6 <osMutexWait+0x62>
      return osErrorOS;
 8005de2:	23ff      	movs	r3, #255	; 0xff
 8005de4:	e015      	b.n	8005e12 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d011      	beq.n	8005e10 <osMutexWait+0x8c>
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <osMutexWait+0x98>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	e008      	b.n	8005e10 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 ff83 	bl	8006d0c <xQueueSemaphoreTake>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d001      	beq.n	8005e10 <osMutexWait+0x8c>
    return osErrorOS;
 8005e0c:	23ff      	movs	r3, #255	; 0xff
 8005e0e:	e000      	b.n	8005e12 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	e000ed04 	.word	0xe000ed04

08005e20 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005e30:	f7ff ff06 	bl	8005c40 <inHandlerMode>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d016      	beq.n	8005e68 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005e3a:	f107 0308 	add.w	r3, r7, #8
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fde7 	bl	8006a14 <xQueueGiveFromISR>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d001      	beq.n	8005e50 <osMutexRelease+0x30>
      return osErrorOS;
 8005e4c:	23ff      	movs	r3, #255	; 0xff
 8005e4e:	e017      	b.n	8005e80 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d013      	beq.n	8005e7e <osMutexRelease+0x5e>
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <osMutexRelease+0x68>)
 8005e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	e00a      	b.n	8005e7e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fc2a 	bl	80066c8 <xQueueGenericSend>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d001      	beq.n	8005e7e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005e7a:	23ff      	movs	r3, #255	; 0xff
 8005e7c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00f      	beq.n	8005ebe <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d10a      	bne.n	8005eba <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	9200      	str	r2, [sp, #0]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f000 fad9 	bl	8006468 <xQueueGenericCreateStatic>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	e016      	b.n	8005ee8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e014      	b.n	8005ee8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d110      	bne.n	8005ee6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	2001      	movs	r0, #1
 8005eca:	f000 fb4f 	bl	800656c <xQueueGenericCreate>
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <osSemaphoreCreate+0x56>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2100      	movs	r1, #0
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 fbf3 	bl	80066c8 <xQueueGenericSend>
      return sema;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	e000      	b.n	8005ee8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005ee6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005f04:	2380      	movs	r3, #128	; 0x80
 8005f06:	e03a      	b.n	8005f7e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f12:	d103      	bne.n	8005f1c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	e009      	b.n	8005f30 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d006      	beq.n	8005f30 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <osSemaphoreWait+0x40>
      ticks = 1;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005f30:	f7ff fe86 	bl	8005c40 <inHandlerMode>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d017      	beq.n	8005f6a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005f3a:	f107 0308 	add.w	r3, r7, #8
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2100      	movs	r1, #0
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fff6 	bl	8006f34 <xQueueReceiveFromISR>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d001      	beq.n	8005f52 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005f4e:	23ff      	movs	r3, #255	; 0xff
 8005f50:	e015      	b.n	8005f7e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d011      	beq.n	8005f7c <osSemaphoreWait+0x8c>
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <osSemaphoreWait+0x98>)
 8005f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	e008      	b.n	8005f7c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005f6a:	68f9      	ldr	r1, [r7, #12]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fecd 	bl	8006d0c <xQueueSemaphoreTake>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d001      	beq.n	8005f7c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005f78:	23ff      	movs	r3, #255	; 0xff
 8005f7a:	e000      	b.n	8005f7e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005f9c:	f7ff fe50 	bl	8005c40 <inHandlerMode>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005fa6:	f107 0308 	add.w	r3, r7, #8
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fd31 	bl	8006a14 <xQueueGiveFromISR>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d001      	beq.n	8005fbc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005fb8:	23ff      	movs	r3, #255	; 0xff
 8005fba:	e017      	b.n	8005fec <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d013      	beq.n	8005fea <osSemaphoreRelease+0x5e>
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <osSemaphoreRelease+0x68>)
 8005fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	e00a      	b.n	8005fea <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2100      	movs	r1, #0
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fb74 	bl	80066c8 <xQueueGenericSend>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d001      	beq.n	8005fea <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005fe6:	23ff      	movs	r3, #255	; 0xff
 8005fe8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005fea:	68fb      	ldr	r3, [r7, #12]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	e000ed04 	.word	0xe000ed04

08005ff8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006000:	f7ff fe1e 	bl	8005c40 <inHandlerMode>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800600a:	2382      	movs	r3, #130	; 0x82
 800600c:	e003      	b.n	8006016 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 f856 	bl	80070c0 <vQueueDelete>

  return osOK; 
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800601e:	b590      	push	{r4, r7, lr}
 8006020:	b085      	sub	sp, #20
 8006022:	af02      	add	r7, sp, #8
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d011      	beq.n	8006054 <osMessageCreate+0x36>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00d      	beq.n	8006054 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6859      	ldr	r1, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	2400      	movs	r4, #0
 800604a:	9400      	str	r4, [sp, #0]
 800604c:	f000 fa0c 	bl	8006468 <xQueueGenericCreateStatic>
 8006050:	4603      	mov	r3, r0
 8006052:	e008      	b.n	8006066 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	4619      	mov	r1, r3
 8006060:	f000 fa84 	bl	800656c <xQueueGenericCreate>
 8006064:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	bd90      	pop	{r4, r7, pc}
	...

08006070 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800607c:	2300      	movs	r3, #0
 800607e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <osMessagePut+0x1e>
    ticks = 1;
 800608a:	2301      	movs	r3, #1
 800608c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800608e:	f7ff fdd7 	bl	8005c40 <inHandlerMode>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d018      	beq.n	80060ca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006098:	f107 0210 	add.w	r2, r7, #16
 800609c:	f107 0108 	add.w	r1, r7, #8
 80060a0:	2300      	movs	r3, #0
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fc16 	bl	80068d4 <xQueueGenericSendFromISR>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d001      	beq.n	80060b2 <osMessagePut+0x42>
      return osErrorOS;
 80060ae:	23ff      	movs	r3, #255	; 0xff
 80060b0:	e018      	b.n	80060e4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d014      	beq.n	80060e2 <osMessagePut+0x72>
 80060b8:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <osMessagePut+0x7c>)
 80060ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	e00b      	b.n	80060e2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80060ca:	f107 0108 	add.w	r1, r7, #8
 80060ce:	2300      	movs	r3, #0
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 faf8 	bl	80066c8 <xQueueGenericSend>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d001      	beq.n	80060e2 <osMessagePut+0x72>
      return osErrorOS;
 80060de:	23ff      	movs	r3, #255	; 0xff
 80060e0:	e000      	b.n	80060e4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	e000ed04 	.word	0xe000ed04

080060f0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80060f0:	b590      	push	{r4, r7, lr}
 80060f2:	b08b      	sub	sp, #44	; 0x2c
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	617b      	str	r3, [r7, #20]
    return event;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	461c      	mov	r4, r3
 8006112:	f107 0314 	add.w	r3, r7, #20
 8006116:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800611a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800611e:	e054      	b.n	80061ca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006120:	2300      	movs	r3, #0
 8006122:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800612e:	d103      	bne.n	8006138 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
 8006136:	e009      	b.n	800614c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <osMessageGet+0x5c>
      ticks = 1;
 8006148:	2301      	movs	r3, #1
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800614c:	f7ff fd78 	bl	8005c40 <inHandlerMode>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d01c      	beq.n	8006190 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006156:	f107 0220 	add.w	r2, r7, #32
 800615a:	f107 0314 	add.w	r3, r7, #20
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	68b8      	ldr	r0, [r7, #8]
 8006164:	f000 fee6 	bl	8006f34 <xQueueReceiveFromISR>
 8006168:	4603      	mov	r3, r0
 800616a:	2b01      	cmp	r3, #1
 800616c:	d102      	bne.n	8006174 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800616e:	2310      	movs	r3, #16
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	e001      	b.n	8006178 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006174:	2300      	movs	r3, #0
 8006176:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01d      	beq.n	80061ba <osMessageGet+0xca>
 800617e:	4b15      	ldr	r3, [pc, #84]	; (80061d4 <osMessageGet+0xe4>)
 8006180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	e014      	b.n	80061ba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006190:	f107 0314 	add.w	r3, r7, #20
 8006194:	3304      	adds	r3, #4
 8006196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006198:	4619      	mov	r1, r3
 800619a:	68b8      	ldr	r0, [r7, #8]
 800619c:	f000 fcd0 	bl	8006b40 <xQueueReceive>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d102      	bne.n	80061ac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80061a6:	2310      	movs	r3, #16
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e006      	b.n	80061ba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <osMessageGet+0xc6>
 80061b2:	2300      	movs	r3, #0
 80061b4:	e000      	b.n	80061b8 <osMessageGet+0xc8>
 80061b6:	2340      	movs	r3, #64	; 0x40
 80061b8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	461c      	mov	r4, r3
 80061be:	f107 0314 	add.w	r3, r7, #20
 80061c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	372c      	adds	r7, #44	; 0x2c
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd90      	pop	{r4, r7, pc}
 80061d2:	bf00      	nop
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80061e0:	f7ff fd2e 	bl	8005c40 <inHandlerMode>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 ff48 	bl	8007080 <uxQueueMessagesWaitingFromISR>
 80061f0:	4603      	mov	r3, r0
 80061f2:	e003      	b.n	80061fc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 ff23 	bl	8007040 <uxQueueMessagesWaiting>
 80061fa:	4603      	mov	r3, r0
  }
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800620c:	f7ff fd18 	bl	8005c40 <inHandlerMode>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <osMessageDelete+0x16>
    return osErrorISR;
 8006216:	2382      	movs	r3, #130	; 0x82
 8006218:	e003      	b.n	8006222 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 ff50 	bl	80070c0 <vQueueDelete>

  return osOK; 
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f103 0208 	add.w	r2, r3, #8
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006242:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f103 0208 	add.w	r2, r3, #8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f103 0208 	add.w	r2, r3, #8
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	601a      	str	r2, [r3, #0]
}
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e2:	d103      	bne.n	80062ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e00c      	b.n	8006306 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3308      	adds	r3, #8
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e002      	b.n	80062fa <vListInsert+0x2e>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	429a      	cmp	r2, r3
 8006304:	d2f6      	bcs.n	80062f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
}
 8006332:	bf00      	nop
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6892      	ldr	r2, [r2, #8]
 8006354:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6852      	ldr	r2, [r2, #4]
 800635e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	429a      	cmp	r2, r3
 8006368:	d103      	bne.n	8006372 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	1e5a      	subs	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10c      	bne.n	80063c2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	b672      	cpsid	i
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	b662      	cpsie	i
 80063bc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80063c2:	f002 f973 	bl	80086ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ce:	68f9      	ldr	r1, [r7, #12]
 80063d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063d2:	fb01 f303 	mul.w	r3, r1, r3
 80063d6:	441a      	add	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	3b01      	subs	r3, #1
 80063f4:	68f9      	ldr	r1, [r7, #12]
 80063f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063f8:	fb01 f303 	mul.w	r3, r1, r3
 80063fc:	441a      	add	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	22ff      	movs	r2, #255	; 0xff
 8006406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	22ff      	movs	r2, #255	; 0xff
 800640e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d114      	bne.n	8006442 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d01a      	beq.n	8006456 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3310      	adds	r3, #16
 8006424:	4618      	mov	r0, r3
 8006426:	f001 fc31 	bl	8007c8c <xTaskRemoveFromEventList>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d012      	beq.n	8006456 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <xQueueGenericReset+0xd0>)
 8006432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	e009      	b.n	8006456 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3310      	adds	r3, #16
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff feef 	bl	800622a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3324      	adds	r3, #36	; 0x24
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff feea 	bl	800622a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006456:	f002 f95d 	bl	8008714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800645a:	2301      	movs	r3, #1
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	e000ed04 	.word	0xe000ed04

08006468 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08e      	sub	sp, #56	; 0x38
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10c      	bne.n	8006496 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	b672      	cpsid	i
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	b662      	cpsie	i
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10c      	bne.n	80064b6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	b672      	cpsid	i
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	b662      	cpsie	i
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <xQueueGenericCreateStatic+0x5a>
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <xQueueGenericCreateStatic+0x5e>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <xQueueGenericCreateStatic+0x60>
 80064c6:	2300      	movs	r3, #0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10c      	bne.n	80064e6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	b672      	cpsid	i
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	b662      	cpsie	i
 80064e0:	623b      	str	r3, [r7, #32]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <xQueueGenericCreateStatic+0x8a>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <xQueueGenericCreateStatic+0x8e>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <xQueueGenericCreateStatic+0x90>
 80064f6:	2300      	movs	r3, #0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10c      	bne.n	8006516 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	b672      	cpsid	i
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	b662      	cpsie	i
 8006510:	61fb      	str	r3, [r7, #28]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006516:	2348      	movs	r3, #72	; 0x48
 8006518:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b48      	cmp	r3, #72	; 0x48
 800651e:	d00c      	beq.n	800653a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	b672      	cpsid	i
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	b662      	cpsie	i
 8006534:	61bb      	str	r3, [r7, #24]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800653a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00d      	beq.n	8006562 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800654e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	4613      	mov	r3, r2
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f847 	bl	80065f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006564:	4618      	mov	r0, r3
 8006566:	3730      	adds	r7, #48	; 0x30
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	; 0x28
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10c      	bne.n	800659a <xQueueGenericCreate+0x2e>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	b672      	cpsid	i
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	b662      	cpsie	i
 8006594:	613b      	str	r3, [r7, #16]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	e004      	b.n	80065b0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	3348      	adds	r3, #72	; 0x48
 80065b4:	4618      	mov	r0, r3
 80065b6:	f002 f9a5 	bl	8008904 <pvPortMalloc>
 80065ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d011      	beq.n	80065e6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	3348      	adds	r3, #72	; 0x48
 80065ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065d4:	79fa      	ldrb	r2, [r7, #7]
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	4613      	mov	r3, r2
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f805 	bl	80065f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065e6:	69bb      	ldr	r3, [r7, #24]
	}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e002      	b.n	8006612 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800661e:	2101      	movs	r1, #1
 8006620:	69b8      	ldr	r0, [r7, #24]
 8006622:	f7ff feb7 	bl	8006394 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00e      	beq.n	800665a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800664e:	2300      	movs	r3, #0
 8006650:	2200      	movs	r2, #0
 8006652:	2100      	movs	r1, #0
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f837 	bl	80066c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	4603      	mov	r3, r0
 800666a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800666c:	2301      	movs	r3, #1
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	461a      	mov	r2, r3
 8006678:	6939      	ldr	r1, [r7, #16]
 800667a:	6978      	ldr	r0, [r7, #20]
 800667c:	f7ff ff76 	bl	800656c <xQueueGenericCreate>
 8006680:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f7ff ffd3 	bl	800662e <prvInitialiseMutex>

		return xNewQueue;
 8006688:	68fb      	ldr	r3, [r7, #12]
	}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006692:	b580      	push	{r7, lr}
 8006694:	b088      	sub	sp, #32
 8006696:	af02      	add	r7, sp, #8
 8006698:	4603      	mov	r3, r0
 800669a:	6039      	str	r1, [r7, #0]
 800669c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800669e:	2301      	movs	r3, #1
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	2300      	movs	r3, #0
 80066a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2200      	movs	r2, #0
 80066ae:	6939      	ldr	r1, [r7, #16]
 80066b0:	6978      	ldr	r0, [r7, #20]
 80066b2:	f7ff fed9 	bl	8006468 <xQueueGenericCreateStatic>
 80066b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff ffb8 	bl	800662e <prvInitialiseMutex>

		return xNewQueue;
 80066be:	68fb      	ldr	r3, [r7, #12]
	}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08e      	sub	sp, #56	; 0x38
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066d6:	2300      	movs	r3, #0
 80066d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10c      	bne.n	80066fe <xQueueGenericSend+0x36>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	b672      	cpsid	i
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	b662      	cpsie	i
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066fa:	bf00      	nop
 80066fc:	e7fe      	b.n	80066fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d103      	bne.n	800670c <xQueueGenericSend+0x44>
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <xQueueGenericSend+0x48>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <xQueueGenericSend+0x4a>
 8006710:	2300      	movs	r3, #0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10c      	bne.n	8006730 <xQueueGenericSend+0x68>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	b672      	cpsid	i
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	b662      	cpsie	i
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d103      	bne.n	800673e <xQueueGenericSend+0x76>
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	2b01      	cmp	r3, #1
 800673c:	d101      	bne.n	8006742 <xQueueGenericSend+0x7a>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <xQueueGenericSend+0x7c>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10c      	bne.n	8006762 <xQueueGenericSend+0x9a>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	b672      	cpsid	i
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	b662      	cpsie	i
 800675c:	623b      	str	r3, [r7, #32]
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006762:	f001 fc57 	bl	8008014 <xTaskGetSchedulerState>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d102      	bne.n	8006772 <xQueueGenericSend+0xaa>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <xQueueGenericSend+0xae>
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <xQueueGenericSend+0xb0>
 8006776:	2300      	movs	r3, #0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10c      	bne.n	8006796 <xQueueGenericSend+0xce>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	b672      	cpsid	i
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	b662      	cpsie	i
 8006790:	61fb      	str	r3, [r7, #28]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006796:	f001 ff89 	bl	80086ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d302      	bcc.n	80067ac <xQueueGenericSend+0xe4>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d129      	bne.n	8006800 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067b2:	f000 fcc2 	bl	800713a <prvCopyDataToQueue>
 80067b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d010      	beq.n	80067e2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	3324      	adds	r3, #36	; 0x24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 fa61 	bl	8007c8c <xTaskRemoveFromEventList>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d013      	beq.n	80067f8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067d0:	4b3f      	ldr	r3, [pc, #252]	; (80068d0 <xQueueGenericSend+0x208>)
 80067d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	e00a      	b.n	80067f8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067e8:	4b39      	ldr	r3, [pc, #228]	; (80068d0 <xQueueGenericSend+0x208>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067f8:	f001 ff8c 	bl	8008714 <vPortExitCritical>
				return pdPASS;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e063      	b.n	80068c8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d103      	bne.n	800680e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006806:	f001 ff85 	bl	8008714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800680a:	2300      	movs	r3, #0
 800680c:	e05c      	b.n	80068c8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800680e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006810:	2b00      	cmp	r3, #0
 8006812:	d106      	bne.n	8006822 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006814:	f107 0314 	add.w	r3, r7, #20
 8006818:	4618      	mov	r0, r3
 800681a:	f001 fa9b 	bl	8007d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800681e:	2301      	movs	r3, #1
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006822:	f001 ff77 	bl	8008714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006826:	f001 f801 	bl	800782c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800682a:	f001 ff3f 	bl	80086ac <vPortEnterCritical>
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006834:	b25b      	sxtb	r3, r3
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800683a:	d103      	bne.n	8006844 <xQueueGenericSend+0x17c>
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800684a:	b25b      	sxtb	r3, r3
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006850:	d103      	bne.n	800685a <xQueueGenericSend+0x192>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800685a:	f001 ff5b 	bl	8008714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800685e:	1d3a      	adds	r2, r7, #4
 8006860:	f107 0314 	add.w	r3, r7, #20
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f001 fa8a 	bl	8007d80 <xTaskCheckForTimeOut>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d124      	bne.n	80068bc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006874:	f000 fd59 	bl	800732a <prvIsQueueFull>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d018      	beq.n	80068b0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	3310      	adds	r3, #16
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	4611      	mov	r1, r2
 8006886:	4618      	mov	r0, r3
 8006888:	f001 f9da 	bl	8007c40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800688c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800688e:	f000 fce4 	bl	800725a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006892:	f000 ffd9 	bl	8007848 <xTaskResumeAll>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	f47f af7c 	bne.w	8006796 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800689e:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <xQueueGenericSend+0x208>)
 80068a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	e772      	b.n	8006796 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068b2:	f000 fcd2 	bl	800725a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068b6:	f000 ffc7 	bl	8007848 <xTaskResumeAll>
 80068ba:	e76c      	b.n	8006796 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068be:	f000 fccc 	bl	800725a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068c2:	f000 ffc1 	bl	8007848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3738      	adds	r7, #56	; 0x38
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	e000ed04 	.word	0xe000ed04

080068d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08e      	sub	sp, #56	; 0x38
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10c      	bne.n	8006906 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	b672      	cpsid	i
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	b662      	cpsie	i
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <xQueueGenericSendFromISR+0x40>
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <xQueueGenericSendFromISR+0x44>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <xQueueGenericSendFromISR+0x46>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10c      	bne.n	8006938 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006922:	b672      	cpsid	i
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	b662      	cpsie	i
 8006932:	623b      	str	r3, [r7, #32]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d103      	bne.n	8006946 <xQueueGenericSendFromISR+0x72>
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <xQueueGenericSendFromISR+0x76>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <xQueueGenericSendFromISR+0x78>
 800694a:	2300      	movs	r3, #0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10c      	bne.n	800696a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	b672      	cpsid	i
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	b662      	cpsie	i
 8006964:	61fb      	str	r3, [r7, #28]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800696a:	f001 ff87 	bl	800887c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800696e:	f3ef 8211 	mrs	r2, BASEPRI
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	b672      	cpsid	i
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	b662      	cpsie	i
 8006986:	61ba      	str	r2, [r7, #24]
 8006988:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800698a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800698c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	429a      	cmp	r2, r3
 8006998:	d302      	bcc.n	80069a0 <xQueueGenericSendFromISR+0xcc>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d12c      	bne.n	80069fa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069b0:	f000 fbc3 	bl	800713a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069bc:	d112      	bne.n	80069e4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d016      	beq.n	80069f4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	3324      	adds	r3, #36	; 0x24
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 f95e 	bl	8007c8c <xTaskRemoveFromEventList>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00e      	beq.n	80069f4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e007      	b.n	80069f4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069e8:	3301      	adds	r3, #1
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	b25a      	sxtb	r2, r3
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80069f4:	2301      	movs	r3, #1
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80069f8:	e001      	b.n	80069fe <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3738      	adds	r7, #56	; 0x38
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08e      	sub	sp, #56	; 0x38
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10c      	bne.n	8006a42 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	b672      	cpsid	i
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	b662      	cpsie	i
 8006a3c:	623b      	str	r3, [r7, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00c      	beq.n	8006a64 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	b672      	cpsid	i
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	b662      	cpsie	i
 8006a5e:	61fb      	str	r3, [r7, #28]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <xQueueGiveFromISR+0x60>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <xQueueGiveFromISR+0x64>
 8006a74:	2301      	movs	r3, #1
 8006a76:	e000      	b.n	8006a7a <xQueueGiveFromISR+0x66>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10c      	bne.n	8006a98 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	b672      	cpsid	i
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	b662      	cpsie	i
 8006a92:	61bb      	str	r3, [r7, #24]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a98:	f001 fef0 	bl	800887c <vPortValidateInterruptPriority>
	__asm volatile
 8006a9c:	f3ef 8211 	mrs	r2, BASEPRI
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	b672      	cpsid	i
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	b662      	cpsie	i
 8006ab4:	617a      	str	r2, [r7, #20]
 8006ab6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ab8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d22b      	bcs.n	8006b24 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ade:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ae6:	d112      	bne.n	8006b0e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d016      	beq.n	8006b1e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	3324      	adds	r3, #36	; 0x24
 8006af4:	4618      	mov	r0, r3
 8006af6:	f001 f8c9 	bl	8007c8c <xTaskRemoveFromEventList>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00e      	beq.n	8006b1e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00b      	beq.n	8006b1e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	e007      	b.n	8006b1e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b12:	3301      	adds	r3, #1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	b25a      	sxtb	r2, r3
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
 8006b22:	e001      	b.n	8006b28 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f383 8811 	msr	BASEPRI, r3
}
 8006b32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3738      	adds	r7, #56	; 0x38
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08c      	sub	sp, #48	; 0x30
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10c      	bne.n	8006b74 <xQueueReceive+0x34>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	b672      	cpsid	i
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	b662      	cpsie	i
 8006b6e:	623b      	str	r3, [r7, #32]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d103      	bne.n	8006b82 <xQueueReceive+0x42>
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <xQueueReceive+0x46>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <xQueueReceive+0x48>
 8006b86:	2300      	movs	r3, #0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10c      	bne.n	8006ba6 <xQueueReceive+0x66>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	b672      	cpsid	i
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	b662      	cpsie	i
 8006ba0:	61fb      	str	r3, [r7, #28]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ba6:	f001 fa35 	bl	8008014 <xTaskGetSchedulerState>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <xQueueReceive+0x76>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <xQueueReceive+0x7a>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <xQueueReceive+0x7c>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10c      	bne.n	8006bda <xQueueReceive+0x9a>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	b672      	cpsid	i
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	b662      	cpsie	i
 8006bd4:	61bb      	str	r3, [r7, #24]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bda:	f001 fd67 	bl	80086ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01f      	beq.n	8006c2a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bee:	f000 fb0e 	bl	800720e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	1e5a      	subs	r2, r3, #1
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00f      	beq.n	8006c22 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	3310      	adds	r3, #16
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 f840 	bl	8007c8c <xTaskRemoveFromEventList>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c12:	4b3d      	ldr	r3, [pc, #244]	; (8006d08 <xQueueReceive+0x1c8>)
 8006c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c22:	f001 fd77 	bl	8008714 <vPortExitCritical>
				return pdPASS;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e069      	b.n	8006cfe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c30:	f001 fd70 	bl	8008714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e062      	b.n	8006cfe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c3e:	f107 0310 	add.w	r3, r7, #16
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 f886 	bl	8007d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c4c:	f001 fd62 	bl	8008714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c50:	f000 fdec 	bl	800782c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c54:	f001 fd2a 	bl	80086ac <vPortEnterCritical>
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c5e:	b25b      	sxtb	r3, r3
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c64:	d103      	bne.n	8006c6e <xQueueReceive+0x12e>
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c7a:	d103      	bne.n	8006c84 <xQueueReceive+0x144>
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c84:	f001 fd46 	bl	8008714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c88:	1d3a      	adds	r2, r7, #4
 8006c8a:	f107 0310 	add.w	r3, r7, #16
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 f875 	bl	8007d80 <xTaskCheckForTimeOut>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d123      	bne.n	8006ce4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9e:	f000 fb2e 	bl	80072fe <prvIsQueueEmpty>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d017      	beq.n	8006cd8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	3324      	adds	r3, #36	; 0x24
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 ffc5 	bl	8007c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb8:	f000 facf 	bl	800725a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cbc:	f000 fdc4 	bl	8007848 <xTaskResumeAll>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d189      	bne.n	8006bda <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006cc6:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <xQueueReceive+0x1c8>)
 8006cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	e780      	b.n	8006bda <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cda:	f000 fabe 	bl	800725a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cde:	f000 fdb3 	bl	8007848 <xTaskResumeAll>
 8006ce2:	e77a      	b.n	8006bda <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce6:	f000 fab8 	bl	800725a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cea:	f000 fdad 	bl	8007848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf0:	f000 fb05 	bl	80072fe <prvIsQueueEmpty>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f43f af6f 	beq.w	8006bda <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3730      	adds	r7, #48	; 0x30
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	e000ed04 	.word	0xe000ed04

08006d0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08e      	sub	sp, #56	; 0x38
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10c      	bne.n	8006d42 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	b672      	cpsid	i
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	b662      	cpsie	i
 8006d3c:	623b      	str	r3, [r7, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00c      	beq.n	8006d64 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	b672      	cpsid	i
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	b662      	cpsie	i
 8006d5e:	61fb      	str	r3, [r7, #28]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d64:	f001 f956 	bl	8008014 <xTaskGetSchedulerState>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <xQueueSemaphoreTake+0x68>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <xQueueSemaphoreTake+0x6c>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <xQueueSemaphoreTake+0x6e>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10c      	bne.n	8006d98 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	b672      	cpsid	i
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	b662      	cpsie	i
 8006d92:	61bb      	str	r3, [r7, #24]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d98:	f001 fc88 	bl	80086ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d024      	beq.n	8006df2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	1e5a      	subs	r2, r3, #1
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006db8:	f001 faf2 	bl	80083a0 <pvTaskIncrementMutexHeldCount>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00f      	beq.n	8006dea <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	3310      	adds	r3, #16
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 ff5c 	bl	8007c8c <xTaskRemoveFromEventList>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d007      	beq.n	8006dea <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dda:	4b55      	ldr	r3, [pc, #340]	; (8006f30 <xQueueSemaphoreTake+0x224>)
 8006ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dea:	f001 fc93 	bl	8008714 <vPortExitCritical>
				return pdPASS;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e099      	b.n	8006f26 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d113      	bne.n	8006e20 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	b672      	cpsid	i
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	b662      	cpsie	i
 8006e12:	617b      	str	r3, [r7, #20]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e18:	f001 fc7c 	bl	8008714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e082      	b.n	8006f26 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e26:	f107 030c 	add.w	r3, r7, #12
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 ff92 	bl	8007d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e30:	2301      	movs	r3, #1
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e34:	f001 fc6e 	bl	8008714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e38:	f000 fcf8 	bl	800782c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e3c:	f001 fc36 	bl	80086ac <vPortEnterCritical>
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e46:	b25b      	sxtb	r3, r3
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e4c:	d103      	bne.n	8006e56 <xQueueSemaphoreTake+0x14a>
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e62:	d103      	bne.n	8006e6c <xQueueSemaphoreTake+0x160>
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e6c:	f001 fc52 	bl	8008714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e70:	463a      	mov	r2, r7
 8006e72:	f107 030c 	add.w	r3, r7, #12
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 ff81 	bl	8007d80 <xTaskCheckForTimeOut>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d132      	bne.n	8006eea <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e86:	f000 fa3a 	bl	80072fe <prvIsQueueEmpty>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d026      	beq.n	8006ede <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006e98:	f001 fc08 	bl	80086ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 f8d5 	bl	8008050 <xTaskPriorityInherit>
 8006ea6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ea8:	f001 fc34 	bl	8008714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	3324      	adds	r3, #36	; 0x24
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fec3 	bl	8007c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ebc:	f000 f9cd 	bl	800725a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ec0:	f000 fcc2 	bl	8007848 <xTaskResumeAll>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f47f af66 	bne.w	8006d98 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006ecc:	4b18      	ldr	r3, [pc, #96]	; (8006f30 <xQueueSemaphoreTake+0x224>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	e75c      	b.n	8006d98 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ee0:	f000 f9bb 	bl	800725a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ee4:	f000 fcb0 	bl	8007848 <xTaskResumeAll>
 8006ee8:	e756      	b.n	8006d98 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006eea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eec:	f000 f9b5 	bl	800725a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ef0:	f000 fcaa 	bl	8007848 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ef6:	f000 fa02 	bl	80072fe <prvIsQueueEmpty>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f43f af4b 	beq.w	8006d98 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00d      	beq.n	8006f24 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006f08:	f001 fbd0 	bl	80086ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f0e:	f000 f8fc 	bl	800710a <prvGetDisinheritPriorityAfterTimeout>
 8006f12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 f9a2 	bl	8008264 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f20:	f001 fbf8 	bl	8008714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3738      	adds	r7, #56	; 0x38
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	e000ed04 	.word	0xe000ed04

08006f34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08e      	sub	sp, #56	; 0x38
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10c      	bne.n	8006f64 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	b672      	cpsid	i
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	b662      	cpsie	i
 8006f5e:	623b      	str	r3, [r7, #32]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d103      	bne.n	8006f72 <xQueueReceiveFromISR+0x3e>
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <xQueueReceiveFromISR+0x42>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <xQueueReceiveFromISR+0x44>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10c      	bne.n	8006f96 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	b672      	cpsid	i
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	b662      	cpsie	i
 8006f90:	61fb      	str	r3, [r7, #28]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f96:	f001 fc71 	bl	800887c <vPortValidateInterruptPriority>
	__asm volatile
 8006f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	b672      	cpsid	i
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	b662      	cpsie	i
 8006fb2:	61ba      	str	r2, [r7, #24]
 8006fb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d02f      	beq.n	8007026 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fd4:	f000 f91b 	bl	800720e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	1e5a      	subs	r2, r3, #1
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006fe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe8:	d112      	bne.n	8007010 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d016      	beq.n	8007020 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	3310      	adds	r3, #16
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fe48 	bl	8007c8c <xTaskRemoveFromEventList>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00e      	beq.n	8007020 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00b      	beq.n	8007020 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e007      	b.n	8007020 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007014:	3301      	adds	r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	b25a      	sxtb	r2, r3
 800701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007020:	2301      	movs	r3, #1
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
 8007024:	e001      	b.n	800702a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007026:	2300      	movs	r3, #0
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f383 8811 	msr	BASEPRI, r3
}
 8007034:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007038:	4618      	mov	r0, r3
 800703a:	3738      	adds	r7, #56	; 0x38
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10c      	bne.n	8007068 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	b672      	cpsid	i
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	b662      	cpsie	i
 8007062:	60bb      	str	r3, [r7, #8]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007068:	f001 fb20 	bl	80086ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007072:	f001 fb4f 	bl	8008714 <vPortExitCritical>

	return uxReturn;
 8007076:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10c      	bne.n	80070ac <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	b672      	cpsid	i
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	b662      	cpsie	i
 80070a6:	60fb      	str	r3, [r7, #12]
}
 80070a8:	bf00      	nop
 80070aa:	e7fe      	b.n	80070aa <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80070b2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80070b4:	4618      	mov	r0, r3
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10c      	bne.n	80070ec <vQueueDelete+0x2c>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	b672      	cpsid	i
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	b662      	cpsie	i
 80070e6:	60bb      	str	r3, [r7, #8]
}
 80070e8:	bf00      	nop
 80070ea:	e7fe      	b.n	80070ea <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f935 	bl	800735c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d102      	bne.n	8007102 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f001 fccb 	bl	8008a98 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007102:	bf00      	nop
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	2b00      	cmp	r3, #0
 8007118:	d006      	beq.n	8007128 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f1c3 0307 	rsb	r3, r3, #7
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e001      	b.n	800712c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800712c:	68fb      	ldr	r3, [r7, #12]
	}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b086      	sub	sp, #24
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10d      	bne.n	8007174 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d14d      	bne.n	80071fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fff3 	bl	8008150 <xTaskPriorityDisinherit>
 800716a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	609a      	str	r2, [r3, #8]
 8007172:	e043      	b.n	80071fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d119      	bne.n	80071ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6858      	ldr	r0, [r3, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	461a      	mov	r2, r3
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	f014 fbad 	bl	801b8e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	441a      	add	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d32b      	bcc.n	80071fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	605a      	str	r2, [r3, #4]
 80071ac:	e026      	b.n	80071fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68d8      	ldr	r0, [r3, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	461a      	mov	r2, r3
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	f014 fb93 	bl	801b8e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	425b      	negs	r3, r3
 80071c8:	441a      	add	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d207      	bcs.n	80071ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	425b      	negs	r3, r3
 80071e4:	441a      	add	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d105      	bne.n	80071fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007204:	697b      	ldr	r3, [r7, #20]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	2b00      	cmp	r3, #0
 800721e:	d018      	beq.n	8007252 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	441a      	add	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	429a      	cmp	r2, r3
 8007238:	d303      	bcc.n	8007242 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68d9      	ldr	r1, [r3, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	461a      	mov	r2, r3
 800724c:	6838      	ldr	r0, [r7, #0]
 800724e:	f014 fb49 	bl	801b8e4 <memcpy>
	}
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007262:	f001 fa23 	bl	80086ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800726c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800726e:	e011      	b.n	8007294 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b00      	cmp	r3, #0
 8007276:	d012      	beq.n	800729e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3324      	adds	r3, #36	; 0x24
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fd05 	bl	8007c8c <xTaskRemoveFromEventList>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007288:	f000 fde0 	bl	8007e4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	3b01      	subs	r3, #1
 8007290:	b2db      	uxtb	r3, r3
 8007292:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007298:	2b00      	cmp	r3, #0
 800729a:	dce9      	bgt.n	8007270 <prvUnlockQueue+0x16>
 800729c:	e000      	b.n	80072a0 <prvUnlockQueue+0x46>
					break;
 800729e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	22ff      	movs	r2, #255	; 0xff
 80072a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80072a8:	f001 fa34 	bl	8008714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072ac:	f001 f9fe 	bl	80086ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072b8:	e011      	b.n	80072de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d012      	beq.n	80072e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3310      	adds	r3, #16
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fce0 	bl	8007c8c <xTaskRemoveFromEventList>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072d2:	f000 fdbb 	bl	8007e4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	3b01      	subs	r3, #1
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	dce9      	bgt.n	80072ba <prvUnlockQueue+0x60>
 80072e6:	e000      	b.n	80072ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	22ff      	movs	r2, #255	; 0xff
 80072ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072f2:	f001 fa0f 	bl	8008714 <vPortExitCritical>
}
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007306:	f001 f9d1 	bl	80086ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	2b00      	cmp	r3, #0
 8007310:	d102      	bne.n	8007318 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007312:	2301      	movs	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e001      	b.n	800731c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800731c:	f001 f9fa 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8007320:	68fb      	ldr	r3, [r7, #12]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007332:	f001 f9bb 	bl	80086ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	429a      	cmp	r2, r3
 8007340:	d102      	bne.n	8007348 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007342:	2301      	movs	r3, #1
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	e001      	b.n	800734c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800734c:	f001 f9e2 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8007350:	68fb      	ldr	r3, [r7, #12]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	e016      	b.n	8007398 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800736a:	4a10      	ldr	r2, [pc, #64]	; (80073ac <vQueueUnregisterQueue+0x50>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	4413      	add	r3, r2
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	d10b      	bne.n	8007392 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800737a:	4a0c      	ldr	r2, [pc, #48]	; (80073ac <vQueueUnregisterQueue+0x50>)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2100      	movs	r1, #0
 8007380:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007384:	4a09      	ldr	r2, [pc, #36]	; (80073ac <vQueueUnregisterQueue+0x50>)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	4413      	add	r3, r2
 800738c:	2200      	movs	r2, #0
 800738e:	605a      	str	r2, [r3, #4]
				break;
 8007390:	e006      	b.n	80073a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3301      	adds	r3, #1
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b07      	cmp	r3, #7
 800739c:	d9e5      	bls.n	800736a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	2000cec8 	.word	0x2000cec8

080073b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08e      	sub	sp, #56	; 0x38
 80073b4:	af04      	add	r7, sp, #16
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10c      	bne.n	80073de <xTaskCreateStatic+0x2e>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	b672      	cpsid	i
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	b662      	cpsie	i
 80073d8:	623b      	str	r3, [r7, #32]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10c      	bne.n	80073fe <xTaskCreateStatic+0x4e>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	b672      	cpsid	i
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	b662      	cpsie	i
 80073f8:	61fb      	str	r3, [r7, #28]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073fe:	2354      	movs	r3, #84	; 0x54
 8007400:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	2b54      	cmp	r3, #84	; 0x54
 8007406:	d00c      	beq.n	8007422 <xTaskCreateStatic+0x72>
	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740c:	b672      	cpsid	i
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	b662      	cpsie	i
 800741c:	61bb      	str	r3, [r7, #24]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007422:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01e      	beq.n	8007468 <xTaskCreateStatic+0xb8>
 800742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01b      	beq.n	8007468 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007438:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	2202      	movs	r2, #2
 800743e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007442:	2300      	movs	r3, #0
 8007444:	9303      	str	r3, [sp, #12]
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	9302      	str	r3, [sp, #8]
 800744a:	f107 0314 	add.w	r3, r7, #20
 800744e:	9301      	str	r3, [sp, #4]
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 f850 	bl	8007500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007462:	f000 f8df 	bl	8007624 <prvAddNewTaskToReadyList>
 8007466:	e001      	b.n	800746c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800746c:	697b      	ldr	r3, [r7, #20]
	}
 800746e:	4618      	mov	r0, r3
 8007470:	3728      	adds	r7, #40	; 0x28
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007476:	b580      	push	{r7, lr}
 8007478:	b08c      	sub	sp, #48	; 0x30
 800747a:	af04      	add	r7, sp, #16
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	4613      	mov	r3, r2
 8007484:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4618      	mov	r0, r3
 800748c:	f001 fa3a 	bl	8008904 <pvPortMalloc>
 8007490:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00e      	beq.n	80074b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007498:	2054      	movs	r0, #84	; 0x54
 800749a:	f001 fa33 	bl	8008904 <pvPortMalloc>
 800749e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	631a      	str	r2, [r3, #48]	; 0x30
 80074ac:	e005      	b.n	80074ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074ae:	6978      	ldr	r0, [r7, #20]
 80074b0:	f001 faf2 	bl	8008a98 <vPortFree>
 80074b4:	e001      	b.n	80074ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d017      	beq.n	80074f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074c8:	88fa      	ldrh	r2, [r7, #6]
 80074ca:	2300      	movs	r3, #0
 80074cc:	9303      	str	r3, [sp, #12]
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	9302      	str	r3, [sp, #8]
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 f80e 	bl	8007500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074e4:	69f8      	ldr	r0, [r7, #28]
 80074e6:	f000 f89d 	bl	8007624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074ea:	2301      	movs	r3, #1
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	e002      	b.n	80074f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074f6:	69bb      	ldr	r3, [r7, #24]
	}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3720      	adds	r7, #32
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	461a      	mov	r2, r3
 8007518:	21a5      	movs	r1, #165	; 0xa5
 800751a:	f014 f9f1 	bl	801b900 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007528:	440b      	add	r3, r1
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f023 0307 	bic.w	r3, r3, #7
 8007536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00c      	beq.n	800755c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	b672      	cpsid	i
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	b662      	cpsie	i
 8007556:	617b      	str	r3, [r7, #20]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01f      	beq.n	80075a2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	e012      	b.n	800758e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	7819      	ldrb	r1, [r3, #0]
 8007570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	3334      	adds	r3, #52	; 0x34
 8007578:	460a      	mov	r2, r1
 800757a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	4413      	add	r3, r2
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d006      	beq.n	8007596 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	3301      	adds	r3, #1
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	2b0f      	cmp	r3, #15
 8007592:	d9e9      	bls.n	8007568 <prvInitialiseNewTask+0x68>
 8007594:	e000      	b.n	8007598 <prvInitialiseNewTask+0x98>
			{
				break;
 8007596:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075a0:	e003      	b.n	80075aa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	2b06      	cmp	r3, #6
 80075ae:	d901      	bls.n	80075b4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075b0:	2306      	movs	r3, #6
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	2200      	movs	r2, #0
 80075c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	3304      	adds	r3, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fe4d 	bl	800626a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	3318      	adds	r3, #24
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fe48 	bl	800626a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	f1c3 0207 	rsb	r2, r3, #7
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	2200      	movs	r2, #0
 80075f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	68f9      	ldr	r1, [r7, #12]
 8007602:	69b8      	ldr	r0, [r7, #24]
 8007604:	f000 ff46 	bl	8008494 <pxPortInitialiseStack>
 8007608:	4602      	mov	r2, r0
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800761a:	bf00      	nop
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800762c:	f001 f83e 	bl	80086ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007630:	4b2a      	ldr	r3, [pc, #168]	; (80076dc <prvAddNewTaskToReadyList+0xb8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	4a29      	ldr	r2, [pc, #164]	; (80076dc <prvAddNewTaskToReadyList+0xb8>)
 8007638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800763a:	4b29      	ldr	r3, [pc, #164]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007642:	4a27      	ldr	r2, [pc, #156]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007648:	4b24      	ldr	r3, [pc, #144]	; (80076dc <prvAddNewTaskToReadyList+0xb8>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d110      	bne.n	8007672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007650:	f000 fc20 	bl	8007e94 <prvInitialiseTaskLists>
 8007654:	e00d      	b.n	8007672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007656:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <prvAddNewTaskToReadyList+0xc0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d109      	bne.n	8007672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800765e:	4b20      	ldr	r3, [pc, #128]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	429a      	cmp	r2, r3
 800766a:	d802      	bhi.n	8007672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800766c:	4a1c      	ldr	r2, [pc, #112]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007672:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <prvAddNewTaskToReadyList+0xc4>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	4a1b      	ldr	r2, [pc, #108]	; (80076e8 <prvAddNewTaskToReadyList+0xc4>)
 800767a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	2201      	movs	r2, #1
 8007682:	409a      	lsls	r2, r3
 8007684:	4b19      	ldr	r3, [pc, #100]	; (80076ec <prvAddNewTaskToReadyList+0xc8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4313      	orrs	r3, r2
 800768a:	4a18      	ldr	r2, [pc, #96]	; (80076ec <prvAddNewTaskToReadyList+0xc8>)
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <prvAddNewTaskToReadyList+0xcc>)
 800769c:	441a      	add	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f7fe fded 	bl	8006284 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076aa:	f001 f833 	bl	8008714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076ae:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <prvAddNewTaskToReadyList+0xc0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00e      	beq.n	80076d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076b6:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <prvAddNewTaskToReadyList+0xbc>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d207      	bcs.n	80076d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <prvAddNewTaskToReadyList+0xd0>)
 80076c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20000a00 	.word	0x20000a00
 80076e0:	20000900 	.word	0x20000900
 80076e4:	20000a0c 	.word	0x20000a0c
 80076e8:	20000a1c 	.word	0x20000a1c
 80076ec:	20000a08 	.word	0x20000a08
 80076f0:	20000904 	.word	0x20000904
 80076f4:	e000ed04 	.word	0xe000ed04

080076f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d019      	beq.n	800773e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800770a:	4b14      	ldr	r3, [pc, #80]	; (800775c <vTaskDelay+0x64>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00c      	beq.n	800772c <vTaskDelay+0x34>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	b672      	cpsid	i
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	b662      	cpsie	i
 8007726:	60bb      	str	r3, [r7, #8]
}
 8007728:	bf00      	nop
 800772a:	e7fe      	b.n	800772a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800772c:	f000 f87e 	bl	800782c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fe48 	bl	80083c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007738:	f000 f886 	bl	8007848 <xTaskResumeAll>
 800773c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007744:	4b06      	ldr	r3, [pc, #24]	; (8007760 <vTaskDelay+0x68>)
 8007746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000a28 	.word	0x20000a28
 8007760:	e000ed04 	.word	0xe000ed04

08007764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	; 0x28
 8007768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007772:	463a      	mov	r2, r7
 8007774:	1d39      	adds	r1, r7, #4
 8007776:	f107 0308 	add.w	r3, r7, #8
 800777a:	4618      	mov	r0, r3
 800777c:	f7f8 ff50 	bl	8000620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	9202      	str	r2, [sp, #8]
 8007788:	9301      	str	r3, [sp, #4]
 800778a:	2300      	movs	r3, #0
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	2300      	movs	r3, #0
 8007790:	460a      	mov	r2, r1
 8007792:	4920      	ldr	r1, [pc, #128]	; (8007814 <vTaskStartScheduler+0xb0>)
 8007794:	4820      	ldr	r0, [pc, #128]	; (8007818 <vTaskStartScheduler+0xb4>)
 8007796:	f7ff fe0b 	bl	80073b0 <xTaskCreateStatic>
 800779a:	4603      	mov	r3, r0
 800779c:	4a1f      	ldr	r2, [pc, #124]	; (800781c <vTaskStartScheduler+0xb8>)
 800779e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077a0:	4b1e      	ldr	r3, [pc, #120]	; (800781c <vTaskStartScheduler+0xb8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077a8:	2301      	movs	r3, #1
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	e001      	b.n	80077b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d118      	bne.n	80077ea <vTaskStartScheduler+0x86>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	b672      	cpsid	i
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	b662      	cpsie	i
 80077cc:	613b      	str	r3, [r7, #16]
}
 80077ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077d0:	4b13      	ldr	r3, [pc, #76]	; (8007820 <vTaskStartScheduler+0xbc>)
 80077d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077d8:	4b12      	ldr	r3, [pc, #72]	; (8007824 <vTaskStartScheduler+0xc0>)
 80077da:	2201      	movs	r2, #1
 80077dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077de:	4b12      	ldr	r3, [pc, #72]	; (8007828 <vTaskStartScheduler+0xc4>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077e4:	f000 fee4 	bl	80085b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077e8:	e010      	b.n	800780c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077f0:	d10c      	bne.n	800780c <vTaskStartScheduler+0xa8>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	b672      	cpsid	i
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	b662      	cpsie	i
 8007806:	60fb      	str	r3, [r7, #12]
}
 8007808:	bf00      	nop
 800780a:	e7fe      	b.n	800780a <vTaskStartScheduler+0xa6>
}
 800780c:	bf00      	nop
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	0801cce8 	.word	0x0801cce8
 8007818:	08007e65 	.word	0x08007e65
 800781c:	20000a24 	.word	0x20000a24
 8007820:	20000a20 	.word	0x20000a20
 8007824:	20000a0c 	.word	0x20000a0c
 8007828:	20000a04 	.word	0x20000a04

0800782c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <vTaskSuspendAll+0x18>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3301      	adds	r3, #1
 8007836:	4a03      	ldr	r2, [pc, #12]	; (8007844 <vTaskSuspendAll+0x18>)
 8007838:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800783a:	bf00      	nop
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	20000a28 	.word	0x20000a28

08007848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007856:	4b42      	ldr	r3, [pc, #264]	; (8007960 <xTaskResumeAll+0x118>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10c      	bne.n	8007878 <xTaskResumeAll+0x30>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	b672      	cpsid	i
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	b662      	cpsie	i
 8007872:	603b      	str	r3, [r7, #0]
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007878:	f000 ff18 	bl	80086ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800787c:	4b38      	ldr	r3, [pc, #224]	; (8007960 <xTaskResumeAll+0x118>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3b01      	subs	r3, #1
 8007882:	4a37      	ldr	r2, [pc, #220]	; (8007960 <xTaskResumeAll+0x118>)
 8007884:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007886:	4b36      	ldr	r3, [pc, #216]	; (8007960 <xTaskResumeAll+0x118>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d161      	bne.n	8007952 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800788e:	4b35      	ldr	r3, [pc, #212]	; (8007964 <xTaskResumeAll+0x11c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d05d      	beq.n	8007952 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007896:	e02e      	b.n	80078f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007898:	4b33      	ldr	r3, [pc, #204]	; (8007968 <xTaskResumeAll+0x120>)
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3318      	adds	r3, #24
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe fd4a 	bl	800633e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3304      	adds	r3, #4
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fd45 	bl	800633e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	2201      	movs	r2, #1
 80078ba:	409a      	lsls	r2, r3
 80078bc:	4b2b      	ldr	r3, [pc, #172]	; (800796c <xTaskResumeAll+0x124>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	4a2a      	ldr	r2, [pc, #168]	; (800796c <xTaskResumeAll+0x124>)
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4a27      	ldr	r2, [pc, #156]	; (8007970 <xTaskResumeAll+0x128>)
 80078d4:	441a      	add	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3304      	adds	r3, #4
 80078da:	4619      	mov	r1, r3
 80078dc:	4610      	mov	r0, r2
 80078de:	f7fe fcd1 	bl	8006284 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e6:	4b23      	ldr	r3, [pc, #140]	; (8007974 <xTaskResumeAll+0x12c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d302      	bcc.n	80078f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80078f0:	4b21      	ldr	r3, [pc, #132]	; (8007978 <xTaskResumeAll+0x130>)
 80078f2:	2201      	movs	r2, #1
 80078f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078f6:	4b1c      	ldr	r3, [pc, #112]	; (8007968 <xTaskResumeAll+0x120>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1cc      	bne.n	8007898 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007904:	f000 fb66 	bl	8007fd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007908:	4b1c      	ldr	r3, [pc, #112]	; (800797c <xTaskResumeAll+0x134>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d010      	beq.n	8007936 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007914:	f000 f858 	bl	80079c8 <xTaskIncrementTick>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800791e:	4b16      	ldr	r3, [pc, #88]	; (8007978 <xTaskResumeAll+0x130>)
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3b01      	subs	r3, #1
 8007928:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f1      	bne.n	8007914 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007930:	4b12      	ldr	r3, [pc, #72]	; (800797c <xTaskResumeAll+0x134>)
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007936:	4b10      	ldr	r3, [pc, #64]	; (8007978 <xTaskResumeAll+0x130>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800793e:	2301      	movs	r3, #1
 8007940:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007942:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <xTaskResumeAll+0x138>)
 8007944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007952:	f000 fedf 	bl	8008714 <vPortExitCritical>

	return xAlreadyYielded;
 8007956:	68bb      	ldr	r3, [r7, #8]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	20000a28 	.word	0x20000a28
 8007964:	20000a00 	.word	0x20000a00
 8007968:	200009c0 	.word	0x200009c0
 800796c:	20000a08 	.word	0x20000a08
 8007970:	20000904 	.word	0x20000904
 8007974:	20000900 	.word	0x20000900
 8007978:	20000a14 	.word	0x20000a14
 800797c:	20000a10 	.word	0x20000a10
 8007980:	e000ed04 	.word	0xe000ed04

08007984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <xTaskGetTickCount+0x1c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007990:	687b      	ldr	r3, [r7, #4]
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20000a04 	.word	0x20000a04

080079a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079aa:	f000 ff67 	bl	800887c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80079ae:	2300      	movs	r3, #0
 80079b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80079b2:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <xTaskGetTickCountFromISR+0x20>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079b8:	683b      	ldr	r3, [r7, #0]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000a04 	.word	0x20000a04

080079c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d2:	4b4f      	ldr	r3, [pc, #316]	; (8007b10 <xTaskIncrementTick+0x148>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f040 808a 	bne.w	8007af0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079dc:	4b4d      	ldr	r3, [pc, #308]	; (8007b14 <xTaskIncrementTick+0x14c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079e4:	4a4b      	ldr	r2, [pc, #300]	; (8007b14 <xTaskIncrementTick+0x14c>)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d122      	bne.n	8007a36 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80079f0:	4b49      	ldr	r3, [pc, #292]	; (8007b18 <xTaskIncrementTick+0x150>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00c      	beq.n	8007a14 <xTaskIncrementTick+0x4c>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	b672      	cpsid	i
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	b662      	cpsie	i
 8007a0e:	603b      	str	r3, [r7, #0]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <xTaskIncrementTick+0x4a>
 8007a14:	4b40      	ldr	r3, [pc, #256]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	4b40      	ldr	r3, [pc, #256]	; (8007b1c <xTaskIncrementTick+0x154>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a3e      	ldr	r2, [pc, #248]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	4a3e      	ldr	r2, [pc, #248]	; (8007b1c <xTaskIncrementTick+0x154>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	4b3d      	ldr	r3, [pc, #244]	; (8007b20 <xTaskIncrementTick+0x158>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	4a3c      	ldr	r2, [pc, #240]	; (8007b20 <xTaskIncrementTick+0x158>)
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	f000 facf 	bl	8007fd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a36:	4b3b      	ldr	r3, [pc, #236]	; (8007b24 <xTaskIncrementTick+0x15c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d348      	bcc.n	8007ad2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a40:	4b35      	ldr	r3, [pc, #212]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d104      	bne.n	8007a54 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a4a:	4b36      	ldr	r3, [pc, #216]	; (8007b24 <xTaskIncrementTick+0x15c>)
 8007a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a50:	601a      	str	r2, [r3, #0]
					break;
 8007a52:	e03e      	b.n	8007ad2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a54:	4b30      	ldr	r3, [pc, #192]	; (8007b18 <xTaskIncrementTick+0x150>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d203      	bcs.n	8007a74 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a6c:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <xTaskIncrementTick+0x15c>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a72:	e02e      	b.n	8007ad2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe fc60 	bl	800633e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	3318      	adds	r3, #24
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fc57 	bl	800633e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	2201      	movs	r2, #1
 8007a96:	409a      	lsls	r2, r3
 8007a98:	4b23      	ldr	r3, [pc, #140]	; (8007b28 <xTaskIncrementTick+0x160>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	4a22      	ldr	r2, [pc, #136]	; (8007b28 <xTaskIncrementTick+0x160>)
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4a1f      	ldr	r2, [pc, #124]	; (8007b2c <xTaskIncrementTick+0x164>)
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7fe fbe3 	bl	8006284 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac2:	4b1b      	ldr	r3, [pc, #108]	; (8007b30 <xTaskIncrementTick+0x168>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d3b9      	bcc.n	8007a40 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ad0:	e7b6      	b.n	8007a40 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ad2:	4b17      	ldr	r3, [pc, #92]	; (8007b30 <xTaskIncrementTick+0x168>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad8:	4914      	ldr	r1, [pc, #80]	; (8007b2c <xTaskIncrementTick+0x164>)
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d907      	bls.n	8007afa <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007aea:	2301      	movs	r3, #1
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e004      	b.n	8007afa <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007af0:	4b10      	ldr	r3, [pc, #64]	; (8007b34 <xTaskIncrementTick+0x16c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	4a0f      	ldr	r2, [pc, #60]	; (8007b34 <xTaskIncrementTick+0x16c>)
 8007af8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007afa:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <xTaskIncrementTick+0x170>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007b02:	2301      	movs	r3, #1
 8007b04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b06:	697b      	ldr	r3, [r7, #20]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20000a28 	.word	0x20000a28
 8007b14:	20000a04 	.word	0x20000a04
 8007b18:	200009b8 	.word	0x200009b8
 8007b1c:	200009bc 	.word	0x200009bc
 8007b20:	20000a18 	.word	0x20000a18
 8007b24:	20000a20 	.word	0x20000a20
 8007b28:	20000a08 	.word	0x20000a08
 8007b2c:	20000904 	.word	0x20000904
 8007b30:	20000900 	.word	0x20000900
 8007b34:	20000a10 	.word	0x20000a10
 8007b38:	20000a14 	.word	0x20000a14

08007b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b42:	4b3a      	ldr	r3, [pc, #232]	; (8007c2c <vTaskSwitchContext+0xf0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b4a:	4b39      	ldr	r3, [pc, #228]	; (8007c30 <vTaskSwitchContext+0xf4>)
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b50:	e068      	b.n	8007c24 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8007b52:	4b37      	ldr	r3, [pc, #220]	; (8007c30 <vTaskSwitchContext+0xf4>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007b58:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <vTaskSwitchContext+0xf8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	61fb      	str	r3, [r7, #28]
 8007b60:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007b64:	61bb      	str	r3, [r7, #24]
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d111      	bne.n	8007b94 <vTaskSwitchContext+0x58>
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	3304      	adds	r3, #4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d10b      	bne.n	8007b94 <vTaskSwitchContext+0x58>
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d105      	bne.n	8007b94 <vTaskSwitchContext+0x58>
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	330c      	adds	r3, #12
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d008      	beq.n	8007ba6 <vTaskSwitchContext+0x6a>
 8007b94:	4b27      	ldr	r3, [pc, #156]	; (8007c34 <vTaskSwitchContext+0xf8>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	4b26      	ldr	r3, [pc, #152]	; (8007c34 <vTaskSwitchContext+0xf8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3334      	adds	r3, #52	; 0x34
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f7f8 fd31 	bl	8000608 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba6:	4b24      	ldr	r3, [pc, #144]	; (8007c38 <vTaskSwitchContext+0xfc>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	fab3 f383 	clz	r3, r3
 8007bb2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007bb4:	7afb      	ldrb	r3, [r7, #11]
 8007bb6:	f1c3 031f 	rsb	r3, r3, #31
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	491f      	ldr	r1, [pc, #124]	; (8007c3c <vTaskSwitchContext+0x100>)
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10c      	bne.n	8007bea <vTaskSwitchContext+0xae>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	b672      	cpsid	i
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	b662      	cpsie	i
 8007be4:	607b      	str	r3, [r7, #4]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <vTaskSwitchContext+0xac>
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4a11      	ldr	r2, [pc, #68]	; (8007c3c <vTaskSwitchContext+0x100>)
 8007bf6:	4413      	add	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	605a      	str	r2, [r3, #4]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d104      	bne.n	8007c1a <vTaskSwitchContext+0xde>
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	605a      	str	r2, [r3, #4]
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	4a04      	ldr	r2, [pc, #16]	; (8007c34 <vTaskSwitchContext+0xf8>)
 8007c22:	6013      	str	r3, [r2, #0]
}
 8007c24:	bf00      	nop
 8007c26:	3720      	adds	r7, #32
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20000a28 	.word	0x20000a28
 8007c30:	20000a14 	.word	0x20000a14
 8007c34:	20000900 	.word	0x20000900
 8007c38:	20000a08 	.word	0x20000a08
 8007c3c:	20000904 	.word	0x20000904

08007c40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10c      	bne.n	8007c6a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	b672      	cpsid	i
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	b662      	cpsie	i
 8007c64:	60fb      	str	r3, [r7, #12]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <vTaskPlaceOnEventList+0x48>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3318      	adds	r3, #24
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7fe fb2a 	bl	80062cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c78:	2101      	movs	r1, #1
 8007c7a:	6838      	ldr	r0, [r7, #0]
 8007c7c:	f000 fba4 	bl	80083c8 <prvAddCurrentTaskToDelayedList>
}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20000900 	.word	0x20000900

08007c8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10c      	bne.n	8007cbc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	b672      	cpsid	i
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	b662      	cpsie	i
 8007cb6:	60fb      	str	r3, [r7, #12]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	3318      	adds	r3, #24
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fb3c 	bl	800633e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cc6:	4b1d      	ldr	r3, [pc, #116]	; (8007d3c <xTaskRemoveFromEventList+0xb0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d11c      	bne.n	8007d08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fb33 	bl	800633e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	2201      	movs	r2, #1
 8007cde:	409a      	lsls	r2, r3
 8007ce0:	4b17      	ldr	r3, [pc, #92]	; (8007d40 <xTaskRemoveFromEventList+0xb4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	4a16      	ldr	r2, [pc, #88]	; (8007d40 <xTaskRemoveFromEventList+0xb4>)
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4a13      	ldr	r2, [pc, #76]	; (8007d44 <xTaskRemoveFromEventList+0xb8>)
 8007cf8:	441a      	add	r2, r3
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	4619      	mov	r1, r3
 8007d00:	4610      	mov	r0, r2
 8007d02:	f7fe fabf 	bl	8006284 <vListInsertEnd>
 8007d06:	e005      	b.n	8007d14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	3318      	adds	r3, #24
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	480e      	ldr	r0, [pc, #56]	; (8007d48 <xTaskRemoveFromEventList+0xbc>)
 8007d10:	f7fe fab8 	bl	8006284 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d18:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <xTaskRemoveFromEventList+0xc0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d905      	bls.n	8007d2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d22:	2301      	movs	r3, #1
 8007d24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d26:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <xTaskRemoveFromEventList+0xc4>)
 8007d28:	2201      	movs	r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	e001      	b.n	8007d32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d32:	697b      	ldr	r3, [r7, #20]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20000a28 	.word	0x20000a28
 8007d40:	20000a08 	.word	0x20000a08
 8007d44:	20000904 	.word	0x20000904
 8007d48:	200009c0 	.word	0x200009c0
 8007d4c:	20000900 	.word	0x20000900
 8007d50:	20000a14 	.word	0x20000a14

08007d54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d5c:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <vTaskInternalSetTimeOutState+0x24>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d64:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <vTaskInternalSetTimeOutState+0x28>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	605a      	str	r2, [r3, #4]
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	20000a18 	.word	0x20000a18
 8007d7c:	20000a04 	.word	0x20000a04

08007d80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10c      	bne.n	8007daa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	b672      	cpsid	i
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	b662      	cpsie	i
 8007da4:	613b      	str	r3, [r7, #16]
}
 8007da6:	bf00      	nop
 8007da8:	e7fe      	b.n	8007da8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10c      	bne.n	8007dca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	b672      	cpsid	i
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	b662      	cpsie	i
 8007dc4:	60fb      	str	r3, [r7, #12]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007dca:	f000 fc6f 	bl	80086ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dce:	4b1d      	ldr	r3, [pc, #116]	; (8007e44 <xTaskCheckForTimeOut+0xc4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007de6:	d102      	bne.n	8007dee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61fb      	str	r3, [r7, #28]
 8007dec:	e023      	b.n	8007e36 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <xTaskCheckForTimeOut+0xc8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d007      	beq.n	8007e0a <xTaskCheckForTimeOut+0x8a>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d302      	bcc.n	8007e0a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e04:	2301      	movs	r3, #1
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	e015      	b.n	8007e36 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d20b      	bcs.n	8007e2c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	1ad2      	subs	r2, r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff ff97 	bl	8007d54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
 8007e2a:	e004      	b.n	8007e36 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e32:	2301      	movs	r3, #1
 8007e34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e36:	f000 fc6d 	bl	8008714 <vPortExitCritical>

	return xReturn;
 8007e3a:	69fb      	ldr	r3, [r7, #28]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3720      	adds	r7, #32
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000a04 	.word	0x20000a04
 8007e48:	20000a18 	.word	0x20000a18

08007e4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e50:	4b03      	ldr	r3, [pc, #12]	; (8007e60 <vTaskMissedYield+0x14>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
}
 8007e56:	bf00      	nop
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	20000a14 	.word	0x20000a14

08007e64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e6c:	f000 f852 	bl	8007f14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <prvIdleTask+0x28>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d9f9      	bls.n	8007e6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <prvIdleTask+0x2c>)
 8007e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e88:	e7f0      	b.n	8007e6c <prvIdleTask+0x8>
 8007e8a:	bf00      	nop
 8007e8c:	20000904 	.word	0x20000904
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	607b      	str	r3, [r7, #4]
 8007e9e:	e00c      	b.n	8007eba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4a12      	ldr	r2, [pc, #72]	; (8007ef4 <prvInitialiseTaskLists+0x60>)
 8007eac:	4413      	add	r3, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe f9bb 	bl	800622a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	607b      	str	r3, [r7, #4]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b06      	cmp	r3, #6
 8007ebe:	d9ef      	bls.n	8007ea0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ec0:	480d      	ldr	r0, [pc, #52]	; (8007ef8 <prvInitialiseTaskLists+0x64>)
 8007ec2:	f7fe f9b2 	bl	800622a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ec6:	480d      	ldr	r0, [pc, #52]	; (8007efc <prvInitialiseTaskLists+0x68>)
 8007ec8:	f7fe f9af 	bl	800622a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ecc:	480c      	ldr	r0, [pc, #48]	; (8007f00 <prvInitialiseTaskLists+0x6c>)
 8007ece:	f7fe f9ac 	bl	800622a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ed2:	480c      	ldr	r0, [pc, #48]	; (8007f04 <prvInitialiseTaskLists+0x70>)
 8007ed4:	f7fe f9a9 	bl	800622a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ed8:	480b      	ldr	r0, [pc, #44]	; (8007f08 <prvInitialiseTaskLists+0x74>)
 8007eda:	f7fe f9a6 	bl	800622a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ede:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <prvInitialiseTaskLists+0x78>)
 8007ee0:	4a05      	ldr	r2, [pc, #20]	; (8007ef8 <prvInitialiseTaskLists+0x64>)
 8007ee2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <prvInitialiseTaskLists+0x7c>)
 8007ee6:	4a05      	ldr	r2, [pc, #20]	; (8007efc <prvInitialiseTaskLists+0x68>)
 8007ee8:	601a      	str	r2, [r3, #0]
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000904 	.word	0x20000904
 8007ef8:	20000990 	.word	0x20000990
 8007efc:	200009a4 	.word	0x200009a4
 8007f00:	200009c0 	.word	0x200009c0
 8007f04:	200009d4 	.word	0x200009d4
 8007f08:	200009ec 	.word	0x200009ec
 8007f0c:	200009b8 	.word	0x200009b8
 8007f10:	200009bc 	.word	0x200009bc

08007f14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f1a:	e019      	b.n	8007f50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f1c:	f000 fbc6 	bl	80086ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f20:	4b10      	ldr	r3, [pc, #64]	; (8007f64 <prvCheckTasksWaitingTermination+0x50>)
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe fa06 	bl	800633e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f32:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <prvCheckTasksWaitingTermination+0x54>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	4a0b      	ldr	r2, [pc, #44]	; (8007f68 <prvCheckTasksWaitingTermination+0x54>)
 8007f3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <prvCheckTasksWaitingTermination+0x58>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <prvCheckTasksWaitingTermination+0x58>)
 8007f44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f46:	f000 fbe5 	bl	8008714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f810 	bl	8007f70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f50:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <prvCheckTasksWaitingTermination+0x58>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e1      	bne.n	8007f1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f58:	bf00      	nop
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	200009d4 	.word	0x200009d4
 8007f68:	20000a00 	.word	0x20000a00
 8007f6c:	200009e8 	.word	0x200009e8

08007f70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d108      	bne.n	8007f94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fd86 	bl	8008a98 <vPortFree>
				vPortFree( pxTCB );
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fd83 	bl	8008a98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f92:	e01a      	b.n	8007fca <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d103      	bne.n	8007fa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fd7a 	bl	8008a98 <vPortFree>
	}
 8007fa4:	e011      	b.n	8007fca <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d00c      	beq.n	8007fca <prvDeleteTCB+0x5a>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	b672      	cpsid	i
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	b662      	cpsie	i
 8007fc4:	60fb      	str	r3, [r7, #12]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <prvDeleteTCB+0x58>
	}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fda:	4b0c      	ldr	r3, [pc, #48]	; (800800c <prvResetNextTaskUnblockTime+0x38>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <prvResetNextTaskUnblockTime+0x3c>)
 8007fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fec:	e008      	b.n	8008000 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fee:	4b07      	ldr	r3, [pc, #28]	; (800800c <prvResetNextTaskUnblockTime+0x38>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	4a04      	ldr	r2, [pc, #16]	; (8008010 <prvResetNextTaskUnblockTime+0x3c>)
 8007ffe:	6013      	str	r3, [r2, #0]
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	200009b8 	.word	0x200009b8
 8008010:	20000a20 	.word	0x20000a20

08008014 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800801a:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <xTaskGetSchedulerState+0x34>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d102      	bne.n	8008028 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008022:	2301      	movs	r3, #1
 8008024:	607b      	str	r3, [r7, #4]
 8008026:	e008      	b.n	800803a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008028:	4b08      	ldr	r3, [pc, #32]	; (800804c <xTaskGetSchedulerState+0x38>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008030:	2302      	movs	r3, #2
 8008032:	607b      	str	r3, [r7, #4]
 8008034:	e001      	b.n	800803a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008036:	2300      	movs	r3, #0
 8008038:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800803a:	687b      	ldr	r3, [r7, #4]
	}
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	20000a0c 	.word	0x20000a0c
 800804c:	20000a28 	.word	0x20000a28

08008050 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800805c:	2300      	movs	r3, #0
 800805e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d069      	beq.n	800813a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806a:	4b36      	ldr	r3, [pc, #216]	; (8008144 <xTaskPriorityInherit+0xf4>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	429a      	cmp	r2, r3
 8008072:	d259      	bcs.n	8008128 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	db06      	blt.n	800808a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800807c:	4b31      	ldr	r3, [pc, #196]	; (8008144 <xTaskPriorityInherit+0xf4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008082:	f1c3 0207 	rsb	r2, r3, #7
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	6959      	ldr	r1, [r3, #20]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4a2b      	ldr	r2, [pc, #172]	; (8008148 <xTaskPriorityInherit+0xf8>)
 800809c:	4413      	add	r3, r2
 800809e:	4299      	cmp	r1, r3
 80080a0:	d13a      	bne.n	8008118 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe f949 	bl	800633e <uxListRemove>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d115      	bne.n	80080de <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b6:	4924      	ldr	r1, [pc, #144]	; (8008148 <xTaskPriorityInherit+0xf8>)
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <xTaskPriorityInherit+0x8e>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	2201      	movs	r2, #1
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	43da      	mvns	r2, r3
 80080d4:	4b1d      	ldr	r3, [pc, #116]	; (800814c <xTaskPriorityInherit+0xfc>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4013      	ands	r3, r2
 80080da:	4a1c      	ldr	r2, [pc, #112]	; (800814c <xTaskPriorityInherit+0xfc>)
 80080dc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080de:	4b19      	ldr	r3, [pc, #100]	; (8008144 <xTaskPriorityInherit+0xf4>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	2201      	movs	r2, #1
 80080ee:	409a      	lsls	r2, r3
 80080f0:	4b16      	ldr	r3, [pc, #88]	; (800814c <xTaskPriorityInherit+0xfc>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	4a15      	ldr	r2, [pc, #84]	; (800814c <xTaskPriorityInherit+0xfc>)
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4a10      	ldr	r2, [pc, #64]	; (8008148 <xTaskPriorityInherit+0xf8>)
 8008108:	441a      	add	r2, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	3304      	adds	r3, #4
 800810e:	4619      	mov	r1, r3
 8008110:	4610      	mov	r0, r2
 8008112:	f7fe f8b7 	bl	8006284 <vListInsertEnd>
 8008116:	e004      	b.n	8008122 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008118:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <xTaskPriorityInherit+0xf4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008122:	2301      	movs	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	e008      	b.n	800813a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <xTaskPriorityInherit+0xf4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	429a      	cmp	r2, r3
 8008134:	d201      	bcs.n	800813a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008136:	2301      	movs	r3, #1
 8008138:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800813a:	68fb      	ldr	r3, [r7, #12]
	}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20000900 	.word	0x20000900
 8008148:	20000904 	.word	0x20000904
 800814c:	20000a08 	.word	0x20000a08

08008150 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800815c:	2300      	movs	r3, #0
 800815e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d072      	beq.n	800824c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008166:	4b3c      	ldr	r3, [pc, #240]	; (8008258 <xTaskPriorityDisinherit+0x108>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	429a      	cmp	r2, r3
 800816e:	d00c      	beq.n	800818a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	b672      	cpsid	i
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	b662      	cpsie	i
 8008184:	60fb      	str	r3, [r7, #12]
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10c      	bne.n	80081ac <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	b672      	cpsid	i
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	b662      	cpsie	i
 80081a6:	60bb      	str	r3, [r7, #8]
}
 80081a8:	bf00      	nop
 80081aa:	e7fe      	b.n	80081aa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b0:	1e5a      	subs	r2, r3, #1
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081be:	429a      	cmp	r2, r3
 80081c0:	d044      	beq.n	800824c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d140      	bne.n	800824c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	3304      	adds	r3, #4
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe f8b5 	bl	800633e <uxListRemove>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d115      	bne.n	8008206 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081de:	491f      	ldr	r1, [pc, #124]	; (800825c <xTaskPriorityDisinherit+0x10c>)
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <xTaskPriorityDisinherit+0xb6>
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	2201      	movs	r2, #1
 80081f6:	fa02 f303 	lsl.w	r3, r2, r3
 80081fa:	43da      	mvns	r2, r3
 80081fc:	4b18      	ldr	r3, [pc, #96]	; (8008260 <xTaskPriorityDisinherit+0x110>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4013      	ands	r3, r2
 8008202:	4a17      	ldr	r2, [pc, #92]	; (8008260 <xTaskPriorityDisinherit+0x110>)
 8008204:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008212:	f1c3 0207 	rsb	r2, r3, #7
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	2201      	movs	r2, #1
 8008220:	409a      	lsls	r2, r3
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <xTaskPriorityDisinherit+0x110>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4313      	orrs	r3, r2
 8008228:	4a0d      	ldr	r2, [pc, #52]	; (8008260 <xTaskPriorityDisinherit+0x110>)
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4a08      	ldr	r2, [pc, #32]	; (800825c <xTaskPriorityDisinherit+0x10c>)
 800823a:	441a      	add	r2, r3
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	3304      	adds	r3, #4
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f7fe f81e 	bl	8006284 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008248:	2301      	movs	r3, #1
 800824a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800824c:	697b      	ldr	r3, [r7, #20]
	}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000900 	.word	0x20000900
 800825c:	20000904 	.word	0x20000904
 8008260:	20000a08 	.word	0x20000a08

08008264 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008272:	2301      	movs	r3, #1
 8008274:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 8087 	beq.w	800838c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10c      	bne.n	80082a0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	b672      	cpsid	i
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	b662      	cpsie	i
 800829a:	60fb      	str	r3, [r7, #12]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d902      	bls.n	80082b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	61fb      	str	r3, [r7, #28]
 80082ae:	e002      	b.n	80082b6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d065      	beq.n	800838c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d160      	bne.n	800838c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082ca:	4b32      	ldr	r3, [pc, #200]	; (8008394 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d10c      	bne.n	80082ee <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	b672      	cpsid	i
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	b662      	cpsie	i
 80082e8:	60bb      	str	r3, [r7, #8]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	db04      	blt.n	800830c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f1c3 0207 	rsb	r2, r3, #7
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	6959      	ldr	r1, [r3, #20]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4a1f      	ldr	r2, [pc, #124]	; (8008398 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800831c:	4413      	add	r3, r2
 800831e:	4299      	cmp	r1, r3
 8008320:	d134      	bne.n	800838c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	3304      	adds	r3, #4
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe f809 	bl	800633e <uxListRemove>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d115      	bne.n	800835e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	4918      	ldr	r1, [pc, #96]	; (8008398 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10a      	bne.n	800835e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	2201      	movs	r2, #1
 800834e:	fa02 f303 	lsl.w	r3, r2, r3
 8008352:	43da      	mvns	r2, r3
 8008354:	4b11      	ldr	r3, [pc, #68]	; (800839c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4013      	ands	r3, r2
 800835a:	4a10      	ldr	r2, [pc, #64]	; (800839c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800835c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	2201      	movs	r2, #1
 8008364:	409a      	lsls	r2, r3
 8008366:	4b0d      	ldr	r3, [pc, #52]	; (800839c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4313      	orrs	r3, r2
 800836c:	4a0b      	ldr	r2, [pc, #44]	; (800839c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4a06      	ldr	r2, [pc, #24]	; (8008398 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800837e:	441a      	add	r2, r3
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	3304      	adds	r3, #4
 8008384:	4619      	mov	r1, r3
 8008386:	4610      	mov	r0, r2
 8008388:	f7fd ff7c 	bl	8006284 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800838c:	bf00      	nop
 800838e:	3720      	adds	r7, #32
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20000900 	.word	0x20000900
 8008398:	20000904 	.word	0x20000904
 800839c:	20000a08 	.word	0x20000a08

080083a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083a4:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d004      	beq.n	80083b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083ac:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083b2:	3201      	adds	r2, #1
 80083b4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80083b6:	4b03      	ldr	r3, [pc, #12]	; (80083c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083b8:	681b      	ldr	r3, [r3, #0]
	}
 80083ba:	4618      	mov	r0, r3
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	20000900 	.word	0x20000900

080083c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083d2:	4b29      	ldr	r3, [pc, #164]	; (8008478 <prvAddCurrentTaskToDelayedList+0xb0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d8:	4b28      	ldr	r3, [pc, #160]	; (800847c <prvAddCurrentTaskToDelayedList+0xb4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3304      	adds	r3, #4
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fd ffad 	bl	800633e <uxListRemove>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10b      	bne.n	8008402 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80083ea:	4b24      	ldr	r3, [pc, #144]	; (800847c <prvAddCurrentTaskToDelayedList+0xb4>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	2201      	movs	r2, #1
 80083f2:	fa02 f303 	lsl.w	r3, r2, r3
 80083f6:	43da      	mvns	r2, r3
 80083f8:	4b21      	ldr	r3, [pc, #132]	; (8008480 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4013      	ands	r3, r2
 80083fe:	4a20      	ldr	r2, [pc, #128]	; (8008480 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008400:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008408:	d10a      	bne.n	8008420 <prvAddCurrentTaskToDelayedList+0x58>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d007      	beq.n	8008420 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008410:	4b1a      	ldr	r3, [pc, #104]	; (800847c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3304      	adds	r3, #4
 8008416:	4619      	mov	r1, r3
 8008418:	481a      	ldr	r0, [pc, #104]	; (8008484 <prvAddCurrentTaskToDelayedList+0xbc>)
 800841a:	f7fd ff33 	bl	8006284 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800841e:	e026      	b.n	800846e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4413      	add	r3, r2
 8008426:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008428:	4b14      	ldr	r3, [pc, #80]	; (800847c <prvAddCurrentTaskToDelayedList+0xb4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	429a      	cmp	r2, r3
 8008436:	d209      	bcs.n	800844c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008438:	4b13      	ldr	r3, [pc, #76]	; (8008488 <prvAddCurrentTaskToDelayedList+0xc0>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4b0f      	ldr	r3, [pc, #60]	; (800847c <prvAddCurrentTaskToDelayedList+0xb4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3304      	adds	r3, #4
 8008442:	4619      	mov	r1, r3
 8008444:	4610      	mov	r0, r2
 8008446:	f7fd ff41 	bl	80062cc <vListInsert>
}
 800844a:	e010      	b.n	800846e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800844c:	4b0f      	ldr	r3, [pc, #60]	; (800848c <prvAddCurrentTaskToDelayedList+0xc4>)
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	4b0a      	ldr	r3, [pc, #40]	; (800847c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3304      	adds	r3, #4
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f7fd ff37 	bl	80062cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	429a      	cmp	r2, r3
 8008466:	d202      	bcs.n	800846e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008468:	4a09      	ldr	r2, [pc, #36]	; (8008490 <prvAddCurrentTaskToDelayedList+0xc8>)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6013      	str	r3, [r2, #0]
}
 800846e:	bf00      	nop
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20000a04 	.word	0x20000a04
 800847c:	20000900 	.word	0x20000900
 8008480:	20000a08 	.word	0x20000a08
 8008484:	200009ec 	.word	0x200009ec
 8008488:	200009bc 	.word	0x200009bc
 800848c:	200009b8 	.word	0x200009b8
 8008490:	20000a20 	.word	0x20000a20

08008494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3b04      	subs	r3, #4
 80084a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3b04      	subs	r3, #4
 80084b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	f023 0201 	bic.w	r2, r3, #1
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3b04      	subs	r3, #4
 80084c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084c4:	4a0c      	ldr	r2, [pc, #48]	; (80084f8 <pxPortInitialiseStack+0x64>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3b14      	subs	r3, #20
 80084ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3b04      	subs	r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f06f 0202 	mvn.w	r2, #2
 80084e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3b20      	subs	r3, #32
 80084e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084ea:	68fb      	ldr	r3, [r7, #12]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	080084fd 	.word	0x080084fd

080084fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008506:	4b14      	ldr	r3, [pc, #80]	; (8008558 <prvTaskExitError+0x5c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800850e:	d00c      	beq.n	800852a <prvTaskExitError+0x2e>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	b672      	cpsid	i
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	b662      	cpsie	i
 8008524:	60fb      	str	r3, [r7, #12]
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <prvTaskExitError+0x2c>
	__asm volatile
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	b672      	cpsid	i
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	b662      	cpsie	i
 800853e:	60bb      	str	r3, [r7, #8]
}
 8008540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008542:	bf00      	nop
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0fc      	beq.n	8008544 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	2000000c 	.word	0x2000000c
 800855c:	00000000 	.word	0x00000000

08008560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <pxCurrentTCBConst2>)
 8008562:	6819      	ldr	r1, [r3, #0]
 8008564:	6808      	ldr	r0, [r1, #0]
 8008566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856a:	f380 8809 	msr	PSP, r0
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8811 	msr	BASEPRI, r0
 800857a:	4770      	bx	lr
 800857c:	f3af 8000 	nop.w

08008580 <pxCurrentTCBConst2>:
 8008580:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop

08008588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008588:	4808      	ldr	r0, [pc, #32]	; (80085ac <prvPortStartFirstTask+0x24>)
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	6800      	ldr	r0, [r0, #0]
 800858e:	f380 8808 	msr	MSP, r0
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f380 8814 	msr	CONTROL, r0
 800859a:	b662      	cpsie	i
 800859c:	b661      	cpsie	f
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	df00      	svc	0
 80085a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085aa:	bf00      	nop
 80085ac:	e000ed08 	.word	0xe000ed08

080085b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085b6:	4b37      	ldr	r3, [pc, #220]	; (8008694 <xPortStartScheduler+0xe4>)
 80085b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	4b2f      	ldr	r3, [pc, #188]	; (8008698 <xPortStartScheduler+0xe8>)
 80085dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085de:	4b2f      	ldr	r3, [pc, #188]	; (800869c <xPortStartScheduler+0xec>)
 80085e0:	2207      	movs	r2, #7
 80085e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085e4:	e009      	b.n	80085fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80085e6:	4b2d      	ldr	r3, [pc, #180]	; (800869c <xPortStartScheduler+0xec>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	4a2b      	ldr	r2, [pc, #172]	; (800869c <xPortStartScheduler+0xec>)
 80085ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008602:	2b80      	cmp	r3, #128	; 0x80
 8008604:	d0ef      	beq.n	80085e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008606:	4b25      	ldr	r3, [pc, #148]	; (800869c <xPortStartScheduler+0xec>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f1c3 0307 	rsb	r3, r3, #7
 800860e:	2b04      	cmp	r3, #4
 8008610:	d00c      	beq.n	800862c <xPortStartScheduler+0x7c>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	b672      	cpsid	i
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	b662      	cpsie	i
 8008626:	60bb      	str	r3, [r7, #8]
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <xPortStartScheduler+0xec>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	4a1a      	ldr	r2, [pc, #104]	; (800869c <xPortStartScheduler+0xec>)
 8008634:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008636:	4b19      	ldr	r3, [pc, #100]	; (800869c <xPortStartScheduler+0xec>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800863e:	4a17      	ldr	r2, [pc, #92]	; (800869c <xPortStartScheduler+0xec>)
 8008640:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800864a:	4b15      	ldr	r3, [pc, #84]	; (80086a0 <xPortStartScheduler+0xf0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a14      	ldr	r2, [pc, #80]	; (80086a0 <xPortStartScheduler+0xf0>)
 8008650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008654:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008656:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <xPortStartScheduler+0xf0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a11      	ldr	r2, [pc, #68]	; (80086a0 <xPortStartScheduler+0xf0>)
 800865c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008660:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008662:	f000 f8dd 	bl	8008820 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008666:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <xPortStartScheduler+0xf4>)
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800866c:	f000 f8fc 	bl	8008868 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008670:	4b0d      	ldr	r3, [pc, #52]	; (80086a8 <xPortStartScheduler+0xf8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a0c      	ldr	r2, [pc, #48]	; (80086a8 <xPortStartScheduler+0xf8>)
 8008676:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800867a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800867c:	f7ff ff84 	bl	8008588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008680:	f7ff fa5c 	bl	8007b3c <vTaskSwitchContext>
	prvTaskExitError();
 8008684:	f7ff ff3a 	bl	80084fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	e000e400 	.word	0xe000e400
 8008698:	20000a2c 	.word	0x20000a2c
 800869c:	20000a30 	.word	0x20000a30
 80086a0:	e000ed20 	.word	0xe000ed20
 80086a4:	2000000c 	.word	0x2000000c
 80086a8:	e000ef34 	.word	0xe000ef34

080086ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	b672      	cpsid	i
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	b662      	cpsie	i
 80086c6:	607b      	str	r3, [r7, #4]
}
 80086c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086ca:	4b10      	ldr	r3, [pc, #64]	; (800870c <vPortEnterCritical+0x60>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3301      	adds	r3, #1
 80086d0:	4a0e      	ldr	r2, [pc, #56]	; (800870c <vPortEnterCritical+0x60>)
 80086d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086d4:	4b0d      	ldr	r3, [pc, #52]	; (800870c <vPortEnterCritical+0x60>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d111      	bne.n	8008700 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086dc:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <vPortEnterCritical+0x64>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00c      	beq.n	8008700 <vPortEnterCritical+0x54>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	b672      	cpsid	i
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	b662      	cpsie	i
 80086fa:	603b      	str	r3, [r7, #0]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <vPortEnterCritical+0x52>
	}
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	2000000c 	.word	0x2000000c
 8008710:	e000ed04 	.word	0xe000ed04

08008714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800871a:	4b13      	ldr	r3, [pc, #76]	; (8008768 <vPortExitCritical+0x54>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10c      	bne.n	800873c <vPortExitCritical+0x28>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	b672      	cpsid	i
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	b662      	cpsie	i
 8008736:	607b      	str	r3, [r7, #4]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800873c:	4b0a      	ldr	r3, [pc, #40]	; (8008768 <vPortExitCritical+0x54>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3b01      	subs	r3, #1
 8008742:	4a09      	ldr	r2, [pc, #36]	; (8008768 <vPortExitCritical+0x54>)
 8008744:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008746:	4b08      	ldr	r3, [pc, #32]	; (8008768 <vPortExitCritical+0x54>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d105      	bne.n	800875a <vPortExitCritical+0x46>
 800874e:	2300      	movs	r3, #0
 8008750:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	f383 8811 	msr	BASEPRI, r3
}
 8008758:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800875a:	bf00      	nop
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	2000000c 	.word	0x2000000c
 800876c:	00000000 	.word	0x00000000

08008770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008770:	f3ef 8009 	mrs	r0, PSP
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <pxCurrentTCBConst>)
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	f01e 0f10 	tst.w	lr, #16
 8008780:	bf08      	it	eq
 8008782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878a:	6010      	str	r0, [r2, #0]
 800878c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008794:	b672      	cpsid	i
 8008796:	f380 8811 	msr	BASEPRI, r0
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	b662      	cpsie	i
 80087a4:	f7ff f9ca 	bl	8007b3c <vTaskSwitchContext>
 80087a8:	f04f 0000 	mov.w	r0, #0
 80087ac:	f380 8811 	msr	BASEPRI, r0
 80087b0:	bc09      	pop	{r0, r3}
 80087b2:	6819      	ldr	r1, [r3, #0]
 80087b4:	6808      	ldr	r0, [r1, #0]
 80087b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ba:	f01e 0f10 	tst.w	lr, #16
 80087be:	bf08      	it	eq
 80087c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087c4:	f380 8809 	msr	PSP, r0
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop

080087d0 <pxCurrentTCBConst>:
 80087d0:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop

080087d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	b672      	cpsid	i
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	b662      	cpsie	i
 80087f2:	607b      	str	r3, [r7, #4]
}
 80087f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087f6:	f7ff f8e7 	bl	80079c8 <xTaskIncrementTick>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008800:	4b06      	ldr	r3, [pc, #24]	; (800881c <SysTick_Handler+0x44>)
 8008802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	2300      	movs	r3, #0
 800880a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	f383 8811 	msr	BASEPRI, r3
}
 8008812:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	e000ed04 	.word	0xe000ed04

08008820 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008820:	b480      	push	{r7}
 8008822:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008824:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <vPortSetupTimerInterrupt+0x34>)
 8008826:	2200      	movs	r2, #0
 8008828:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800882a:	4b0b      	ldr	r3, [pc, #44]	; (8008858 <vPortSetupTimerInterrupt+0x38>)
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008830:	4b0a      	ldr	r3, [pc, #40]	; (800885c <vPortSetupTimerInterrupt+0x3c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a0a      	ldr	r2, [pc, #40]	; (8008860 <vPortSetupTimerInterrupt+0x40>)
 8008836:	fba2 2303 	umull	r2, r3, r2, r3
 800883a:	099b      	lsrs	r3, r3, #6
 800883c:	4a09      	ldr	r2, [pc, #36]	; (8008864 <vPortSetupTimerInterrupt+0x44>)
 800883e:	3b01      	subs	r3, #1
 8008840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008842:	4b04      	ldr	r3, [pc, #16]	; (8008854 <vPortSetupTimerInterrupt+0x34>)
 8008844:	2207      	movs	r2, #7
 8008846:	601a      	str	r2, [r3, #0]
}
 8008848:	bf00      	nop
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	e000e010 	.word	0xe000e010
 8008858:	e000e018 	.word	0xe000e018
 800885c:	20000000 	.word	0x20000000
 8008860:	10624dd3 	.word	0x10624dd3
 8008864:	e000e014 	.word	0xe000e014

08008868 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008868:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008878 <vPortEnableVFP+0x10>
 800886c:	6801      	ldr	r1, [r0, #0]
 800886e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008872:	6001      	str	r1, [r0, #0]
 8008874:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008876:	bf00      	nop
 8008878:	e000ed88 	.word	0xe000ed88

0800887c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008882:	f3ef 8305 	mrs	r3, IPSR
 8008886:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b0f      	cmp	r3, #15
 800888c:	d916      	bls.n	80088bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800888e:	4a19      	ldr	r2, [pc, #100]	; (80088f4 <vPortValidateInterruptPriority+0x78>)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008898:	4b17      	ldr	r3, [pc, #92]	; (80088f8 <vPortValidateInterruptPriority+0x7c>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	7afa      	ldrb	r2, [r7, #11]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d20c      	bcs.n	80088bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	b672      	cpsid	i
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	b662      	cpsie	i
 80088b6:	607b      	str	r3, [r7, #4]
}
 80088b8:	bf00      	nop
 80088ba:	e7fe      	b.n	80088ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <vPortValidateInterruptPriority+0x80>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088c4:	4b0e      	ldr	r3, [pc, #56]	; (8008900 <vPortValidateInterruptPriority+0x84>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d90c      	bls.n	80088e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	b672      	cpsid	i
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	b662      	cpsie	i
 80088e0:	603b      	str	r3, [r7, #0]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <vPortValidateInterruptPriority+0x68>
	}
 80088e6:	bf00      	nop
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	e000e3f0 	.word	0xe000e3f0
 80088f8:	20000a2c 	.word	0x20000a2c
 80088fc:	e000ed0c 	.word	0xe000ed0c
 8008900:	20000a30 	.word	0x20000a30

08008904 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800890c:	2300      	movs	r3, #0
 800890e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008910:	f7fe ff8c 	bl	800782c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008914:	4b5b      	ldr	r3, [pc, #364]	; (8008a84 <pvPortMalloc+0x180>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800891c:	f000 f91a 	bl	8008b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008920:	4b59      	ldr	r3, [pc, #356]	; (8008a88 <pvPortMalloc+0x184>)
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	f040 8092 	bne.w	8008a52 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01f      	beq.n	8008974 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008934:	2208      	movs	r2, #8
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4413      	add	r3, r2
 800893a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	2b00      	cmp	r3, #0
 8008944:	d016      	beq.n	8008974 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f023 0307 	bic.w	r3, r3, #7
 800894c:	3308      	adds	r3, #8
 800894e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00c      	beq.n	8008974 <pvPortMalloc+0x70>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	b672      	cpsid	i
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	b662      	cpsie	i
 800896e:	617b      	str	r3, [r7, #20]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d06b      	beq.n	8008a52 <pvPortMalloc+0x14e>
 800897a:	4b44      	ldr	r3, [pc, #272]	; (8008a8c <pvPortMalloc+0x188>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	429a      	cmp	r2, r3
 8008982:	d866      	bhi.n	8008a52 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008984:	4b42      	ldr	r3, [pc, #264]	; (8008a90 <pvPortMalloc+0x18c>)
 8008986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008988:	4b41      	ldr	r3, [pc, #260]	; (8008a90 <pvPortMalloc+0x18c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800898e:	e004      	b.n	800899a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d903      	bls.n	80089ac <pvPortMalloc+0xa8>
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1f1      	bne.n	8008990 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ac:	4b35      	ldr	r3, [pc, #212]	; (8008a84 <pvPortMalloc+0x180>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d04d      	beq.n	8008a52 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2208      	movs	r2, #8
 80089bc:	4413      	add	r3, r2
 80089be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	2308      	movs	r3, #8
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d921      	bls.n	8008a1c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00c      	beq.n	8008a04 <pvPortMalloc+0x100>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	b672      	cpsid	i
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	b662      	cpsie	i
 80089fe:	613b      	str	r3, [r7, #16]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	1ad2      	subs	r2, r2, r3
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a16:	69b8      	ldr	r0, [r7, #24]
 8008a18:	f000 f8fe 	bl	8008c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a1c:	4b1b      	ldr	r3, [pc, #108]	; (8008a8c <pvPortMalloc+0x188>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	4a19      	ldr	r2, [pc, #100]	; (8008a8c <pvPortMalloc+0x188>)
 8008a28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a2a:	4b18      	ldr	r3, [pc, #96]	; (8008a8c <pvPortMalloc+0x188>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	4b19      	ldr	r3, [pc, #100]	; (8008a94 <pvPortMalloc+0x190>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d203      	bcs.n	8008a3e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a36:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <pvPortMalloc+0x188>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a16      	ldr	r2, [pc, #88]	; (8008a94 <pvPortMalloc+0x190>)
 8008a3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <pvPortMalloc+0x184>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a52:	f7fe fef9 	bl	8007848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <pvPortMalloc+0x176>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	b672      	cpsid	i
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	b662      	cpsie	i
 8008a74:	60fb      	str	r3, [r7, #12]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <pvPortMalloc+0x174>
	return pvReturn;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3728      	adds	r7, #40	; 0x28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	20008a3c 	.word	0x20008a3c
 8008a88:	20008a48 	.word	0x20008a48
 8008a8c:	20008a40 	.word	0x20008a40
 8008a90:	20008a34 	.word	0x20008a34
 8008a94:	20008a44 	.word	0x20008a44

08008a98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d04c      	beq.n	8008b44 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aaa:	2308      	movs	r3, #8
 8008aac:	425b      	negs	r3, r3
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	4b23      	ldr	r3, [pc, #140]	; (8008b4c <vPortFree+0xb4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10c      	bne.n	8008ae0 <vPortFree+0x48>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	b672      	cpsid	i
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	b662      	cpsie	i
 8008ada:	60fb      	str	r3, [r7, #12]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00c      	beq.n	8008b02 <vPortFree+0x6a>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	b672      	cpsid	i
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	b662      	cpsie	i
 8008afc:	60bb      	str	r3, [r7, #8]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <vPortFree+0xb4>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d019      	beq.n	8008b44 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d115      	bne.n	8008b44 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	4b0b      	ldr	r3, [pc, #44]	; (8008b4c <vPortFree+0xb4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b28:	f7fe fe80 	bl	800782c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <vPortFree+0xb8>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	4a06      	ldr	r2, [pc, #24]	; (8008b50 <vPortFree+0xb8>)
 8008b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b3a:	6938      	ldr	r0, [r7, #16]
 8008b3c:	f000 f86c 	bl	8008c18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b40:	f7fe fe82 	bl	8007848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b44:	bf00      	nop
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20008a48 	.word	0x20008a48
 8008b50:	20008a40 	.word	0x20008a40

08008b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b60:	4b27      	ldr	r3, [pc, #156]	; (8008c00 <prvHeapInit+0xac>)
 8008b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00c      	beq.n	8008b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3307      	adds	r3, #7
 8008b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0307 	bic.w	r3, r3, #7
 8008b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	4a1f      	ldr	r2, [pc, #124]	; (8008c00 <prvHeapInit+0xac>)
 8008b84:	4413      	add	r3, r2
 8008b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <prvHeapInit+0xb0>)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b92:	4b1c      	ldr	r3, [pc, #112]	; (8008c04 <prvHeapInit+0xb0>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1a9b      	subs	r3, r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0307 	bic.w	r3, r3, #7
 8008bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <prvHeapInit+0xb4>)
 8008bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bb6:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <prvHeapInit+0xb4>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bbe:	4b12      	ldr	r3, [pc, #72]	; (8008c08 <prvHeapInit+0xb4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	; (8008c08 <prvHeapInit+0xb4>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <prvHeapInit+0xb8>)
 8008be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	4a09      	ldr	r2, [pc, #36]	; (8008c10 <prvHeapInit+0xbc>)
 8008bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <prvHeapInit+0xc0>)
 8008bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bf2:	601a      	str	r2, [r3, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	20000a34 	.word	0x20000a34
 8008c04:	20008a34 	.word	0x20008a34
 8008c08:	20008a3c 	.word	0x20008a3c
 8008c0c:	20008a44 	.word	0x20008a44
 8008c10:	20008a40 	.word	0x20008a40
 8008c14:	20008a48 	.word	0x20008a48

08008c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c20:	4b28      	ldr	r3, [pc, #160]	; (8008cc4 <prvInsertBlockIntoFreeList+0xac>)
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e002      	b.n	8008c2c <prvInsertBlockIntoFreeList+0x14>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d8f7      	bhi.n	8008c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	4413      	add	r3, r2
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d108      	bne.n	8008c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	441a      	add	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	441a      	add	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d118      	bne.n	8008ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d00d      	beq.n	8008c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	441a      	add	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e008      	b.n	8008ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	e003      	b.n	8008ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d002      	beq.n	8008cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	20008a34 	.word	0x20008a34
 8008cc8:	20008a3c 	.word	0x20008a3c

08008ccc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	330c      	adds	r3, #12
 8008cdc:	461a      	mov	r2, r3
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f003 fc77 	bl	800c5d4 <tcpip_send_msg_wait_sem>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d103      	bne.n	8008cfa <netconn_apimsg+0x2e>
    return apimsg->err;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008cf8:	e001      	b.n	8008cfe <netconn_apimsg+0x32>
  }
  return err;
 8008cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08c      	sub	sp, #48	; 0x30
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	4603      	mov	r3, r0
 8008d10:	603a      	str	r2, [r7, #0]
 8008d12:	71fb      	strb	r3, [r7, #7]
 8008d14:	460b      	mov	r3, r1
 8008d16:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 f8a3 	bl	8009e68 <netconn_alloc>
 8008d22:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d054      	beq.n	8008dd4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008d2a:	79bb      	ldrb	r3, [r7, #6]
 8008d2c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008d32:	f107 0308 	add.w	r3, r7, #8
 8008d36:	4619      	mov	r1, r3
 8008d38:	4829      	ldr	r0, [pc, #164]	; (8008de0 <netconn_new_with_proto_and_callback+0xd8>)
 8008d3a:	f7ff ffc7 	bl	8008ccc <netconn_apimsg>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008d44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d043      	beq.n	8008dd4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d005      	beq.n	8008d60 <netconn_new_with_proto_and_callback+0x58>
 8008d54:	4b23      	ldr	r3, [pc, #140]	; (8008de4 <netconn_new_with_proto_and_callback+0xdc>)
 8008d56:	22a3      	movs	r2, #163	; 0xa3
 8008d58:	4923      	ldr	r1, [pc, #140]	; (8008de8 <netconn_new_with_proto_and_callback+0xe0>)
 8008d5a:	4824      	ldr	r0, [pc, #144]	; (8008dec <netconn_new_with_proto_and_callback+0xe4>)
 8008d5c:	f012 fdd8 	bl	801b910 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	3310      	adds	r3, #16
 8008d64:	4618      	mov	r0, r3
 8008d66:	f010 fdb8 	bl	80198da <sys_mbox_valid>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d105      	bne.n	8008d7c <netconn_new_with_proto_and_callback+0x74>
 8008d70:	4b1c      	ldr	r3, [pc, #112]	; (8008de4 <netconn_new_with_proto_and_callback+0xdc>)
 8008d72:	22a4      	movs	r2, #164	; 0xa4
 8008d74:	491e      	ldr	r1, [pc, #120]	; (8008df0 <netconn_new_with_proto_and_callback+0xe8>)
 8008d76:	481d      	ldr	r0, [pc, #116]	; (8008dec <netconn_new_with_proto_and_callback+0xe4>)
 8008d78:	f012 fdca 	bl	801b910 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	3314      	adds	r3, #20
 8008d80:	4618      	mov	r0, r3
 8008d82:	f010 fdaa 	bl	80198da <sys_mbox_valid>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d005      	beq.n	8008d98 <netconn_new_with_proto_and_callback+0x90>
 8008d8c:	4b15      	ldr	r3, [pc, #84]	; (8008de4 <netconn_new_with_proto_and_callback+0xdc>)
 8008d8e:	22a6      	movs	r2, #166	; 0xa6
 8008d90:	4918      	ldr	r1, [pc, #96]	; (8008df4 <netconn_new_with_proto_and_callback+0xec>)
 8008d92:	4816      	ldr	r0, [pc, #88]	; (8008dec <netconn_new_with_proto_and_callback+0xe4>)
 8008d94:	f012 fdbc 	bl	801b910 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	330c      	adds	r3, #12
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f010 fe2d 	bl	80199fc <sys_sem_valid>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d105      	bne.n	8008db4 <netconn_new_with_proto_and_callback+0xac>
 8008da8:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <netconn_new_with_proto_and_callback+0xdc>)
 8008daa:	22a9      	movs	r2, #169	; 0xa9
 8008dac:	4912      	ldr	r1, [pc, #72]	; (8008df8 <netconn_new_with_proto_and_callback+0xf0>)
 8008dae:	480f      	ldr	r0, [pc, #60]	; (8008dec <netconn_new_with_proto_and_callback+0xe4>)
 8008db0:	f012 fdae 	bl	801b910 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	330c      	adds	r3, #12
 8008db8:	4618      	mov	r0, r3
 8008dba:	f010 fe12 	bl	80199e2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc0:	3310      	adds	r3, #16
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f010 fd02 	bl	80197cc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dca:	2007      	movs	r0, #7
 8008dcc:	f004 f96a 	bl	800d0a4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e000      	b.n	8008dd6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3730      	adds	r7, #48	; 0x30
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	08009e3d 	.word	0x08009e3d
 8008de4:	0801ccf0 	.word	0x0801ccf0
 8008de8:	0801cd24 	.word	0x0801cd24
 8008dec:	0801cd48 	.word	0x0801cd48
 8008df0:	0801cd70 	.word	0x0801cd70
 8008df4:	0801cd88 	.word	0x0801cd88
 8008df8:	0801cdac 	.word	0x0801cdac

08008dfc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08c      	sub	sp, #48	; 0x30
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e014      	b.n	8008e38 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008e12:	2329      	movs	r3, #41	; 0x29
 8008e14:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008e16:	f107 030c 	add.w	r3, r7, #12
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4808      	ldr	r0, [pc, #32]	; (8008e40 <netconn_prepare_delete+0x44>)
 8008e1e:	f7ff ff55 	bl	8008ccc <netconn_apimsg>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008e28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <netconn_prepare_delete+0x3a>
    return err;
 8008e30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e34:	e000      	b.n	8008e38 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3730      	adds	r7, #48	; 0x30
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	0800a3b5 	.word	0x0800a3b5

08008e44 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <netconn_delete+0x12>
    return ERR_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	e00d      	b.n	8008e72 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7ff ffd0 	bl	8008dfc <netconn_prepare_delete>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <netconn_delete+0x2a>
    netconn_free(conn);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f001 f875 	bl	8009f58 <netconn_free>
  }
  return err;
 8008e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08e      	sub	sp, #56	; 0x38
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d109      	bne.n	8008ea4 <netconn_getaddr+0x28>
 8008e90:	4b1d      	ldr	r3, [pc, #116]	; (8008f08 <netconn_getaddr+0x8c>)
 8008e92:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008e96:	491d      	ldr	r1, [pc, #116]	; (8008f0c <netconn_getaddr+0x90>)
 8008e98:	481d      	ldr	r0, [pc, #116]	; (8008f10 <netconn_getaddr+0x94>)
 8008e9a:	f012 fd39 	bl	801b910 <iprintf>
 8008e9e:	f06f 030f 	mvn.w	r3, #15
 8008ea2:	e02d      	b.n	8008f00 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d109      	bne.n	8008ebe <netconn_getaddr+0x42>
 8008eaa:	4b17      	ldr	r3, [pc, #92]	; (8008f08 <netconn_getaddr+0x8c>)
 8008eac:	f240 1213 	movw	r2, #275	; 0x113
 8008eb0:	4918      	ldr	r1, [pc, #96]	; (8008f14 <netconn_getaddr+0x98>)
 8008eb2:	4817      	ldr	r0, [pc, #92]	; (8008f10 <netconn_getaddr+0x94>)
 8008eb4:	f012 fd2c 	bl	801b910 <iprintf>
 8008eb8:	f06f 030f 	mvn.w	r3, #15
 8008ebc:	e020      	b.n	8008f00 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d109      	bne.n	8008ed8 <netconn_getaddr+0x5c>
 8008ec4:	4b10      	ldr	r3, [pc, #64]	; (8008f08 <netconn_getaddr+0x8c>)
 8008ec6:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008eca:	4913      	ldr	r1, [pc, #76]	; (8008f18 <netconn_getaddr+0x9c>)
 8008ecc:	4810      	ldr	r0, [pc, #64]	; (8008f10 <netconn_getaddr+0x94>)
 8008ece:	f012 fd1f 	bl	801b910 <iprintf>
 8008ed2:	f06f 030f 	mvn.w	r3, #15
 8008ed6:	e013      	b.n	8008f00 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8008eea:	f107 0314 	add.w	r3, r7, #20
 8008eee:	4619      	mov	r1, r3
 8008ef0:	480a      	ldr	r0, [pc, #40]	; (8008f1c <netconn_getaddr+0xa0>)
 8008ef2:	f7ff feeb 	bl	8008ccc <netconn_apimsg>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8008efc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3738      	adds	r7, #56	; 0x38
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	0801ccf0 	.word	0x0801ccf0
 8008f0c:	0801cdc8 	.word	0x0801cdc8
 8008f10:	0801cd48 	.word	0x0801cd48
 8008f14:	0801cde8 	.word	0x0801cde8
 8008f18:	0801ce08 	.word	0x0801ce08
 8008f1c:	0800ae29 	.word	0x0800ae29

08008f20 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08e      	sub	sp, #56	; 0x38
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d109      	bne.n	8008f48 <netconn_connect+0x28>
 8008f34:	4b11      	ldr	r3, [pc, #68]	; (8008f7c <netconn_connect+0x5c>)
 8008f36:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008f3a:	4911      	ldr	r1, [pc, #68]	; (8008f80 <netconn_connect+0x60>)
 8008f3c:	4811      	ldr	r0, [pc, #68]	; (8008f84 <netconn_connect+0x64>)
 8008f3e:	f012 fce7 	bl	801b910 <iprintf>
 8008f42:	f06f 030f 	mvn.w	r3, #15
 8008f46:	e015      	b.n	8008f74 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8008f4e:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <netconn_connect+0x68>)
 8008f50:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008f5a:	88fb      	ldrh	r3, [r7, #6]
 8008f5c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008f5e:	f107 0314 	add.w	r3, r7, #20
 8008f62:	4619      	mov	r1, r3
 8008f64:	4809      	ldr	r0, [pc, #36]	; (8008f8c <netconn_connect+0x6c>)
 8008f66:	f7ff feb1 	bl	8008ccc <netconn_apimsg>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008f70:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3738      	adds	r7, #56	; 0x38
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	0801ccf0 	.word	0x0801ccf0
 8008f80:	0801ce64 	.word	0x0801ce64
 8008f84:	0801cd48 	.word	0x0801cd48
 8008f88:	08020b88 	.word	0x08020b88
 8008f8c:	0800a6a9 	.word	0x0800a6a9

08008f90 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08c      	sub	sp, #48	; 0x30
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d109      	bne.n	8008fb2 <netconn_disconnect+0x22>
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <netconn_disconnect+0x44>)
 8008fa0:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8008fa4:	490c      	ldr	r1, [pc, #48]	; (8008fd8 <netconn_disconnect+0x48>)
 8008fa6:	480d      	ldr	r0, [pc, #52]	; (8008fdc <netconn_disconnect+0x4c>)
 8008fa8:	f012 fcb2 	bl	801b910 <iprintf>
 8008fac:	f06f 030f 	mvn.w	r3, #15
 8008fb0:	e00c      	b.n	8008fcc <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8008fb6:	f107 030c 	add.w	r3, r7, #12
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4808      	ldr	r0, [pc, #32]	; (8008fe0 <netconn_disconnect+0x50>)
 8008fbe:	f7ff fe85 	bl	8008ccc <netconn_apimsg>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008fc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3730      	adds	r7, #48	; 0x30
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	0801ccf0 	.word	0x0801ccf0
 8008fd8:	0801ce84 	.word	0x0801ce84
 8008fdc:	0801cd48 	.word	0x0801cd48
 8008fe0:	0800a831 	.word	0x0800a831

08008fe4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08a      	sub	sp, #40	; 0x28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d109      	bne.n	8009010 <netconn_recv_data+0x2c>
 8008ffc:	4b60      	ldr	r3, [pc, #384]	; (8009180 <netconn_recv_data+0x19c>)
 8008ffe:	f44f 7212 	mov.w	r2, #584	; 0x248
 8009002:	4960      	ldr	r1, [pc, #384]	; (8009184 <netconn_recv_data+0x1a0>)
 8009004:	4860      	ldr	r0, [pc, #384]	; (8009188 <netconn_recv_data+0x1a4>)
 8009006:	f012 fc83 	bl	801b910 <iprintf>
 800900a:	f06f 030f 	mvn.w	r3, #15
 800900e:	e0b2      	b.n	8009176 <netconn_recv_data+0x192>
  *new_buf = NULL;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d109      	bne.n	8009030 <netconn_recv_data+0x4c>
 800901c:	4b58      	ldr	r3, [pc, #352]	; (8009180 <netconn_recv_data+0x19c>)
 800901e:	f240 224a 	movw	r2, #586	; 0x24a
 8009022:	495a      	ldr	r1, [pc, #360]	; (800918c <netconn_recv_data+0x1a8>)
 8009024:	4858      	ldr	r0, [pc, #352]	; (8009188 <netconn_recv_data+0x1a4>)
 8009026:	f012 fc73 	bl	801b910 <iprintf>
 800902a:	f06f 030f 	mvn.w	r3, #15
 800902e:	e0a2      	b.n	8009176 <netconn_recv_data+0x192>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3310      	adds	r3, #16
 8009034:	4618      	mov	r0, r3
 8009036:	f010 fc50 	bl	80198da <sys_mbox_valid>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10e      	bne.n	800905e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 fb17 	bl	8009674 <netconn_err>
 8009046:	4603      	mov	r3, r0
 8009048:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 800904a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8009052:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009056:	e08e      	b.n	8009176 <netconn_recv_data+0x192>
    }
    return ERR_CONN;
 8009058:	f06f 030a 	mvn.w	r3, #10
 800905c:	e08b      	b.n	8009176 <netconn_recv_data+0x192>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009064:	f003 0302 	and.w	r3, r3, #2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d110      	bne.n	800908e <netconn_recv_data+0xaa>
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	f003 0304 	and.w	r3, r3, #4
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10b      	bne.n	800908e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800907c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009080:	2b00      	cmp	r3, #0
 8009082:	d104      	bne.n	800908e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d025      	beq.n	80090da <netconn_recv_data+0xf6>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3310      	adds	r3, #16
 8009092:	f107 0218 	add.w	r2, r7, #24
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f010 fc02 	bl	80198a2 <sys_arch_mbox_tryfetch>
 800909e:	4603      	mov	r3, r0
 80090a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090a4:	d121      	bne.n	80090ea <netconn_recv_data+0x106>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 fae4 	bl	8009674 <netconn_err>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      if (err != ERR_OK) {
 80090b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d002      	beq.n	80090c0 <netconn_recv_data+0xdc>
        /* return pending error */
        return err;
 80090ba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80090be:	e05a      	b.n	8009176 <netconn_recv_data+0x192>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <netconn_recv_data+0xf0>
        return ERR_CONN;
 80090ce:	f06f 030a 	mvn.w	r3, #10
 80090d2:	e050      	b.n	8009176 <netconn_recv_data+0x192>
      }
      return ERR_WOULDBLOCK;
 80090d4:	f06f 0306 	mvn.w	r3, #6
 80090d8:	e04d      	b.n	8009176 <netconn_recv_data+0x192>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3310      	adds	r3, #16
 80090de:	f107 0118 	add.w	r1, r7, #24
 80090e2:	2200      	movs	r2, #0
 80090e4:	4618      	mov	r0, r3
 80090e6:	f010 fb9d 	bl	8019824 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090f2:	2b10      	cmp	r3, #16
 80090f4:	d117      	bne.n	8009126 <netconn_recv_data+0x142>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	f107 0217 	add.w	r2, r7, #23
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fb0a 	bl	8009718 <lwip_netconn_is_err_msg>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <netconn_recv_data+0x13a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800910a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800910e:	f113 0f0f 	cmn.w	r3, #15
 8009112:	d101      	bne.n	8009118 <netconn_recv_data+0x134>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	e02e      	b.n	8009176 <netconn_recv_data+0x192>
      }
      return err;
 8009118:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800911c:	e02b      	b.n	8009176 <netconn_recv_data+0x192>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	891b      	ldrh	r3, [r3, #8]
 8009122:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009124:	e00d      	b.n	8009142 <netconn_recv_data+0x15e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d106      	bne.n	800913a <netconn_recv_data+0x156>
 800912c:	4b14      	ldr	r3, [pc, #80]	; (8009180 <netconn_recv_data+0x19c>)
 800912e:	f240 2291 	movw	r2, #657	; 0x291
 8009132:	4917      	ldr	r1, [pc, #92]	; (8009190 <netconn_recv_data+0x1ac>)
 8009134:	4814      	ldr	r0, [pc, #80]	; (8009188 <netconn_recv_data+0x1a4>)
 8009136:	f012 fbeb 	bl	801b910 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	891b      	ldrh	r3, [r3, #8]
 8009140:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
 8009142:	f010 fce5 	bl	8019b10 <sys_arch_protect>
 8009146:	6238      	str	r0, [r7, #32]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6a1a      	ldr	r2, [r3, #32]
 800914c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800914e:	1ad2      	subs	r2, r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	621a      	str	r2, [r3, #32]
 8009154:	6a38      	ldr	r0, [r7, #32]
 8009156:	f010 fce9 	bl	8019b2c <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <netconn_recv_data+0x18a>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009166:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009168:	2101      	movs	r1, #1
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3728      	adds	r7, #40	; 0x28
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	0801ccf0 	.word	0x0801ccf0
 8009184:	0801cf08 	.word	0x0801cf08
 8009188:	0801cd48 	.word	0x0801cd48
 800918c:	0801cf28 	.word	0x0801cf28
 8009190:	0801cf44 	.word	0x0801cf44

08009194 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d005      	beq.n	80091b2 <netconn_tcp_recvd_msg+0x1e>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091ae:	2b10      	cmp	r3, #16
 80091b0:	d009      	beq.n	80091c6 <netconn_tcp_recvd_msg+0x32>
 80091b2:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <netconn_tcp_recvd_msg+0x50>)
 80091b4:	f240 22a7 	movw	r2, #679	; 0x2a7
 80091b8:	490b      	ldr	r1, [pc, #44]	; (80091e8 <netconn_tcp_recvd_msg+0x54>)
 80091ba:	480c      	ldr	r0, [pc, #48]	; (80091ec <netconn_tcp_recvd_msg+0x58>)
 80091bc:	f012 fba8 	bl	801b910 <iprintf>
 80091c0:	f06f 030f 	mvn.w	r3, #15
 80091c4:	e00a      	b.n	80091dc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	4806      	ldr	r0, [pc, #24]	; (80091f0 <netconn_tcp_recvd_msg+0x5c>)
 80091d6:	f7ff fd79 	bl	8008ccc <netconn_apimsg>
 80091da:	4603      	mov	r3, r0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	0801ccf0 	.word	0x0801ccf0
 80091e8:	0801cf50 	.word	0x0801cf50
 80091ec:	0801cd48 	.word	0x0801cd48
 80091f0:	0800a907 	.word	0x0800a907

080091f4 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08c      	sub	sp, #48	; 0x30
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <netconn_tcp_recvd+0x1c>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800920c:	2b10      	cmp	r3, #16
 800920e:	d009      	beq.n	8009224 <netconn_tcp_recvd+0x30>
 8009210:	4b0c      	ldr	r3, [pc, #48]	; (8009244 <netconn_tcp_recvd+0x50>)
 8009212:	f240 22b5 	movw	r2, #693	; 0x2b5
 8009216:	490c      	ldr	r1, [pc, #48]	; (8009248 <netconn_tcp_recvd+0x54>)
 8009218:	480c      	ldr	r0, [pc, #48]	; (800924c <netconn_tcp_recvd+0x58>)
 800921a:	f012 fb79 	bl	801b910 <iprintf>
 800921e:	f06f 030f 	mvn.w	r3, #15
 8009222:	e00b      	b.n	800923c <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8009224:	f107 030c 	add.w	r3, r7, #12
 8009228:	461a      	mov	r2, r3
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff ffb1 	bl	8009194 <netconn_tcp_recvd_msg>
 8009232:	4603      	mov	r3, r0
 8009234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8009238:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800923c:	4618      	mov	r0, r3
 800923e:	3730      	adds	r7, #48	; 0x30
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	0801ccf0 	.word	0x0801ccf0
 8009248:	0801cf50 	.word	0x0801cf50
 800924c:	0801cd48 	.word	0x0801cd48

08009250 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b090      	sub	sp, #64	; 0x40
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	4613      	mov	r3, r2
 800925c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3310      	adds	r3, #16
 8009262:	4618      	mov	r0, r3
 8009264:	f010 fb39 	bl	80198da <sys_mbox_valid>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800926e:	f06f 030a 	mvn.w	r3, #10
 8009272:	e072      	b.n	800935a <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800927a:	b25b      	sxtb	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	da09      	bge.n	8009294 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800928a:	b2da      	uxtb	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    goto handle_fin;
 8009292:	e03b      	b.n	800930c <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	461a      	mov	r2, r3
 8009298:	68b9      	ldr	r1, [r7, #8]
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f7ff fea2 	bl	8008fe4 <netconn_recv_data>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80092a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80092ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80092b2:	e052      	b.n	800935a <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	f003 0308 	and.w	r3, r3, #8
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10e      	bne.n	80092e2 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <netconn_recv_data_tcp+0x80>
 80092ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092cc:	891b      	ldrh	r3, [r3, #8]
 80092ce:	e000      	b.n	80092d2 <netconn_recv_data_tcp+0x82>
 80092d0:	2301      	movs	r3, #1
 80092d2:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80092d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80092d6:	f107 0214 	add.w	r2, r7, #20
 80092da:	4619      	mov	r1, r3
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f7ff ff59 	bl	8009194 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80092e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d136      	bne.n	8009356 <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	f003 0310 	and.w	r3, r3, #16
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00b      	beq.n	800930a <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return ERR_WOULDBLOCK;
 8009304:	f06f 0306 	mvn.w	r3, #6
 8009308:	e027      	b.n	800935a <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 800930a:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009310:	2b00      	cmp	r3, #0
 8009312:	d005      	beq.n	8009320 <netconn_recv_data_tcp+0xd0>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	2200      	movs	r2, #0
 800931a:	2101      	movs	r1, #1
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10f      	bne.n	8009348 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f9a3 	bl	8009674 <netconn_err>
 800932e:	4603      	mov	r3, r0
 8009330:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009334:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <netconn_recv_data_tcp+0xf2>
          return err;
 800933c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009340:	e00b      	b.n	800935a <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8009342:	f06f 030d 	mvn.w	r3, #13
 8009346:	e008      	b.n	800935a <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009348:	2101      	movs	r1, #1
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 f962 	bl	8009614 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009350:	f06f 030e 	mvn.w	r3, #14
 8009354:	e001      	b.n	800935a <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8009356:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800935a:	4618      	mov	r0, r3
 800935c:	3740      	adds	r7, #64	; 0x40
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	4613      	mov	r3, r2
 8009370:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <netconn_recv_tcp_pbuf_flags+0x20>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009380:	2b10      	cmp	r3, #16
 8009382:	d009      	beq.n	8009398 <netconn_recv_tcp_pbuf_flags+0x34>
 8009384:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8009386:	f240 3225 	movw	r2, #805	; 0x325
 800938a:	490a      	ldr	r1, [pc, #40]	; (80093b4 <netconn_recv_tcp_pbuf_flags+0x50>)
 800938c:	480a      	ldr	r0, [pc, #40]	; (80093b8 <netconn_recv_tcp_pbuf_flags+0x54>)
 800938e:	f012 fabf 	bl	801b910 <iprintf>
 8009392:	f06f 030f 	mvn.w	r3, #15
 8009396:	e006      	b.n	80093a6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	461a      	mov	r2, r3
 800939c:	68b9      	ldr	r1, [r7, #8]
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f7ff ff56 	bl	8009250 <netconn_recv_data_tcp>
 80093a4:	4603      	mov	r3, r0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	0801ccf0 	.word	0x0801ccf0
 80093b4:	0801cf50 	.word	0x0801cf50
 80093b8:	0801cd48 	.word	0x0801cd48

080093bc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <netconn_recv_udp_raw_netbuf_flags+0x20>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093d8:	2b10      	cmp	r3, #16
 80093da:	d109      	bne.n	80093f0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80093dc:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80093de:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80093e2:	490a      	ldr	r1, [pc, #40]	; (800940c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 80093e4:	480a      	ldr	r0, [pc, #40]	; (8009410 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 80093e6:	f012 fa93 	bl	801b910 <iprintf>
 80093ea:	f06f 030f 	mvn.w	r3, #15
 80093ee:	e006      	b.n	80093fe <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	461a      	mov	r2, r3
 80093f4:	68b9      	ldr	r1, [r7, #8]
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f7ff fdf4 	bl	8008fe4 <netconn_recv_data>
 80093fc:	4603      	mov	r3, r0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	0801ccf0 	.word	0x0801ccf0
 800940c:	0801cf74 	.word	0x0801cf74
 8009410:	0801cd48 	.word	0x0801cd48

08009414 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08c      	sub	sp, #48	; 0x30
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d109      	bne.n	8009438 <netconn_send+0x24>
 8009424:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <netconn_send+0x4c>)
 8009426:	f240 32b2 	movw	r2, #946	; 0x3b2
 800942a:	490e      	ldr	r1, [pc, #56]	; (8009464 <netconn_send+0x50>)
 800942c:	480e      	ldr	r0, [pc, #56]	; (8009468 <netconn_send+0x54>)
 800942e:	f012 fa6f 	bl	801b910 <iprintf>
 8009432:	f06f 030f 	mvn.w	r3, #15
 8009436:	e00e      	b.n	8009456 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009440:	f107 030c 	add.w	r3, r7, #12
 8009444:	4619      	mov	r1, r3
 8009446:	4809      	ldr	r0, [pc, #36]	; (800946c <netconn_send+0x58>)
 8009448:	f7ff fc40 	bl	8008ccc <netconn_apimsg>
 800944c:	4603      	mov	r3, r0
 800944e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009452:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009456:	4618      	mov	r0, r3
 8009458:	3730      	adds	r7, #48	; 0x30
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	0801ccf0 	.word	0x0801ccf0
 8009464:	0801cfac 	.word	0x0801cfac
 8009468:	0801cd48 	.word	0x0801cd48
 800946c:	0800a86d 	.word	0x0800a86d

08009470 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af02      	add	r7, sp, #8
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	f107 0110 	add.w	r1, r7, #16
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4613      	mov	r3, r2
 8009492:	2201      	movs	r2, #1
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 f805 	bl	80094a4 <netconn_write_vectors_partly>
 800949a:	4603      	mov	r3, r0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b092      	sub	sp, #72	; 0x48
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	4611      	mov	r1, r2
 80094b0:	461a      	mov	r2, r3
 80094b2:	460b      	mov	r3, r1
 80094b4:	80fb      	strh	r3, [r7, #6]
 80094b6:	4613      	mov	r3, r2
 80094b8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d109      	bne.n	80094d4 <netconn_write_vectors_partly+0x30>
 80094c0:	4b4e      	ldr	r3, [pc, #312]	; (80095fc <netconn_write_vectors_partly+0x158>)
 80094c2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80094c6:	494e      	ldr	r1, [pc, #312]	; (8009600 <netconn_write_vectors_partly+0x15c>)
 80094c8:	484e      	ldr	r0, [pc, #312]	; (8009604 <netconn_write_vectors_partly+0x160>)
 80094ca:	f012 fa21 	bl	801b910 <iprintf>
 80094ce:	f06f 030f 	mvn.w	r3, #15
 80094d2:	e08f      	b.n	80095f4 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094dc:	2b10      	cmp	r3, #16
 80094de:	d009      	beq.n	80094f4 <netconn_write_vectors_partly+0x50>
 80094e0:	4b46      	ldr	r3, [pc, #280]	; (80095fc <netconn_write_vectors_partly+0x158>)
 80094e2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80094e6:	4948      	ldr	r1, [pc, #288]	; (8009608 <netconn_write_vectors_partly+0x164>)
 80094e8:	4846      	ldr	r0, [pc, #280]	; (8009604 <netconn_write_vectors_partly+0x160>)
 80094ea:	f012 fa11 	bl	801b910 <iprintf>
 80094ee:	f06f 0305 	mvn.w	r3, #5
 80094f2:	e07f      	b.n	80095f4 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d104      	bne.n	800950c <netconn_write_vectors_partly+0x68>
 8009502:	797b      	ldrb	r3, [r7, #5]
 8009504:	f003 0304 	and.w	r3, r3, #4
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <netconn_write_vectors_partly+0x6c>
 800950c:	2301      	movs	r3, #1
 800950e:	e000      	b.n	8009512 <netconn_write_vectors_partly+0x6e>
 8009510:	2300      	movs	r3, #0
 8009512:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009516:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800951a:	2b00      	cmp	r3, #0
 800951c:	d005      	beq.n	800952a <netconn_write_vectors_partly+0x86>
 800951e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009524:	f06f 0305 	mvn.w	r3, #5
 8009528:	e064      	b.n	80095f4 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800952e:	2300      	movs	r3, #0
 8009530:	643b      	str	r3, [r7, #64]	; 0x40
 8009532:	e015      	b.n	8009560 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8009534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	4413      	add	r3, r2
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009540:	4413      	add	r3, r2
 8009542:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	4413      	add	r3, r2
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009550:	429a      	cmp	r2, r3
 8009552:	d202      	bcs.n	800955a <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8009554:	f06f 0305 	mvn.w	r3, #5
 8009558:	e04c      	b.n	80095f4 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 800955a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800955c:	3301      	adds	r3, #1
 800955e:	643b      	str	r3, [r7, #64]	; 0x40
 8009560:	88fb      	ldrh	r3, [r7, #6]
 8009562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009564:	429a      	cmp	r2, r3
 8009566:	dbe5      	blt.n	8009534 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8009568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	e040      	b.n	80095f4 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8009572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009574:	2b00      	cmp	r3, #0
 8009576:	da0a      	bge.n	800958e <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800957a:	2b00      	cmp	r3, #0
 800957c:	d102      	bne.n	8009584 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 800957e:	f06f 0305 	mvn.w	r3, #5
 8009582:	e037      	b.n	80095f4 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009584:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009588:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800958a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800959a:	2300      	movs	r3, #0
 800959c:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800959e:	797b      	ldrb	r3, [r7, #5]
 80095a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80095a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095a6:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80095ac:	f107 0314 	add.w	r3, r7, #20
 80095b0:	4619      	mov	r1, r3
 80095b2:	4816      	ldr	r0, [pc, #88]	; (800960c <netconn_write_vectors_partly+0x168>)
 80095b4:	f7ff fb8a 	bl	8008ccc <netconn_apimsg>
 80095b8:	4603      	mov	r3, r0
 80095ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80095be:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d114      	bne.n	80095f0 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 80095c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80095cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095d0:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80095d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10a      	bne.n	80095f0 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80095da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095de:	429a      	cmp	r2, r3
 80095e0:	d006      	beq.n	80095f0 <netconn_write_vectors_partly+0x14c>
 80095e2:	4b06      	ldr	r3, [pc, #24]	; (80095fc <netconn_write_vectors_partly+0x158>)
 80095e4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80095e8:	4909      	ldr	r1, [pc, #36]	; (8009610 <netconn_write_vectors_partly+0x16c>)
 80095ea:	4806      	ldr	r0, [pc, #24]	; (8009604 <netconn_write_vectors_partly+0x160>)
 80095ec:	f012 f990 	bl	801b910 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80095f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3748      	adds	r7, #72	; 0x48
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	0801ccf0 	.word	0x0801ccf0
 8009600:	0801cfc8 	.word	0x0801cfc8
 8009604:	0801cd48 	.word	0x0801cd48
 8009608:	0801cfe4 	.word	0x0801cfe4
 800960c:	0800ad11 	.word	0x0800ad11
 8009610:	0801d008 	.word	0x0801d008

08009614 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08c      	sub	sp, #48	; 0x30
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d109      	bne.n	800963a <netconn_close_shutdown+0x26>
 8009626:	4b0f      	ldr	r3, [pc, #60]	; (8009664 <netconn_close_shutdown+0x50>)
 8009628:	f240 4247 	movw	r2, #1095	; 0x447
 800962c:	490e      	ldr	r1, [pc, #56]	; (8009668 <netconn_close_shutdown+0x54>)
 800962e:	480f      	ldr	r0, [pc, #60]	; (800966c <netconn_close_shutdown+0x58>)
 8009630:	f012 f96e 	bl	801b910 <iprintf>
 8009634:	f06f 030f 	mvn.w	r3, #15
 8009638:	e010      	b.n	800965c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009642:	2329      	movs	r3, #41	; 0x29
 8009644:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009646:	f107 030c 	add.w	r3, r7, #12
 800964a:	4619      	mov	r1, r3
 800964c:	4808      	ldr	r0, [pc, #32]	; (8009670 <netconn_close_shutdown+0x5c>)
 800964e:	f7ff fb3d 	bl	8008ccc <netconn_apimsg>
 8009652:	4603      	mov	r3, r0
 8009654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009658:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800965c:	4618      	mov	r0, r3
 800965e:	3730      	adds	r7, #48	; 0x30
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	0801ccf0 	.word	0x0801ccf0
 8009668:	0801d02c 	.word	0x0801d02c
 800966c:	0801cd48 	.word	0x0801cd48
 8009670:	0800af35 	.word	0x0800af35

08009674 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <netconn_err+0x12>
    return ERR_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	e00d      	b.n	80096a2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009686:	f010 fa43 	bl	8019b10 <sys_arch_protect>
 800968a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	7a1b      	ldrb	r3, [r3, #8]
 8009690:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f010 fa47 	bl	8019b2c <sys_arch_unprotect>
  return err;
 800969e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80096b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096ba:	f113 0f0d 	cmn.w	r3, #13
 80096be:	d009      	beq.n	80096d4 <lwip_netconn_err_to_msg+0x28>
 80096c0:	f113 0f0d 	cmn.w	r3, #13
 80096c4:	dc0c      	bgt.n	80096e0 <lwip_netconn_err_to_msg+0x34>
 80096c6:	f113 0f0f 	cmn.w	r3, #15
 80096ca:	d007      	beq.n	80096dc <lwip_netconn_err_to_msg+0x30>
 80096cc:	f113 0f0e 	cmn.w	r3, #14
 80096d0:	d002      	beq.n	80096d8 <lwip_netconn_err_to_msg+0x2c>
 80096d2:	e005      	b.n	80096e0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80096d4:	4b0a      	ldr	r3, [pc, #40]	; (8009700 <lwip_netconn_err_to_msg+0x54>)
 80096d6:	e00e      	b.n	80096f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <lwip_netconn_err_to_msg+0x58>)
 80096da:	e00c      	b.n	80096f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <lwip_netconn_err_to_msg+0x5c>)
 80096de:	e00a      	b.n	80096f6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80096e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d005      	beq.n	80096f4 <lwip_netconn_err_to_msg+0x48>
 80096e8:	4b08      	ldr	r3, [pc, #32]	; (800970c <lwip_netconn_err_to_msg+0x60>)
 80096ea:	227d      	movs	r2, #125	; 0x7d
 80096ec:	4908      	ldr	r1, [pc, #32]	; (8009710 <lwip_netconn_err_to_msg+0x64>)
 80096ee:	4809      	ldr	r0, [pc, #36]	; (8009714 <lwip_netconn_err_to_msg+0x68>)
 80096f0:	f012 f90e 	bl	801b910 <iprintf>
      return NULL;
 80096f4:	2300      	movs	r3, #0
  }
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	08020a20 	.word	0x08020a20
 8009704:	08020a21 	.word	0x08020a21
 8009708:	08020a22 	.word	0x08020a22
 800970c:	0801d048 	.word	0x0801d048
 8009710:	0801d07c 	.word	0x0801d07c
 8009714:	0801d08c 	.word	0x0801d08c

08009718 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d105      	bne.n	8009734 <lwip_netconn_is_err_msg+0x1c>
 8009728:	4b12      	ldr	r3, [pc, #72]	; (8009774 <lwip_netconn_is_err_msg+0x5c>)
 800972a:	2285      	movs	r2, #133	; 0x85
 800972c:	4912      	ldr	r1, [pc, #72]	; (8009778 <lwip_netconn_is_err_msg+0x60>)
 800972e:	4813      	ldr	r0, [pc, #76]	; (800977c <lwip_netconn_is_err_msg+0x64>)
 8009730:	f012 f8ee 	bl	801b910 <iprintf>

  if (msg == &netconn_aborted) {
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a12      	ldr	r2, [pc, #72]	; (8009780 <lwip_netconn_is_err_msg+0x68>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d104      	bne.n	8009746 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	22f3      	movs	r2, #243	; 0xf3
 8009740:	701a      	strb	r2, [r3, #0]
    return 1;
 8009742:	2301      	movs	r3, #1
 8009744:	e012      	b.n	800976c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a0e      	ldr	r2, [pc, #56]	; (8009784 <lwip_netconn_is_err_msg+0x6c>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d104      	bne.n	8009758 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	22f2      	movs	r2, #242	; 0xf2
 8009752:	701a      	strb	r2, [r3, #0]
    return 1;
 8009754:	2301      	movs	r3, #1
 8009756:	e009      	b.n	800976c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a0b      	ldr	r2, [pc, #44]	; (8009788 <lwip_netconn_is_err_msg+0x70>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d104      	bne.n	800976a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	22f1      	movs	r2, #241	; 0xf1
 8009764:	701a      	strb	r2, [r3, #0]
    return 1;
 8009766:	2301      	movs	r3, #1
 8009768:	e000      	b.n	800976c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	0801d048 	.word	0x0801d048
 8009778:	0801d0b4 	.word	0x0801d0b4
 800977c:	0801d08c 	.word	0x0801d08c
 8009780:	08020a20 	.word	0x08020a20
 8009784:	08020a21 	.word	0x08020a21
 8009788:	08020a22 	.word	0x08020a22

0800978c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08a      	sub	sp, #40	; 0x28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d105      	bne.n	80097ac <recv_udp+0x20>
 80097a0:	4b43      	ldr	r3, [pc, #268]	; (80098b0 <recv_udp+0x124>)
 80097a2:	22e5      	movs	r2, #229	; 0xe5
 80097a4:	4943      	ldr	r1, [pc, #268]	; (80098b4 <recv_udp+0x128>)
 80097a6:	4844      	ldr	r0, [pc, #272]	; (80098b8 <recv_udp+0x12c>)
 80097a8:	f012 f8b2 	bl	801b910 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d105      	bne.n	80097be <recv_udp+0x32>
 80097b2:	4b3f      	ldr	r3, [pc, #252]	; (80098b0 <recv_udp+0x124>)
 80097b4:	22e6      	movs	r2, #230	; 0xe6
 80097b6:	4941      	ldr	r1, [pc, #260]	; (80098bc <recv_udp+0x130>)
 80097b8:	483f      	ldr	r0, [pc, #252]	; (80098b8 <recv_udp+0x12c>)
 80097ba:	f012 f8a9 	bl	801b910 <iprintf>
  conn = (struct netconn *)arg;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	627b      	str	r3, [r7, #36]	; 0x24

  if (conn == NULL) {
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d103      	bne.n	80097d0 <recv_udp+0x44>
    pbuf_free(p);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f004 fb4d 	bl	800de68 <pbuf_free>
    return;
 80097ce:	e06b      	b.n	80098a8 <recv_udp+0x11c>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d005      	beq.n	80097e6 <recv_udp+0x5a>
 80097da:	4b35      	ldr	r3, [pc, #212]	; (80098b0 <recv_udp+0x124>)
 80097dc:	22ee      	movs	r2, #238	; 0xee
 80097de:	4938      	ldr	r1, [pc, #224]	; (80098c0 <recv_udp+0x134>)
 80097e0:	4835      	ldr	r0, [pc, #212]	; (80098b8 <recv_udp+0x12c>)
 80097e2:	f012 f895 	bl	801b910 <iprintf>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
 80097e6:	f010 f993 	bl	8019b10 <sys_arch_protect>
 80097ea:	6238      	str	r0, [r7, #32]
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	61fb      	str	r3, [r7, #28]
 80097f2:	6a38      	ldr	r0, [r7, #32]
 80097f4:	f010 f99a 	bl	8019b2c <sys_arch_unprotect>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	3310      	adds	r3, #16
 80097fc:	4618      	mov	r0, r3
 80097fe:	f010 f86c 	bl	80198da <sys_mbox_valid>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d008      	beq.n	800981a <recv_udp+0x8e>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	891b      	ldrh	r3, [r3, #8]
 800980c:	461a      	mov	r2, r3
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	441a      	add	r2, r3
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	69db      	ldr	r3, [r3, #28]
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 8009816:	429a      	cmp	r2, r3
 8009818:	dd03      	ble.n	8009822 <recv_udp+0x96>
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f004 fb24 	bl	800de68 <pbuf_free>
    return;
 8009820:	e042      	b.n	80098a8 <recv_udp+0x11c>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009822:	2006      	movs	r0, #6
 8009824:	f003 fbec 	bl	800d000 <memp_malloc>
 8009828:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d103      	bne.n	8009838 <recv_udp+0xac>
    pbuf_free(p);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f004 fb19 	bl	800de68 <pbuf_free>
    return;
 8009836:	e037      	b.n	80098a8 <recv_udp+0x11c>
  } else {
    buf->p = p;
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d002      	beq.n	8009850 <recv_udp+0xc4>
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	e000      	b.n	8009852 <recv_udp+0xc6>
 8009850:	2300      	movs	r3, #0
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800985a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	891b      	ldrh	r3, [r3, #8]
 8009860:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	3310      	adds	r3, #16
 8009866:	69b9      	ldr	r1, [r7, #24]
 8009868:	4618      	mov	r0, r3
 800986a:	f00f ffc1 	bl	80197f0 <sys_mbox_trypost>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <recv_udp+0xf0>
    netbuf_delete(buf);
 8009874:	69b8      	ldr	r0, [r7, #24]
 8009876:	f001 fc07 	bl	800b088 <netbuf_delete>
    return;
 800987a:	e015      	b.n	80098a8 <recv_udp+0x11c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 800987c:	f010 f948 	bl	8019b10 <sys_arch_protect>
 8009880:	6138      	str	r0, [r7, #16]
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	6a1a      	ldr	r2, [r3, #32]
 8009886:	8afb      	ldrh	r3, [r7, #22]
 8009888:	441a      	add	r2, r3
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	621a      	str	r2, [r3, #32]
 800988e:	6938      	ldr	r0, [r7, #16]
 8009890:	f010 f94c 	bl	8019b2c <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <recv_udp+0x11c>
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	8afa      	ldrh	r2, [r7, #22]
 80098a2:	2100      	movs	r1, #0
 80098a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098a6:	4798      	blx	r3
  }
}
 80098a8:	3728      	adds	r7, #40	; 0x28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	0801d048 	.word	0x0801d048
 80098b4:	0801d0c0 	.word	0x0801d0c0
 80098b8:	0801d08c 	.word	0x0801d08c
 80098bc:	0801d0e4 	.word	0x0801d0e4
 80098c0:	0801d104 	.word	0x0801d104

080098c4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d106      	bne.n	80098e6 <recv_tcp+0x22>
 80098d8:	4b3c      	ldr	r3, [pc, #240]	; (80099cc <recv_tcp+0x108>)
 80098da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80098de:	493c      	ldr	r1, [pc, #240]	; (80099d0 <recv_tcp+0x10c>)
 80098e0:	483c      	ldr	r0, [pc, #240]	; (80099d4 <recv_tcp+0x110>)
 80098e2:	f012 f815 	bl	801b910 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d106      	bne.n	80098fa <recv_tcp+0x36>
 80098ec:	4b37      	ldr	r3, [pc, #220]	; (80099cc <recv_tcp+0x108>)
 80098ee:	f240 122d 	movw	r2, #301	; 0x12d
 80098f2:	4939      	ldr	r1, [pc, #228]	; (80099d8 <recv_tcp+0x114>)
 80098f4:	4837      	ldr	r0, [pc, #220]	; (80099d4 <recv_tcp+0x110>)
 80098f6:	f012 f80b 	bl	801b910 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80098fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d006      	beq.n	8009910 <recv_tcp+0x4c>
 8009902:	4b32      	ldr	r3, [pc, #200]	; (80099cc <recv_tcp+0x108>)
 8009904:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009908:	4934      	ldr	r1, [pc, #208]	; (80099dc <recv_tcp+0x118>)
 800990a:	4832      	ldr	r0, [pc, #200]	; (80099d4 <recv_tcp+0x110>)
 800990c:	f012 f800 	bl	801b910 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <recv_tcp+0x5c>
    return ERR_VAL;
 800991a:	f06f 0305 	mvn.w	r3, #5
 800991e:	e051      	b.n	80099c4 <recv_tcp+0x100>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	429a      	cmp	r2, r3
 8009928:	d006      	beq.n	8009938 <recv_tcp+0x74>
 800992a:	4b28      	ldr	r3, [pc, #160]	; (80099cc <recv_tcp+0x108>)
 800992c:	f240 1235 	movw	r2, #309	; 0x135
 8009930:	492b      	ldr	r1, [pc, #172]	; (80099e0 <recv_tcp+0x11c>)
 8009932:	4828      	ldr	r0, [pc, #160]	; (80099d4 <recv_tcp+0x110>)
 8009934:	f011 ffec 	bl	801b910 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	3310      	adds	r3, #16
 800993c:	4618      	mov	r0, r3
 800993e:	f00f ffcc 	bl	80198da <sys_mbox_valid>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10d      	bne.n	8009964 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d008      	beq.n	8009960 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	891b      	ldrh	r3, [r3, #8]
 8009952:	4619      	mov	r1, r3
 8009954:	68b8      	ldr	r0, [r7, #8]
 8009956:	f005 f8ed 	bl	800eb34 <tcp_recved>
      pbuf_free(p);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f004 fa84 	bl	800de68 <pbuf_free>
    }
    return ERR_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	e02f      	b.n	80099c4 <recv_tcp+0x100>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d005      	beq.n	8009976 <recv_tcp+0xb2>
    msg = p;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	891b      	ldrh	r3, [r3, #8]
 8009972:	83fb      	strh	r3, [r7, #30]
 8009974:	e003      	b.n	800997e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009976:	4b1b      	ldr	r3, [pc, #108]	; (80099e4 <recv_tcp+0x120>)
 8009978:	61bb      	str	r3, [r7, #24]
    len = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	3310      	adds	r3, #16
 8009982:	69b9      	ldr	r1, [r7, #24]
 8009984:	4618      	mov	r0, r3
 8009986:	f00f ff33 	bl	80197f0 <sys_mbox_trypost>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009994:	e016      	b.n	80099c4 <recv_tcp+0x100>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 8009996:	f010 f8bb 	bl	8019b10 <sys_arch_protect>
 800999a:	6138      	str	r0, [r7, #16]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	6a1a      	ldr	r2, [r3, #32]
 80099a0:	8bfb      	ldrh	r3, [r7, #30]
 80099a2:	441a      	add	r2, r3
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	621a      	str	r2, [r3, #32]
 80099a8:	6938      	ldr	r0, [r7, #16]
 80099aa:	f010 f8bf 	bl	8019b2c <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d005      	beq.n	80099c2 <recv_tcp+0xfe>
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ba:	8bfa      	ldrh	r2, [r7, #30]
 80099bc:	2100      	movs	r1, #0
 80099be:	6978      	ldr	r0, [r7, #20]
 80099c0:	4798      	blx	r3
  }

  return ERR_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3720      	adds	r7, #32
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	0801d048 	.word	0x0801d048
 80099d0:	0801d124 	.word	0x0801d124
 80099d4:	0801d08c 	.word	0x0801d08c
 80099d8:	0801d148 	.word	0x0801d148
 80099dc:	0801d168 	.word	0x0801d168
 80099e0:	0801d180 	.word	0x0801d180
 80099e4:	08020a22 	.word	0x08020a22

080099e8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d106      	bne.n	8009a0a <poll_tcp+0x22>
 80099fc:	4b2b      	ldr	r3, [pc, #172]	; (8009aac <poll_tcp+0xc4>)
 80099fe:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009a02:	492b      	ldr	r1, [pc, #172]	; (8009ab0 <poll_tcp+0xc8>)
 8009a04:	482b      	ldr	r0, [pc, #172]	; (8009ab4 <poll_tcp+0xcc>)
 8009a06:	f011 ff83 	bl	801b910 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d104      	bne.n	8009a1c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009a12:	2101      	movs	r1, #1
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 ffab 	bl	800a970 <lwip_netconn_do_writemore>
 8009a1a:	e016      	b.n	8009a4a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	785b      	ldrb	r3, [r3, #1]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d112      	bne.n	8009a4a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00a      	beq.n	8009a42 <poll_tcp+0x5a>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a30:	7a5b      	ldrb	r3, [r3, #9]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d005      	beq.n	8009a42 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	7a5a      	ldrb	r2, [r3, #9]
 8009a3c:	3a01      	subs	r2, #1
 8009a3e:	b2d2      	uxtb	r2, r2
 8009a40:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009a42:	2101      	movs	r1, #1
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 fb4f 	bl	800a0e8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d023      	beq.n	8009aa0 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01f      	beq.n	8009aa0 <poll_tcp+0xb8>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009a68:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009a6c:	d318      	bcc.n	8009aa0 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	d812      	bhi.n	8009aa0 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a80:	f023 0310 	bic.w	r3, r3, #16
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d005      	beq.n	8009aa0 <poll_tcp+0xb8>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2102      	movs	r1, #2
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	0801d048 	.word	0x0801d048
 8009ab0:	0801d1a0 	.word	0x0801d1a0
 8009ab4:	0801d08c 	.word	0x0801d08c

08009ab8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d106      	bne.n	8009ade <sent_tcp+0x26>
 8009ad0:	4b21      	ldr	r3, [pc, #132]	; (8009b58 <sent_tcp+0xa0>)
 8009ad2:	f240 1293 	movw	r2, #403	; 0x193
 8009ad6:	4921      	ldr	r1, [pc, #132]	; (8009b5c <sent_tcp+0xa4>)
 8009ad8:	4821      	ldr	r0, [pc, #132]	; (8009b60 <sent_tcp+0xa8>)
 8009ada:	f011 ff19 	bl	801b910 <iprintf>

  if (conn) {
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d034      	beq.n	8009b4e <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d104      	bne.n	8009af6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009aec:	2101      	movs	r1, #1
 8009aee:	6978      	ldr	r0, [r7, #20]
 8009af0:	f000 ff3e 	bl	800a970 <lwip_netconn_do_writemore>
 8009af4:	e007      	b.n	8009b06 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	785b      	ldrb	r3, [r3, #1]
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d103      	bne.n	8009b06 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009afe:	2101      	movs	r1, #1
 8009b00:	6978      	ldr	r0, [r7, #20]
 8009b02:	f000 faf1 	bl	800a0e8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d01f      	beq.n	8009b4e <sent_tcp+0x96>
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b16:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009b1a:	d318      	bcc.n	8009b4e <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	d812      	bhi.n	8009b4e <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b2e:	f023 0310 	bic.w	r3, r3, #16
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <sent_tcp+0x96>
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b46:	88fa      	ldrh	r2, [r7, #6]
 8009b48:	2102      	movs	r1, #2
 8009b4a:	6978      	ldr	r0, [r7, #20]
 8009b4c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	0801d048 	.word	0x0801d048
 8009b5c:	0801d1a0 	.word	0x0801d1a0
 8009b60:	0801d08c 	.word	0x0801d08c

08009b64 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b088      	sub	sp, #32
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <err_tcp+0x24>
 8009b7a:	4b61      	ldr	r3, [pc, #388]	; (8009d00 <err_tcp+0x19c>)
 8009b7c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009b80:	4960      	ldr	r1, [pc, #384]	; (8009d04 <err_tcp+0x1a0>)
 8009b82:	4861      	ldr	r0, [pc, #388]	; (8009d08 <err_tcp+0x1a4>)
 8009b84:	f011 fec4 	bl	801b910 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009b88:	f00f ffc2 	bl	8019b10 <sys_arch_protect>
 8009b8c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	2200      	movs	r2, #0
 8009b92:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	78fa      	ldrb	r2, [r7, #3]
 8009b98:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ba0:	f043 0301 	orr.w	r3, r3, #1
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009bb8:	69b8      	ldr	r0, [r7, #24]
 8009bba:	f00f ffb7 	bl	8019b2c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <err_tcp+0x6e>
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2104      	movs	r1, #4
 8009bce:	69f8      	ldr	r0, [r7, #28]
 8009bd0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <err_tcp+0x82>
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bde:	2200      	movs	r2, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	69f8      	ldr	r0, [r7, #28]
 8009be4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d005      	beq.n	8009bfa <err_tcp+0x96>
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2102      	movs	r1, #2
 8009bf6:	69f8      	ldr	r0, [r7, #28]
 8009bf8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7ff fd54 	bl	80096ac <lwip_netconn_err_to_msg>
 8009c04:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	3310      	adds	r3, #16
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f00f fe65 	bl	80198da <sys_mbox_valid>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d005      	beq.n	8009c22 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	3310      	adds	r3, #16
 8009c1a:	6939      	ldr	r1, [r7, #16]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f00f fde7 	bl	80197f0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	3314      	adds	r3, #20
 8009c26:	4618      	mov	r0, r3
 8009c28:	f00f fe57 	bl	80198da <sys_mbox_valid>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d005      	beq.n	8009c3e <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	3314      	adds	r3, #20
 8009c36:	6939      	ldr	r1, [r7, #16]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f00f fdd9 	bl	80197f0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009c3e:	7dfb      	ldrb	r3, [r7, #23]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d005      	beq.n	8009c50 <err_tcp+0xec>
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d002      	beq.n	8009c50 <err_tcp+0xec>
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	2b03      	cmp	r3, #3
 8009c4e:	d146      	bne.n	8009cde <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c56:	f003 0304 	and.w	r3, r3, #4
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	bf14      	ite	ne
 8009c5e:	2301      	movne	r3, #1
 8009c60:	2300      	moveq	r3, #0
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c6c:	f023 0304 	bic.w	r3, r3, #4
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (!was_nonblocking_connect) {
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d13b      	bne.n	8009cf6 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <err_tcp+0x130>
 8009c86:	4b1e      	ldr	r3, [pc, #120]	; (8009d00 <err_tcp+0x19c>)
 8009c88:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009c8c:	491f      	ldr	r1, [pc, #124]	; (8009d0c <err_tcp+0x1a8>)
 8009c8e:	481e      	ldr	r0, [pc, #120]	; (8009d08 <err_tcp+0x1a4>)
 8009c90:	f011 fe3e 	bl	801b910 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d104      	bne.n	8009ca4 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	711a      	strb	r2, [r3, #4]
 8009ca2:	e003      	b.n	8009cac <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca8:	78fa      	ldrb	r2, [r7, #3]
 8009caa:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009cb6:	68b8      	ldr	r0, [r7, #8]
 8009cb8:	f00f fea0 	bl	80199fc <sys_sem_valid>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d106      	bne.n	8009cd0 <err_tcp+0x16c>
 8009cc2:	4b0f      	ldr	r3, [pc, #60]	; (8009d00 <err_tcp+0x19c>)
 8009cc4:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009cc8:	4911      	ldr	r1, [pc, #68]	; (8009d10 <err_tcp+0x1ac>)
 8009cca:	480f      	ldr	r0, [pc, #60]	; (8009d08 <err_tcp+0x1a4>)
 8009ccc:	f011 fe20 	bl	801b910 <iprintf>
      conn->current_msg = NULL;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	629a      	str	r2, [r3, #40]	; 0x28
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009cd6:	68b8      	ldr	r0, [r7, #8]
 8009cd8:	f00f fe76 	bl	80199c8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009cdc:	e00b      	b.n	8009cf6 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d008      	beq.n	8009cf8 <err_tcp+0x194>
 8009ce6:	4b06      	ldr	r3, [pc, #24]	; (8009d00 <err_tcp+0x19c>)
 8009ce8:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009cec:	4909      	ldr	r1, [pc, #36]	; (8009d14 <err_tcp+0x1b0>)
 8009cee:	4806      	ldr	r0, [pc, #24]	; (8009d08 <err_tcp+0x1a4>)
 8009cf0:	f011 fe0e 	bl	801b910 <iprintf>
  }
}
 8009cf4:	e000      	b.n	8009cf8 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8009cf6:	bf00      	nop
}
 8009cf8:	bf00      	nop
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	0801d048 	.word	0x0801d048
 8009d04:	0801d1a0 	.word	0x0801d1a0
 8009d08:	0801d08c 	.word	0x0801d08c
 8009d0c:	0801d1b0 	.word	0x0801d1b0
 8009d10:	0801d1cc 	.word	0x0801d1cc
 8009d14:	0801d1e8 	.word	0x0801d1e8

08009d18 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f005 fee1 	bl	800faf0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009d2e:	490a      	ldr	r1, [pc, #40]	; (8009d58 <setup_tcp+0x40>)
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f005 feef 	bl	800fb14 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009d36:	4909      	ldr	r1, [pc, #36]	; (8009d5c <setup_tcp+0x44>)
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f005 ff0d 	bl	800fb58 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009d3e:	2202      	movs	r2, #2
 8009d40:	4907      	ldr	r1, [pc, #28]	; (8009d60 <setup_tcp+0x48>)
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f005 ff64 	bl	800fc10 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009d48:	4906      	ldr	r1, [pc, #24]	; (8009d64 <setup_tcp+0x4c>)
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f005 ff26 	bl	800fb9c <tcp_err>
}
 8009d50:	bf00      	nop
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	080098c5 	.word	0x080098c5
 8009d5c:	08009ab9 	.word	0x08009ab9
 8009d60:	080099e9 	.word	0x080099e9
 8009d64:	08009b65 	.word	0x08009b65

08009d68 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d006      	beq.n	8009d8c <pcb_new+0x24>
 8009d7e:	4b2b      	ldr	r3, [pc, #172]	; (8009e2c <pcb_new+0xc4>)
 8009d80:	f240 2265 	movw	r2, #613	; 0x265
 8009d84:	492a      	ldr	r1, [pc, #168]	; (8009e30 <pcb_new+0xc8>)
 8009d86:	482b      	ldr	r0, [pc, #172]	; (8009e34 <pcb_new+0xcc>)
 8009d88:	f011 fdc2 	bl	801b910 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d96:	2b10      	cmp	r3, #16
 8009d98:	d022      	beq.n	8009de0 <pcb_new+0x78>
 8009d9a:	2b20      	cmp	r3, #32
 8009d9c:	d133      	bne.n	8009e06 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681c      	ldr	r4, [r3, #0]
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	4618      	mov	r0, r3
 8009da6:	f00b f9fe 	bl	80151a6 <udp_new_ip_type>
 8009daa:	4603      	mov	r3, r0
 8009dac:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d02a      	beq.n	8009e0e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b22      	cmp	r3, #34	; 0x22
 8009dc0:	d104      	bne.n	8009dcc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6858      	ldr	r0, [r3, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	4917      	ldr	r1, [pc, #92]	; (8009e38 <pcb_new+0xd0>)
 8009dda:	f00b f96b 	bl	80150b4 <udp_recv>
      }
      break;
 8009dde:	e016      	b.n	8009e0e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681c      	ldr	r4, [r3, #0]
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f005 fe74 	bl	800fad4 <tcp_new_ip_type>
 8009dec:	4603      	mov	r3, r0
 8009dee:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00b      	beq.n	8009e12 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff ff8a 	bl	8009d18 <setup_tcp>
      }
      break;
 8009e04:	e005      	b.n	8009e12 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	22fa      	movs	r2, #250	; 0xfa
 8009e0a:	711a      	strb	r2, [r3, #4]
      return;
 8009e0c:	e00a      	b.n	8009e24 <pcb_new+0xbc>
      break;
 8009e0e:	bf00      	nop
 8009e10:	e000      	b.n	8009e14 <pcb_new+0xac>
      break;
 8009e12:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d102      	bne.n	8009e24 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	22ff      	movs	r2, #255	; 0xff
 8009e22:	711a      	strb	r2, [r3, #4]
  }
}
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd90      	pop	{r4, r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	0801d048 	.word	0x0801d048
 8009e30:	0801d22c 	.word	0x0801d22c
 8009e34:	0801d08c 	.word	0x0801d08c
 8009e38:	0800978d 	.word	0x0800978d

08009e3c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7ff ff85 	bl	8009d68 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009e5e:	bf00      	nop
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	6039      	str	r1, [r7, #0]
 8009e72:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009e78:	2007      	movs	r0, #7
 8009e7a:	f003 f8c1 	bl	800d000 <memp_malloc>
 8009e7e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <netconn_alloc+0x22>
    return NULL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e059      	b.n	8009f3e <netconn_alloc+0xd6>
  }

  conn->pending_err = ERR_OK;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	79fa      	ldrb	r2, [r7, #7]
 8009e94:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009e9c:	79fb      	ldrb	r3, [r7, #7]
 8009e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ea2:	2b10      	cmp	r3, #16
 8009ea4:	d004      	beq.n	8009eb0 <netconn_alloc+0x48>
 8009ea6:	2b20      	cmp	r3, #32
 8009ea8:	d105      	bne.n	8009eb6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009eaa:	2306      	movs	r3, #6
 8009eac:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009eae:	e00a      	b.n	8009ec6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009eb0:	2306      	movs	r3, #6
 8009eb2:	617b      	str	r3, [r7, #20]
      break;
 8009eb4:	e007      	b.n	8009ec6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009eb6:	4b24      	ldr	r3, [pc, #144]	; (8009f48 <netconn_alloc+0xe0>)
 8009eb8:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009ebc:	4923      	ldr	r1, [pc, #140]	; (8009f4c <netconn_alloc+0xe4>)
 8009ebe:	4824      	ldr	r0, [pc, #144]	; (8009f50 <netconn_alloc+0xe8>)
 8009ec0:	f011 fd26 	bl	801b910 <iprintf>
      goto free_and_return;
 8009ec4:	e036      	b.n	8009f34 <netconn_alloc+0xcc>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3310      	adds	r3, #16
 8009eca:	6979      	ldr	r1, [r7, #20]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f00f fc5b 	bl	8019788 <sys_mbox_new>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d12c      	bne.n	8009f32 <netconn_alloc+0xca>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	330c      	adds	r3, #12
 8009edc:	2100      	movs	r1, #0
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f00f fd19 	bl	8019916 <sys_sem_new>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3310      	adds	r3, #16
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f00f fc6c 	bl	80197cc <sys_mbox_free>
    goto free_and_return;
 8009ef4:	e01e      	b.n	8009f34 <netconn_alloc+0xcc>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3314      	adds	r3, #20
 8009efa:	4618      	mov	r0, r3
 8009efc:	f00f fcfe 	bl	80198fc <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f0c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	4a0d      	ldr	r2, [pc, #52]	; (8009f54 <netconn_alloc+0xec>)
 8009f1e:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	621a      	str	r2, [r3, #32]
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	7cfa      	ldrb	r2, [r7, #19]
 8009f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return conn;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	e005      	b.n	8009f3e <netconn_alloc+0xd6>
    goto free_and_return;
 8009f32:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009f34:	68f9      	ldr	r1, [r7, #12]
 8009f36:	2007      	movs	r0, #7
 8009f38:	f003 f8b4 	bl	800d0a4 <memp_free>
  return NULL;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	0801d048 	.word	0x0801d048
 8009f4c:	0801d24c 	.word	0x0801d24c
 8009f50:	0801d08c 	.word	0x0801d08c
 8009f54:	77359400 	.word	0x77359400

08009f58 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d006      	beq.n	8009f76 <netconn_free+0x1e>
 8009f68:	4b1b      	ldr	r3, [pc, #108]	; (8009fd8 <netconn_free+0x80>)
 8009f6a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009f6e:	491b      	ldr	r1, [pc, #108]	; (8009fdc <netconn_free+0x84>)
 8009f70:	481b      	ldr	r0, [pc, #108]	; (8009fe0 <netconn_free+0x88>)
 8009f72:	f011 fccd 	bl	801b910 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3310      	adds	r3, #16
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f00f fcad 	bl	80198da <sys_mbox_valid>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d006      	beq.n	8009f94 <netconn_free+0x3c>
 8009f86:	4b14      	ldr	r3, [pc, #80]	; (8009fd8 <netconn_free+0x80>)
 8009f88:	f240 3223 	movw	r2, #803	; 0x323
 8009f8c:	4915      	ldr	r1, [pc, #84]	; (8009fe4 <netconn_free+0x8c>)
 8009f8e:	4814      	ldr	r0, [pc, #80]	; (8009fe0 <netconn_free+0x88>)
 8009f90:	f011 fcbe 	bl	801b910 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	3314      	adds	r3, #20
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f00f fc9e 	bl	80198da <sys_mbox_valid>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d006      	beq.n	8009fb2 <netconn_free+0x5a>
 8009fa4:	4b0c      	ldr	r3, [pc, #48]	; (8009fd8 <netconn_free+0x80>)
 8009fa6:	f240 3226 	movw	r2, #806	; 0x326
 8009faa:	490f      	ldr	r1, [pc, #60]	; (8009fe8 <netconn_free+0x90>)
 8009fac:	480c      	ldr	r0, [pc, #48]	; (8009fe0 <netconn_free+0x88>)
 8009fae:	f011 fcaf 	bl	801b910 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	330c      	adds	r3, #12
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f00f fd13 	bl	80199e2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	330c      	adds	r3, #12
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f00f fd2c 	bl	8019a1e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009fc6:	6879      	ldr	r1, [r7, #4]
 8009fc8:	2007      	movs	r0, #7
 8009fca:	f003 f86b 	bl	800d0a4 <memp_free>
}
 8009fce:	bf00      	nop
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	0801d048 	.word	0x0801d048
 8009fdc:	0801d274 	.word	0x0801d274
 8009fe0:	0801d08c 	.word	0x0801d08c
 8009fe4:	0801d2a4 	.word	0x0801d2a4
 8009fe8:	0801d2e0 	.word	0x0801d2e0

08009fec <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3310      	adds	r3, #16
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f00f fc6e 	bl	80198da <sys_mbox_valid>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d02f      	beq.n	800a064 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a004:	e018      	b.n	800a038 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a00e:	2b10      	cmp	r3, #16
 800a010:	d10e      	bne.n	800a030 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f107 020f 	add.w	r2, r7, #15
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7ff fb7c 	bl	8009718 <lwip_netconn_is_err_msg>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d108      	bne.n	800a038 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	4618      	mov	r0, r3
 800a02a:	f003 ff1d 	bl	800de68 <pbuf_free>
 800a02e:	e003      	b.n	800a038 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	4618      	mov	r0, r3
 800a034:	f001 f828 	bl	800b088 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3310      	adds	r3, #16
 800a03c:	f107 0210 	add.w	r2, r7, #16
 800a040:	4611      	mov	r1, r2
 800a042:	4618      	mov	r0, r3
 800a044:	f00f fc2d 	bl	80198a2 <sys_arch_mbox_tryfetch>
 800a048:	4603      	mov	r3, r0
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a04e:	d1da      	bne.n	800a006 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3310      	adds	r3, #16
 800a054:	4618      	mov	r0, r3
 800a056:	f00f fbb9 	bl	80197cc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	3310      	adds	r3, #16
 800a05e:	4618      	mov	r0, r3
 800a060:	f00f fc4c 	bl	80198fc <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3314      	adds	r3, #20
 800a068:	4618      	mov	r0, r3
 800a06a:	f00f fc36 	bl	80198da <sys_mbox_valid>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d034      	beq.n	800a0de <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a074:	e01d      	b.n	800a0b2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f107 020e 	add.w	r2, r7, #14
 800a07c:	4611      	mov	r1, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f7ff fb4a 	bl	8009718 <lwip_netconn_is_err_msg>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d113      	bne.n	800a0b2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a08e:	6978      	ldr	r0, [r7, #20]
 800a090:	f7ff ffac 	bl	8009fec <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d007      	beq.n	800a0ac <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f004 fce1 	bl	800ea68 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a0ac:	6978      	ldr	r0, [r7, #20]
 800a0ae:	f7ff ff53 	bl	8009f58 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3314      	adds	r3, #20
 800a0b6:	f107 0210 	add.w	r2, r7, #16
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f00f fbf0 	bl	80198a2 <sys_arch_mbox_tryfetch>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0c8:	d1d5      	bne.n	800a076 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	3314      	adds	r3, #20
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f00f fb7c 	bl	80197cc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3314      	adds	r3, #20
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f00f fc0f 	bl	80198fc <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a0de:	bf00      	nop
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d106      	bne.n	800a10c <lwip_netconn_do_close_internal+0x24>
 800a0fe:	4ba1      	ldr	r3, [pc, #644]	; (800a384 <lwip_netconn_do_close_internal+0x29c>)
 800a100:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a104:	49a0      	ldr	r1, [pc, #640]	; (800a388 <lwip_netconn_do_close_internal+0x2a0>)
 800a106:	48a1      	ldr	r0, [pc, #644]	; (800a38c <lwip_netconn_do_close_internal+0x2a4>)
 800a108:	f011 fc02 	bl	801b910 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a114:	2b10      	cmp	r3, #16
 800a116:	d006      	beq.n	800a126 <lwip_netconn_do_close_internal+0x3e>
 800a118:	4b9a      	ldr	r3, [pc, #616]	; (800a384 <lwip_netconn_do_close_internal+0x29c>)
 800a11a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a11e:	499c      	ldr	r1, [pc, #624]	; (800a390 <lwip_netconn_do_close_internal+0x2a8>)
 800a120:	489a      	ldr	r0, [pc, #616]	; (800a38c <lwip_netconn_do_close_internal+0x2a4>)
 800a122:	f011 fbf5 	bl	801b910 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	785b      	ldrb	r3, [r3, #1]
 800a12a:	2b04      	cmp	r3, #4
 800a12c:	d006      	beq.n	800a13c <lwip_netconn_do_close_internal+0x54>
 800a12e:	4b95      	ldr	r3, [pc, #596]	; (800a384 <lwip_netconn_do_close_internal+0x29c>)
 800a130:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a134:	4997      	ldr	r1, [pc, #604]	; (800a394 <lwip_netconn_do_close_internal+0x2ac>)
 800a136:	4895      	ldr	r0, [pc, #596]	; (800a38c <lwip_netconn_do_close_internal+0x2a4>)
 800a138:	f011 fbea 	bl	801b910 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d106      	bne.n	800a152 <lwip_netconn_do_close_internal+0x6a>
 800a144:	4b8f      	ldr	r3, [pc, #572]	; (800a384 <lwip_netconn_do_close_internal+0x29c>)
 800a146:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a14a:	4993      	ldr	r1, [pc, #588]	; (800a398 <lwip_netconn_do_close_internal+0x2b0>)
 800a14c:	488f      	ldr	r0, [pc, #572]	; (800a38c <lwip_netconn_do_close_internal+0x2a4>)
 800a14e:	f011 fbdf 	bl	801b910 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	2b00      	cmp	r3, #0
 800a158:	d106      	bne.n	800a168 <lwip_netconn_do_close_internal+0x80>
 800a15a:	4b8a      	ldr	r3, [pc, #552]	; (800a384 <lwip_netconn_do_close_internal+0x29c>)
 800a15c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a160:	498e      	ldr	r1, [pc, #568]	; (800a39c <lwip_netconn_do_close_internal+0x2b4>)
 800a162:	488a      	ldr	r0, [pc, #552]	; (800a38c <lwip_netconn_do_close_internal+0x2a4>)
 800a164:	f011 fbd4 	bl	801b910 <iprintf>

  tpcb = conn->pcb.tcp;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a172:	7a1b      	ldrb	r3, [r3, #8]
 800a174:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	f003 0302 	and.w	r3, r3, #2
 800a184:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	2b03      	cmp	r3, #3
 800a18a:	d102      	bne.n	800a192 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a18c:	2301      	movs	r3, #1
 800a18e:	75bb      	strb	r3, [r7, #22]
 800a190:	e01f      	b.n	800a1d2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a192:	7bbb      	ldrb	r3, [r7, #14]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00e      	beq.n	800a1b6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a19c:	2b05      	cmp	r3, #5
 800a19e:	d007      	beq.n	800a1b0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a1a4:	2b06      	cmp	r3, #6
 800a1a6:	d003      	beq.n	800a1b0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a1ac:	2b08      	cmp	r3, #8
 800a1ae:	d102      	bne.n	800a1b6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	75bb      	strb	r3, [r7, #22]
 800a1b4:	e00d      	b.n	800a1d2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a1b6:	7b7b      	ldrb	r3, [r7, #13]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d008      	beq.n	800a1ce <lwip_netconn_do_close_internal+0xe6>
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	8b5b      	ldrh	r3, [r3, #26]
 800a1c0:	f003 0310 	and.w	r3, r3, #16
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	75bb      	strb	r3, [r7, #22]
 800a1cc:	e001      	b.n	800a1d2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a1d2:	7dbb      	ldrb	r3, [r7, #22]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d003      	beq.n	800a1e0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a1d8:	2100      	movs	r1, #0
 800a1da:	6938      	ldr	r0, [r7, #16]
 800a1dc:	f005 fc88 	bl	800faf0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	7d1b      	ldrb	r3, [r3, #20]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d104      	bne.n	800a1f2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	6938      	ldr	r0, [r7, #16]
 800a1ec:	f005 fcf8 	bl	800fbe0 <tcp_accept>
 800a1f0:	e01d      	b.n	800a22e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a1f2:	7bbb      	ldrb	r3, [r7, #14]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	6938      	ldr	r0, [r7, #16]
 800a1fc:	f005 fc8a 	bl	800fb14 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a200:	2100      	movs	r1, #0
 800a202:	6938      	ldr	r0, [r7, #16]
 800a204:	f005 fcec 	bl	800fbe0 <tcp_accept>
    }
    if (shut_tx) {
 800a208:	7b7b      	ldrb	r3, [r7, #13]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a20e:	2100      	movs	r1, #0
 800a210:	6938      	ldr	r0, [r7, #16]
 800a212:	f005 fca1 	bl	800fb58 <tcp_sent>
    }
    if (shut_close) {
 800a216:	7dbb      	ldrb	r3, [r7, #22]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d008      	beq.n	800a22e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a21c:	2200      	movs	r2, #0
 800a21e:	2100      	movs	r1, #0
 800a220:	6938      	ldr	r0, [r7, #16]
 800a222:	f005 fcf5 	bl	800fc10 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a226:	2100      	movs	r1, #0
 800a228:	6938      	ldr	r0, [r7, #16]
 800a22a:	f005 fcb7 	bl	800fb9c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a22e:	7dbb      	ldrb	r3, [r7, #22]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d005      	beq.n	800a240 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a234:	6938      	ldr	r0, [r7, #16]
 800a236:	f004 fad1 	bl	800e7dc <tcp_close>
 800a23a:	4603      	mov	r3, r0
 800a23c:	75fb      	strb	r3, [r7, #23]
 800a23e:	e007      	b.n	800a250 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a240:	7bbb      	ldrb	r3, [r7, #14]
 800a242:	7b7a      	ldrb	r2, [r7, #13]
 800a244:	4619      	mov	r1, r3
 800a246:	6938      	ldr	r0, [r7, #16]
 800a248:	f004 faf4 	bl	800e834 <tcp_shutdown>
 800a24c:	4603      	mov	r3, r0
 800a24e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a250:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d102      	bne.n	800a25e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a258:	2301      	movs	r3, #1
 800a25a:	757b      	strb	r3, [r7, #21]
 800a25c:	e016      	b.n	800a28c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a25e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a266:	d10f      	bne.n	800a288 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26c:	7a5b      	ldrb	r3, [r3, #9]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10c      	bne.n	800a28c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a272:	2301      	movs	r3, #1
 800a274:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a276:	7dbb      	ldrb	r3, [r7, #22]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d007      	beq.n	800a28c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a27c:	6938      	ldr	r0, [r7, #16]
 800a27e:	f004 fbf3 	bl	800ea68 <tcp_abort>
          err = ERR_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	75fb      	strb	r3, [r7, #23]
 800a286:	e001      	b.n	800a28c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a288:	2301      	movs	r3, #1
 800a28a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a28c:	7d7b      	ldrb	r3, [r7, #21]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d044      	beq.n	800a31c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	330c      	adds	r3, #12
 800a29a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	7dfa      	ldrb	r2, [r7, #23]
 800a2a2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a2b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d129      	bne.n	800a30c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a2b8:	7dbb      	ldrb	r3, [r7, #22]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00c      	beq.n	800a2d8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d005      	beq.n	800a2d8 <lwip_netconn_do_close_internal+0x1f0>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2104      	movs	r1, #4
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	4798      	blx	r3
      }
      if (shut_rx) {
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d009      	beq.n	800a2f2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d005      	beq.n	800a2f2 <lwip_netconn_do_close_internal+0x20a>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	4798      	blx	r3
      }
      if (shut_tx) {
 800a2f2:	7b7b      	ldrb	r3, [r7, #13]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d009      	beq.n	800a30c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d005      	beq.n	800a30c <lwip_netconn_do_close_internal+0x224>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	2200      	movs	r2, #0
 800a306:	2102      	movs	r1, #2
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a30c:	78fb      	ldrb	r3, [r7, #3]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a312:	68b8      	ldr	r0, [r7, #8]
 800a314:	f00f fb58 	bl	80199c8 <sys_sem_signal>
    }
    return ERR_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	e02e      	b.n	800a37a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a31c:	7d7b      	ldrb	r3, [r7, #21]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d11e      	bne.n	800a360 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	7d1b      	ldrb	r3, [r3, #20]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d106      	bne.n	800a338 <lwip_netconn_do_close_internal+0x250>
 800a32a:	4b16      	ldr	r3, [pc, #88]	; (800a384 <lwip_netconn_do_close_internal+0x29c>)
 800a32c:	f240 4241 	movw	r2, #1089	; 0x441
 800a330:	491b      	ldr	r1, [pc, #108]	; (800a3a0 <lwip_netconn_do_close_internal+0x2b8>)
 800a332:	4816      	ldr	r0, [pc, #88]	; (800a38c <lwip_netconn_do_close_internal+0x2a4>)
 800a334:	f011 faec 	bl	801b910 <iprintf>
    if (shut_tx) {
 800a338:	7b7b      	ldrb	r3, [r7, #13]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a33e:	4919      	ldr	r1, [pc, #100]	; (800a3a4 <lwip_netconn_do_close_internal+0x2bc>)
 800a340:	6938      	ldr	r0, [r7, #16]
 800a342:	f005 fc09 	bl	800fb58 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a346:	2201      	movs	r2, #1
 800a348:	4917      	ldr	r1, [pc, #92]	; (800a3a8 <lwip_netconn_do_close_internal+0x2c0>)
 800a34a:	6938      	ldr	r0, [r7, #16]
 800a34c:	f005 fc60 	bl	800fc10 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a350:	4916      	ldr	r1, [pc, #88]	; (800a3ac <lwip_netconn_do_close_internal+0x2c4>)
 800a352:	6938      	ldr	r0, [r7, #16]
 800a354:	f005 fc22 	bl	800fb9c <tcp_err>
    tcp_arg(tpcb, conn);
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	6938      	ldr	r0, [r7, #16]
 800a35c:	f005 fbc8 	bl	800faf0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a360:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d106      	bne.n	800a376 <lwip_netconn_do_close_internal+0x28e>
 800a368:	4b06      	ldr	r3, [pc, #24]	; (800a384 <lwip_netconn_do_close_internal+0x29c>)
 800a36a:	f240 424d 	movw	r2, #1101	; 0x44d
 800a36e:	4910      	ldr	r1, [pc, #64]	; (800a3b0 <lwip_netconn_do_close_internal+0x2c8>)
 800a370:	4806      	ldr	r0, [pc, #24]	; (800a38c <lwip_netconn_do_close_internal+0x2a4>)
 800a372:	f011 facd 	bl	801b910 <iprintf>
  return err;
 800a376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	0801d048 	.word	0x0801d048
 800a388:	0801d31c 	.word	0x0801d31c
 800a38c:	0801d08c 	.word	0x0801d08c
 800a390:	0801d32c 	.word	0x0801d32c
 800a394:	0801d34c 	.word	0x0801d34c
 800a398:	0801d370 	.word	0x0801d370
 800a39c:	0801d1b0 	.word	0x0801d1b0
 800a3a0:	0801d384 	.word	0x0801d384
 800a3a4:	08009ab9 	.word	0x08009ab9
 800a3a8:	080099e9 	.word	0x080099e9
 800a3ac:	08009b65 	.word	0x08009b65
 800a3b0:	0801d3a8 	.word	0x0801d3a8

0800a3b4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	785b      	ldrb	r3, [r3, #1]
 800a3c6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a3c8:	7afb      	ldrb	r3, [r7, #11]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00d      	beq.n	800a3ea <lwip_netconn_do_delconn+0x36>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3d8:	2b10      	cmp	r3, #16
 800a3da:	d006      	beq.n	800a3ea <lwip_netconn_do_delconn+0x36>
 800a3dc:	4b61      	ldr	r3, [pc, #388]	; (800a564 <lwip_netconn_do_delconn+0x1b0>)
 800a3de:	f240 425e 	movw	r2, #1118	; 0x45e
 800a3e2:	4961      	ldr	r1, [pc, #388]	; (800a568 <lwip_netconn_do_delconn+0x1b4>)
 800a3e4:	4861      	ldr	r0, [pc, #388]	; (800a56c <lwip_netconn_do_delconn+0x1b8>)
 800a3e6:	f011 fa93 	bl	801b910 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a3ea:	7afb      	ldrb	r3, [r7, #11]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d005      	beq.n	800a3fc <lwip_netconn_do_delconn+0x48>
 800a3f0:	7afb      	ldrb	r3, [r7, #11]
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d002      	beq.n	800a3fc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a3f6:	7afb      	ldrb	r3, [r7, #11]
 800a3f8:	2b03      	cmp	r3, #3
 800a3fa:	d10a      	bne.n	800a412 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800a3fc:	7afb      	ldrb	r3, [r7, #11]
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d10b      	bne.n	800a41a <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a40a:	f003 0304 	and.w	r3, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d103      	bne.n	800a41a <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	22fb      	movs	r2, #251	; 0xfb
 800a416:	711a      	strb	r2, [r3, #4]
 800a418:	e098      	b.n	800a54c <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	2b03      	cmp	r3, #3
 800a41e:	d10e      	bne.n	800a43e <lwip_netconn_do_delconn+0x8a>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a428:	f003 0304 	and.w	r3, r3, #4
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d106      	bne.n	800a43e <lwip_netconn_do_delconn+0x8a>
 800a430:	4b4c      	ldr	r3, [pc, #304]	; (800a564 <lwip_netconn_do_delconn+0x1b0>)
 800a432:	f240 427a 	movw	r2, #1146	; 0x47a
 800a436:	494e      	ldr	r1, [pc, #312]	; (800a570 <lwip_netconn_do_delconn+0x1bc>)
 800a438:	484c      	ldr	r0, [pc, #304]	; (800a56c <lwip_netconn_do_delconn+0x1b8>)
 800a43a:	f011 fa69 	bl	801b910 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff fdcf 	bl	8009fec <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d05f      	beq.n	800a518 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a462:	2b10      	cmp	r3, #16
 800a464:	d00d      	beq.n	800a482 <lwip_netconn_do_delconn+0xce>
 800a466:	2b20      	cmp	r3, #32
 800a468:	d151      	bne.n	800a50e <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f00a fe3a 	bl	80150f4 <udp_remove>
          break;
 800a480:	e046      	b.n	800a510 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d006      	beq.n	800a49a <lwip_netconn_do_delconn+0xe6>
 800a48c:	4b35      	ldr	r3, [pc, #212]	; (800a564 <lwip_netconn_do_delconn+0x1b0>)
 800a48e:	f240 4294 	movw	r2, #1172	; 0x494
 800a492:	4938      	ldr	r1, [pc, #224]	; (800a574 <lwip_netconn_do_delconn+0x1c0>)
 800a494:	4835      	ldr	r0, [pc, #212]	; (800a56c <lwip_netconn_do_delconn+0x1b8>)
 800a496:	f011 fa3b 	bl	801b910 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2204      	movs	r2, #4
 800a4a0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2203      	movs	r2, #3
 800a4a6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff fe16 	bl	800a0e8 <lwip_netconn_do_close_internal>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d04b      	beq.n	800a55a <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	785b      	ldrb	r3, [r3, #1]
 800a4c8:	2b04      	cmp	r3, #4
 800a4ca:	d006      	beq.n	800a4da <lwip_netconn_do_delconn+0x126>
 800a4cc:	4b25      	ldr	r3, [pc, #148]	; (800a564 <lwip_netconn_do_delconn+0x1b0>)
 800a4ce:	f240 429a 	movw	r2, #1178	; 0x49a
 800a4d2:	4929      	ldr	r1, [pc, #164]	; (800a578 <lwip_netconn_do_delconn+0x1c4>)
 800a4d4:	4825      	ldr	r0, [pc, #148]	; (800a56c <lwip_netconn_do_delconn+0x1b8>)
 800a4d6:	f011 fa1b 	bl	801b910 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a4da:	4828      	ldr	r0, [pc, #160]	; (800a57c <lwip_netconn_do_delconn+0x1c8>)
 800a4dc:	f00f fae5 	bl	8019aaa <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	330c      	adds	r3, #12
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f00f fa3c 	bl	8019966 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a4ee:	4823      	ldr	r0, [pc, #140]	; (800a57c <lwip_netconn_do_delconn+0x1c8>)
 800a4f0:	f00f facc 	bl	8019a8c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d02d      	beq.n	800a55a <lwip_netconn_do_delconn+0x1a6>
 800a4fe:	4b19      	ldr	r3, [pc, #100]	; (800a564 <lwip_netconn_do_delconn+0x1b0>)
 800a500:	f240 429e 	movw	r2, #1182	; 0x49e
 800a504:	491c      	ldr	r1, [pc, #112]	; (800a578 <lwip_netconn_do_delconn+0x1c4>)
 800a506:	4819      	ldr	r0, [pc, #100]	; (800a56c <lwip_netconn_do_delconn+0x1b8>)
 800a508:	f011 fa02 	bl	801b910 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a50c:	e025      	b.n	800a55a <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800a50e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2200      	movs	r2, #0
 800a516:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d007      	beq.n	800a532 <lwip_netconn_do_delconn+0x17e>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	6810      	ldr	r0, [r2, #0]
 800a52c:	2200      	movs	r2, #0
 800a52e:	2100      	movs	r1, #0
 800a530:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d007      	beq.n	800a54c <lwip_netconn_do_delconn+0x198>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	6810      	ldr	r0, [r2, #0]
 800a546:	2200      	movs	r2, #0
 800a548:	2102      	movs	r1, #2
 800a54a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	330c      	adds	r3, #12
 800a552:	4618      	mov	r0, r3
 800a554:	f00f fa52 	bl	80199fc <sys_sem_valid>
 800a558:	e000      	b.n	800a55c <lwip_netconn_do_delconn+0x1a8>
          return;
 800a55a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	0801d048 	.word	0x0801d048
 800a568:	0801d3b8 	.word	0x0801d3b8
 800a56c:	0801d08c 	.word	0x0801d08c
 800a570:	0801d3cc 	.word	0x0801d3cc
 800a574:	0801d3ec 	.word	0x0801d3ec
 800a578:	0801d408 	.word	0x0801d408
 800a57c:	2000cf08 	.word	0x2000cf08

0800a580 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	4613      	mov	r3, r2
 800a58c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800a58e:	2300      	movs	r3, #0
 800a590:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d102      	bne.n	800a5a2 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800a59c:	f06f 0305 	mvn.w	r3, #5
 800a5a0:	e074      	b.n	800a68c <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	785b      	ldrb	r3, [r3, #1]
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d006      	beq.n	800a5b8 <lwip_netconn_do_connected+0x38>
 800a5aa:	4b3a      	ldr	r3, [pc, #232]	; (800a694 <lwip_netconn_do_connected+0x114>)
 800a5ac:	f240 5223 	movw	r2, #1315	; 0x523
 800a5b0:	4939      	ldr	r1, [pc, #228]	; (800a698 <lwip_netconn_do_connected+0x118>)
 800a5b2:	483a      	ldr	r0, [pc, #232]	; (800a69c <lwip_netconn_do_connected+0x11c>)
 800a5b4:	f011 f9ac 	bl	801b910 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10d      	bne.n	800a5dc <lwip_netconn_do_connected+0x5c>
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5c6:	f003 0304 	and.w	r3, r3, #4
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <lwip_netconn_do_connected+0x5c>
 800a5ce:	4b31      	ldr	r3, [pc, #196]	; (800a694 <lwip_netconn_do_connected+0x114>)
 800a5d0:	f240 5224 	movw	r2, #1316	; 0x524
 800a5d4:	4932      	ldr	r1, [pc, #200]	; (800a6a0 <lwip_netconn_do_connected+0x120>)
 800a5d6:	4831      	ldr	r0, [pc, #196]	; (800a69c <lwip_netconn_do_connected+0x11c>)
 800a5d8:	f011 f99a 	bl	801b910 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d008      	beq.n	800a5f6 <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e8:	79fa      	ldrb	r2, [r7, #7]
 800a5ea:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	330c      	adds	r3, #12
 800a5f4:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5fe:	2b10      	cmp	r3, #16
 800a600:	d106      	bne.n	800a610 <lwip_netconn_do_connected+0x90>
 800a602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d102      	bne.n	800a610 <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 800a60a:	69b8      	ldr	r0, [r7, #24]
 800a60c:	f7ff fb84 	bl	8009d18 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a616:	f003 0304 	and.w	r3, r3, #4
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	bf0c      	ite	eq
 800a61e:	2301      	moveq	r3, #1
 800a620:	2300      	movne	r3, #0
 800a622:	b2db      	uxtb	r3, r3
 800a624:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a62c:	f023 0304 	bic.w	r3, r3, #4
 800a630:	b2da      	uxtb	r2, r3
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LWIP_ASSERT("blocking connect state error",
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d002      	beq.n	800a644 <lwip_netconn_do_connected+0xc4>
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10c      	bne.n	800a65e <lwip_netconn_do_connected+0xde>
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d102      	bne.n	800a650 <lwip_netconn_do_connected+0xd0>
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d006      	beq.n	800a65e <lwip_netconn_do_connected+0xde>
 800a650:	4b10      	ldr	r3, [pc, #64]	; (800a694 <lwip_netconn_do_connected+0x114>)
 800a652:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800a656:	4913      	ldr	r1, [pc, #76]	; (800a6a4 <lwip_netconn_do_connected+0x124>)
 800a658:	4810      	ldr	r0, [pc, #64]	; (800a69c <lwip_netconn_do_connected+0x11c>)
 800a65a:	f011 f959 	bl	801b910 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2200      	movs	r2, #0
 800a662:	629a      	str	r2, [r3, #40]	; 0x28
  conn->state = NETCONN_NONE;
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	2200      	movs	r2, #0
 800a668:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d005      	beq.n	800a67e <lwip_netconn_do_connected+0xfe>
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a676:	2200      	movs	r2, #0
 800a678:	2102      	movs	r1, #2
 800a67a:	69b8      	ldr	r0, [r7, #24]
 800a67c:	4798      	blx	r3

  if (was_blocking) {
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 800a684:	69f8      	ldr	r0, [r7, #28]
 800a686:	f00f f99f 	bl	80199c8 <sys_sem_signal>
  }
  return ERR_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	0801d048 	.word	0x0801d048
 800a698:	0801d410 	.word	0x0801d410
 800a69c:	0801d08c 	.word	0x0801d08c
 800a6a0:	0801d430 	.word	0x0801d430
 800a6a4:	0801d470 	.word	0x0801d470

0800a6a8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800a6be:	23f1      	movs	r3, #241	; 0xf1
 800a6c0:	75fb      	strb	r3, [r7, #23]
 800a6c2:	e0a0      	b.n	800a806 <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6ce:	2b10      	cmp	r3, #16
 800a6d0:	d00f      	beq.n	800a6f2 <lwip_netconn_do_connect+0x4a>
 800a6d2:	2b20      	cmp	r3, #32
 800a6d4:	f040 808c 	bne.w	800a7f0 <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6858      	ldr	r0, [r3, #4]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	6899      	ldr	r1, [r3, #8]
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	899b      	ldrh	r3, [r3, #12]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f00a fc4e 	bl	8014f88 <udp_connect>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	75fb      	strb	r3, [r7, #23]
        break;
 800a6f0:	e089      	b.n	800a806 <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	785b      	ldrb	r3, [r3, #1]
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d102      	bne.n	800a702 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800a6fc:	23f7      	movs	r3, #247	; 0xf7
 800a6fe:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800a700:	e080      	b.n	800a804 <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	785b      	ldrb	r3, [r3, #1]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800a70c:	23f6      	movs	r3, #246	; 0xf6
 800a70e:	75fb      	strb	r3, [r7, #23]
        break;
 800a710:	e078      	b.n	800a804 <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff fafe 	bl	8009d18 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6858      	ldr	r0, [r3, #4]
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	6899      	ldr	r1, [r3, #8]
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	899a      	ldrh	r2, [r3, #12]
 800a72a:	4b3b      	ldr	r3, [pc, #236]	; (800a818 <lwip_netconn_do_connect+0x170>)
 800a72c:	f004 fa98 	bl	800ec60 <tcp_connect>
 800a730:	4603      	mov	r3, r0
 800a732:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800a734:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d163      	bne.n	800a804 <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a744:	f003 0302 	and.w	r3, r3, #2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	bf14      	ite	ne
 800a74c:	2301      	movne	r3, #1
 800a74e:	2300      	moveq	r3, #0
 800a750:	b2db      	uxtb	r3, r3
 800a752:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2203      	movs	r2, #3
 800a75a:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00b      	beq.n	800a77a <lwip_netconn_do_connect+0xd2>
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f042 0204 	orr.w	r2, r2, #4
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a778:	e00a      	b.n	800a790 <lwip_netconn_do_connect+0xe8>
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f022 0204 	bic.w	r2, r2, #4
 800a78a:	b2d2      	uxtb	r2, r2
 800a78c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if (non_blocking) {
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d002      	beq.n	800a79c <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 800a796:	23fb      	movs	r3, #251	; 0xfb
 800a798:	75fb      	strb	r3, [r7, #23]
        break;
 800a79a:	e033      	b.n	800a804 <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	629a      	str	r2, [r3, #40]	; 0x28
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	785b      	ldrb	r3, [r3, #1]
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d006      	beq.n	800a7bc <lwip_netconn_do_connect+0x114>
 800a7ae:	4b1b      	ldr	r3, [pc, #108]	; (800a81c <lwip_netconn_do_connect+0x174>)
 800a7b0:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a7b4:	491a      	ldr	r1, [pc, #104]	; (800a820 <lwip_netconn_do_connect+0x178>)
 800a7b6:	481b      	ldr	r0, [pc, #108]	; (800a824 <lwip_netconn_do_connect+0x17c>)
 800a7b8:	f011 f8aa 	bl	801b910 <iprintf>
              UNLOCK_TCPIP_CORE();
 800a7bc:	481a      	ldr	r0, [pc, #104]	; (800a828 <lwip_netconn_do_connect+0x180>)
 800a7be:	f00f f974 	bl	8019aaa <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	330c      	adds	r3, #12
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f00f f8cb 	bl	8019966 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800a7d0:	4815      	ldr	r0, [pc, #84]	; (800a828 <lwip_netconn_do_connect+0x180>)
 800a7d2:	f00f f95b 	bl	8019a8c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	785b      	ldrb	r3, [r3, #1]
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d116      	bne.n	800a80e <lwip_netconn_do_connect+0x166>
 800a7e0:	4b0e      	ldr	r3, [pc, #56]	; (800a81c <lwip_netconn_do_connect+0x174>)
 800a7e2:	f240 5274 	movw	r2, #1396	; 0x574
 800a7e6:	490e      	ldr	r1, [pc, #56]	; (800a820 <lwip_netconn_do_connect+0x178>)
 800a7e8:	480e      	ldr	r0, [pc, #56]	; (800a824 <lwip_netconn_do_connect+0x17c>)
 800a7ea:	f011 f891 	bl	801b910 <iprintf>
              return;
 800a7ee:	e00e      	b.n	800a80e <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800a7f0:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <lwip_netconn_do_connect+0x174>)
 800a7f2:	f240 527d 	movw	r2, #1405	; 0x57d
 800a7f6:	490d      	ldr	r1, [pc, #52]	; (800a82c <lwip_netconn_do_connect+0x184>)
 800a7f8:	480a      	ldr	r0, [pc, #40]	; (800a824 <lwip_netconn_do_connect+0x17c>)
 800a7fa:	f011 f889 	bl	801b910 <iprintf>
 800a7fe:	23fa      	movs	r3, #250	; 0xfa
 800a800:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800a802:	e000      	b.n	800a806 <lwip_netconn_do_connect+0x15e>
        break;
 800a804:	bf00      	nop
    }
  }
  msg->err = err;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	7dfa      	ldrb	r2, [r7, #23]
 800a80a:	711a      	strb	r2, [r3, #4]
 800a80c:	e000      	b.n	800a810 <lwip_netconn_do_connect+0x168>
              return;
 800a80e:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800a810:	3718      	adds	r7, #24
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	0800a581 	.word	0x0800a581
 800a81c:	0801d048 	.word	0x0801d048
 800a820:	0801d408 	.word	0x0801d408
 800a824:	0801d08c 	.word	0x0801d08c
 800a828:	2000cf08 	.word	0x2000cf08
 800a82c:	0801d490 	.word	0x0801d490

0800a830 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a846:	2b20      	cmp	r3, #32
 800a848:	d109      	bne.n	800a85e <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	4618      	mov	r0, r3
 800a852:	f00a fc07 	bl	8015064 <udp_disconnect>
    msg->err = ERR_OK;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a85c:	e002      	b.n	800a864 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	22fa      	movs	r2, #250	; 0xfa
 800a862:	711a      	strb	r2, [r3, #4]
}
 800a864:	bf00      	nop
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7fe fef9 	bl	8009674 <netconn_err>
 800a882:	4603      	mov	r3, r0
 800a884:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d134      	bne.n	800a8f8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d02d      	beq.n	800a8f4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	d123      	bne.n	800a8ee <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10c      	bne.n	800a8ca <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	f00a f8f0 	bl	8014aa4 <udp_send>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800a8c8:	e016      	b.n	800a8f8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6858      	ldr	r0, [r3, #4]
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	6819      	ldr	r1, [r3, #0]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	f103 0208 	add.w	r2, r3, #8
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	899b      	ldrh	r3, [r3, #12]
 800a8e4:	f00a f912 	bl	8014b0c <udp_sendto>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73fb      	strb	r3, [r7, #15]
          break;
 800a8ec:	e004      	b.n	800a8f8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800a8ee:	23f5      	movs	r3, #245	; 0xf5
 800a8f0:	73fb      	strb	r3, [r7, #15]
          break;
 800a8f2:	e001      	b.n	800a8f8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800a8f4:	23f5      	movs	r3, #245	; 0xf5
 800a8f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	7bfa      	ldrb	r2, [r7, #15]
 800a8fc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a8fe:	bf00      	nop
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b086      	sub	sp, #24
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	2200      	movs	r2, #0
 800a916:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d022      	beq.n	800a968 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a92c:	2b10      	cmp	r3, #16
 800a92e:	d11b      	bne.n	800a968 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a93c:	d202      	bcs.n	800a944 <lwip_netconn_do_recv+0x3e>
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	b29b      	uxth	r3, r3
 800a942:	e001      	b.n	800a948 <lwip_netconn_do_recv+0x42>
 800a944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a948:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	89fa      	ldrh	r2, [r7, #14]
 800a952:	4611      	mov	r1, r2
 800a954:	4618      	mov	r0, r3
 800a956:	f004 f8ed 	bl	800eb34 <tcp_recved>
        remaining -= recved;
 800a95a:	89fb      	ldrh	r3, [r7, #14]
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e6      	bne.n	800a936 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a968:	bf00      	nop
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a97c:	2300      	movs	r3, #0
 800a97e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d106      	bne.n	800a994 <lwip_netconn_do_writemore+0x24>
 800a986:	4b98      	ldr	r3, [pc, #608]	; (800abe8 <lwip_netconn_do_writemore+0x278>)
 800a988:	f240 6273 	movw	r2, #1651	; 0x673
 800a98c:	4997      	ldr	r1, [pc, #604]	; (800abec <lwip_netconn_do_writemore+0x27c>)
 800a98e:	4898      	ldr	r0, [pc, #608]	; (800abf0 <lwip_netconn_do_writemore+0x280>)
 800a990:	f010 ffbe 	bl	801b910 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	785b      	ldrb	r3, [r3, #1]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d006      	beq.n	800a9aa <lwip_netconn_do_writemore+0x3a>
 800a99c:	4b92      	ldr	r3, [pc, #584]	; (800abe8 <lwip_netconn_do_writemore+0x278>)
 800a99e:	f240 6274 	movw	r2, #1652	; 0x674
 800a9a2:	4994      	ldr	r1, [pc, #592]	; (800abf4 <lwip_netconn_do_writemore+0x284>)
 800a9a4:	4892      	ldr	r0, [pc, #584]	; (800abf0 <lwip_netconn_do_writemore+0x280>)
 800a9a6:	f010 ffb3 	bl	801b910 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <lwip_netconn_do_writemore+0x50>
 800a9b2:	4b8d      	ldr	r3, [pc, #564]	; (800abe8 <lwip_netconn_do_writemore+0x278>)
 800a9b4:	f240 6275 	movw	r2, #1653	; 0x675
 800a9b8:	498f      	ldr	r1, [pc, #572]	; (800abf8 <lwip_netconn_do_writemore+0x288>)
 800a9ba:	488d      	ldr	r0, [pc, #564]	; (800abf0 <lwip_netconn_do_writemore+0x280>)
 800a9bc:	f010 ffa8 	bl	801b910 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <lwip_netconn_do_writemore+0x66>
 800a9c8:	4b87      	ldr	r3, [pc, #540]	; (800abe8 <lwip_netconn_do_writemore+0x278>)
 800a9ca:	f240 6276 	movw	r2, #1654	; 0x676
 800a9ce:	498b      	ldr	r1, [pc, #556]	; (800abfc <lwip_netconn_do_writemore+0x28c>)
 800a9d0:	4887      	ldr	r0, [pc, #540]	; (800abf0 <lwip_netconn_do_writemore+0x280>)
 800a9d2:	f010 ff9d 	bl	801b910 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9da:	699a      	ldr	r2, [r3, #24]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d306      	bcc.n	800a9f4 <lwip_netconn_do_writemore+0x84>
 800a9e6:	4b80      	ldr	r3, [pc, #512]	; (800abe8 <lwip_netconn_do_writemore+0x278>)
 800a9e8:	f240 6277 	movw	r2, #1655	; 0x677
 800a9ec:	4984      	ldr	r1, [pc, #528]	; (800ac00 <lwip_netconn_do_writemore+0x290>)
 800a9ee:	4880      	ldr	r0, [pc, #512]	; (800abf0 <lwip_netconn_do_writemore+0x280>)
 800a9f0:	f010 ff8e 	bl	801b910 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f8:	899b      	ldrh	r3, [r3, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d106      	bne.n	800aa0c <lwip_netconn_do_writemore+0x9c>
 800a9fe:	4b7a      	ldr	r3, [pc, #488]	; (800abe8 <lwip_netconn_do_writemore+0x278>)
 800aa00:	f240 6279 	movw	r2, #1657	; 0x679
 800aa04:	497f      	ldr	r1, [pc, #508]	; (800ac04 <lwip_netconn_do_writemore+0x294>)
 800aa06:	487a      	ldr	r0, [pc, #488]	; (800abf0 <lwip_netconn_do_writemore+0x280>)
 800aa08:	f010 ff82 	bl	801b910 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa10:	7f1b      	ldrb	r3, [r3, #28]
 800aa12:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa1a:	f003 0302 	and.w	r3, r3, #2
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d104      	bne.n	800aa2c <lwip_netconn_do_writemore+0xbc>
 800aa22:	7ebb      	ldrb	r3, [r7, #26]
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <lwip_netconn_do_writemore+0xc0>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e000      	b.n	800aa32 <lwip_netconn_do_writemore+0xc2>
 800aa30:	2300      	movs	r3, #0
 800aa32:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	4413      	add	r3, r2
 800aa44:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa5e:	d307      	bcc.n	800aa70 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800aa60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa64:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aa66:	7ebb      	ldrb	r3, [r7, #26]
 800aa68:	f043 0302 	orr.w	r3, r3, #2
 800aa6c:	76bb      	strb	r3, [r7, #26]
 800aa6e:	e001      	b.n	800aa74 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa7c:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800aa7e:	89fa      	ldrh	r2, [r7, #14]
 800aa80:	8bbb      	ldrh	r3, [r7, #28]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d216      	bcs.n	800aab4 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800aa86:	89fb      	ldrh	r3, [r7, #14]
 800aa88:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800aa8a:	7e3b      	ldrb	r3, [r7, #24]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00d      	beq.n	800aaac <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800aa90:	8bbb      	ldrh	r3, [r7, #28]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10e      	bne.n	800aab4 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <lwip_netconn_do_writemore+0x136>
 800aaa0:	f06f 0306 	mvn.w	r3, #6
 800aaa4:	e000      	b.n	800aaa8 <lwip_netconn_do_writemore+0x138>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800aaaa:	e07d      	b.n	800aba8 <lwip_netconn_do_writemore+0x238>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800aaac:	7ebb      	ldrb	r3, [r7, #26]
 800aaae:	f043 0302 	orr.w	r3, r3, #2
 800aab2:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab8:	691a      	ldr	r2, [r3, #16]
 800aaba:	8bbb      	ldrh	r3, [r7, #28]
 800aabc:	441a      	add	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d906      	bls.n	800aad8 <lwip_netconn_do_writemore+0x168>
 800aaca:	4b47      	ldr	r3, [pc, #284]	; (800abe8 <lwip_netconn_do_writemore+0x278>)
 800aacc:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800aad0:	494d      	ldr	r1, [pc, #308]	; (800ac08 <lwip_netconn_do_writemore+0x298>)
 800aad2:	4847      	ldr	r0, [pc, #284]	; (800abf0 <lwip_netconn_do_writemore+0x280>)
 800aad4:	f010 ff1c 	bl	801b910 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aad8:	8bbb      	ldrh	r3, [r7, #28]
 800aada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aade:	4293      	cmp	r3, r2
 800aae0:	d103      	bne.n	800aaea <lwip_netconn_do_writemore+0x17a>
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aae8:	d209      	bcs.n	800aafe <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aaee:	8bba      	ldrh	r2, [r7, #28]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d10b      	bne.n	800ab0c <lwip_netconn_do_writemore+0x19c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf8:	899b      	ldrh	r3, [r3, #12]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d906      	bls.n	800ab0c <lwip_netconn_do_writemore+0x19c>
        write_more = 1;
 800aafe:	2301      	movs	r3, #1
 800ab00:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ab02:	7ebb      	ldrb	r3, [r7, #26]
 800ab04:	f043 0302 	orr.w	r3, r3, #2
 800ab08:	76bb      	strb	r3, [r7, #26]
 800ab0a:	e001      	b.n	800ab10 <lwip_netconn_do_writemore+0x1a0>
      } else {
        write_more = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6858      	ldr	r0, [r3, #4]
 800ab14:	7ebb      	ldrb	r3, [r7, #26]
 800ab16:	8bba      	ldrh	r2, [r7, #28]
 800ab18:	6979      	ldr	r1, [r7, #20]
 800ab1a:	f007 ff27 	bl	801296c <tcp_write>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ab22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d12c      	bne.n	800ab84 <lwip_netconn_do_writemore+0x214>
        conn->current_msg->msg.w.offset += len;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2e:	6999      	ldr	r1, [r3, #24]
 800ab30:	8bba      	ldrh	r2, [r7, #28]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab36:	440a      	add	r2, r1
 800ab38:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3e:	6919      	ldr	r1, [r3, #16]
 800ab40:	8bba      	ldrh	r2, [r7, #28]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab46:	440a      	add	r2, r1
 800ab48:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4e:	691a      	ldr	r2, [r3, #16]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d113      	bne.n	800ab84 <lwip_netconn_do_writemore+0x214>
          conn->current_msg->msg.w.vector_cnt--;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab60:	899a      	ldrh	r2, [r3, #12]
 800ab62:	3a01      	subs	r2, #1
 800ab64:	b292      	uxth	r2, r2
 800ab66:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6c:	899b      	ldrh	r3, [r3, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d008      	beq.n	800ab84 <lwip_netconn_do_writemore+0x214>
            conn->current_msg->msg.w.vector++;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab76:	689a      	ldr	r2, [r3, #8]
 800ab78:	3208      	adds	r2, #8
 800ab7a:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab80:	2200      	movs	r2, #0
 800ab82:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ab84:	7e7b      	ldrb	r3, [r7, #25]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d004      	beq.n	800ab94 <lwip_netconn_do_writemore+0x224>
 800ab8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f43f af50 	beq.w	800aa34 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ab94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d004      	beq.n	800aba6 <lwip_netconn_do_writemore+0x236>
 800ab9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aba4:	d149      	bne.n	800ac3a <lwip_netconn_do_writemore+0x2ca>
err_mem:
 800aba6:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800aba8:	7e3b      	ldrb	r3, [r7, #24]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d02e      	beq.n	800ac0c <lwip_netconn_do_writemore+0x29c>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb2:	699a      	ldr	r2, [r3, #24]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d226      	bcs.n	800ac0c <lwip_netconn_do_writemore+0x29c>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d005      	beq.n	800abd2 <lwip_netconn_do_writemore+0x262>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abca:	2200      	movs	r2, #0
 800abcc:	2103      	movs	r1, #3
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800abd8:	f043 0310 	orr.w	r3, r3, #16
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800abe4:	e029      	b.n	800ac3a <lwip_netconn_do_writemore+0x2ca>
 800abe6:	bf00      	nop
 800abe8:	0801d048 	.word	0x0801d048
 800abec:	0801d1a0 	.word	0x0801d1a0
 800abf0:	0801d08c 	.word	0x0801d08c
 800abf4:	0801d4a8 	.word	0x0801d4a8
 800abf8:	0801d1b0 	.word	0x0801d1b0
 800abfc:	0801d4c8 	.word	0x0801d4c8
 800ac00:	0801d4e0 	.word	0x0801d4e0
 800ac04:	0801d520 	.word	0x0801d520
 800ac08:	0801d548 	.word	0x0801d548
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac14:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ac18:	d305      	bcc.n	800ac26 <lwip_netconn_do_writemore+0x2b6>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	d909      	bls.n	800ac3a <lwip_netconn_do_writemore+0x2ca>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d005      	beq.n	800ac3a <lwip_netconn_do_writemore+0x2ca>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac32:	2200      	movs	r2, #0
 800ac34:	2103      	movs	r1, #3
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ac3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d11d      	bne.n	800ac7e <lwip_netconn_do_writemore+0x30e>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac46:	699a      	ldr	r2, [r3, #24]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d002      	beq.n	800ac58 <lwip_netconn_do_writemore+0x2e8>
 800ac52:	7e3b      	ldrb	r3, [r7, #24]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <lwip_netconn_do_writemore+0x2ec>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f008 fc6d 	bl	8013540 <tcp_output>
 800ac66:	4603      	mov	r3, r0
 800ac68:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ac6a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ac6e:	f113 0f04 	cmn.w	r3, #4
 800ac72:	d12c      	bne.n	800acce <lwip_netconn_do_writemore+0x35e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ac74:	7b3b      	ldrb	r3, [r7, #12]
 800ac76:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	76fb      	strb	r3, [r7, #27]
 800ac7c:	e027      	b.n	800acce <lwip_netconn_do_writemore+0x35e>
      }
    } else if (err == ERR_MEM) {
 800ac7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac86:	d120      	bne.n	800acca <lwip_netconn_do_writemore+0x35a>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f008 fc57 	bl	8013540 <tcp_output>
 800ac92:	4603      	mov	r3, r0
 800ac94:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ac96:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ac9a:	f113 0f04 	cmn.w	r3, #4
 800ac9e:	d104      	bne.n	800acaa <lwip_netconn_do_writemore+0x33a>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800aca0:	7b7b      	ldrb	r3, [r7, #13]
 800aca2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800aca4:	2301      	movs	r3, #1
 800aca6:	76fb      	strb	r3, [r7, #27]
 800aca8:	e011      	b.n	800acce <lwip_netconn_do_writemore+0x35e>
      } else if (dontblock) {
 800acaa:	7e3b      	ldrb	r3, [r7, #24]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00e      	beq.n	800acce <lwip_netconn_do_writemore+0x35e>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d102      	bne.n	800acc0 <lwip_netconn_do_writemore+0x350>
 800acba:	f06f 0306 	mvn.w	r3, #6
 800acbe:	e000      	b.n	800acc2 <lwip_netconn_do_writemore+0x352>
 800acc0:	2300      	movs	r3, #0
 800acc2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800acc4:	2301      	movs	r3, #1
 800acc6:	76fb      	strb	r3, [r7, #27]
 800acc8:	e001      	b.n	800acce <lwip_netconn_do_writemore+0x35e>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800acca:	2301      	movs	r3, #1
 800accc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800acce:	7efb      	ldrb	r3, [r7, #27]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d015      	beq.n	800ad00 <lwip_netconn_do_writemore+0x390>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	330c      	adds	r3, #12
 800acdc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace2:	7ffa      	ldrb	r2, [r7, #31]
 800ace4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d006      	beq.n	800ad06 <lwip_netconn_do_writemore+0x396>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800acf8:	68b8      	ldr	r0, [r7, #8]
 800acfa:	f00e fe65 	bl	80199c8 <sys_sem_signal>
 800acfe:	e002      	b.n	800ad06 <lwip_netconn_do_writemore+0x396>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ad00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad04:	e000      	b.n	800ad08 <lwip_netconn_do_writemore+0x398>
  }
#endif
  return ERR_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3720      	adds	r7, #32
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe fca7 	bl	8009674 <netconn_err>
 800ad26:	4603      	mov	r3, r0
 800ad28:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ad2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d166      	bne.n	800ae00 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad3c:	2b10      	cmp	r3, #16
 800ad3e:	d15d      	bne.n	800adfc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	785b      	ldrb	r3, [r3, #1]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d002      	beq.n	800ad50 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800ad4a:	23fb      	movs	r3, #251	; 0xfb
 800ad4c:	73fb      	strb	r3, [r7, #15]
 800ad4e:	e057      	b.n	800ae00 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d04d      	beq.n	800adf6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d006      	beq.n	800ad7a <lwip_netconn_do_write+0x6a>
 800ad6c:	4b28      	ldr	r3, [pc, #160]	; (800ae10 <lwip_netconn_do_write+0x100>)
 800ad6e:	f240 7223 	movw	r2, #1827	; 0x723
 800ad72:	4928      	ldr	r1, [pc, #160]	; (800ae14 <lwip_netconn_do_write+0x104>)
 800ad74:	4828      	ldr	r0, [pc, #160]	; (800ae18 <lwip_netconn_do_write+0x108>)
 800ad76:	f010 fdcb 	bl	801b910 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <lwip_netconn_do_write+0x80>
 800ad82:	4b23      	ldr	r3, [pc, #140]	; (800ae10 <lwip_netconn_do_write+0x100>)
 800ad84:	f240 7224 	movw	r2, #1828	; 0x724
 800ad88:	4924      	ldr	r1, [pc, #144]	; (800ae1c <lwip_netconn_do_write+0x10c>)
 800ad8a:	4823      	ldr	r0, [pc, #140]	; (800ae18 <lwip_netconn_do_write+0x108>)
 800ad8c:	f010 fdc0 	bl	801b910 <iprintf>
        msg->conn->current_msg = msg;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7ff fde6 	bl	800a970 <lwip_netconn_do_writemore>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d02e      	beq.n	800ae08 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	785b      	ldrb	r3, [r3, #1]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d006      	beq.n	800adc2 <lwip_netconn_do_write+0xb2>
 800adb4:	4b16      	ldr	r3, [pc, #88]	; (800ae10 <lwip_netconn_do_write+0x100>)
 800adb6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800adba:	4919      	ldr	r1, [pc, #100]	; (800ae20 <lwip_netconn_do_write+0x110>)
 800adbc:	4816      	ldr	r0, [pc, #88]	; (800ae18 <lwip_netconn_do_write+0x108>)
 800adbe:	f010 fda7 	bl	801b910 <iprintf>
          UNLOCK_TCPIP_CORE();
 800adc2:	4818      	ldr	r0, [pc, #96]	; (800ae24 <lwip_netconn_do_write+0x114>)
 800adc4:	f00e fe71 	bl	8019aaa <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	330c      	adds	r3, #12
 800adce:	2100      	movs	r1, #0
 800add0:	4618      	mov	r0, r3
 800add2:	f00e fdc8 	bl	8019966 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800add6:	4813      	ldr	r0, [pc, #76]	; (800ae24 <lwip_netconn_do_write+0x114>)
 800add8:	f00e fe58 	bl	8019a8c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	785b      	ldrb	r3, [r3, #1]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d110      	bne.n	800ae08 <lwip_netconn_do_write+0xf8>
 800ade6:	4b0a      	ldr	r3, [pc, #40]	; (800ae10 <lwip_netconn_do_write+0x100>)
 800ade8:	f240 722c 	movw	r2, #1836	; 0x72c
 800adec:	490c      	ldr	r1, [pc, #48]	; (800ae20 <lwip_netconn_do_write+0x110>)
 800adee:	480a      	ldr	r0, [pc, #40]	; (800ae18 <lwip_netconn_do_write+0x108>)
 800adf0:	f010 fd8e 	bl	801b910 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800adf4:	e008      	b.n	800ae08 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800adf6:	23f5      	movs	r3, #245	; 0xf5
 800adf8:	73fb      	strb	r3, [r7, #15]
 800adfa:	e001      	b.n	800ae00 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800adfc:	23fa      	movs	r3, #250	; 0xfa
 800adfe:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	7bfa      	ldrb	r2, [r7, #15]
 800ae04:	711a      	strb	r2, [r3, #4]
 800ae06:	e000      	b.n	800ae0a <lwip_netconn_do_write+0xfa>
        return;
 800ae08:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	0801d048 	.word	0x0801d048
 800ae14:	0801d3ec 	.word	0x0801d3ec
 800ae18:	0801d08c 	.word	0x0801d08c
 800ae1c:	0801d574 	.word	0x0801d574
 800ae20:	0801d408 	.word	0x0801d408
 800ae24:	2000cf08 	.word	0x2000cf08

0800ae28 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d06b      	beq.n	800af16 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	7c1b      	ldrb	r3, [r3, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d007      	beq.n	800ae56 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	6812      	ldr	r2, [r2, #0]
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e006      	b.n	800ae64 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	6852      	ldr	r2, [r2, #4]
 800ae62:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae74:	2b10      	cmp	r3, #16
 800ae76:	d021      	beq.n	800aebc <lwip_netconn_do_getaddr+0x94>
 800ae78:	2b20      	cmp	r3, #32
 800ae7a:	d144      	bne.n	800af06 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	7c1b      	ldrb	r3, [r3, #16]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d007      	beq.n	800ae94 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	8a52      	ldrh	r2, [r2, #18]
 800ae90:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800ae92:	e044      	b.n	800af1e <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	7c1b      	ldrb	r3, [r3, #16]
 800ae9c:	f003 0304 	and.w	r3, r3, #4
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d103      	bne.n	800aeac <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	22f5      	movs	r2, #245	; 0xf5
 800aea8:	711a      	strb	r2, [r3, #4]
        break;
 800aeaa:	e038      	b.n	800af1e <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	8a92      	ldrh	r2, [r2, #20]
 800aeb8:	801a      	strh	r2, [r3, #0]
        break;
 800aeba:	e030      	b.n	800af1e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	7c1b      	ldrb	r3, [r3, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10f      	bne.n	800aee4 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d005      	beq.n	800aedc <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	7d1b      	ldrb	r3, [r3, #20]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d103      	bne.n	800aee4 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	22f5      	movs	r2, #245	; 0xf5
 800aee0:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800aee2:	e01c      	b.n	800af1e <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	7c1b      	ldrb	r3, [r3, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d004      	beq.n	800aef6 <lwip_netconn_do_getaddr+0xce>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	8adb      	ldrh	r3, [r3, #22]
 800aef4:	e003      	b.n	800aefe <lwip_netconn_do_getaddr+0xd6>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	8b1b      	ldrh	r3, [r3, #24]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	68d2      	ldr	r2, [r2, #12]
 800af02:	8013      	strh	r3, [r2, #0]
        break;
 800af04:	e00b      	b.n	800af1e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800af06:	4b08      	ldr	r3, [pc, #32]	; (800af28 <lwip_netconn_do_getaddr+0x100>)
 800af08:	f240 727d 	movw	r2, #1917	; 0x77d
 800af0c:	4907      	ldr	r1, [pc, #28]	; (800af2c <lwip_netconn_do_getaddr+0x104>)
 800af0e:	4808      	ldr	r0, [pc, #32]	; (800af30 <lwip_netconn_do_getaddr+0x108>)
 800af10:	f010 fcfe 	bl	801b910 <iprintf>
        break;
 800af14:	e003      	b.n	800af1e <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	22f5      	movs	r2, #245	; 0xf5
 800af1a:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	0801d048 	.word	0x0801d048
 800af2c:	0801d588 	.word	0x0801d588
 800af30:	0801d08c 	.word	0x0801d08c

0800af34 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	785b      	ldrb	r3, [r3, #1]
 800af46:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d069      	beq.n	800b026 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800af5c:	2b10      	cmp	r3, #16
 800af5e:	d162      	bne.n	800b026 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800af64:	2b03      	cmp	r3, #3
 800af66:	d002      	beq.n	800af6e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800af68:	7afb      	ldrb	r3, [r7, #11]
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d05b      	beq.n	800b026 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800af6e:	7afb      	ldrb	r3, [r7, #11]
 800af70:	2b03      	cmp	r3, #3
 800af72:	d103      	bne.n	800af7c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	22f5      	movs	r2, #245	; 0xf5
 800af78:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800af7a:	e059      	b.n	800b030 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800af7c:	7afb      	ldrb	r3, [r7, #11]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d103      	bne.n	800af8a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	22fb      	movs	r2, #251	; 0xfb
 800af86:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800af88:	e052      	b.n	800b030 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	7a1b      	ldrb	r3, [r3, #8]
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b00      	cmp	r3, #0
 800af94:	d004      	beq.n	800afa0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff f826 	bl	8009fec <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d006      	beq.n	800afb8 <lwip_netconn_do_close+0x84>
 800afaa:	4b23      	ldr	r3, [pc, #140]	; (800b038 <lwip_netconn_do_close+0x104>)
 800afac:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800afb0:	4922      	ldr	r1, [pc, #136]	; (800b03c <lwip_netconn_do_close+0x108>)
 800afb2:	4823      	ldr	r0, [pc, #140]	; (800b040 <lwip_netconn_do_close+0x10c>)
 800afb4:	f010 fcac 	bl	801b910 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2204      	movs	r2, #4
 800afbe:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2100      	movs	r1, #0
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff f88a 	bl	800a0e8 <lwip_netconn_do_close_internal>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d029      	beq.n	800b02e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	785b      	ldrb	r3, [r3, #1]
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	d006      	beq.n	800aff2 <lwip_netconn_do_close+0xbe>
 800afe4:	4b14      	ldr	r3, [pc, #80]	; (800b038 <lwip_netconn_do_close+0x104>)
 800afe6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800afea:	4916      	ldr	r1, [pc, #88]	; (800b044 <lwip_netconn_do_close+0x110>)
 800afec:	4814      	ldr	r0, [pc, #80]	; (800b040 <lwip_netconn_do_close+0x10c>)
 800afee:	f010 fc8f 	bl	801b910 <iprintf>
        UNLOCK_TCPIP_CORE();
 800aff2:	4815      	ldr	r0, [pc, #84]	; (800b048 <lwip_netconn_do_close+0x114>)
 800aff4:	f00e fd59 	bl	8019aaa <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	330c      	adds	r3, #12
 800affe:	2100      	movs	r1, #0
 800b000:	4618      	mov	r0, r3
 800b002:	f00e fcb0 	bl	8019966 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b006:	4810      	ldr	r0, [pc, #64]	; (800b048 <lwip_netconn_do_close+0x114>)
 800b008:	f00e fd40 	bl	8019a8c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	785b      	ldrb	r3, [r3, #1]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00b      	beq.n	800b02e <lwip_netconn_do_close+0xfa>
 800b016:	4b08      	ldr	r3, [pc, #32]	; (800b038 <lwip_netconn_do_close+0x104>)
 800b018:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b01c:	4909      	ldr	r1, [pc, #36]	; (800b044 <lwip_netconn_do_close+0x110>)
 800b01e:	4808      	ldr	r0, [pc, #32]	; (800b040 <lwip_netconn_do_close+0x10c>)
 800b020:	f010 fc76 	bl	801b910 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b024:	e003      	b.n	800b02e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	22f5      	movs	r2, #245	; 0xf5
 800b02a:	711a      	strb	r2, [r3, #4]
 800b02c:	e000      	b.n	800b030 <lwip_netconn_do_close+0xfc>
      return;
 800b02e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	0801d048 	.word	0x0801d048
 800b03c:	0801d3ec 	.word	0x0801d3ec
 800b040:	0801d08c 	.word	0x0801d08c
 800b044:	0801d408 	.word	0x0801d408
 800b048:	2000cf08 	.word	0x2000cf08

0800b04c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	4603      	mov	r3, r0
 800b054:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	dc04      	bgt.n	800b068 <err_to_errno+0x1c>
 800b05e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b062:	f113 0f10 	cmn.w	r3, #16
 800b066:	da01      	bge.n	800b06c <err_to_errno+0x20>
    return EIO;
 800b068:	2305      	movs	r3, #5
 800b06a:	e005      	b.n	800b078 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b06c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b070:	425b      	negs	r3, r3
 800b072:	4a04      	ldr	r2, [pc, #16]	; (800b084 <err_to_errno+0x38>)
 800b074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	08020a24 	.word	0x08020a24

0800b088 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d013      	beq.n	800b0be <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00b      	beq.n	800b0b6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f002 fee0 	bl	800de68 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	605a      	str	r2, [r3, #4]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	2006      	movs	r0, #6
 800b0ba:	f001 fff3 	bl	800d0a4 <memp_free>
  }
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
	...

0800b0c8 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <netbuf_free+0x1c>
 800b0d6:	4b0d      	ldr	r3, [pc, #52]	; (800b10c <netbuf_free+0x44>)
 800b0d8:	2281      	movs	r2, #129	; 0x81
 800b0da:	490d      	ldr	r1, [pc, #52]	; (800b110 <netbuf_free+0x48>)
 800b0dc:	480d      	ldr	r0, [pc, #52]	; (800b114 <netbuf_free+0x4c>)
 800b0de:	f010 fc17 	bl	801b910 <iprintf>
 800b0e2:	e00f      	b.n	800b104 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d004      	beq.n	800b0f6 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f002 feb9 	bl	800de68 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	605a      	str	r2, [r3, #4]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	0801d5a0 	.word	0x0801d5a0
 800b110:	0801d63c 	.word	0x0801d63c
 800b114:	0801d5f0 	.word	0x0801d5f0

0800b118 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4613      	mov	r3, r2
 800b124:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d108      	bne.n	800b13e <netbuf_ref+0x26>
 800b12c:	4b1c      	ldr	r3, [pc, #112]	; (800b1a0 <netbuf_ref+0x88>)
 800b12e:	2299      	movs	r2, #153	; 0x99
 800b130:	491c      	ldr	r1, [pc, #112]	; (800b1a4 <netbuf_ref+0x8c>)
 800b132:	481d      	ldr	r0, [pc, #116]	; (800b1a8 <netbuf_ref+0x90>)
 800b134:	f010 fbec 	bl	801b910 <iprintf>
 800b138:	f06f 030f 	mvn.w	r3, #15
 800b13c:	e02b      	b.n	800b196 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d004      	beq.n	800b150 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f002 fe8c 	bl	800de68 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b150:	2241      	movs	r2, #65	; 0x41
 800b152:	2100      	movs	r1, #0
 800b154:	2036      	movs	r0, #54	; 0x36
 800b156:	f002 fb71 	bl	800d83c <pbuf_alloc>
 800b15a:	4602      	mov	r2, r0
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d105      	bne.n	800b174 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b16e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b172:	e010      	b.n	800b196 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	88fa      	ldrh	r2, [r7, #6]
 800b182:	811a      	strh	r2, [r3, #8]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	6812      	ldr	r2, [r2, #0]
 800b188:	891b      	ldrh	r3, [r3, #8]
 800b18a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	0801d5a0 	.word	0x0801d5a0
 800b1a4:	0801d658 	.word	0x0801d658
 800b1a8:	0801d5f0 	.word	0x0801d5f0

0800b1ac <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	db02      	blt.n	800b1c4 <tryget_socket_unconn_nouse+0x18>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	dd01      	ble.n	800b1c8 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	e003      	b.n	800b1d0 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	011b      	lsls	r3, r3, #4
 800b1cc:	4a03      	ldr	r2, [pc, #12]	; (800b1dc <tryget_socket_unconn_nouse+0x30>)
 800b1ce:	4413      	add	r3, r2
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	20008a4c 	.word	0x20008a4c

0800b1e0 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7ff ffdf 	bl	800b1ac <tryget_socket_unconn_nouse>
 800b1ee:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f7ff ffec 	bl	800b1e0 <tryget_socket_unconn>
 800b208:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d005      	beq.n	800b21c <tryget_socket+0x22>
    if (sock->conn) {
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <tryget_socket+0x22>
      return sock;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	e000      	b.n	800b21e <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7ff ffe2 	bl	800b1fa <tryget_socket>
 800b236:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d104      	bne.n	800b248 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800b23e:	4b05      	ldr	r3, [pc, #20]	; (800b254 <get_socket+0x2c>)
 800b240:	2209      	movs	r2, #9
 800b242:	601a      	str	r2, [r3, #0]
    return NULL;
 800b244:	2300      	movs	r3, #0
 800b246:	e000      	b.n	800b24a <get_socket+0x22>
  }
  return sock;
 800b248:	68fb      	ldr	r3, [r7, #12]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	200106a4 	.word	0x200106a4

0800b258 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b262:	2300      	movs	r3, #0
 800b264:	60fb      	str	r3, [r7, #12]
 800b266:	e052      	b.n	800b30e <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800b268:	f00e fc52 	bl	8019b10 <sys_arch_protect>
 800b26c:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800b26e:	4a2c      	ldr	r2, [pc, #176]	; (800b320 <alloc_socket+0xc8>)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	011b      	lsls	r3, r3, #4
 800b274:	4413      	add	r3, r2
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d142      	bne.n	800b302 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800b27c:	4a28      	ldr	r2, [pc, #160]	; (800b320 <alloc_socket+0xc8>)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	011b      	lsls	r3, r3, #4
 800b282:	4413      	add	r3, r2
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800b288:	68b8      	ldr	r0, [r7, #8]
 800b28a:	f00e fc4f 	bl	8019b2c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800b28e:	4a24      	ldr	r2, [pc, #144]	; (800b320 <alloc_socket+0xc8>)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	011b      	lsls	r3, r3, #4
 800b294:	4413      	add	r3, r2
 800b296:	3304      	adds	r3, #4
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800b29c:	4a20      	ldr	r2, [pc, #128]	; (800b320 <alloc_socket+0xc8>)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	011b      	lsls	r3, r3, #4
 800b2a2:	4413      	add	r3, r2
 800b2a4:	330e      	adds	r3, #14
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d006      	beq.n	800b2ba <alloc_socket+0x62>
 800b2ac:	4b1d      	ldr	r3, [pc, #116]	; (800b324 <alloc_socket+0xcc>)
 800b2ae:	f240 220e 	movw	r2, #526	; 0x20e
 800b2b2:	491d      	ldr	r1, [pc, #116]	; (800b328 <alloc_socket+0xd0>)
 800b2b4:	481d      	ldr	r0, [pc, #116]	; (800b32c <alloc_socket+0xd4>)
 800b2b6:	f010 fb2b 	bl	801b910 <iprintf>
      sockets[i].rcvevent   = 0;
 800b2ba:	4a19      	ldr	r2, [pc, #100]	; (800b320 <alloc_socket+0xc8>)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	011b      	lsls	r3, r3, #4
 800b2c0:	4413      	add	r3, r2
 800b2c2:	3308      	adds	r3, #8
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2d0:	2b10      	cmp	r3, #16
 800b2d2:	d102      	bne.n	800b2da <alloc_socket+0x82>
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <alloc_socket+0x86>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <alloc_socket+0x88>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	b299      	uxth	r1, r3
 800b2e2:	4a0f      	ldr	r2, [pc, #60]	; (800b320 <alloc_socket+0xc8>)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	011b      	lsls	r3, r3, #4
 800b2e8:	4413      	add	r3, r2
 800b2ea:	330a      	adds	r3, #10
 800b2ec:	460a      	mov	r2, r1
 800b2ee:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800b2f0:	4a0b      	ldr	r2, [pc, #44]	; (800b320 <alloc_socket+0xc8>)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	011b      	lsls	r3, r3, #4
 800b2f6:	4413      	add	r3, r2
 800b2f8:	330c      	adds	r3, #12
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	e00a      	b.n	800b318 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800b302:	68b8      	ldr	r0, [r7, #8]
 800b304:	f00e fc12 	bl	8019b2c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3301      	adds	r3, #1
 800b30c:	60fb      	str	r3, [r7, #12]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2b03      	cmp	r3, #3
 800b312:	dda9      	ble.n	800b268 <alloc_socket+0x10>
  }
  return -1;
 800b314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	20008a4c 	.word	0x20008a4c
 800b324:	0801d738 	.word	0x0801d738
 800b328:	0801d76c 	.word	0x0801d76c
 800b32c:	0801d78c 	.word	0x0801d78c

0800b330 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
 800b33c:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	6852      	ldr	r2, [r2, #4]
 800b344:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	601a      	str	r2, [r3, #0]
  return 1;
 800b35a:	2301      	movs	r3, #1
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00d      	beq.n	800b398 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d005      	beq.n	800b38e <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4618      	mov	r0, r3
 800b388:	f002 fd6e 	bl	800de68 <pbuf_free>
 800b38c:	e004      	b.n	800b398 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff fe78 	bl	800b088 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800b39e:	68b8      	ldr	r0, [r7, #8]
 800b3a0:	f7fd fd50 	bl	8008e44 <netconn_delete>
  }
}
 800b3a4:	bf00      	nop
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800b3b6:	f00e fbab 	bl	8019b10 <sys_arch_protect>
 800b3ba:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800b3bc:	f107 0308 	add.w	r3, r7, #8
 800b3c0:	f107 020c 	add.w	r2, r7, #12
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7ff ffb2 	bl	800b330 <free_socket_locked>
 800b3cc:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800b3ce:	6978      	ldr	r0, [r7, #20]
 800b3d0:	f00e fbac 	bl	8019b2c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d006      	beq.n	800b3e8 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f107 0208 	add.w	r2, r7, #8
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6838      	ldr	r0, [r7, #0]
 800b3e4:	f7ff ffc0 	bl	800b368 <free_socket_free_elements>
  }
}
 800b3e8:	bf00      	nop
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff ff13 	bl	800b228 <get_socket>
 800b402:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d102      	bne.n	800b410 <lwip_close+0x20>
    return -1;
 800b40a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b40e:	e039      	b.n	800b484 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00b      	beq.n	800b430 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b422:	2b10      	cmp	r3, #16
 800b424:	bf0c      	ite	eq
 800b426:	2301      	moveq	r3, #1
 800b428:	2300      	movne	r3, #0
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	617b      	str	r3, [r7, #20]
 800b42e:	e00a      	b.n	800b446 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d006      	beq.n	800b446 <lwip_close+0x56>
 800b438:	4b14      	ldr	r3, [pc, #80]	; (800b48c <lwip_close+0x9c>)
 800b43a:	f44f 7245 	mov.w	r2, #788	; 0x314
 800b43e:	4914      	ldr	r1, [pc, #80]	; (800b490 <lwip_close+0xa0>)
 800b440:	4814      	ldr	r0, [pc, #80]	; (800b494 <lwip_close+0xa4>)
 800b442:	f010 fa65 	bl	801b910 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fd fcd6 	bl	8008dfc <netconn_prepare_delete>
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00e      	beq.n	800b47a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800b45c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b460:	4618      	mov	r0, r3
 800b462:	f7ff fdf3 	bl	800b04c <err_to_errno>
 800b466:	60b8      	str	r0, [r7, #8]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d002      	beq.n	800b474 <lwip_close+0x84>
 800b46e:	4a0a      	ldr	r2, [pc, #40]	; (800b498 <lwip_close+0xa8>)
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b478:	e004      	b.n	800b484 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800b47a:	6979      	ldr	r1, [r7, #20]
 800b47c:	6938      	ldr	r0, [r7, #16]
 800b47e:	f7ff ff95 	bl	800b3ac <free_socket>
  set_errno(0);
  return 0;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	0801d738 	.word	0x0801d738
 800b490:	0801d7f8 	.word	0x0801d7f8
 800b494:	0801d78c 	.word	0x0801d78c
 800b498:	200106a4 	.word	0x200106a4

0800b49c <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08c      	sub	sp, #48	; 0x30
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f7ff febd 	bl	800b228 <get_socket>
 800b4ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 800b4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d102      	bne.n	800b4bc <lwip_connect+0x20>
    return -1;
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4ba:	e062      	b.n	800b582 <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	785b      	ldrb	r3, [r3, #1]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d108      	bne.n	800b4d6 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800b4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fd fd61 	bl	8008f90 <netconn_disconnect>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b4d4:	e039      	b.n	800b54a <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b10      	cmp	r3, #16
 800b4da:	d10c      	bne.n	800b4f6 <lwip_connect+0x5a>
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	785b      	ldrb	r3, [r3, #1]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d003      	beq.n	800b4ec <lwip_connect+0x50>
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	785b      	ldrb	r3, [r3, #1]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d104      	bne.n	800b4f6 <lwip_connect+0x5a>
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d014      	beq.n	800b520 <lwip_connect+0x84>
 800b4f6:	4b25      	ldr	r3, [pc, #148]	; (800b58c <lwip_connect+0xf0>)
 800b4f8:	f240 3247 	movw	r2, #839	; 0x347
 800b4fc:	4924      	ldr	r1, [pc, #144]	; (800b590 <lwip_connect+0xf4>)
 800b4fe:	4825      	ldr	r0, [pc, #148]	; (800b594 <lwip_connect+0xf8>)
 800b500:	f010 fa06 	bl	801b910 <iprintf>
 800b504:	f06f 000f 	mvn.w	r0, #15
 800b508:	f7ff fda0 	bl	800b04c <err_to_errno>
 800b50c:	6238      	str	r0, [r7, #32]
 800b50e:	6a3b      	ldr	r3, [r7, #32]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <lwip_connect+0x7e>
 800b514:	4a20      	ldr	r2, [pc, #128]	; (800b598 <lwip_connect+0xfc>)
 800b516:	6a3b      	ldr	r3, [r7, #32]
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b51e:	e030      	b.n	800b582 <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	617b      	str	r3, [r7, #20]
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	885b      	ldrh	r3, [r3, #2]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f001 f8b2 	bl	800c694 <lwip_htons>
 800b530:	4603      	mov	r3, r0
 800b532:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b53a:	f107 0114 	add.w	r1, r7, #20
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fd fcee 	bl	8008f20 <netconn_connect>
 800b544:	4603      	mov	r3, r0
 800b546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 800b54a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00e      	beq.n	800b570 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800b552:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff fd78 	bl	800b04c <err_to_errno>
 800b55c:	61b8      	str	r0, [r7, #24]
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <lwip_connect+0xce>
 800b564:	4a0c      	ldr	r2, [pc, #48]	; (800b598 <lwip_connect+0xfc>)
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b56a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b56e:	e008      	b.n	800b582 <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800b570:	2300      	movs	r3, #0
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d002      	beq.n	800b580 <lwip_connect+0xe4>
 800b57a:	4a07      	ldr	r2, [pc, #28]	; (800b598 <lwip_connect+0xfc>)
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3730      	adds	r7, #48	; 0x30
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	0801d738 	.word	0x0801d738
 800b590:	0801d810 	.word	0x0801d810
 800b594:	0801d78c 	.word	0x0801d78c
 800b598:	200106a4 	.word	0x200106a4

0800b59c <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08c      	sub	sp, #48	; 0x30
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800b5aa:	2308      	movs	r3, #8
 800b5ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	db01      	blt.n	800b5be <lwip_recv_tcp+0x22>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	e001      	b.n	800b5c2 <lwip_recv_tcp+0x26>
 800b5be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d106      	bne.n	800b5d8 <lwip_recv_tcp+0x3c>
 800b5ca:	4b74      	ldr	r3, [pc, #464]	; (800b79c <lwip_recv_tcp+0x200>)
 800b5cc:	f240 329e 	movw	r2, #926	; 0x39e
 800b5d0:	4973      	ldr	r1, [pc, #460]	; (800b7a0 <lwip_recv_tcp+0x204>)
 800b5d2:	4874      	ldr	r0, [pc, #464]	; (800b7a4 <lwip_recv_tcp+0x208>)
 800b5d4:	f010 f99c 	bl	801b910 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5e2:	2b10      	cmp	r3, #16
 800b5e4:	d006      	beq.n	800b5f4 <lwip_recv_tcp+0x58>
 800b5e6:	4b6d      	ldr	r3, [pc, #436]	; (800b79c <lwip_recv_tcp+0x200>)
 800b5e8:	f240 329f 	movw	r2, #927	; 0x39f
 800b5ec:	496e      	ldr	r1, [pc, #440]	; (800b7a8 <lwip_recv_tcp+0x20c>)
 800b5ee:	486d      	ldr	r0, [pc, #436]	; (800b7a4 <lwip_recv_tcp+0x208>)
 800b5f0:	f010 f98e 	bl	801b910 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	f003 0308 	and.w	r3, r3, #8
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d005      	beq.n	800b60a <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800b5fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b602:	f043 0304 	orr.w	r3, r3, #4
 800b606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d003      	beq.n	800b61a <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	617b      	str	r3, [r7, #20]
 800b618:	e036      	b.n	800b688 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b622:	f107 0114 	add.w	r1, r7, #20
 800b626:	4618      	mov	r0, r3
 800b628:	f7fd fe9c 	bl	8009364 <netconn_recv_tcp_pbuf_flags>
 800b62c:	4603      	mov	r3, r0
 800b62e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800b632:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b636:	2b00      	cmp	r3, #0
 800b638:	d019      	beq.n	800b66e <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f300 808d 	bgt.w	800b75c <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800b642:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff fd00 	bl	800b04c <err_to_errno>
 800b64c:	61f8      	str	r0, [r7, #28]
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <lwip_recv_tcp+0xbe>
 800b654:	4a55      	ldr	r2, [pc, #340]	; (800b7ac <lwip_recv_tcp+0x210>)
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800b65a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b65e:	f113 0f0f 	cmn.w	r3, #15
 800b662:	d101      	bne.n	800b668 <lwip_recv_tcp+0xcc>
          return 0;
 800b664:	2300      	movs	r3, #0
 800b666:	e094      	b.n	800b792 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800b668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b66c:	e091      	b.n	800b792 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d106      	bne.n	800b682 <lwip_recv_tcp+0xe6>
 800b674:	4b49      	ldr	r3, [pc, #292]	; (800b79c <lwip_recv_tcp+0x200>)
 800b676:	f240 32c5 	movw	r2, #965	; 0x3c5
 800b67a:	494d      	ldr	r1, [pc, #308]	; (800b7b0 <lwip_recv_tcp+0x214>)
 800b67c:	4849      	ldr	r0, [pc, #292]	; (800b7a4 <lwip_recv_tcp+0x208>)
 800b67e:	f010 f947 	bl	801b910 <iprintf>
      sock->lastdata.pbuf = p;
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	891b      	ldrh	r3, [r3, #8]
 800b68c:	461a      	mov	r2, r3
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	4293      	cmp	r3, r2
 800b692:	dd03      	ble.n	800b69c <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	891b      	ldrh	r3, [r3, #8]
 800b698:	847b      	strh	r3, [r7, #34]	; 0x22
 800b69a:	e001      	b.n	800b6a0 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800b6a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a4:	4413      	add	r3, r2
 800b6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	dd03      	ble.n	800b6b4 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	43db      	mvns	r3, r3
 800b6b2:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800b6b4:	6978      	ldr	r0, [r7, #20]
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	18d1      	adds	r1, r2, r3
 800b6bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f002 fdd8 	bl	800e274 <pbuf_copy_partial>

    recvd += copylen;
 800b6c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6c8:	4413      	add	r3, r2
 800b6ca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800b6cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	da06      	bge.n	800b6e2 <lwip_recv_tcp+0x146>
 800b6d4:	4b31      	ldr	r3, [pc, #196]	; (800b79c <lwip_recv_tcp+0x200>)
 800b6d6:	f240 32dd 	movw	r2, #989	; 0x3dd
 800b6da:	4936      	ldr	r1, [pc, #216]	; (800b7b4 <lwip_recv_tcp+0x218>)
 800b6dc:	4831      	ldr	r0, [pc, #196]	; (800b7a4 <lwip_recv_tcp+0x208>)
 800b6de:	f010 f917 	bl	801b910 <iprintf>
    recv_left -= copylen;
 800b6e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d123      	bne.n	800b73c <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	891b      	ldrh	r3, [r3, #8]
 800b6f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d906      	bls.n	800b70c <lwip_recv_tcp+0x170>
 800b6fe:	4b27      	ldr	r3, [pc, #156]	; (800b79c <lwip_recv_tcp+0x200>)
 800b700:	f240 32e3 	movw	r2, #995	; 0x3e3
 800b704:	492c      	ldr	r1, [pc, #176]	; (800b7b8 <lwip_recv_tcp+0x21c>)
 800b706:	4827      	ldr	r0, [pc, #156]	; (800b7a4 <lwip_recv_tcp+0x208>)
 800b708:	f010 f902 	bl	801b910 <iprintf>
      if (p->tot_len - copylen > 0) {
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	891b      	ldrh	r3, [r3, #8]
 800b710:	461a      	mov	r2, r3
 800b712:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	dd09      	ble.n	800b72e <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b71e:	4611      	mov	r1, r2
 800b720:	4618      	mov	r0, r3
 800b722:	f002 fb6e 	bl	800de02 <pbuf_free_header>
 800b726:	4602      	mov	r2, r0
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	605a      	str	r2, [r3, #4]
 800b72c:	e006      	b.n	800b73c <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	4618      	mov	r0, r3
 800b738:	f002 fb96 	bl	800de68 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800b73c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b740:	f043 0314 	orr.w	r3, r3, #20
 800b744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	dd08      	ble.n	800b760 <lwip_recv_tcp+0x1c4>
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	2b00      	cmp	r3, #0
 800b756:	f43f af58 	beq.w	800b60a <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800b75a:	e001      	b.n	800b760 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800b75c:	bf00      	nop
 800b75e:	e000      	b.n	800b762 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800b760:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	2b00      	cmp	r3, #0
 800b766:	dd0b      	ble.n	800b780 <lwip_recv_tcp+0x1e4>
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	f003 0301 	and.w	r3, r3, #1
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d106      	bne.n	800b780 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b778:	4611      	mov	r1, r2
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fd fd3a 	bl	80091f4 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800b780:	2300      	movs	r3, #0
 800b782:	61bb      	str	r3, [r7, #24]
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d002      	beq.n	800b790 <lwip_recv_tcp+0x1f4>
 800b78a:	4a08      	ldr	r2, [pc, #32]	; (800b7ac <lwip_recv_tcp+0x210>)
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	6013      	str	r3, [r2, #0]
  return recvd;
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b792:	4618      	mov	r0, r3
 800b794:	3730      	adds	r7, #48	; 0x30
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	0801d738 	.word	0x0801d738
 800b7a0:	0801d830 	.word	0x0801d830
 800b7a4:	0801d78c 	.word	0x0801d78c
 800b7a8:	0801d840 	.word	0x0801d840
 800b7ac:	200106a4 	.word	0x200106a4
 800b7b0:	0801d864 	.word	0x0801d864
 800b7b4:	0801d870 	.word	0x0801d870
 800b7b8:	0801d898 	.word	0x0801d898

0800b7bc <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800b7bc:	b590      	push	{r4, r7, lr}
 800b7be:	b08b      	sub	sp, #44	; 0x2c
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	603b      	str	r3, [r7, #0]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d106      	bne.n	800b7e4 <lwip_sock_make_addr+0x28>
 800b7d6:	4b2b      	ldr	r3, [pc, #172]	; (800b884 <lwip_sock_make_addr+0xc8>)
 800b7d8:	f240 4207 	movw	r2, #1031	; 0x407
 800b7dc:	492a      	ldr	r1, [pc, #168]	; (800b888 <lwip_sock_make_addr+0xcc>)
 800b7de:	482b      	ldr	r0, [pc, #172]	; (800b88c <lwip_sock_make_addr+0xd0>)
 800b7e0:	f010 f896 	bl	801b910 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d106      	bne.n	800b7f8 <lwip_sock_make_addr+0x3c>
 800b7ea:	4b26      	ldr	r3, [pc, #152]	; (800b884 <lwip_sock_make_addr+0xc8>)
 800b7ec:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b7f0:	4927      	ldr	r1, [pc, #156]	; (800b890 <lwip_sock_make_addr+0xd4>)
 800b7f2:	4826      	ldr	r0, [pc, #152]	; (800b88c <lwip_sock_make_addr+0xd0>)
 800b7f4:	f010 f88c 	bl	801b910 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d106      	bne.n	800b80c <lwip_sock_make_addr+0x50>
 800b7fe:	4b21      	ldr	r3, [pc, #132]	; (800b884 <lwip_sock_make_addr+0xc8>)
 800b800:	f240 4209 	movw	r2, #1033	; 0x409
 800b804:	4923      	ldr	r1, [pc, #140]	; (800b894 <lwip_sock_make_addr+0xd8>)
 800b806:	4821      	ldr	r0, [pc, #132]	; (800b88c <lwip_sock_make_addr+0xd0>)
 800b808:	f010 f882 	bl	801b910 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800b80c:	f107 0314 	add.w	r3, r7, #20
 800b810:	2210      	movs	r2, #16
 800b812:	701a      	strb	r2, [r3, #0]
 800b814:	f107 0314 	add.w	r3, r7, #20
 800b818:	2202      	movs	r2, #2
 800b81a:	705a      	strb	r2, [r3, #1]
 800b81c:	f107 0414 	add.w	r4, r7, #20
 800b820:	88fb      	ldrh	r3, [r7, #6]
 800b822:	4618      	mov	r0, r3
 800b824:	f000 ff36 	bl	800c694 <lwip_htons>
 800b828:	4603      	mov	r3, r0
 800b82a:	8063      	strh	r3, [r4, #2]
 800b82c:	f107 0314 	add.w	r3, r7, #20
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	6812      	ldr	r2, [r2, #0]
 800b834:	605a      	str	r2, [r3, #4]
 800b836:	f107 0314 	add.w	r3, r7, #20
 800b83a:	3308      	adds	r3, #8
 800b83c:	2208      	movs	r2, #8
 800b83e:	2100      	movs	r1, #0
 800b840:	4618      	mov	r0, r3
 800b842:	f010 f85d 	bl	801b900 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	7d3a      	ldrb	r2, [r7, #20]
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d202      	bcs.n	800b856 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800b850:	2301      	movs	r3, #1
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
 800b854:	e008      	b.n	800b868 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800b856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	7d3a      	ldrb	r2, [r7, #20]
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d903      	bls.n	800b868 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800b860:	7d3b      	ldrb	r3, [r7, #20]
 800b862:	461a      	mov	r2, r3
 800b864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b866:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	f107 0314 	add.w	r3, r7, #20
 800b870:	4619      	mov	r1, r3
 800b872:	6838      	ldr	r0, [r7, #0]
 800b874:	f010 f836 	bl	801b8e4 <memcpy>
  return truncated;
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	372c      	adds	r7, #44	; 0x2c
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd90      	pop	{r4, r7, pc}
 800b882:	bf00      	nop
 800b884:	0801d738 	.word	0x0801d738
 800b888:	0801d8a8 	.word	0x0801d8a8
 800b88c:	0801d78c 	.word	0x0801d78c
 800b890:	0801d8bc 	.word	0x0801d8bc
 800b894:	0801d8cc 	.word	0x0801d8cc

0800b898 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b088      	sub	sp, #32
 800b89c:	af02      	add	r7, sp, #8
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
 800b8a4:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <lwip_recv_tcp_from+0x18>
    return 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	e021      	b.n	800b8f4 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d01d      	beq.n	800b8f2 <lwip_recv_tcp_from+0x5a>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d01a      	beq.n	800b8f2 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6818      	ldr	r0, [r3, #0]
 800b8c0:	f107 0216 	add.w	r2, r7, #22
 800b8c4:	f107 0110 	add.w	r1, r7, #16
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f7fd fad7 	bl	8008e7c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00e      	beq.n	800b8f2 <lwip_recv_tcp_from+0x5a>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00b      	beq.n	800b8f2 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6818      	ldr	r0, [r3, #0]
 800b8de:	8afa      	ldrh	r2, [r7, #22]
 800b8e0:	f107 0110 	add.w	r1, r7, #16
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	f7ff ff67 	bl	800b7bc <lwip_sock_make_addr>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	e000      	b.n	800b8f4 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800b8fc:	b590      	push	{r4, r7, lr}
 800b8fe:	b08d      	sub	sp, #52	; 0x34
 800b900:	af02      	add	r7, sp, #8
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10d      	bne.n	800b92e <lwip_recvfrom_udp_raw+0x32>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	dd09      	ble.n	800b92e <lwip_recvfrom_udp_raw+0x32>
 800b91a:	4b5e      	ldr	r3, [pc, #376]	; (800ba94 <lwip_recvfrom_udp_raw+0x198>)
 800b91c:	f240 4249 	movw	r2, #1097	; 0x449
 800b920:	495d      	ldr	r1, [pc, #372]	; (800ba98 <lwip_recvfrom_udp_raw+0x19c>)
 800b922:	485e      	ldr	r0, [pc, #376]	; (800ba9c <lwip_recvfrom_udp_raw+0x1a0>)
 800b924:	f00f fff4 	bl	801b910 <iprintf>
 800b928:	f06f 030f 	mvn.w	r3, #15
 800b92c:	e0ad      	b.n	800ba8a <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f003 0308 	and.w	r3, r3, #8
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800b938:	2304      	movs	r3, #4
 800b93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b93e:	e002      	b.n	800b946 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d11e      	bne.n	800b990 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b95a:	f107 0110 	add.w	r1, r7, #16
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fd fd2c 	bl	80093bc <netconn_recv_udp_raw_netbuf_flags>
 800b964:	4603      	mov	r3, r0
 800b966:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800b968:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800b970:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b974:	e089      	b.n	800ba8a <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d106      	bne.n	800b98a <lwip_recvfrom_udp_raw+0x8e>
 800b97c:	4b45      	ldr	r3, [pc, #276]	; (800ba94 <lwip_recvfrom_udp_raw+0x198>)
 800b97e:	f240 425e 	movw	r2, #1118	; 0x45e
 800b982:	4947      	ldr	r1, [pc, #284]	; (800baa0 <lwip_recvfrom_udp_raw+0x1a4>)
 800b984:	4845      	ldr	r0, [pc, #276]	; (800ba9c <lwip_recvfrom_udp_raw+0x1a0>)
 800b986:	f00f ffc3 	bl	801b910 <iprintf>
    sock->lastdata.netbuf = buf;
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	891b      	ldrh	r3, [r3, #8]
 800b996:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800b99c:	2300      	movs	r3, #0
 800b99e:	61fb      	str	r3, [r7, #28]
 800b9a0:	e029      	b.n	800b9f6 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800b9a2:	8b3a      	ldrh	r2, [r7, #24]
 800b9a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	689a      	ldr	r2, [r3, #8]
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	00db      	lsls	r3, r3, #3
 800b9b2:	4413      	add	r3, r2
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	8afb      	ldrh	r3, [r7, #22]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d902      	bls.n	800b9c2 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800b9bc:	8afb      	ldrh	r3, [r7, #22]
 800b9be:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b9c0:	e006      	b.n	800b9d0 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	689a      	ldr	r2, [r3, #8]
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	4413      	add	r3, r2
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	6818      	ldr	r0, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	4413      	add	r3, r2
 800b9de:	6819      	ldr	r1, [r3, #0]
 800b9e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9e4:	f002 fc46 	bl	800e274 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800b9e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b9ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ec:	4413      	add	r3, r2
 800b9ee:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	69fa      	ldr	r2, [r7, #28]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	da03      	bge.n	800ba08 <lwip_recvfrom_udp_raw+0x10c>
 800ba00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba02:	8b3b      	ldrh	r3, [r7, #24]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d3cc      	bcc.n	800b9a2 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d01a      	beq.n	800ba46 <lwip_recvfrom_udp_raw+0x14a>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d016      	beq.n	800ba46 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d012      	beq.n	800ba46 <lwip_recvfrom_udp_raw+0x14a>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00e      	beq.n	800ba46 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6818      	ldr	r0, [r3, #0]
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	f103 0108 	add.w	r1, r3, #8
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	4623      	mov	r3, r4
 800ba42:	f7ff febb 	bl	800b7bc <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d007      	beq.n	800ba64 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800ba54:	2300      	movs	r3, #0
 800ba56:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800ba58:	7d7b      	ldrb	r3, [r7, #21]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d102      	bne.n	800ba64 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	f003 0301 	and.w	r3, r3, #1
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d106      	bne.n	800ba7c <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7ff fb06 	bl	800b088 <netbuf_delete>
  }
  if (datagram_len) {
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	8b3a      	ldrh	r2, [r7, #24]
 800ba86:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	372c      	adds	r7, #44	; 0x2c
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd90      	pop	{r4, r7, pc}
 800ba92:	bf00      	nop
 800ba94:	0801d738 	.word	0x0801d738
 800ba98:	0801d8dc 	.word	0x0801d8dc
 800ba9c:	0801d78c 	.word	0x0801d78c
 800baa0:	0801d908 	.word	0x0801d908

0800baa4 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b096      	sub	sp, #88	; 0x58
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
 800bab0:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f7ff fbb8 	bl	800b228 <get_socket>
 800bab8:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800baba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d102      	bne.n	800bac6 <lwip_recvfrom+0x22>
    return -1;
 800bac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bac4:	e078      	b.n	800bbb8 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800bac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bad0:	2b10      	cmp	r3, #16
 800bad2:	d112      	bne.n	800bafa <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	68b9      	ldr	r1, [r7, #8]
 800bada:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800badc:	f7ff fd5e 	bl	800b59c <lwip_recv_tcp>
 800bae0:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800bae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	4b35      	ldr	r3, [pc, #212]	; (800bbc0 <lwip_recvfrom+0x11c>)
 800baec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800baee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baf0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800baf2:	f7ff fed1 	bl	800b898 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800baf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baf8:	e05e      	b.n	800bbb8 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800bafa:	2300      	movs	r3, #0
 800bafc:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800bb06:	2300      	movs	r3, #0
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800bb12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb16:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800bb1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb1e:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800bb20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d002      	beq.n	800bb2c <lwip_recvfrom+0x88>
 800bb26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	e000      	b.n	800bb2e <lwip_recvfrom+0x8a>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800bb30:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800bb34:	f107 0214 	add.w	r2, r7, #20
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	6839      	ldr	r1, [r7, #0]
 800bb40:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bb42:	f7ff fedb 	bl	800b8fc <lwip_recvfrom_udp_raw>
 800bb46:	4603      	mov	r3, r0
 800bb48:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800bb4c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00e      	beq.n	800bb72 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800bb54:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7ff fa77 	bl	800b04c <err_to_errno>
 800bb5e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800bb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <lwip_recvfrom+0xc8>
 800bb66:	4a17      	ldr	r2, [pc, #92]	; (800bbc4 <lwip_recvfrom+0x120>)
 800bb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800bb6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb70:	e022      	b.n	800bbb8 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800bb72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bb74:	461a      	mov	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	bf28      	it	cs
 800bb7c:	4613      	movcs	r3, r2
 800bb7e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d206      	bcs.n	800bb94 <lwip_recvfrom+0xf0>
 800bb86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bb88:	461a      	mov	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	bf28      	it	cs
 800bb90:	4613      	movcs	r3, r2
 800bb92:	e001      	b.n	800bb98 <lwip_recvfrom+0xf4>
 800bb94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bb98:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800bb9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bba4:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800bba6:	2300      	movs	r3, #0
 800bba8:	643b      	str	r3, [r7, #64]	; 0x40
 800bbaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <lwip_recvfrom+0x112>
 800bbb0:	4a04      	ldr	r2, [pc, #16]	; (800bbc4 <lwip_recvfrom+0x120>)
 800bbb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbb4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800bbb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3750      	adds	r7, #80	; 0x50
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	0801d914 	.word	0x0801d914
 800bbc4:	200106a4 	.word	0x200106a4

0800bbc8 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af02      	add	r7, sp, #8
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	68b9      	ldr	r1, [r7, #8]
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f7ff ff5d 	bl	800baa4 <lwip_recvfrom>
 800bbea:	4603      	mov	r3, r0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08a      	sub	sp, #40	; 0x28
 800bbf8:	af02      	add	r7, sp, #8
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7ff fb10 	bl	800b228 <get_socket>
 800bc08:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d102      	bne.n	800bc16 <lwip_send+0x22>
    return -1;
 800bc10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc14:	e046      	b.n	800bca4 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc20:	2b10      	cmp	r3, #16
 800bc22:	d00b      	beq.n	800bc3c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800bc24:	2300      	movs	r3, #0
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	2300      	movs	r3, #0
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	68b9      	ldr	r1, [r7, #8]
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f000 f83c 	bl	800bcb0 <lwip_sendto>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	e033      	b.n	800bca4 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <lwip_send+0x56>
 800bc46:	2203      	movs	r2, #3
 800bc48:	e000      	b.n	800bc4c <lwip_send+0x58>
 800bc4a:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	105b      	asrs	r3, r3, #1
 800bc50:	b25b      	sxtb	r3, r3
 800bc52:	f003 0304 	and.w	r3, r3, #4
 800bc56:	b25b      	sxtb	r3, r3
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800bc5c:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	7efa      	ldrb	r2, [r7, #27]
 800bc68:	f107 0310 	add.w	r3, r7, #16
 800bc6c:	9300      	str	r3, [sp, #0]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	68b9      	ldr	r1, [r7, #8]
 800bc74:	f7fd fbfc 	bl	8009470 <netconn_write_partly>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800bc7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7ff f9e3 	bl	800b04c <err_to_errno>
 800bc86:	6178      	str	r0, [r7, #20]
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <lwip_send+0xa0>
 800bc8e:	4a07      	ldr	r2, [pc, #28]	; (800bcac <lwip_send+0xb8>)
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800bc94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d101      	bne.n	800bca0 <lwip_send+0xac>
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	e001      	b.n	800bca4 <lwip_send+0xb0>
 800bca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3720      	adds	r7, #32
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	200106a4 	.word	0x200106a4

0800bcb0 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08e      	sub	sp, #56	; 0x38
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f7ff fab2 	bl	800b228 <get_socket>
 800bcc4:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d102      	bne.n	800bcd2 <lwip_sendto+0x22>
    return -1;
 800bccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcd0:	e093      	b.n	800bdfa <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcdc:	2b10      	cmp	r3, #16
 800bcde:	d107      	bne.n	800bcf0 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	68b9      	ldr	r1, [r7, #8]
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f7ff ff84 	bl	800bbf4 <lwip_send>
 800bcec:	4603      	mov	r3, r0
 800bcee:	e084      	b.n	800bdfa <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcf6:	d30a      	bcc.n	800bd0e <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800bcf8:	235a      	movs	r3, #90	; 0x5a
 800bcfa:	623b      	str	r3, [r7, #32]
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <lwip_sendto+0x58>
 800bd02:	4a40      	ldr	r2, [pc, #256]	; (800be04 <lwip_sendto+0x154>)
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bd08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd0c:	e075      	b.n	800bdfa <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800bd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d102      	bne.n	800bd1e <lwip_sendto+0x6e>
 800bd18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d023      	beq.n	800bd66 <lwip_sendto+0xb6>
 800bd1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd20:	2b10      	cmp	r3, #16
 800bd22:	d10b      	bne.n	800bd3c <lwip_sendto+0x8c>
 800bd24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d008      	beq.n	800bd3c <lwip_sendto+0x8c>
 800bd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd2c:	785b      	ldrb	r3, [r3, #1]
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d104      	bne.n	800bd3c <lwip_sendto+0x8c>
 800bd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd34:	f003 0303 	and.w	r3, r3, #3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d014      	beq.n	800bd66 <lwip_sendto+0xb6>
 800bd3c:	4b32      	ldr	r3, [pc, #200]	; (800be08 <lwip_sendto+0x158>)
 800bd3e:	f240 6252 	movw	r2, #1618	; 0x652
 800bd42:	4932      	ldr	r1, [pc, #200]	; (800be0c <lwip_sendto+0x15c>)
 800bd44:	4832      	ldr	r0, [pc, #200]	; (800be10 <lwip_sendto+0x160>)
 800bd46:	f00f fde3 	bl	801b910 <iprintf>
 800bd4a:	f06f 000f 	mvn.w	r0, #15
 800bd4e:	f7ff f97d 	bl	800b04c <err_to_errno>
 800bd52:	62b8      	str	r0, [r7, #40]	; 0x28
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <lwip_sendto+0xb0>
 800bd5a:	4a2a      	ldr	r2, [pc, #168]	; (800be04 <lwip_sendto+0x154>)
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5e:	6013      	str	r3, [r2, #0]
 800bd60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd64:	e049      	b.n	800bdfa <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	617b      	str	r3, [r7, #20]
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800bd6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00a      	beq.n	800bd8a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800bd74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	61bb      	str	r3, [r7, #24]
 800bd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd7c:	885b      	ldrh	r3, [r3, #2]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 fc88 	bl	800c694 <lwip_htons>
 800bd84:	4603      	mov	r3, r0
 800bd86:	86bb      	strh	r3, [r7, #52]	; 0x34
 800bd88:	e003      	b.n	800bd92 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800bd8e:	2300      	movs	r3, #0
 800bd90:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800bd92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bd94:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800bd96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd98:	f107 0310 	add.w	r3, r7, #16
 800bd9c:	68b9      	ldr	r1, [r7, #8]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7ff f9ba 	bl	800b118 <netbuf_ref>
 800bda4:	4603      	mov	r3, r0
 800bda6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800bdaa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10a      	bne.n	800bdc8 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f107 0210 	add.w	r2, r7, #16
 800bdba:	4611      	mov	r1, r2
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fd fb29 	bl	8009414 <netconn_send>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800bdc8:	f107 0310 	add.w	r3, r7, #16
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7ff f97b 	bl	800b0c8 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800bdd2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff f938 	bl	800b04c <err_to_errno>
 800bddc:	6278      	str	r0, [r7, #36]	; 0x24
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <lwip_sendto+0x13a>
 800bde4:	4a07      	ldr	r2, [pc, #28]	; (800be04 <lwip_sendto+0x154>)
 800bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800bdea:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <lwip_sendto+0x146>
 800bdf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bdf4:	e001      	b.n	800bdfa <lwip_sendto+0x14a>
 800bdf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3738      	adds	r7, #56	; 0x38
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	200106a4 	.word	0x200106a4
 800be08:	0801d738 	.word	0x0801d738
 800be0c:	0801da18 	.word	0x0801da18
 800be10:	0801d78c 	.word	0x0801d78c

0800be14 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	2b03      	cmp	r3, #3
 800be24:	d009      	beq.n	800be3a <lwip_socket+0x26>
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2b03      	cmp	r3, #3
 800be2a:	dc23      	bgt.n	800be74 <lwip_socket+0x60>
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d019      	beq.n	800be66 <lwip_socket+0x52>
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2b02      	cmp	r3, #2
 800be36:	d009      	beq.n	800be4c <lwip_socket+0x38>
 800be38:	e01c      	b.n	800be74 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	4a22      	ldr	r2, [pc, #136]	; (800bec8 <lwip_socket+0xb4>)
 800be40:	4619      	mov	r1, r3
 800be42:	2040      	movs	r0, #64	; 0x40
 800be44:	f7fc ff60 	bl	8008d08 <netconn_new_with_proto_and_callback>
 800be48:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800be4a:	e019      	b.n	800be80 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b88      	cmp	r3, #136	; 0x88
 800be50:	d101      	bne.n	800be56 <lwip_socket+0x42>
 800be52:	2321      	movs	r3, #33	; 0x21
 800be54:	e000      	b.n	800be58 <lwip_socket+0x44>
 800be56:	2320      	movs	r3, #32
 800be58:	4a1b      	ldr	r2, [pc, #108]	; (800bec8 <lwip_socket+0xb4>)
 800be5a:	2100      	movs	r1, #0
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fc ff53 	bl	8008d08 <netconn_new_with_proto_and_callback>
 800be62:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800be64:	e00c      	b.n	800be80 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800be66:	4a18      	ldr	r2, [pc, #96]	; (800bec8 <lwip_socket+0xb4>)
 800be68:	2100      	movs	r1, #0
 800be6a:	2010      	movs	r0, #16
 800be6c:	f7fc ff4c 	bl	8008d08 <netconn_new_with_proto_and_callback>
 800be70:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800be72:	e005      	b.n	800be80 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800be74:	4b15      	ldr	r3, [pc, #84]	; (800becc <lwip_socket+0xb8>)
 800be76:	2216      	movs	r2, #22
 800be78:	601a      	str	r2, [r3, #0]
      return -1;
 800be7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be7e:	e01e      	b.n	800bebe <lwip_socket+0xaa>
  }

  if (!conn) {
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d105      	bne.n	800be92 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800be86:	4b11      	ldr	r3, [pc, #68]	; (800becc <lwip_socket+0xb8>)
 800be88:	2269      	movs	r2, #105	; 0x69
 800be8a:	601a      	str	r2, [r3, #0]
    return -1;
 800be8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be90:	e015      	b.n	800bebe <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800be92:	2100      	movs	r1, #0
 800be94:	6978      	ldr	r0, [r7, #20]
 800be96:	f7ff f9df 	bl	800b258 <alloc_socket>
 800be9a:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bea2:	d108      	bne.n	800beb6 <lwip_socket+0xa2>
    netconn_delete(conn);
 800bea4:	6978      	ldr	r0, [r7, #20]
 800bea6:	f7fc ffcd 	bl	8008e44 <netconn_delete>
    set_errno(ENFILE);
 800beaa:	4b08      	ldr	r3, [pc, #32]	; (800becc <lwip_socket+0xb8>)
 800beac:	2217      	movs	r2, #23
 800beae:	601a      	str	r2, [r3, #0]
    return -1;
 800beb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800beb4:	e003      	b.n	800bebe <lwip_socket+0xaa>
  }
  conn->socket = i;
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800bebc:	693b      	ldr	r3, [r7, #16]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3718      	adds	r7, #24
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	0800bf59 	.word	0x0800bf59
 800becc:	200106a4 	.word	0x200106a4

0800bed0 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800bede:	2300      	movs	r3, #0
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	e02c      	b.n	800bf3e <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	695a      	ldr	r2, [r3, #20]
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	00db      	lsls	r3, r3, #3
 800beec:	4413      	add	r3, r2
 800beee:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d11e      	bne.n	800bf38 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d009      	beq.n	800bf14 <lwip_poll_should_wake+0x44>
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	f003 0301 	and.w	r3, r3, #1
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d001      	beq.n	800bf14 <lwip_poll_should_wake+0x44>
        return 1;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e01a      	b.n	800bf4a <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d009      	beq.n	800bf2e <lwip_poll_should_wake+0x5e>
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	f003 0302 	and.w	r3, r3, #2
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d001      	beq.n	800bf2e <lwip_poll_should_wake+0x5e>
        return 1;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e00d      	b.n	800bf4a <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800bf2e:	6a3b      	ldr	r3, [r7, #32]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e008      	b.n	800bf4a <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	617b      	str	r3, [r7, #20]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d3cd      	bcc.n	800bee4 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	371c      	adds	r7, #28
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
	...

0800bf58 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b08a      	sub	sp, #40	; 0x28
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	70fb      	strb	r3, [r7, #3]
 800bf64:	4613      	mov	r3, r2
 800bf66:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f000 80a4 	beq.w	800c0b8 <event_callback+0x160>
    s = conn->socket;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800bf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	da18      	bge.n	800bfae <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800bf7c:	f00d fdc8 	bl	8019b10 <sys_arch_protect>
 800bf80:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	da0b      	bge.n	800bfa2 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800bf8a:	78fb      	ldrb	r3, [r7, #3]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d104      	bne.n	800bf9a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	1e5a      	subs	r2, r3, #1
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800bf9a:	69f8      	ldr	r0, [r7, #28]
 800bf9c:	f00d fdc6 	bl	8019b2c <sys_arch_unprotect>
        return;
 800bfa0:	e08d      	b.n	800c0be <event_callback+0x166>
      }
      s = conn->socket;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800bfa8:	69f8      	ldr	r0, [r7, #28]
 800bfaa:	f00d fdbf 	bl	8019b2c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800bfae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfb0:	f7ff f93a 	bl	800b228 <get_socket>
 800bfb4:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d07f      	beq.n	800c0bc <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800bfc0:	f00d fda6 	bl	8019b10 <sys_arch_protect>
 800bfc4:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800bfc6:	78fb      	ldrb	r3, [r7, #3]
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	d83e      	bhi.n	800c04a <event_callback+0xf2>
 800bfcc:	a201      	add	r2, pc, #4	; (adr r2, 800bfd4 <event_callback+0x7c>)
 800bfce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd2:	bf00      	nop
 800bfd4:	0800bfe9 	.word	0x0800bfe9
 800bfd8:	0800c00b 	.word	0x0800c00b
 800bfdc:	0800c023 	.word	0x0800c023
 800bfe0:	0800c037 	.word	0x0800c037
 800bfe4:	0800c043 	.word	0x0800c043
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	3301      	adds	r3, #1
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	b21a      	sxth	r2, r3
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c000:	2b01      	cmp	r3, #1
 800c002:	dd2a      	ble.n	800c05a <event_callback+0x102>
        check_waiters = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	623b      	str	r3, [r7, #32]
      }
      break;
 800c008:	e027      	b.n	800c05a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c010:	b29b      	uxth	r3, r3
 800c012:	3b01      	subs	r3, #1
 800c014:	b29b      	uxth	r3, r3
 800c016:	b21a      	sxth	r2, r3
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	623b      	str	r3, [r7, #32]
      break;
 800c020:	e01c      	b.n	800c05c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	895b      	ldrh	r3, [r3, #10]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <event_callback+0xd6>
        check_waiters = 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	2201      	movs	r2, #1
 800c032:	815a      	strh	r2, [r3, #10]
      break;
 800c034:	e012      	b.n	800c05c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	2200      	movs	r2, #0
 800c03a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	623b      	str	r3, [r7, #32]
      break;
 800c040:	e00c      	b.n	800c05c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	2201      	movs	r2, #1
 800c046:	819a      	strh	r2, [r3, #12]
      break;
 800c048:	e008      	b.n	800c05c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800c04a:	4b1e      	ldr	r3, [pc, #120]	; (800c0c4 <event_callback+0x16c>)
 800c04c:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800c050:	491d      	ldr	r1, [pc, #116]	; (800c0c8 <event_callback+0x170>)
 800c052:	481e      	ldr	r0, [pc, #120]	; (800c0cc <event_callback+0x174>)
 800c054:	f00f fc5c 	bl	801b910 <iprintf>
      break;
 800c058:	e000      	b.n	800c05c <event_callback+0x104>
      break;
 800c05a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	7b9b      	ldrb	r3, [r3, #14]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d025      	beq.n	800c0b0 <event_callback+0x158>
 800c064:	6a3b      	ldr	r3, [r7, #32]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d022      	beq.n	800c0b0 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	bfcc      	ite	gt
 800c074:	2301      	movgt	r3, #1
 800c076:	2300      	movle	r3, #0
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	895b      	ldrh	r3, [r3, #10]
 800c080:	2b00      	cmp	r3, #0
 800c082:	bf14      	ite	ne
 800c084:	2301      	movne	r3, #1
 800c086:	2300      	moveq	r3, #0
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	899b      	ldrh	r3, [r3, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	bf14      	ite	ne
 800c094:	2301      	movne	r3, #1
 800c096:	2300      	moveq	r3, #0
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800c09c:	69f8      	ldr	r0, [r7, #28]
 800c09e:	f00d fd45 	bl	8019b2c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	693a      	ldr	r2, [r7, #16]
 800c0a6:	6979      	ldr	r1, [r7, #20]
 800c0a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0aa:	f000 f811 	bl	800c0d0 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c0ae:	e006      	b.n	800c0be <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c0b0:	69f8      	ldr	r0, [r7, #28]
 800c0b2:	f00d fd3b 	bl	8019b2c <sys_arch_unprotect>
 800c0b6:	e002      	b.n	800c0be <event_callback+0x166>
    return;
 800c0b8:	bf00      	nop
 800c0ba:	e000      	b.n	800c0be <event_callback+0x166>
      return;
 800c0bc:	bf00      	nop
  }
  done_socket(sock);
}
 800c0be:	3728      	adds	r7, #40	; 0x28
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	0801d738 	.word	0x0801d738
 800c0c8:	0801dab4 	.word	0x0801dab4
 800c0cc:	0801d78c 	.word	0x0801d78c

0800c0d0 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af02      	add	r7, sp, #8
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
 800c0dc:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c0de:	4b3e      	ldr	r3, [pc, #248]	; (800c1d8 <select_check_waiters+0x108>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	617b      	str	r3, [r7, #20]
 800c0e4:	e06f      	b.n	800c1c6 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d168      	bne.n	800c1c0 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d009      	beq.n	800c10e <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	68f9      	ldr	r1, [r7, #12]
 800c104:	6978      	ldr	r0, [r7, #20]
 800c106:	f7ff fee3 	bl	800bed0 <lwip_poll_should_wake>
 800c10a:	6138      	str	r0, [r7, #16]
 800c10c:	e04d      	b.n	800c1aa <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d014      	beq.n	800c13e <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d010      	beq.n	800c13e <select_check_waiters+0x6e>
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	0952      	lsrs	r2, r2, #5
 800c124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	f002 021f 	and.w	r2, r2, #31
 800c12e:	2101      	movs	r1, #1
 800c130:	fa01 f202 	lsl.w	r2, r1, r2
 800c134:	4013      	ands	r3, r2
 800c136:	2b00      	cmp	r3, #0
 800c138:	d001      	beq.n	800c13e <select_check_waiters+0x6e>
            do_signal = 1;
 800c13a:	2301      	movs	r3, #1
 800c13c:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d017      	beq.n	800c174 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d114      	bne.n	800c174 <select_check_waiters+0xa4>
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d010      	beq.n	800c174 <select_check_waiters+0xa4>
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	0952      	lsrs	r2, r2, #5
 800c15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	f002 021f 	and.w	r2, r2, #31
 800c164:	2101      	movs	r1, #1
 800c166:	fa01 f202 	lsl.w	r2, r1, r2
 800c16a:	4013      	ands	r3, r2
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d001      	beq.n	800c174 <select_check_waiters+0xa4>
            do_signal = 1;
 800c170:	2301      	movs	r3, #1
 800c172:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d017      	beq.n	800c1aa <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d114      	bne.n	800c1aa <select_check_waiters+0xda>
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d010      	beq.n	800c1aa <select_check_waiters+0xda>
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	691b      	ldr	r3, [r3, #16]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	0952      	lsrs	r2, r2, #5
 800c190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	f002 021f 	and.w	r2, r2, #31
 800c19a:	2101      	movs	r1, #1
 800c19c:	fa01 f202 	lsl.w	r2, r1, r2
 800c1a0:	4013      	ands	r3, r2
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <select_check_waiters+0xda>
            do_signal = 1;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d007      	beq.n	800c1c0 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	3320      	adds	r3, #32
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f00d fc04 	bl	80199c8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	617b      	str	r3, [r7, #20]
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d18c      	bne.n	800c0e6 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800c1cc:	bf00      	nop
 800c1ce:	bf00      	nop
 800c1d0:	3718      	adds	r7, #24
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20008a8c 	.word	0x20008a8c

0800c1dc <lwip_ioctl>:
  return err;
}

int
lwip_ioctl(int s, long cmd, void *argp)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b08c      	sub	sp, #48	; 0x30
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f7ff f81d 	bl	800b228 <get_socket>
 800c1ee:	6278      	str	r0, [r7, #36]	; 0x24
  u8_t val;
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d102      	bne.n	800c1fc <lwip_ioctl+0x20>
    return -1;
 800c1f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1fa:	e089      	b.n	800c310 <lwip_ioctl+0x134>
  }

  switch (cmd) {
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	4a46      	ldr	r2, [pc, #280]	; (800c318 <lwip_ioctl+0x13c>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d048      	beq.n	800c296 <lwip_ioctl+0xba>
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	4a45      	ldr	r2, [pc, #276]	; (800c31c <lwip_ioctl+0x140>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d176      	bne.n	800c2fa <lwip_ioctl+0x11e>
#if LWIP_SO_RCVBUF || LWIP_FIONREAD_LINUXMODE
    case FIONREAD:
      if (!argp) {
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10a      	bne.n	800c228 <lwip_ioctl+0x4c>
        sock_set_errno(sock, EINVAL);
 800c212:	2316      	movs	r3, #22
 800c214:	61bb      	str	r3, [r7, #24]
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d002      	beq.n	800c222 <lwip_ioctl+0x46>
 800c21c:	4a40      	ldr	r2, [pc, #256]	; (800c320 <lwip_ioctl+0x144>)
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	6013      	str	r3, [r2, #0]
        done_socket(sock);
        return -1;
 800c222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c226:	e073      	b.n	800c310 <lwip_ioctl+0x134>
      }
#endif /* LWIP_FIONREAD_LINUXMODE */

#if LWIP_SO_RCVBUF
      /* we come here if either LWIP_FIONREAD_LINUXMODE==0 or this is a TCP socket */
      SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
 800c228:	f00d fc72 	bl	8019b10 <sys_arch_protect>
 800c22c:	6238      	str	r0, [r7, #32]
 800c22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6a1b      	ldr	r3, [r3, #32]
 800c234:	62bb      	str	r3, [r7, #40]	; 0x28
 800c236:	6a38      	ldr	r0, [r7, #32]
 800c238:	f00d fc78 	bl	8019b2c <sys_arch_unprotect>
      if (recv_avail < 0) {
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	2b00      	cmp	r3, #0
 800c240:	da01      	bge.n	800c246 <lwip_ioctl+0x6a>
        recv_avail = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Check if there is data left from the last recv operation. /maq 041215 */
      if (sock->lastdata.netbuf) {
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d016      	beq.n	800c27c <lwip_ioctl+0xa0>
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c258:	2b10      	cmp	r3, #16
 800c25a:	d107      	bne.n	800c26c <lwip_ioctl+0x90>
          recv_avail += sock->lastdata.pbuf->tot_len;
 800c25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	891b      	ldrh	r3, [r3, #8]
 800c262:	461a      	mov	r2, r3
 800c264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c266:	4413      	add	r3, r2
 800c268:	62bb      	str	r3, [r7, #40]	; 0x28
 800c26a:	e007      	b.n	800c27c <lwip_ioctl+0xa0>
        } else {
          recv_avail += sock->lastdata.netbuf->p->tot_len;
 800c26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	891b      	ldrh	r3, [r3, #8]
 800c274:	461a      	mov	r2, r3
 800c276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c278:	4413      	add	r3, r2
 800c27a:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
      *((int *)argp) = recv_avail;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c280:	601a      	str	r2, [r3, #0]

      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONREAD, %p) = %"U16_F"\n", s, argp, *((u16_t *)argp)));
      sock_set_errno(sock, 0);
 800c282:	2300      	movs	r3, #0
 800c284:	61fb      	str	r3, [r7, #28]
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <lwip_ioctl+0xb6>
 800c28c:	4a24      	ldr	r2, [pc, #144]	; (800c320 <lwip_ioctl+0x144>)
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return 0;
 800c292:	2300      	movs	r3, #0
 800c294:	e03c      	b.n	800c310 <lwip_ioctl+0x134>
      break;
#endif /* LWIP_SO_RCVBUF */
#endif /* LWIP_SO_RCVBUF || LWIP_FIONREAD_LINUXMODE */

    case (long)FIONBIO:
      val = 0;
 800c296:	2300      	movs	r3, #0
 800c298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (argp && *(int *)argp) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d006      	beq.n	800c2b0 <lwip_ioctl+0xd4>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <lwip_ioctl+0xd4>
        val = 1;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
      netconn_set_nonblocking(sock->conn, val);
 800c2b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <lwip_ioctl+0xf4>
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f042 0202 	orr.w	r2, r2, #2
 800c2c8:	b2d2      	uxtb	r2, r2
 800c2ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c2ce:	e00a      	b.n	800c2e6 <lwip_ioctl+0x10a>
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f022 0202 	bic.w	r2, r2, #2
 800c2e0:	b2d2      	uxtb	r2, r2
 800c2e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
      sock_set_errno(sock, 0);
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	617b      	str	r3, [r7, #20]
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d002      	beq.n	800c2f6 <lwip_ioctl+0x11a>
 800c2f0:	4a0b      	ldr	r2, [pc, #44]	; (800c320 <lwip_ioctl+0x144>)
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	e00a      	b.n	800c310 <lwip_ioctl+0x134>

    default:
      break;
 800c2fa:	bf00      	nop
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
 800c2fc:	2326      	movs	r3, #38	; 0x26
 800c2fe:	613b      	str	r3, [r7, #16]
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <lwip_ioctl+0x130>
 800c306:	4a06      	ldr	r2, [pc, #24]	; (800c320 <lwip_ioctl+0x144>)
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return -1;
 800c30c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c310:	4618      	mov	r0, r3
 800c312:	3730      	adds	r7, #48	; 0x30
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	8004667e 	.word	0x8004667e
 800c31c:	4004667f 	.word	0x4004667f
 800c320:	200106a4 	.word	0x200106a4

0800c324 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c32e:	f008 f9bf 	bl	80146b0 <sys_timeouts_sleeptime>
 800c332:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c33a:	d10b      	bne.n	800c354 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c33c:	4813      	ldr	r0, [pc, #76]	; (800c38c <tcpip_timeouts_mbox_fetch+0x68>)
 800c33e:	f00d fbb4 	bl	8019aaa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c342:	2200      	movs	r2, #0
 800c344:	6839      	ldr	r1, [r7, #0]
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f00d fa6c 	bl	8019824 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c34c:	480f      	ldr	r0, [pc, #60]	; (800c38c <tcpip_timeouts_mbox_fetch+0x68>)
 800c34e:	f00d fb9d 	bl	8019a8c <sys_mutex_lock>
    return;
 800c352:	e018      	b.n	800c386 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d102      	bne.n	800c360 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c35a:	f008 f96f 	bl	801463c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c35e:	e7e6      	b.n	800c32e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c360:	480a      	ldr	r0, [pc, #40]	; (800c38c <tcpip_timeouts_mbox_fetch+0x68>)
 800c362:	f00d fba2 	bl	8019aaa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	6839      	ldr	r1, [r7, #0]
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f00d fa5a 	bl	8019824 <sys_arch_mbox_fetch>
 800c370:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c372:	4806      	ldr	r0, [pc, #24]	; (800c38c <tcpip_timeouts_mbox_fetch+0x68>)
 800c374:	f00d fb8a 	bl	8019a8c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c37e:	d102      	bne.n	800c386 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c380:	f008 f95c 	bl	801463c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c384:	e7d3      	b.n	800c32e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c386:	3710      	adds	r7, #16
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	2000cf08 	.word	0x2000cf08

0800c390 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c398:	4810      	ldr	r0, [pc, #64]	; (800c3dc <tcpip_thread+0x4c>)
 800c39a:	f00d fb77 	bl	8019a8c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c39e:	4b10      	ldr	r3, [pc, #64]	; (800c3e0 <tcpip_thread+0x50>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d005      	beq.n	800c3b2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c3a6:	4b0e      	ldr	r3, [pc, #56]	; (800c3e0 <tcpip_thread+0x50>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a0e      	ldr	r2, [pc, #56]	; (800c3e4 <tcpip_thread+0x54>)
 800c3ac:	6812      	ldr	r2, [r2, #0]
 800c3ae:	4610      	mov	r0, r2
 800c3b0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c3b2:	f107 030c 	add.w	r3, r7, #12
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	480b      	ldr	r0, [pc, #44]	; (800c3e8 <tcpip_thread+0x58>)
 800c3ba:	f7ff ffb3 	bl	800c324 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d106      	bne.n	800c3d2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c3c4:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <tcpip_thread+0x5c>)
 800c3c6:	2291      	movs	r2, #145	; 0x91
 800c3c8:	4909      	ldr	r1, [pc, #36]	; (800c3f0 <tcpip_thread+0x60>)
 800c3ca:	480a      	ldr	r0, [pc, #40]	; (800c3f4 <tcpip_thread+0x64>)
 800c3cc:	f00f faa0 	bl	801b910 <iprintf>
      continue;
 800c3d0:	e003      	b.n	800c3da <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 f80f 	bl	800c3f8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c3da:	e7ea      	b.n	800c3b2 <tcpip_thread+0x22>
 800c3dc:	2000cf08 	.word	0x2000cf08
 800c3e0:	20008a90 	.word	0x20008a90
 800c3e4:	20008a94 	.word	0x20008a94
 800c3e8:	20008a98 	.word	0x20008a98
 800c3ec:	0801db08 	.word	0x0801db08
 800c3f0:	0801db38 	.word	0x0801db38
 800c3f4:	0801db58 	.word	0x0801db58

0800c3f8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	2b02      	cmp	r3, #2
 800c406:	d026      	beq.n	800c456 <tcpip_thread_handle_msg+0x5e>
 800c408:	2b02      	cmp	r3, #2
 800c40a:	dc2b      	bgt.n	800c464 <tcpip_thread_handle_msg+0x6c>
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <tcpip_thread_handle_msg+0x1e>
 800c410:	2b01      	cmp	r3, #1
 800c412:	d015      	beq.n	800c440 <tcpip_thread_handle_msg+0x48>
 800c414:	e026      	b.n	800c464 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	6850      	ldr	r0, [r2, #4]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	6892      	ldr	r2, [r2, #8]
 800c422:	4611      	mov	r1, r2
 800c424:	4798      	blx	r3
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d004      	beq.n	800c436 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	4618      	mov	r0, r3
 800c432:	f001 fd19 	bl	800de68 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c436:	6879      	ldr	r1, [r7, #4]
 800c438:	2009      	movs	r0, #9
 800c43a:	f000 fe33 	bl	800d0a4 <memp_free>
      break;
 800c43e:	e018      	b.n	800c472 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	6892      	ldr	r2, [r2, #8]
 800c448:	4610      	mov	r0, r2
 800c44a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c44c:	6879      	ldr	r1, [r7, #4]
 800c44e:	2008      	movs	r0, #8
 800c450:	f000 fe28 	bl	800d0a4 <memp_free>
      break;
 800c454:	e00d      	b.n	800c472 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	6892      	ldr	r2, [r2, #8]
 800c45e:	4610      	mov	r0, r2
 800c460:	4798      	blx	r3
      break;
 800c462:	e006      	b.n	800c472 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c464:	4b05      	ldr	r3, [pc, #20]	; (800c47c <tcpip_thread_handle_msg+0x84>)
 800c466:	22cf      	movs	r2, #207	; 0xcf
 800c468:	4905      	ldr	r1, [pc, #20]	; (800c480 <tcpip_thread_handle_msg+0x88>)
 800c46a:	4806      	ldr	r0, [pc, #24]	; (800c484 <tcpip_thread_handle_msg+0x8c>)
 800c46c:	f00f fa50 	bl	801b910 <iprintf>
      break;
 800c470:	bf00      	nop
  }
}
 800c472:	bf00      	nop
 800c474:	3708      	adds	r7, #8
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	0801db08 	.word	0x0801db08
 800c480:	0801db38 	.word	0x0801db38
 800c484:	0801db58 	.word	0x0801db58

0800c488 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b086      	sub	sp, #24
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c494:	481a      	ldr	r0, [pc, #104]	; (800c500 <tcpip_inpkt+0x78>)
 800c496:	f00d fa20 	bl	80198da <sys_mbox_valid>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d105      	bne.n	800c4ac <tcpip_inpkt+0x24>
 800c4a0:	4b18      	ldr	r3, [pc, #96]	; (800c504 <tcpip_inpkt+0x7c>)
 800c4a2:	22fc      	movs	r2, #252	; 0xfc
 800c4a4:	4918      	ldr	r1, [pc, #96]	; (800c508 <tcpip_inpkt+0x80>)
 800c4a6:	4819      	ldr	r0, [pc, #100]	; (800c50c <tcpip_inpkt+0x84>)
 800c4a8:	f00f fa32 	bl	801b910 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c4ac:	2009      	movs	r0, #9
 800c4ae:	f000 fda7 	bl	800d000 <memp_malloc>
 800c4b2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d102      	bne.n	800c4c0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c4ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4be:	e01a      	b.n	800c4f6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c4d8:	6979      	ldr	r1, [r7, #20]
 800c4da:	4809      	ldr	r0, [pc, #36]	; (800c500 <tcpip_inpkt+0x78>)
 800c4dc:	f00d f988 	bl	80197f0 <sys_mbox_trypost>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d006      	beq.n	800c4f4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c4e6:	6979      	ldr	r1, [r7, #20]
 800c4e8:	2009      	movs	r0, #9
 800c4ea:	f000 fddb 	bl	800d0a4 <memp_free>
    return ERR_MEM;
 800c4ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4f2:	e000      	b.n	800c4f6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c4f4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3718      	adds	r7, #24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	20008a98 	.word	0x20008a98
 800c504:	0801db08 	.word	0x0801db08
 800c508:	0801db80 	.word	0x0801db80
 800c50c:	0801db58 	.word	0x0801db58

0800c510 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c520:	f003 0318 	and.w	r3, r3, #24
 800c524:	2b00      	cmp	r3, #0
 800c526:	d006      	beq.n	800c536 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c528:	4a08      	ldr	r2, [pc, #32]	; (800c54c <tcpip_input+0x3c>)
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff ffab 	bl	800c488 <tcpip_inpkt>
 800c532:	4603      	mov	r3, r0
 800c534:	e005      	b.n	800c542 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c536:	4a06      	ldr	r2, [pc, #24]	; (800c550 <tcpip_input+0x40>)
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7ff ffa4 	bl	800c488 <tcpip_inpkt>
 800c540:	4603      	mov	r3, r0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	080195dd 	.word	0x080195dd
 800c550:	08018239 	.word	0x08018239

0800c554 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c55e:	4819      	ldr	r0, [pc, #100]	; (800c5c4 <tcpip_try_callback+0x70>)
 800c560:	f00d f9bb 	bl	80198da <sys_mbox_valid>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d106      	bne.n	800c578 <tcpip_try_callback+0x24>
 800c56a:	4b17      	ldr	r3, [pc, #92]	; (800c5c8 <tcpip_try_callback+0x74>)
 800c56c:	f240 125d 	movw	r2, #349	; 0x15d
 800c570:	4916      	ldr	r1, [pc, #88]	; (800c5cc <tcpip_try_callback+0x78>)
 800c572:	4817      	ldr	r0, [pc, #92]	; (800c5d0 <tcpip_try_callback+0x7c>)
 800c574:	f00f f9cc 	bl	801b910 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c578:	2008      	movs	r0, #8
 800c57a:	f000 fd41 	bl	800d000 <memp_malloc>
 800c57e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d102      	bne.n	800c58c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c58a:	e017      	b.n	800c5bc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2201      	movs	r2, #1
 800c590:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c59e:	68f9      	ldr	r1, [r7, #12]
 800c5a0:	4808      	ldr	r0, [pc, #32]	; (800c5c4 <tcpip_try_callback+0x70>)
 800c5a2:	f00d f925 	bl	80197f0 <sys_mbox_trypost>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d006      	beq.n	800c5ba <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c5ac:	68f9      	ldr	r1, [r7, #12]
 800c5ae:	2008      	movs	r0, #8
 800c5b0:	f000 fd78 	bl	800d0a4 <memp_free>
    return ERR_MEM;
 800c5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5b8:	e000      	b.n	800c5bc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20008a98 	.word	0x20008a98
 800c5c8:	0801db08 	.word	0x0801db08
 800c5cc:	0801db80 	.word	0x0801db80
 800c5d0:	0801db58 	.word	0x0801db58

0800c5d4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c5e0:	4806      	ldr	r0, [pc, #24]	; (800c5fc <tcpip_send_msg_wait_sem+0x28>)
 800c5e2:	f00d fa53 	bl	8019a8c <sys_mutex_lock>
  fn(apimsg);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	68b8      	ldr	r0, [r7, #8]
 800c5ea:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c5ec:	4803      	ldr	r0, [pc, #12]	; (800c5fc <tcpip_send_msg_wait_sem+0x28>)
 800c5ee:	f00d fa5c 	bl	8019aaa <sys_mutex_unlock>
  return ERR_OK;
 800c5f2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	2000cf08 	.word	0x2000cf08

0800c600 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af02      	add	r7, sp, #8
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c60a:	f000 f871 	bl	800c6f0 <lwip_init>

  tcpip_init_done = initfunc;
 800c60e:	4a17      	ldr	r2, [pc, #92]	; (800c66c <tcpip_init+0x6c>)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c614:	4a16      	ldr	r2, [pc, #88]	; (800c670 <tcpip_init+0x70>)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c61a:	2106      	movs	r1, #6
 800c61c:	4815      	ldr	r0, [pc, #84]	; (800c674 <tcpip_init+0x74>)
 800c61e:	f00d f8b3 	bl	8019788 <sys_mbox_new>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d006      	beq.n	800c636 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c628:	4b13      	ldr	r3, [pc, #76]	; (800c678 <tcpip_init+0x78>)
 800c62a:	f240 2261 	movw	r2, #609	; 0x261
 800c62e:	4913      	ldr	r1, [pc, #76]	; (800c67c <tcpip_init+0x7c>)
 800c630:	4813      	ldr	r0, [pc, #76]	; (800c680 <tcpip_init+0x80>)
 800c632:	f00f f96d 	bl	801b910 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c636:	4813      	ldr	r0, [pc, #76]	; (800c684 <tcpip_init+0x84>)
 800c638:	f00d fa0c 	bl	8019a54 <sys_mutex_new>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d006      	beq.n	800c650 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c642:	4b0d      	ldr	r3, [pc, #52]	; (800c678 <tcpip_init+0x78>)
 800c644:	f240 2265 	movw	r2, #613	; 0x265
 800c648:	490f      	ldr	r1, [pc, #60]	; (800c688 <tcpip_init+0x88>)
 800c64a:	480d      	ldr	r0, [pc, #52]	; (800c680 <tcpip_init+0x80>)
 800c64c:	f00f f960 	bl	801b910 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c650:	2300      	movs	r3, #0
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c658:	2200      	movs	r2, #0
 800c65a:	490c      	ldr	r1, [pc, #48]	; (800c68c <tcpip_init+0x8c>)
 800c65c:	480c      	ldr	r0, [pc, #48]	; (800c690 <tcpip_init+0x90>)
 800c65e:	f00d fa31 	bl	8019ac4 <sys_thread_new>
}
 800c662:	bf00      	nop
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	20008a90 	.word	0x20008a90
 800c670:	20008a94 	.word	0x20008a94
 800c674:	20008a98 	.word	0x20008a98
 800c678:	0801db08 	.word	0x0801db08
 800c67c:	0801db90 	.word	0x0801db90
 800c680:	0801db58 	.word	0x0801db58
 800c684:	2000cf08 	.word	0x2000cf08
 800c688:	0801dbb4 	.word	0x0801dbb4
 800c68c:	0800c391 	.word	0x0800c391
 800c690:	0801dbd8 	.word	0x0801dbd8

0800c694 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c69e:	88fb      	ldrh	r3, [r7, #6]
 800c6a0:	021b      	lsls	r3, r3, #8
 800c6a2:	b21a      	sxth	r2, r3
 800c6a4:	88fb      	ldrh	r3, [r7, #6]
 800c6a6:	0a1b      	lsrs	r3, r3, #8
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	b21b      	sxth	r3, r3
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	b21b      	sxth	r3, r3
 800c6b0:	b29b      	uxth	r3, r3
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b083      	sub	sp, #12
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	061a      	lsls	r2, r3, #24
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	021b      	lsls	r3, r3, #8
 800c6ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6d2:	431a      	orrs	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	0a1b      	lsrs	r3, r3, #8
 800c6d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c6dc:	431a      	orrs	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	0e1b      	lsrs	r3, r3, #24
 800c6e2:	4313      	orrs	r3, r2
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	370c      	adds	r7, #12
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c6fa:	f00d f99d 	bl	8019a38 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c6fe:	f000 f8d5 	bl	800c8ac <mem_init>
  memp_init();
 800c702:	f000 fc31 	bl	800cf68 <memp_init>
  pbuf_init();
  netif_init();
 800c706:	f000 fcf7 	bl	800d0f8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c70a:	f008 f809 	bl	8014720 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c70e:	f001 fe55 	bl	800e3bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c712:	f007 ff4b 	bl	80145ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
	...

0800c720 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c72a:	4b05      	ldr	r3, [pc, #20]	; (800c740 <ptr_to_mem+0x20>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	88fb      	ldrh	r3, [r7, #6]
 800c730:	4413      	add	r3, r2
}
 800c732:	4618      	mov	r0, r3
 800c734:	370c      	adds	r7, #12
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	20008a9c 	.word	0x20008a9c

0800c744 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c74c:	4b05      	ldr	r3, [pc, #20]	; (800c764 <mem_to_ptr+0x20>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	b29b      	uxth	r3, r3
}
 800c756:	4618      	mov	r0, r3
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	20008a9c 	.word	0x20008a9c

0800c768 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c768:	b590      	push	{r4, r7, lr}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c770:	4b45      	ldr	r3, [pc, #276]	; (800c888 <plug_holes+0x120>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	429a      	cmp	r2, r3
 800c778:	d206      	bcs.n	800c788 <plug_holes+0x20>
 800c77a:	4b44      	ldr	r3, [pc, #272]	; (800c88c <plug_holes+0x124>)
 800c77c:	f240 12df 	movw	r2, #479	; 0x1df
 800c780:	4943      	ldr	r1, [pc, #268]	; (800c890 <plug_holes+0x128>)
 800c782:	4844      	ldr	r0, [pc, #272]	; (800c894 <plug_holes+0x12c>)
 800c784:	f00f f8c4 	bl	801b910 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c788:	4b43      	ldr	r3, [pc, #268]	; (800c898 <plug_holes+0x130>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d306      	bcc.n	800c7a0 <plug_holes+0x38>
 800c792:	4b3e      	ldr	r3, [pc, #248]	; (800c88c <plug_holes+0x124>)
 800c794:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c798:	4940      	ldr	r1, [pc, #256]	; (800c89c <plug_holes+0x134>)
 800c79a:	483e      	ldr	r0, [pc, #248]	; (800c894 <plug_holes+0x12c>)
 800c79c:	f00f f8b8 	bl	801b910 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	791b      	ldrb	r3, [r3, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d006      	beq.n	800c7b6 <plug_holes+0x4e>
 800c7a8:	4b38      	ldr	r3, [pc, #224]	; (800c88c <plug_holes+0x124>)
 800c7aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c7ae:	493c      	ldr	r1, [pc, #240]	; (800c8a0 <plug_holes+0x138>)
 800c7b0:	4838      	ldr	r0, [pc, #224]	; (800c894 <plug_holes+0x12c>)
 800c7b2:	f00f f8ad 	bl	801b910 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	881b      	ldrh	r3, [r3, #0]
 800c7ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7be:	d906      	bls.n	800c7ce <plug_holes+0x66>
 800c7c0:	4b32      	ldr	r3, [pc, #200]	; (800c88c <plug_holes+0x124>)
 800c7c2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c7c6:	4937      	ldr	r1, [pc, #220]	; (800c8a4 <plug_holes+0x13c>)
 800c7c8:	4832      	ldr	r0, [pc, #200]	; (800c894 <plug_holes+0x12c>)
 800c7ca:	f00f f8a1 	bl	801b910 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	881b      	ldrh	r3, [r3, #0]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff ffa4 	bl	800c720 <ptr_to_mem>
 800c7d8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d024      	beq.n	800c82c <plug_holes+0xc4>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	791b      	ldrb	r3, [r3, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d120      	bne.n	800c82c <plug_holes+0xc4>
 800c7ea:	4b2b      	ldr	r3, [pc, #172]	; (800c898 <plug_holes+0x130>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d01b      	beq.n	800c82c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c7f4:	4b2c      	ldr	r3, [pc, #176]	; (800c8a8 <plug_holes+0x140>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d102      	bne.n	800c804 <plug_holes+0x9c>
      lfree = mem;
 800c7fe:	4a2a      	ldr	r2, [pc, #168]	; (800c8a8 <plug_holes+0x140>)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	881a      	ldrh	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c814:	d00a      	beq.n	800c82c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	881b      	ldrh	r3, [r3, #0]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7ff ff80 	bl	800c720 <ptr_to_mem>
 800c820:	4604      	mov	r4, r0
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7ff ff8e 	bl	800c744 <mem_to_ptr>
 800c828:	4603      	mov	r3, r0
 800c82a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	885b      	ldrh	r3, [r3, #2]
 800c830:	4618      	mov	r0, r3
 800c832:	f7ff ff75 	bl	800c720 <ptr_to_mem>
 800c836:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d01f      	beq.n	800c880 <plug_holes+0x118>
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	791b      	ldrb	r3, [r3, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d11b      	bne.n	800c880 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c848:	4b17      	ldr	r3, [pc, #92]	; (800c8a8 <plug_holes+0x140>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d102      	bne.n	800c858 <plug_holes+0xf0>
      lfree = pmem;
 800c852:	4a15      	ldr	r2, [pc, #84]	; (800c8a8 <plug_holes+0x140>)
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	881a      	ldrh	r2, [r3, #0]
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c868:	d00a      	beq.n	800c880 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	881b      	ldrh	r3, [r3, #0]
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff ff56 	bl	800c720 <ptr_to_mem>
 800c874:	4604      	mov	r4, r0
 800c876:	68b8      	ldr	r0, [r7, #8]
 800c878:	f7ff ff64 	bl	800c744 <mem_to_ptr>
 800c87c:	4603      	mov	r3, r0
 800c87e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c880:	bf00      	nop
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	bd90      	pop	{r4, r7, pc}
 800c888:	20008a9c 	.word	0x20008a9c
 800c88c:	0801dbe8 	.word	0x0801dbe8
 800c890:	0801dc18 	.word	0x0801dc18
 800c894:	0801dc30 	.word	0x0801dc30
 800c898:	20008aa0 	.word	0x20008aa0
 800c89c:	0801dc58 	.word	0x0801dc58
 800c8a0:	0801dc74 	.word	0x0801dc74
 800c8a4:	0801dc90 	.word	0x0801dc90
 800c8a8:	20008aa8 	.word	0x20008aa8

0800c8ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c8b2:	4b1f      	ldr	r3, [pc, #124]	; (800c930 <mem_init+0x84>)
 800c8b4:	3303      	adds	r3, #3
 800c8b6:	f023 0303 	bic.w	r3, r3, #3
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	4b1d      	ldr	r3, [pc, #116]	; (800c934 <mem_init+0x88>)
 800c8be:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c8c0:	4b1c      	ldr	r3, [pc, #112]	; (800c934 <mem_init+0x88>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c8cc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c8da:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c8de:	f7ff ff1f 	bl	800c720 <ptr_to_mem>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	4a14      	ldr	r2, [pc, #80]	; (800c938 <mem_init+0x8c>)
 800c8e6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c8e8:	4b13      	ldr	r3, [pc, #76]	; (800c938 <mem_init+0x8c>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c8f0:	4b11      	ldr	r3, [pc, #68]	; (800c938 <mem_init+0x8c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c8f8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c8fa:	4b0f      	ldr	r3, [pc, #60]	; (800c938 <mem_init+0x8c>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c902:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c904:	4b0b      	ldr	r3, [pc, #44]	; (800c934 <mem_init+0x88>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a0c      	ldr	r2, [pc, #48]	; (800c93c <mem_init+0x90>)
 800c90a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c90c:	480c      	ldr	r0, [pc, #48]	; (800c940 <mem_init+0x94>)
 800c90e:	f00d f8a1 	bl	8019a54 <sys_mutex_new>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d006      	beq.n	800c926 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c918:	4b0a      	ldr	r3, [pc, #40]	; (800c944 <mem_init+0x98>)
 800c91a:	f240 221f 	movw	r2, #543	; 0x21f
 800c91e:	490a      	ldr	r1, [pc, #40]	; (800c948 <mem_init+0x9c>)
 800c920:	480a      	ldr	r0, [pc, #40]	; (800c94c <mem_init+0xa0>)
 800c922:	f00e fff5 	bl	801b910 <iprintf>
  }
}
 800c926:	bf00      	nop
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	2000cf24 	.word	0x2000cf24
 800c934:	20008a9c 	.word	0x20008a9c
 800c938:	20008aa0 	.word	0x20008aa0
 800c93c:	20008aa8 	.word	0x20008aa8
 800c940:	20008aa4 	.word	0x20008aa4
 800c944:	0801dbe8 	.word	0x0801dbe8
 800c948:	0801dcbc 	.word	0x0801dcbc
 800c94c:	0801dc30 	.word	0x0801dc30

0800c950 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff fef3 	bl	800c744 <mem_to_ptr>
 800c95e:	4603      	mov	r3, r0
 800c960:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff feda 	bl	800c720 <ptr_to_mem>
 800c96c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	885b      	ldrh	r3, [r3, #2]
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff fed4 	bl	800c720 <ptr_to_mem>
 800c978:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c982:	d818      	bhi.n	800c9b6 <mem_link_valid+0x66>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	885b      	ldrh	r3, [r3, #2]
 800c988:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c98c:	d813      	bhi.n	800c9b6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c992:	8afa      	ldrh	r2, [r7, #22]
 800c994:	429a      	cmp	r2, r3
 800c996:	d004      	beq.n	800c9a2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	881b      	ldrh	r3, [r3, #0]
 800c99c:	8afa      	ldrh	r2, [r7, #22]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d109      	bne.n	800c9b6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c9a2:	4b08      	ldr	r3, [pc, #32]	; (800c9c4 <mem_link_valid+0x74>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d006      	beq.n	800c9ba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	885b      	ldrh	r3, [r3, #2]
 800c9b0:	8afa      	ldrh	r2, [r7, #22]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d001      	beq.n	800c9ba <mem_link_valid+0x6a>
    return 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e000      	b.n	800c9bc <mem_link_valid+0x6c>
  }
  return 1;
 800c9ba:	2301      	movs	r3, #1
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3718      	adds	r7, #24
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	20008aa0 	.word	0x20008aa0

0800c9c8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b088      	sub	sp, #32
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d070      	beq.n	800cab8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f003 0303 	and.w	r3, r3, #3
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00d      	beq.n	800c9fc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c9e0:	4b37      	ldr	r3, [pc, #220]	; (800cac0 <mem_free+0xf8>)
 800c9e2:	f240 2273 	movw	r2, #627	; 0x273
 800c9e6:	4937      	ldr	r1, [pc, #220]	; (800cac4 <mem_free+0xfc>)
 800c9e8:	4837      	ldr	r0, [pc, #220]	; (800cac8 <mem_free+0x100>)
 800c9ea:	f00e ff91 	bl	801b910 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9ee:	f00d f88f 	bl	8019b10 <sys_arch_protect>
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f00d f899 	bl	8019b2c <sys_arch_unprotect>
    return;
 800c9fa:	e05e      	b.n	800caba <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	3b08      	subs	r3, #8
 800ca00:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ca02:	4b32      	ldr	r3, [pc, #200]	; (800cacc <mem_free+0x104>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	69fa      	ldr	r2, [r7, #28]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d306      	bcc.n	800ca1a <mem_free+0x52>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f103 020c 	add.w	r2, r3, #12
 800ca12:	4b2f      	ldr	r3, [pc, #188]	; (800cad0 <mem_free+0x108>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d90d      	bls.n	800ca36 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ca1a:	4b29      	ldr	r3, [pc, #164]	; (800cac0 <mem_free+0xf8>)
 800ca1c:	f240 227f 	movw	r2, #639	; 0x27f
 800ca20:	492c      	ldr	r1, [pc, #176]	; (800cad4 <mem_free+0x10c>)
 800ca22:	4829      	ldr	r0, [pc, #164]	; (800cac8 <mem_free+0x100>)
 800ca24:	f00e ff74 	bl	801b910 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca28:	f00d f872 	bl	8019b10 <sys_arch_protect>
 800ca2c:	6138      	str	r0, [r7, #16]
 800ca2e:	6938      	ldr	r0, [r7, #16]
 800ca30:	f00d f87c 	bl	8019b2c <sys_arch_unprotect>
    return;
 800ca34:	e041      	b.n	800caba <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ca36:	4828      	ldr	r0, [pc, #160]	; (800cad8 <mem_free+0x110>)
 800ca38:	f00d f828 	bl	8019a8c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	791b      	ldrb	r3, [r3, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d110      	bne.n	800ca66 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ca44:	4b1e      	ldr	r3, [pc, #120]	; (800cac0 <mem_free+0xf8>)
 800ca46:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ca4a:	4924      	ldr	r1, [pc, #144]	; (800cadc <mem_free+0x114>)
 800ca4c:	481e      	ldr	r0, [pc, #120]	; (800cac8 <mem_free+0x100>)
 800ca4e:	f00e ff5f 	bl	801b910 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca52:	4821      	ldr	r0, [pc, #132]	; (800cad8 <mem_free+0x110>)
 800ca54:	f00d f829 	bl	8019aaa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca58:	f00d f85a 	bl	8019b10 <sys_arch_protect>
 800ca5c:	6178      	str	r0, [r7, #20]
 800ca5e:	6978      	ldr	r0, [r7, #20]
 800ca60:	f00d f864 	bl	8019b2c <sys_arch_unprotect>
    return;
 800ca64:	e029      	b.n	800caba <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ca66:	69f8      	ldr	r0, [r7, #28]
 800ca68:	f7ff ff72 	bl	800c950 <mem_link_valid>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d110      	bne.n	800ca94 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ca72:	4b13      	ldr	r3, [pc, #76]	; (800cac0 <mem_free+0xf8>)
 800ca74:	f240 2295 	movw	r2, #661	; 0x295
 800ca78:	4919      	ldr	r1, [pc, #100]	; (800cae0 <mem_free+0x118>)
 800ca7a:	4813      	ldr	r0, [pc, #76]	; (800cac8 <mem_free+0x100>)
 800ca7c:	f00e ff48 	bl	801b910 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca80:	4815      	ldr	r0, [pc, #84]	; (800cad8 <mem_free+0x110>)
 800ca82:	f00d f812 	bl	8019aaa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca86:	f00d f843 	bl	8019b10 <sys_arch_protect>
 800ca8a:	61b8      	str	r0, [r7, #24]
 800ca8c:	69b8      	ldr	r0, [r7, #24]
 800ca8e:	f00d f84d 	bl	8019b2c <sys_arch_unprotect>
    return;
 800ca92:	e012      	b.n	800caba <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	2200      	movs	r2, #0
 800ca98:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ca9a:	4b12      	ldr	r3, [pc, #72]	; (800cae4 <mem_free+0x11c>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	69fa      	ldr	r2, [r7, #28]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d202      	bcs.n	800caaa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800caa4:	4a0f      	ldr	r2, [pc, #60]	; (800cae4 <mem_free+0x11c>)
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800caaa:	69f8      	ldr	r0, [r7, #28]
 800caac:	f7ff fe5c 	bl	800c768 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cab0:	4809      	ldr	r0, [pc, #36]	; (800cad8 <mem_free+0x110>)
 800cab2:	f00c fffa 	bl	8019aaa <sys_mutex_unlock>
 800cab6:	e000      	b.n	800caba <mem_free+0xf2>
    return;
 800cab8:	bf00      	nop
}
 800caba:	3720      	adds	r7, #32
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	0801dbe8 	.word	0x0801dbe8
 800cac4:	0801dcd8 	.word	0x0801dcd8
 800cac8:	0801dc30 	.word	0x0801dc30
 800cacc:	20008a9c 	.word	0x20008a9c
 800cad0:	20008aa0 	.word	0x20008aa0
 800cad4:	0801dcfc 	.word	0x0801dcfc
 800cad8:	20008aa4 	.word	0x20008aa4
 800cadc:	0801dd18 	.word	0x0801dd18
 800cae0:	0801dd40 	.word	0x0801dd40
 800cae4:	20008aa8 	.word	0x20008aa8

0800cae8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b088      	sub	sp, #32
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	460b      	mov	r3, r1
 800caf2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800caf4:	887b      	ldrh	r3, [r7, #2]
 800caf6:	3303      	adds	r3, #3
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	f023 0303 	bic.w	r3, r3, #3
 800cafe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cb00:	8bfb      	ldrh	r3, [r7, #30]
 800cb02:	2b0b      	cmp	r3, #11
 800cb04:	d801      	bhi.n	800cb0a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cb06:	230c      	movs	r3, #12
 800cb08:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cb0a:	8bfb      	ldrh	r3, [r7, #30]
 800cb0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb10:	d803      	bhi.n	800cb1a <mem_trim+0x32>
 800cb12:	8bfa      	ldrh	r2, [r7, #30]
 800cb14:	887b      	ldrh	r3, [r7, #2]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d201      	bcs.n	800cb1e <mem_trim+0x36>
    return NULL;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e0d8      	b.n	800ccd0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cb1e:	4b6e      	ldr	r3, [pc, #440]	; (800ccd8 <mem_trim+0x1f0>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d304      	bcc.n	800cb32 <mem_trim+0x4a>
 800cb28:	4b6c      	ldr	r3, [pc, #432]	; (800ccdc <mem_trim+0x1f4>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d306      	bcc.n	800cb40 <mem_trim+0x58>
 800cb32:	4b6b      	ldr	r3, [pc, #428]	; (800cce0 <mem_trim+0x1f8>)
 800cb34:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cb38:	496a      	ldr	r1, [pc, #424]	; (800cce4 <mem_trim+0x1fc>)
 800cb3a:	486b      	ldr	r0, [pc, #428]	; (800cce8 <mem_trim+0x200>)
 800cb3c:	f00e fee8 	bl	801b910 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cb40:	4b65      	ldr	r3, [pc, #404]	; (800ccd8 <mem_trim+0x1f0>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d304      	bcc.n	800cb54 <mem_trim+0x6c>
 800cb4a:	4b64      	ldr	r3, [pc, #400]	; (800ccdc <mem_trim+0x1f4>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d307      	bcc.n	800cb64 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb54:	f00c ffdc 	bl	8019b10 <sys_arch_protect>
 800cb58:	60b8      	str	r0, [r7, #8]
 800cb5a:	68b8      	ldr	r0, [r7, #8]
 800cb5c:	f00c ffe6 	bl	8019b2c <sys_arch_unprotect>
    return rmem;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	e0b5      	b.n	800ccd0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3b08      	subs	r3, #8
 800cb68:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cb6a:	69b8      	ldr	r0, [r7, #24]
 800cb6c:	f7ff fdea 	bl	800c744 <mem_to_ptr>
 800cb70:	4603      	mov	r3, r0
 800cb72:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	881a      	ldrh	r2, [r3, #0]
 800cb78:	8afb      	ldrh	r3, [r7, #22]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	3b08      	subs	r3, #8
 800cb80:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cb82:	8bfa      	ldrh	r2, [r7, #30]
 800cb84:	8abb      	ldrh	r3, [r7, #20]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d906      	bls.n	800cb98 <mem_trim+0xb0>
 800cb8a:	4b55      	ldr	r3, [pc, #340]	; (800cce0 <mem_trim+0x1f8>)
 800cb8c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cb90:	4956      	ldr	r1, [pc, #344]	; (800ccec <mem_trim+0x204>)
 800cb92:	4855      	ldr	r0, [pc, #340]	; (800cce8 <mem_trim+0x200>)
 800cb94:	f00e febc 	bl	801b910 <iprintf>
  if (newsize > size) {
 800cb98:	8bfa      	ldrh	r2, [r7, #30]
 800cb9a:	8abb      	ldrh	r3, [r7, #20]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d901      	bls.n	800cba4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cba0:	2300      	movs	r3, #0
 800cba2:	e095      	b.n	800ccd0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cba4:	8bfa      	ldrh	r2, [r7, #30]
 800cba6:	8abb      	ldrh	r3, [r7, #20]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d101      	bne.n	800cbb0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	e08f      	b.n	800ccd0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cbb0:	484f      	ldr	r0, [pc, #316]	; (800ccf0 <mem_trim+0x208>)
 800cbb2:	f00c ff6b 	bl	8019a8c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	881b      	ldrh	r3, [r3, #0]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7ff fdb0 	bl	800c720 <ptr_to_mem>
 800cbc0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	791b      	ldrb	r3, [r3, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d13f      	bne.n	800cc4a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	881b      	ldrh	r3, [r3, #0]
 800cbce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbd2:	d106      	bne.n	800cbe2 <mem_trim+0xfa>
 800cbd4:	4b42      	ldr	r3, [pc, #264]	; (800cce0 <mem_trim+0x1f8>)
 800cbd6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cbda:	4946      	ldr	r1, [pc, #280]	; (800ccf4 <mem_trim+0x20c>)
 800cbdc:	4842      	ldr	r0, [pc, #264]	; (800cce8 <mem_trim+0x200>)
 800cbde:	f00e fe97 	bl	801b910 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	881b      	ldrh	r3, [r3, #0]
 800cbe6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cbe8:	8afa      	ldrh	r2, [r7, #22]
 800cbea:	8bfb      	ldrh	r3, [r7, #30]
 800cbec:	4413      	add	r3, r2
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cbf4:	4b40      	ldr	r3, [pc, #256]	; (800ccf8 <mem_trim+0x210>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d106      	bne.n	800cc0c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cbfe:	89fb      	ldrh	r3, [r7, #14]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff fd8d 	bl	800c720 <ptr_to_mem>
 800cc06:	4603      	mov	r3, r0
 800cc08:	4a3b      	ldr	r2, [pc, #236]	; (800ccf8 <mem_trim+0x210>)
 800cc0a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cc0c:	89fb      	ldrh	r3, [r7, #14]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7ff fd86 	bl	800c720 <ptr_to_mem>
 800cc14:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	89ba      	ldrh	r2, [r7, #12]
 800cc20:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	8afa      	ldrh	r2, [r7, #22]
 800cc26:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	89fa      	ldrh	r2, [r7, #14]
 800cc2c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	881b      	ldrh	r3, [r3, #0]
 800cc32:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc36:	d047      	beq.n	800ccc8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	881b      	ldrh	r3, [r3, #0]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7ff fd6f 	bl	800c720 <ptr_to_mem>
 800cc42:	4602      	mov	r2, r0
 800cc44:	89fb      	ldrh	r3, [r7, #14]
 800cc46:	8053      	strh	r3, [r2, #2]
 800cc48:	e03e      	b.n	800ccc8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cc4a:	8bfb      	ldrh	r3, [r7, #30]
 800cc4c:	f103 0214 	add.w	r2, r3, #20
 800cc50:	8abb      	ldrh	r3, [r7, #20]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d838      	bhi.n	800ccc8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc56:	8afa      	ldrh	r2, [r7, #22]
 800cc58:	8bfb      	ldrh	r3, [r7, #30]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	3308      	adds	r3, #8
 800cc60:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	881b      	ldrh	r3, [r3, #0]
 800cc66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc6a:	d106      	bne.n	800cc7a <mem_trim+0x192>
 800cc6c:	4b1c      	ldr	r3, [pc, #112]	; (800cce0 <mem_trim+0x1f8>)
 800cc6e:	f240 3216 	movw	r2, #790	; 0x316
 800cc72:	4920      	ldr	r1, [pc, #128]	; (800ccf4 <mem_trim+0x20c>)
 800cc74:	481c      	ldr	r0, [pc, #112]	; (800cce8 <mem_trim+0x200>)
 800cc76:	f00e fe4b 	bl	801b910 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cc7a:	89fb      	ldrh	r3, [r7, #14]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff fd4f 	bl	800c720 <ptr_to_mem>
 800cc82:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cc84:	4b1c      	ldr	r3, [pc, #112]	; (800ccf8 <mem_trim+0x210>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d202      	bcs.n	800cc94 <mem_trim+0x1ac>
      lfree = mem2;
 800cc8e:	4a1a      	ldr	r2, [pc, #104]	; (800ccf8 <mem_trim+0x210>)
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	2200      	movs	r2, #0
 800cc98:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	881a      	ldrh	r2, [r3, #0]
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	8afa      	ldrh	r2, [r7, #22]
 800cca6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	89fa      	ldrh	r2, [r7, #14]
 800ccac:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	881b      	ldrh	r3, [r3, #0]
 800ccb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ccb6:	d007      	beq.n	800ccc8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7ff fd2f 	bl	800c720 <ptr_to_mem>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	89fb      	ldrh	r3, [r7, #14]
 800ccc6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ccc8:	4809      	ldr	r0, [pc, #36]	; (800ccf0 <mem_trim+0x208>)
 800ccca:	f00c feee 	bl	8019aaa <sys_mutex_unlock>
  return rmem;
 800ccce:	687b      	ldr	r3, [r7, #4]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3720      	adds	r7, #32
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	20008a9c 	.word	0x20008a9c
 800ccdc:	20008aa0 	.word	0x20008aa0
 800cce0:	0801dbe8 	.word	0x0801dbe8
 800cce4:	0801dd74 	.word	0x0801dd74
 800cce8:	0801dc30 	.word	0x0801dc30
 800ccec:	0801dd8c 	.word	0x0801dd8c
 800ccf0:	20008aa4 	.word	0x20008aa4
 800ccf4:	0801ddac 	.word	0x0801ddac
 800ccf8:	20008aa8 	.word	0x20008aa8

0800ccfc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b088      	sub	sp, #32
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	4603      	mov	r3, r0
 800cd04:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cd06:	88fb      	ldrh	r3, [r7, #6]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d101      	bne.n	800cd10 <mem_malloc+0x14>
    return NULL;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	e0e2      	b.n	800ced6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cd10:	88fb      	ldrh	r3, [r7, #6]
 800cd12:	3303      	adds	r3, #3
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	f023 0303 	bic.w	r3, r3, #3
 800cd1a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cd1c:	8bbb      	ldrh	r3, [r7, #28]
 800cd1e:	2b0b      	cmp	r3, #11
 800cd20:	d801      	bhi.n	800cd26 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cd22:	230c      	movs	r3, #12
 800cd24:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cd26:	8bbb      	ldrh	r3, [r7, #28]
 800cd28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd2c:	d803      	bhi.n	800cd36 <mem_malloc+0x3a>
 800cd2e:	8bba      	ldrh	r2, [r7, #28]
 800cd30:	88fb      	ldrh	r3, [r7, #6]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d201      	bcs.n	800cd3a <mem_malloc+0x3e>
    return NULL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	e0cd      	b.n	800ced6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cd3a:	4869      	ldr	r0, [pc, #420]	; (800cee0 <mem_malloc+0x1e4>)
 800cd3c:	f00c fea6 	bl	8019a8c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cd40:	4b68      	ldr	r3, [pc, #416]	; (800cee4 <mem_malloc+0x1e8>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7ff fcfd 	bl	800c744 <mem_to_ptr>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	83fb      	strh	r3, [r7, #30]
 800cd4e:	e0b7      	b.n	800cec0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cd50:	8bfb      	ldrh	r3, [r7, #30]
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff fce4 	bl	800c720 <ptr_to_mem>
 800cd58:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	791b      	ldrb	r3, [r3, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f040 80a7 	bne.w	800ceb2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	881b      	ldrh	r3, [r3, #0]
 800cd68:	461a      	mov	r2, r3
 800cd6a:	8bfb      	ldrh	r3, [r7, #30]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	f1a3 0208 	sub.w	r2, r3, #8
 800cd72:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cd74:	429a      	cmp	r2, r3
 800cd76:	f0c0 809c 	bcc.w	800ceb2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	881b      	ldrh	r3, [r3, #0]
 800cd7e:	461a      	mov	r2, r3
 800cd80:	8bfb      	ldrh	r3, [r7, #30]
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	f1a3 0208 	sub.w	r2, r3, #8
 800cd88:	8bbb      	ldrh	r3, [r7, #28]
 800cd8a:	3314      	adds	r3, #20
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d333      	bcc.n	800cdf8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cd90:	8bfa      	ldrh	r2, [r7, #30]
 800cd92:	8bbb      	ldrh	r3, [r7, #28]
 800cd94:	4413      	add	r3, r2
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	3308      	adds	r3, #8
 800cd9a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cd9c:	8a7b      	ldrh	r3, [r7, #18]
 800cd9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cda2:	d106      	bne.n	800cdb2 <mem_malloc+0xb6>
 800cda4:	4b50      	ldr	r3, [pc, #320]	; (800cee8 <mem_malloc+0x1ec>)
 800cda6:	f240 3287 	movw	r2, #903	; 0x387
 800cdaa:	4950      	ldr	r1, [pc, #320]	; (800ceec <mem_malloc+0x1f0>)
 800cdac:	4850      	ldr	r0, [pc, #320]	; (800cef0 <mem_malloc+0x1f4>)
 800cdae:	f00e fdaf 	bl	801b910 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cdb2:	8a7b      	ldrh	r3, [r7, #18]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7ff fcb3 	bl	800c720 <ptr_to_mem>
 800cdba:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	881a      	ldrh	r2, [r3, #0]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	8bfa      	ldrh	r2, [r7, #30]
 800cdce:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	8a7a      	ldrh	r2, [r7, #18]
 800cdd4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	881b      	ldrh	r3, [r3, #0]
 800cde0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cde4:	d00b      	beq.n	800cdfe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7ff fc98 	bl	800c720 <ptr_to_mem>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	8a7b      	ldrh	r3, [r7, #18]
 800cdf4:	8053      	strh	r3, [r2, #2]
 800cdf6:	e002      	b.n	800cdfe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cdfe:	4b39      	ldr	r3, [pc, #228]	; (800cee4 <mem_malloc+0x1e8>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d127      	bne.n	800ce58 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ce08:	4b36      	ldr	r3, [pc, #216]	; (800cee4 <mem_malloc+0x1e8>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ce0e:	e005      	b.n	800ce1c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	881b      	ldrh	r3, [r3, #0]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff fc83 	bl	800c720 <ptr_to_mem>
 800ce1a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	791b      	ldrb	r3, [r3, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d004      	beq.n	800ce2e <mem_malloc+0x132>
 800ce24:	4b33      	ldr	r3, [pc, #204]	; (800cef4 <mem_malloc+0x1f8>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	69ba      	ldr	r2, [r7, #24]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d1f0      	bne.n	800ce10 <mem_malloc+0x114>
          }
          lfree = cur;
 800ce2e:	4a2d      	ldr	r2, [pc, #180]	; (800cee4 <mem_malloc+0x1e8>)
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ce34:	4b2b      	ldr	r3, [pc, #172]	; (800cee4 <mem_malloc+0x1e8>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	4b2e      	ldr	r3, [pc, #184]	; (800cef4 <mem_malloc+0x1f8>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d00b      	beq.n	800ce58 <mem_malloc+0x15c>
 800ce40:	4b28      	ldr	r3, [pc, #160]	; (800cee4 <mem_malloc+0x1e8>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	791b      	ldrb	r3, [r3, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d006      	beq.n	800ce58 <mem_malloc+0x15c>
 800ce4a:	4b27      	ldr	r3, [pc, #156]	; (800cee8 <mem_malloc+0x1ec>)
 800ce4c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ce50:	4929      	ldr	r1, [pc, #164]	; (800cef8 <mem_malloc+0x1fc>)
 800ce52:	4827      	ldr	r0, [pc, #156]	; (800cef0 <mem_malloc+0x1f4>)
 800ce54:	f00e fd5c 	bl	801b910 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ce58:	4821      	ldr	r0, [pc, #132]	; (800cee0 <mem_malloc+0x1e4>)
 800ce5a:	f00c fe26 	bl	8019aaa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ce5e:	8bba      	ldrh	r2, [r7, #28]
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	4413      	add	r3, r2
 800ce64:	3308      	adds	r3, #8
 800ce66:	4a23      	ldr	r2, [pc, #140]	; (800cef4 <mem_malloc+0x1f8>)
 800ce68:	6812      	ldr	r2, [r2, #0]
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d906      	bls.n	800ce7c <mem_malloc+0x180>
 800ce6e:	4b1e      	ldr	r3, [pc, #120]	; (800cee8 <mem_malloc+0x1ec>)
 800ce70:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ce74:	4921      	ldr	r1, [pc, #132]	; (800cefc <mem_malloc+0x200>)
 800ce76:	481e      	ldr	r0, [pc, #120]	; (800cef0 <mem_malloc+0x1f4>)
 800ce78:	f00e fd4a 	bl	801b910 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	f003 0303 	and.w	r3, r3, #3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d006      	beq.n	800ce94 <mem_malloc+0x198>
 800ce86:	4b18      	ldr	r3, [pc, #96]	; (800cee8 <mem_malloc+0x1ec>)
 800ce88:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ce8c:	491c      	ldr	r1, [pc, #112]	; (800cf00 <mem_malloc+0x204>)
 800ce8e:	4818      	ldr	r0, [pc, #96]	; (800cef0 <mem_malloc+0x1f4>)
 800ce90:	f00e fd3e 	bl	801b910 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	f003 0303 	and.w	r3, r3, #3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d006      	beq.n	800ceac <mem_malloc+0x1b0>
 800ce9e:	4b12      	ldr	r3, [pc, #72]	; (800cee8 <mem_malloc+0x1ec>)
 800cea0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cea4:	4917      	ldr	r1, [pc, #92]	; (800cf04 <mem_malloc+0x208>)
 800cea6:	4812      	ldr	r0, [pc, #72]	; (800cef0 <mem_malloc+0x1f4>)
 800cea8:	f00e fd32 	bl	801b910 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	3308      	adds	r3, #8
 800ceb0:	e011      	b.n	800ced6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ceb2:	8bfb      	ldrh	r3, [r7, #30]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7ff fc33 	bl	800c720 <ptr_to_mem>
 800ceba:	4603      	mov	r3, r0
 800cebc:	881b      	ldrh	r3, [r3, #0]
 800cebe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cec0:	8bfa      	ldrh	r2, [r7, #30]
 800cec2:	8bbb      	ldrh	r3, [r7, #28]
 800cec4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cec8:	429a      	cmp	r2, r3
 800ceca:	f4ff af41 	bcc.w	800cd50 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cece:	4804      	ldr	r0, [pc, #16]	; (800cee0 <mem_malloc+0x1e4>)
 800ced0:	f00c fdeb 	bl	8019aaa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3720      	adds	r7, #32
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	20008aa4 	.word	0x20008aa4
 800cee4:	20008aa8 	.word	0x20008aa8
 800cee8:	0801dbe8 	.word	0x0801dbe8
 800ceec:	0801ddac 	.word	0x0801ddac
 800cef0:	0801dc30 	.word	0x0801dc30
 800cef4:	20008aa0 	.word	0x20008aa0
 800cef8:	0801ddc0 	.word	0x0801ddc0
 800cefc:	0801dddc 	.word	0x0801dddc
 800cf00:	0801de0c 	.word	0x0801de0c
 800cf04:	0801de3c 	.word	0x0801de3c

0800cf08 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	2200      	movs	r2, #0
 800cf16:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	3303      	adds	r3, #3
 800cf1e:	f023 0303 	bic.w	r3, r3, #3
 800cf22:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cf24:	2300      	movs	r3, #0
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	e011      	b.n	800cf4e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	881b      	ldrh	r3, [r3, #0]
 800cf40:	461a      	mov	r2, r3
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	4413      	add	r3, r2
 800cf46:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	60fb      	str	r3, [r7, #12]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	885b      	ldrh	r3, [r3, #2]
 800cf52:	461a      	mov	r2, r3
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	4293      	cmp	r3, r2
 800cf58:	dbe7      	blt.n	800cf2a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cf5a:	bf00      	nop
 800cf5c:	bf00      	nop
 800cf5e:	3714      	adds	r7, #20
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf6e:	2300      	movs	r3, #0
 800cf70:	80fb      	strh	r3, [r7, #6]
 800cf72:	e009      	b.n	800cf88 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cf74:	88fb      	ldrh	r3, [r7, #6]
 800cf76:	4a08      	ldr	r2, [pc, #32]	; (800cf98 <memp_init+0x30>)
 800cf78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7ff ffc3 	bl	800cf08 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf82:	88fb      	ldrh	r3, [r7, #6]
 800cf84:	3301      	adds	r3, #1
 800cf86:	80fb      	strh	r3, [r7, #6]
 800cf88:	88fb      	ldrh	r3, [r7, #6]
 800cf8a:	2b0c      	cmp	r3, #12
 800cf8c:	d9f2      	bls.n	800cf74 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cf8e:	bf00      	nop
 800cf90:	bf00      	nop
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	08020b04 	.word	0x08020b04

0800cf9c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cfa4:	f00c fdb4 	bl	8019b10 <sys_arch_protect>
 800cfa8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d015      	beq.n	800cfe4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	6812      	ldr	r2, [r2, #0]
 800cfc0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	f003 0303 	and.w	r3, r3, #3
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d006      	beq.n	800cfda <do_memp_malloc_pool+0x3e>
 800cfcc:	4b09      	ldr	r3, [pc, #36]	; (800cff4 <do_memp_malloc_pool+0x58>)
 800cfce:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cfd2:	4909      	ldr	r1, [pc, #36]	; (800cff8 <do_memp_malloc_pool+0x5c>)
 800cfd4:	4809      	ldr	r0, [pc, #36]	; (800cffc <do_memp_malloc_pool+0x60>)
 800cfd6:	f00e fc9b 	bl	801b910 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f00c fda6 	bl	8019b2c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	e003      	b.n	800cfec <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f00c fda1 	bl	8019b2c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	0801de60 	.word	0x0801de60
 800cff8:	0801de90 	.word	0x0801de90
 800cffc:	0801deb4 	.word	0x0801deb4

0800d000 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	4603      	mov	r3, r0
 800d008:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d00a:	79fb      	ldrb	r3, [r7, #7]
 800d00c:	2b0c      	cmp	r3, #12
 800d00e:	d908      	bls.n	800d022 <memp_malloc+0x22>
 800d010:	4b0a      	ldr	r3, [pc, #40]	; (800d03c <memp_malloc+0x3c>)
 800d012:	f240 1257 	movw	r2, #343	; 0x157
 800d016:	490a      	ldr	r1, [pc, #40]	; (800d040 <memp_malloc+0x40>)
 800d018:	480a      	ldr	r0, [pc, #40]	; (800d044 <memp_malloc+0x44>)
 800d01a:	f00e fc79 	bl	801b910 <iprintf>
 800d01e:	2300      	movs	r3, #0
 800d020:	e008      	b.n	800d034 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d022:	79fb      	ldrb	r3, [r7, #7]
 800d024:	4a08      	ldr	r2, [pc, #32]	; (800d048 <memp_malloc+0x48>)
 800d026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff ffb6 	bl	800cf9c <do_memp_malloc_pool>
 800d030:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d032:	68fb      	ldr	r3, [r7, #12]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	0801de60 	.word	0x0801de60
 800d040:	0801def0 	.word	0x0801def0
 800d044:	0801deb4 	.word	0x0801deb4
 800d048:	08020b04 	.word	0x08020b04

0800d04c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	f003 0303 	and.w	r3, r3, #3
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d006      	beq.n	800d06e <do_memp_free_pool+0x22>
 800d060:	4b0d      	ldr	r3, [pc, #52]	; (800d098 <do_memp_free_pool+0x4c>)
 800d062:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d066:	490d      	ldr	r1, [pc, #52]	; (800d09c <do_memp_free_pool+0x50>)
 800d068:	480d      	ldr	r0, [pc, #52]	; (800d0a0 <do_memp_free_pool+0x54>)
 800d06a:	f00e fc51 	bl	801b910 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d072:	f00c fd4d 	bl	8019b10 <sys_arch_protect>
 800d076:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d08a:	68b8      	ldr	r0, [r7, #8]
 800d08c:	f00c fd4e 	bl	8019b2c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d090:	bf00      	nop
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	0801de60 	.word	0x0801de60
 800d09c:	0801df10 	.word	0x0801df10
 800d0a0:	0801deb4 	.word	0x0801deb4

0800d0a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	6039      	str	r1, [r7, #0]
 800d0ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d0b0:	79fb      	ldrb	r3, [r7, #7]
 800d0b2:	2b0c      	cmp	r3, #12
 800d0b4:	d907      	bls.n	800d0c6 <memp_free+0x22>
 800d0b6:	4b0c      	ldr	r3, [pc, #48]	; (800d0e8 <memp_free+0x44>)
 800d0b8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d0bc:	490b      	ldr	r1, [pc, #44]	; (800d0ec <memp_free+0x48>)
 800d0be:	480c      	ldr	r0, [pc, #48]	; (800d0f0 <memp_free+0x4c>)
 800d0c0:	f00e fc26 	bl	801b910 <iprintf>
 800d0c4:	e00c      	b.n	800d0e0 <memp_free+0x3c>

  if (mem == NULL) {
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d008      	beq.n	800d0de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	4a09      	ldr	r2, [pc, #36]	; (800d0f4 <memp_free+0x50>)
 800d0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0d4:	6839      	ldr	r1, [r7, #0]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7ff ffb8 	bl	800d04c <do_memp_free_pool>
 800d0dc:	e000      	b.n	800d0e0 <memp_free+0x3c>
    return;
 800d0de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d0e0:	3708      	adds	r7, #8
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	0801de60 	.word	0x0801de60
 800d0ec:	0801df30 	.word	0x0801df30
 800d0f0:	0801deb4 	.word	0x0801deb4
 800d0f4:	08020b04 	.word	0x08020b04

0800d0f8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d0fc:	bf00      	nop
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr
	...

0800d108 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d108      	bne.n	800d12e <netif_add+0x26>
 800d11c:	4b5b      	ldr	r3, [pc, #364]	; (800d28c <netif_add+0x184>)
 800d11e:	f240 1227 	movw	r2, #295	; 0x127
 800d122:	495b      	ldr	r1, [pc, #364]	; (800d290 <netif_add+0x188>)
 800d124:	485b      	ldr	r0, [pc, #364]	; (800d294 <netif_add+0x18c>)
 800d126:	f00e fbf3 	bl	801b910 <iprintf>
 800d12a:	2300      	movs	r3, #0
 800d12c:	e0a9      	b.n	800d282 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d130:	2b00      	cmp	r3, #0
 800d132:	d108      	bne.n	800d146 <netif_add+0x3e>
 800d134:	4b55      	ldr	r3, [pc, #340]	; (800d28c <netif_add+0x184>)
 800d136:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d13a:	4957      	ldr	r1, [pc, #348]	; (800d298 <netif_add+0x190>)
 800d13c:	4855      	ldr	r0, [pc, #340]	; (800d294 <netif_add+0x18c>)
 800d13e:	f00e fbe7 	bl	801b910 <iprintf>
 800d142:	2300      	movs	r3, #0
 800d144:	e09d      	b.n	800d282 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d101      	bne.n	800d150 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d14c:	4b53      	ldr	r3, [pc, #332]	; (800d29c <netif_add+0x194>)
 800d14e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d101      	bne.n	800d15a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d156:	4b51      	ldr	r3, [pc, #324]	; (800d29c <netif_add+0x194>)
 800d158:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d101      	bne.n	800d164 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d160:	4b4e      	ldr	r3, [pc, #312]	; (800d29c <netif_add+0x194>)
 800d162:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2200      	movs	r2, #0
 800d168:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	4a49      	ldr	r2, [pc, #292]	; (800d2a0 <netif_add+0x198>)
 800d17a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2200      	movs	r2, #0
 800d186:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	3324      	adds	r3, #36	; 0x24
 800d18e:	2204      	movs	r2, #4
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f00e fbb4 	bl	801b900 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6a3a      	ldr	r2, [r7, #32]
 800d1a2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d1a4:	4b3f      	ldr	r3, [pc, #252]	; (800d2a4 <netif_add+0x19c>)
 800d1a6:	781a      	ldrb	r2, [r3, #0]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1b2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	68b9      	ldr	r1, [r7, #8]
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f000 f914 	bl	800d3e8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	4798      	blx	r3
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d001      	beq.n	800d1d0 <netif_add+0xc8>
    return NULL;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	e058      	b.n	800d282 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1d6:	2bff      	cmp	r3, #255	; 0xff
 800d1d8:	d103      	bne.n	800d1e2 <netif_add+0xda>
        netif->num = 0;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d1e6:	4b30      	ldr	r3, [pc, #192]	; (800d2a8 <netif_add+0x1a0>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	617b      	str	r3, [r7, #20]
 800d1ec:	e02b      	b.n	800d246 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d1ee:	697a      	ldr	r2, [r7, #20]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d106      	bne.n	800d204 <netif_add+0xfc>
 800d1f6:	4b25      	ldr	r3, [pc, #148]	; (800d28c <netif_add+0x184>)
 800d1f8:	f240 128b 	movw	r2, #395	; 0x18b
 800d1fc:	492b      	ldr	r1, [pc, #172]	; (800d2ac <netif_add+0x1a4>)
 800d1fe:	4825      	ldr	r0, [pc, #148]	; (800d294 <netif_add+0x18c>)
 800d200:	f00e fb86 	bl	801b910 <iprintf>
        num_netifs++;
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	3301      	adds	r3, #1
 800d208:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2bff      	cmp	r3, #255	; 0xff
 800d20e:	dd06      	ble.n	800d21e <netif_add+0x116>
 800d210:	4b1e      	ldr	r3, [pc, #120]	; (800d28c <netif_add+0x184>)
 800d212:	f240 128d 	movw	r2, #397	; 0x18d
 800d216:	4926      	ldr	r1, [pc, #152]	; (800d2b0 <netif_add+0x1a8>)
 800d218:	481e      	ldr	r0, [pc, #120]	; (800d294 <netif_add+0x18c>)
 800d21a:	f00e fb79 	bl	801b910 <iprintf>
        if (netif2->num == netif->num) {
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d108      	bne.n	800d240 <netif_add+0x138>
          netif->num++;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d234:	3301      	adds	r3, #1
 800d236:	b2da      	uxtb	r2, r3
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800d23e:	e005      	b.n	800d24c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	617b      	str	r3, [r7, #20]
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1d0      	bne.n	800d1ee <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1be      	bne.n	800d1d0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d258:	2bfe      	cmp	r3, #254	; 0xfe
 800d25a:	d103      	bne.n	800d264 <netif_add+0x15c>
    netif_num = 0;
 800d25c:	4b11      	ldr	r3, [pc, #68]	; (800d2a4 <netif_add+0x19c>)
 800d25e:	2200      	movs	r2, #0
 800d260:	701a      	strb	r2, [r3, #0]
 800d262:	e006      	b.n	800d272 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d26a:	3301      	adds	r3, #1
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	4b0d      	ldr	r3, [pc, #52]	; (800d2a4 <netif_add+0x19c>)
 800d270:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d272:	4b0d      	ldr	r3, [pc, #52]	; (800d2a8 <netif_add+0x1a0>)
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d27a:	4a0b      	ldr	r2, [pc, #44]	; (800d2a8 <netif_add+0x1a0>)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d280:	68fb      	ldr	r3, [r7, #12]
}
 800d282:	4618      	mov	r0, r3
 800d284:	3718      	adds	r7, #24
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	0801df4c 	.word	0x0801df4c
 800d290:	0801dfe0 	.word	0x0801dfe0
 800d294:	0801df9c 	.word	0x0801df9c
 800d298:	0801dffc 	.word	0x0801dffc
 800d29c:	08020b88 	.word	0x08020b88
 800d2a0:	0800d6cb 	.word	0x0800d6cb
 800d2a4:	20008ae0 	.word	0x20008ae0
 800d2a8:	20010650 	.word	0x20010650
 800d2ac:	0801e020 	.word	0x0801e020
 800d2b0:	0801e034 	.word	0x0801e034

0800d2b4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f002 fe4b 	bl	800ff5c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d2c6:	6839      	ldr	r1, [r7, #0]
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f007 ff79 	bl	80151c0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d2ce:	bf00      	nop
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
	...

0800d2d8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b086      	sub	sp, #24
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d106      	bne.n	800d2f8 <netif_do_set_ipaddr+0x20>
 800d2ea:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <netif_do_set_ipaddr+0x88>)
 800d2ec:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d2f0:	491c      	ldr	r1, [pc, #112]	; (800d364 <netif_do_set_ipaddr+0x8c>)
 800d2f2:	481d      	ldr	r0, [pc, #116]	; (800d368 <netif_do_set_ipaddr+0x90>)
 800d2f4:	f00e fb0c 	bl	801b910 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d106      	bne.n	800d30c <netif_do_set_ipaddr+0x34>
 800d2fe:	4b18      	ldr	r3, [pc, #96]	; (800d360 <netif_do_set_ipaddr+0x88>)
 800d300:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d304:	4917      	ldr	r1, [pc, #92]	; (800d364 <netif_do_set_ipaddr+0x8c>)
 800d306:	4818      	ldr	r0, [pc, #96]	; (800d368 <netif_do_set_ipaddr+0x90>)
 800d308:	f00e fb02 	bl	801b910 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	3304      	adds	r3, #4
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	429a      	cmp	r2, r3
 800d318:	d01c      	beq.n	800d354 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	3304      	adds	r3, #4
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d32a:	f107 0314 	add.w	r3, r7, #20
 800d32e:	4619      	mov	r1, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff ffbf 	bl	800d2b4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d002      	beq.n	800d342 <netif_do_set_ipaddr+0x6a>
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	e000      	b.n	800d344 <netif_do_set_ipaddr+0x6c>
 800d342:	2300      	movs	r3, #0
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d348:	2101      	movs	r1, #1
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f000 f8d2 	bl	800d4f4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d350:	2301      	movs	r3, #1
 800d352:	e000      	b.n	800d356 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	0801df4c 	.word	0x0801df4c
 800d364:	0801e064 	.word	0x0801e064
 800d368:	0801df9c 	.word	0x0801df9c

0800d36c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	3308      	adds	r3, #8
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	429a      	cmp	r2, r3
 800d384:	d00a      	beq.n	800d39c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d002      	beq.n	800d392 <netif_do_set_netmask+0x26>
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	e000      	b.n	800d394 <netif_do_set_netmask+0x28>
 800d392:	2300      	movs	r3, #0
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d398:	2301      	movs	r3, #1
 800d39a:	e000      	b.n	800d39e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr

0800d3aa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d3aa:	b480      	push	{r7}
 800d3ac:	b085      	sub	sp, #20
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	60f8      	str	r0, [r7, #12]
 800d3b2:	60b9      	str	r1, [r7, #8]
 800d3b4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	330c      	adds	r3, #12
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d00a      	beq.n	800d3da <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d002      	beq.n	800d3d0 <netif_do_set_gw+0x26>
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	e000      	b.n	800d3d2 <netif_do_set_gw+0x28>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e000      	b.n	800d3dc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3714      	adds	r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d101      	bne.n	800d408 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d404:	4b1c      	ldr	r3, [pc, #112]	; (800d478 <netif_set_addr+0x90>)
 800d406:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d40e:	4b1a      	ldr	r3, [pc, #104]	; (800d478 <netif_set_addr+0x90>)
 800d410:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d418:	4b17      	ldr	r3, [pc, #92]	; (800d478 <netif_set_addr+0x90>)
 800d41a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d003      	beq.n	800d42a <netif_set_addr+0x42>
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <netif_set_addr+0x46>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e000      	b.n	800d430 <netif_set_addr+0x48>
 800d42e:	2300      	movs	r3, #0
 800d430:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d006      	beq.n	800d446 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d438:	f107 0310 	add.w	r3, r7, #16
 800d43c:	461a      	mov	r2, r3
 800d43e:	68b9      	ldr	r1, [r7, #8]
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f7ff ff49 	bl	800d2d8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d446:	69fa      	ldr	r2, [r7, #28]
 800d448:	6879      	ldr	r1, [r7, #4]
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f7ff ff8e 	bl	800d36c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d450:	69ba      	ldr	r2, [r7, #24]
 800d452:	6839      	ldr	r1, [r7, #0]
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f7ff ffa8 	bl	800d3aa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d106      	bne.n	800d46e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d460:	f107 0310 	add.w	r3, r7, #16
 800d464:	461a      	mov	r2, r3
 800d466:	68b9      	ldr	r1, [r7, #8]
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f7ff ff35 	bl	800d2d8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d46e:	bf00      	nop
 800d470:	3720      	adds	r7, #32
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	08020b88 	.word	0x08020b88

0800d47c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d484:	4a04      	ldr	r2, [pc, #16]	; (800d498 <netif_set_default+0x1c>)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d48a:	bf00      	nop
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	20010654 	.word	0x20010654

0800d49c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d107      	bne.n	800d4ba <netif_set_up+0x1e>
 800d4aa:	4b0f      	ldr	r3, [pc, #60]	; (800d4e8 <netif_set_up+0x4c>)
 800d4ac:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d4b0:	490e      	ldr	r1, [pc, #56]	; (800d4ec <netif_set_up+0x50>)
 800d4b2:	480f      	ldr	r0, [pc, #60]	; (800d4f0 <netif_set_up+0x54>)
 800d4b4:	f00e fa2c 	bl	801b910 <iprintf>
 800d4b8:	e013      	b.n	800d4e2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d10c      	bne.n	800d4e2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d4ce:	f043 0301 	orr.w	r3, r3, #1
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d4da:	2103      	movs	r1, #3
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f809 	bl	800d4f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	0801df4c 	.word	0x0801df4c
 800d4ec:	0801e0d4 	.word	0x0801e0d4
 800d4f0:	0801df9c 	.word	0x0801df9c

0800d4f4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d106      	bne.n	800d514 <netif_issue_reports+0x20>
 800d506:	4b18      	ldr	r3, [pc, #96]	; (800d568 <netif_issue_reports+0x74>)
 800d508:	f240 326d 	movw	r2, #877	; 0x36d
 800d50c:	4917      	ldr	r1, [pc, #92]	; (800d56c <netif_issue_reports+0x78>)
 800d50e:	4818      	ldr	r0, [pc, #96]	; (800d570 <netif_issue_reports+0x7c>)
 800d510:	f00e f9fe 	bl	801b910 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d51a:	f003 0304 	and.w	r3, r3, #4
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d01e      	beq.n	800d560 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d528:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d017      	beq.n	800d560 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d530:	78fb      	ldrb	r3, [r7, #3]
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	2b00      	cmp	r3, #0
 800d538:	d013      	beq.n	800d562 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	3304      	adds	r3, #4
 800d53e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00e      	beq.n	800d562 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d54a:	f003 0308 	and.w	r3, r3, #8
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d007      	beq.n	800d562 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	3304      	adds	r3, #4
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f00a fc33 	bl	8017dc4 <etharp_request>
 800d55e:	e000      	b.n	800d562 <netif_issue_reports+0x6e>
    return;
 800d560:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	0801df4c 	.word	0x0801df4c
 800d56c:	0801e0f0 	.word	0x0801e0f0
 800d570:	0801df9c 	.word	0x0801df9c

0800d574 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d107      	bne.n	800d592 <netif_set_down+0x1e>
 800d582:	4b12      	ldr	r3, [pc, #72]	; (800d5cc <netif_set_down+0x58>)
 800d584:	f240 329b 	movw	r2, #923	; 0x39b
 800d588:	4911      	ldr	r1, [pc, #68]	; (800d5d0 <netif_set_down+0x5c>)
 800d58a:	4812      	ldr	r0, [pc, #72]	; (800d5d4 <netif_set_down+0x60>)
 800d58c:	f00e f9c0 	bl	801b910 <iprintf>
 800d590:	e019      	b.n	800d5c6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d598:	f003 0301 	and.w	r3, r3, #1
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d012      	beq.n	800d5c6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5a6:	f023 0301 	bic.w	r3, r3, #1
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5b8:	f003 0308 	and.w	r3, r3, #8
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f009 ffb9 	bl	8017538 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	0801df4c 	.word	0x0801df4c
 800d5d0:	0801e114 	.word	0x0801e114
 800d5d4:	0801df9c 	.word	0x0801df9c

0800d5d8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d107      	bne.n	800d5f6 <netif_set_link_up+0x1e>
 800d5e6:	4b15      	ldr	r3, [pc, #84]	; (800d63c <netif_set_link_up+0x64>)
 800d5e8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d5ec:	4914      	ldr	r1, [pc, #80]	; (800d640 <netif_set_link_up+0x68>)
 800d5ee:	4815      	ldr	r0, [pc, #84]	; (800d644 <netif_set_link_up+0x6c>)
 800d5f0:	f00e f98e 	bl	801b910 <iprintf>
 800d5f4:	e01e      	b.n	800d634 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5fc:	f003 0304 	and.w	r3, r3, #4
 800d600:	2b00      	cmp	r3, #0
 800d602:	d117      	bne.n	800d634 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d60a:	f043 0304 	orr.w	r3, r3, #4
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f008 f9fe 	bl	8015a18 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d61c:	2103      	movs	r1, #3
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7ff ff68 	bl	800d4f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	69db      	ldr	r3, [r3, #28]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d003      	beq.n	800d634 <netif_set_link_up+0x5c>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	69db      	ldr	r3, [r3, #28]
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	0801df4c 	.word	0x0801df4c
 800d640:	0801e134 	.word	0x0801e134
 800d644:	0801df9c 	.word	0x0801df9c

0800d648 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d107      	bne.n	800d666 <netif_set_link_down+0x1e>
 800d656:	4b11      	ldr	r3, [pc, #68]	; (800d69c <netif_set_link_down+0x54>)
 800d658:	f240 4206 	movw	r2, #1030	; 0x406
 800d65c:	4910      	ldr	r1, [pc, #64]	; (800d6a0 <netif_set_link_down+0x58>)
 800d65e:	4811      	ldr	r0, [pc, #68]	; (800d6a4 <netif_set_link_down+0x5c>)
 800d660:	f00e f956 	bl	801b910 <iprintf>
 800d664:	e017      	b.n	800d696 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d66c:	f003 0304 	and.w	r3, r3, #4
 800d670:	2b00      	cmp	r3, #0
 800d672:	d010      	beq.n	800d696 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d67a:	f023 0304 	bic.w	r3, r3, #4
 800d67e:	b2da      	uxtb	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	69db      	ldr	r3, [r3, #28]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d003      	beq.n	800d696 <netif_set_link_down+0x4e>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	0801df4c 	.word	0x0801df4c
 800d6a0:	0801e158 	.word	0x0801e158
 800d6a4:	0801df9c 	.word	0x0801df9c

0800d6a8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d002      	beq.n	800d6be <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	61da      	str	r2, [r3, #28]
  }
}
 800d6be:	bf00      	nop
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d6ca:	b480      	push	{r7}
 800d6cc:	b085      	sub	sp, #20
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	60f8      	str	r0, [r7, #12]
 800d6d2:	60b9      	str	r1, [r7, #8]
 800d6d4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d6d6:	f06f 030b 	mvn.w	r3, #11
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
	...

0800d6e8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d6f2:	79fb      	ldrb	r3, [r7, #7]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d013      	beq.n	800d720 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d6f8:	4b0d      	ldr	r3, [pc, #52]	; (800d730 <netif_get_by_index+0x48>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	60fb      	str	r3, [r7, #12]
 800d6fe:	e00c      	b.n	800d71a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d706:	3301      	adds	r3, #1
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	79fa      	ldrb	r2, [r7, #7]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d101      	bne.n	800d714 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	e006      	b.n	800d722 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	60fb      	str	r3, [r7, #12]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1ef      	bne.n	800d700 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3714      	adds	r7, #20
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	20010650 	.word	0x20010650

0800d734 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d73a:	f00c f9e9 	bl	8019b10 <sys_arch_protect>
 800d73e:	6038      	str	r0, [r7, #0]
 800d740:	4b0d      	ldr	r3, [pc, #52]	; (800d778 <pbuf_free_ooseq+0x44>)
 800d742:	2200      	movs	r2, #0
 800d744:	701a      	strb	r2, [r3, #0]
 800d746:	6838      	ldr	r0, [r7, #0]
 800d748:	f00c f9f0 	bl	8019b2c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d74c:	4b0b      	ldr	r3, [pc, #44]	; (800d77c <pbuf_free_ooseq+0x48>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	607b      	str	r3, [r7, #4]
 800d752:	e00a      	b.n	800d76a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d003      	beq.n	800d764 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f002 fc3b 	bl	800ffd8 <tcp_free_ooseq>
      return;
 800d762:	e005      	b.n	800d770 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	607b      	str	r3, [r7, #4]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1f1      	bne.n	800d754 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	20010658 	.word	0x20010658
 800d77c:	20010660 	.word	0x20010660

0800d780 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d788:	f7ff ffd4 	bl	800d734 <pbuf_free_ooseq>
}
 800d78c:	bf00      	nop
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d79a:	f00c f9b9 	bl	8019b10 <sys_arch_protect>
 800d79e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d7a0:	4b0f      	ldr	r3, [pc, #60]	; (800d7e0 <pbuf_pool_is_empty+0x4c>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d7a6:	4b0e      	ldr	r3, [pc, #56]	; (800d7e0 <pbuf_pool_is_empty+0x4c>)
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f00c f9bd 	bl	8019b2c <sys_arch_unprotect>

  if (!queued) {
 800d7b2:	78fb      	ldrb	r3, [r7, #3]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10f      	bne.n	800d7d8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	480a      	ldr	r0, [pc, #40]	; (800d7e4 <pbuf_pool_is_empty+0x50>)
 800d7bc:	f7fe feca 	bl	800c554 <tcpip_try_callback>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d008      	beq.n	800d7d8 <pbuf_pool_is_empty+0x44>
 800d7c6:	f00c f9a3 	bl	8019b10 <sys_arch_protect>
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	4b04      	ldr	r3, [pc, #16]	; (800d7e0 <pbuf_pool_is_empty+0x4c>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	701a      	strb	r2, [r3, #0]
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f00c f9aa 	bl	8019b2c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d7d8:	bf00      	nop
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	20010658 	.word	0x20010658
 800d7e4:	0800d781 	.word	0x0800d781

0800d7e8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	80fb      	strh	r3, [r7, #6]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	88fa      	ldrh	r2, [r7, #6]
 800d80e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	88ba      	ldrh	r2, [r7, #4]
 800d814:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d816:	8b3b      	ldrh	r3, [r7, #24]
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	7f3a      	ldrb	r2, [r7, #28]
 800d822:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2201      	movs	r2, #1
 800d828:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2200      	movs	r2, #0
 800d82e:	73da      	strb	r2, [r3, #15]
}
 800d830:	bf00      	nop
 800d832:	3714      	adds	r7, #20
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr

0800d83c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b08c      	sub	sp, #48	; 0x30
 800d840:	af02      	add	r7, sp, #8
 800d842:	4603      	mov	r3, r0
 800d844:	71fb      	strb	r3, [r7, #7]
 800d846:	460b      	mov	r3, r1
 800d848:	80bb      	strh	r3, [r7, #4]
 800d84a:	4613      	mov	r3, r2
 800d84c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d84e:	79fb      	ldrb	r3, [r7, #7]
 800d850:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d852:	887b      	ldrh	r3, [r7, #2]
 800d854:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d858:	d07f      	beq.n	800d95a <pbuf_alloc+0x11e>
 800d85a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d85e:	f300 80c8 	bgt.w	800d9f2 <pbuf_alloc+0x1b6>
 800d862:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d866:	d010      	beq.n	800d88a <pbuf_alloc+0x4e>
 800d868:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d86c:	f300 80c1 	bgt.w	800d9f2 <pbuf_alloc+0x1b6>
 800d870:	2b01      	cmp	r3, #1
 800d872:	d002      	beq.n	800d87a <pbuf_alloc+0x3e>
 800d874:	2b41      	cmp	r3, #65	; 0x41
 800d876:	f040 80bc 	bne.w	800d9f2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d87a:	887a      	ldrh	r2, [r7, #2]
 800d87c:	88bb      	ldrh	r3, [r7, #4]
 800d87e:	4619      	mov	r1, r3
 800d880:	2000      	movs	r0, #0
 800d882:	f000 f8d1 	bl	800da28 <pbuf_alloc_reference>
 800d886:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d888:	e0bd      	b.n	800da06 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d88a:	2300      	movs	r3, #0
 800d88c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d88e:	2300      	movs	r3, #0
 800d890:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d892:	88bb      	ldrh	r3, [r7, #4]
 800d894:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d896:	200c      	movs	r0, #12
 800d898:	f7ff fbb2 	bl	800d000 <memp_malloc>
 800d89c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d109      	bne.n	800d8b8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d8a4:	f7ff ff76 	bl	800d794 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d002      	beq.n	800d8b4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d8ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8b0:	f000 fada 	bl	800de68 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	e0a7      	b.n	800da08 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d8b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8ba:	3303      	adds	r3, #3
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	f023 0303 	bic.w	r3, r3, #3
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	8b7a      	ldrh	r2, [r7, #26]
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	bf28      	it	cs
 800d8d0:	4613      	movcs	r3, r2
 800d8d2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d8d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8d6:	3310      	adds	r3, #16
 800d8d8:	693a      	ldr	r2, [r7, #16]
 800d8da:	4413      	add	r3, r2
 800d8dc:	3303      	adds	r3, #3
 800d8de:	f023 0303 	bic.w	r3, r3, #3
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	89f9      	ldrh	r1, [r7, #14]
 800d8e6:	8b7a      	ldrh	r2, [r7, #26]
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	9301      	str	r3, [sp, #4]
 800d8ec:	887b      	ldrh	r3, [r7, #2]
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4601      	mov	r1, r0
 800d8f4:	6938      	ldr	r0, [r7, #16]
 800d8f6:	f7ff ff77 	bl	800d7e8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	f003 0303 	and.w	r3, r3, #3
 800d902:	2b00      	cmp	r3, #0
 800d904:	d006      	beq.n	800d914 <pbuf_alloc+0xd8>
 800d906:	4b42      	ldr	r3, [pc, #264]	; (800da10 <pbuf_alloc+0x1d4>)
 800d908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d90c:	4941      	ldr	r1, [pc, #260]	; (800da14 <pbuf_alloc+0x1d8>)
 800d90e:	4842      	ldr	r0, [pc, #264]	; (800da18 <pbuf_alloc+0x1dc>)
 800d910:	f00d fffe 	bl	801b910 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d914:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d916:	3303      	adds	r3, #3
 800d918:	f023 0303 	bic.w	r3, r3, #3
 800d91c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d920:	d106      	bne.n	800d930 <pbuf_alloc+0xf4>
 800d922:	4b3b      	ldr	r3, [pc, #236]	; (800da10 <pbuf_alloc+0x1d4>)
 800d924:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d928:	493c      	ldr	r1, [pc, #240]	; (800da1c <pbuf_alloc+0x1e0>)
 800d92a:	483b      	ldr	r0, [pc, #236]	; (800da18 <pbuf_alloc+0x1dc>)
 800d92c:	f00d fff0 	bl	801b910 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	2b00      	cmp	r3, #0
 800d934:	d102      	bne.n	800d93c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	627b      	str	r3, [r7, #36]	; 0x24
 800d93a:	e002      	b.n	800d942 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d946:	8b7a      	ldrh	r2, [r7, #26]
 800d948:	89fb      	ldrh	r3, [r7, #14]
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d952:	8b7b      	ldrh	r3, [r7, #26]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d19e      	bne.n	800d896 <pbuf_alloc+0x5a>
      break;
 800d958:	e055      	b.n	800da06 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d95a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d95c:	3303      	adds	r3, #3
 800d95e:	b29b      	uxth	r3, r3
 800d960:	f023 0303 	bic.w	r3, r3, #3
 800d964:	b29a      	uxth	r2, r3
 800d966:	88bb      	ldrh	r3, [r7, #4]
 800d968:	3303      	adds	r3, #3
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	f023 0303 	bic.w	r3, r3, #3
 800d970:	b29b      	uxth	r3, r3
 800d972:	4413      	add	r3, r2
 800d974:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d976:	8b3b      	ldrh	r3, [r7, #24]
 800d978:	3310      	adds	r3, #16
 800d97a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d97c:	8b3a      	ldrh	r2, [r7, #24]
 800d97e:	88bb      	ldrh	r3, [r7, #4]
 800d980:	3303      	adds	r3, #3
 800d982:	f023 0303 	bic.w	r3, r3, #3
 800d986:	429a      	cmp	r2, r3
 800d988:	d306      	bcc.n	800d998 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d98a:	8afa      	ldrh	r2, [r7, #22]
 800d98c:	88bb      	ldrh	r3, [r7, #4]
 800d98e:	3303      	adds	r3, #3
 800d990:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d994:	429a      	cmp	r2, r3
 800d996:	d201      	bcs.n	800d99c <pbuf_alloc+0x160>
        return NULL;
 800d998:	2300      	movs	r3, #0
 800d99a:	e035      	b.n	800da08 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d99c:	8afb      	ldrh	r3, [r7, #22]
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7ff f9ac 	bl	800ccfc <mem_malloc>
 800d9a4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d101      	bne.n	800d9b0 <pbuf_alloc+0x174>
        return NULL;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	e02b      	b.n	800da08 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d9b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9b2:	3310      	adds	r3, #16
 800d9b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9b6:	4413      	add	r3, r2
 800d9b8:	3303      	adds	r3, #3
 800d9ba:	f023 0303 	bic.w	r3, r3, #3
 800d9be:	4618      	mov	r0, r3
 800d9c0:	88b9      	ldrh	r1, [r7, #4]
 800d9c2:	88ba      	ldrh	r2, [r7, #4]
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	9301      	str	r3, [sp, #4]
 800d9c8:	887b      	ldrh	r3, [r7, #2]
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	4601      	mov	r1, r0
 800d9d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9d2:	f7ff ff09 	bl	800d7e8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	f003 0303 	and.w	r3, r3, #3
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d010      	beq.n	800da04 <pbuf_alloc+0x1c8>
 800d9e2:	4b0b      	ldr	r3, [pc, #44]	; (800da10 <pbuf_alloc+0x1d4>)
 800d9e4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d9e8:	490d      	ldr	r1, [pc, #52]	; (800da20 <pbuf_alloc+0x1e4>)
 800d9ea:	480b      	ldr	r0, [pc, #44]	; (800da18 <pbuf_alloc+0x1dc>)
 800d9ec:	f00d ff90 	bl	801b910 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d9f0:	e008      	b.n	800da04 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d9f2:	4b07      	ldr	r3, [pc, #28]	; (800da10 <pbuf_alloc+0x1d4>)
 800d9f4:	f240 1227 	movw	r2, #295	; 0x127
 800d9f8:	490a      	ldr	r1, [pc, #40]	; (800da24 <pbuf_alloc+0x1e8>)
 800d9fa:	4807      	ldr	r0, [pc, #28]	; (800da18 <pbuf_alloc+0x1dc>)
 800d9fc:	f00d ff88 	bl	801b910 <iprintf>
      return NULL;
 800da00:	2300      	movs	r3, #0
 800da02:	e001      	b.n	800da08 <pbuf_alloc+0x1cc>
      break;
 800da04:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800da06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3728      	adds	r7, #40	; 0x28
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	0801e17c 	.word	0x0801e17c
 800da14:	0801e1ac 	.word	0x0801e1ac
 800da18:	0801e1dc 	.word	0x0801e1dc
 800da1c:	0801e204 	.word	0x0801e204
 800da20:	0801e238 	.word	0x0801e238
 800da24:	0801e264 	.word	0x0801e264

0800da28 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af02      	add	r7, sp, #8
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	460b      	mov	r3, r1
 800da32:	807b      	strh	r3, [r7, #2]
 800da34:	4613      	mov	r3, r2
 800da36:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800da38:	883b      	ldrh	r3, [r7, #0]
 800da3a:	2b41      	cmp	r3, #65	; 0x41
 800da3c:	d009      	beq.n	800da52 <pbuf_alloc_reference+0x2a>
 800da3e:	883b      	ldrh	r3, [r7, #0]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d006      	beq.n	800da52 <pbuf_alloc_reference+0x2a>
 800da44:	4b0f      	ldr	r3, [pc, #60]	; (800da84 <pbuf_alloc_reference+0x5c>)
 800da46:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800da4a:	490f      	ldr	r1, [pc, #60]	; (800da88 <pbuf_alloc_reference+0x60>)
 800da4c:	480f      	ldr	r0, [pc, #60]	; (800da8c <pbuf_alloc_reference+0x64>)
 800da4e:	f00d ff5f 	bl	801b910 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800da52:	200b      	movs	r0, #11
 800da54:	f7ff fad4 	bl	800d000 <memp_malloc>
 800da58:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800da60:	2300      	movs	r3, #0
 800da62:	e00b      	b.n	800da7c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800da64:	8879      	ldrh	r1, [r7, #2]
 800da66:	887a      	ldrh	r2, [r7, #2]
 800da68:	2300      	movs	r3, #0
 800da6a:	9301      	str	r3, [sp, #4]
 800da6c:	883b      	ldrh	r3, [r7, #0]
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	460b      	mov	r3, r1
 800da72:	6879      	ldr	r1, [r7, #4]
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f7ff feb7 	bl	800d7e8 <pbuf_init_alloced_pbuf>
  return p;
 800da7a:	68fb      	ldr	r3, [r7, #12]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	0801e17c 	.word	0x0801e17c
 800da88:	0801e280 	.word	0x0801e280
 800da8c:	0801e1dc 	.word	0x0801e1dc

0800da90 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b088      	sub	sp, #32
 800da94:	af02      	add	r7, sp, #8
 800da96:	607b      	str	r3, [r7, #4]
 800da98:	4603      	mov	r3, r0
 800da9a:	73fb      	strb	r3, [r7, #15]
 800da9c:	460b      	mov	r3, r1
 800da9e:	81bb      	strh	r3, [r7, #12]
 800daa0:	4613      	mov	r3, r2
 800daa2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800daa4:	7bfb      	ldrb	r3, [r7, #15]
 800daa6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800daa8:	8a7b      	ldrh	r3, [r7, #18]
 800daaa:	3303      	adds	r3, #3
 800daac:	f023 0203 	bic.w	r2, r3, #3
 800dab0:	89bb      	ldrh	r3, [r7, #12]
 800dab2:	441a      	add	r2, r3
 800dab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d901      	bls.n	800dabe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800daba:	2300      	movs	r3, #0
 800dabc:	e018      	b.n	800daf0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dabe:	6a3b      	ldr	r3, [r7, #32]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d007      	beq.n	800dad4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dac4:	8a7b      	ldrh	r3, [r7, #18]
 800dac6:	3303      	adds	r3, #3
 800dac8:	f023 0303 	bic.w	r3, r3, #3
 800dacc:	6a3a      	ldr	r2, [r7, #32]
 800dace:	4413      	add	r3, r2
 800dad0:	617b      	str	r3, [r7, #20]
 800dad2:	e001      	b.n	800dad8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dad4:	2300      	movs	r3, #0
 800dad6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	89b9      	ldrh	r1, [r7, #12]
 800dadc:	89ba      	ldrh	r2, [r7, #12]
 800dade:	2302      	movs	r3, #2
 800dae0:	9301      	str	r3, [sp, #4]
 800dae2:	897b      	ldrh	r3, [r7, #10]
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	460b      	mov	r3, r1
 800dae8:	6979      	ldr	r1, [r7, #20]
 800daea:	f7ff fe7d 	bl	800d7e8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800daee:	687b      	ldr	r3, [r7, #4]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3718      	adds	r7, #24
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	460b      	mov	r3, r1
 800db02:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d106      	bne.n	800db18 <pbuf_realloc+0x20>
 800db0a:	4b3a      	ldr	r3, [pc, #232]	; (800dbf4 <pbuf_realloc+0xfc>)
 800db0c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800db10:	4939      	ldr	r1, [pc, #228]	; (800dbf8 <pbuf_realloc+0x100>)
 800db12:	483a      	ldr	r0, [pc, #232]	; (800dbfc <pbuf_realloc+0x104>)
 800db14:	f00d fefc 	bl	801b910 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	891b      	ldrh	r3, [r3, #8]
 800db1c:	887a      	ldrh	r2, [r7, #2]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d263      	bcs.n	800dbea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	891a      	ldrh	r2, [r3, #8]
 800db26:	887b      	ldrh	r3, [r7, #2]
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800db2c:	887b      	ldrh	r3, [r7, #2]
 800db2e:	817b      	strh	r3, [r7, #10]
  q = p;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800db34:	e018      	b.n	800db68 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	895b      	ldrh	r3, [r3, #10]
 800db3a:	897a      	ldrh	r2, [r7, #10]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	891a      	ldrh	r2, [r3, #8]
 800db44:	893b      	ldrh	r3, [r7, #8]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	b29a      	uxth	r2, r3
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d106      	bne.n	800db68 <pbuf_realloc+0x70>
 800db5a:	4b26      	ldr	r3, [pc, #152]	; (800dbf4 <pbuf_realloc+0xfc>)
 800db5c:	f240 12af 	movw	r2, #431	; 0x1af
 800db60:	4927      	ldr	r1, [pc, #156]	; (800dc00 <pbuf_realloc+0x108>)
 800db62:	4826      	ldr	r0, [pc, #152]	; (800dbfc <pbuf_realloc+0x104>)
 800db64:	f00d fed4 	bl	801b910 <iprintf>
  while (rem_len > q->len) {
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	895b      	ldrh	r3, [r3, #10]
 800db6c:	897a      	ldrh	r2, [r7, #10]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d8e1      	bhi.n	800db36 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	7b1b      	ldrb	r3, [r3, #12]
 800db76:	f003 030f 	and.w	r3, r3, #15
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d121      	bne.n	800dbc2 <pbuf_realloc+0xca>
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	895b      	ldrh	r3, [r3, #10]
 800db82:	897a      	ldrh	r2, [r7, #10]
 800db84:	429a      	cmp	r2, r3
 800db86:	d01c      	beq.n	800dbc2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	7b5b      	ldrb	r3, [r3, #13]
 800db8c:	f003 0302 	and.w	r3, r3, #2
 800db90:	2b00      	cmp	r3, #0
 800db92:	d116      	bne.n	800dbc2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	685a      	ldr	r2, [r3, #4]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	1ad3      	subs	r3, r2, r3
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	897b      	ldrh	r3, [r7, #10]
 800dba0:	4413      	add	r3, r2
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	4619      	mov	r1, r3
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f7fe ff9e 	bl	800cae8 <mem_trim>
 800dbac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d106      	bne.n	800dbc2 <pbuf_realloc+0xca>
 800dbb4:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <pbuf_realloc+0xfc>)
 800dbb6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dbba:	4912      	ldr	r1, [pc, #72]	; (800dc04 <pbuf_realloc+0x10c>)
 800dbbc:	480f      	ldr	r0, [pc, #60]	; (800dbfc <pbuf_realloc+0x104>)
 800dbbe:	f00d fea7 	bl	801b910 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	897a      	ldrh	r2, [r7, #10]
 800dbc6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	895a      	ldrh	r2, [r3, #10]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d004      	beq.n	800dbe2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f000 f943 	bl	800de68 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	601a      	str	r2, [r3, #0]
 800dbe8:	e000      	b.n	800dbec <pbuf_realloc+0xf4>
    return;
 800dbea:	bf00      	nop

}
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	0801e17c 	.word	0x0801e17c
 800dbf8:	0801e294 	.word	0x0801e294
 800dbfc:	0801e1dc 	.word	0x0801e1dc
 800dc00:	0801e2ac 	.word	0x0801e2ac
 800dc04:	0801e2c4 	.word	0x0801e2c4

0800dc08 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	4613      	mov	r3, r2
 800dc14:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d106      	bne.n	800dc2a <pbuf_add_header_impl+0x22>
 800dc1c:	4b2b      	ldr	r3, [pc, #172]	; (800dccc <pbuf_add_header_impl+0xc4>)
 800dc1e:	f240 12df 	movw	r2, #479	; 0x1df
 800dc22:	492b      	ldr	r1, [pc, #172]	; (800dcd0 <pbuf_add_header_impl+0xc8>)
 800dc24:	482b      	ldr	r0, [pc, #172]	; (800dcd4 <pbuf_add_header_impl+0xcc>)
 800dc26:	f00d fe73 	bl	801b910 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d003      	beq.n	800dc38 <pbuf_add_header_impl+0x30>
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc36:	d301      	bcc.n	800dc3c <pbuf_add_header_impl+0x34>
    return 1;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e043      	b.n	800dcc4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <pbuf_add_header_impl+0x3e>
    return 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	e03e      	b.n	800dcc4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	891a      	ldrh	r2, [r3, #8]
 800dc4e:	8a7b      	ldrh	r3, [r7, #18]
 800dc50:	4413      	add	r3, r2
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	8a7a      	ldrh	r2, [r7, #18]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d901      	bls.n	800dc5e <pbuf_add_header_impl+0x56>
    return 1;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	e032      	b.n	800dcc4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	7b1b      	ldrb	r3, [r3, #12]
 800dc62:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dc64:	8a3b      	ldrh	r3, [r7, #16]
 800dc66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d00c      	beq.n	800dc88 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	685a      	ldr	r2, [r3, #4]
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	425b      	negs	r3, r3
 800dc76:	4413      	add	r3, r2
 800dc78:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	3310      	adds	r3, #16
 800dc7e:	697a      	ldr	r2, [r7, #20]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d20d      	bcs.n	800dca0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dc84:	2301      	movs	r3, #1
 800dc86:	e01d      	b.n	800dcc4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc88:	79fb      	ldrb	r3, [r7, #7]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d006      	beq.n	800dc9c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	685a      	ldr	r2, [r3, #4]
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	425b      	negs	r3, r3
 800dc96:	4413      	add	r3, r2
 800dc98:	617b      	str	r3, [r7, #20]
 800dc9a:	e001      	b.n	800dca0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e011      	b.n	800dcc4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	697a      	ldr	r2, [r7, #20]
 800dca4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	895a      	ldrh	r2, [r3, #10]
 800dcaa:	8a7b      	ldrh	r3, [r7, #18]
 800dcac:	4413      	add	r3, r2
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	891a      	ldrh	r2, [r3, #8]
 800dcb8:	8a7b      	ldrh	r3, [r7, #18]
 800dcba:	4413      	add	r3, r2
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	811a      	strh	r2, [r3, #8]


  return 0;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	0801e17c 	.word	0x0801e17c
 800dcd0:	0801e2e0 	.word	0x0801e2e0
 800dcd4:	0801e1dc 	.word	0x0801e1dc

0800dcd8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dce2:	2200      	movs	r2, #0
 800dce4:	6839      	ldr	r1, [r7, #0]
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff ff8e 	bl	800dc08 <pbuf_add_header_impl>
 800dcec:	4603      	mov	r3, r0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
	...

0800dcf8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d106      	bne.n	800dd16 <pbuf_remove_header+0x1e>
 800dd08:	4b20      	ldr	r3, [pc, #128]	; (800dd8c <pbuf_remove_header+0x94>)
 800dd0a:	f240 224b 	movw	r2, #587	; 0x24b
 800dd0e:	4920      	ldr	r1, [pc, #128]	; (800dd90 <pbuf_remove_header+0x98>)
 800dd10:	4820      	ldr	r0, [pc, #128]	; (800dd94 <pbuf_remove_header+0x9c>)
 800dd12:	f00d fdfd 	bl	801b910 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d003      	beq.n	800dd24 <pbuf_remove_header+0x2c>
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd22:	d301      	bcc.n	800dd28 <pbuf_remove_header+0x30>
    return 1;
 800dd24:	2301      	movs	r3, #1
 800dd26:	e02c      	b.n	800dd82 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d101      	bne.n	800dd32 <pbuf_remove_header+0x3a>
    return 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e027      	b.n	800dd82 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	895b      	ldrh	r3, [r3, #10]
 800dd3a:	89fa      	ldrh	r2, [r7, #14]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d908      	bls.n	800dd52 <pbuf_remove_header+0x5a>
 800dd40:	4b12      	ldr	r3, [pc, #72]	; (800dd8c <pbuf_remove_header+0x94>)
 800dd42:	f240 2255 	movw	r2, #597	; 0x255
 800dd46:	4914      	ldr	r1, [pc, #80]	; (800dd98 <pbuf_remove_header+0xa0>)
 800dd48:	4812      	ldr	r0, [pc, #72]	; (800dd94 <pbuf_remove_header+0x9c>)
 800dd4a:	f00d fde1 	bl	801b910 <iprintf>
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e017      	b.n	800dd82 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685a      	ldr	r2, [r3, #4]
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	441a      	add	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	895a      	ldrh	r2, [r3, #10]
 800dd68:	89fb      	ldrh	r3, [r7, #14]
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	891a      	ldrh	r2, [r3, #8]
 800dd76:	89fb      	ldrh	r3, [r7, #14]
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	0801e17c 	.word	0x0801e17c
 800dd90:	0801e2e0 	.word	0x0801e2e0
 800dd94:	0801e1dc 	.word	0x0801e1dc
 800dd98:	0801e2ec 	.word	0x0801e2ec

0800dd9c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	460b      	mov	r3, r1
 800dda6:	807b      	strh	r3, [r7, #2]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ddac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	da08      	bge.n	800ddc6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ddb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddb8:	425b      	negs	r3, r3
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff ff9b 	bl	800dcf8 <pbuf_remove_header>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	e007      	b.n	800ddd6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ddc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddca:	787a      	ldrb	r2, [r7, #1]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7ff ff1a 	bl	800dc08 <pbuf_add_header_impl>
 800ddd4:	4603      	mov	r3, r0
  }
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b082      	sub	sp, #8
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	460b      	mov	r3, r1
 800dde8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ddea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7ff ffd2 	bl	800dd9c <pbuf_header_impl>
 800ddf8:	4603      	mov	r3, r0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3708      	adds	r7, #8
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b086      	sub	sp, #24
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	460b      	mov	r3, r1
 800de0c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800de12:	887b      	ldrh	r3, [r7, #2]
 800de14:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800de16:	e01c      	b.n	800de52 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	895b      	ldrh	r3, [r3, #10]
 800de1c:	8a7a      	ldrh	r2, [r7, #18]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d310      	bcc.n	800de44 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	895b      	ldrh	r3, [r3, #10]
 800de2a:	8a7a      	ldrh	r2, [r7, #18]
 800de2c:	1ad3      	subs	r3, r2, r3
 800de2e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f000 f813 	bl	800de68 <pbuf_free>
 800de42:	e006      	b.n	800de52 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800de44:	8a7b      	ldrh	r3, [r7, #18]
 800de46:	4619      	mov	r1, r3
 800de48:	6978      	ldr	r0, [r7, #20]
 800de4a:	f7ff ff55 	bl	800dcf8 <pbuf_remove_header>
      free_left = 0;
 800de4e:	2300      	movs	r3, #0
 800de50:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800de52:	8a7b      	ldrh	r3, [r7, #18]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <pbuf_free_header+0x5c>
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1dc      	bne.n	800de18 <pbuf_free_header+0x16>
    }
  }
  return p;
 800de5e:	697b      	ldr	r3, [r7, #20]
}
 800de60:	4618      	mov	r0, r3
 800de62:	3718      	adds	r7, #24
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b088      	sub	sp, #32
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d10b      	bne.n	800de8e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d106      	bne.n	800de8a <pbuf_free+0x22>
 800de7c:	4b3b      	ldr	r3, [pc, #236]	; (800df6c <pbuf_free+0x104>)
 800de7e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800de82:	493b      	ldr	r1, [pc, #236]	; (800df70 <pbuf_free+0x108>)
 800de84:	483b      	ldr	r0, [pc, #236]	; (800df74 <pbuf_free+0x10c>)
 800de86:	f00d fd43 	bl	801b910 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800de8a:	2300      	movs	r3, #0
 800de8c:	e069      	b.n	800df62 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800de92:	e062      	b.n	800df5a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800de94:	f00b fe3c 	bl	8019b10 <sys_arch_protect>
 800de98:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	7b9b      	ldrb	r3, [r3, #14]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d106      	bne.n	800deb0 <pbuf_free+0x48>
 800dea2:	4b32      	ldr	r3, [pc, #200]	; (800df6c <pbuf_free+0x104>)
 800dea4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800dea8:	4933      	ldr	r1, [pc, #204]	; (800df78 <pbuf_free+0x110>)
 800deaa:	4832      	ldr	r0, [pc, #200]	; (800df74 <pbuf_free+0x10c>)
 800deac:	f00d fd30 	bl	801b910 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	7b9b      	ldrb	r3, [r3, #14]
 800deb4:	3b01      	subs	r3, #1
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	739a      	strb	r2, [r3, #14]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	7b9b      	ldrb	r3, [r3, #14]
 800dec0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800dec2:	69b8      	ldr	r0, [r7, #24]
 800dec4:	f00b fe32 	bl	8019b2c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dec8:	7dfb      	ldrb	r3, [r7, #23]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d143      	bne.n	800df56 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	7b1b      	ldrb	r3, [r3, #12]
 800ded8:	f003 030f 	and.w	r3, r3, #15
 800dedc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	7b5b      	ldrb	r3, [r3, #13]
 800dee2:	f003 0302 	and.w	r3, r3, #2
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d011      	beq.n	800df0e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d106      	bne.n	800df04 <pbuf_free+0x9c>
 800def6:	4b1d      	ldr	r3, [pc, #116]	; (800df6c <pbuf_free+0x104>)
 800def8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800defc:	491f      	ldr	r1, [pc, #124]	; (800df7c <pbuf_free+0x114>)
 800defe:	481d      	ldr	r0, [pc, #116]	; (800df74 <pbuf_free+0x10c>)
 800df00:	f00d fd06 	bl	801b910 <iprintf>
        pc->custom_free_function(p);
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	691b      	ldr	r3, [r3, #16]
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	4798      	blx	r3
 800df0c:	e01d      	b.n	800df4a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800df0e:	7bfb      	ldrb	r3, [r7, #15]
 800df10:	2b02      	cmp	r3, #2
 800df12:	d104      	bne.n	800df1e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800df14:	6879      	ldr	r1, [r7, #4]
 800df16:	200c      	movs	r0, #12
 800df18:	f7ff f8c4 	bl	800d0a4 <memp_free>
 800df1c:	e015      	b.n	800df4a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d104      	bne.n	800df2e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800df24:	6879      	ldr	r1, [r7, #4]
 800df26:	200b      	movs	r0, #11
 800df28:	f7ff f8bc 	bl	800d0a4 <memp_free>
 800df2c:	e00d      	b.n	800df4a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800df2e:	7bfb      	ldrb	r3, [r7, #15]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d103      	bne.n	800df3c <pbuf_free+0xd4>
          mem_free(p);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7fe fd47 	bl	800c9c8 <mem_free>
 800df3a:	e006      	b.n	800df4a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800df3c:	4b0b      	ldr	r3, [pc, #44]	; (800df6c <pbuf_free+0x104>)
 800df3e:	f240 320f 	movw	r2, #783	; 0x30f
 800df42:	490f      	ldr	r1, [pc, #60]	; (800df80 <pbuf_free+0x118>)
 800df44:	480b      	ldr	r0, [pc, #44]	; (800df74 <pbuf_free+0x10c>)
 800df46:	f00d fce3 	bl	801b910 <iprintf>
        }
      }
      count++;
 800df4a:	7ffb      	ldrb	r3, [r7, #31]
 800df4c:	3301      	adds	r3, #1
 800df4e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	607b      	str	r3, [r7, #4]
 800df54:	e001      	b.n	800df5a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800df56:	2300      	movs	r3, #0
 800df58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d199      	bne.n	800de94 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800df60:	7ffb      	ldrb	r3, [r7, #31]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3720      	adds	r7, #32
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	0801e17c 	.word	0x0801e17c
 800df70:	0801e2e0 	.word	0x0801e2e0
 800df74:	0801e1dc 	.word	0x0801e1dc
 800df78:	0801e30c 	.word	0x0801e30c
 800df7c:	0801e324 	.word	0x0801e324
 800df80:	0801e348 	.word	0x0801e348

0800df84 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800df8c:	2300      	movs	r3, #0
 800df8e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800df90:	e005      	b.n	800df9e <pbuf_clen+0x1a>
    ++len;
 800df92:	89fb      	ldrh	r3, [r7, #14]
 800df94:	3301      	adds	r3, #1
 800df96:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1f6      	bne.n	800df92 <pbuf_clen+0xe>
  }
  return len;
 800dfa4:	89fb      	ldrh	r3, [r7, #14]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3714      	adds	r7, #20
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
	...

0800dfb4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d016      	beq.n	800dff0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dfc2:	f00b fda5 	bl	8019b10 <sys_arch_protect>
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	7b9b      	ldrb	r3, [r3, #14]
 800dfcc:	3301      	adds	r3, #1
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	739a      	strb	r2, [r3, #14]
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f00b fda9 	bl	8019b2c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	7b9b      	ldrb	r3, [r3, #14]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d106      	bne.n	800dff0 <pbuf_ref+0x3c>
 800dfe2:	4b05      	ldr	r3, [pc, #20]	; (800dff8 <pbuf_ref+0x44>)
 800dfe4:	f240 3242 	movw	r2, #834	; 0x342
 800dfe8:	4904      	ldr	r1, [pc, #16]	; (800dffc <pbuf_ref+0x48>)
 800dfea:	4805      	ldr	r0, [pc, #20]	; (800e000 <pbuf_ref+0x4c>)
 800dfec:	f00d fc90 	bl	801b910 <iprintf>
  }
}
 800dff0:	bf00      	nop
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	0801e17c 	.word	0x0801e17c
 800dffc:	0801e35c 	.word	0x0801e35c
 800e000:	0801e1dc 	.word	0x0801e1dc

0800e004 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d002      	beq.n	800e01a <pbuf_cat+0x16>
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d107      	bne.n	800e02a <pbuf_cat+0x26>
 800e01a:	4b20      	ldr	r3, [pc, #128]	; (800e09c <pbuf_cat+0x98>)
 800e01c:	f240 3259 	movw	r2, #857	; 0x359
 800e020:	491f      	ldr	r1, [pc, #124]	; (800e0a0 <pbuf_cat+0x9c>)
 800e022:	4820      	ldr	r0, [pc, #128]	; (800e0a4 <pbuf_cat+0xa0>)
 800e024:	f00d fc74 	bl	801b910 <iprintf>
 800e028:	e034      	b.n	800e094 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	60fb      	str	r3, [r7, #12]
 800e02e:	e00a      	b.n	800e046 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	891a      	ldrh	r2, [r3, #8]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	891b      	ldrh	r3, [r3, #8]
 800e038:	4413      	add	r3, r2
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	60fb      	str	r3, [r7, #12]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1f0      	bne.n	800e030 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	891a      	ldrh	r2, [r3, #8]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	895b      	ldrh	r3, [r3, #10]
 800e056:	429a      	cmp	r2, r3
 800e058:	d006      	beq.n	800e068 <pbuf_cat+0x64>
 800e05a:	4b10      	ldr	r3, [pc, #64]	; (800e09c <pbuf_cat+0x98>)
 800e05c:	f240 3262 	movw	r2, #866	; 0x362
 800e060:	4911      	ldr	r1, [pc, #68]	; (800e0a8 <pbuf_cat+0xa4>)
 800e062:	4810      	ldr	r0, [pc, #64]	; (800e0a4 <pbuf_cat+0xa0>)
 800e064:	f00d fc54 	bl	801b910 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d006      	beq.n	800e07e <pbuf_cat+0x7a>
 800e070:	4b0a      	ldr	r3, [pc, #40]	; (800e09c <pbuf_cat+0x98>)
 800e072:	f240 3263 	movw	r2, #867	; 0x363
 800e076:	490d      	ldr	r1, [pc, #52]	; (800e0ac <pbuf_cat+0xa8>)
 800e078:	480a      	ldr	r0, [pc, #40]	; (800e0a4 <pbuf_cat+0xa0>)
 800e07a:	f00d fc49 	bl	801b910 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	891a      	ldrh	r2, [r3, #8]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	891b      	ldrh	r3, [r3, #8]
 800e086:	4413      	add	r3, r2
 800e088:	b29a      	uxth	r2, r3
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	683a      	ldr	r2, [r7, #0]
 800e092:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	0801e17c 	.word	0x0801e17c
 800e0a0:	0801e370 	.word	0x0801e370
 800e0a4:	0801e1dc 	.word	0x0801e1dc
 800e0a8:	0801e3a8 	.word	0x0801e3a8
 800e0ac:	0801e3d8 	.word	0x0801e3d8

0800e0b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e0ba:	6839      	ldr	r1, [r7, #0]
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7ff ffa1 	bl	800e004 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e0c2:	6838      	ldr	r0, [r7, #0]
 800e0c4:	f7ff ff76 	bl	800dfb4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e0c8:	bf00      	nop
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b086      	sub	sp, #24
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	617b      	str	r3, [r7, #20]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d008      	beq.n	800e0fa <pbuf_copy+0x2a>
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d005      	beq.n	800e0fa <pbuf_copy+0x2a>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	891a      	ldrh	r2, [r3, #8]
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	891b      	ldrh	r3, [r3, #8]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d209      	bcs.n	800e10e <pbuf_copy+0x3e>
 800e0fa:	4b57      	ldr	r3, [pc, #348]	; (800e258 <pbuf_copy+0x188>)
 800e0fc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e100:	4956      	ldr	r1, [pc, #344]	; (800e25c <pbuf_copy+0x18c>)
 800e102:	4857      	ldr	r0, [pc, #348]	; (800e260 <pbuf_copy+0x190>)
 800e104:	f00d fc04 	bl	801b910 <iprintf>
 800e108:	f06f 030f 	mvn.w	r3, #15
 800e10c:	e09f      	b.n	800e24e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	895b      	ldrh	r3, [r3, #10]
 800e112:	461a      	mov	r2, r3
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	1ad2      	subs	r2, r2, r3
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	895b      	ldrh	r3, [r3, #10]
 800e11c:	4619      	mov	r1, r3
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	1acb      	subs	r3, r1, r3
 800e122:	429a      	cmp	r2, r3
 800e124:	d306      	bcc.n	800e134 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	895b      	ldrh	r3, [r3, #10]
 800e12a:	461a      	mov	r2, r3
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	1ad3      	subs	r3, r2, r3
 800e130:	60fb      	str	r3, [r7, #12]
 800e132:	e005      	b.n	800e140 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	895b      	ldrh	r3, [r3, #10]
 800e138:	461a      	mov	r2, r3
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	18d0      	adds	r0, r2, r3
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	685a      	ldr	r2, [r3, #4]
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	4413      	add	r3, r2
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	4619      	mov	r1, r3
 800e154:	f00d fbc6 	bl	801b8e4 <memcpy>
    offset_to += len;
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	4413      	add	r3, r2
 800e15e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e160:	693a      	ldr	r2, [r7, #16]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	4413      	add	r3, r2
 800e166:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	895b      	ldrh	r3, [r3, #10]
 800e16c:	461a      	mov	r2, r3
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	4293      	cmp	r3, r2
 800e172:	d906      	bls.n	800e182 <pbuf_copy+0xb2>
 800e174:	4b38      	ldr	r3, [pc, #224]	; (800e258 <pbuf_copy+0x188>)
 800e176:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e17a:	493a      	ldr	r1, [pc, #232]	; (800e264 <pbuf_copy+0x194>)
 800e17c:	4838      	ldr	r0, [pc, #224]	; (800e260 <pbuf_copy+0x190>)
 800e17e:	f00d fbc7 	bl	801b910 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	895b      	ldrh	r3, [r3, #10]
 800e186:	461a      	mov	r2, r3
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d906      	bls.n	800e19c <pbuf_copy+0xcc>
 800e18e:	4b32      	ldr	r3, [pc, #200]	; (800e258 <pbuf_copy+0x188>)
 800e190:	f240 32da 	movw	r2, #986	; 0x3da
 800e194:	4934      	ldr	r1, [pc, #208]	; (800e268 <pbuf_copy+0x198>)
 800e196:	4832      	ldr	r0, [pc, #200]	; (800e260 <pbuf_copy+0x190>)
 800e198:	f00d fbba 	bl	801b910 <iprintf>
    if (offset_from >= p_from->len) {
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	895b      	ldrh	r3, [r3, #10]
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d304      	bcc.n	800e1b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	895b      	ldrh	r3, [r3, #10]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d114      	bne.n	800e1e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10c      	bne.n	800e1e8 <pbuf_copy+0x118>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d009      	beq.n	800e1e8 <pbuf_copy+0x118>
 800e1d4:	4b20      	ldr	r3, [pc, #128]	; (800e258 <pbuf_copy+0x188>)
 800e1d6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e1da:	4924      	ldr	r1, [pc, #144]	; (800e26c <pbuf_copy+0x19c>)
 800e1dc:	4820      	ldr	r0, [pc, #128]	; (800e260 <pbuf_copy+0x190>)
 800e1de:	f00d fb97 	bl	801b910 <iprintf>
 800e1e2:	f06f 030f 	mvn.w	r3, #15
 800e1e6:	e032      	b.n	800e24e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d013      	beq.n	800e216 <pbuf_copy+0x146>
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	895a      	ldrh	r2, [r3, #10]
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	891b      	ldrh	r3, [r3, #8]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d10d      	bne.n	800e216 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d009      	beq.n	800e216 <pbuf_copy+0x146>
 800e202:	4b15      	ldr	r3, [pc, #84]	; (800e258 <pbuf_copy+0x188>)
 800e204:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e208:	4919      	ldr	r1, [pc, #100]	; (800e270 <pbuf_copy+0x1a0>)
 800e20a:	4815      	ldr	r0, [pc, #84]	; (800e260 <pbuf_copy+0x190>)
 800e20c:	f00d fb80 	bl	801b910 <iprintf>
 800e210:	f06f 0305 	mvn.w	r3, #5
 800e214:	e01b      	b.n	800e24e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d013      	beq.n	800e244 <pbuf_copy+0x174>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	895a      	ldrh	r2, [r3, #10]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	891b      	ldrh	r3, [r3, #8]
 800e224:	429a      	cmp	r2, r3
 800e226:	d10d      	bne.n	800e244 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d009      	beq.n	800e244 <pbuf_copy+0x174>
 800e230:	4b09      	ldr	r3, [pc, #36]	; (800e258 <pbuf_copy+0x188>)
 800e232:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e236:	490e      	ldr	r1, [pc, #56]	; (800e270 <pbuf_copy+0x1a0>)
 800e238:	4809      	ldr	r0, [pc, #36]	; (800e260 <pbuf_copy+0x190>)
 800e23a:	f00d fb69 	bl	801b910 <iprintf>
 800e23e:	f06f 0305 	mvn.w	r3, #5
 800e242:	e004      	b.n	800e24e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	f47f af61 	bne.w	800e10e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	0801e17c 	.word	0x0801e17c
 800e25c:	0801e424 	.word	0x0801e424
 800e260:	0801e1dc 	.word	0x0801e1dc
 800e264:	0801e454 	.word	0x0801e454
 800e268:	0801e46c 	.word	0x0801e46c
 800e26c:	0801e488 	.word	0x0801e488
 800e270:	0801e498 	.word	0x0801e498

0800e274 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b088      	sub	sp, #32
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	4611      	mov	r1, r2
 800e280:	461a      	mov	r2, r3
 800e282:	460b      	mov	r3, r1
 800e284:	80fb      	strh	r3, [r7, #6]
 800e286:	4613      	mov	r3, r2
 800e288:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d108      	bne.n	800e2aa <pbuf_copy_partial+0x36>
 800e298:	4b2b      	ldr	r3, [pc, #172]	; (800e348 <pbuf_copy_partial+0xd4>)
 800e29a:	f240 420a 	movw	r2, #1034	; 0x40a
 800e29e:	492b      	ldr	r1, [pc, #172]	; (800e34c <pbuf_copy_partial+0xd8>)
 800e2a0:	482b      	ldr	r0, [pc, #172]	; (800e350 <pbuf_copy_partial+0xdc>)
 800e2a2:	f00d fb35 	bl	801b910 <iprintf>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	e04a      	b.n	800e340 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d108      	bne.n	800e2c2 <pbuf_copy_partial+0x4e>
 800e2b0:	4b25      	ldr	r3, [pc, #148]	; (800e348 <pbuf_copy_partial+0xd4>)
 800e2b2:	f240 420b 	movw	r2, #1035	; 0x40b
 800e2b6:	4927      	ldr	r1, [pc, #156]	; (800e354 <pbuf_copy_partial+0xe0>)
 800e2b8:	4825      	ldr	r0, [pc, #148]	; (800e350 <pbuf_copy_partial+0xdc>)
 800e2ba:	f00d fb29 	bl	801b910 <iprintf>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e03e      	b.n	800e340 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	61fb      	str	r3, [r7, #28]
 800e2c6:	e034      	b.n	800e332 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e2c8:	88bb      	ldrh	r3, [r7, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <pbuf_copy_partial+0x70>
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	895b      	ldrh	r3, [r3, #10]
 800e2d2:	88ba      	ldrh	r2, [r7, #4]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d305      	bcc.n	800e2e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	895b      	ldrh	r3, [r3, #10]
 800e2dc:	88ba      	ldrh	r2, [r7, #4]
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	80bb      	strh	r3, [r7, #4]
 800e2e2:	e023      	b.n	800e32c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	895a      	ldrh	r2, [r3, #10]
 800e2e8:	88bb      	ldrh	r3, [r7, #4]
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e2ee:	8b3a      	ldrh	r2, [r7, #24]
 800e2f0:	88fb      	ldrh	r3, [r7, #6]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d901      	bls.n	800e2fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e2f6:	88fb      	ldrh	r3, [r7, #6]
 800e2f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e2fa:	8b7b      	ldrh	r3, [r7, #26]
 800e2fc:	68ba      	ldr	r2, [r7, #8]
 800e2fe:	18d0      	adds	r0, r2, r3
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	685a      	ldr	r2, [r3, #4]
 800e304:	88bb      	ldrh	r3, [r7, #4]
 800e306:	4413      	add	r3, r2
 800e308:	8b3a      	ldrh	r2, [r7, #24]
 800e30a:	4619      	mov	r1, r3
 800e30c:	f00d faea 	bl	801b8e4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e310:	8afa      	ldrh	r2, [r7, #22]
 800e312:	8b3b      	ldrh	r3, [r7, #24]
 800e314:	4413      	add	r3, r2
 800e316:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e318:	8b7a      	ldrh	r2, [r7, #26]
 800e31a:	8b3b      	ldrh	r3, [r7, #24]
 800e31c:	4413      	add	r3, r2
 800e31e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e320:	88fa      	ldrh	r2, [r7, #6]
 800e322:	8b3b      	ldrh	r3, [r7, #24]
 800e324:	1ad3      	subs	r3, r2, r3
 800e326:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	61fb      	str	r3, [r7, #28]
 800e332:	88fb      	ldrh	r3, [r7, #6]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d002      	beq.n	800e33e <pbuf_copy_partial+0xca>
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1c4      	bne.n	800e2c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e33e:	8afb      	ldrh	r3, [r7, #22]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3720      	adds	r7, #32
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	0801e17c 	.word	0x0801e17c
 800e34c:	0801e4c4 	.word	0x0801e4c4
 800e350:	0801e1dc 	.word	0x0801e1dc
 800e354:	0801e4e4 	.word	0x0801e4e4

0800e358 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	4603      	mov	r3, r0
 800e360:	603a      	str	r2, [r7, #0]
 800e362:	71fb      	strb	r3, [r7, #7]
 800e364:	460b      	mov	r3, r1
 800e366:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	8919      	ldrh	r1, [r3, #8]
 800e36c:	88ba      	ldrh	r2, [r7, #4]
 800e36e:	79fb      	ldrb	r3, [r7, #7]
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff fa63 	bl	800d83c <pbuf_alloc>
 800e376:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <pbuf_clone+0x2a>
    return NULL;
 800e37e:	2300      	movs	r3, #0
 800e380:	e011      	b.n	800e3a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e382:	6839      	ldr	r1, [r7, #0]
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f7ff fea3 	bl	800e0d0 <pbuf_copy>
 800e38a:	4603      	mov	r3, r0
 800e38c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e38e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d006      	beq.n	800e3a4 <pbuf_clone+0x4c>
 800e396:	4b06      	ldr	r3, [pc, #24]	; (800e3b0 <pbuf_clone+0x58>)
 800e398:	f240 5224 	movw	r2, #1316	; 0x524
 800e39c:	4905      	ldr	r1, [pc, #20]	; (800e3b4 <pbuf_clone+0x5c>)
 800e39e:	4806      	ldr	r0, [pc, #24]	; (800e3b8 <pbuf_clone+0x60>)
 800e3a0:	f00d fab6 	bl	801b910 <iprintf>
  return q;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	0801e17c 	.word	0x0801e17c
 800e3b4:	0801e5f0 	.word	0x0801e5f0
 800e3b8:	0801e1dc 	.word	0x0801e1dc

0800e3bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e3c0:	f00d fb34 	bl	801ba2c <rand>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	4b01      	ldr	r3, [pc, #4]	; (800e3dc <tcp_init+0x20>)
 800e3d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e3d8:	bf00      	nop
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	20000010 	.word	0x20000010

0800e3e0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	7d1b      	ldrb	r3, [r3, #20]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d105      	bne.n	800e3fc <tcp_free+0x1c>
 800e3f0:	4b06      	ldr	r3, [pc, #24]	; (800e40c <tcp_free+0x2c>)
 800e3f2:	22d4      	movs	r2, #212	; 0xd4
 800e3f4:	4906      	ldr	r1, [pc, #24]	; (800e410 <tcp_free+0x30>)
 800e3f6:	4807      	ldr	r0, [pc, #28]	; (800e414 <tcp_free+0x34>)
 800e3f8:	f00d fa8a 	bl	801b910 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e3fc:	6879      	ldr	r1, [r7, #4]
 800e3fe:	2001      	movs	r0, #1
 800e400:	f7fe fe50 	bl	800d0a4 <memp_free>
}
 800e404:	bf00      	nop
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	0801e67c 	.word	0x0801e67c
 800e410:	0801e6ac 	.word	0x0801e6ac
 800e414:	0801e6c0 	.word	0x0801e6c0

0800e418 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	7d1b      	ldrb	r3, [r3, #20]
 800e424:	2b01      	cmp	r3, #1
 800e426:	d105      	bne.n	800e434 <tcp_free_listen+0x1c>
 800e428:	4b06      	ldr	r3, [pc, #24]	; (800e444 <tcp_free_listen+0x2c>)
 800e42a:	22df      	movs	r2, #223	; 0xdf
 800e42c:	4906      	ldr	r1, [pc, #24]	; (800e448 <tcp_free_listen+0x30>)
 800e42e:	4807      	ldr	r0, [pc, #28]	; (800e44c <tcp_free_listen+0x34>)
 800e430:	f00d fa6e 	bl	801b910 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e434:	6879      	ldr	r1, [r7, #4]
 800e436:	2002      	movs	r0, #2
 800e438:	f7fe fe34 	bl	800d0a4 <memp_free>
}
 800e43c:	bf00      	nop
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	0801e67c 	.word	0x0801e67c
 800e448:	0801e6e8 	.word	0x0801e6e8
 800e44c:	0801e6c0 	.word	0x0801e6c0

0800e450 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e454:	f001 f85c 	bl	800f510 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e458:	4b07      	ldr	r3, [pc, #28]	; (800e478 <tcp_tmr+0x28>)
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	3301      	adds	r3, #1
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	4b05      	ldr	r3, [pc, #20]	; (800e478 <tcp_tmr+0x28>)
 800e462:	701a      	strb	r2, [r3, #0]
 800e464:	4b04      	ldr	r3, [pc, #16]	; (800e478 <tcp_tmr+0x28>)
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	f003 0301 	and.w	r3, r3, #1
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e470:	f000 fd0e 	bl	800ee90 <tcp_slowtmr>
  }
}
 800e474:	bf00      	nop
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20008ae1 	.word	0x20008ae1

0800e47c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d105      	bne.n	800e498 <tcp_remove_listener+0x1c>
 800e48c:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <tcp_remove_listener+0x48>)
 800e48e:	22ff      	movs	r2, #255	; 0xff
 800e490:	490d      	ldr	r1, [pc, #52]	; (800e4c8 <tcp_remove_listener+0x4c>)
 800e492:	480e      	ldr	r0, [pc, #56]	; (800e4cc <tcp_remove_listener+0x50>)
 800e494:	f00d fa3c 	bl	801b910 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	e00a      	b.n	800e4b4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d102      	bne.n	800e4ae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	60fb      	str	r3, [r7, #12]
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1f1      	bne.n	800e49e <tcp_remove_listener+0x22>
    }
  }
}
 800e4ba:	bf00      	nop
 800e4bc:	bf00      	nop
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	0801e67c 	.word	0x0801e67c
 800e4c8:	0801e704 	.word	0x0801e704
 800e4cc:	0801e6c0 	.word	0x0801e6c0

0800e4d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d106      	bne.n	800e4ec <tcp_listen_closed+0x1c>
 800e4de:	4b14      	ldr	r3, [pc, #80]	; (800e530 <tcp_listen_closed+0x60>)
 800e4e0:	f240 1211 	movw	r2, #273	; 0x111
 800e4e4:	4913      	ldr	r1, [pc, #76]	; (800e534 <tcp_listen_closed+0x64>)
 800e4e6:	4814      	ldr	r0, [pc, #80]	; (800e538 <tcp_listen_closed+0x68>)
 800e4e8:	f00d fa12 	bl	801b910 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	7d1b      	ldrb	r3, [r3, #20]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d006      	beq.n	800e502 <tcp_listen_closed+0x32>
 800e4f4:	4b0e      	ldr	r3, [pc, #56]	; (800e530 <tcp_listen_closed+0x60>)
 800e4f6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e4fa:	4910      	ldr	r1, [pc, #64]	; (800e53c <tcp_listen_closed+0x6c>)
 800e4fc:	480e      	ldr	r0, [pc, #56]	; (800e538 <tcp_listen_closed+0x68>)
 800e4fe:	f00d fa07 	bl	801b910 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e502:	2301      	movs	r3, #1
 800e504:	60fb      	str	r3, [r7, #12]
 800e506:	e00b      	b.n	800e520 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e508:	4a0d      	ldr	r2, [pc, #52]	; (800e540 <tcp_listen_closed+0x70>)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6879      	ldr	r1, [r7, #4]
 800e514:	4618      	mov	r0, r3
 800e516:	f7ff ffb1 	bl	800e47c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	3301      	adds	r3, #1
 800e51e:	60fb      	str	r3, [r7, #12]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2b03      	cmp	r3, #3
 800e524:	d9f0      	bls.n	800e508 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e526:	bf00      	nop
 800e528:	bf00      	nop
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	0801e67c 	.word	0x0801e67c
 800e534:	0801e72c 	.word	0x0801e72c
 800e538:	0801e6c0 	.word	0x0801e6c0
 800e53c:	0801e738 	.word	0x0801e738
 800e540:	08020b50 	.word	0x08020b50

0800e544 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e544:	b5b0      	push	{r4, r5, r7, lr}
 800e546:	b088      	sub	sp, #32
 800e548:	af04      	add	r7, sp, #16
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	460b      	mov	r3, r1
 800e54e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d106      	bne.n	800e564 <tcp_close_shutdown+0x20>
 800e556:	4b63      	ldr	r3, [pc, #396]	; (800e6e4 <tcp_close_shutdown+0x1a0>)
 800e558:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e55c:	4962      	ldr	r1, [pc, #392]	; (800e6e8 <tcp_close_shutdown+0x1a4>)
 800e55e:	4863      	ldr	r0, [pc, #396]	; (800e6ec <tcp_close_shutdown+0x1a8>)
 800e560:	f00d f9d6 	bl	801b910 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e564:	78fb      	ldrb	r3, [r7, #3]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d066      	beq.n	800e638 <tcp_close_shutdown+0xf4>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7d1b      	ldrb	r3, [r3, #20]
 800e56e:	2b04      	cmp	r3, #4
 800e570:	d003      	beq.n	800e57a <tcp_close_shutdown+0x36>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7d1b      	ldrb	r3, [r3, #20]
 800e576:	2b07      	cmp	r3, #7
 800e578:	d15e      	bne.n	800e638 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d104      	bne.n	800e58c <tcp_close_shutdown+0x48>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e586:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e58a:	d055      	beq.n	800e638 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	8b5b      	ldrh	r3, [r3, #26]
 800e590:	f003 0310 	and.w	r3, r3, #16
 800e594:	2b00      	cmp	r3, #0
 800e596:	d106      	bne.n	800e5a6 <tcp_close_shutdown+0x62>
 800e598:	4b52      	ldr	r3, [pc, #328]	; (800e6e4 <tcp_close_shutdown+0x1a0>)
 800e59a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e59e:	4954      	ldr	r1, [pc, #336]	; (800e6f0 <tcp_close_shutdown+0x1ac>)
 800e5a0:	4852      	ldr	r0, [pc, #328]	; (800e6ec <tcp_close_shutdown+0x1a8>)
 800e5a2:	f00d f9b5 	bl	801b910 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e5ae:	687d      	ldr	r5, [r7, #4]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	8ad2      	ldrh	r2, [r2, #22]
 800e5b8:	6879      	ldr	r1, [r7, #4]
 800e5ba:	8b09      	ldrh	r1, [r1, #24]
 800e5bc:	9102      	str	r1, [sp, #8]
 800e5be:	9201      	str	r2, [sp, #4]
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	462b      	mov	r3, r5
 800e5c4:	4622      	mov	r2, r4
 800e5c6:	4601      	mov	r1, r0
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f005 fd6d 	bl	80140a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f001 fb4e 	bl	800fc70 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e5d4:	4b47      	ldr	r3, [pc, #284]	; (800e6f4 <tcp_close_shutdown+0x1b0>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d105      	bne.n	800e5ea <tcp_close_shutdown+0xa6>
 800e5de:	4b45      	ldr	r3, [pc, #276]	; (800e6f4 <tcp_close_shutdown+0x1b0>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	4a43      	ldr	r2, [pc, #268]	; (800e6f4 <tcp_close_shutdown+0x1b0>)
 800e5e6:	6013      	str	r3, [r2, #0]
 800e5e8:	e013      	b.n	800e612 <tcp_close_shutdown+0xce>
 800e5ea:	4b42      	ldr	r3, [pc, #264]	; (800e6f4 <tcp_close_shutdown+0x1b0>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	60fb      	str	r3, [r7, #12]
 800e5f0:	e00c      	b.n	800e60c <tcp_close_shutdown+0xc8>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	68db      	ldr	r3, [r3, #12]
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d104      	bne.n	800e606 <tcp_close_shutdown+0xc2>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	68da      	ldr	r2, [r3, #12]
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	60da      	str	r2, [r3, #12]
 800e604:	e005      	b.n	800e612 <tcp_close_shutdown+0xce>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	60fb      	str	r3, [r7, #12]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1ef      	bne.n	800e5f2 <tcp_close_shutdown+0xae>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2200      	movs	r2, #0
 800e616:	60da      	str	r2, [r3, #12]
 800e618:	4b37      	ldr	r3, [pc, #220]	; (800e6f8 <tcp_close_shutdown+0x1b4>)
 800e61a:	2201      	movs	r2, #1
 800e61c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e61e:	4b37      	ldr	r3, [pc, #220]	; (800e6fc <tcp_close_shutdown+0x1b8>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	429a      	cmp	r2, r3
 800e626:	d102      	bne.n	800e62e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e628:	f003 ffe2 	bl	80125f0 <tcp_trigger_input_pcb_close>
 800e62c:	e002      	b.n	800e634 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7ff fed6 	bl	800e3e0 <tcp_free>
      }
      return ERR_OK;
 800e634:	2300      	movs	r3, #0
 800e636:	e050      	b.n	800e6da <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	7d1b      	ldrb	r3, [r3, #20]
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	d03b      	beq.n	800e6b8 <tcp_close_shutdown+0x174>
 800e640:	2b02      	cmp	r3, #2
 800e642:	dc44      	bgt.n	800e6ce <tcp_close_shutdown+0x18a>
 800e644:	2b00      	cmp	r3, #0
 800e646:	d002      	beq.n	800e64e <tcp_close_shutdown+0x10a>
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d02a      	beq.n	800e6a2 <tcp_close_shutdown+0x15e>
 800e64c:	e03f      	b.n	800e6ce <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	8adb      	ldrh	r3, [r3, #22]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d021      	beq.n	800e69a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e656:	4b2a      	ldr	r3, [pc, #168]	; (800e700 <tcp_close_shutdown+0x1bc>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d105      	bne.n	800e66c <tcp_close_shutdown+0x128>
 800e660:	4b27      	ldr	r3, [pc, #156]	; (800e700 <tcp_close_shutdown+0x1bc>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	4a26      	ldr	r2, [pc, #152]	; (800e700 <tcp_close_shutdown+0x1bc>)
 800e668:	6013      	str	r3, [r2, #0]
 800e66a:	e013      	b.n	800e694 <tcp_close_shutdown+0x150>
 800e66c:	4b24      	ldr	r3, [pc, #144]	; (800e700 <tcp_close_shutdown+0x1bc>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	60bb      	str	r3, [r7, #8]
 800e672:	e00c      	b.n	800e68e <tcp_close_shutdown+0x14a>
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d104      	bne.n	800e688 <tcp_close_shutdown+0x144>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	68da      	ldr	r2, [r3, #12]
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	60da      	str	r2, [r3, #12]
 800e686:	e005      	b.n	800e694 <tcp_close_shutdown+0x150>
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	60bb      	str	r3, [r7, #8]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1ef      	bne.n	800e674 <tcp_close_shutdown+0x130>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7ff fea0 	bl	800e3e0 <tcp_free>
      break;
 800e6a0:	e01a      	b.n	800e6d8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f7ff ff14 	bl	800e4d0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	4816      	ldr	r0, [pc, #88]	; (800e704 <tcp_close_shutdown+0x1c0>)
 800e6ac:	f001 fb30 	bl	800fd10 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f7ff feb1 	bl	800e418 <tcp_free_listen>
      break;
 800e6b6:	e00f      	b.n	800e6d8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e6b8:	6879      	ldr	r1, [r7, #4]
 800e6ba:	480e      	ldr	r0, [pc, #56]	; (800e6f4 <tcp_close_shutdown+0x1b0>)
 800e6bc:	f001 fb28 	bl	800fd10 <tcp_pcb_remove>
 800e6c0:	4b0d      	ldr	r3, [pc, #52]	; (800e6f8 <tcp_close_shutdown+0x1b4>)
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7ff fe8a 	bl	800e3e0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e6cc:	e004      	b.n	800e6d8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 f81a 	bl	800e708 <tcp_close_shutdown_fin>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	e000      	b.n	800e6da <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bdb0      	pop	{r4, r5, r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	0801e67c 	.word	0x0801e67c
 800e6e8:	0801e750 	.word	0x0801e750
 800e6ec:	0801e6c0 	.word	0x0801e6c0
 800e6f0:	0801e770 	.word	0x0801e770
 800e6f4:	20010660 	.word	0x20010660
 800e6f8:	2001065c 	.word	0x2001065c
 800e6fc:	20010674 	.word	0x20010674
 800e700:	2001066c 	.word	0x2001066c
 800e704:	20010668 	.word	0x20010668

0800e708 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d106      	bne.n	800e724 <tcp_close_shutdown_fin+0x1c>
 800e716:	4b2e      	ldr	r3, [pc, #184]	; (800e7d0 <tcp_close_shutdown_fin+0xc8>)
 800e718:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e71c:	492d      	ldr	r1, [pc, #180]	; (800e7d4 <tcp_close_shutdown_fin+0xcc>)
 800e71e:	482e      	ldr	r0, [pc, #184]	; (800e7d8 <tcp_close_shutdown_fin+0xd0>)
 800e720:	f00d f8f6 	bl	801b910 <iprintf>

  switch (pcb->state) {
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	7d1b      	ldrb	r3, [r3, #20]
 800e728:	2b07      	cmp	r3, #7
 800e72a:	d020      	beq.n	800e76e <tcp_close_shutdown_fin+0x66>
 800e72c:	2b07      	cmp	r3, #7
 800e72e:	dc2b      	bgt.n	800e788 <tcp_close_shutdown_fin+0x80>
 800e730:	2b03      	cmp	r3, #3
 800e732:	d002      	beq.n	800e73a <tcp_close_shutdown_fin+0x32>
 800e734:	2b04      	cmp	r3, #4
 800e736:	d00d      	beq.n	800e754 <tcp_close_shutdown_fin+0x4c>
 800e738:	e026      	b.n	800e788 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f004 fdc2 	bl	80132c4 <tcp_send_fin>
 800e740:	4603      	mov	r3, r0
 800e742:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d11f      	bne.n	800e78c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2205      	movs	r2, #5
 800e750:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e752:	e01b      	b.n	800e78c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f004 fdb5 	bl	80132c4 <tcp_send_fin>
 800e75a:	4603      	mov	r3, r0
 800e75c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d114      	bne.n	800e790 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2205      	movs	r2, #5
 800e76a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e76c:	e010      	b.n	800e790 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f004 fda8 	bl	80132c4 <tcp_send_fin>
 800e774:	4603      	mov	r3, r0
 800e776:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d109      	bne.n	800e794 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2209      	movs	r2, #9
 800e784:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e786:	e005      	b.n	800e794 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e788:	2300      	movs	r3, #0
 800e78a:	e01c      	b.n	800e7c6 <tcp_close_shutdown_fin+0xbe>
      break;
 800e78c:	bf00      	nop
 800e78e:	e002      	b.n	800e796 <tcp_close_shutdown_fin+0x8e>
      break;
 800e790:	bf00      	nop
 800e792:	e000      	b.n	800e796 <tcp_close_shutdown_fin+0x8e>
      break;
 800e794:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d103      	bne.n	800e7a6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f004 fece 	bl	8013540 <tcp_output>
 800e7a4:	e00d      	b.n	800e7c2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7ae:	d108      	bne.n	800e7c2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	8b5b      	ldrh	r3, [r3, #26]
 800e7b4:	f043 0308 	orr.w	r3, r3, #8
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	e001      	b.n	800e7c6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e7c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	0801e67c 	.word	0x0801e67c
 800e7d4:	0801e72c 	.word	0x0801e72c
 800e7d8:	0801e6c0 	.word	0x0801e6c0

0800e7dc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d109      	bne.n	800e7fe <tcp_close+0x22>
 800e7ea:	4b0f      	ldr	r3, [pc, #60]	; (800e828 <tcp_close+0x4c>)
 800e7ec:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e7f0:	490e      	ldr	r1, [pc, #56]	; (800e82c <tcp_close+0x50>)
 800e7f2:	480f      	ldr	r0, [pc, #60]	; (800e830 <tcp_close+0x54>)
 800e7f4:	f00d f88c 	bl	801b910 <iprintf>
 800e7f8:	f06f 030f 	mvn.w	r3, #15
 800e7fc:	e00f      	b.n	800e81e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	7d1b      	ldrb	r3, [r3, #20]
 800e802:	2b01      	cmp	r3, #1
 800e804:	d006      	beq.n	800e814 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	8b5b      	ldrh	r3, [r3, #26]
 800e80a:	f043 0310 	orr.w	r3, r3, #16
 800e80e:	b29a      	uxth	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e814:	2101      	movs	r1, #1
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7ff fe94 	bl	800e544 <tcp_close_shutdown>
 800e81c:	4603      	mov	r3, r0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	0801e67c 	.word	0x0801e67c
 800e82c:	0801e78c 	.word	0x0801e78c
 800e830:	0801e6c0 	.word	0x0801e6c0

0800e834 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d109      	bne.n	800e85a <tcp_shutdown+0x26>
 800e846:	4b26      	ldr	r3, [pc, #152]	; (800e8e0 <tcp_shutdown+0xac>)
 800e848:	f240 2207 	movw	r2, #519	; 0x207
 800e84c:	4925      	ldr	r1, [pc, #148]	; (800e8e4 <tcp_shutdown+0xb0>)
 800e84e:	4826      	ldr	r0, [pc, #152]	; (800e8e8 <tcp_shutdown+0xb4>)
 800e850:	f00d f85e 	bl	801b910 <iprintf>
 800e854:	f06f 030f 	mvn.w	r3, #15
 800e858:	e03d      	b.n	800e8d6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	7d1b      	ldrb	r3, [r3, #20]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d102      	bne.n	800e868 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e862:	f06f 030a 	mvn.w	r3, #10
 800e866:	e036      	b.n	800e8d6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d01b      	beq.n	800e8a6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	8b5b      	ldrh	r3, [r3, #26]
 800e872:	f043 0310 	orr.w	r3, r3, #16
 800e876:	b29a      	uxth	r2, r3
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d005      	beq.n	800e88e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e882:	2101      	movs	r1, #1
 800e884:	68f8      	ldr	r0, [r7, #12]
 800e886:	f7ff fe5d 	bl	800e544 <tcp_close_shutdown>
 800e88a:	4603      	mov	r3, r0
 800e88c:	e023      	b.n	800e8d6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e892:	2b00      	cmp	r3, #0
 800e894:	d007      	beq.n	800e8a6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7ff fae4 	bl	800de68 <pbuf_free>
      pcb->refused_data = NULL;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d013      	beq.n	800e8d4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	7d1b      	ldrb	r3, [r3, #20]
 800e8b0:	2b04      	cmp	r3, #4
 800e8b2:	dc02      	bgt.n	800e8ba <tcp_shutdown+0x86>
 800e8b4:	2b03      	cmp	r3, #3
 800e8b6:	da02      	bge.n	800e8be <tcp_shutdown+0x8a>
 800e8b8:	e009      	b.n	800e8ce <tcp_shutdown+0x9a>
 800e8ba:	2b07      	cmp	r3, #7
 800e8bc:	d107      	bne.n	800e8ce <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	68f8      	ldr	r0, [r7, #12]
 800e8c6:	f7ff fe3d 	bl	800e544 <tcp_close_shutdown>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	e003      	b.n	800e8d6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e8ce:	f06f 030a 	mvn.w	r3, #10
 800e8d2:	e000      	b.n	800e8d6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	0801e67c 	.word	0x0801e67c
 800e8e4:	0801e7a4 	.word	0x0801e7a4
 800e8e8:	0801e6c0 	.word	0x0801e6c0

0800e8ec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b08e      	sub	sp, #56	; 0x38
 800e8f0:	af04      	add	r7, sp, #16
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d107      	bne.n	800e90c <tcp_abandon+0x20>
 800e8fc:	4b52      	ldr	r3, [pc, #328]	; (800ea48 <tcp_abandon+0x15c>)
 800e8fe:	f240 223d 	movw	r2, #573	; 0x23d
 800e902:	4952      	ldr	r1, [pc, #328]	; (800ea4c <tcp_abandon+0x160>)
 800e904:	4852      	ldr	r0, [pc, #328]	; (800ea50 <tcp_abandon+0x164>)
 800e906:	f00d f803 	bl	801b910 <iprintf>
 800e90a:	e099      	b.n	800ea40 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	7d1b      	ldrb	r3, [r3, #20]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d106      	bne.n	800e922 <tcp_abandon+0x36>
 800e914:	4b4c      	ldr	r3, [pc, #304]	; (800ea48 <tcp_abandon+0x15c>)
 800e916:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e91a:	494e      	ldr	r1, [pc, #312]	; (800ea54 <tcp_abandon+0x168>)
 800e91c:	484c      	ldr	r0, [pc, #304]	; (800ea50 <tcp_abandon+0x164>)
 800e91e:	f00c fff7 	bl	801b910 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	7d1b      	ldrb	r3, [r3, #20]
 800e926:	2b0a      	cmp	r3, #10
 800e928:	d107      	bne.n	800e93a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e92a:	6879      	ldr	r1, [r7, #4]
 800e92c:	484a      	ldr	r0, [pc, #296]	; (800ea58 <tcp_abandon+0x16c>)
 800e92e:	f001 f9ef 	bl	800fd10 <tcp_pcb_remove>
    tcp_free(pcb);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff fd54 	bl	800e3e0 <tcp_free>
 800e938:	e082      	b.n	800ea40 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e93e:	2300      	movs	r3, #0
 800e940:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e946:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e94c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e954:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	691b      	ldr	r3, [r3, #16]
 800e95a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	7d1b      	ldrb	r3, [r3, #20]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d126      	bne.n	800e9b2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	8adb      	ldrh	r3, [r3, #22]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d02e      	beq.n	800e9ca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e96c:	4b3b      	ldr	r3, [pc, #236]	; (800ea5c <tcp_abandon+0x170>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	429a      	cmp	r2, r3
 800e974:	d105      	bne.n	800e982 <tcp_abandon+0x96>
 800e976:	4b39      	ldr	r3, [pc, #228]	; (800ea5c <tcp_abandon+0x170>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	4a37      	ldr	r2, [pc, #220]	; (800ea5c <tcp_abandon+0x170>)
 800e97e:	6013      	str	r3, [r2, #0]
 800e980:	e013      	b.n	800e9aa <tcp_abandon+0xbe>
 800e982:	4b36      	ldr	r3, [pc, #216]	; (800ea5c <tcp_abandon+0x170>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	61fb      	str	r3, [r7, #28]
 800e988:	e00c      	b.n	800e9a4 <tcp_abandon+0xb8>
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	429a      	cmp	r2, r3
 800e992:	d104      	bne.n	800e99e <tcp_abandon+0xb2>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68da      	ldr	r2, [r3, #12]
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	60da      	str	r2, [r3, #12]
 800e99c:	e005      	b.n	800e9aa <tcp_abandon+0xbe>
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	68db      	ldr	r3, [r3, #12]
 800e9a2:	61fb      	str	r3, [r7, #28]
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1ef      	bne.n	800e98a <tcp_abandon+0x9e>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	60da      	str	r2, [r3, #12]
 800e9b0:	e00b      	b.n	800e9ca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	8adb      	ldrh	r3, [r3, #22]
 800e9ba:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e9bc:	6879      	ldr	r1, [r7, #4]
 800e9be:	4828      	ldr	r0, [pc, #160]	; (800ea60 <tcp_abandon+0x174>)
 800e9c0:	f001 f9a6 	bl	800fd10 <tcp_pcb_remove>
 800e9c4:	4b27      	ldr	r3, [pc, #156]	; (800ea64 <tcp_abandon+0x178>)
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d004      	beq.n	800e9dc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f000 fe7a 	bl	800f6d0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d004      	beq.n	800e9ee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 fe71 	bl	800f6d0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d004      	beq.n	800ea00 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f000 fe68 	bl	800f6d0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ea00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00e      	beq.n	800ea24 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ea06:	6879      	ldr	r1, [r7, #4]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	3304      	adds	r3, #4
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	8b12      	ldrh	r2, [r2, #24]
 800ea10:	9202      	str	r2, [sp, #8]
 800ea12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ea14:	9201      	str	r2, [sp, #4]
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	460b      	mov	r3, r1
 800ea1a:	697a      	ldr	r2, [r7, #20]
 800ea1c:	69b9      	ldr	r1, [r7, #24]
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f005 fb42 	bl	80140a8 <tcp_rst>
    }
    last_state = pcb->state;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	7d1b      	ldrb	r3, [r3, #20]
 800ea28:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f7ff fcd8 	bl	800e3e0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d004      	beq.n	800ea40 <tcp_abandon+0x154>
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	f06f 010c 	mvn.w	r1, #12
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	4798      	blx	r3
  }
}
 800ea40:	3728      	adds	r7, #40	; 0x28
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	0801e67c 	.word	0x0801e67c
 800ea4c:	0801e7c0 	.word	0x0801e7c0
 800ea50:	0801e6c0 	.word	0x0801e6c0
 800ea54:	0801e7dc 	.word	0x0801e7dc
 800ea58:	20010670 	.word	0x20010670
 800ea5c:	2001066c 	.word	0x2001066c
 800ea60:	20010660 	.word	0x20010660
 800ea64:	2001065c 	.word	0x2001065c

0800ea68 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ea70:	2101      	movs	r1, #1
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7ff ff3a 	bl	800e8ec <tcp_abandon>
}
 800ea78:	bf00      	nop
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d106      	bne.n	800ea9c <tcp_update_rcv_ann_wnd+0x1c>
 800ea8e:	4b25      	ldr	r3, [pc, #148]	; (800eb24 <tcp_update_rcv_ann_wnd+0xa4>)
 800ea90:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ea94:	4924      	ldr	r1, [pc, #144]	; (800eb28 <tcp_update_rcv_ann_wnd+0xa8>)
 800ea96:	4825      	ldr	r0, [pc, #148]	; (800eb2c <tcp_update_rcv_ann_wnd+0xac>)
 800ea98:	f00c ff3a 	bl	801b910 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800eaa4:	4413      	add	r3, r2
 800eaa6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800eab0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800eab4:	bf28      	it	cs
 800eab6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800eaba:	b292      	uxth	r2, r2
 800eabc:	4413      	add	r3, r2
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	db08      	blt.n	800ead8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	e020      	b.n	800eb1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	dd03      	ble.n	800eaee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eaec:	e014      	b.n	800eb18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb00:	d306      	bcc.n	800eb10 <tcp_update_rcv_ann_wnd+0x90>
 800eb02:	4b08      	ldr	r3, [pc, #32]	; (800eb24 <tcp_update_rcv_ann_wnd+0xa4>)
 800eb04:	f240 32b6 	movw	r2, #950	; 0x3b6
 800eb08:	4909      	ldr	r1, [pc, #36]	; (800eb30 <tcp_update_rcv_ann_wnd+0xb0>)
 800eb0a:	4808      	ldr	r0, [pc, #32]	; (800eb2c <tcp_update_rcv_ann_wnd+0xac>)
 800eb0c:	f00c ff00 	bl	801b910 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800eb18:	2300      	movs	r3, #0
  }
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	0801e67c 	.word	0x0801e67c
 800eb28:	0801e8d8 	.word	0x0801e8d8
 800eb2c:	0801e6c0 	.word	0x0801e6c0
 800eb30:	0801e8fc 	.word	0x0801e8fc

0800eb34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d107      	bne.n	800eb56 <tcp_recved+0x22>
 800eb46:	4b1f      	ldr	r3, [pc, #124]	; (800ebc4 <tcp_recved+0x90>)
 800eb48:	f240 32cf 	movw	r2, #975	; 0x3cf
 800eb4c:	491e      	ldr	r1, [pc, #120]	; (800ebc8 <tcp_recved+0x94>)
 800eb4e:	481f      	ldr	r0, [pc, #124]	; (800ebcc <tcp_recved+0x98>)
 800eb50:	f00c fede 	bl	801b910 <iprintf>
 800eb54:	e032      	b.n	800ebbc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	7d1b      	ldrb	r3, [r3, #20]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d106      	bne.n	800eb6c <tcp_recved+0x38>
 800eb5e:	4b19      	ldr	r3, [pc, #100]	; (800ebc4 <tcp_recved+0x90>)
 800eb60:	f240 32d2 	movw	r2, #978	; 0x3d2
 800eb64:	491a      	ldr	r1, [pc, #104]	; (800ebd0 <tcp_recved+0x9c>)
 800eb66:	4819      	ldr	r0, [pc, #100]	; (800ebcc <tcp_recved+0x98>)
 800eb68:	f00c fed2 	bl	801b910 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb70:	887b      	ldrh	r3, [r7, #2]
 800eb72:	4413      	add	r3, r2
 800eb74:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800eb76:	89fb      	ldrh	r3, [r7, #14]
 800eb78:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb7c:	d804      	bhi.n	800eb88 <tcp_recved+0x54>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb82:	89fa      	ldrh	r2, [r7, #14]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d204      	bcs.n	800eb92 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eb8e:	851a      	strh	r2, [r3, #40]	; 0x28
 800eb90:	e002      	b.n	800eb98 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	89fa      	ldrh	r2, [r7, #14]
 800eb96:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7ff ff71 	bl	800ea80 <tcp_update_rcv_ann_wnd>
 800eb9e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800eba6:	d309      	bcc.n	800ebbc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	8b5b      	ldrh	r3, [r3, #26]
 800ebac:	f043 0302 	orr.w	r3, r3, #2
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f004 fcc2 	bl	8013540 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	0801e67c 	.word	0x0801e67c
 800ebc8:	0801e918 	.word	0x0801e918
 800ebcc:	0801e6c0 	.word	0x0801e6c0
 800ebd0:	0801e930 	.word	0x0801e930

0800ebd4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ebde:	4b1e      	ldr	r3, [pc, #120]	; (800ec58 <tcp_new_port+0x84>)
 800ebe0:	881b      	ldrh	r3, [r3, #0]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	4b1c      	ldr	r3, [pc, #112]	; (800ec58 <tcp_new_port+0x84>)
 800ebe8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ebea:	4b1b      	ldr	r3, [pc, #108]	; (800ec58 <tcp_new_port+0x84>)
 800ebec:	881b      	ldrh	r3, [r3, #0]
 800ebee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d103      	bne.n	800ebfe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ebf6:	4b18      	ldr	r3, [pc, #96]	; (800ec58 <tcp_new_port+0x84>)
 800ebf8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ebfc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ebfe:	2300      	movs	r3, #0
 800ec00:	71fb      	strb	r3, [r7, #7]
 800ec02:	e01e      	b.n	800ec42 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ec04:	79fb      	ldrb	r3, [r7, #7]
 800ec06:	4a15      	ldr	r2, [pc, #84]	; (800ec5c <tcp_new_port+0x88>)
 800ec08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	603b      	str	r3, [r7, #0]
 800ec10:	e011      	b.n	800ec36 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	8ada      	ldrh	r2, [r3, #22]
 800ec16:	4b10      	ldr	r3, [pc, #64]	; (800ec58 <tcp_new_port+0x84>)
 800ec18:	881b      	ldrh	r3, [r3, #0]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d108      	bne.n	800ec30 <tcp_new_port+0x5c>
        n++;
 800ec1e:	88bb      	ldrh	r3, [r7, #4]
 800ec20:	3301      	adds	r3, #1
 800ec22:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ec24:	88bb      	ldrh	r3, [r7, #4]
 800ec26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec2a:	d3d8      	bcc.n	800ebde <tcp_new_port+0xa>
          return 0;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	e00d      	b.n	800ec4c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	603b      	str	r3, [r7, #0]
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d1ea      	bne.n	800ec12 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ec3c:	79fb      	ldrb	r3, [r7, #7]
 800ec3e:	3301      	adds	r3, #1
 800ec40:	71fb      	strb	r3, [r7, #7]
 800ec42:	79fb      	ldrb	r3, [r7, #7]
 800ec44:	2b03      	cmp	r3, #3
 800ec46:	d9dd      	bls.n	800ec04 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ec48:	4b03      	ldr	r3, [pc, #12]	; (800ec58 <tcp_new_port+0x84>)
 800ec4a:	881b      	ldrh	r3, [r3, #0]
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	370c      	adds	r7, #12
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr
 800ec58:	20000010 	.word	0x20000010
 800ec5c:	08020b50 	.word	0x08020b50

0800ec60 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b08a      	sub	sp, #40	; 0x28
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	603b      	str	r3, [r7, #0]
 800ec6c:	4613      	mov	r3, r2
 800ec6e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ec70:	2300      	movs	r3, #0
 800ec72:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d109      	bne.n	800ec8e <tcp_connect+0x2e>
 800ec7a:	4b7d      	ldr	r3, [pc, #500]	; (800ee70 <tcp_connect+0x210>)
 800ec7c:	f240 4235 	movw	r2, #1077	; 0x435
 800ec80:	497c      	ldr	r1, [pc, #496]	; (800ee74 <tcp_connect+0x214>)
 800ec82:	487d      	ldr	r0, [pc, #500]	; (800ee78 <tcp_connect+0x218>)
 800ec84:	f00c fe44 	bl	801b910 <iprintf>
 800ec88:	f06f 030f 	mvn.w	r3, #15
 800ec8c:	e0ec      	b.n	800ee68 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d109      	bne.n	800eca8 <tcp_connect+0x48>
 800ec94:	4b76      	ldr	r3, [pc, #472]	; (800ee70 <tcp_connect+0x210>)
 800ec96:	f240 4236 	movw	r2, #1078	; 0x436
 800ec9a:	4978      	ldr	r1, [pc, #480]	; (800ee7c <tcp_connect+0x21c>)
 800ec9c:	4876      	ldr	r0, [pc, #472]	; (800ee78 <tcp_connect+0x218>)
 800ec9e:	f00c fe37 	bl	801b910 <iprintf>
 800eca2:	f06f 030f 	mvn.w	r3, #15
 800eca6:	e0df      	b.n	800ee68 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	7d1b      	ldrb	r3, [r3, #20]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d009      	beq.n	800ecc4 <tcp_connect+0x64>
 800ecb0:	4b6f      	ldr	r3, [pc, #444]	; (800ee70 <tcp_connect+0x210>)
 800ecb2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ecb6:	4972      	ldr	r1, [pc, #456]	; (800ee80 <tcp_connect+0x220>)
 800ecb8:	486f      	ldr	r0, [pc, #444]	; (800ee78 <tcp_connect+0x218>)
 800ecba:	f00c fe29 	bl	801b910 <iprintf>
 800ecbe:	f06f 0309 	mvn.w	r3, #9
 800ecc2:	e0d1      	b.n	800ee68 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d002      	beq.n	800ecd0 <tcp_connect+0x70>
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	e000      	b.n	800ecd2 <tcp_connect+0x72>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	88fa      	ldrh	r2, [r7, #6]
 800ecda:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	7a1b      	ldrb	r3, [r3, #8]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d006      	beq.n	800ecf2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	7a1b      	ldrb	r3, [r3, #8]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fe fcfd 	bl	800d6e8 <netif_get_by_index>
 800ecee:	6278      	str	r0, [r7, #36]	; 0x24
 800ecf0:	e005      	b.n	800ecfe <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	3304      	adds	r3, #4
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f009 fa04 	bl	8018104 <ip4_route>
 800ecfc:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800ecfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d102      	bne.n	800ed0a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800ed04:	f06f 0303 	mvn.w	r3, #3
 800ed08:	e0ae      	b.n	800ee68 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d003      	beq.n	800ed18 <tcp_connect+0xb8>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d111      	bne.n	800ed3c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d002      	beq.n	800ed24 <tcp_connect+0xc4>
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed20:	3304      	adds	r3, #4
 800ed22:	e000      	b.n	800ed26 <tcp_connect+0xc6>
 800ed24:	2300      	movs	r3, #0
 800ed26:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d102      	bne.n	800ed34 <tcp_connect+0xd4>
      return ERR_RTE;
 800ed2e:	f06f 0303 	mvn.w	r3, #3
 800ed32:	e099      	b.n	800ee68 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	8adb      	ldrh	r3, [r3, #22]
 800ed40:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	8adb      	ldrh	r3, [r3, #22]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d10c      	bne.n	800ed64 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800ed4a:	f7ff ff43 	bl	800ebd4 <tcp_new_port>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	461a      	mov	r2, r3
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	8adb      	ldrh	r3, [r3, #22]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d102      	bne.n	800ed64 <tcp_connect+0x104>
      return ERR_BUF;
 800ed5e:	f06f 0301 	mvn.w	r3, #1
 800ed62:	e081      	b.n	800ee68 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f001 f867 	bl	800fe38 <tcp_next_iss>
 800ed6a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	697a      	ldr	r2, [r7, #20]
 800ed76:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	1e5a      	subs	r2, r3, #1
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	1e5a      	subs	r2, r3, #1
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	1e5a      	subs	r2, r3, #1
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed96:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800edae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800edb8:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	3304      	adds	r3, #4
 800edc2:	461a      	mov	r2, r3
 800edc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edc6:	f001 f85d 	bl	800fe84 <tcp_eff_send_mss_netif>
 800edca:	4603      	mov	r3, r0
 800edcc:	461a      	mov	r2, r3
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2201      	movs	r2, #1
 800edd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	683a      	ldr	r2, [r7, #0]
 800edde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ede2:	2102      	movs	r1, #2
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f004 fabd 	bl	8013364 <tcp_enqueue_flags>
 800edea:	4603      	mov	r3, r0
 800edec:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800edee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d136      	bne.n	800ee64 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2202      	movs	r2, #2
 800edfa:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800edfc:	8b7b      	ldrh	r3, [r7, #26]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d021      	beq.n	800ee46 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ee02:	4b20      	ldr	r3, [pc, #128]	; (800ee84 <tcp_connect+0x224>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d105      	bne.n	800ee18 <tcp_connect+0x1b8>
 800ee0c:	4b1d      	ldr	r3, [pc, #116]	; (800ee84 <tcp_connect+0x224>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	4a1c      	ldr	r2, [pc, #112]	; (800ee84 <tcp_connect+0x224>)
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	e013      	b.n	800ee40 <tcp_connect+0x1e0>
 800ee18:	4b1a      	ldr	r3, [pc, #104]	; (800ee84 <tcp_connect+0x224>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	623b      	str	r3, [r7, #32]
 800ee1e:	e00c      	b.n	800ee3a <tcp_connect+0x1da>
 800ee20:	6a3b      	ldr	r3, [r7, #32]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d104      	bne.n	800ee34 <tcp_connect+0x1d4>
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	68da      	ldr	r2, [r3, #12]
 800ee2e:	6a3b      	ldr	r3, [r7, #32]
 800ee30:	60da      	str	r2, [r3, #12]
 800ee32:	e005      	b.n	800ee40 <tcp_connect+0x1e0>
 800ee34:	6a3b      	ldr	r3, [r7, #32]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	623b      	str	r3, [r7, #32]
 800ee3a:	6a3b      	ldr	r3, [r7, #32]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1ef      	bne.n	800ee20 <tcp_connect+0x1c0>
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2200      	movs	r2, #0
 800ee44:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800ee46:	4b10      	ldr	r3, [pc, #64]	; (800ee88 <tcp_connect+0x228>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	60da      	str	r2, [r3, #12]
 800ee4e:	4a0e      	ldr	r2, [pc, #56]	; (800ee88 <tcp_connect+0x228>)
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6013      	str	r3, [r2, #0]
 800ee54:	f005 faea 	bl	801442c <tcp_timer_needed>
 800ee58:	4b0c      	ldr	r3, [pc, #48]	; (800ee8c <tcp_connect+0x22c>)
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f004 fb6e 	bl	8013540 <tcp_output>
  }
  return ret;
 800ee64:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3728      	adds	r7, #40	; 0x28
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	0801e67c 	.word	0x0801e67c
 800ee74:	0801e958 	.word	0x0801e958
 800ee78:	0801e6c0 	.word	0x0801e6c0
 800ee7c:	0801e974 	.word	0x0801e974
 800ee80:	0801e990 	.word	0x0801e990
 800ee84:	2001066c 	.word	0x2001066c
 800ee88:	20010660 	.word	0x20010660
 800ee8c:	2001065c 	.word	0x2001065c

0800ee90 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ee90:	b5b0      	push	{r4, r5, r7, lr}
 800ee92:	b090      	sub	sp, #64	; 0x40
 800ee94:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ee96:	2300      	movs	r3, #0
 800ee98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ee9c:	4b94      	ldr	r3, [pc, #592]	; (800f0f0 <tcp_slowtmr+0x260>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	3301      	adds	r3, #1
 800eea2:	4a93      	ldr	r2, [pc, #588]	; (800f0f0 <tcp_slowtmr+0x260>)
 800eea4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eea6:	4b93      	ldr	r3, [pc, #588]	; (800f0f4 <tcp_slowtmr+0x264>)
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	4b91      	ldr	r3, [pc, #580]	; (800f0f4 <tcp_slowtmr+0x264>)
 800eeb0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800eeb6:	4b90      	ldr	r3, [pc, #576]	; (800f0f8 <tcp_slowtmr+0x268>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800eebc:	e29d      	b.n	800f3fa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800eebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec0:	7d1b      	ldrb	r3, [r3, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d106      	bne.n	800eed4 <tcp_slowtmr+0x44>
 800eec6:	4b8d      	ldr	r3, [pc, #564]	; (800f0fc <tcp_slowtmr+0x26c>)
 800eec8:	f240 42be 	movw	r2, #1214	; 0x4be
 800eecc:	498c      	ldr	r1, [pc, #560]	; (800f100 <tcp_slowtmr+0x270>)
 800eece:	488d      	ldr	r0, [pc, #564]	; (800f104 <tcp_slowtmr+0x274>)
 800eed0:	f00c fd1e 	bl	801b910 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	7d1b      	ldrb	r3, [r3, #20]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d106      	bne.n	800eeea <tcp_slowtmr+0x5a>
 800eedc:	4b87      	ldr	r3, [pc, #540]	; (800f0fc <tcp_slowtmr+0x26c>)
 800eede:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800eee2:	4989      	ldr	r1, [pc, #548]	; (800f108 <tcp_slowtmr+0x278>)
 800eee4:	4887      	ldr	r0, [pc, #540]	; (800f104 <tcp_slowtmr+0x274>)
 800eee6:	f00c fd13 	bl	801b910 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeec:	7d1b      	ldrb	r3, [r3, #20]
 800eeee:	2b0a      	cmp	r3, #10
 800eef0:	d106      	bne.n	800ef00 <tcp_slowtmr+0x70>
 800eef2:	4b82      	ldr	r3, [pc, #520]	; (800f0fc <tcp_slowtmr+0x26c>)
 800eef4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800eef8:	4984      	ldr	r1, [pc, #528]	; (800f10c <tcp_slowtmr+0x27c>)
 800eefa:	4882      	ldr	r0, [pc, #520]	; (800f104 <tcp_slowtmr+0x274>)
 800eefc:	f00c fd08 	bl	801b910 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	7f9a      	ldrb	r2, [r3, #30]
 800ef04:	4b7b      	ldr	r3, [pc, #492]	; (800f0f4 <tcp_slowtmr+0x264>)
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d105      	bne.n	800ef18 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ef0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ef16:	e270      	b.n	800f3fa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ef18:	4b76      	ldr	r3, [pc, #472]	; (800f0f4 <tcp_slowtmr+0x264>)
 800ef1a:	781a      	ldrb	r2, [r3, #0]
 800ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ef20:	2300      	movs	r3, #0
 800ef22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ef26:	2300      	movs	r3, #0
 800ef28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ef2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2e:	7d1b      	ldrb	r3, [r3, #20]
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d10a      	bne.n	800ef4a <tcp_slowtmr+0xba>
 800ef34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef3a:	2b05      	cmp	r3, #5
 800ef3c:	d905      	bls.n	800ef4a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ef3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef42:	3301      	adds	r3, #1
 800ef44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef48:	e11e      	b.n	800f188 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ef4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef50:	2b0b      	cmp	r3, #11
 800ef52:	d905      	bls.n	800ef60 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ef54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef58:	3301      	adds	r3, #1
 800ef5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef5e:	e113      	b.n	800f188 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ef60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d075      	beq.n	800f056 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ef6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d006      	beq.n	800ef80 <tcp_slowtmr+0xf0>
 800ef72:	4b62      	ldr	r3, [pc, #392]	; (800f0fc <tcp_slowtmr+0x26c>)
 800ef74:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ef78:	4965      	ldr	r1, [pc, #404]	; (800f110 <tcp_slowtmr+0x280>)
 800ef7a:	4862      	ldr	r0, [pc, #392]	; (800f104 <tcp_slowtmr+0x274>)
 800ef7c:	f00c fcc8 	bl	801b910 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ef80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d106      	bne.n	800ef96 <tcp_slowtmr+0x106>
 800ef88:	4b5c      	ldr	r3, [pc, #368]	; (800f0fc <tcp_slowtmr+0x26c>)
 800ef8a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ef8e:	4961      	ldr	r1, [pc, #388]	; (800f114 <tcp_slowtmr+0x284>)
 800ef90:	485c      	ldr	r0, [pc, #368]	; (800f104 <tcp_slowtmr+0x274>)
 800ef92:	f00c fcbd 	bl	801b910 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ef96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef98:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ef9c:	2b0b      	cmp	r3, #11
 800ef9e:	d905      	bls.n	800efac <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800efa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efa4:	3301      	adds	r3, #1
 800efa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800efaa:	e0ed      	b.n	800f188 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800efb2:	3b01      	subs	r3, #1
 800efb4:	4a58      	ldr	r2, [pc, #352]	; (800f118 <tcp_slowtmr+0x288>)
 800efb6:	5cd3      	ldrb	r3, [r2, r3]
 800efb8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efc0:	7c7a      	ldrb	r2, [r7, #17]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d907      	bls.n	800efd6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efcc:	3301      	adds	r3, #1
 800efce:	b2da      	uxtb	r2, r3
 800efd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800efd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efdc:	7c7a      	ldrb	r2, [r7, #17]
 800efde:	429a      	cmp	r2, r3
 800efe0:	f200 80d2 	bhi.w	800f188 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800efe4:	2301      	movs	r3, #1
 800efe6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d108      	bne.n	800f004 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800eff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eff4:	f005 f94c 	bl	8014290 <tcp_zero_window_probe>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d014      	beq.n	800f028 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800effe:	2300      	movs	r3, #0
 800f000:	623b      	str	r3, [r7, #32]
 800f002:	e011      	b.n	800f028 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f00a:	4619      	mov	r1, r3
 800f00c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f00e:	f004 f811 	bl	8013034 <tcp_split_unsent_seg>
 800f012:	4603      	mov	r3, r0
 800f014:	2b00      	cmp	r3, #0
 800f016:	d107      	bne.n	800f028 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f01a:	f004 fa91 	bl	8013540 <tcp_output>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d101      	bne.n	800f028 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f028:	6a3b      	ldr	r3, [r7, #32]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	f000 80ac 	beq.w	800f188 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f032:	2200      	movs	r2, #0
 800f034:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f03e:	2b06      	cmp	r3, #6
 800f040:	f200 80a2 	bhi.w	800f188 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f046:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f04a:	3301      	adds	r3, #1
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f050:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f054:	e098      	b.n	800f188 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f058:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	db0f      	blt.n	800f080 <tcp_slowtmr+0x1f0>
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f066:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d008      	beq.n	800f080 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f070:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f074:	b29b      	uxth	r3, r3
 800f076:	3301      	adds	r3, #1
 800f078:	b29b      	uxth	r3, r3
 800f07a:	b21a      	sxth	r2, r3
 800f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f082:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f088:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f08c:	429a      	cmp	r2, r3
 800f08e:	db7b      	blt.n	800f188 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f092:	f004 fd47 	bl	8013b24 <tcp_rexmit_rto_prepare>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d007      	beq.n	800f0ac <tcp_slowtmr+0x21c>
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d171      	bne.n	800f188 <tcp_slowtmr+0x2f8>
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d06d      	beq.n	800f188 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	7d1b      	ldrb	r3, [r3, #20]
 800f0b0:	2b02      	cmp	r3, #2
 800f0b2:	d03a      	beq.n	800f12a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0ba:	2b0c      	cmp	r3, #12
 800f0bc:	bf28      	it	cs
 800f0be:	230c      	movcs	r3, #12
 800f0c0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0c8:	10db      	asrs	r3, r3, #3
 800f0ca:	b21b      	sxth	r3, r3
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0d4:	4413      	add	r3, r2
 800f0d6:	7efa      	ldrb	r2, [r7, #27]
 800f0d8:	4910      	ldr	r1, [pc, #64]	; (800f11c <tcp_slowtmr+0x28c>)
 800f0da:	5c8a      	ldrb	r2, [r1, r2]
 800f0dc:	4093      	lsls	r3, r2
 800f0de:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	dc1a      	bgt.n	800f120 <tcp_slowtmr+0x290>
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	b21a      	sxth	r2, r3
 800f0ee:	e019      	b.n	800f124 <tcp_slowtmr+0x294>
 800f0f0:	20010664 	.word	0x20010664
 800f0f4:	20008ae2 	.word	0x20008ae2
 800f0f8:	20010660 	.word	0x20010660
 800f0fc:	0801e67c 	.word	0x0801e67c
 800f100:	0801e9c0 	.word	0x0801e9c0
 800f104:	0801e6c0 	.word	0x0801e6c0
 800f108:	0801e9ec 	.word	0x0801e9ec
 800f10c:	0801ea18 	.word	0x0801ea18
 800f110:	0801ea48 	.word	0x0801ea48
 800f114:	0801ea7c 	.word	0x0801ea7c
 800f118:	08020b48 	.word	0x08020b48
 800f11c:	08020b38 	.word	0x08020b38
 800f120:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12c:	2200      	movs	r2, #0
 800f12e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f132:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f138:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f13c:	4293      	cmp	r3, r2
 800f13e:	bf28      	it	cs
 800f140:	4613      	movcs	r3, r2
 800f142:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f144:	8a7b      	ldrh	r3, [r7, #18]
 800f146:	085b      	lsrs	r3, r3, #1
 800f148:	b29a      	uxth	r2, r3
 800f14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f15a:	005b      	lsls	r3, r3, #1
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	429a      	cmp	r2, r3
 800f160:	d206      	bcs.n	800f170 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f166:	005b      	lsls	r3, r3, #1
 800f168:	b29a      	uxth	r2, r3
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f172:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17c:	2200      	movs	r2, #0
 800f17e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f184:	f004 fd3e 	bl	8013c04 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18a:	7d1b      	ldrb	r3, [r3, #20]
 800f18c:	2b06      	cmp	r3, #6
 800f18e:	d111      	bne.n	800f1b4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f192:	8b5b      	ldrh	r3, [r3, #26]
 800f194:	f003 0310 	and.w	r3, r3, #16
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00b      	beq.n	800f1b4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f19c:	4b9c      	ldr	r3, [pc, #624]	; (800f410 <tcp_slowtmr+0x580>)
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a2:	6a1b      	ldr	r3, [r3, #32]
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	2b28      	cmp	r3, #40	; 0x28
 800f1a8:	d904      	bls.n	800f1b4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f1aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b6:	7a5b      	ldrb	r3, [r3, #9]
 800f1b8:	f003 0308 	and.w	r3, r3, #8
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d04a      	beq.n	800f256 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1c4:	2b04      	cmp	r3, #4
 800f1c6:	d003      	beq.n	800f1d0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ca:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f1cc:	2b07      	cmp	r3, #7
 800f1ce:	d142      	bne.n	800f256 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1d0:	4b8f      	ldr	r3, [pc, #572]	; (800f410 <tcp_slowtmr+0x580>)
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d6:	6a1b      	ldr	r3, [r3, #32]
 800f1d8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1dc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f1e0:	4b8c      	ldr	r3, [pc, #560]	; (800f414 <tcp_slowtmr+0x584>)
 800f1e2:	440b      	add	r3, r1
 800f1e4:	498c      	ldr	r1, [pc, #560]	; (800f418 <tcp_slowtmr+0x588>)
 800f1e6:	fba1 1303 	umull	r1, r3, r1, r3
 800f1ea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d90a      	bls.n	800f206 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f1fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1fe:	3301      	adds	r3, #1
 800f200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f204:	e027      	b.n	800f256 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f206:	4b82      	ldr	r3, [pc, #520]	; (800f410 <tcp_slowtmr+0x580>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f212:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f218:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f21c:	4618      	mov	r0, r3
 800f21e:	4b7f      	ldr	r3, [pc, #508]	; (800f41c <tcp_slowtmr+0x58c>)
 800f220:	fb03 f300 	mul.w	r3, r3, r0
 800f224:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f226:	497c      	ldr	r1, [pc, #496]	; (800f418 <tcp_slowtmr+0x588>)
 800f228:	fba1 1303 	umull	r1, r3, r1, r3
 800f22c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f22e:	429a      	cmp	r2, r3
 800f230:	d911      	bls.n	800f256 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f234:	f004 ffec 	bl	8014210 <tcp_keepalive>
 800f238:	4603      	mov	r3, r0
 800f23a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f23e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f242:	2b00      	cmp	r3, #0
 800f244:	d107      	bne.n	800f256 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f24c:	3301      	adds	r3, #1
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f252:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d011      	beq.n	800f282 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f25e:	4b6c      	ldr	r3, [pc, #432]	; (800f410 <tcp_slowtmr+0x580>)
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f264:	6a1b      	ldr	r3, [r3, #32]
 800f266:	1ad2      	subs	r2, r2, r3
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f26e:	4619      	mov	r1, r3
 800f270:	460b      	mov	r3, r1
 800f272:	005b      	lsls	r3, r3, #1
 800f274:	440b      	add	r3, r1
 800f276:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f278:	429a      	cmp	r2, r3
 800f27a:	d302      	bcc.n	800f282 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f27c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f27e:	f000 feab 	bl	800ffd8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f284:	7d1b      	ldrb	r3, [r3, #20]
 800f286:	2b03      	cmp	r3, #3
 800f288:	d10b      	bne.n	800f2a2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f28a:	4b61      	ldr	r3, [pc, #388]	; (800f410 <tcp_slowtmr+0x580>)
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	6a1b      	ldr	r3, [r3, #32]
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	2b28      	cmp	r3, #40	; 0x28
 800f296:	d904      	bls.n	800f2a2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f29c:	3301      	adds	r3, #1
 800f29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a4:	7d1b      	ldrb	r3, [r3, #20]
 800f2a6:	2b09      	cmp	r3, #9
 800f2a8:	d10b      	bne.n	800f2c2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f2aa:	4b59      	ldr	r3, [pc, #356]	; (800f410 <tcp_slowtmr+0x580>)
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b0:	6a1b      	ldr	r3, [r3, #32]
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	2bf0      	cmp	r3, #240	; 0xf0
 800f2b6:	d904      	bls.n	800f2c2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2bc:	3301      	adds	r3, #1
 800f2be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d060      	beq.n	800f38c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2d0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f2d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2d4:	f000 fccc 	bl	800fc70 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d010      	beq.n	800f300 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f2de:	4b50      	ldr	r3, [pc, #320]	; (800f420 <tcp_slowtmr+0x590>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d106      	bne.n	800f2f6 <tcp_slowtmr+0x466>
 800f2e8:	4b4e      	ldr	r3, [pc, #312]	; (800f424 <tcp_slowtmr+0x594>)
 800f2ea:	f240 526d 	movw	r2, #1389	; 0x56d
 800f2ee:	494e      	ldr	r1, [pc, #312]	; (800f428 <tcp_slowtmr+0x598>)
 800f2f0:	484e      	ldr	r0, [pc, #312]	; (800f42c <tcp_slowtmr+0x59c>)
 800f2f2:	f00c fb0d 	bl	801b910 <iprintf>
        prev->next = pcb->next;
 800f2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f8:	68da      	ldr	r2, [r3, #12]
 800f2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fc:	60da      	str	r2, [r3, #12]
 800f2fe:	e00f      	b.n	800f320 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f300:	4b47      	ldr	r3, [pc, #284]	; (800f420 <tcp_slowtmr+0x590>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f306:	429a      	cmp	r2, r3
 800f308:	d006      	beq.n	800f318 <tcp_slowtmr+0x488>
 800f30a:	4b46      	ldr	r3, [pc, #280]	; (800f424 <tcp_slowtmr+0x594>)
 800f30c:	f240 5271 	movw	r2, #1393	; 0x571
 800f310:	4947      	ldr	r1, [pc, #284]	; (800f430 <tcp_slowtmr+0x5a0>)
 800f312:	4846      	ldr	r0, [pc, #280]	; (800f42c <tcp_slowtmr+0x59c>)
 800f314:	f00c fafc 	bl	801b910 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	4a40      	ldr	r2, [pc, #256]	; (800f420 <tcp_slowtmr+0x590>)
 800f31e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f324:	2b00      	cmp	r3, #0
 800f326:	d013      	beq.n	800f350 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f330:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f334:	3304      	adds	r3, #4
 800f336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f338:	8ad2      	ldrh	r2, [r2, #22]
 800f33a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f33c:	8b09      	ldrh	r1, [r1, #24]
 800f33e:	9102      	str	r1, [sp, #8]
 800f340:	9201      	str	r2, [sp, #4]
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	462b      	mov	r3, r5
 800f346:	4622      	mov	r2, r4
 800f348:	4601      	mov	r1, r0
 800f34a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f34c:	f004 feac 	bl	80140a8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	7d1b      	ldrb	r3, [r3, #20]
 800f35a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f366:	6838      	ldr	r0, [r7, #0]
 800f368:	f7ff f83a 	bl	800e3e0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f36c:	4b31      	ldr	r3, [pc, #196]	; (800f434 <tcp_slowtmr+0x5a4>)
 800f36e:	2200      	movs	r2, #0
 800f370:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d004      	beq.n	800f382 <tcp_slowtmr+0x4f2>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f06f 010c 	mvn.w	r1, #12
 800f37e:	68b8      	ldr	r0, [r7, #8]
 800f380:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f382:	4b2c      	ldr	r3, [pc, #176]	; (800f434 <tcp_slowtmr+0x5a4>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d037      	beq.n	800f3fa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f38a:	e592      	b.n	800eeb2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f398:	7f1b      	ldrb	r3, [r3, #28]
 800f39a:	3301      	adds	r3, #1
 800f39c:	b2da      	uxtb	r2, r3
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	7f1a      	ldrb	r2, [r3, #28]
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	7f5b      	ldrb	r3, [r3, #29]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d325      	bcc.n	800f3fa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f3b4:	4b1f      	ldr	r3, [pc, #124]	; (800f434 <tcp_slowtmr+0x5a4>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00b      	beq.n	800f3dc <tcp_slowtmr+0x54c>
 800f3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3cc:	6912      	ldr	r2, [r2, #16]
 800f3ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	4798      	blx	r3
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f3da:	e002      	b.n	800f3e2 <tcp_slowtmr+0x552>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f3e2:	4b14      	ldr	r3, [pc, #80]	; (800f434 <tcp_slowtmr+0x5a4>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d000      	beq.n	800f3ec <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f3ea:	e562      	b.n	800eeb2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f3ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d102      	bne.n	800f3fa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3f6:	f004 f8a3 	bl	8013540 <tcp_output>
  while (pcb != NULL) {
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f47f ad5e 	bne.w	800eebe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f402:	2300      	movs	r3, #0
 800f404:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f406:	4b0c      	ldr	r3, [pc, #48]	; (800f438 <tcp_slowtmr+0x5a8>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f40c:	e069      	b.n	800f4e2 <tcp_slowtmr+0x652>
 800f40e:	bf00      	nop
 800f410:	20010664 	.word	0x20010664
 800f414:	000a4cb8 	.word	0x000a4cb8
 800f418:	10624dd3 	.word	0x10624dd3
 800f41c:	000124f8 	.word	0x000124f8
 800f420:	20010660 	.word	0x20010660
 800f424:	0801e67c 	.word	0x0801e67c
 800f428:	0801eab4 	.word	0x0801eab4
 800f42c:	0801e6c0 	.word	0x0801e6c0
 800f430:	0801eae0 	.word	0x0801eae0
 800f434:	2001065c 	.word	0x2001065c
 800f438:	20010670 	.word	0x20010670
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43e:	7d1b      	ldrb	r3, [r3, #20]
 800f440:	2b0a      	cmp	r3, #10
 800f442:	d006      	beq.n	800f452 <tcp_slowtmr+0x5c2>
 800f444:	4b2b      	ldr	r3, [pc, #172]	; (800f4f4 <tcp_slowtmr+0x664>)
 800f446:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f44a:	492b      	ldr	r1, [pc, #172]	; (800f4f8 <tcp_slowtmr+0x668>)
 800f44c:	482b      	ldr	r0, [pc, #172]	; (800f4fc <tcp_slowtmr+0x66c>)
 800f44e:	f00c fa5f 	bl	801b910 <iprintf>
    pcb_remove = 0;
 800f452:	2300      	movs	r3, #0
 800f454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f458:	4b29      	ldr	r3, [pc, #164]	; (800f500 <tcp_slowtmr+0x670>)
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	6a1b      	ldr	r3, [r3, #32]
 800f460:	1ad3      	subs	r3, r2, r3
 800f462:	2bf0      	cmp	r3, #240	; 0xf0
 800f464:	d904      	bls.n	800f470 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f46a:	3301      	adds	r3, #1
 800f46c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f474:	2b00      	cmp	r3, #0
 800f476:	d02f      	beq.n	800f4d8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f47a:	f000 fbf9 	bl	800fc70 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	2b00      	cmp	r3, #0
 800f482:	d010      	beq.n	800f4a6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f484:	4b1f      	ldr	r3, [pc, #124]	; (800f504 <tcp_slowtmr+0x674>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d106      	bne.n	800f49c <tcp_slowtmr+0x60c>
 800f48e:	4b19      	ldr	r3, [pc, #100]	; (800f4f4 <tcp_slowtmr+0x664>)
 800f490:	f240 52af 	movw	r2, #1455	; 0x5af
 800f494:	491c      	ldr	r1, [pc, #112]	; (800f508 <tcp_slowtmr+0x678>)
 800f496:	4819      	ldr	r0, [pc, #100]	; (800f4fc <tcp_slowtmr+0x66c>)
 800f498:	f00c fa3a 	bl	801b910 <iprintf>
        prev->next = pcb->next;
 800f49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49e:	68da      	ldr	r2, [r3, #12]
 800f4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a2:	60da      	str	r2, [r3, #12]
 800f4a4:	e00f      	b.n	800f4c6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f4a6:	4b17      	ldr	r3, [pc, #92]	; (800f504 <tcp_slowtmr+0x674>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d006      	beq.n	800f4be <tcp_slowtmr+0x62e>
 800f4b0:	4b10      	ldr	r3, [pc, #64]	; (800f4f4 <tcp_slowtmr+0x664>)
 800f4b2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f4b6:	4915      	ldr	r1, [pc, #84]	; (800f50c <tcp_slowtmr+0x67c>)
 800f4b8:	4810      	ldr	r0, [pc, #64]	; (800f4fc <tcp_slowtmr+0x66c>)
 800f4ba:	f00c fa29 	bl	801b910 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	4a10      	ldr	r2, [pc, #64]	; (800f504 <tcp_slowtmr+0x674>)
 800f4c4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f4d0:	69f8      	ldr	r0, [r7, #28]
 800f4d2:	f7fe ff85 	bl	800e3e0 <tcp_free>
 800f4d6:	e004      	b.n	800f4e2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d1a9      	bne.n	800f43c <tcp_slowtmr+0x5ac>
    }
  }
}
 800f4e8:	bf00      	nop
 800f4ea:	bf00      	nop
 800f4ec:	3730      	adds	r7, #48	; 0x30
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	0801e67c 	.word	0x0801e67c
 800f4f8:	0801eb0c 	.word	0x0801eb0c
 800f4fc:	0801e6c0 	.word	0x0801e6c0
 800f500:	20010664 	.word	0x20010664
 800f504:	20010670 	.word	0x20010670
 800f508:	0801eb3c 	.word	0x0801eb3c
 800f50c:	0801eb64 	.word	0x0801eb64

0800f510 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f516:	4b2d      	ldr	r3, [pc, #180]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	3301      	adds	r3, #1
 800f51c:	b2da      	uxtb	r2, r3
 800f51e:	4b2b      	ldr	r3, [pc, #172]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f520:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f522:	4b2b      	ldr	r3, [pc, #172]	; (800f5d0 <tcp_fasttmr+0xc0>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f528:	e048      	b.n	800f5bc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	7f9a      	ldrb	r2, [r3, #30]
 800f52e:	4b27      	ldr	r3, [pc, #156]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	429a      	cmp	r2, r3
 800f534:	d03f      	beq.n	800f5b6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f536:	4b25      	ldr	r3, [pc, #148]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f538:	781a      	ldrb	r2, [r3, #0]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	8b5b      	ldrh	r3, [r3, #26]
 800f542:	f003 0301 	and.w	r3, r3, #1
 800f546:	2b00      	cmp	r3, #0
 800f548:	d010      	beq.n	800f56c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	8b5b      	ldrh	r3, [r3, #26]
 800f54e:	f043 0302 	orr.w	r3, r3, #2
 800f552:	b29a      	uxth	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f003 fff1 	bl	8013540 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	8b5b      	ldrh	r3, [r3, #26]
 800f562:	f023 0303 	bic.w	r3, r3, #3
 800f566:	b29a      	uxth	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	8b5b      	ldrh	r3, [r3, #26]
 800f570:	f003 0308 	and.w	r3, r3, #8
 800f574:	2b00      	cmp	r3, #0
 800f576:	d009      	beq.n	800f58c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	8b5b      	ldrh	r3, [r3, #26]
 800f57c:	f023 0308 	bic.w	r3, r3, #8
 800f580:	b29a      	uxth	r2, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7ff f8be 	bl	800e708 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00a      	beq.n	800f5b0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f59a:	4b0e      	ldr	r3, [pc, #56]	; (800f5d4 <tcp_fasttmr+0xc4>)
 800f59c:	2200      	movs	r2, #0
 800f59e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f819 	bl	800f5d8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f5a6:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <tcp_fasttmr+0xc4>)
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d000      	beq.n	800f5b0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f5ae:	e7b8      	b.n	800f522 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	607b      	str	r3, [r7, #4]
 800f5b4:	e002      	b.n	800f5bc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1b3      	bne.n	800f52a <tcp_fasttmr+0x1a>
    }
  }
}
 800f5c2:	bf00      	nop
 800f5c4:	bf00      	nop
 800f5c6:	3708      	adds	r7, #8
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	20008ae2 	.word	0x20008ae2
 800f5d0:	20010660 	.word	0x20010660
 800f5d4:	2001065c 	.word	0x2001065c

0800f5d8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f5d8:	b590      	push	{r4, r7, lr}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d109      	bne.n	800f5fa <tcp_process_refused_data+0x22>
 800f5e6:	4b37      	ldr	r3, [pc, #220]	; (800f6c4 <tcp_process_refused_data+0xec>)
 800f5e8:	f240 6209 	movw	r2, #1545	; 0x609
 800f5ec:	4936      	ldr	r1, [pc, #216]	; (800f6c8 <tcp_process_refused_data+0xf0>)
 800f5ee:	4837      	ldr	r0, [pc, #220]	; (800f6cc <tcp_process_refused_data+0xf4>)
 800f5f0:	f00c f98e 	bl	801b910 <iprintf>
 800f5f4:	f06f 030f 	mvn.w	r3, #15
 800f5f8:	e060      	b.n	800f6bc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5fe:	7b5b      	ldrb	r3, [r3, #13]
 800f600:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f606:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00b      	beq.n	800f630 <tcp_process_refused_data+0x58>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6918      	ldr	r0, [r3, #16]
 800f622:	2300      	movs	r3, #0
 800f624:	68ba      	ldr	r2, [r7, #8]
 800f626:	6879      	ldr	r1, [r7, #4]
 800f628:	47a0      	blx	r4
 800f62a:	4603      	mov	r3, r0
 800f62c:	73fb      	strb	r3, [r7, #15]
 800f62e:	e007      	b.n	800f640 <tcp_process_refused_data+0x68>
 800f630:	2300      	movs	r3, #0
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	6879      	ldr	r1, [r7, #4]
 800f636:	2000      	movs	r0, #0
 800f638:	f000 f8a4 	bl	800f784 <tcp_recv_null>
 800f63c:	4603      	mov	r3, r0
 800f63e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d12a      	bne.n	800f69e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f648:	7bbb      	ldrb	r3, [r7, #14]
 800f64a:	f003 0320 	and.w	r3, r3, #32
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d033      	beq.n	800f6ba <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f656:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f65a:	d005      	beq.n	800f668 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f660:	3301      	adds	r3, #1
 800f662:	b29a      	uxth	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00b      	beq.n	800f68a <tcp_process_refused_data+0xb2>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6918      	ldr	r0, [r3, #16]
 800f67c:	2300      	movs	r3, #0
 800f67e:	2200      	movs	r2, #0
 800f680:	6879      	ldr	r1, [r7, #4]
 800f682:	47a0      	blx	r4
 800f684:	4603      	mov	r3, r0
 800f686:	73fb      	strb	r3, [r7, #15]
 800f688:	e001      	b.n	800f68e <tcp_process_refused_data+0xb6>
 800f68a:	2300      	movs	r3, #0
 800f68c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f692:	f113 0f0d 	cmn.w	r3, #13
 800f696:	d110      	bne.n	800f6ba <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f698:	f06f 030c 	mvn.w	r3, #12
 800f69c:	e00e      	b.n	800f6bc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6a2:	f113 0f0d 	cmn.w	r3, #13
 800f6a6:	d102      	bne.n	800f6ae <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f6a8:	f06f 030c 	mvn.w	r3, #12
 800f6ac:	e006      	b.n	800f6bc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	68ba      	ldr	r2, [r7, #8]
 800f6b2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f6b4:	f06f 0304 	mvn.w	r3, #4
 800f6b8:	e000      	b.n	800f6bc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd90      	pop	{r4, r7, pc}
 800f6c4:	0801e67c 	.word	0x0801e67c
 800f6c8:	0801eb8c 	.word	0x0801eb8c
 800f6cc:	0801e6c0 	.word	0x0801e6c0

0800f6d0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f6d8:	e007      	b.n	800f6ea <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 f80a 	bl	800f6fa <tcp_seg_free>
    seg = next;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d1f4      	bne.n	800f6da <tcp_segs_free+0xa>
  }
}
 800f6f0:	bf00      	nop
 800f6f2:	bf00      	nop
 800f6f4:	3710      	adds	r7, #16
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}

0800f6fa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f6fa:	b580      	push	{r7, lr}
 800f6fc:	b082      	sub	sp, #8
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00c      	beq.n	800f722 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d004      	beq.n	800f71a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe fba7 	bl	800de68 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f71a:	6879      	ldr	r1, [r7, #4]
 800f71c:	2003      	movs	r0, #3
 800f71e:	f7fd fcc1 	bl	800d0a4 <memp_free>
  }
}
 800f722:	bf00      	nop
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
	...

0800f72c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d106      	bne.n	800f748 <tcp_seg_copy+0x1c>
 800f73a:	4b0f      	ldr	r3, [pc, #60]	; (800f778 <tcp_seg_copy+0x4c>)
 800f73c:	f240 6282 	movw	r2, #1666	; 0x682
 800f740:	490e      	ldr	r1, [pc, #56]	; (800f77c <tcp_seg_copy+0x50>)
 800f742:	480f      	ldr	r0, [pc, #60]	; (800f780 <tcp_seg_copy+0x54>)
 800f744:	f00c f8e4 	bl	801b910 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f748:	2003      	movs	r0, #3
 800f74a:	f7fd fc59 	bl	800d000 <memp_malloc>
 800f74e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d101      	bne.n	800f75a <tcp_seg_copy+0x2e>
    return NULL;
 800f756:	2300      	movs	r3, #0
 800f758:	e00a      	b.n	800f770 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f75a:	2210      	movs	r2, #16
 800f75c:	6879      	ldr	r1, [r7, #4]
 800f75e:	68f8      	ldr	r0, [r7, #12]
 800f760:	f00c f8c0 	bl	801b8e4 <memcpy>
  pbuf_ref(cseg->p);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fe fc23 	bl	800dfb4 <pbuf_ref>
  return cseg;
 800f76e:	68fb      	ldr	r3, [r7, #12]
}
 800f770:	4618      	mov	r0, r3
 800f772:	3710      	adds	r7, #16
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	0801e67c 	.word	0x0801e67c
 800f77c:	0801ebd0 	.word	0x0801ebd0
 800f780:	0801e6c0 	.word	0x0801e6c0

0800f784 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
 800f790:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d109      	bne.n	800f7ac <tcp_recv_null+0x28>
 800f798:	4b12      	ldr	r3, [pc, #72]	; (800f7e4 <tcp_recv_null+0x60>)
 800f79a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f79e:	4912      	ldr	r1, [pc, #72]	; (800f7e8 <tcp_recv_null+0x64>)
 800f7a0:	4812      	ldr	r0, [pc, #72]	; (800f7ec <tcp_recv_null+0x68>)
 800f7a2:	f00c f8b5 	bl	801b910 <iprintf>
 800f7a6:	f06f 030f 	mvn.w	r3, #15
 800f7aa:	e016      	b.n	800f7da <tcp_recv_null+0x56>

  if (p != NULL) {
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d009      	beq.n	800f7c6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	891b      	ldrh	r3, [r3, #8]
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	68b8      	ldr	r0, [r7, #8]
 800f7ba:	f7ff f9bb 	bl	800eb34 <tcp_recved>
    pbuf_free(p);
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f7fe fb52 	bl	800de68 <pbuf_free>
 800f7c4:	e008      	b.n	800f7d8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f7c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d104      	bne.n	800f7d8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f7ce:	68b8      	ldr	r0, [r7, #8]
 800f7d0:	f7ff f804 	bl	800e7dc <tcp_close>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	e000      	b.n	800f7da <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3710      	adds	r7, #16
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	0801e67c 	.word	0x0801e67c
 800f7e8:	0801ebec 	.word	0x0801ebec
 800f7ec:	0801e6c0 	.word	0x0801e6c0

0800f7f0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b086      	sub	sp, #24
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	db01      	blt.n	800f806 <tcp_kill_prio+0x16>
 800f802:	79fb      	ldrb	r3, [r7, #7]
 800f804:	e000      	b.n	800f808 <tcp_kill_prio+0x18>
 800f806:	237f      	movs	r3, #127	; 0x7f
 800f808:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f80a:	7afb      	ldrb	r3, [r7, #11]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d034      	beq.n	800f87a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f810:	7afb      	ldrb	r3, [r7, #11]
 800f812:	3b01      	subs	r3, #1
 800f814:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f816:	2300      	movs	r3, #0
 800f818:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f81a:	2300      	movs	r3, #0
 800f81c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f81e:	4b19      	ldr	r3, [pc, #100]	; (800f884 <tcp_kill_prio+0x94>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	617b      	str	r3, [r7, #20]
 800f824:	e01f      	b.n	800f866 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	7d5b      	ldrb	r3, [r3, #21]
 800f82a:	7afa      	ldrb	r2, [r7, #11]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d80c      	bhi.n	800f84a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f834:	7afa      	ldrb	r2, [r7, #11]
 800f836:	429a      	cmp	r2, r3
 800f838:	d112      	bne.n	800f860 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f83a:	4b13      	ldr	r3, [pc, #76]	; (800f888 <tcp_kill_prio+0x98>)
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	6a1b      	ldr	r3, [r3, #32]
 800f842:	1ad3      	subs	r3, r2, r3
 800f844:	68fa      	ldr	r2, [r7, #12]
 800f846:	429a      	cmp	r2, r3
 800f848:	d80a      	bhi.n	800f860 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f84a:	4b0f      	ldr	r3, [pc, #60]	; (800f888 <tcp_kill_prio+0x98>)
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	6a1b      	ldr	r3, [r3, #32]
 800f852:	1ad3      	subs	r3, r2, r3
 800f854:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	7d5b      	ldrb	r3, [r3, #21]
 800f85e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	617b      	str	r3, [r7, #20]
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1dc      	bne.n	800f826 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d004      	beq.n	800f87c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f872:	6938      	ldr	r0, [r7, #16]
 800f874:	f7ff f8f8 	bl	800ea68 <tcp_abort>
 800f878:	e000      	b.n	800f87c <tcp_kill_prio+0x8c>
    return;
 800f87a:	bf00      	nop
  }
}
 800f87c:	3718      	adds	r7, #24
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	20010660 	.word	0x20010660
 800f888:	20010664 	.word	0x20010664

0800f88c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b086      	sub	sp, #24
 800f890:	af00      	add	r7, sp, #0
 800f892:	4603      	mov	r3, r0
 800f894:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f896:	79fb      	ldrb	r3, [r7, #7]
 800f898:	2b08      	cmp	r3, #8
 800f89a:	d009      	beq.n	800f8b0 <tcp_kill_state+0x24>
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	2b09      	cmp	r3, #9
 800f8a0:	d006      	beq.n	800f8b0 <tcp_kill_state+0x24>
 800f8a2:	4b1a      	ldr	r3, [pc, #104]	; (800f90c <tcp_kill_state+0x80>)
 800f8a4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f8a8:	4919      	ldr	r1, [pc, #100]	; (800f910 <tcp_kill_state+0x84>)
 800f8aa:	481a      	ldr	r0, [pc, #104]	; (800f914 <tcp_kill_state+0x88>)
 800f8ac:	f00c f830 	bl	801b910 <iprintf>

  inactivity = 0;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8b8:	4b17      	ldr	r3, [pc, #92]	; (800f918 <tcp_kill_state+0x8c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	617b      	str	r3, [r7, #20]
 800f8be:	e017      	b.n	800f8f0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	7d1b      	ldrb	r3, [r3, #20]
 800f8c4:	79fa      	ldrb	r2, [r7, #7]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d10f      	bne.n	800f8ea <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f8ca:	4b14      	ldr	r3, [pc, #80]	; (800f91c <tcp_kill_state+0x90>)
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	6a1b      	ldr	r3, [r3, #32]
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	68fa      	ldr	r2, [r7, #12]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d807      	bhi.n	800f8ea <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f8da:	4b10      	ldr	r3, [pc, #64]	; (800f91c <tcp_kill_state+0x90>)
 800f8dc:	681a      	ldr	r2, [r3, #0]
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	6a1b      	ldr	r3, [r3, #32]
 800f8e2:	1ad3      	subs	r3, r2, r3
 800f8e4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	68db      	ldr	r3, [r3, #12]
 800f8ee:	617b      	str	r3, [r7, #20]
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1e4      	bne.n	800f8c0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d003      	beq.n	800f904 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	6938      	ldr	r0, [r7, #16]
 800f900:	f7fe fff4 	bl	800e8ec <tcp_abandon>
  }
}
 800f904:	bf00      	nop
 800f906:	3718      	adds	r7, #24
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	0801e67c 	.word	0x0801e67c
 800f910:	0801ec08 	.word	0x0801ec08
 800f914:	0801e6c0 	.word	0x0801e6c0
 800f918:	20010660 	.word	0x20010660
 800f91c:	20010664 	.word	0x20010664

0800f920 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f926:	2300      	movs	r3, #0
 800f928:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f92a:	2300      	movs	r3, #0
 800f92c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f92e:	4b12      	ldr	r3, [pc, #72]	; (800f978 <tcp_kill_timewait+0x58>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	60fb      	str	r3, [r7, #12]
 800f934:	e012      	b.n	800f95c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f936:	4b11      	ldr	r3, [pc, #68]	; (800f97c <tcp_kill_timewait+0x5c>)
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	6a1b      	ldr	r3, [r3, #32]
 800f93e:	1ad3      	subs	r3, r2, r3
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	429a      	cmp	r2, r3
 800f944:	d807      	bhi.n	800f956 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f946:	4b0d      	ldr	r3, [pc, #52]	; (800f97c <tcp_kill_timewait+0x5c>)
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	6a1b      	ldr	r3, [r3, #32]
 800f94e:	1ad3      	subs	r3, r2, r3
 800f950:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	60fb      	str	r3, [r7, #12]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1e9      	bne.n	800f936 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d002      	beq.n	800f96e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f968:	68b8      	ldr	r0, [r7, #8]
 800f96a:	f7ff f87d 	bl	800ea68 <tcp_abort>
  }
}
 800f96e:	bf00      	nop
 800f970:	3710      	adds	r7, #16
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	20010670 	.word	0x20010670
 800f97c:	20010664 	.word	0x20010664

0800f980 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f986:	4b10      	ldr	r3, [pc, #64]	; (800f9c8 <tcp_handle_closepend+0x48>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f98c:	e014      	b.n	800f9b8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	68db      	ldr	r3, [r3, #12]
 800f992:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	8b5b      	ldrh	r3, [r3, #26]
 800f998:	f003 0308 	and.w	r3, r3, #8
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d009      	beq.n	800f9b4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	8b5b      	ldrh	r3, [r3, #26]
 800f9a4:	f023 0308 	bic.w	r3, r3, #8
 800f9a8:	b29a      	uxth	r2, r3
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7fe feaa 	bl	800e708 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d1e7      	bne.n	800f98e <tcp_handle_closepend+0xe>
  }
}
 800f9be:	bf00      	nop
 800f9c0:	bf00      	nop
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	20010660 	.word	0x20010660

0800f9cc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9d6:	2001      	movs	r0, #1
 800f9d8:	f7fd fb12 	bl	800d000 <memp_malloc>
 800f9dc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d126      	bne.n	800fa32 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f9e4:	f7ff ffcc 	bl	800f980 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f9e8:	f7ff ff9a 	bl	800f920 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9ec:	2001      	movs	r0, #1
 800f9ee:	f7fd fb07 	bl	800d000 <memp_malloc>
 800f9f2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d11b      	bne.n	800fa32 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f9fa:	2009      	movs	r0, #9
 800f9fc:	f7ff ff46 	bl	800f88c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa00:	2001      	movs	r0, #1
 800fa02:	f7fd fafd 	bl	800d000 <memp_malloc>
 800fa06:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d111      	bne.n	800fa32 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fa0e:	2008      	movs	r0, #8
 800fa10:	f7ff ff3c 	bl	800f88c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa14:	2001      	movs	r0, #1
 800fa16:	f7fd faf3 	bl	800d000 <memp_malloc>
 800fa1a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d107      	bne.n	800fa32 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fa22:	79fb      	ldrb	r3, [r7, #7]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7ff fee3 	bl	800f7f0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa2a:	2001      	movs	r0, #1
 800fa2c:	f7fd fae8 	bl	800d000 <memp_malloc>
 800fa30:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d03f      	beq.n	800fab8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fa38:	229c      	movs	r2, #156	; 0x9c
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f00b ff5f 	bl	801b900 <memset>
    pcb->prio = prio;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	79fa      	ldrb	r2, [r7, #7]
 800fa46:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa4e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa58:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	22ff      	movs	r2, #255	; 0xff
 800fa66:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fa6e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2206      	movs	r2, #6
 800fa74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2206      	movs	r2, #6
 800fa7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa84:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2201      	movs	r2, #1
 800fa8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fa8e:	4b0d      	ldr	r3, [pc, #52]	; (800fac4 <tcp_alloc+0xf8>)
 800fa90:	681a      	ldr	r2, [r3, #0]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fa96:	4b0c      	ldr	r3, [pc, #48]	; (800fac8 <tcp_alloc+0xfc>)
 800fa98:	781a      	ldrb	r2, [r3, #0]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800faa4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	4a08      	ldr	r2, [pc, #32]	; (800facc <tcp_alloc+0x100>)
 800faac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	4a07      	ldr	r2, [pc, #28]	; (800fad0 <tcp_alloc+0x104>)
 800fab4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fab8:	68fb      	ldr	r3, [r7, #12]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	20010664 	.word	0x20010664
 800fac8:	20008ae2 	.word	0x20008ae2
 800facc:	0800f785 	.word	0x0800f785
 800fad0:	006ddd00 	.word	0x006ddd00

0800fad4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	4603      	mov	r3, r0
 800fadc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fade:	2040      	movs	r0, #64	; 0x40
 800fae0:	f7ff ff74 	bl	800f9cc <tcp_alloc>
 800fae4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fae6:	68fb      	ldr	r3, [r7, #12]
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3710      	adds	r7, #16
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d002      	beq.n	800fb06 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	683a      	ldr	r2, [r7, #0]
 800fb04:	611a      	str	r2, [r3, #16]
  }
}
 800fb06:	bf00      	nop
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr
	...

0800fb14 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00e      	beq.n	800fb42 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	7d1b      	ldrb	r3, [r3, #20]
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d106      	bne.n	800fb3a <tcp_recv+0x26>
 800fb2c:	4b07      	ldr	r3, [pc, #28]	; (800fb4c <tcp_recv+0x38>)
 800fb2e:	f240 72df 	movw	r2, #2015	; 0x7df
 800fb32:	4907      	ldr	r1, [pc, #28]	; (800fb50 <tcp_recv+0x3c>)
 800fb34:	4807      	ldr	r0, [pc, #28]	; (800fb54 <tcp_recv+0x40>)
 800fb36:	f00b feeb 	bl	801b910 <iprintf>
    pcb->recv = recv;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	683a      	ldr	r2, [r7, #0]
 800fb3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fb42:	bf00      	nop
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	0801e67c 	.word	0x0801e67c
 800fb50:	0801ec18 	.word	0x0801ec18
 800fb54:	0801e6c0 	.word	0x0801e6c0

0800fb58 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00e      	beq.n	800fb86 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	7d1b      	ldrb	r3, [r3, #20]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d106      	bne.n	800fb7e <tcp_sent+0x26>
 800fb70:	4b07      	ldr	r3, [pc, #28]	; (800fb90 <tcp_sent+0x38>)
 800fb72:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fb76:	4907      	ldr	r1, [pc, #28]	; (800fb94 <tcp_sent+0x3c>)
 800fb78:	4807      	ldr	r0, [pc, #28]	; (800fb98 <tcp_sent+0x40>)
 800fb7a:	f00b fec9 	bl	801b910 <iprintf>
    pcb->sent = sent;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	683a      	ldr	r2, [r7, #0]
 800fb82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fb86:	bf00      	nop
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	0801e67c 	.word	0x0801e67c
 800fb94:	0801ec40 	.word	0x0801ec40
 800fb98:	0801e6c0 	.word	0x0801e6c0

0800fb9c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d00e      	beq.n	800fbca <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	7d1b      	ldrb	r3, [r3, #20]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d106      	bne.n	800fbc2 <tcp_err+0x26>
 800fbb4:	4b07      	ldr	r3, [pc, #28]	; (800fbd4 <tcp_err+0x38>)
 800fbb6:	f640 020d 	movw	r2, #2061	; 0x80d
 800fbba:	4907      	ldr	r1, [pc, #28]	; (800fbd8 <tcp_err+0x3c>)
 800fbbc:	4807      	ldr	r0, [pc, #28]	; (800fbdc <tcp_err+0x40>)
 800fbbe:	f00b fea7 	bl	801b910 <iprintf>
    pcb->errf = err;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	683a      	ldr	r2, [r7, #0]
 800fbc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fbca:	bf00      	nop
 800fbcc:	3708      	adds	r7, #8
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	0801e67c 	.word	0x0801e67c
 800fbd8:	0801ec68 	.word	0x0801ec68
 800fbdc:	0801e6c0 	.word	0x0801e6c0

0800fbe0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d008      	beq.n	800fc02 <tcp_accept+0x22>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	7d1b      	ldrb	r3, [r3, #20]
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d104      	bne.n	800fc02 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	683a      	ldr	r2, [r7, #0]
 800fc00:	619a      	str	r2, [r3, #24]
  }
}
 800fc02:	bf00      	nop
 800fc04:	3714      	adds	r7, #20
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
	...

0800fc10 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	60b9      	str	r1, [r7, #8]
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d107      	bne.n	800fc34 <tcp_poll+0x24>
 800fc24:	4b0e      	ldr	r3, [pc, #56]	; (800fc60 <tcp_poll+0x50>)
 800fc26:	f640 023d 	movw	r2, #2109	; 0x83d
 800fc2a:	490e      	ldr	r1, [pc, #56]	; (800fc64 <tcp_poll+0x54>)
 800fc2c:	480e      	ldr	r0, [pc, #56]	; (800fc68 <tcp_poll+0x58>)
 800fc2e:	f00b fe6f 	bl	801b910 <iprintf>
 800fc32:	e011      	b.n	800fc58 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	7d1b      	ldrb	r3, [r3, #20]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d106      	bne.n	800fc4a <tcp_poll+0x3a>
 800fc3c:	4b08      	ldr	r3, [pc, #32]	; (800fc60 <tcp_poll+0x50>)
 800fc3e:	f640 023e 	movw	r2, #2110	; 0x83e
 800fc42:	490a      	ldr	r1, [pc, #40]	; (800fc6c <tcp_poll+0x5c>)
 800fc44:	4808      	ldr	r0, [pc, #32]	; (800fc68 <tcp_poll+0x58>)
 800fc46:	f00b fe63 	bl	801b910 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	68ba      	ldr	r2, [r7, #8]
 800fc4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	79fa      	ldrb	r2, [r7, #7]
 800fc56:	775a      	strb	r2, [r3, #29]
}
 800fc58:	3710      	adds	r7, #16
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	0801e67c 	.word	0x0801e67c
 800fc64:	0801ec90 	.word	0x0801ec90
 800fc68:	0801e6c0 	.word	0x0801e6c0
 800fc6c:	0801eca8 	.word	0x0801eca8

0800fc70 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d107      	bne.n	800fc8e <tcp_pcb_purge+0x1e>
 800fc7e:	4b21      	ldr	r3, [pc, #132]	; (800fd04 <tcp_pcb_purge+0x94>)
 800fc80:	f640 0251 	movw	r2, #2129	; 0x851
 800fc84:	4920      	ldr	r1, [pc, #128]	; (800fd08 <tcp_pcb_purge+0x98>)
 800fc86:	4821      	ldr	r0, [pc, #132]	; (800fd0c <tcp_pcb_purge+0x9c>)
 800fc88:	f00b fe42 	bl	801b910 <iprintf>
 800fc8c:	e037      	b.n	800fcfe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	7d1b      	ldrb	r3, [r3, #20]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d033      	beq.n	800fcfe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fc9a:	2b0a      	cmp	r3, #10
 800fc9c:	d02f      	beq.n	800fcfe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d02b      	beq.n	800fcfe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d007      	beq.n	800fcbe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fe f8d8 	bl	800de68 <pbuf_free>
      pcb->refused_data = NULL;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d002      	beq.n	800fccc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 f986 	bl	800ffd8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcd2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7ff fcf9 	bl	800f6d0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff fcf4 	bl	800f6d0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2200      	movs	r2, #0
 800fcec:	66da      	str	r2, [r3, #108]	; 0x6c
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fcfe:	3708      	adds	r7, #8
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	0801e67c 	.word	0x0801e67c
 800fd08:	0801ecc8 	.word	0x0801ecc8
 800fd0c:	0801e6c0 	.word	0x0801e6c0

0800fd10 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d106      	bne.n	800fd2e <tcp_pcb_remove+0x1e>
 800fd20:	4b3e      	ldr	r3, [pc, #248]	; (800fe1c <tcp_pcb_remove+0x10c>)
 800fd22:	f640 0283 	movw	r2, #2179	; 0x883
 800fd26:	493e      	ldr	r1, [pc, #248]	; (800fe20 <tcp_pcb_remove+0x110>)
 800fd28:	483e      	ldr	r0, [pc, #248]	; (800fe24 <tcp_pcb_remove+0x114>)
 800fd2a:	f00b fdf1 	bl	801b910 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d106      	bne.n	800fd42 <tcp_pcb_remove+0x32>
 800fd34:	4b39      	ldr	r3, [pc, #228]	; (800fe1c <tcp_pcb_remove+0x10c>)
 800fd36:	f640 0284 	movw	r2, #2180	; 0x884
 800fd3a:	493b      	ldr	r1, [pc, #236]	; (800fe28 <tcp_pcb_remove+0x118>)
 800fd3c:	4839      	ldr	r0, [pc, #228]	; (800fe24 <tcp_pcb_remove+0x114>)
 800fd3e:	f00b fde7 	bl	801b910 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d105      	bne.n	800fd58 <tcp_pcb_remove+0x48>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	68da      	ldr	r2, [r3, #12]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	601a      	str	r2, [r3, #0]
 800fd56:	e013      	b.n	800fd80 <tcp_pcb_remove+0x70>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	60fb      	str	r3, [r7, #12]
 800fd5e:	e00c      	b.n	800fd7a <tcp_pcb_remove+0x6a>
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	683a      	ldr	r2, [r7, #0]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d104      	bne.n	800fd74 <tcp_pcb_remove+0x64>
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	68da      	ldr	r2, [r3, #12]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	60da      	str	r2, [r3, #12]
 800fd72:	e005      	b.n	800fd80 <tcp_pcb_remove+0x70>
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	60fb      	str	r3, [r7, #12]
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d1ef      	bne.n	800fd60 <tcp_pcb_remove+0x50>
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	2200      	movs	r2, #0
 800fd84:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fd86:	6838      	ldr	r0, [r7, #0]
 800fd88:	f7ff ff72 	bl	800fc70 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	7d1b      	ldrb	r3, [r3, #20]
 800fd90:	2b0a      	cmp	r3, #10
 800fd92:	d013      	beq.n	800fdbc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d00f      	beq.n	800fdbc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	8b5b      	ldrh	r3, [r3, #26]
 800fda0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d009      	beq.n	800fdbc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	8b5b      	ldrh	r3, [r3, #26]
 800fdac:	f043 0302 	orr.w	r3, r3, #2
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdb6:	6838      	ldr	r0, [r7, #0]
 800fdb8:	f003 fbc2 	bl	8013540 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	7d1b      	ldrb	r3, [r3, #20]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d020      	beq.n	800fe06 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d006      	beq.n	800fdda <tcp_pcb_remove+0xca>
 800fdcc:	4b13      	ldr	r3, [pc, #76]	; (800fe1c <tcp_pcb_remove+0x10c>)
 800fdce:	f640 0293 	movw	r2, #2195	; 0x893
 800fdd2:	4916      	ldr	r1, [pc, #88]	; (800fe2c <tcp_pcb_remove+0x11c>)
 800fdd4:	4813      	ldr	r0, [pc, #76]	; (800fe24 <tcp_pcb_remove+0x114>)
 800fdd6:	f00b fd9b 	bl	801b910 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d006      	beq.n	800fdf0 <tcp_pcb_remove+0xe0>
 800fde2:	4b0e      	ldr	r3, [pc, #56]	; (800fe1c <tcp_pcb_remove+0x10c>)
 800fde4:	f640 0294 	movw	r2, #2196	; 0x894
 800fde8:	4911      	ldr	r1, [pc, #68]	; (800fe30 <tcp_pcb_remove+0x120>)
 800fdea:	480e      	ldr	r0, [pc, #56]	; (800fe24 <tcp_pcb_remove+0x114>)
 800fdec:	f00b fd90 	bl	801b910 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d006      	beq.n	800fe06 <tcp_pcb_remove+0xf6>
 800fdf8:	4b08      	ldr	r3, [pc, #32]	; (800fe1c <tcp_pcb_remove+0x10c>)
 800fdfa:	f640 0296 	movw	r2, #2198	; 0x896
 800fdfe:	490d      	ldr	r1, [pc, #52]	; (800fe34 <tcp_pcb_remove+0x124>)
 800fe00:	4808      	ldr	r0, [pc, #32]	; (800fe24 <tcp_pcb_remove+0x114>)
 800fe02:	f00b fd85 	bl	801b910 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fe12:	bf00      	nop
 800fe14:	3710      	adds	r7, #16
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	0801e67c 	.word	0x0801e67c
 800fe20:	0801ece4 	.word	0x0801ece4
 800fe24:	0801e6c0 	.word	0x0801e6c0
 800fe28:	0801ed00 	.word	0x0801ed00
 800fe2c:	0801ed20 	.word	0x0801ed20
 800fe30:	0801ed38 	.word	0x0801ed38
 800fe34:	0801ed54 	.word	0x0801ed54

0800fe38 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d106      	bne.n	800fe54 <tcp_next_iss+0x1c>
 800fe46:	4b0a      	ldr	r3, [pc, #40]	; (800fe70 <tcp_next_iss+0x38>)
 800fe48:	f640 02af 	movw	r2, #2223	; 0x8af
 800fe4c:	4909      	ldr	r1, [pc, #36]	; (800fe74 <tcp_next_iss+0x3c>)
 800fe4e:	480a      	ldr	r0, [pc, #40]	; (800fe78 <tcp_next_iss+0x40>)
 800fe50:	f00b fd5e 	bl	801b910 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fe54:	4b09      	ldr	r3, [pc, #36]	; (800fe7c <tcp_next_iss+0x44>)
 800fe56:	681a      	ldr	r2, [r3, #0]
 800fe58:	4b09      	ldr	r3, [pc, #36]	; (800fe80 <tcp_next_iss+0x48>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4413      	add	r3, r2
 800fe5e:	4a07      	ldr	r2, [pc, #28]	; (800fe7c <tcp_next_iss+0x44>)
 800fe60:	6013      	str	r3, [r2, #0]
  return iss;
 800fe62:	4b06      	ldr	r3, [pc, #24]	; (800fe7c <tcp_next_iss+0x44>)
 800fe64:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	0801e67c 	.word	0x0801e67c
 800fe74:	0801ed6c 	.word	0x0801ed6c
 800fe78:	0801e6c0 	.word	0x0801e6c0
 800fe7c:	20000014 	.word	0x20000014
 800fe80:	20010664 	.word	0x20010664

0800fe84 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b086      	sub	sp, #24
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
 800fe90:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d106      	bne.n	800fea6 <tcp_eff_send_mss_netif+0x22>
 800fe98:	4b14      	ldr	r3, [pc, #80]	; (800feec <tcp_eff_send_mss_netif+0x68>)
 800fe9a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fe9e:	4914      	ldr	r1, [pc, #80]	; (800fef0 <tcp_eff_send_mss_netif+0x6c>)
 800fea0:	4814      	ldr	r0, [pc, #80]	; (800fef4 <tcp_eff_send_mss_netif+0x70>)
 800fea2:	f00b fd35 	bl	801b910 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d101      	bne.n	800feb0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800feac:	89fb      	ldrh	r3, [r7, #14]
 800feae:	e019      	b.n	800fee4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800feb4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800feb6:	8afb      	ldrh	r3, [r7, #22]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d012      	beq.n	800fee2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800febc:	2328      	movs	r3, #40	; 0x28
 800febe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fec0:	8afa      	ldrh	r2, [r7, #22]
 800fec2:	8abb      	ldrh	r3, [r7, #20]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d904      	bls.n	800fed2 <tcp_eff_send_mss_netif+0x4e>
 800fec8:	8afa      	ldrh	r2, [r7, #22]
 800feca:	8abb      	ldrh	r3, [r7, #20]
 800fecc:	1ad3      	subs	r3, r2, r3
 800fece:	b29b      	uxth	r3, r3
 800fed0:	e000      	b.n	800fed4 <tcp_eff_send_mss_netif+0x50>
 800fed2:	2300      	movs	r3, #0
 800fed4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fed6:	8a7a      	ldrh	r2, [r7, #18]
 800fed8:	89fb      	ldrh	r3, [r7, #14]
 800feda:	4293      	cmp	r3, r2
 800fedc:	bf28      	it	cs
 800fede:	4613      	movcs	r3, r2
 800fee0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fee2:	89fb      	ldrh	r3, [r7, #14]
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3718      	adds	r7, #24
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	0801e67c 	.word	0x0801e67c
 800fef0:	0801ed88 	.word	0x0801ed88
 800fef4:	0801e6c0 	.word	0x0801e6c0

0800fef8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d119      	bne.n	800ff40 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ff0c:	4b10      	ldr	r3, [pc, #64]	; (800ff50 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ff0e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ff12:	4910      	ldr	r1, [pc, #64]	; (800ff54 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ff14:	4810      	ldr	r0, [pc, #64]	; (800ff58 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ff16:	f00b fcfb 	bl	801b910 <iprintf>

  while (pcb != NULL) {
 800ff1a:	e011      	b.n	800ff40 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d108      	bne.n	800ff3a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ff2e:	68f8      	ldr	r0, [r7, #12]
 800ff30:	f7fe fd9a 	bl	800ea68 <tcp_abort>
      pcb = next;
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	60fb      	str	r3, [r7, #12]
 800ff38:	e002      	b.n	800ff40 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1ea      	bne.n	800ff1c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ff46:	bf00      	nop
 800ff48:	bf00      	nop
 800ff4a:	3710      	adds	r7, #16
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	0801e67c 	.word	0x0801e67c
 800ff54:	0801edb0 	.word	0x0801edb0
 800ff58:	0801e6c0 	.word	0x0801e6c0

0800ff5c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d02a      	beq.n	800ffc2 <tcp_netif_ip_addr_changed+0x66>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d026      	beq.n	800ffc2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ff74:	4b15      	ldr	r3, [pc, #84]	; (800ffcc <tcp_netif_ip_addr_changed+0x70>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	4619      	mov	r1, r3
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7ff ffbc 	bl	800fef8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ff80:	4b13      	ldr	r3, [pc, #76]	; (800ffd0 <tcp_netif_ip_addr_changed+0x74>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4619      	mov	r1, r3
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f7ff ffb6 	bl	800fef8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d017      	beq.n	800ffc2 <tcp_netif_ip_addr_changed+0x66>
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d013      	beq.n	800ffc2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff9a:	4b0e      	ldr	r3, [pc, #56]	; (800ffd4 <tcp_netif_ip_addr_changed+0x78>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	60fb      	str	r3, [r7, #12]
 800ffa0:	e00c      	b.n	800ffbc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d103      	bne.n	800ffb6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	681a      	ldr	r2, [r3, #0]
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	68db      	ldr	r3, [r3, #12]
 800ffba:	60fb      	str	r3, [r7, #12]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d1ef      	bne.n	800ffa2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ffc2:	bf00      	nop
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	20010660 	.word	0x20010660
 800ffd0:	2001066c 	.word	0x2001066c
 800ffd4:	20010668 	.word	0x20010668

0800ffd8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d007      	beq.n	800fff8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7ff fb6f 	bl	800f6d0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fff8:	bf00      	nop
 800fffa:	3708      	adds	r7, #8
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010000:	b590      	push	{r4, r7, lr}
 8010002:	b08d      	sub	sp, #52	; 0x34
 8010004:	af04      	add	r7, sp, #16
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d105      	bne.n	801001c <tcp_input+0x1c>
 8010010:	4b9b      	ldr	r3, [pc, #620]	; (8010280 <tcp_input+0x280>)
 8010012:	2283      	movs	r2, #131	; 0x83
 8010014:	499b      	ldr	r1, [pc, #620]	; (8010284 <tcp_input+0x284>)
 8010016:	489c      	ldr	r0, [pc, #624]	; (8010288 <tcp_input+0x288>)
 8010018:	f00b fc7a 	bl	801b910 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	4a9a      	ldr	r2, [pc, #616]	; (801028c <tcp_input+0x28c>)
 8010022:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	895b      	ldrh	r3, [r3, #10]
 8010028:	2b13      	cmp	r3, #19
 801002a:	f240 83c4 	bls.w	80107b6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801002e:	4b98      	ldr	r3, [pc, #608]	; (8010290 <tcp_input+0x290>)
 8010030:	695b      	ldr	r3, [r3, #20]
 8010032:	4a97      	ldr	r2, [pc, #604]	; (8010290 <tcp_input+0x290>)
 8010034:	6812      	ldr	r2, [r2, #0]
 8010036:	4611      	mov	r1, r2
 8010038:	4618      	mov	r0, r3
 801003a:	f008 fb17 	bl	801866c <ip4_addr_isbroadcast_u32>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	f040 83ba 	bne.w	80107ba <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010046:	4b92      	ldr	r3, [pc, #584]	; (8010290 <tcp_input+0x290>)
 8010048:	695b      	ldr	r3, [r3, #20]
 801004a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801004e:	2be0      	cmp	r3, #224	; 0xe0
 8010050:	f000 83b3 	beq.w	80107ba <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010054:	4b8d      	ldr	r3, [pc, #564]	; (801028c <tcp_input+0x28c>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	899b      	ldrh	r3, [r3, #12]
 801005a:	b29b      	uxth	r3, r3
 801005c:	4618      	mov	r0, r3
 801005e:	f7fc fb19 	bl	800c694 <lwip_htons>
 8010062:	4603      	mov	r3, r0
 8010064:	0b1b      	lsrs	r3, r3, #12
 8010066:	b29b      	uxth	r3, r3
 8010068:	b2db      	uxtb	r3, r3
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801006e:	7cbb      	ldrb	r3, [r7, #18]
 8010070:	2b13      	cmp	r3, #19
 8010072:	f240 83a4 	bls.w	80107be <tcp_input+0x7be>
 8010076:	7cbb      	ldrb	r3, [r7, #18]
 8010078:	b29a      	uxth	r2, r3
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	891b      	ldrh	r3, [r3, #8]
 801007e:	429a      	cmp	r2, r3
 8010080:	f200 839d 	bhi.w	80107be <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010084:	7cbb      	ldrb	r3, [r7, #18]
 8010086:	b29b      	uxth	r3, r3
 8010088:	3b14      	subs	r3, #20
 801008a:	b29a      	uxth	r2, r3
 801008c:	4b81      	ldr	r3, [pc, #516]	; (8010294 <tcp_input+0x294>)
 801008e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010090:	4b81      	ldr	r3, [pc, #516]	; (8010298 <tcp_input+0x298>)
 8010092:	2200      	movs	r2, #0
 8010094:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	895a      	ldrh	r2, [r3, #10]
 801009a:	7cbb      	ldrb	r3, [r7, #18]
 801009c:	b29b      	uxth	r3, r3
 801009e:	429a      	cmp	r2, r3
 80100a0:	d309      	bcc.n	80100b6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80100a2:	4b7c      	ldr	r3, [pc, #496]	; (8010294 <tcp_input+0x294>)
 80100a4:	881a      	ldrh	r2, [r3, #0]
 80100a6:	4b7d      	ldr	r3, [pc, #500]	; (801029c <tcp_input+0x29c>)
 80100a8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80100aa:	7cbb      	ldrb	r3, [r7, #18]
 80100ac:	4619      	mov	r1, r3
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f7fd fe22 	bl	800dcf8 <pbuf_remove_header>
 80100b4:	e04e      	b.n	8010154 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d105      	bne.n	80100ca <tcp_input+0xca>
 80100be:	4b70      	ldr	r3, [pc, #448]	; (8010280 <tcp_input+0x280>)
 80100c0:	22c2      	movs	r2, #194	; 0xc2
 80100c2:	4977      	ldr	r1, [pc, #476]	; (80102a0 <tcp_input+0x2a0>)
 80100c4:	4870      	ldr	r0, [pc, #448]	; (8010288 <tcp_input+0x288>)
 80100c6:	f00b fc23 	bl	801b910 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80100ca:	2114      	movs	r1, #20
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f7fd fe13 	bl	800dcf8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	895a      	ldrh	r2, [r3, #10]
 80100d6:	4b71      	ldr	r3, [pc, #452]	; (801029c <tcp_input+0x29c>)
 80100d8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80100da:	4b6e      	ldr	r3, [pc, #440]	; (8010294 <tcp_input+0x294>)
 80100dc:	881a      	ldrh	r2, [r3, #0]
 80100de:	4b6f      	ldr	r3, [pc, #444]	; (801029c <tcp_input+0x29c>)
 80100e0:	881b      	ldrh	r3, [r3, #0]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80100e6:	4b6d      	ldr	r3, [pc, #436]	; (801029c <tcp_input+0x29c>)
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	4619      	mov	r1, r3
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f7fd fe03 	bl	800dcf8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	895b      	ldrh	r3, [r3, #10]
 80100f8:	8a3a      	ldrh	r2, [r7, #16]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	f200 8361 	bhi.w	80107c2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	4a64      	ldr	r2, [pc, #400]	; (8010298 <tcp_input+0x298>)
 8010108:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	8a3a      	ldrh	r2, [r7, #16]
 8010110:	4611      	mov	r1, r2
 8010112:	4618      	mov	r0, r3
 8010114:	f7fd fdf0 	bl	800dcf8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	891a      	ldrh	r2, [r3, #8]
 801011c:	8a3b      	ldrh	r3, [r7, #16]
 801011e:	1ad3      	subs	r3, r2, r3
 8010120:	b29a      	uxth	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	895b      	ldrh	r3, [r3, #10]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d005      	beq.n	801013a <tcp_input+0x13a>
 801012e:	4b54      	ldr	r3, [pc, #336]	; (8010280 <tcp_input+0x280>)
 8010130:	22df      	movs	r2, #223	; 0xdf
 8010132:	495c      	ldr	r1, [pc, #368]	; (80102a4 <tcp_input+0x2a4>)
 8010134:	4854      	ldr	r0, [pc, #336]	; (8010288 <tcp_input+0x288>)
 8010136:	f00b fbeb 	bl	801b910 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	891a      	ldrh	r2, [r3, #8]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	891b      	ldrh	r3, [r3, #8]
 8010144:	429a      	cmp	r2, r3
 8010146:	d005      	beq.n	8010154 <tcp_input+0x154>
 8010148:	4b4d      	ldr	r3, [pc, #308]	; (8010280 <tcp_input+0x280>)
 801014a:	22e0      	movs	r2, #224	; 0xe0
 801014c:	4956      	ldr	r1, [pc, #344]	; (80102a8 <tcp_input+0x2a8>)
 801014e:	484e      	ldr	r0, [pc, #312]	; (8010288 <tcp_input+0x288>)
 8010150:	f00b fbde 	bl	801b910 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010154:	4b4d      	ldr	r3, [pc, #308]	; (801028c <tcp_input+0x28c>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	881b      	ldrh	r3, [r3, #0]
 801015a:	b29b      	uxth	r3, r3
 801015c:	4a4b      	ldr	r2, [pc, #300]	; (801028c <tcp_input+0x28c>)
 801015e:	6814      	ldr	r4, [r2, #0]
 8010160:	4618      	mov	r0, r3
 8010162:	f7fc fa97 	bl	800c694 <lwip_htons>
 8010166:	4603      	mov	r3, r0
 8010168:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801016a:	4b48      	ldr	r3, [pc, #288]	; (801028c <tcp_input+0x28c>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	885b      	ldrh	r3, [r3, #2]
 8010170:	b29b      	uxth	r3, r3
 8010172:	4a46      	ldr	r2, [pc, #280]	; (801028c <tcp_input+0x28c>)
 8010174:	6814      	ldr	r4, [r2, #0]
 8010176:	4618      	mov	r0, r3
 8010178:	f7fc fa8c 	bl	800c694 <lwip_htons>
 801017c:	4603      	mov	r3, r0
 801017e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010180:	4b42      	ldr	r3, [pc, #264]	; (801028c <tcp_input+0x28c>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	4a41      	ldr	r2, [pc, #260]	; (801028c <tcp_input+0x28c>)
 8010188:	6814      	ldr	r4, [r2, #0]
 801018a:	4618      	mov	r0, r3
 801018c:	f7fc fa97 	bl	800c6be <lwip_htonl>
 8010190:	4603      	mov	r3, r0
 8010192:	6063      	str	r3, [r4, #4]
 8010194:	6863      	ldr	r3, [r4, #4]
 8010196:	4a45      	ldr	r2, [pc, #276]	; (80102ac <tcp_input+0x2ac>)
 8010198:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801019a:	4b3c      	ldr	r3, [pc, #240]	; (801028c <tcp_input+0x28c>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	689b      	ldr	r3, [r3, #8]
 80101a0:	4a3a      	ldr	r2, [pc, #232]	; (801028c <tcp_input+0x28c>)
 80101a2:	6814      	ldr	r4, [r2, #0]
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fc fa8a 	bl	800c6be <lwip_htonl>
 80101aa:	4603      	mov	r3, r0
 80101ac:	60a3      	str	r3, [r4, #8]
 80101ae:	68a3      	ldr	r3, [r4, #8]
 80101b0:	4a3f      	ldr	r2, [pc, #252]	; (80102b0 <tcp_input+0x2b0>)
 80101b2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80101b4:	4b35      	ldr	r3, [pc, #212]	; (801028c <tcp_input+0x28c>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	89db      	ldrh	r3, [r3, #14]
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	4a33      	ldr	r2, [pc, #204]	; (801028c <tcp_input+0x28c>)
 80101be:	6814      	ldr	r4, [r2, #0]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fc fa67 	bl	800c694 <lwip_htons>
 80101c6:	4603      	mov	r3, r0
 80101c8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80101ca:	4b30      	ldr	r3, [pc, #192]	; (801028c <tcp_input+0x28c>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	899b      	ldrh	r3, [r3, #12]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7fc fa5e 	bl	800c694 <lwip_htons>
 80101d8:	4603      	mov	r3, r0
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101e0:	b2da      	uxtb	r2, r3
 80101e2:	4b34      	ldr	r3, [pc, #208]	; (80102b4 <tcp_input+0x2b4>)
 80101e4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	891a      	ldrh	r2, [r3, #8]
 80101ea:	4b33      	ldr	r3, [pc, #204]	; (80102b8 <tcp_input+0x2b8>)
 80101ec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80101ee:	4b31      	ldr	r3, [pc, #196]	; (80102b4 <tcp_input+0x2b4>)
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	f003 0303 	and.w	r3, r3, #3
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d00c      	beq.n	8010214 <tcp_input+0x214>
    tcplen++;
 80101fa:	4b2f      	ldr	r3, [pc, #188]	; (80102b8 <tcp_input+0x2b8>)
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	3301      	adds	r3, #1
 8010200:	b29a      	uxth	r2, r3
 8010202:	4b2d      	ldr	r3, [pc, #180]	; (80102b8 <tcp_input+0x2b8>)
 8010204:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	891a      	ldrh	r2, [r3, #8]
 801020a:	4b2b      	ldr	r3, [pc, #172]	; (80102b8 <tcp_input+0x2b8>)
 801020c:	881b      	ldrh	r3, [r3, #0]
 801020e:	429a      	cmp	r2, r3
 8010210:	f200 82d9 	bhi.w	80107c6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010214:	2300      	movs	r3, #0
 8010216:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010218:	4b28      	ldr	r3, [pc, #160]	; (80102bc <tcp_input+0x2bc>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	61fb      	str	r3, [r7, #28]
 801021e:	e09d      	b.n	801035c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	7d1b      	ldrb	r3, [r3, #20]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d105      	bne.n	8010234 <tcp_input+0x234>
 8010228:	4b15      	ldr	r3, [pc, #84]	; (8010280 <tcp_input+0x280>)
 801022a:	22fb      	movs	r2, #251	; 0xfb
 801022c:	4924      	ldr	r1, [pc, #144]	; (80102c0 <tcp_input+0x2c0>)
 801022e:	4816      	ldr	r0, [pc, #88]	; (8010288 <tcp_input+0x288>)
 8010230:	f00b fb6e 	bl	801b910 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	7d1b      	ldrb	r3, [r3, #20]
 8010238:	2b0a      	cmp	r3, #10
 801023a:	d105      	bne.n	8010248 <tcp_input+0x248>
 801023c:	4b10      	ldr	r3, [pc, #64]	; (8010280 <tcp_input+0x280>)
 801023e:	22fc      	movs	r2, #252	; 0xfc
 8010240:	4920      	ldr	r1, [pc, #128]	; (80102c4 <tcp_input+0x2c4>)
 8010242:	4811      	ldr	r0, [pc, #68]	; (8010288 <tcp_input+0x288>)
 8010244:	f00b fb64 	bl	801b910 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	7d1b      	ldrb	r3, [r3, #20]
 801024c:	2b01      	cmp	r3, #1
 801024e:	d105      	bne.n	801025c <tcp_input+0x25c>
 8010250:	4b0b      	ldr	r3, [pc, #44]	; (8010280 <tcp_input+0x280>)
 8010252:	22fd      	movs	r2, #253	; 0xfd
 8010254:	491c      	ldr	r1, [pc, #112]	; (80102c8 <tcp_input+0x2c8>)
 8010256:	480c      	ldr	r0, [pc, #48]	; (8010288 <tcp_input+0x288>)
 8010258:	f00b fb5a 	bl	801b910 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	7a1b      	ldrb	r3, [r3, #8]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d033      	beq.n	80102cc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	7a1a      	ldrb	r2, [r3, #8]
 8010268:	4b09      	ldr	r3, [pc, #36]	; (8010290 <tcp_input+0x290>)
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010270:	3301      	adds	r3, #1
 8010272:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010274:	429a      	cmp	r2, r3
 8010276:	d029      	beq.n	80102cc <tcp_input+0x2cc>
      prev = pcb;
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	61bb      	str	r3, [r7, #24]
      continue;
 801027c:	e06b      	b.n	8010356 <tcp_input+0x356>
 801027e:	bf00      	nop
 8010280:	0801ede4 	.word	0x0801ede4
 8010284:	0801ee18 	.word	0x0801ee18
 8010288:	0801ee30 	.word	0x0801ee30
 801028c:	20008af4 	.word	0x20008af4
 8010290:	2000cf0c 	.word	0x2000cf0c
 8010294:	20008af8 	.word	0x20008af8
 8010298:	20008afc 	.word	0x20008afc
 801029c:	20008afa 	.word	0x20008afa
 80102a0:	0801ee58 	.word	0x0801ee58
 80102a4:	0801ee68 	.word	0x0801ee68
 80102a8:	0801ee74 	.word	0x0801ee74
 80102ac:	20008b04 	.word	0x20008b04
 80102b0:	20008b08 	.word	0x20008b08
 80102b4:	20008b10 	.word	0x20008b10
 80102b8:	20008b0e 	.word	0x20008b0e
 80102bc:	20010660 	.word	0x20010660
 80102c0:	0801ee94 	.word	0x0801ee94
 80102c4:	0801eebc 	.word	0x0801eebc
 80102c8:	0801eee8 	.word	0x0801eee8
    }

    if (pcb->remote_port == tcphdr->src &&
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	8b1a      	ldrh	r2, [r3, #24]
 80102d0:	4b94      	ldr	r3, [pc, #592]	; (8010524 <tcp_input+0x524>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	881b      	ldrh	r3, [r3, #0]
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	429a      	cmp	r2, r3
 80102da:	d13a      	bne.n	8010352 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	8ada      	ldrh	r2, [r3, #22]
 80102e0:	4b90      	ldr	r3, [pc, #576]	; (8010524 <tcp_input+0x524>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	885b      	ldrh	r3, [r3, #2]
 80102e6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d132      	bne.n	8010352 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	685a      	ldr	r2, [r3, #4]
 80102f0:	4b8d      	ldr	r3, [pc, #564]	; (8010528 <tcp_input+0x528>)
 80102f2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d12c      	bne.n	8010352 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	4b8a      	ldr	r3, [pc, #552]	; (8010528 <tcp_input+0x528>)
 80102fe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010300:	429a      	cmp	r2, r3
 8010302:	d126      	bne.n	8010352 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	69fa      	ldr	r2, [r7, #28]
 801030a:	429a      	cmp	r2, r3
 801030c:	d106      	bne.n	801031c <tcp_input+0x31c>
 801030e:	4b87      	ldr	r3, [pc, #540]	; (801052c <tcp_input+0x52c>)
 8010310:	f240 120d 	movw	r2, #269	; 0x10d
 8010314:	4986      	ldr	r1, [pc, #536]	; (8010530 <tcp_input+0x530>)
 8010316:	4887      	ldr	r0, [pc, #540]	; (8010534 <tcp_input+0x534>)
 8010318:	f00b fafa 	bl	801b910 <iprintf>
      if (prev != NULL) {
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d00a      	beq.n	8010338 <tcp_input+0x338>
        prev->next = pcb->next;
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	68da      	ldr	r2, [r3, #12]
 8010326:	69bb      	ldr	r3, [r7, #24]
 8010328:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801032a:	4b83      	ldr	r3, [pc, #524]	; (8010538 <tcp_input+0x538>)
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010332:	4a81      	ldr	r2, [pc, #516]	; (8010538 <tcp_input+0x538>)
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	68db      	ldr	r3, [r3, #12]
 801033c:	69fa      	ldr	r2, [r7, #28]
 801033e:	429a      	cmp	r2, r3
 8010340:	d111      	bne.n	8010366 <tcp_input+0x366>
 8010342:	4b7a      	ldr	r3, [pc, #488]	; (801052c <tcp_input+0x52c>)
 8010344:	f240 1215 	movw	r2, #277	; 0x115
 8010348:	497c      	ldr	r1, [pc, #496]	; (801053c <tcp_input+0x53c>)
 801034a:	487a      	ldr	r0, [pc, #488]	; (8010534 <tcp_input+0x534>)
 801034c:	f00b fae0 	bl	801b910 <iprintf>
      break;
 8010350:	e009      	b.n	8010366 <tcp_input+0x366>
    }
    prev = pcb;
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	61fb      	str	r3, [r7, #28]
 801035c:	69fb      	ldr	r3, [r7, #28]
 801035e:	2b00      	cmp	r3, #0
 8010360:	f47f af5e 	bne.w	8010220 <tcp_input+0x220>
 8010364:	e000      	b.n	8010368 <tcp_input+0x368>
      break;
 8010366:	bf00      	nop
  }

  if (pcb == NULL) {
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	2b00      	cmp	r3, #0
 801036c:	f040 8095 	bne.w	801049a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010370:	4b73      	ldr	r3, [pc, #460]	; (8010540 <tcp_input+0x540>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	61fb      	str	r3, [r7, #28]
 8010376:	e03f      	b.n	80103f8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	7d1b      	ldrb	r3, [r3, #20]
 801037c:	2b0a      	cmp	r3, #10
 801037e:	d006      	beq.n	801038e <tcp_input+0x38e>
 8010380:	4b6a      	ldr	r3, [pc, #424]	; (801052c <tcp_input+0x52c>)
 8010382:	f240 121f 	movw	r2, #287	; 0x11f
 8010386:	496f      	ldr	r1, [pc, #444]	; (8010544 <tcp_input+0x544>)
 8010388:	486a      	ldr	r0, [pc, #424]	; (8010534 <tcp_input+0x534>)
 801038a:	f00b fac1 	bl	801b910 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	7a1b      	ldrb	r3, [r3, #8]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d009      	beq.n	80103aa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	7a1a      	ldrb	r2, [r3, #8]
 801039a:	4b63      	ldr	r3, [pc, #396]	; (8010528 <tcp_input+0x528>)
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80103a2:	3301      	adds	r3, #1
 80103a4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d122      	bne.n	80103f0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	8b1a      	ldrh	r2, [r3, #24]
 80103ae:	4b5d      	ldr	r3, [pc, #372]	; (8010524 <tcp_input+0x524>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	881b      	ldrh	r3, [r3, #0]
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d11b      	bne.n	80103f2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	8ada      	ldrh	r2, [r3, #22]
 80103be:	4b59      	ldr	r3, [pc, #356]	; (8010524 <tcp_input+0x524>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	885b      	ldrh	r3, [r3, #2]
 80103c4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d113      	bne.n	80103f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	685a      	ldr	r2, [r3, #4]
 80103ce:	4b56      	ldr	r3, [pc, #344]	; (8010528 <tcp_input+0x528>)
 80103d0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d10d      	bne.n	80103f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	681a      	ldr	r2, [r3, #0]
 80103da:	4b53      	ldr	r3, [pc, #332]	; (8010528 <tcp_input+0x528>)
 80103dc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103de:	429a      	cmp	r2, r3
 80103e0:	d107      	bne.n	80103f2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80103e2:	69f8      	ldr	r0, [r7, #28]
 80103e4:	f000 fb54 	bl	8010a90 <tcp_timewait_input>
        }
        pbuf_free(p);
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f7fd fd3d 	bl	800de68 <pbuf_free>
        return;
 80103ee:	e1f0      	b.n	80107d2 <tcp_input+0x7d2>
        continue;
 80103f0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	61fb      	str	r3, [r7, #28]
 80103f8:	69fb      	ldr	r3, [r7, #28]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d1bc      	bne.n	8010378 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80103fe:	2300      	movs	r3, #0
 8010400:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010402:	4b51      	ldr	r3, [pc, #324]	; (8010548 <tcp_input+0x548>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	617b      	str	r3, [r7, #20]
 8010408:	e02a      	b.n	8010460 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	7a1b      	ldrb	r3, [r3, #8]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d00c      	beq.n	801042c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	7a1a      	ldrb	r2, [r3, #8]
 8010416:	4b44      	ldr	r3, [pc, #272]	; (8010528 <tcp_input+0x528>)
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801041e:	3301      	adds	r3, #1
 8010420:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010422:	429a      	cmp	r2, r3
 8010424:	d002      	beq.n	801042c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	61bb      	str	r3, [r7, #24]
        continue;
 801042a:	e016      	b.n	801045a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	8ada      	ldrh	r2, [r3, #22]
 8010430:	4b3c      	ldr	r3, [pc, #240]	; (8010524 <tcp_input+0x524>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	885b      	ldrh	r3, [r3, #2]
 8010436:	b29b      	uxth	r3, r3
 8010438:	429a      	cmp	r2, r3
 801043a:	d10c      	bne.n	8010456 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	4b39      	ldr	r3, [pc, #228]	; (8010528 <tcp_input+0x528>)
 8010442:	695b      	ldr	r3, [r3, #20]
 8010444:	429a      	cmp	r2, r3
 8010446:	d00f      	beq.n	8010468 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00d      	beq.n	801046a <tcp_input+0x46a>
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d009      	beq.n	801046a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	617b      	str	r3, [r7, #20]
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d1d1      	bne.n	801040a <tcp_input+0x40a>
 8010466:	e000      	b.n	801046a <tcp_input+0x46a>
            break;
 8010468:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d014      	beq.n	801049a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00a      	beq.n	801048c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	68da      	ldr	r2, [r3, #12]
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801047e:	4b32      	ldr	r3, [pc, #200]	; (8010548 <tcp_input+0x548>)
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010486:	4a30      	ldr	r2, [pc, #192]	; (8010548 <tcp_input+0x548>)
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801048c:	6978      	ldr	r0, [r7, #20]
 801048e:	f000 fa01 	bl	8010894 <tcp_listen_input>
      }
      pbuf_free(p);
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f7fd fce8 	bl	800de68 <pbuf_free>
      return;
 8010498:	e19b      	b.n	80107d2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801049a:	69fb      	ldr	r3, [r7, #28]
 801049c:	2b00      	cmp	r3, #0
 801049e:	f000 8160 	beq.w	8010762 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80104a2:	4b2a      	ldr	r3, [pc, #168]	; (801054c <tcp_input+0x54c>)
 80104a4:	2200      	movs	r2, #0
 80104a6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	891a      	ldrh	r2, [r3, #8]
 80104ac:	4b27      	ldr	r3, [pc, #156]	; (801054c <tcp_input+0x54c>)
 80104ae:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80104b0:	4a26      	ldr	r2, [pc, #152]	; (801054c <tcp_input+0x54c>)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80104b6:	4b1b      	ldr	r3, [pc, #108]	; (8010524 <tcp_input+0x524>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4a24      	ldr	r2, [pc, #144]	; (801054c <tcp_input+0x54c>)
 80104bc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80104be:	4b24      	ldr	r3, [pc, #144]	; (8010550 <tcp_input+0x550>)
 80104c0:	2200      	movs	r2, #0
 80104c2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80104c4:	4b23      	ldr	r3, [pc, #140]	; (8010554 <tcp_input+0x554>)
 80104c6:	2200      	movs	r2, #0
 80104c8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80104ca:	4b23      	ldr	r3, [pc, #140]	; (8010558 <tcp_input+0x558>)
 80104cc:	2200      	movs	r2, #0
 80104ce:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80104d0:	4b22      	ldr	r3, [pc, #136]	; (801055c <tcp_input+0x55c>)
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	f003 0308 	and.w	r3, r3, #8
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d006      	beq.n	80104ea <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	7b5b      	ldrb	r3, [r3, #13]
 80104e0:	f043 0301 	orr.w	r3, r3, #1
 80104e4:	b2da      	uxtb	r2, r3
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d038      	beq.n	8010564 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80104f2:	69f8      	ldr	r0, [r7, #28]
 80104f4:	f7ff f870 	bl	800f5d8 <tcp_process_refused_data>
 80104f8:	4603      	mov	r3, r0
 80104fa:	f113 0f0d 	cmn.w	r3, #13
 80104fe:	d007      	beq.n	8010510 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010504:	2b00      	cmp	r3, #0
 8010506:	d02d      	beq.n	8010564 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010508:	4b15      	ldr	r3, [pc, #84]	; (8010560 <tcp_input+0x560>)
 801050a:	881b      	ldrh	r3, [r3, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d029      	beq.n	8010564 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010514:	2b00      	cmp	r3, #0
 8010516:	f040 8104 	bne.w	8010722 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801051a:	69f8      	ldr	r0, [r7, #28]
 801051c:	f003 fe16 	bl	801414c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010520:	e0ff      	b.n	8010722 <tcp_input+0x722>
 8010522:	bf00      	nop
 8010524:	20008af4 	.word	0x20008af4
 8010528:	2000cf0c 	.word	0x2000cf0c
 801052c:	0801ede4 	.word	0x0801ede4
 8010530:	0801ef10 	.word	0x0801ef10
 8010534:	0801ee30 	.word	0x0801ee30
 8010538:	20010660 	.word	0x20010660
 801053c:	0801ef3c 	.word	0x0801ef3c
 8010540:	20010670 	.word	0x20010670
 8010544:	0801ef68 	.word	0x0801ef68
 8010548:	20010668 	.word	0x20010668
 801054c:	20008ae4 	.word	0x20008ae4
 8010550:	20008b14 	.word	0x20008b14
 8010554:	20008b11 	.word	0x20008b11
 8010558:	20008b0c 	.word	0x20008b0c
 801055c:	20008b10 	.word	0x20008b10
 8010560:	20008b0e 	.word	0x20008b0e
      }
    }
    tcp_input_pcb = pcb;
 8010564:	4a9c      	ldr	r2, [pc, #624]	; (80107d8 <tcp_input+0x7d8>)
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801056a:	69f8      	ldr	r0, [r7, #28]
 801056c:	f000 fb0a 	bl	8010b84 <tcp_process>
 8010570:	4603      	mov	r3, r0
 8010572:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010574:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010578:	f113 0f0d 	cmn.w	r3, #13
 801057c:	f000 80d3 	beq.w	8010726 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010580:	4b96      	ldr	r3, [pc, #600]	; (80107dc <tcp_input+0x7dc>)
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	f003 0308 	and.w	r3, r3, #8
 8010588:	2b00      	cmp	r3, #0
 801058a:	d015      	beq.n	80105b8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801058c:	69fb      	ldr	r3, [r7, #28]
 801058e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010592:	2b00      	cmp	r3, #0
 8010594:	d008      	beq.n	80105a8 <tcp_input+0x5a8>
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801059c:	69fa      	ldr	r2, [r7, #28]
 801059e:	6912      	ldr	r2, [r2, #16]
 80105a0:	f06f 010d 	mvn.w	r1, #13
 80105a4:	4610      	mov	r0, r2
 80105a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80105a8:	69f9      	ldr	r1, [r7, #28]
 80105aa:	488d      	ldr	r0, [pc, #564]	; (80107e0 <tcp_input+0x7e0>)
 80105ac:	f7ff fbb0 	bl	800fd10 <tcp_pcb_remove>
        tcp_free(pcb);
 80105b0:	69f8      	ldr	r0, [r7, #28]
 80105b2:	f7fd ff15 	bl	800e3e0 <tcp_free>
 80105b6:	e0c1      	b.n	801073c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80105b8:	2300      	movs	r3, #0
 80105ba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80105bc:	4b89      	ldr	r3, [pc, #548]	; (80107e4 <tcp_input+0x7e4>)
 80105be:	881b      	ldrh	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d01d      	beq.n	8010600 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80105c4:	4b87      	ldr	r3, [pc, #540]	; (80107e4 <tcp_input+0x7e4>)
 80105c6:	881b      	ldrh	r3, [r3, #0]
 80105c8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d00a      	beq.n	80105ea <tcp_input+0x5ea>
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105da:	69fa      	ldr	r2, [r7, #28]
 80105dc:	6910      	ldr	r0, [r2, #16]
 80105de:	89fa      	ldrh	r2, [r7, #14]
 80105e0:	69f9      	ldr	r1, [r7, #28]
 80105e2:	4798      	blx	r3
 80105e4:	4603      	mov	r3, r0
 80105e6:	74fb      	strb	r3, [r7, #19]
 80105e8:	e001      	b.n	80105ee <tcp_input+0x5ee>
 80105ea:	2300      	movs	r3, #0
 80105ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80105ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105f2:	f113 0f0d 	cmn.w	r3, #13
 80105f6:	f000 8098 	beq.w	801072a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80105fa:	4b7a      	ldr	r3, [pc, #488]	; (80107e4 <tcp_input+0x7e4>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010600:	69f8      	ldr	r0, [r7, #28]
 8010602:	f000 f907 	bl	8010814 <tcp_input_delayed_close>
 8010606:	4603      	mov	r3, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	f040 8090 	bne.w	801072e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801060e:	4b76      	ldr	r3, [pc, #472]	; (80107e8 <tcp_input+0x7e8>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d041      	beq.n	801069a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801061a:	2b00      	cmp	r3, #0
 801061c:	d006      	beq.n	801062c <tcp_input+0x62c>
 801061e:	4b73      	ldr	r3, [pc, #460]	; (80107ec <tcp_input+0x7ec>)
 8010620:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010624:	4972      	ldr	r1, [pc, #456]	; (80107f0 <tcp_input+0x7f0>)
 8010626:	4873      	ldr	r0, [pc, #460]	; (80107f4 <tcp_input+0x7f4>)
 8010628:	f00b f972 	bl	801b910 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	8b5b      	ldrh	r3, [r3, #26]
 8010630:	f003 0310 	and.w	r3, r3, #16
 8010634:	2b00      	cmp	r3, #0
 8010636:	d008      	beq.n	801064a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010638:	4b6b      	ldr	r3, [pc, #428]	; (80107e8 <tcp_input+0x7e8>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	4618      	mov	r0, r3
 801063e:	f7fd fc13 	bl	800de68 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010642:	69f8      	ldr	r0, [r7, #28]
 8010644:	f7fe fa10 	bl	800ea68 <tcp_abort>
            goto aborted;
 8010648:	e078      	b.n	801073c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010650:	2b00      	cmp	r3, #0
 8010652:	d00c      	beq.n	801066e <tcp_input+0x66e>
 8010654:	69fb      	ldr	r3, [r7, #28]
 8010656:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801065a:	69fb      	ldr	r3, [r7, #28]
 801065c:	6918      	ldr	r0, [r3, #16]
 801065e:	4b62      	ldr	r3, [pc, #392]	; (80107e8 <tcp_input+0x7e8>)
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	2300      	movs	r3, #0
 8010664:	69f9      	ldr	r1, [r7, #28]
 8010666:	47a0      	blx	r4
 8010668:	4603      	mov	r3, r0
 801066a:	74fb      	strb	r3, [r7, #19]
 801066c:	e008      	b.n	8010680 <tcp_input+0x680>
 801066e:	4b5e      	ldr	r3, [pc, #376]	; (80107e8 <tcp_input+0x7e8>)
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	2300      	movs	r3, #0
 8010674:	69f9      	ldr	r1, [r7, #28]
 8010676:	2000      	movs	r0, #0
 8010678:	f7ff f884 	bl	800f784 <tcp_recv_null>
 801067c:	4603      	mov	r3, r0
 801067e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010680:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010684:	f113 0f0d 	cmn.w	r3, #13
 8010688:	d053      	beq.n	8010732 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801068a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d003      	beq.n	801069a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010692:	4b55      	ldr	r3, [pc, #340]	; (80107e8 <tcp_input+0x7e8>)
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801069a:	4b50      	ldr	r3, [pc, #320]	; (80107dc <tcp_input+0x7dc>)
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	f003 0320 	and.w	r3, r3, #32
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d030      	beq.n	8010708 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80106a6:	69fb      	ldr	r3, [r7, #28]
 80106a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d009      	beq.n	80106c2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80106ae:	69fb      	ldr	r3, [r7, #28]
 80106b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106b2:	7b5a      	ldrb	r2, [r3, #13]
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106b8:	f042 0220 	orr.w	r2, r2, #32
 80106bc:	b2d2      	uxtb	r2, r2
 80106be:	735a      	strb	r2, [r3, #13]
 80106c0:	e022      	b.n	8010708 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80106c2:	69fb      	ldr	r3, [r7, #28]
 80106c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80106ca:	d005      	beq.n	80106d8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106d0:	3301      	adds	r3, #1
 80106d2:	b29a      	uxth	r2, r3
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d00b      	beq.n	80106fa <tcp_input+0x6fa>
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	6918      	ldr	r0, [r3, #16]
 80106ec:	2300      	movs	r3, #0
 80106ee:	2200      	movs	r2, #0
 80106f0:	69f9      	ldr	r1, [r7, #28]
 80106f2:	47a0      	blx	r4
 80106f4:	4603      	mov	r3, r0
 80106f6:	74fb      	strb	r3, [r7, #19]
 80106f8:	e001      	b.n	80106fe <tcp_input+0x6fe>
 80106fa:	2300      	movs	r3, #0
 80106fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80106fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010702:	f113 0f0d 	cmn.w	r3, #13
 8010706:	d016      	beq.n	8010736 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010708:	4b33      	ldr	r3, [pc, #204]	; (80107d8 <tcp_input+0x7d8>)
 801070a:	2200      	movs	r2, #0
 801070c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801070e:	69f8      	ldr	r0, [r7, #28]
 8010710:	f000 f880 	bl	8010814 <tcp_input_delayed_close>
 8010714:	4603      	mov	r3, r0
 8010716:	2b00      	cmp	r3, #0
 8010718:	d10f      	bne.n	801073a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801071a:	69f8      	ldr	r0, [r7, #28]
 801071c:	f002 ff10 	bl	8013540 <tcp_output>
 8010720:	e00c      	b.n	801073c <tcp_input+0x73c>
        goto aborted;
 8010722:	bf00      	nop
 8010724:	e00a      	b.n	801073c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010726:	bf00      	nop
 8010728:	e008      	b.n	801073c <tcp_input+0x73c>
              goto aborted;
 801072a:	bf00      	nop
 801072c:	e006      	b.n	801073c <tcp_input+0x73c>
          goto aborted;
 801072e:	bf00      	nop
 8010730:	e004      	b.n	801073c <tcp_input+0x73c>
            goto aborted;
 8010732:	bf00      	nop
 8010734:	e002      	b.n	801073c <tcp_input+0x73c>
              goto aborted;
 8010736:	bf00      	nop
 8010738:	e000      	b.n	801073c <tcp_input+0x73c>
          goto aborted;
 801073a:	bf00      	nop
    tcp_input_pcb = NULL;
 801073c:	4b26      	ldr	r3, [pc, #152]	; (80107d8 <tcp_input+0x7d8>)
 801073e:	2200      	movs	r2, #0
 8010740:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010742:	4b29      	ldr	r3, [pc, #164]	; (80107e8 <tcp_input+0x7e8>)
 8010744:	2200      	movs	r2, #0
 8010746:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010748:	4b2b      	ldr	r3, [pc, #172]	; (80107f8 <tcp_input+0x7f8>)
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d03f      	beq.n	80107d0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010750:	4b29      	ldr	r3, [pc, #164]	; (80107f8 <tcp_input+0x7f8>)
 8010752:	685b      	ldr	r3, [r3, #4]
 8010754:	4618      	mov	r0, r3
 8010756:	f7fd fb87 	bl	800de68 <pbuf_free>
      inseg.p = NULL;
 801075a:	4b27      	ldr	r3, [pc, #156]	; (80107f8 <tcp_input+0x7f8>)
 801075c:	2200      	movs	r2, #0
 801075e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010760:	e036      	b.n	80107d0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010762:	4b26      	ldr	r3, [pc, #152]	; (80107fc <tcp_input+0x7fc>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	899b      	ldrh	r3, [r3, #12]
 8010768:	b29b      	uxth	r3, r3
 801076a:	4618      	mov	r0, r3
 801076c:	f7fb ff92 	bl	800c694 <lwip_htons>
 8010770:	4603      	mov	r3, r0
 8010772:	b2db      	uxtb	r3, r3
 8010774:	f003 0304 	and.w	r3, r3, #4
 8010778:	2b00      	cmp	r3, #0
 801077a:	d118      	bne.n	80107ae <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801077c:	4b20      	ldr	r3, [pc, #128]	; (8010800 <tcp_input+0x800>)
 801077e:	6819      	ldr	r1, [r3, #0]
 8010780:	4b20      	ldr	r3, [pc, #128]	; (8010804 <tcp_input+0x804>)
 8010782:	881b      	ldrh	r3, [r3, #0]
 8010784:	461a      	mov	r2, r3
 8010786:	4b20      	ldr	r3, [pc, #128]	; (8010808 <tcp_input+0x808>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801078c:	4b1b      	ldr	r3, [pc, #108]	; (80107fc <tcp_input+0x7fc>)
 801078e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010790:	885b      	ldrh	r3, [r3, #2]
 8010792:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010794:	4a19      	ldr	r2, [pc, #100]	; (80107fc <tcp_input+0x7fc>)
 8010796:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010798:	8812      	ldrh	r2, [r2, #0]
 801079a:	b292      	uxth	r2, r2
 801079c:	9202      	str	r2, [sp, #8]
 801079e:	9301      	str	r3, [sp, #4]
 80107a0:	4b1a      	ldr	r3, [pc, #104]	; (801080c <tcp_input+0x80c>)
 80107a2:	9300      	str	r3, [sp, #0]
 80107a4:	4b1a      	ldr	r3, [pc, #104]	; (8010810 <tcp_input+0x810>)
 80107a6:	4602      	mov	r2, r0
 80107a8:	2000      	movs	r0, #0
 80107aa:	f003 fc7d 	bl	80140a8 <tcp_rst>
    pbuf_free(p);
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f7fd fb5a 	bl	800de68 <pbuf_free>
  return;
 80107b4:	e00c      	b.n	80107d0 <tcp_input+0x7d0>
    goto dropped;
 80107b6:	bf00      	nop
 80107b8:	e006      	b.n	80107c8 <tcp_input+0x7c8>
    goto dropped;
 80107ba:	bf00      	nop
 80107bc:	e004      	b.n	80107c8 <tcp_input+0x7c8>
    goto dropped;
 80107be:	bf00      	nop
 80107c0:	e002      	b.n	80107c8 <tcp_input+0x7c8>
      goto dropped;
 80107c2:	bf00      	nop
 80107c4:	e000      	b.n	80107c8 <tcp_input+0x7c8>
      goto dropped;
 80107c6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f7fd fb4d 	bl	800de68 <pbuf_free>
 80107ce:	e000      	b.n	80107d2 <tcp_input+0x7d2>
  return;
 80107d0:	bf00      	nop
}
 80107d2:	3724      	adds	r7, #36	; 0x24
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd90      	pop	{r4, r7, pc}
 80107d8:	20010674 	.word	0x20010674
 80107dc:	20008b11 	.word	0x20008b11
 80107e0:	20010660 	.word	0x20010660
 80107e4:	20008b0c 	.word	0x20008b0c
 80107e8:	20008b14 	.word	0x20008b14
 80107ec:	0801ede4 	.word	0x0801ede4
 80107f0:	0801ef98 	.word	0x0801ef98
 80107f4:	0801ee30 	.word	0x0801ee30
 80107f8:	20008ae4 	.word	0x20008ae4
 80107fc:	20008af4 	.word	0x20008af4
 8010800:	20008b08 	.word	0x20008b08
 8010804:	20008b0e 	.word	0x20008b0e
 8010808:	20008b04 	.word	0x20008b04
 801080c:	2000cf1c 	.word	0x2000cf1c
 8010810:	2000cf20 	.word	0x2000cf20

08010814 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d106      	bne.n	8010830 <tcp_input_delayed_close+0x1c>
 8010822:	4b17      	ldr	r3, [pc, #92]	; (8010880 <tcp_input_delayed_close+0x6c>)
 8010824:	f240 225a 	movw	r2, #602	; 0x25a
 8010828:	4916      	ldr	r1, [pc, #88]	; (8010884 <tcp_input_delayed_close+0x70>)
 801082a:	4817      	ldr	r0, [pc, #92]	; (8010888 <tcp_input_delayed_close+0x74>)
 801082c:	f00b f870 	bl	801b910 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010830:	4b16      	ldr	r3, [pc, #88]	; (801088c <tcp_input_delayed_close+0x78>)
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	f003 0310 	and.w	r3, r3, #16
 8010838:	2b00      	cmp	r3, #0
 801083a:	d01c      	beq.n	8010876 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	8b5b      	ldrh	r3, [r3, #26]
 8010840:	f003 0310 	and.w	r3, r3, #16
 8010844:	2b00      	cmp	r3, #0
 8010846:	d10d      	bne.n	8010864 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801084e:	2b00      	cmp	r3, #0
 8010850:	d008      	beq.n	8010864 <tcp_input_delayed_close+0x50>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	6912      	ldr	r2, [r2, #16]
 801085c:	f06f 010e 	mvn.w	r1, #14
 8010860:	4610      	mov	r0, r2
 8010862:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010864:	6879      	ldr	r1, [r7, #4]
 8010866:	480a      	ldr	r0, [pc, #40]	; (8010890 <tcp_input_delayed_close+0x7c>)
 8010868:	f7ff fa52 	bl	800fd10 <tcp_pcb_remove>
    tcp_free(pcb);
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7fd fdb7 	bl	800e3e0 <tcp_free>
    return 1;
 8010872:	2301      	movs	r3, #1
 8010874:	e000      	b.n	8010878 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010876:	2300      	movs	r3, #0
}
 8010878:	4618      	mov	r0, r3
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	0801ede4 	.word	0x0801ede4
 8010884:	0801efb4 	.word	0x0801efb4
 8010888:	0801ee30 	.word	0x0801ee30
 801088c:	20008b11 	.word	0x20008b11
 8010890:	20010660 	.word	0x20010660

08010894 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010894:	b590      	push	{r4, r7, lr}
 8010896:	b08b      	sub	sp, #44	; 0x2c
 8010898:	af04      	add	r7, sp, #16
 801089a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801089c:	4b6f      	ldr	r3, [pc, #444]	; (8010a5c <tcp_listen_input+0x1c8>)
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	f003 0304 	and.w	r3, r3, #4
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f040 80d2 	bne.w	8010a4e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d106      	bne.n	80108be <tcp_listen_input+0x2a>
 80108b0:	4b6b      	ldr	r3, [pc, #428]	; (8010a60 <tcp_listen_input+0x1cc>)
 80108b2:	f240 2281 	movw	r2, #641	; 0x281
 80108b6:	496b      	ldr	r1, [pc, #428]	; (8010a64 <tcp_listen_input+0x1d0>)
 80108b8:	486b      	ldr	r0, [pc, #428]	; (8010a68 <tcp_listen_input+0x1d4>)
 80108ba:	f00b f829 	bl	801b910 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80108be:	4b67      	ldr	r3, [pc, #412]	; (8010a5c <tcp_listen_input+0x1c8>)
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	f003 0310 	and.w	r3, r3, #16
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d019      	beq.n	80108fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108ca:	4b68      	ldr	r3, [pc, #416]	; (8010a6c <tcp_listen_input+0x1d8>)
 80108cc:	6819      	ldr	r1, [r3, #0]
 80108ce:	4b68      	ldr	r3, [pc, #416]	; (8010a70 <tcp_listen_input+0x1dc>)
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	461a      	mov	r2, r3
 80108d4:	4b67      	ldr	r3, [pc, #412]	; (8010a74 <tcp_listen_input+0x1e0>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108da:	4b67      	ldr	r3, [pc, #412]	; (8010a78 <tcp_listen_input+0x1e4>)
 80108dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108de:	885b      	ldrh	r3, [r3, #2]
 80108e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108e2:	4a65      	ldr	r2, [pc, #404]	; (8010a78 <tcp_listen_input+0x1e4>)
 80108e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108e6:	8812      	ldrh	r2, [r2, #0]
 80108e8:	b292      	uxth	r2, r2
 80108ea:	9202      	str	r2, [sp, #8]
 80108ec:	9301      	str	r3, [sp, #4]
 80108ee:	4b63      	ldr	r3, [pc, #396]	; (8010a7c <tcp_listen_input+0x1e8>)
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	4b63      	ldr	r3, [pc, #396]	; (8010a80 <tcp_listen_input+0x1ec>)
 80108f4:	4602      	mov	r2, r0
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f003 fbd6 	bl	80140a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80108fc:	e0a9      	b.n	8010a52 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80108fe:	4b57      	ldr	r3, [pc, #348]	; (8010a5c <tcp_listen_input+0x1c8>)
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	f003 0302 	and.w	r3, r3, #2
 8010906:	2b00      	cmp	r3, #0
 8010908:	f000 80a3 	beq.w	8010a52 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	7d5b      	ldrb	r3, [r3, #21]
 8010910:	4618      	mov	r0, r3
 8010912:	f7ff f85b 	bl	800f9cc <tcp_alloc>
 8010916:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d111      	bne.n	8010942 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	699b      	ldr	r3, [r3, #24]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00a      	beq.n	801093c <tcp_listen_input+0xa8>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	699b      	ldr	r3, [r3, #24]
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	6910      	ldr	r0, [r2, #16]
 801092e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010932:	2100      	movs	r1, #0
 8010934:	4798      	blx	r3
 8010936:	4603      	mov	r3, r0
 8010938:	73bb      	strb	r3, [r7, #14]
      return;
 801093a:	e08b      	b.n	8010a54 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801093c:	23f0      	movs	r3, #240	; 0xf0
 801093e:	73bb      	strb	r3, [r7, #14]
      return;
 8010940:	e088      	b.n	8010a54 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010942:	4b50      	ldr	r3, [pc, #320]	; (8010a84 <tcp_listen_input+0x1f0>)
 8010944:	695a      	ldr	r2, [r3, #20]
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801094a:	4b4e      	ldr	r3, [pc, #312]	; (8010a84 <tcp_listen_input+0x1f0>)
 801094c:	691a      	ldr	r2, [r3, #16]
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	8ada      	ldrh	r2, [r3, #22]
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801095a:	4b47      	ldr	r3, [pc, #284]	; (8010a78 <tcp_listen_input+0x1e4>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	881b      	ldrh	r3, [r3, #0]
 8010960:	b29a      	uxth	r2, r3
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	2203      	movs	r2, #3
 801096a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801096c:	4b41      	ldr	r3, [pc, #260]	; (8010a74 <tcp_listen_input+0x1e0>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	1c5a      	adds	r2, r3, #1
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801097e:	6978      	ldr	r0, [r7, #20]
 8010980:	f7ff fa5a 	bl	800fe38 <tcp_next_iss>
 8010984:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	693a      	ldr	r2, [r7, #16]
 801098a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	693a      	ldr	r2, [r7, #16]
 8010990:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	693a      	ldr	r2, [r7, #16]
 8010996:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	693a      	ldr	r2, [r7, #16]
 801099c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801099e:	4b35      	ldr	r3, [pc, #212]	; (8010a74 <tcp_listen_input+0x1e0>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	1e5a      	subs	r2, r3, #1
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	691a      	ldr	r2, [r3, #16]
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	7a5b      	ldrb	r3, [r3, #9]
 80109ba:	f003 030c 	and.w	r3, r3, #12
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	7a1a      	ldrb	r2, [r3, #8]
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80109cc:	4b2e      	ldr	r3, [pc, #184]	; (8010a88 <tcp_listen_input+0x1f4>)
 80109ce:	681a      	ldr	r2, [r3, #0]
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	60da      	str	r2, [r3, #12]
 80109d4:	4a2c      	ldr	r2, [pc, #176]	; (8010a88 <tcp_listen_input+0x1f4>)
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	6013      	str	r3, [r2, #0]
 80109da:	f003 fd27 	bl	801442c <tcp_timer_needed>
 80109de:	4b2b      	ldr	r3, [pc, #172]	; (8010a8c <tcp_listen_input+0x1f8>)
 80109e0:	2201      	movs	r2, #1
 80109e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80109e4:	6978      	ldr	r0, [r7, #20]
 80109e6:	f001 fd8d 	bl	8012504 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80109ea:	4b23      	ldr	r3, [pc, #140]	; (8010a78 <tcp_listen_input+0x1e4>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	89db      	ldrh	r3, [r3, #14]
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f007 fb79 	bl	8018104 <ip4_route>
 8010a12:	4601      	mov	r1, r0
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	3304      	adds	r3, #4
 8010a18:	461a      	mov	r2, r3
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	f7ff fa32 	bl	800fe84 <tcp_eff_send_mss_netif>
 8010a20:	4603      	mov	r3, r0
 8010a22:	461a      	mov	r2, r3
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010a28:	2112      	movs	r1, #18
 8010a2a:	6978      	ldr	r0, [r7, #20]
 8010a2c:	f002 fc9a 	bl	8013364 <tcp_enqueue_flags>
 8010a30:	4603      	mov	r3, r0
 8010a32:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d004      	beq.n	8010a46 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010a3c:	2100      	movs	r1, #0
 8010a3e:	6978      	ldr	r0, [r7, #20]
 8010a40:	f7fd ff54 	bl	800e8ec <tcp_abandon>
      return;
 8010a44:	e006      	b.n	8010a54 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010a46:	6978      	ldr	r0, [r7, #20]
 8010a48:	f002 fd7a 	bl	8013540 <tcp_output>
  return;
 8010a4c:	e001      	b.n	8010a52 <tcp_listen_input+0x1be>
    return;
 8010a4e:	bf00      	nop
 8010a50:	e000      	b.n	8010a54 <tcp_listen_input+0x1c0>
  return;
 8010a52:	bf00      	nop
}
 8010a54:	371c      	adds	r7, #28
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd90      	pop	{r4, r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	20008b10 	.word	0x20008b10
 8010a60:	0801ede4 	.word	0x0801ede4
 8010a64:	0801efdc 	.word	0x0801efdc
 8010a68:	0801ee30 	.word	0x0801ee30
 8010a6c:	20008b08 	.word	0x20008b08
 8010a70:	20008b0e 	.word	0x20008b0e
 8010a74:	20008b04 	.word	0x20008b04
 8010a78:	20008af4 	.word	0x20008af4
 8010a7c:	2000cf1c 	.word	0x2000cf1c
 8010a80:	2000cf20 	.word	0x2000cf20
 8010a84:	2000cf0c 	.word	0x2000cf0c
 8010a88:	20010660 	.word	0x20010660
 8010a8c:	2001065c 	.word	0x2001065c

08010a90 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b086      	sub	sp, #24
 8010a94:	af04      	add	r7, sp, #16
 8010a96:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010a98:	4b2f      	ldr	r3, [pc, #188]	; (8010b58 <tcp_timewait_input+0xc8>)
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	f003 0304 	and.w	r3, r3, #4
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d153      	bne.n	8010b4c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d106      	bne.n	8010ab8 <tcp_timewait_input+0x28>
 8010aaa:	4b2c      	ldr	r3, [pc, #176]	; (8010b5c <tcp_timewait_input+0xcc>)
 8010aac:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010ab0:	492b      	ldr	r1, [pc, #172]	; (8010b60 <tcp_timewait_input+0xd0>)
 8010ab2:	482c      	ldr	r0, [pc, #176]	; (8010b64 <tcp_timewait_input+0xd4>)
 8010ab4:	f00a ff2c 	bl	801b910 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010ab8:	4b27      	ldr	r3, [pc, #156]	; (8010b58 <tcp_timewait_input+0xc8>)
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	f003 0302 	and.w	r3, r3, #2
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d02a      	beq.n	8010b1a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010ac4:	4b28      	ldr	r3, [pc, #160]	; (8010b68 <tcp_timewait_input+0xd8>)
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	db2d      	blt.n	8010b2e <tcp_timewait_input+0x9e>
 8010ad2:	4b25      	ldr	r3, [pc, #148]	; (8010b68 <tcp_timewait_input+0xd8>)
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ada:	6879      	ldr	r1, [r7, #4]
 8010adc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ade:	440b      	add	r3, r1
 8010ae0:	1ad3      	subs	r3, r2, r3
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	dc23      	bgt.n	8010b2e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ae6:	4b21      	ldr	r3, [pc, #132]	; (8010b6c <tcp_timewait_input+0xdc>)
 8010ae8:	6819      	ldr	r1, [r3, #0]
 8010aea:	4b21      	ldr	r3, [pc, #132]	; (8010b70 <tcp_timewait_input+0xe0>)
 8010aec:	881b      	ldrh	r3, [r3, #0]
 8010aee:	461a      	mov	r2, r3
 8010af0:	4b1d      	ldr	r3, [pc, #116]	; (8010b68 <tcp_timewait_input+0xd8>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010af6:	4b1f      	ldr	r3, [pc, #124]	; (8010b74 <tcp_timewait_input+0xe4>)
 8010af8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010afa:	885b      	ldrh	r3, [r3, #2]
 8010afc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010afe:	4a1d      	ldr	r2, [pc, #116]	; (8010b74 <tcp_timewait_input+0xe4>)
 8010b00:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b02:	8812      	ldrh	r2, [r2, #0]
 8010b04:	b292      	uxth	r2, r2
 8010b06:	9202      	str	r2, [sp, #8]
 8010b08:	9301      	str	r3, [sp, #4]
 8010b0a:	4b1b      	ldr	r3, [pc, #108]	; (8010b78 <tcp_timewait_input+0xe8>)
 8010b0c:	9300      	str	r3, [sp, #0]
 8010b0e:	4b1b      	ldr	r3, [pc, #108]	; (8010b7c <tcp_timewait_input+0xec>)
 8010b10:	4602      	mov	r2, r0
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f003 fac8 	bl	80140a8 <tcp_rst>
      return;
 8010b18:	e01b      	b.n	8010b52 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010b1a:	4b0f      	ldr	r3, [pc, #60]	; (8010b58 <tcp_timewait_input+0xc8>)
 8010b1c:	781b      	ldrb	r3, [r3, #0]
 8010b1e:	f003 0301 	and.w	r3, r3, #1
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d003      	beq.n	8010b2e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010b26:	4b16      	ldr	r3, [pc, #88]	; (8010b80 <tcp_timewait_input+0xf0>)
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010b2e:	4b10      	ldr	r3, [pc, #64]	; (8010b70 <tcp_timewait_input+0xe0>)
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d00c      	beq.n	8010b50 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	8b5b      	ldrh	r3, [r3, #26]
 8010b3a:	f043 0302 	orr.w	r3, r3, #2
 8010b3e:	b29a      	uxth	r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f002 fcfb 	bl	8013540 <tcp_output>
  }
  return;
 8010b4a:	e001      	b.n	8010b50 <tcp_timewait_input+0xc0>
    return;
 8010b4c:	bf00      	nop
 8010b4e:	e000      	b.n	8010b52 <tcp_timewait_input+0xc2>
  return;
 8010b50:	bf00      	nop
}
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	20008b10 	.word	0x20008b10
 8010b5c:	0801ede4 	.word	0x0801ede4
 8010b60:	0801effc 	.word	0x0801effc
 8010b64:	0801ee30 	.word	0x0801ee30
 8010b68:	20008b04 	.word	0x20008b04
 8010b6c:	20008b08 	.word	0x20008b08
 8010b70:	20008b0e 	.word	0x20008b0e
 8010b74:	20008af4 	.word	0x20008af4
 8010b78:	2000cf1c 	.word	0x2000cf1c
 8010b7c:	2000cf20 	.word	0x2000cf20
 8010b80:	20010664 	.word	0x20010664

08010b84 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010b84:	b590      	push	{r4, r7, lr}
 8010b86:	b08d      	sub	sp, #52	; 0x34
 8010b88:	af04      	add	r7, sp, #16
 8010b8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010b90:	2300      	movs	r3, #0
 8010b92:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d106      	bne.n	8010ba8 <tcp_process+0x24>
 8010b9a:	4ba5      	ldr	r3, [pc, #660]	; (8010e30 <tcp_process+0x2ac>)
 8010b9c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010ba0:	49a4      	ldr	r1, [pc, #656]	; (8010e34 <tcp_process+0x2b0>)
 8010ba2:	48a5      	ldr	r0, [pc, #660]	; (8010e38 <tcp_process+0x2b4>)
 8010ba4:	f00a feb4 	bl	801b910 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010ba8:	4ba4      	ldr	r3, [pc, #656]	; (8010e3c <tcp_process+0x2b8>)
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	f003 0304 	and.w	r3, r3, #4
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d04e      	beq.n	8010c52 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	7d1b      	ldrb	r3, [r3, #20]
 8010bb8:	2b02      	cmp	r3, #2
 8010bba:	d108      	bne.n	8010bce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010bc0:	4b9f      	ldr	r3, [pc, #636]	; (8010e40 <tcp_process+0x2bc>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d123      	bne.n	8010c10 <tcp_process+0x8c>
        acceptable = 1;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	76fb      	strb	r3, [r7, #27]
 8010bcc:	e020      	b.n	8010c10 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bd2:	4b9c      	ldr	r3, [pc, #624]	; (8010e44 <tcp_process+0x2c0>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d102      	bne.n	8010be0 <tcp_process+0x5c>
        acceptable = 1;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	76fb      	strb	r3, [r7, #27]
 8010bde:	e017      	b.n	8010c10 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010be0:	4b98      	ldr	r3, [pc, #608]	; (8010e44 <tcp_process+0x2c0>)
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010be8:	1ad3      	subs	r3, r2, r3
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	db10      	blt.n	8010c10 <tcp_process+0x8c>
 8010bee:	4b95      	ldr	r3, [pc, #596]	; (8010e44 <tcp_process+0x2c0>)
 8010bf0:	681a      	ldr	r2, [r3, #0]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf6:	6879      	ldr	r1, [r7, #4]
 8010bf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bfa:	440b      	add	r3, r1
 8010bfc:	1ad3      	subs	r3, r2, r3
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	dc06      	bgt.n	8010c10 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	8b5b      	ldrh	r3, [r3, #26]
 8010c06:	f043 0302 	orr.w	r3, r3, #2
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010c10:	7efb      	ldrb	r3, [r7, #27]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d01b      	beq.n	8010c4e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	7d1b      	ldrb	r3, [r3, #20]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d106      	bne.n	8010c2c <tcp_process+0xa8>
 8010c1e:	4b84      	ldr	r3, [pc, #528]	; (8010e30 <tcp_process+0x2ac>)
 8010c20:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010c24:	4988      	ldr	r1, [pc, #544]	; (8010e48 <tcp_process+0x2c4>)
 8010c26:	4884      	ldr	r0, [pc, #528]	; (8010e38 <tcp_process+0x2b4>)
 8010c28:	f00a fe72 	bl	801b910 <iprintf>
      recv_flags |= TF_RESET;
 8010c2c:	4b87      	ldr	r3, [pc, #540]	; (8010e4c <tcp_process+0x2c8>)
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	f043 0308 	orr.w	r3, r3, #8
 8010c34:	b2da      	uxtb	r2, r3
 8010c36:	4b85      	ldr	r3, [pc, #532]	; (8010e4c <tcp_process+0x2c8>)
 8010c38:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	8b5b      	ldrh	r3, [r3, #26]
 8010c3e:	f023 0301 	bic.w	r3, r3, #1
 8010c42:	b29a      	uxth	r2, r3
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010c48:	f06f 030d 	mvn.w	r3, #13
 8010c4c:	e37a      	b.n	8011344 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	e378      	b.n	8011344 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010c52:	4b7a      	ldr	r3, [pc, #488]	; (8010e3c <tcp_process+0x2b8>)
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	f003 0302 	and.w	r3, r3, #2
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d010      	beq.n	8010c80 <tcp_process+0xfc>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	7d1b      	ldrb	r3, [r3, #20]
 8010c62:	2b02      	cmp	r3, #2
 8010c64:	d00c      	beq.n	8010c80 <tcp_process+0xfc>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	7d1b      	ldrb	r3, [r3, #20]
 8010c6a:	2b03      	cmp	r3, #3
 8010c6c:	d008      	beq.n	8010c80 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	8b5b      	ldrh	r3, [r3, #26]
 8010c72:	f043 0302 	orr.w	r3, r3, #2
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	e361      	b.n	8011344 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	8b5b      	ldrh	r3, [r3, #26]
 8010c84:	f003 0310 	and.w	r3, r3, #16
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d103      	bne.n	8010c94 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010c8c:	4b70      	ldr	r3, [pc, #448]	; (8010e50 <tcp_process+0x2cc>)
 8010c8e:	681a      	ldr	r2, [r3, #0]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2200      	movs	r2, #0
 8010c98:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f001 fc2d 	bl	8012504 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	7d1b      	ldrb	r3, [r3, #20]
 8010cae:	3b02      	subs	r3, #2
 8010cb0:	2b07      	cmp	r3, #7
 8010cb2:	f200 8337 	bhi.w	8011324 <tcp_process+0x7a0>
 8010cb6:	a201      	add	r2, pc, #4	; (adr r2, 8010cbc <tcp_process+0x138>)
 8010cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cbc:	08010cdd 	.word	0x08010cdd
 8010cc0:	08010f0d 	.word	0x08010f0d
 8010cc4:	08011085 	.word	0x08011085
 8010cc8:	080110af 	.word	0x080110af
 8010ccc:	080111d3 	.word	0x080111d3
 8010cd0:	08011085 	.word	0x08011085
 8010cd4:	0801125f 	.word	0x0801125f
 8010cd8:	080112ef 	.word	0x080112ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010cdc:	4b57      	ldr	r3, [pc, #348]	; (8010e3c <tcp_process+0x2b8>)
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	f003 0310 	and.w	r3, r3, #16
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f000 80e4 	beq.w	8010eb2 <tcp_process+0x32e>
 8010cea:	4b54      	ldr	r3, [pc, #336]	; (8010e3c <tcp_process+0x2b8>)
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	f003 0302 	and.w	r3, r3, #2
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	f000 80dd 	beq.w	8010eb2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cfc:	1c5a      	adds	r2, r3, #1
 8010cfe:	4b50      	ldr	r3, [pc, #320]	; (8010e40 <tcp_process+0x2bc>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	f040 80d5 	bne.w	8010eb2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010d08:	4b4e      	ldr	r3, [pc, #312]	; (8010e44 <tcp_process+0x2c0>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	1c5a      	adds	r2, r3, #1
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010d1a:	4b49      	ldr	r3, [pc, #292]	; (8010e40 <tcp_process+0x2bc>)
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010d22:	4b4c      	ldr	r3, [pc, #304]	; (8010e54 <tcp_process+0x2d0>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	89db      	ldrh	r3, [r3, #14]
 8010d28:	b29a      	uxth	r2, r3
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010d3c:	4b41      	ldr	r3, [pc, #260]	; (8010e44 <tcp_process+0x2c0>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	1e5a      	subs	r2, r3, #1
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2204      	movs	r2, #4
 8010d4a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	3304      	adds	r3, #4
 8010d54:	4618      	mov	r0, r3
 8010d56:	f007 f9d5 	bl	8018104 <ip4_route>
 8010d5a:	4601      	mov	r1, r0
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	3304      	adds	r3, #4
 8010d60:	461a      	mov	r2, r3
 8010d62:	4620      	mov	r0, r4
 8010d64:	f7ff f88e 	bl	800fe84 <tcp_eff_send_mss_netif>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d74:	009a      	lsls	r2, r3, #2
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d7a:	005b      	lsls	r3, r3, #1
 8010d7c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010d80:	428b      	cmp	r3, r1
 8010d82:	bf38      	it	cc
 8010d84:	460b      	movcc	r3, r1
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d204      	bcs.n	8010d94 <tcp_process+0x210>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	e00d      	b.n	8010db0 <tcp_process+0x22c>
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d98:	005b      	lsls	r3, r3, #1
 8010d9a:	f241 121c 	movw	r2, #4380	; 0x111c
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d904      	bls.n	8010dac <tcp_process+0x228>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010da6:	005b      	lsls	r3, r3, #1
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	e001      	b.n	8010db0 <tcp_process+0x22c>
 8010dac:	f241 131c 	movw	r3, #4380	; 0x111c
 8010db0:	687a      	ldr	r2, [r7, #4]
 8010db2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d106      	bne.n	8010dce <tcp_process+0x24a>
 8010dc0:	4b1b      	ldr	r3, [pc, #108]	; (8010e30 <tcp_process+0x2ac>)
 8010dc2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010dc6:	4924      	ldr	r1, [pc, #144]	; (8010e58 <tcp_process+0x2d4>)
 8010dc8:	481b      	ldr	r0, [pc, #108]	; (8010e38 <tcp_process+0x2b4>)
 8010dca:	f00a fda1 	bl	801b910 <iprintf>
        --pcb->snd_queuelen;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dd4:	3b01      	subs	r3, #1
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010de2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d111      	bne.n	8010e0e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d106      	bne.n	8010e04 <tcp_process+0x280>
 8010df6:	4b0e      	ldr	r3, [pc, #56]	; (8010e30 <tcp_process+0x2ac>)
 8010df8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010dfc:	4917      	ldr	r1, [pc, #92]	; (8010e5c <tcp_process+0x2d8>)
 8010dfe:	480e      	ldr	r0, [pc, #56]	; (8010e38 <tcp_process+0x2b4>)
 8010e00:	f00a fd86 	bl	801b910 <iprintf>
          pcb->unsent = rseg->next;
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e0c:	e003      	b.n	8010e16 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010e16:	69f8      	ldr	r0, [r7, #28]
 8010e18:	f7fe fc6f 	bl	800f6fa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d11d      	bne.n	8010e60 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e2a:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e2c:	e01f      	b.n	8010e6e <tcp_process+0x2ea>
 8010e2e:	bf00      	nop
 8010e30:	0801ede4 	.word	0x0801ede4
 8010e34:	0801f01c 	.word	0x0801f01c
 8010e38:	0801ee30 	.word	0x0801ee30
 8010e3c:	20008b10 	.word	0x20008b10
 8010e40:	20008b08 	.word	0x20008b08
 8010e44:	20008b04 	.word	0x20008b04
 8010e48:	0801f038 	.word	0x0801f038
 8010e4c:	20008b11 	.word	0x20008b11
 8010e50:	20010664 	.word	0x20010664
 8010e54:	20008af4 	.word	0x20008af4
 8010e58:	0801f058 	.word	0x0801f058
 8010e5c:	0801f070 	.word	0x0801f070
        } else {
          pcb->rtime = 0;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2200      	movs	r2, #0
 8010e64:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2200      	movs	r2, #0
 8010e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d00a      	beq.n	8010e8e <tcp_process+0x30a>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	6910      	ldr	r0, [r2, #16]
 8010e82:	2200      	movs	r2, #0
 8010e84:	6879      	ldr	r1, [r7, #4]
 8010e86:	4798      	blx	r3
 8010e88:	4603      	mov	r3, r0
 8010e8a:	76bb      	strb	r3, [r7, #26]
 8010e8c:	e001      	b.n	8010e92 <tcp_process+0x30e>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010e92:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010e96:	f113 0f0d 	cmn.w	r3, #13
 8010e9a:	d102      	bne.n	8010ea2 <tcp_process+0x31e>
          return ERR_ABRT;
 8010e9c:	f06f 030c 	mvn.w	r3, #12
 8010ea0:	e250      	b.n	8011344 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	8b5b      	ldrh	r3, [r3, #26]
 8010ea6:	f043 0302 	orr.w	r3, r3, #2
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010eb0:	e23a      	b.n	8011328 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010eb2:	4b9d      	ldr	r3, [pc, #628]	; (8011128 <tcp_process+0x5a4>)
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	f003 0310 	and.w	r3, r3, #16
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f000 8234 	beq.w	8011328 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ec0:	4b9a      	ldr	r3, [pc, #616]	; (801112c <tcp_process+0x5a8>)
 8010ec2:	6819      	ldr	r1, [r3, #0]
 8010ec4:	4b9a      	ldr	r3, [pc, #616]	; (8011130 <tcp_process+0x5ac>)
 8010ec6:	881b      	ldrh	r3, [r3, #0]
 8010ec8:	461a      	mov	r2, r3
 8010eca:	4b9a      	ldr	r3, [pc, #616]	; (8011134 <tcp_process+0x5b0>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ed0:	4b99      	ldr	r3, [pc, #612]	; (8011138 <tcp_process+0x5b4>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ed4:	885b      	ldrh	r3, [r3, #2]
 8010ed6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ed8:	4a97      	ldr	r2, [pc, #604]	; (8011138 <tcp_process+0x5b4>)
 8010eda:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010edc:	8812      	ldrh	r2, [r2, #0]
 8010ede:	b292      	uxth	r2, r2
 8010ee0:	9202      	str	r2, [sp, #8]
 8010ee2:	9301      	str	r3, [sp, #4]
 8010ee4:	4b95      	ldr	r3, [pc, #596]	; (801113c <tcp_process+0x5b8>)
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	4b95      	ldr	r3, [pc, #596]	; (8011140 <tcp_process+0x5bc>)
 8010eea:	4602      	mov	r2, r0
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f003 f8db 	bl	80140a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ef8:	2b05      	cmp	r3, #5
 8010efa:	f200 8215 	bhi.w	8011328 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2200      	movs	r2, #0
 8010f02:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f002 fea5 	bl	8013c54 <tcp_rexmit_rto>
      break;
 8010f0a:	e20d      	b.n	8011328 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010f0c:	4b86      	ldr	r3, [pc, #536]	; (8011128 <tcp_process+0x5a4>)
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	f003 0310 	and.w	r3, r3, #16
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f000 80a1 	beq.w	801105c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f1a:	4b84      	ldr	r3, [pc, #528]	; (801112c <tcp_process+0x5a8>)
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	3b01      	subs	r3, #1
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	db7e      	blt.n	8011028 <tcp_process+0x4a4>
 8010f2a:	4b80      	ldr	r3, [pc, #512]	; (801112c <tcp_process+0x5a8>)
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f32:	1ad3      	subs	r3, r2, r3
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	dc77      	bgt.n	8011028 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2204      	movs	r2, #4
 8010f3c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d102      	bne.n	8010f4c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010f46:	23fa      	movs	r3, #250	; 0xfa
 8010f48:	76bb      	strb	r3, [r7, #26]
 8010f4a:	e01d      	b.n	8010f88 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f50:	699b      	ldr	r3, [r3, #24]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d106      	bne.n	8010f64 <tcp_process+0x3e0>
 8010f56:	4b7b      	ldr	r3, [pc, #492]	; (8011144 <tcp_process+0x5c0>)
 8010f58:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010f5c:	497a      	ldr	r1, [pc, #488]	; (8011148 <tcp_process+0x5c4>)
 8010f5e:	487b      	ldr	r0, [pc, #492]	; (801114c <tcp_process+0x5c8>)
 8010f60:	f00a fcd6 	bl	801b910 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f68:	699b      	ldr	r3, [r3, #24]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00a      	beq.n	8010f84 <tcp_process+0x400>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f72:	699b      	ldr	r3, [r3, #24]
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	6910      	ldr	r0, [r2, #16]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	6879      	ldr	r1, [r7, #4]
 8010f7c:	4798      	blx	r3
 8010f7e:	4603      	mov	r3, r0
 8010f80:	76bb      	strb	r3, [r7, #26]
 8010f82:	e001      	b.n	8010f88 <tcp_process+0x404>
 8010f84:	23f0      	movs	r3, #240	; 0xf0
 8010f86:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010f88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d00a      	beq.n	8010fa6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010f90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f94:	f113 0f0d 	cmn.w	r3, #13
 8010f98:	d002      	beq.n	8010fa0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f7fd fd64 	bl	800ea68 <tcp_abort>
            }
            return ERR_ABRT;
 8010fa0:	f06f 030c 	mvn.w	r3, #12
 8010fa4:	e1ce      	b.n	8011344 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 fae0 	bl	801156c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010fac:	4b68      	ldr	r3, [pc, #416]	; (8011150 <tcp_process+0x5cc>)
 8010fae:	881b      	ldrh	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d005      	beq.n	8010fc0 <tcp_process+0x43c>
            recv_acked--;
 8010fb4:	4b66      	ldr	r3, [pc, #408]	; (8011150 <tcp_process+0x5cc>)
 8010fb6:	881b      	ldrh	r3, [r3, #0]
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	4b64      	ldr	r3, [pc, #400]	; (8011150 <tcp_process+0x5cc>)
 8010fbe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fc4:	009a      	lsls	r2, r3, #2
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fca:	005b      	lsls	r3, r3, #1
 8010fcc:	f241 111c 	movw	r1, #4380	; 0x111c
 8010fd0:	428b      	cmp	r3, r1
 8010fd2:	bf38      	it	cc
 8010fd4:	460b      	movcc	r3, r1
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d204      	bcs.n	8010fe4 <tcp_process+0x460>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fde:	009b      	lsls	r3, r3, #2
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	e00d      	b.n	8011000 <tcp_process+0x47c>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fe8:	005b      	lsls	r3, r3, #1
 8010fea:	f241 121c 	movw	r2, #4380	; 0x111c
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d904      	bls.n	8010ffc <tcp_process+0x478>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ff6:	005b      	lsls	r3, r3, #1
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	e001      	b.n	8011000 <tcp_process+0x47c>
 8010ffc:	f241 131c 	movw	r3, #4380	; 0x111c
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011006:	4b53      	ldr	r3, [pc, #332]	; (8011154 <tcp_process+0x5d0>)
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	f003 0320 	and.w	r3, r3, #32
 801100e:	2b00      	cmp	r3, #0
 8011010:	d037      	beq.n	8011082 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	8b5b      	ldrh	r3, [r3, #26]
 8011016:	f043 0302 	orr.w	r3, r3, #2
 801101a:	b29a      	uxth	r2, r3
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2207      	movs	r2, #7
 8011024:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011026:	e02c      	b.n	8011082 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011028:	4b40      	ldr	r3, [pc, #256]	; (801112c <tcp_process+0x5a8>)
 801102a:	6819      	ldr	r1, [r3, #0]
 801102c:	4b40      	ldr	r3, [pc, #256]	; (8011130 <tcp_process+0x5ac>)
 801102e:	881b      	ldrh	r3, [r3, #0]
 8011030:	461a      	mov	r2, r3
 8011032:	4b40      	ldr	r3, [pc, #256]	; (8011134 <tcp_process+0x5b0>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011038:	4b3f      	ldr	r3, [pc, #252]	; (8011138 <tcp_process+0x5b4>)
 801103a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801103c:	885b      	ldrh	r3, [r3, #2]
 801103e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011040:	4a3d      	ldr	r2, [pc, #244]	; (8011138 <tcp_process+0x5b4>)
 8011042:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011044:	8812      	ldrh	r2, [r2, #0]
 8011046:	b292      	uxth	r2, r2
 8011048:	9202      	str	r2, [sp, #8]
 801104a:	9301      	str	r3, [sp, #4]
 801104c:	4b3b      	ldr	r3, [pc, #236]	; (801113c <tcp_process+0x5b8>)
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	4b3b      	ldr	r3, [pc, #236]	; (8011140 <tcp_process+0x5bc>)
 8011052:	4602      	mov	r2, r0
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f003 f827 	bl	80140a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801105a:	e167      	b.n	801132c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801105c:	4b32      	ldr	r3, [pc, #200]	; (8011128 <tcp_process+0x5a4>)
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	f003 0302 	and.w	r3, r3, #2
 8011064:	2b00      	cmp	r3, #0
 8011066:	f000 8161 	beq.w	801132c <tcp_process+0x7a8>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801106e:	1e5a      	subs	r2, r3, #1
 8011070:	4b30      	ldr	r3, [pc, #192]	; (8011134 <tcp_process+0x5b0>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	429a      	cmp	r2, r3
 8011076:	f040 8159 	bne.w	801132c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f002 fe0c 	bl	8013c98 <tcp_rexmit>
      break;
 8011080:	e154      	b.n	801132c <tcp_process+0x7a8>
 8011082:	e153      	b.n	801132c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f000 fa71 	bl	801156c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801108a:	4b32      	ldr	r3, [pc, #200]	; (8011154 <tcp_process+0x5d0>)
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	f003 0320 	and.w	r3, r3, #32
 8011092:	2b00      	cmp	r3, #0
 8011094:	f000 814c 	beq.w	8011330 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	8b5b      	ldrh	r3, [r3, #26]
 801109c:	f043 0302 	orr.w	r3, r3, #2
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2207      	movs	r2, #7
 80110aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110ac:	e140      	b.n	8011330 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f000 fa5c 	bl	801156c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80110b4:	4b27      	ldr	r3, [pc, #156]	; (8011154 <tcp_process+0x5d0>)
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	f003 0320 	and.w	r3, r3, #32
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d071      	beq.n	80111a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80110c0:	4b19      	ldr	r3, [pc, #100]	; (8011128 <tcp_process+0x5a4>)
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	f003 0310 	and.w	r3, r3, #16
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d060      	beq.n	801118e <tcp_process+0x60a>
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110d0:	4b16      	ldr	r3, [pc, #88]	; (801112c <tcp_process+0x5a8>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d15a      	bne.n	801118e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d156      	bne.n	801118e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	8b5b      	ldrh	r3, [r3, #26]
 80110e4:	f043 0302 	orr.w	r3, r3, #2
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7fe fdbe 	bl	800fc70 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80110f4:	4b18      	ldr	r3, [pc, #96]	; (8011158 <tcp_process+0x5d4>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	687a      	ldr	r2, [r7, #4]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d105      	bne.n	801110a <tcp_process+0x586>
 80110fe:	4b16      	ldr	r3, [pc, #88]	; (8011158 <tcp_process+0x5d4>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	4a14      	ldr	r2, [pc, #80]	; (8011158 <tcp_process+0x5d4>)
 8011106:	6013      	str	r3, [r2, #0]
 8011108:	e02e      	b.n	8011168 <tcp_process+0x5e4>
 801110a:	4b13      	ldr	r3, [pc, #76]	; (8011158 <tcp_process+0x5d4>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	617b      	str	r3, [r7, #20]
 8011110:	e027      	b.n	8011162 <tcp_process+0x5de>
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	429a      	cmp	r2, r3
 801111a:	d11f      	bne.n	801115c <tcp_process+0x5d8>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	68da      	ldr	r2, [r3, #12]
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	60da      	str	r2, [r3, #12]
 8011124:	e020      	b.n	8011168 <tcp_process+0x5e4>
 8011126:	bf00      	nop
 8011128:	20008b10 	.word	0x20008b10
 801112c:	20008b08 	.word	0x20008b08
 8011130:	20008b0e 	.word	0x20008b0e
 8011134:	20008b04 	.word	0x20008b04
 8011138:	20008af4 	.word	0x20008af4
 801113c:	2000cf1c 	.word	0x2000cf1c
 8011140:	2000cf20 	.word	0x2000cf20
 8011144:	0801ede4 	.word	0x0801ede4
 8011148:	0801f084 	.word	0x0801f084
 801114c:	0801ee30 	.word	0x0801ee30
 8011150:	20008b0c 	.word	0x20008b0c
 8011154:	20008b11 	.word	0x20008b11
 8011158:	20010660 	.word	0x20010660
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	617b      	str	r3, [r7, #20]
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1d4      	bne.n	8011112 <tcp_process+0x58e>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2200      	movs	r2, #0
 801116c:	60da      	str	r2, [r3, #12]
 801116e:	4b77      	ldr	r3, [pc, #476]	; (801134c <tcp_process+0x7c8>)
 8011170:	2201      	movs	r2, #1
 8011172:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	220a      	movs	r2, #10
 8011178:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801117a:	4b75      	ldr	r3, [pc, #468]	; (8011350 <tcp_process+0x7cc>)
 801117c:	681a      	ldr	r2, [r3, #0]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	60da      	str	r2, [r3, #12]
 8011182:	4a73      	ldr	r2, [pc, #460]	; (8011350 <tcp_process+0x7cc>)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6013      	str	r3, [r2, #0]
 8011188:	f003 f950 	bl	801442c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801118c:	e0d2      	b.n	8011334 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	8b5b      	ldrh	r3, [r3, #26]
 8011192:	f043 0302 	orr.w	r3, r3, #2
 8011196:	b29a      	uxth	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2208      	movs	r2, #8
 80111a0:	751a      	strb	r2, [r3, #20]
      break;
 80111a2:	e0c7      	b.n	8011334 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111a4:	4b6b      	ldr	r3, [pc, #428]	; (8011354 <tcp_process+0x7d0>)
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	f003 0310 	and.w	r3, r3, #16
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f000 80c1 	beq.w	8011334 <tcp_process+0x7b0>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111b6:	4b68      	ldr	r3, [pc, #416]	; (8011358 <tcp_process+0x7d4>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	f040 80ba 	bne.w	8011334 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	f040 80b5 	bne.w	8011334 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2206      	movs	r2, #6
 80111ce:	751a      	strb	r2, [r3, #20]
      break;
 80111d0:	e0b0      	b.n	8011334 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f000 f9ca 	bl	801156c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80111d8:	4b60      	ldr	r3, [pc, #384]	; (801135c <tcp_process+0x7d8>)
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	f003 0320 	and.w	r3, r3, #32
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f000 80a9 	beq.w	8011338 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	8b5b      	ldrh	r3, [r3, #26]
 80111ea:	f043 0302 	orr.w	r3, r3, #2
 80111ee:	b29a      	uxth	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f7fe fd3b 	bl	800fc70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80111fa:	4b59      	ldr	r3, [pc, #356]	; (8011360 <tcp_process+0x7dc>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	687a      	ldr	r2, [r7, #4]
 8011200:	429a      	cmp	r2, r3
 8011202:	d105      	bne.n	8011210 <tcp_process+0x68c>
 8011204:	4b56      	ldr	r3, [pc, #344]	; (8011360 <tcp_process+0x7dc>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	68db      	ldr	r3, [r3, #12]
 801120a:	4a55      	ldr	r2, [pc, #340]	; (8011360 <tcp_process+0x7dc>)
 801120c:	6013      	str	r3, [r2, #0]
 801120e:	e013      	b.n	8011238 <tcp_process+0x6b4>
 8011210:	4b53      	ldr	r3, [pc, #332]	; (8011360 <tcp_process+0x7dc>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	613b      	str	r3, [r7, #16]
 8011216:	e00c      	b.n	8011232 <tcp_process+0x6ae>
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	429a      	cmp	r2, r3
 8011220:	d104      	bne.n	801122c <tcp_process+0x6a8>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	68da      	ldr	r2, [r3, #12]
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	60da      	str	r2, [r3, #12]
 801122a:	e005      	b.n	8011238 <tcp_process+0x6b4>
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	613b      	str	r3, [r7, #16]
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d1ef      	bne.n	8011218 <tcp_process+0x694>
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2200      	movs	r2, #0
 801123c:	60da      	str	r2, [r3, #12]
 801123e:	4b43      	ldr	r3, [pc, #268]	; (801134c <tcp_process+0x7c8>)
 8011240:	2201      	movs	r2, #1
 8011242:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	220a      	movs	r2, #10
 8011248:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801124a:	4b41      	ldr	r3, [pc, #260]	; (8011350 <tcp_process+0x7cc>)
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	60da      	str	r2, [r3, #12]
 8011252:	4a3f      	ldr	r2, [pc, #252]	; (8011350 <tcp_process+0x7cc>)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6013      	str	r3, [r2, #0]
 8011258:	f003 f8e8 	bl	801442c <tcp_timer_needed>
      }
      break;
 801125c:	e06c      	b.n	8011338 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 f984 	bl	801156c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011264:	4b3b      	ldr	r3, [pc, #236]	; (8011354 <tcp_process+0x7d0>)
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	f003 0310 	and.w	r3, r3, #16
 801126c:	2b00      	cmp	r3, #0
 801126e:	d065      	beq.n	801133c <tcp_process+0x7b8>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011274:	4b38      	ldr	r3, [pc, #224]	; (8011358 <tcp_process+0x7d4>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	429a      	cmp	r2, r3
 801127a:	d15f      	bne.n	801133c <tcp_process+0x7b8>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011280:	2b00      	cmp	r3, #0
 8011282:	d15b      	bne.n	801133c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f7fe fcf3 	bl	800fc70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801128a:	4b35      	ldr	r3, [pc, #212]	; (8011360 <tcp_process+0x7dc>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	429a      	cmp	r2, r3
 8011292:	d105      	bne.n	80112a0 <tcp_process+0x71c>
 8011294:	4b32      	ldr	r3, [pc, #200]	; (8011360 <tcp_process+0x7dc>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	68db      	ldr	r3, [r3, #12]
 801129a:	4a31      	ldr	r2, [pc, #196]	; (8011360 <tcp_process+0x7dc>)
 801129c:	6013      	str	r3, [r2, #0]
 801129e:	e013      	b.n	80112c8 <tcp_process+0x744>
 80112a0:	4b2f      	ldr	r3, [pc, #188]	; (8011360 <tcp_process+0x7dc>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	60fb      	str	r3, [r7, #12]
 80112a6:	e00c      	b.n	80112c2 <tcp_process+0x73e>
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d104      	bne.n	80112bc <tcp_process+0x738>
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	68da      	ldr	r2, [r3, #12]
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	60da      	str	r2, [r3, #12]
 80112ba:	e005      	b.n	80112c8 <tcp_process+0x744>
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	60fb      	str	r3, [r7, #12]
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d1ef      	bne.n	80112a8 <tcp_process+0x724>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2200      	movs	r2, #0
 80112cc:	60da      	str	r2, [r3, #12]
 80112ce:	4b1f      	ldr	r3, [pc, #124]	; (801134c <tcp_process+0x7c8>)
 80112d0:	2201      	movs	r2, #1
 80112d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	220a      	movs	r2, #10
 80112d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80112da:	4b1d      	ldr	r3, [pc, #116]	; (8011350 <tcp_process+0x7cc>)
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	60da      	str	r2, [r3, #12]
 80112e2:	4a1b      	ldr	r2, [pc, #108]	; (8011350 <tcp_process+0x7cc>)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6013      	str	r3, [r2, #0]
 80112e8:	f003 f8a0 	bl	801442c <tcp_timer_needed>
      }
      break;
 80112ec:	e026      	b.n	801133c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f000 f93c 	bl	801156c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80112f4:	4b17      	ldr	r3, [pc, #92]	; (8011354 <tcp_process+0x7d0>)
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	f003 0310 	and.w	r3, r3, #16
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d01f      	beq.n	8011340 <tcp_process+0x7bc>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011304:	4b14      	ldr	r3, [pc, #80]	; (8011358 <tcp_process+0x7d4>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	429a      	cmp	r2, r3
 801130a:	d119      	bne.n	8011340 <tcp_process+0x7bc>
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011310:	2b00      	cmp	r3, #0
 8011312:	d115      	bne.n	8011340 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011314:	4b11      	ldr	r3, [pc, #68]	; (801135c <tcp_process+0x7d8>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	f043 0310 	orr.w	r3, r3, #16
 801131c:	b2da      	uxtb	r2, r3
 801131e:	4b0f      	ldr	r3, [pc, #60]	; (801135c <tcp_process+0x7d8>)
 8011320:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011322:	e00d      	b.n	8011340 <tcp_process+0x7bc>
    default:
      break;
 8011324:	bf00      	nop
 8011326:	e00c      	b.n	8011342 <tcp_process+0x7be>
      break;
 8011328:	bf00      	nop
 801132a:	e00a      	b.n	8011342 <tcp_process+0x7be>
      break;
 801132c:	bf00      	nop
 801132e:	e008      	b.n	8011342 <tcp_process+0x7be>
      break;
 8011330:	bf00      	nop
 8011332:	e006      	b.n	8011342 <tcp_process+0x7be>
      break;
 8011334:	bf00      	nop
 8011336:	e004      	b.n	8011342 <tcp_process+0x7be>
      break;
 8011338:	bf00      	nop
 801133a:	e002      	b.n	8011342 <tcp_process+0x7be>
      break;
 801133c:	bf00      	nop
 801133e:	e000      	b.n	8011342 <tcp_process+0x7be>
      break;
 8011340:	bf00      	nop
  }
  return ERR_OK;
 8011342:	2300      	movs	r3, #0
}
 8011344:	4618      	mov	r0, r3
 8011346:	3724      	adds	r7, #36	; 0x24
 8011348:	46bd      	mov	sp, r7
 801134a:	bd90      	pop	{r4, r7, pc}
 801134c:	2001065c 	.word	0x2001065c
 8011350:	20010670 	.word	0x20010670
 8011354:	20008b10 	.word	0x20008b10
 8011358:	20008b08 	.word	0x20008b08
 801135c:	20008b11 	.word	0x20008b11
 8011360:	20010660 	.word	0x20010660

08011364 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011364:	b590      	push	{r4, r7, lr}
 8011366:	b085      	sub	sp, #20
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d106      	bne.n	8011382 <tcp_oos_insert_segment+0x1e>
 8011374:	4b3b      	ldr	r3, [pc, #236]	; (8011464 <tcp_oos_insert_segment+0x100>)
 8011376:	f240 421f 	movw	r2, #1055	; 0x41f
 801137a:	493b      	ldr	r1, [pc, #236]	; (8011468 <tcp_oos_insert_segment+0x104>)
 801137c:	483b      	ldr	r0, [pc, #236]	; (801146c <tcp_oos_insert_segment+0x108>)
 801137e:	f00a fac7 	bl	801b910 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	899b      	ldrh	r3, [r3, #12]
 8011388:	b29b      	uxth	r3, r3
 801138a:	4618      	mov	r0, r3
 801138c:	f7fb f982 	bl	800c694 <lwip_htons>
 8011390:	4603      	mov	r3, r0
 8011392:	b2db      	uxtb	r3, r3
 8011394:	f003 0301 	and.w	r3, r3, #1
 8011398:	2b00      	cmp	r3, #0
 801139a:	d028      	beq.n	80113ee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801139c:	6838      	ldr	r0, [r7, #0]
 801139e:	f7fe f997 	bl	800f6d0 <tcp_segs_free>
    next = NULL;
 80113a2:	2300      	movs	r3, #0
 80113a4:	603b      	str	r3, [r7, #0]
 80113a6:	e056      	b.n	8011456 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	899b      	ldrh	r3, [r3, #12]
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7fb f96f 	bl	800c694 <lwip_htons>
 80113b6:	4603      	mov	r3, r0
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	f003 0301 	and.w	r3, r3, #1
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d00d      	beq.n	80113de <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	899b      	ldrh	r3, [r3, #12]
 80113c8:	b29c      	uxth	r4, r3
 80113ca:	2001      	movs	r0, #1
 80113cc:	f7fb f962 	bl	800c694 <lwip_htons>
 80113d0:	4603      	mov	r3, r0
 80113d2:	461a      	mov	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	4322      	orrs	r2, r4
 80113da:	b292      	uxth	r2, r2
 80113dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f7fe f986 	bl	800f6fa <tcp_seg_free>
    while (next &&
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d00e      	beq.n	8011412 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	891b      	ldrh	r3, [r3, #8]
 80113f8:	461a      	mov	r2, r3
 80113fa:	4b1d      	ldr	r3, [pc, #116]	; (8011470 <tcp_oos_insert_segment+0x10c>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	441a      	add	r2, r3
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	6839      	ldr	r1, [r7, #0]
 8011408:	8909      	ldrh	r1, [r1, #8]
 801140a:	440b      	add	r3, r1
 801140c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801140e:	2b00      	cmp	r3, #0
 8011410:	daca      	bge.n	80113a8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d01e      	beq.n	8011456 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	891b      	ldrh	r3, [r3, #8]
 801141c:	461a      	mov	r2, r3
 801141e:	4b14      	ldr	r3, [pc, #80]	; (8011470 <tcp_oos_insert_segment+0x10c>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	441a      	add	r2, r3
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801142c:	2b00      	cmp	r3, #0
 801142e:	dd12      	ble.n	8011456 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	b29a      	uxth	r2, r3
 8011438:	4b0d      	ldr	r3, [pc, #52]	; (8011470 <tcp_oos_insert_segment+0x10c>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	b29b      	uxth	r3, r3
 801143e:	1ad3      	subs	r3, r2, r3
 8011440:	b29a      	uxth	r2, r3
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	685a      	ldr	r2, [r3, #4]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	891b      	ldrh	r3, [r3, #8]
 801144e:	4619      	mov	r1, r3
 8011450:	4610      	mov	r0, r2
 8011452:	f7fc fb51 	bl	800daf8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	683a      	ldr	r2, [r7, #0]
 801145a:	601a      	str	r2, [r3, #0]
}
 801145c:	bf00      	nop
 801145e:	3714      	adds	r7, #20
 8011460:	46bd      	mov	sp, r7
 8011462:	bd90      	pop	{r4, r7, pc}
 8011464:	0801ede4 	.word	0x0801ede4
 8011468:	0801f0a4 	.word	0x0801f0a4
 801146c:	0801ee30 	.word	0x0801ee30
 8011470:	20008b04 	.word	0x20008b04

08011474 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011474:	b5b0      	push	{r4, r5, r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	60f8      	str	r0, [r7, #12]
 801147c:	60b9      	str	r1, [r7, #8]
 801147e:	607a      	str	r2, [r7, #4]
 8011480:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011482:	e03e      	b.n	8011502 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	4618      	mov	r0, r3
 8011494:	f7fc fd76 	bl	800df84 <pbuf_clen>
 8011498:	4603      	mov	r3, r0
 801149a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114a2:	8a7a      	ldrh	r2, [r7, #18]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d906      	bls.n	80114b6 <tcp_free_acked_segments+0x42>
 80114a8:	4b2a      	ldr	r3, [pc, #168]	; (8011554 <tcp_free_acked_segments+0xe0>)
 80114aa:	f240 4257 	movw	r2, #1111	; 0x457
 80114ae:	492a      	ldr	r1, [pc, #168]	; (8011558 <tcp_free_acked_segments+0xe4>)
 80114b0:	482a      	ldr	r0, [pc, #168]	; (801155c <tcp_free_acked_segments+0xe8>)
 80114b2:	f00a fa2d 	bl	801b910 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80114bc:	8a7b      	ldrh	r3, [r7, #18]
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	b29a      	uxth	r2, r3
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	891a      	ldrh	r2, [r3, #8]
 80114cc:	4b24      	ldr	r3, [pc, #144]	; (8011560 <tcp_free_acked_segments+0xec>)
 80114ce:	881b      	ldrh	r3, [r3, #0]
 80114d0:	4413      	add	r3, r2
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	4b22      	ldr	r3, [pc, #136]	; (8011560 <tcp_free_acked_segments+0xec>)
 80114d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80114d8:	6978      	ldr	r0, [r7, #20]
 80114da:	f7fe f90e 	bl	800f6fa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d00c      	beq.n	8011502 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d109      	bne.n	8011502 <tcp_free_acked_segments+0x8e>
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d106      	bne.n	8011502 <tcp_free_acked_segments+0x8e>
 80114f4:	4b17      	ldr	r3, [pc, #92]	; (8011554 <tcp_free_acked_segments+0xe0>)
 80114f6:	f240 4261 	movw	r2, #1121	; 0x461
 80114fa:	491a      	ldr	r1, [pc, #104]	; (8011564 <tcp_free_acked_segments+0xf0>)
 80114fc:	4817      	ldr	r0, [pc, #92]	; (801155c <tcp_free_acked_segments+0xe8>)
 80114fe:	f00a fa07 	bl	801b910 <iprintf>
  while (seg_list != NULL &&
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d020      	beq.n	801154a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	4618      	mov	r0, r3
 8011510:	f7fb f8d5 	bl	800c6be <lwip_htonl>
 8011514:	4604      	mov	r4, r0
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	891b      	ldrh	r3, [r3, #8]
 801151a:	461d      	mov	r5, r3
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	68db      	ldr	r3, [r3, #12]
 8011520:	899b      	ldrh	r3, [r3, #12]
 8011522:	b29b      	uxth	r3, r3
 8011524:	4618      	mov	r0, r3
 8011526:	f7fb f8b5 	bl	800c694 <lwip_htons>
 801152a:	4603      	mov	r3, r0
 801152c:	b2db      	uxtb	r3, r3
 801152e:	f003 0303 	and.w	r3, r3, #3
 8011532:	2b00      	cmp	r3, #0
 8011534:	d001      	beq.n	801153a <tcp_free_acked_segments+0xc6>
 8011536:	2301      	movs	r3, #1
 8011538:	e000      	b.n	801153c <tcp_free_acked_segments+0xc8>
 801153a:	2300      	movs	r3, #0
 801153c:	442b      	add	r3, r5
 801153e:	18e2      	adds	r2, r4, r3
 8011540:	4b09      	ldr	r3, [pc, #36]	; (8011568 <tcp_free_acked_segments+0xf4>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011546:	2b00      	cmp	r3, #0
 8011548:	dd9c      	ble.n	8011484 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801154a:	68bb      	ldr	r3, [r7, #8]
}
 801154c:	4618      	mov	r0, r3
 801154e:	3718      	adds	r7, #24
 8011550:	46bd      	mov	sp, r7
 8011552:	bdb0      	pop	{r4, r5, r7, pc}
 8011554:	0801ede4 	.word	0x0801ede4
 8011558:	0801f0cc 	.word	0x0801f0cc
 801155c:	0801ee30 	.word	0x0801ee30
 8011560:	20008b0c 	.word	0x20008b0c
 8011564:	0801f0f4 	.word	0x0801f0f4
 8011568:	20008b08 	.word	0x20008b08

0801156c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801156c:	b5b0      	push	{r4, r5, r7, lr}
 801156e:	b094      	sub	sp, #80	; 0x50
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011574:	2300      	movs	r3, #0
 8011576:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d106      	bne.n	801158c <tcp_receive+0x20>
 801157e:	4ba6      	ldr	r3, [pc, #664]	; (8011818 <tcp_receive+0x2ac>)
 8011580:	f240 427b 	movw	r2, #1147	; 0x47b
 8011584:	49a5      	ldr	r1, [pc, #660]	; (801181c <tcp_receive+0x2b0>)
 8011586:	48a6      	ldr	r0, [pc, #664]	; (8011820 <tcp_receive+0x2b4>)
 8011588:	f00a f9c2 	bl	801b910 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	7d1b      	ldrb	r3, [r3, #20]
 8011590:	2b03      	cmp	r3, #3
 8011592:	d806      	bhi.n	80115a2 <tcp_receive+0x36>
 8011594:	4ba0      	ldr	r3, [pc, #640]	; (8011818 <tcp_receive+0x2ac>)
 8011596:	f240 427c 	movw	r2, #1148	; 0x47c
 801159a:	49a2      	ldr	r1, [pc, #648]	; (8011824 <tcp_receive+0x2b8>)
 801159c:	48a0      	ldr	r0, [pc, #640]	; (8011820 <tcp_receive+0x2b4>)
 801159e:	f00a f9b7 	bl	801b910 <iprintf>

  if (flags & TCP_ACK) {
 80115a2:	4ba1      	ldr	r3, [pc, #644]	; (8011828 <tcp_receive+0x2bc>)
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	f003 0310 	and.w	r3, r3, #16
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f000 8263 	beq.w	8011a76 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115b6:	461a      	mov	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115bc:	4413      	add	r3, r2
 80115be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80115c4:	4b99      	ldr	r3, [pc, #612]	; (801182c <tcp_receive+0x2c0>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	db1b      	blt.n	8011606 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80115d2:	4b96      	ldr	r3, [pc, #600]	; (801182c <tcp_receive+0x2c0>)
 80115d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d106      	bne.n	80115e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80115de:	4b94      	ldr	r3, [pc, #592]	; (8011830 <tcp_receive+0x2c4>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	1ad3      	subs	r3, r2, r3
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	db0e      	blt.n	8011606 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80115ec:	4b90      	ldr	r3, [pc, #576]	; (8011830 <tcp_receive+0x2c4>)
 80115ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d125      	bne.n	8011640 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80115f4:	4b8f      	ldr	r3, [pc, #572]	; (8011834 <tcp_receive+0x2c8>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	89db      	ldrh	r3, [r3, #14]
 80115fa:	b29a      	uxth	r2, r3
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011602:	429a      	cmp	r2, r3
 8011604:	d91c      	bls.n	8011640 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011606:	4b8b      	ldr	r3, [pc, #556]	; (8011834 <tcp_receive+0x2c8>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	89db      	ldrh	r3, [r3, #14]
 801160c:	b29a      	uxth	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011620:	429a      	cmp	r2, r3
 8011622:	d205      	bcs.n	8011630 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011630:	4b7e      	ldr	r3, [pc, #504]	; (801182c <tcp_receive+0x2c0>)
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011638:	4b7d      	ldr	r3, [pc, #500]	; (8011830 <tcp_receive+0x2c4>)
 801163a:	681a      	ldr	r2, [r3, #0]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011640:	4b7b      	ldr	r3, [pc, #492]	; (8011830 <tcp_receive+0x2c4>)
 8011642:	681a      	ldr	r2, [r3, #0]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011648:	1ad3      	subs	r3, r2, r3
 801164a:	2b00      	cmp	r3, #0
 801164c:	dc58      	bgt.n	8011700 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801164e:	4b7a      	ldr	r3, [pc, #488]	; (8011838 <tcp_receive+0x2cc>)
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d14b      	bne.n	80116ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801165a:	687a      	ldr	r2, [r7, #4]
 801165c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011660:	4413      	add	r3, r2
 8011662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011664:	429a      	cmp	r2, r3
 8011666:	d142      	bne.n	80116ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801166e:	2b00      	cmp	r3, #0
 8011670:	db3d      	blt.n	80116ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011676:	4b6e      	ldr	r3, [pc, #440]	; (8011830 <tcp_receive+0x2c4>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	429a      	cmp	r2, r3
 801167c:	d137      	bne.n	80116ee <tcp_receive+0x182>
              found_dupack = 1;
 801167e:	2301      	movs	r3, #1
 8011680:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011688:	2bff      	cmp	r3, #255	; 0xff
 801168a:	d007      	beq.n	801169c <tcp_receive+0x130>
                ++pcb->dupacks;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011692:	3301      	adds	r3, #1
 8011694:	b2da      	uxtb	r2, r3
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116a2:	2b03      	cmp	r3, #3
 80116a4:	d91b      	bls.n	80116de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116b0:	4413      	add	r3, r2
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d30a      	bcc.n	80116d4 <tcp_receive+0x168>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116c8:	4413      	add	r3, r2
 80116ca:	b29a      	uxth	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80116d2:	e004      	b.n	80116de <tcp_receive+0x172>
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116e4:	2b02      	cmp	r3, #2
 80116e6:	d902      	bls.n	80116ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f002 fb41 	bl	8013d70 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80116ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	f040 8160 	bne.w	80119b6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2200      	movs	r2, #0
 80116fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80116fe:	e15a      	b.n	80119b6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011700:	4b4b      	ldr	r3, [pc, #300]	; (8011830 <tcp_receive+0x2c4>)
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011708:	1ad3      	subs	r3, r2, r3
 801170a:	3b01      	subs	r3, #1
 801170c:	2b00      	cmp	r3, #0
 801170e:	f2c0 814d 	blt.w	80119ac <tcp_receive+0x440>
 8011712:	4b47      	ldr	r3, [pc, #284]	; (8011830 <tcp_receive+0x2c4>)
 8011714:	681a      	ldr	r2, [r3, #0]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801171a:	1ad3      	subs	r3, r2, r3
 801171c:	2b00      	cmp	r3, #0
 801171e:	f300 8145 	bgt.w	80119ac <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	8b5b      	ldrh	r3, [r3, #26]
 8011726:	f003 0304 	and.w	r3, r3, #4
 801172a:	2b00      	cmp	r3, #0
 801172c:	d010      	beq.n	8011750 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	8b5b      	ldrh	r3, [r3, #26]
 8011732:	f023 0304 	bic.w	r3, r3, #4
 8011736:	b29a      	uxth	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2200      	movs	r2, #0
 801174c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2200      	movs	r2, #0
 8011754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801175e:	10db      	asrs	r3, r3, #3
 8011760:	b21b      	sxth	r3, r3
 8011762:	b29a      	uxth	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801176a:	b29b      	uxth	r3, r3
 801176c:	4413      	add	r3, r2
 801176e:	b29b      	uxth	r3, r3
 8011770:	b21a      	sxth	r2, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011778:	4b2d      	ldr	r3, [pc, #180]	; (8011830 <tcp_receive+0x2c4>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	b29a      	uxth	r2, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011782:	b29b      	uxth	r3, r3
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2200      	movs	r2, #0
 801178c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011790:	4b27      	ldr	r3, [pc, #156]	; (8011830 <tcp_receive+0x2c4>)
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	7d1b      	ldrb	r3, [r3, #20]
 801179c:	2b03      	cmp	r3, #3
 801179e:	f240 8096 	bls.w	80118ce <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d244      	bcs.n	801183c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	8b5b      	ldrh	r3, [r3, #26]
 80117b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d001      	beq.n	80117c2 <tcp_receive+0x256>
 80117be:	2301      	movs	r3, #1
 80117c0:	e000      	b.n	80117c4 <tcp_receive+0x258>
 80117c2:	2302      	movs	r3, #2
 80117c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80117c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80117cc:	b29a      	uxth	r2, r3
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117d2:	fb12 f303 	smulbb	r3, r2, r3
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80117da:	4293      	cmp	r3, r2
 80117dc:	bf28      	it	cs
 80117de:	4613      	movcs	r3, r2
 80117e0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80117ea:	4413      	add	r3, r2
 80117ec:	b29a      	uxth	r2, r3
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d309      	bcc.n	801180c <tcp_receive+0x2a0>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011800:	4413      	add	r3, r2
 8011802:	b29a      	uxth	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801180a:	e060      	b.n	80118ce <tcp_receive+0x362>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011812:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011816:	e05a      	b.n	80118ce <tcp_receive+0x362>
 8011818:	0801ede4 	.word	0x0801ede4
 801181c:	0801f114 	.word	0x0801f114
 8011820:	0801ee30 	.word	0x0801ee30
 8011824:	0801f130 	.word	0x0801f130
 8011828:	20008b10 	.word	0x20008b10
 801182c:	20008b04 	.word	0x20008b04
 8011830:	20008b08 	.word	0x20008b08
 8011834:	20008af4 	.word	0x20008af4
 8011838:	20008b0e 	.word	0x20008b0e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011842:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011844:	4413      	add	r3, r2
 8011846:	b29a      	uxth	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801184e:	429a      	cmp	r2, r3
 8011850:	d309      	bcc.n	8011866 <tcp_receive+0x2fa>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011858:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801185a:	4413      	add	r3, r2
 801185c:	b29a      	uxth	r2, r3
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011864:	e004      	b.n	8011870 <tcp_receive+0x304>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801186c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801187c:	429a      	cmp	r2, r3
 801187e:	d326      	bcc.n	80118ce <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801188c:	1ad3      	subs	r3, r2, r3
 801188e:	b29a      	uxth	r2, r3
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a0:	4413      	add	r3, r2
 80118a2:	b29a      	uxth	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d30a      	bcc.n	80118c4 <tcp_receive+0x358>
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118b8:	4413      	add	r3, r2
 80118ba:	b29a      	uxth	r2, r3
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80118c2:	e004      	b.n	80118ce <tcp_receive+0x362>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118d6:	4a98      	ldr	r2, [pc, #608]	; (8011b38 <tcp_receive+0x5cc>)
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f7ff fdcb 	bl	8011474 <tcp_free_acked_segments>
 80118de:	4602      	mov	r2, r0
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118ec:	4a93      	ldr	r2, [pc, #588]	; (8011b3c <tcp_receive+0x5d0>)
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f7ff fdc0 	bl	8011474 <tcp_free_acked_segments>
 80118f4:	4602      	mov	r2, r0
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d104      	bne.n	801190c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011908:	861a      	strh	r2, [r3, #48]	; 0x30
 801190a:	e002      	b.n	8011912 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2200      	movs	r2, #0
 8011910:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2200      	movs	r2, #0
 8011916:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801191c:	2b00      	cmp	r3, #0
 801191e:	d103      	bne.n	8011928 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2200      	movs	r2, #0
 8011924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801192e:	4b84      	ldr	r3, [pc, #528]	; (8011b40 <tcp_receive+0x5d4>)
 8011930:	881b      	ldrh	r3, [r3, #0]
 8011932:	4413      	add	r3, r2
 8011934:	b29a      	uxth	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	8b5b      	ldrh	r3, [r3, #26]
 8011940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011944:	2b00      	cmp	r3, #0
 8011946:	d035      	beq.n	80119b4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801194c:	2b00      	cmp	r3, #0
 801194e:	d118      	bne.n	8011982 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011954:	2b00      	cmp	r3, #0
 8011956:	d00c      	beq.n	8011972 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011960:	68db      	ldr	r3, [r3, #12]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	4618      	mov	r0, r3
 8011966:	f7fa feaa 	bl	800c6be <lwip_htonl>
 801196a:	4603      	mov	r3, r0
 801196c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801196e:	2b00      	cmp	r3, #0
 8011970:	dc20      	bgt.n	80119b4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	8b5b      	ldrh	r3, [r3, #26]
 8011976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801197a:	b29a      	uxth	r2, r3
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011980:	e018      	b.n	80119b4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	4618      	mov	r0, r3
 8011990:	f7fa fe95 	bl	800c6be <lwip_htonl>
 8011994:	4603      	mov	r3, r0
 8011996:	1ae3      	subs	r3, r4, r3
 8011998:	2b00      	cmp	r3, #0
 801199a:	dc0b      	bgt.n	80119b4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	8b5b      	ldrh	r3, [r3, #26]
 80119a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80119a4:	b29a      	uxth	r2, r3
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119aa:	e003      	b.n	80119b4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f002 fbcd 	bl	801414c <tcp_send_empty_ack>
 80119b2:	e000      	b.n	80119b6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119b4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d05b      	beq.n	8011a76 <tcp_receive+0x50a>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119c2:	4b60      	ldr	r3, [pc, #384]	; (8011b44 <tcp_receive+0x5d8>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	1ad3      	subs	r3, r2, r3
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	da54      	bge.n	8011a76 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80119cc:	4b5e      	ldr	r3, [pc, #376]	; (8011b48 <tcp_receive+0x5dc>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	b29a      	uxth	r2, r3
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	1ad3      	subs	r3, r2, r3
 80119da:	b29b      	uxth	r3, r3
 80119dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80119e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119ea:	10db      	asrs	r3, r3, #3
 80119ec:	b21b      	sxth	r3, r3
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	1ad3      	subs	r3, r2, r3
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119fe:	b29a      	uxth	r2, r3
 8011a00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a04:	4413      	add	r3, r2
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	b21a      	sxth	r2, r3
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011a0e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	da05      	bge.n	8011a22 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011a16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a1a:	425b      	negs	r3, r3
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011a22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a2c:	109b      	asrs	r3, r3, #2
 8011a2e:	b21b      	sxth	r3, r3
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	1ad3      	subs	r3, r2, r3
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a40:	b29a      	uxth	r2, r3
 8011a42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a46:	4413      	add	r3, r2
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	b21a      	sxth	r2, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a56:	10db      	asrs	r3, r3, #3
 8011a58:	b21b      	sxth	r3, r3
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	4413      	add	r3, r2
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	b21a      	sxth	r2, r3
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011a76:	4b35      	ldr	r3, [pc, #212]	; (8011b4c <tcp_receive+0x5e0>)
 8011a78:	881b      	ldrh	r3, [r3, #0]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	f000 84e1 	beq.w	8012442 <tcp_receive+0xed6>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	7d1b      	ldrb	r3, [r3, #20]
 8011a84:	2b06      	cmp	r3, #6
 8011a86:	f200 84dc 	bhi.w	8012442 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a8e:	4b30      	ldr	r3, [pc, #192]	; (8011b50 <tcp_receive+0x5e4>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	1ad3      	subs	r3, r2, r3
 8011a94:	3b01      	subs	r3, #1
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	f2c0 808e 	blt.w	8011bb8 <tcp_receive+0x64c>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011aa0:	4b2a      	ldr	r3, [pc, #168]	; (8011b4c <tcp_receive+0x5e0>)
 8011aa2:	881b      	ldrh	r3, [r3, #0]
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	4b2a      	ldr	r3, [pc, #168]	; (8011b50 <tcp_receive+0x5e4>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	440b      	add	r3, r1
 8011aac:	1ad3      	subs	r3, r2, r3
 8011aae:	3301      	adds	r3, #1
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	f300 8081 	bgt.w	8011bb8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011ab6:	4b27      	ldr	r3, [pc, #156]	; (8011b54 <tcp_receive+0x5e8>)
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ac0:	4b23      	ldr	r3, [pc, #140]	; (8011b50 <tcp_receive+0x5e4>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	1ad3      	subs	r3, r2, r3
 8011ac6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011ac8:	4b22      	ldr	r3, [pc, #136]	; (8011b54 <tcp_receive+0x5e8>)
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d106      	bne.n	8011ade <tcp_receive+0x572>
 8011ad0:	4b21      	ldr	r3, [pc, #132]	; (8011b58 <tcp_receive+0x5ec>)
 8011ad2:	f240 5294 	movw	r2, #1428	; 0x594
 8011ad6:	4921      	ldr	r1, [pc, #132]	; (8011b5c <tcp_receive+0x5f0>)
 8011ad8:	4821      	ldr	r0, [pc, #132]	; (8011b60 <tcp_receive+0x5f4>)
 8011ada:	f009 ff19 	bl	801b910 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d906      	bls.n	8011af6 <tcp_receive+0x58a>
 8011ae8:	4b1b      	ldr	r3, [pc, #108]	; (8011b58 <tcp_receive+0x5ec>)
 8011aea:	f240 5295 	movw	r2, #1429	; 0x595
 8011aee:	491d      	ldr	r1, [pc, #116]	; (8011b64 <tcp_receive+0x5f8>)
 8011af0:	481b      	ldr	r0, [pc, #108]	; (8011b60 <tcp_receive+0x5f4>)
 8011af2:	f009 ff0d 	bl	801b910 <iprintf>
      off = (u16_t)off32;
 8011af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011afc:	4b15      	ldr	r3, [pc, #84]	; (8011b54 <tcp_receive+0x5e8>)
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	891b      	ldrh	r3, [r3, #8]
 8011b02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d906      	bls.n	8011b18 <tcp_receive+0x5ac>
 8011b0a:	4b13      	ldr	r3, [pc, #76]	; (8011b58 <tcp_receive+0x5ec>)
 8011b0c:	f240 5297 	movw	r2, #1431	; 0x597
 8011b10:	4915      	ldr	r1, [pc, #84]	; (8011b68 <tcp_receive+0x5fc>)
 8011b12:	4813      	ldr	r0, [pc, #76]	; (8011b60 <tcp_receive+0x5f4>)
 8011b14:	f009 fefc 	bl	801b910 <iprintf>
      inseg.len -= off;
 8011b18:	4b0e      	ldr	r3, [pc, #56]	; (8011b54 <tcp_receive+0x5e8>)
 8011b1a:	891a      	ldrh	r2, [r3, #8]
 8011b1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b20:	1ad3      	subs	r3, r2, r3
 8011b22:	b29a      	uxth	r2, r3
 8011b24:	4b0b      	ldr	r3, [pc, #44]	; (8011b54 <tcp_receive+0x5e8>)
 8011b26:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011b28:	4b0a      	ldr	r3, [pc, #40]	; (8011b54 <tcp_receive+0x5e8>)
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	891a      	ldrh	r2, [r3, #8]
 8011b2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011b36:	e029      	b.n	8011b8c <tcp_receive+0x620>
 8011b38:	0801f14c 	.word	0x0801f14c
 8011b3c:	0801f154 	.word	0x0801f154
 8011b40:	20008b0c 	.word	0x20008b0c
 8011b44:	20008b08 	.word	0x20008b08
 8011b48:	20010664 	.word	0x20010664
 8011b4c:	20008b0e 	.word	0x20008b0e
 8011b50:	20008b04 	.word	0x20008b04
 8011b54:	20008ae4 	.word	0x20008ae4
 8011b58:	0801ede4 	.word	0x0801ede4
 8011b5c:	0801f15c 	.word	0x0801f15c
 8011b60:	0801ee30 	.word	0x0801ee30
 8011b64:	0801f16c 	.word	0x0801f16c
 8011b68:	0801f17c 	.word	0x0801f17c
        off -= p->len;
 8011b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b6e:	895b      	ldrh	r3, [r3, #10]
 8011b70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b74:	1ad3      	subs	r3, r2, r3
 8011b76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011b7e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b82:	2200      	movs	r2, #0
 8011b84:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b8e:	895b      	ldrh	r3, [r3, #10]
 8011b90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d8e9      	bhi.n	8011b6c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011b98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011ba0:	f7fc f8aa 	bl	800dcf8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba8:	4a91      	ldr	r2, [pc, #580]	; (8011df0 <tcp_receive+0x884>)
 8011baa:	6013      	str	r3, [r2, #0]
 8011bac:	4b91      	ldr	r3, [pc, #580]	; (8011df4 <tcp_receive+0x888>)
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	4a8f      	ldr	r2, [pc, #572]	; (8011df0 <tcp_receive+0x884>)
 8011bb2:	6812      	ldr	r2, [r2, #0]
 8011bb4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011bb6:	e00d      	b.n	8011bd4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011bb8:	4b8d      	ldr	r3, [pc, #564]	; (8011df0 <tcp_receive+0x884>)
 8011bba:	681a      	ldr	r2, [r3, #0]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc0:	1ad3      	subs	r3, r2, r3
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	da06      	bge.n	8011bd4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	8b5b      	ldrh	r3, [r3, #26]
 8011bca:	f043 0302 	orr.w	r3, r3, #2
 8011bce:	b29a      	uxth	r2, r3
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011bd4:	4b86      	ldr	r3, [pc, #536]	; (8011df0 <tcp_receive+0x884>)
 8011bd6:	681a      	ldr	r2, [r3, #0]
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bdc:	1ad3      	subs	r3, r2, r3
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	f2c0 842a 	blt.w	8012438 <tcp_receive+0xecc>
 8011be4:	4b82      	ldr	r3, [pc, #520]	; (8011df0 <tcp_receive+0x884>)
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bec:	6879      	ldr	r1, [r7, #4]
 8011bee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011bf0:	440b      	add	r3, r1
 8011bf2:	1ad3      	subs	r3, r2, r3
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f300 841e 	bgt.w	8012438 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c00:	4b7b      	ldr	r3, [pc, #492]	; (8011df0 <tcp_receive+0x884>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	429a      	cmp	r2, r3
 8011c06:	f040 829a 	bne.w	801213e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011c0a:	4b7a      	ldr	r3, [pc, #488]	; (8011df4 <tcp_receive+0x888>)
 8011c0c:	891c      	ldrh	r4, [r3, #8]
 8011c0e:	4b79      	ldr	r3, [pc, #484]	; (8011df4 <tcp_receive+0x888>)
 8011c10:	68db      	ldr	r3, [r3, #12]
 8011c12:	899b      	ldrh	r3, [r3, #12]
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7fa fd3c 	bl	800c694 <lwip_htons>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	f003 0303 	and.w	r3, r3, #3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d001      	beq.n	8011c2c <tcp_receive+0x6c0>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	e000      	b.n	8011c2e <tcp_receive+0x6c2>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	4423      	add	r3, r4
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	4b71      	ldr	r3, [pc, #452]	; (8011df8 <tcp_receive+0x88c>)
 8011c34:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c3a:	4b6f      	ldr	r3, [pc, #444]	; (8011df8 <tcp_receive+0x88c>)
 8011c3c:	881b      	ldrh	r3, [r3, #0]
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d275      	bcs.n	8011d2e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c42:	4b6c      	ldr	r3, [pc, #432]	; (8011df4 <tcp_receive+0x888>)
 8011c44:	68db      	ldr	r3, [r3, #12]
 8011c46:	899b      	ldrh	r3, [r3, #12]
 8011c48:	b29b      	uxth	r3, r3
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7fa fd22 	bl	800c694 <lwip_htons>
 8011c50:	4603      	mov	r3, r0
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	f003 0301 	and.w	r3, r3, #1
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d01f      	beq.n	8011c9c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011c5c:	4b65      	ldr	r3, [pc, #404]	; (8011df4 <tcp_receive+0x888>)
 8011c5e:	68db      	ldr	r3, [r3, #12]
 8011c60:	899b      	ldrh	r3, [r3, #12]
 8011c62:	b29b      	uxth	r3, r3
 8011c64:	b21b      	sxth	r3, r3
 8011c66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c6a:	b21c      	sxth	r4, r3
 8011c6c:	4b61      	ldr	r3, [pc, #388]	; (8011df4 <tcp_receive+0x888>)
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	899b      	ldrh	r3, [r3, #12]
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7fa fd0d 	bl	800c694 <lwip_htons>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	b2db      	uxtb	r3, r3
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7fa fd04 	bl	800c694 <lwip_htons>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	b21b      	sxth	r3, r3
 8011c90:	4323      	orrs	r3, r4
 8011c92:	b21a      	sxth	r2, r3
 8011c94:	4b57      	ldr	r3, [pc, #348]	; (8011df4 <tcp_receive+0x888>)
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	b292      	uxth	r2, r2
 8011c9a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ca0:	4b54      	ldr	r3, [pc, #336]	; (8011df4 <tcp_receive+0x888>)
 8011ca2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011ca4:	4b53      	ldr	r3, [pc, #332]	; (8011df4 <tcp_receive+0x888>)
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	899b      	ldrh	r3, [r3, #12]
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7fa fcf1 	bl	800c694 <lwip_htons>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	f003 0302 	and.w	r3, r3, #2
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d005      	beq.n	8011cca <tcp_receive+0x75e>
            inseg.len -= 1;
 8011cbe:	4b4d      	ldr	r3, [pc, #308]	; (8011df4 <tcp_receive+0x888>)
 8011cc0:	891b      	ldrh	r3, [r3, #8]
 8011cc2:	3b01      	subs	r3, #1
 8011cc4:	b29a      	uxth	r2, r3
 8011cc6:	4b4b      	ldr	r3, [pc, #300]	; (8011df4 <tcp_receive+0x888>)
 8011cc8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011cca:	4b4a      	ldr	r3, [pc, #296]	; (8011df4 <tcp_receive+0x888>)
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	4a49      	ldr	r2, [pc, #292]	; (8011df4 <tcp_receive+0x888>)
 8011cd0:	8912      	ldrh	r2, [r2, #8]
 8011cd2:	4611      	mov	r1, r2
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7fb ff0f 	bl	800daf8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011cda:	4b46      	ldr	r3, [pc, #280]	; (8011df4 <tcp_receive+0x888>)
 8011cdc:	891c      	ldrh	r4, [r3, #8]
 8011cde:	4b45      	ldr	r3, [pc, #276]	; (8011df4 <tcp_receive+0x888>)
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	899b      	ldrh	r3, [r3, #12]
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fa fcd4 	bl	800c694 <lwip_htons>
 8011cec:	4603      	mov	r3, r0
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	f003 0303 	and.w	r3, r3, #3
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d001      	beq.n	8011cfc <tcp_receive+0x790>
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	e000      	b.n	8011cfe <tcp_receive+0x792>
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	4423      	add	r3, r4
 8011d00:	b29a      	uxth	r2, r3
 8011d02:	4b3d      	ldr	r3, [pc, #244]	; (8011df8 <tcp_receive+0x88c>)
 8011d04:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011d06:	4b3c      	ldr	r3, [pc, #240]	; (8011df8 <tcp_receive+0x88c>)
 8011d08:	881b      	ldrh	r3, [r3, #0]
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	4b38      	ldr	r3, [pc, #224]	; (8011df0 <tcp_receive+0x884>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	441a      	add	r2, r3
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d16:	6879      	ldr	r1, [r7, #4]
 8011d18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d1a:	440b      	add	r3, r1
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d006      	beq.n	8011d2e <tcp_receive+0x7c2>
 8011d20:	4b36      	ldr	r3, [pc, #216]	; (8011dfc <tcp_receive+0x890>)
 8011d22:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011d26:	4936      	ldr	r1, [pc, #216]	; (8011e00 <tcp_receive+0x894>)
 8011d28:	4836      	ldr	r0, [pc, #216]	; (8011e04 <tcp_receive+0x898>)
 8011d2a:	f009 fdf1 	bl	801b910 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	f000 80e7 	beq.w	8011f06 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d38:	4b2e      	ldr	r3, [pc, #184]	; (8011df4 <tcp_receive+0x888>)
 8011d3a:	68db      	ldr	r3, [r3, #12]
 8011d3c:	899b      	ldrh	r3, [r3, #12]
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fa fca7 	bl	800c694 <lwip_htons>
 8011d46:	4603      	mov	r3, r0
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	f003 0301 	and.w	r3, r3, #1
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d010      	beq.n	8011d74 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011d52:	e00a      	b.n	8011d6a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d58:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011d64:	68f8      	ldr	r0, [r7, #12]
 8011d66:	f7fd fcc8 	bl	800f6fa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d1f0      	bne.n	8011d54 <tcp_receive+0x7e8>
 8011d72:	e0c8      	b.n	8011f06 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d78:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011d7a:	e052      	b.n	8011e22 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	899b      	ldrh	r3, [r3, #12]
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fa fc85 	bl	800c694 <lwip_htons>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	f003 0301 	and.w	r3, r3, #1
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d03d      	beq.n	8011e12 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011d96:	4b17      	ldr	r3, [pc, #92]	; (8011df4 <tcp_receive+0x888>)
 8011d98:	68db      	ldr	r3, [r3, #12]
 8011d9a:	899b      	ldrh	r3, [r3, #12]
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7fa fc78 	bl	800c694 <lwip_htons>
 8011da4:	4603      	mov	r3, r0
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d130      	bne.n	8011e12 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011db0:	4b10      	ldr	r3, [pc, #64]	; (8011df4 <tcp_receive+0x888>)
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	899b      	ldrh	r3, [r3, #12]
 8011db6:	b29c      	uxth	r4, r3
 8011db8:	2001      	movs	r0, #1
 8011dba:	f7fa fc6b 	bl	800c694 <lwip_htons>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	4b0c      	ldr	r3, [pc, #48]	; (8011df4 <tcp_receive+0x888>)
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	4322      	orrs	r2, r4
 8011dc8:	b292      	uxth	r2, r2
 8011dca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011dcc:	4b09      	ldr	r3, [pc, #36]	; (8011df4 <tcp_receive+0x888>)
 8011dce:	891c      	ldrh	r4, [r3, #8]
 8011dd0:	4b08      	ldr	r3, [pc, #32]	; (8011df4 <tcp_receive+0x888>)
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	899b      	ldrh	r3, [r3, #12]
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7fa fc5b 	bl	800c694 <lwip_htons>
 8011dde:	4603      	mov	r3, r0
 8011de0:	b2db      	uxtb	r3, r3
 8011de2:	f003 0303 	and.w	r3, r3, #3
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d00e      	beq.n	8011e08 <tcp_receive+0x89c>
 8011dea:	2301      	movs	r3, #1
 8011dec:	e00d      	b.n	8011e0a <tcp_receive+0x89e>
 8011dee:	bf00      	nop
 8011df0:	20008b04 	.word	0x20008b04
 8011df4:	20008ae4 	.word	0x20008ae4
 8011df8:	20008b0e 	.word	0x20008b0e
 8011dfc:	0801ede4 	.word	0x0801ede4
 8011e00:	0801f18c 	.word	0x0801f18c
 8011e04:	0801ee30 	.word	0x0801ee30
 8011e08:	2300      	movs	r3, #0
 8011e0a:	4423      	add	r3, r4
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	4b98      	ldr	r3, [pc, #608]	; (8012070 <tcp_receive+0xb04>)
 8011e10:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e14:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011e1c:	6938      	ldr	r0, [r7, #16]
 8011e1e:	f7fd fc6c 	bl	800f6fa <tcp_seg_free>
            while (next &&
 8011e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d00e      	beq.n	8011e46 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011e28:	4b91      	ldr	r3, [pc, #580]	; (8012070 <tcp_receive+0xb04>)
 8011e2a:	881b      	ldrh	r3, [r3, #0]
 8011e2c:	461a      	mov	r2, r3
 8011e2e:	4b91      	ldr	r3, [pc, #580]	; (8012074 <tcp_receive+0xb08>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	441a      	add	r2, r3
 8011e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e3c:	8909      	ldrh	r1, [r1, #8]
 8011e3e:	440b      	add	r3, r1
 8011e40:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	da9a      	bge.n	8011d7c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d059      	beq.n	8011f00 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011e4c:	4b88      	ldr	r3, [pc, #544]	; (8012070 <tcp_receive+0xb04>)
 8011e4e:	881b      	ldrh	r3, [r3, #0]
 8011e50:	461a      	mov	r2, r3
 8011e52:	4b88      	ldr	r3, [pc, #544]	; (8012074 <tcp_receive+0xb08>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	441a      	add	r2, r3
 8011e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	dd4d      	ble.n	8011f00 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	b29a      	uxth	r2, r3
 8011e6c:	4b81      	ldr	r3, [pc, #516]	; (8012074 <tcp_receive+0xb08>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	b29a      	uxth	r2, r3
 8011e76:	4b80      	ldr	r3, [pc, #512]	; (8012078 <tcp_receive+0xb0c>)
 8011e78:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011e7a:	4b7f      	ldr	r3, [pc, #508]	; (8012078 <tcp_receive+0xb0c>)
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	899b      	ldrh	r3, [r3, #12]
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7fa fc06 	bl	800c694 <lwip_htons>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	f003 0302 	and.w	r3, r3, #2
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d005      	beq.n	8011ea0 <tcp_receive+0x934>
                inseg.len -= 1;
 8011e94:	4b78      	ldr	r3, [pc, #480]	; (8012078 <tcp_receive+0xb0c>)
 8011e96:	891b      	ldrh	r3, [r3, #8]
 8011e98:	3b01      	subs	r3, #1
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	4b76      	ldr	r3, [pc, #472]	; (8012078 <tcp_receive+0xb0c>)
 8011e9e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011ea0:	4b75      	ldr	r3, [pc, #468]	; (8012078 <tcp_receive+0xb0c>)
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	4a74      	ldr	r2, [pc, #464]	; (8012078 <tcp_receive+0xb0c>)
 8011ea6:	8912      	ldrh	r2, [r2, #8]
 8011ea8:	4611      	mov	r1, r2
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7fb fe24 	bl	800daf8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011eb0:	4b71      	ldr	r3, [pc, #452]	; (8012078 <tcp_receive+0xb0c>)
 8011eb2:	891c      	ldrh	r4, [r3, #8]
 8011eb4:	4b70      	ldr	r3, [pc, #448]	; (8012078 <tcp_receive+0xb0c>)
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	899b      	ldrh	r3, [r3, #12]
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7fa fbe9 	bl	800c694 <lwip_htons>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	f003 0303 	and.w	r3, r3, #3
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d001      	beq.n	8011ed2 <tcp_receive+0x966>
 8011ece:	2301      	movs	r3, #1
 8011ed0:	e000      	b.n	8011ed4 <tcp_receive+0x968>
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	4423      	add	r3, r4
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	4b65      	ldr	r3, [pc, #404]	; (8012070 <tcp_receive+0xb04>)
 8011eda:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011edc:	4b64      	ldr	r3, [pc, #400]	; (8012070 <tcp_receive+0xb04>)
 8011ede:	881b      	ldrh	r3, [r3, #0]
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	4b64      	ldr	r3, [pc, #400]	; (8012074 <tcp_receive+0xb08>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	441a      	add	r2, r3
 8011ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	d006      	beq.n	8011f00 <tcp_receive+0x994>
 8011ef2:	4b62      	ldr	r3, [pc, #392]	; (801207c <tcp_receive+0xb10>)
 8011ef4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011ef8:	4961      	ldr	r1, [pc, #388]	; (8012080 <tcp_receive+0xb14>)
 8011efa:	4862      	ldr	r0, [pc, #392]	; (8012084 <tcp_receive+0xb18>)
 8011efc:	f009 fd08 	bl	801b910 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f04:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011f06:	4b5a      	ldr	r3, [pc, #360]	; (8012070 <tcp_receive+0xb04>)
 8011f08:	881b      	ldrh	r3, [r3, #0]
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	4b59      	ldr	r3, [pc, #356]	; (8012074 <tcp_receive+0xb08>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	441a      	add	r2, r3
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f1a:	4b55      	ldr	r3, [pc, #340]	; (8012070 <tcp_receive+0xb04>)
 8011f1c:	881b      	ldrh	r3, [r3, #0]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d206      	bcs.n	8011f30 <tcp_receive+0x9c4>
 8011f22:	4b56      	ldr	r3, [pc, #344]	; (801207c <tcp_receive+0xb10>)
 8011f24:	f240 6207 	movw	r2, #1543	; 0x607
 8011f28:	4957      	ldr	r1, [pc, #348]	; (8012088 <tcp_receive+0xb1c>)
 8011f2a:	4856      	ldr	r0, [pc, #344]	; (8012084 <tcp_receive+0xb18>)
 8011f2c:	f009 fcf0 	bl	801b910 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f34:	4b4e      	ldr	r3, [pc, #312]	; (8012070 <tcp_receive+0xb04>)
 8011f36:	881b      	ldrh	r3, [r3, #0]
 8011f38:	1ad3      	subs	r3, r2, r3
 8011f3a:	b29a      	uxth	r2, r3
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7fc fd9d 	bl	800ea80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011f46:	4b4c      	ldr	r3, [pc, #304]	; (8012078 <tcp_receive+0xb0c>)
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	891b      	ldrh	r3, [r3, #8]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d006      	beq.n	8011f5e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011f50:	4b49      	ldr	r3, [pc, #292]	; (8012078 <tcp_receive+0xb0c>)
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	4a4d      	ldr	r2, [pc, #308]	; (801208c <tcp_receive+0xb20>)
 8011f56:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011f58:	4b47      	ldr	r3, [pc, #284]	; (8012078 <tcp_receive+0xb0c>)
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f5e:	4b46      	ldr	r3, [pc, #280]	; (8012078 <tcp_receive+0xb0c>)
 8011f60:	68db      	ldr	r3, [r3, #12]
 8011f62:	899b      	ldrh	r3, [r3, #12]
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fa fb94 	bl	800c694 <lwip_htons>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	b2db      	uxtb	r3, r3
 8011f70:	f003 0301 	and.w	r3, r3, #1
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	f000 80b8 	beq.w	80120ea <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011f7a:	4b45      	ldr	r3, [pc, #276]	; (8012090 <tcp_receive+0xb24>)
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	f043 0320 	orr.w	r3, r3, #32
 8011f82:	b2da      	uxtb	r2, r3
 8011f84:	4b42      	ldr	r3, [pc, #264]	; (8012090 <tcp_receive+0xb24>)
 8011f86:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011f88:	e0af      	b.n	80120ea <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f8e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	685b      	ldr	r3, [r3, #4]
 8011f98:	4a36      	ldr	r2, [pc, #216]	; (8012074 <tcp_receive+0xb08>)
 8011f9a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	891b      	ldrh	r3, [r3, #8]
 8011fa0:	461c      	mov	r4, r3
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	899b      	ldrh	r3, [r3, #12]
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7fa fb72 	bl	800c694 <lwip_htons>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	f003 0303 	and.w	r3, r3, #3
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d001      	beq.n	8011fc0 <tcp_receive+0xa54>
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	e000      	b.n	8011fc2 <tcp_receive+0xa56>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	191a      	adds	r2, r3, r4
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fc8:	441a      	add	r2, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fd2:	461c      	mov	r4, r3
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	891b      	ldrh	r3, [r3, #8]
 8011fd8:	461d      	mov	r5, r3
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	899b      	ldrh	r3, [r3, #12]
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7fa fb56 	bl	800c694 <lwip_htons>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	b2db      	uxtb	r3, r3
 8011fec:	f003 0303 	and.w	r3, r3, #3
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d001      	beq.n	8011ff8 <tcp_receive+0xa8c>
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	e000      	b.n	8011ffa <tcp_receive+0xa8e>
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	442b      	add	r3, r5
 8011ffc:	429c      	cmp	r4, r3
 8011ffe:	d206      	bcs.n	801200e <tcp_receive+0xaa2>
 8012000:	4b1e      	ldr	r3, [pc, #120]	; (801207c <tcp_receive+0xb10>)
 8012002:	f240 622b 	movw	r2, #1579	; 0x62b
 8012006:	4923      	ldr	r1, [pc, #140]	; (8012094 <tcp_receive+0xb28>)
 8012008:	481e      	ldr	r0, [pc, #120]	; (8012084 <tcp_receive+0xb18>)
 801200a:	f009 fc81 	bl	801b910 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	891b      	ldrh	r3, [r3, #8]
 8012012:	461c      	mov	r4, r3
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	68db      	ldr	r3, [r3, #12]
 8012018:	899b      	ldrh	r3, [r3, #12]
 801201a:	b29b      	uxth	r3, r3
 801201c:	4618      	mov	r0, r3
 801201e:	f7fa fb39 	bl	800c694 <lwip_htons>
 8012022:	4603      	mov	r3, r0
 8012024:	b2db      	uxtb	r3, r3
 8012026:	f003 0303 	and.w	r3, r3, #3
 801202a:	2b00      	cmp	r3, #0
 801202c:	d001      	beq.n	8012032 <tcp_receive+0xac6>
 801202e:	2301      	movs	r3, #1
 8012030:	e000      	b.n	8012034 <tcp_receive+0xac8>
 8012032:	2300      	movs	r3, #0
 8012034:	1919      	adds	r1, r3, r4
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801203a:	b28b      	uxth	r3, r1
 801203c:	1ad3      	subs	r3, r2, r3
 801203e:	b29a      	uxth	r2, r3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7fc fd1b 	bl	800ea80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	891b      	ldrh	r3, [r3, #8]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d028      	beq.n	80120a6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012054:	4b0d      	ldr	r3, [pc, #52]	; (801208c <tcp_receive+0xb20>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d01d      	beq.n	8012098 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801205c:	4b0b      	ldr	r3, [pc, #44]	; (801208c <tcp_receive+0xb20>)
 801205e:	681a      	ldr	r2, [r3, #0]
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	4619      	mov	r1, r3
 8012066:	4610      	mov	r0, r2
 8012068:	f7fb ffcc 	bl	800e004 <pbuf_cat>
 801206c:	e018      	b.n	80120a0 <tcp_receive+0xb34>
 801206e:	bf00      	nop
 8012070:	20008b0e 	.word	0x20008b0e
 8012074:	20008b04 	.word	0x20008b04
 8012078:	20008ae4 	.word	0x20008ae4
 801207c:	0801ede4 	.word	0x0801ede4
 8012080:	0801f1c4 	.word	0x0801f1c4
 8012084:	0801ee30 	.word	0x0801ee30
 8012088:	0801f200 	.word	0x0801f200
 801208c:	20008b14 	.word	0x20008b14
 8012090:	20008b11 	.word	0x20008b11
 8012094:	0801f220 	.word	0x0801f220
            } else {
              recv_data = cseg->p;
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	4a70      	ldr	r2, [pc, #448]	; (8012260 <tcp_receive+0xcf4>)
 801209e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	2200      	movs	r2, #0
 80120a4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	68db      	ldr	r3, [r3, #12]
 80120aa:	899b      	ldrh	r3, [r3, #12]
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fa faf0 	bl	800c694 <lwip_htons>
 80120b4:	4603      	mov	r3, r0
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	f003 0301 	and.w	r3, r3, #1
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00d      	beq.n	80120dc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80120c0:	4b68      	ldr	r3, [pc, #416]	; (8012264 <tcp_receive+0xcf8>)
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	f043 0320 	orr.w	r3, r3, #32
 80120c8:	b2da      	uxtb	r2, r3
 80120ca:	4b66      	ldr	r3, [pc, #408]	; (8012264 <tcp_receive+0xcf8>)
 80120cc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	7d1b      	ldrb	r3, [r3, #20]
 80120d2:	2b04      	cmp	r3, #4
 80120d4:	d102      	bne.n	80120dc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	2207      	movs	r2, #7
 80120da:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	681a      	ldr	r2, [r3, #0]
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80120e4:	68b8      	ldr	r0, [r7, #8]
 80120e6:	f7fd fb08 	bl	800f6fa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d008      	beq.n	8012104 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	685a      	ldr	r2, [r3, #4]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80120fe:	429a      	cmp	r2, r3
 8012100:	f43f af43 	beq.w	8011f8a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	8b5b      	ldrh	r3, [r3, #26]
 8012108:	f003 0301 	and.w	r3, r3, #1
 801210c:	2b00      	cmp	r3, #0
 801210e:	d00e      	beq.n	801212e <tcp_receive+0xbc2>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	8b5b      	ldrh	r3, [r3, #26]
 8012114:	f023 0301 	bic.w	r3, r3, #1
 8012118:	b29a      	uxth	r2, r3
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	835a      	strh	r2, [r3, #26]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	8b5b      	ldrh	r3, [r3, #26]
 8012122:	f043 0302 	orr.w	r3, r3, #2
 8012126:	b29a      	uxth	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801212c:	e188      	b.n	8012440 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	8b5b      	ldrh	r3, [r3, #26]
 8012132:	f043 0301 	orr.w	r3, r3, #1
 8012136:	b29a      	uxth	r2, r3
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801213c:	e180      	b.n	8012440 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012142:	2b00      	cmp	r3, #0
 8012144:	d106      	bne.n	8012154 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012146:	4848      	ldr	r0, [pc, #288]	; (8012268 <tcp_receive+0xcfc>)
 8012148:	f7fd faf0 	bl	800f72c <tcp_seg_copy>
 801214c:	4602      	mov	r2, r0
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	675a      	str	r2, [r3, #116]	; 0x74
 8012152:	e16d      	b.n	8012430 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012154:	2300      	movs	r3, #0
 8012156:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801215c:	63bb      	str	r3, [r7, #56]	; 0x38
 801215e:	e157      	b.n	8012410 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012162:	68db      	ldr	r3, [r3, #12]
 8012164:	685a      	ldr	r2, [r3, #4]
 8012166:	4b41      	ldr	r3, [pc, #260]	; (801226c <tcp_receive+0xd00>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	429a      	cmp	r2, r3
 801216c:	d11d      	bne.n	80121aa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801216e:	4b3e      	ldr	r3, [pc, #248]	; (8012268 <tcp_receive+0xcfc>)
 8012170:	891a      	ldrh	r2, [r3, #8]
 8012172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012174:	891b      	ldrh	r3, [r3, #8]
 8012176:	429a      	cmp	r2, r3
 8012178:	f240 814f 	bls.w	801241a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801217c:	483a      	ldr	r0, [pc, #232]	; (8012268 <tcp_receive+0xcfc>)
 801217e:	f7fd fad5 	bl	800f72c <tcp_seg_copy>
 8012182:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	2b00      	cmp	r3, #0
 8012188:	f000 8149 	beq.w	801241e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801218e:	2b00      	cmp	r3, #0
 8012190:	d003      	beq.n	801219a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012194:	697a      	ldr	r2, [r7, #20]
 8012196:	601a      	str	r2, [r3, #0]
 8012198:	e002      	b.n	80121a0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	697a      	ldr	r2, [r7, #20]
 801219e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80121a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121a2:	6978      	ldr	r0, [r7, #20]
 80121a4:	f7ff f8de 	bl	8011364 <tcp_oos_insert_segment>
                }
                break;
 80121a8:	e139      	b.n	801241e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80121aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d117      	bne.n	80121e0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80121b0:	4b2e      	ldr	r3, [pc, #184]	; (801226c <tcp_receive+0xd00>)
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b6:	68db      	ldr	r3, [r3, #12]
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	2b00      	cmp	r3, #0
 80121be:	da57      	bge.n	8012270 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80121c0:	4829      	ldr	r0, [pc, #164]	; (8012268 <tcp_receive+0xcfc>)
 80121c2:	f7fd fab3 	bl	800f72c <tcp_seg_copy>
 80121c6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	f000 8129 	beq.w	8012422 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	69ba      	ldr	r2, [r7, #24]
 80121d4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80121d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121d8:	69b8      	ldr	r0, [r7, #24]
 80121da:	f7ff f8c3 	bl	8011364 <tcp_oos_insert_segment>
                  }
                  break;
 80121de:	e120      	b.n	8012422 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80121e0:	4b22      	ldr	r3, [pc, #136]	; (801226c <tcp_receive+0xd00>)
 80121e2:	681a      	ldr	r2, [r3, #0]
 80121e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e6:	68db      	ldr	r3, [r3, #12]
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	1ad3      	subs	r3, r2, r3
 80121ec:	3b01      	subs	r3, #1
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	db3e      	blt.n	8012270 <tcp_receive+0xd04>
 80121f2:	4b1e      	ldr	r3, [pc, #120]	; (801226c <tcp_receive+0xd00>)
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	1ad3      	subs	r3, r2, r3
 80121fe:	3301      	adds	r3, #1
 8012200:	2b00      	cmp	r3, #0
 8012202:	dc35      	bgt.n	8012270 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012204:	4818      	ldr	r0, [pc, #96]	; (8012268 <tcp_receive+0xcfc>)
 8012206:	f7fd fa91 	bl	800f72c <tcp_seg_copy>
 801220a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	2b00      	cmp	r3, #0
 8012210:	f000 8109 	beq.w	8012426 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012216:	68db      	ldr	r3, [r3, #12]
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801221c:	8912      	ldrh	r2, [r2, #8]
 801221e:	441a      	add	r2, r3
 8012220:	4b12      	ldr	r3, [pc, #72]	; (801226c <tcp_receive+0xd00>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	2b00      	cmp	r3, #0
 8012228:	dd12      	ble.n	8012250 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801222a:	4b10      	ldr	r3, [pc, #64]	; (801226c <tcp_receive+0xd00>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	b29a      	uxth	r2, r3
 8012230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	b29b      	uxth	r3, r3
 8012238:	1ad3      	subs	r3, r2, r3
 801223a:	b29a      	uxth	r2, r3
 801223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801223e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012242:	685a      	ldr	r2, [r3, #4]
 8012244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012246:	891b      	ldrh	r3, [r3, #8]
 8012248:	4619      	mov	r1, r3
 801224a:	4610      	mov	r0, r2
 801224c:	f7fb fc54 	bl	800daf8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012252:	69fa      	ldr	r2, [r7, #28]
 8012254:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012256:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012258:	69f8      	ldr	r0, [r7, #28]
 801225a:	f7ff f883 	bl	8011364 <tcp_oos_insert_segment>
                  }
                  break;
 801225e:	e0e2      	b.n	8012426 <tcp_receive+0xeba>
 8012260:	20008b14 	.word	0x20008b14
 8012264:	20008b11 	.word	0x20008b11
 8012268:	20008ae4 	.word	0x20008ae4
 801226c:	20008b04 	.word	0x20008b04
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012272:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	f040 80c6 	bne.w	801240a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801227e:	4b80      	ldr	r3, [pc, #512]	; (8012480 <tcp_receive+0xf14>)
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801228a:	2b00      	cmp	r3, #0
 801228c:	f340 80bd 	ble.w	801240a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012292:	68db      	ldr	r3, [r3, #12]
 8012294:	899b      	ldrh	r3, [r3, #12]
 8012296:	b29b      	uxth	r3, r3
 8012298:	4618      	mov	r0, r3
 801229a:	f7fa f9fb 	bl	800c694 <lwip_htons>
 801229e:	4603      	mov	r3, r0
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	f003 0301 	and.w	r3, r3, #1
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	f040 80bf 	bne.w	801242a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80122ac:	4875      	ldr	r0, [pc, #468]	; (8012484 <tcp_receive+0xf18>)
 80122ae:	f7fd fa3d 	bl	800f72c <tcp_seg_copy>
 80122b2:	4602      	mov	r2, r0
 80122b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80122b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	f000 80b6 	beq.w	801242e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80122c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c4:	68db      	ldr	r3, [r3, #12]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122ca:	8912      	ldrh	r2, [r2, #8]
 80122cc:	441a      	add	r2, r3
 80122ce:	4b6c      	ldr	r3, [pc, #432]	; (8012480 <tcp_receive+0xf14>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	dd12      	ble.n	80122fe <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80122d8:	4b69      	ldr	r3, [pc, #420]	; (8012480 <tcp_receive+0xf14>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	b29a      	uxth	r2, r3
 80122de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	1ad3      	subs	r3, r2, r3
 80122e8:	b29a      	uxth	r2, r3
 80122ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80122ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f0:	685a      	ldr	r2, [r3, #4]
 80122f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f4:	891b      	ldrh	r3, [r3, #8]
 80122f6:	4619      	mov	r1, r3
 80122f8:	4610      	mov	r0, r2
 80122fa:	f7fb fbfd 	bl	800daf8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80122fe:	4b62      	ldr	r3, [pc, #392]	; (8012488 <tcp_receive+0xf1c>)
 8012300:	881b      	ldrh	r3, [r3, #0]
 8012302:	461a      	mov	r2, r3
 8012304:	4b5e      	ldr	r3, [pc, #376]	; (8012480 <tcp_receive+0xf14>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	441a      	add	r2, r3
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801230e:	6879      	ldr	r1, [r7, #4]
 8012310:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012312:	440b      	add	r3, r1
 8012314:	1ad3      	subs	r3, r2, r3
 8012316:	2b00      	cmp	r3, #0
 8012318:	f340 8089 	ble.w	801242e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	68db      	ldr	r3, [r3, #12]
 8012322:	899b      	ldrh	r3, [r3, #12]
 8012324:	b29b      	uxth	r3, r3
 8012326:	4618      	mov	r0, r3
 8012328:	f7fa f9b4 	bl	800c694 <lwip_htons>
 801232c:	4603      	mov	r3, r0
 801232e:	b2db      	uxtb	r3, r3
 8012330:	f003 0301 	and.w	r3, r3, #1
 8012334:	2b00      	cmp	r3, #0
 8012336:	d022      	beq.n	801237e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	68db      	ldr	r3, [r3, #12]
 801233e:	899b      	ldrh	r3, [r3, #12]
 8012340:	b29b      	uxth	r3, r3
 8012342:	b21b      	sxth	r3, r3
 8012344:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012348:	b21c      	sxth	r4, r3
 801234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	68db      	ldr	r3, [r3, #12]
 8012350:	899b      	ldrh	r3, [r3, #12]
 8012352:	b29b      	uxth	r3, r3
 8012354:	4618      	mov	r0, r3
 8012356:	f7fa f99d 	bl	800c694 <lwip_htons>
 801235a:	4603      	mov	r3, r0
 801235c:	b2db      	uxtb	r3, r3
 801235e:	b29b      	uxth	r3, r3
 8012360:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012364:	b29b      	uxth	r3, r3
 8012366:	4618      	mov	r0, r3
 8012368:	f7fa f994 	bl	800c694 <lwip_htons>
 801236c:	4603      	mov	r3, r0
 801236e:	b21b      	sxth	r3, r3
 8012370:	4323      	orrs	r3, r4
 8012372:	b21a      	sxth	r2, r3
 8012374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	b292      	uxth	r2, r2
 801237c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012382:	b29a      	uxth	r2, r3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012388:	4413      	add	r3, r2
 801238a:	b299      	uxth	r1, r3
 801238c:	4b3c      	ldr	r3, [pc, #240]	; (8012480 <tcp_receive+0xf14>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	b29a      	uxth	r2, r3
 8012392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	1a8a      	subs	r2, r1, r2
 8012398:	b292      	uxth	r2, r2
 801239a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	685a      	ldr	r2, [r3, #4]
 80123a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	891b      	ldrh	r3, [r3, #8]
 80123a8:	4619      	mov	r1, r3
 80123aa:	4610      	mov	r0, r2
 80123ac:	f7fb fba4 	bl	800daf8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80123b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	891c      	ldrh	r4, [r3, #8]
 80123b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	68db      	ldr	r3, [r3, #12]
 80123bc:	899b      	ldrh	r3, [r3, #12]
 80123be:	b29b      	uxth	r3, r3
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7fa f967 	bl	800c694 <lwip_htons>
 80123c6:	4603      	mov	r3, r0
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	f003 0303 	and.w	r3, r3, #3
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d001      	beq.n	80123d6 <tcp_receive+0xe6a>
 80123d2:	2301      	movs	r3, #1
 80123d4:	e000      	b.n	80123d8 <tcp_receive+0xe6c>
 80123d6:	2300      	movs	r3, #0
 80123d8:	4423      	add	r3, r4
 80123da:	b29a      	uxth	r2, r3
 80123dc:	4b2a      	ldr	r3, [pc, #168]	; (8012488 <tcp_receive+0xf1c>)
 80123de:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80123e0:	4b29      	ldr	r3, [pc, #164]	; (8012488 <tcp_receive+0xf1c>)
 80123e2:	881b      	ldrh	r3, [r3, #0]
 80123e4:	461a      	mov	r2, r3
 80123e6:	4b26      	ldr	r3, [pc, #152]	; (8012480 <tcp_receive+0xf14>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	441a      	add	r2, r3
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f0:	6879      	ldr	r1, [r7, #4]
 80123f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123f4:	440b      	add	r3, r1
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d019      	beq.n	801242e <tcp_receive+0xec2>
 80123fa:	4b24      	ldr	r3, [pc, #144]	; (801248c <tcp_receive+0xf20>)
 80123fc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012400:	4923      	ldr	r1, [pc, #140]	; (8012490 <tcp_receive+0xf24>)
 8012402:	4824      	ldr	r0, [pc, #144]	; (8012494 <tcp_receive+0xf28>)
 8012404:	f009 fa84 	bl	801b910 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012408:	e011      	b.n	801242e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012412:	2b00      	cmp	r3, #0
 8012414:	f47f aea4 	bne.w	8012160 <tcp_receive+0xbf4>
 8012418:	e00a      	b.n	8012430 <tcp_receive+0xec4>
                break;
 801241a:	bf00      	nop
 801241c:	e008      	b.n	8012430 <tcp_receive+0xec4>
                break;
 801241e:	bf00      	nop
 8012420:	e006      	b.n	8012430 <tcp_receive+0xec4>
                  break;
 8012422:	bf00      	nop
 8012424:	e004      	b.n	8012430 <tcp_receive+0xec4>
                  break;
 8012426:	bf00      	nop
 8012428:	e002      	b.n	8012430 <tcp_receive+0xec4>
                  break;
 801242a:	bf00      	nop
 801242c:	e000      	b.n	8012430 <tcp_receive+0xec4>
                break;
 801242e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f001 fe8b 	bl	801414c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012436:	e003      	b.n	8012440 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f001 fe87 	bl	801414c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801243e:	e01a      	b.n	8012476 <tcp_receive+0xf0a>
 8012440:	e019      	b.n	8012476 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012442:	4b0f      	ldr	r3, [pc, #60]	; (8012480 <tcp_receive+0xf14>)
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244a:	1ad3      	subs	r3, r2, r3
 801244c:	2b00      	cmp	r3, #0
 801244e:	db0a      	blt.n	8012466 <tcp_receive+0xefa>
 8012450:	4b0b      	ldr	r3, [pc, #44]	; (8012480 <tcp_receive+0xf14>)
 8012452:	681a      	ldr	r2, [r3, #0]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012458:	6879      	ldr	r1, [r7, #4]
 801245a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801245c:	440b      	add	r3, r1
 801245e:	1ad3      	subs	r3, r2, r3
 8012460:	3301      	adds	r3, #1
 8012462:	2b00      	cmp	r3, #0
 8012464:	dd07      	ble.n	8012476 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	8b5b      	ldrh	r3, [r3, #26]
 801246a:	f043 0302 	orr.w	r3, r3, #2
 801246e:	b29a      	uxth	r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012474:	e7ff      	b.n	8012476 <tcp_receive+0xf0a>
 8012476:	bf00      	nop
 8012478:	3750      	adds	r7, #80	; 0x50
 801247a:	46bd      	mov	sp, r7
 801247c:	bdb0      	pop	{r4, r5, r7, pc}
 801247e:	bf00      	nop
 8012480:	20008b04 	.word	0x20008b04
 8012484:	20008ae4 	.word	0x20008ae4
 8012488:	20008b0e 	.word	0x20008b0e
 801248c:	0801ede4 	.word	0x0801ede4
 8012490:	0801f18c 	.word	0x0801f18c
 8012494:	0801ee30 	.word	0x0801ee30

08012498 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801249e:	4b15      	ldr	r3, [pc, #84]	; (80124f4 <tcp_get_next_optbyte+0x5c>)
 80124a0:	881b      	ldrh	r3, [r3, #0]
 80124a2:	1c5a      	adds	r2, r3, #1
 80124a4:	b291      	uxth	r1, r2
 80124a6:	4a13      	ldr	r2, [pc, #76]	; (80124f4 <tcp_get_next_optbyte+0x5c>)
 80124a8:	8011      	strh	r1, [r2, #0]
 80124aa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80124ac:	4b12      	ldr	r3, [pc, #72]	; (80124f8 <tcp_get_next_optbyte+0x60>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d004      	beq.n	80124be <tcp_get_next_optbyte+0x26>
 80124b4:	4b11      	ldr	r3, [pc, #68]	; (80124fc <tcp_get_next_optbyte+0x64>)
 80124b6:	881b      	ldrh	r3, [r3, #0]
 80124b8:	88fa      	ldrh	r2, [r7, #6]
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d208      	bcs.n	80124d0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80124be:	4b10      	ldr	r3, [pc, #64]	; (8012500 <tcp_get_next_optbyte+0x68>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	3314      	adds	r3, #20
 80124c4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80124c6:	88fb      	ldrh	r3, [r7, #6]
 80124c8:	683a      	ldr	r2, [r7, #0]
 80124ca:	4413      	add	r3, r2
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	e00b      	b.n	80124e8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80124d0:	88fb      	ldrh	r3, [r7, #6]
 80124d2:	b2da      	uxtb	r2, r3
 80124d4:	4b09      	ldr	r3, [pc, #36]	; (80124fc <tcp_get_next_optbyte+0x64>)
 80124d6:	881b      	ldrh	r3, [r3, #0]
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80124de:	4b06      	ldr	r3, [pc, #24]	; (80124f8 <tcp_get_next_optbyte+0x60>)
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	797b      	ldrb	r3, [r7, #5]
 80124e4:	4413      	add	r3, r2
 80124e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80124e8:	4618      	mov	r0, r3
 80124ea:	370c      	adds	r7, #12
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr
 80124f4:	20008b00 	.word	0x20008b00
 80124f8:	20008afc 	.word	0x20008afc
 80124fc:	20008afa 	.word	0x20008afa
 8012500:	20008af4 	.word	0x20008af4

08012504 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b084      	sub	sp, #16
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d106      	bne.n	8012520 <tcp_parseopt+0x1c>
 8012512:	4b32      	ldr	r3, [pc, #200]	; (80125dc <tcp_parseopt+0xd8>)
 8012514:	f240 727d 	movw	r2, #1917	; 0x77d
 8012518:	4931      	ldr	r1, [pc, #196]	; (80125e0 <tcp_parseopt+0xdc>)
 801251a:	4832      	ldr	r0, [pc, #200]	; (80125e4 <tcp_parseopt+0xe0>)
 801251c:	f009 f9f8 	bl	801b910 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012520:	4b31      	ldr	r3, [pc, #196]	; (80125e8 <tcp_parseopt+0xe4>)
 8012522:	881b      	ldrh	r3, [r3, #0]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d055      	beq.n	80125d4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012528:	4b30      	ldr	r3, [pc, #192]	; (80125ec <tcp_parseopt+0xe8>)
 801252a:	2200      	movs	r2, #0
 801252c:	801a      	strh	r2, [r3, #0]
 801252e:	e045      	b.n	80125bc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012530:	f7ff ffb2 	bl	8012498 <tcp_get_next_optbyte>
 8012534:	4603      	mov	r3, r0
 8012536:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012538:	7bfb      	ldrb	r3, [r7, #15]
 801253a:	2b02      	cmp	r3, #2
 801253c:	d006      	beq.n	801254c <tcp_parseopt+0x48>
 801253e:	2b02      	cmp	r3, #2
 8012540:	dc2b      	bgt.n	801259a <tcp_parseopt+0x96>
 8012542:	2b00      	cmp	r3, #0
 8012544:	d041      	beq.n	80125ca <tcp_parseopt+0xc6>
 8012546:	2b01      	cmp	r3, #1
 8012548:	d127      	bne.n	801259a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801254a:	e037      	b.n	80125bc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801254c:	f7ff ffa4 	bl	8012498 <tcp_get_next_optbyte>
 8012550:	4603      	mov	r3, r0
 8012552:	2b04      	cmp	r3, #4
 8012554:	d13b      	bne.n	80125ce <tcp_parseopt+0xca>
 8012556:	4b25      	ldr	r3, [pc, #148]	; (80125ec <tcp_parseopt+0xe8>)
 8012558:	881b      	ldrh	r3, [r3, #0]
 801255a:	3301      	adds	r3, #1
 801255c:	4a22      	ldr	r2, [pc, #136]	; (80125e8 <tcp_parseopt+0xe4>)
 801255e:	8812      	ldrh	r2, [r2, #0]
 8012560:	4293      	cmp	r3, r2
 8012562:	da34      	bge.n	80125ce <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012564:	f7ff ff98 	bl	8012498 <tcp_get_next_optbyte>
 8012568:	4603      	mov	r3, r0
 801256a:	b29b      	uxth	r3, r3
 801256c:	021b      	lsls	r3, r3, #8
 801256e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012570:	f7ff ff92 	bl	8012498 <tcp_get_next_optbyte>
 8012574:	4603      	mov	r3, r0
 8012576:	b29a      	uxth	r2, r3
 8012578:	89bb      	ldrh	r3, [r7, #12]
 801257a:	4313      	orrs	r3, r2
 801257c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801257e:	89bb      	ldrh	r3, [r7, #12]
 8012580:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012584:	d804      	bhi.n	8012590 <tcp_parseopt+0x8c>
 8012586:	89bb      	ldrh	r3, [r7, #12]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d001      	beq.n	8012590 <tcp_parseopt+0x8c>
 801258c:	89ba      	ldrh	r2, [r7, #12]
 801258e:	e001      	b.n	8012594 <tcp_parseopt+0x90>
 8012590:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012598:	e010      	b.n	80125bc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801259a:	f7ff ff7d 	bl	8012498 <tcp_get_next_optbyte>
 801259e:	4603      	mov	r3, r0
 80125a0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80125a2:	7afb      	ldrb	r3, [r7, #11]
 80125a4:	2b01      	cmp	r3, #1
 80125a6:	d914      	bls.n	80125d2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80125a8:	7afb      	ldrb	r3, [r7, #11]
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	4b0f      	ldr	r3, [pc, #60]	; (80125ec <tcp_parseopt+0xe8>)
 80125ae:	881b      	ldrh	r3, [r3, #0]
 80125b0:	4413      	add	r3, r2
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	3b02      	subs	r3, #2
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	4b0c      	ldr	r3, [pc, #48]	; (80125ec <tcp_parseopt+0xe8>)
 80125ba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80125bc:	4b0b      	ldr	r3, [pc, #44]	; (80125ec <tcp_parseopt+0xe8>)
 80125be:	881a      	ldrh	r2, [r3, #0]
 80125c0:	4b09      	ldr	r3, [pc, #36]	; (80125e8 <tcp_parseopt+0xe4>)
 80125c2:	881b      	ldrh	r3, [r3, #0]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d3b3      	bcc.n	8012530 <tcp_parseopt+0x2c>
 80125c8:	e004      	b.n	80125d4 <tcp_parseopt+0xd0>
          return;
 80125ca:	bf00      	nop
 80125cc:	e002      	b.n	80125d4 <tcp_parseopt+0xd0>
            return;
 80125ce:	bf00      	nop
 80125d0:	e000      	b.n	80125d4 <tcp_parseopt+0xd0>
            return;
 80125d2:	bf00      	nop
      }
    }
  }
}
 80125d4:	3710      	adds	r7, #16
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	0801ede4 	.word	0x0801ede4
 80125e0:	0801f248 	.word	0x0801f248
 80125e4:	0801ee30 	.word	0x0801ee30
 80125e8:	20008af8 	.word	0x20008af8
 80125ec:	20008b00 	.word	0x20008b00

080125f0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80125f0:	b480      	push	{r7}
 80125f2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80125f4:	4b05      	ldr	r3, [pc, #20]	; (801260c <tcp_trigger_input_pcb_close+0x1c>)
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	f043 0310 	orr.w	r3, r3, #16
 80125fc:	b2da      	uxtb	r2, r3
 80125fe:	4b03      	ldr	r3, [pc, #12]	; (801260c <tcp_trigger_input_pcb_close+0x1c>)
 8012600:	701a      	strb	r2, [r3, #0]
}
 8012602:	bf00      	nop
 8012604:	46bd      	mov	sp, r7
 8012606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260a:	4770      	bx	lr
 801260c:	20008b11 	.word	0x20008b11

08012610 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	60b9      	str	r1, [r7, #8]
 801261a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d00a      	beq.n	8012638 <tcp_route+0x28>
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	7a1b      	ldrb	r3, [r3, #8]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d006      	beq.n	8012638 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	7a1b      	ldrb	r3, [r3, #8]
 801262e:	4618      	mov	r0, r3
 8012630:	f7fb f85a 	bl	800d6e8 <netif_get_by_index>
 8012634:	4603      	mov	r3, r0
 8012636:	e003      	b.n	8012640 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f005 fd63 	bl	8018104 <ip4_route>
 801263e:	4603      	mov	r3, r0
  }
}
 8012640:	4618      	mov	r0, r3
 8012642:	3710      	adds	r7, #16
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012648:	b590      	push	{r4, r7, lr}
 801264a:	b087      	sub	sp, #28
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	603b      	str	r3, [r7, #0]
 8012654:	4613      	mov	r3, r2
 8012656:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d105      	bne.n	801266a <tcp_create_segment+0x22>
 801265e:	4b44      	ldr	r3, [pc, #272]	; (8012770 <tcp_create_segment+0x128>)
 8012660:	22a3      	movs	r2, #163	; 0xa3
 8012662:	4944      	ldr	r1, [pc, #272]	; (8012774 <tcp_create_segment+0x12c>)
 8012664:	4844      	ldr	r0, [pc, #272]	; (8012778 <tcp_create_segment+0x130>)
 8012666:	f009 f953 	bl	801b910 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d105      	bne.n	801267c <tcp_create_segment+0x34>
 8012670:	4b3f      	ldr	r3, [pc, #252]	; (8012770 <tcp_create_segment+0x128>)
 8012672:	22a4      	movs	r2, #164	; 0xa4
 8012674:	4941      	ldr	r1, [pc, #260]	; (801277c <tcp_create_segment+0x134>)
 8012676:	4840      	ldr	r0, [pc, #256]	; (8012778 <tcp_create_segment+0x130>)
 8012678:	f009 f94a 	bl	801b910 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801267c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012680:	009b      	lsls	r3, r3, #2
 8012682:	b2db      	uxtb	r3, r3
 8012684:	f003 0304 	and.w	r3, r3, #4
 8012688:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801268a:	2003      	movs	r0, #3
 801268c:	f7fa fcb8 	bl	800d000 <memp_malloc>
 8012690:	6138      	str	r0, [r7, #16]
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d104      	bne.n	80126a2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012698:	68b8      	ldr	r0, [r7, #8]
 801269a:	f7fb fbe5 	bl	800de68 <pbuf_free>
    return NULL;
 801269e:	2300      	movs	r3, #0
 80126a0:	e061      	b.n	8012766 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80126a2:	693b      	ldr	r3, [r7, #16]
 80126a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80126a8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80126aa:	693b      	ldr	r3, [r7, #16]
 80126ac:	2200      	movs	r2, #0
 80126ae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80126b0:	693b      	ldr	r3, [r7, #16]
 80126b2:	68ba      	ldr	r2, [r7, #8]
 80126b4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	891a      	ldrh	r2, [r3, #8]
 80126ba:	7dfb      	ldrb	r3, [r7, #23]
 80126bc:	b29b      	uxth	r3, r3
 80126be:	429a      	cmp	r2, r3
 80126c0:	d205      	bcs.n	80126ce <tcp_create_segment+0x86>
 80126c2:	4b2b      	ldr	r3, [pc, #172]	; (8012770 <tcp_create_segment+0x128>)
 80126c4:	22b0      	movs	r2, #176	; 0xb0
 80126c6:	492e      	ldr	r1, [pc, #184]	; (8012780 <tcp_create_segment+0x138>)
 80126c8:	482b      	ldr	r0, [pc, #172]	; (8012778 <tcp_create_segment+0x130>)
 80126ca:	f009 f921 	bl	801b910 <iprintf>
  seg->len = p->tot_len - optlen;
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	891a      	ldrh	r2, [r3, #8]
 80126d2:	7dfb      	ldrb	r3, [r7, #23]
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	b29a      	uxth	r2, r3
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80126de:	2114      	movs	r1, #20
 80126e0:	68b8      	ldr	r0, [r7, #8]
 80126e2:	f7fb faf9 	bl	800dcd8 <pbuf_add_header>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d004      	beq.n	80126f6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80126ec:	6938      	ldr	r0, [r7, #16]
 80126ee:	f7fd f804 	bl	800f6fa <tcp_seg_free>
    return NULL;
 80126f2:	2300      	movs	r3, #0
 80126f4:	e037      	b.n	8012766 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80126f6:	693b      	ldr	r3, [r7, #16]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	685a      	ldr	r2, [r3, #4]
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	8ada      	ldrh	r2, [r3, #22]
 8012704:	693b      	ldr	r3, [r7, #16]
 8012706:	68dc      	ldr	r4, [r3, #12]
 8012708:	4610      	mov	r0, r2
 801270a:	f7f9 ffc3 	bl	800c694 <lwip_htons>
 801270e:	4603      	mov	r3, r0
 8012710:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	8b1a      	ldrh	r2, [r3, #24]
 8012716:	693b      	ldr	r3, [r7, #16]
 8012718:	68dc      	ldr	r4, [r3, #12]
 801271a:	4610      	mov	r0, r2
 801271c:	f7f9 ffba 	bl	800c694 <lwip_htons>
 8012720:	4603      	mov	r3, r0
 8012722:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	68dc      	ldr	r4, [r3, #12]
 8012728:	6838      	ldr	r0, [r7, #0]
 801272a:	f7f9 ffc8 	bl	800c6be <lwip_htonl>
 801272e:	4603      	mov	r3, r0
 8012730:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012732:	7dfb      	ldrb	r3, [r7, #23]
 8012734:	089b      	lsrs	r3, r3, #2
 8012736:	b2db      	uxtb	r3, r3
 8012738:	b29b      	uxth	r3, r3
 801273a:	3305      	adds	r3, #5
 801273c:	b29b      	uxth	r3, r3
 801273e:	031b      	lsls	r3, r3, #12
 8012740:	b29a      	uxth	r2, r3
 8012742:	79fb      	ldrb	r3, [r7, #7]
 8012744:	b29b      	uxth	r3, r3
 8012746:	4313      	orrs	r3, r2
 8012748:	b29a      	uxth	r2, r3
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	68dc      	ldr	r4, [r3, #12]
 801274e:	4610      	mov	r0, r2
 8012750:	f7f9 ffa0 	bl	800c694 <lwip_htons>
 8012754:	4603      	mov	r3, r0
 8012756:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	2200      	movs	r2, #0
 801275e:	749a      	strb	r2, [r3, #18]
 8012760:	2200      	movs	r2, #0
 8012762:	74da      	strb	r2, [r3, #19]
  return seg;
 8012764:	693b      	ldr	r3, [r7, #16]
}
 8012766:	4618      	mov	r0, r3
 8012768:	371c      	adds	r7, #28
 801276a:	46bd      	mov	sp, r7
 801276c:	bd90      	pop	{r4, r7, pc}
 801276e:	bf00      	nop
 8012770:	0801f264 	.word	0x0801f264
 8012774:	0801f298 	.word	0x0801f298
 8012778:	0801f2b8 	.word	0x0801f2b8
 801277c:	0801f2e0 	.word	0x0801f2e0
 8012780:	0801f304 	.word	0x0801f304

08012784 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b086      	sub	sp, #24
 8012788:	af00      	add	r7, sp, #0
 801278a:	607b      	str	r3, [r7, #4]
 801278c:	4603      	mov	r3, r0
 801278e:	73fb      	strb	r3, [r7, #15]
 8012790:	460b      	mov	r3, r1
 8012792:	81bb      	strh	r3, [r7, #12]
 8012794:	4613      	mov	r3, r2
 8012796:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012798:	89bb      	ldrh	r3, [r7, #12]
 801279a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d105      	bne.n	80127ae <tcp_pbuf_prealloc+0x2a>
 80127a2:	4b30      	ldr	r3, [pc, #192]	; (8012864 <tcp_pbuf_prealloc+0xe0>)
 80127a4:	22e8      	movs	r2, #232	; 0xe8
 80127a6:	4930      	ldr	r1, [pc, #192]	; (8012868 <tcp_pbuf_prealloc+0xe4>)
 80127a8:	4830      	ldr	r0, [pc, #192]	; (801286c <tcp_pbuf_prealloc+0xe8>)
 80127aa:	f009 f8b1 	bl	801b910 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80127ae:	6a3b      	ldr	r3, [r7, #32]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d105      	bne.n	80127c0 <tcp_pbuf_prealloc+0x3c>
 80127b4:	4b2b      	ldr	r3, [pc, #172]	; (8012864 <tcp_pbuf_prealloc+0xe0>)
 80127b6:	22e9      	movs	r2, #233	; 0xe9
 80127b8:	492d      	ldr	r1, [pc, #180]	; (8012870 <tcp_pbuf_prealloc+0xec>)
 80127ba:	482c      	ldr	r0, [pc, #176]	; (801286c <tcp_pbuf_prealloc+0xe8>)
 80127bc:	f009 f8a8 	bl	801b910 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80127c0:	89ba      	ldrh	r2, [r7, #12]
 80127c2:	897b      	ldrh	r3, [r7, #10]
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d221      	bcs.n	801280c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80127c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80127cc:	f003 0302 	and.w	r3, r3, #2
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d111      	bne.n	80127f8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80127d4:	6a3b      	ldr	r3, [r7, #32]
 80127d6:	8b5b      	ldrh	r3, [r3, #26]
 80127d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d115      	bne.n	801280c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80127e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d007      	beq.n	80127f8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80127e8:	6a3b      	ldr	r3, [r7, #32]
 80127ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d103      	bne.n	80127f8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80127f0:	6a3b      	ldr	r3, [r7, #32]
 80127f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d009      	beq.n	801280c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80127f8:	89bb      	ldrh	r3, [r7, #12]
 80127fa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80127fe:	f023 0203 	bic.w	r2, r3, #3
 8012802:	897b      	ldrh	r3, [r7, #10]
 8012804:	4293      	cmp	r3, r2
 8012806:	bf28      	it	cs
 8012808:	4613      	movcs	r3, r2
 801280a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801280c:	8af9      	ldrh	r1, [r7, #22]
 801280e:	7bfb      	ldrb	r3, [r7, #15]
 8012810:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012814:	4618      	mov	r0, r3
 8012816:	f7fb f811 	bl	800d83c <pbuf_alloc>
 801281a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d101      	bne.n	8012826 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012822:	2300      	movs	r3, #0
 8012824:	e019      	b.n	801285a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d006      	beq.n	801283c <tcp_pbuf_prealloc+0xb8>
 801282e:	4b0d      	ldr	r3, [pc, #52]	; (8012864 <tcp_pbuf_prealloc+0xe0>)
 8012830:	f240 120b 	movw	r2, #267	; 0x10b
 8012834:	490f      	ldr	r1, [pc, #60]	; (8012874 <tcp_pbuf_prealloc+0xf0>)
 8012836:	480d      	ldr	r0, [pc, #52]	; (801286c <tcp_pbuf_prealloc+0xe8>)
 8012838:	f009 f86a 	bl	801b910 <iprintf>
  *oversize = p->len - length;
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	895a      	ldrh	r2, [r3, #10]
 8012840:	89bb      	ldrh	r3, [r7, #12]
 8012842:	1ad3      	subs	r3, r2, r3
 8012844:	b29a      	uxth	r2, r3
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	89ba      	ldrh	r2, [r7, #12]
 801284e:	811a      	strh	r2, [r3, #8]
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	891a      	ldrh	r2, [r3, #8]
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	815a      	strh	r2, [r3, #10]
  return p;
 8012858:	693b      	ldr	r3, [r7, #16]
}
 801285a:	4618      	mov	r0, r3
 801285c:	3718      	adds	r7, #24
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	0801f264 	.word	0x0801f264
 8012868:	0801f31c 	.word	0x0801f31c
 801286c:	0801f2b8 	.word	0x0801f2b8
 8012870:	0801f340 	.word	0x0801f340
 8012874:	0801f360 	.word	0x0801f360

08012878 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	460b      	mov	r3, r1
 8012882:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d106      	bne.n	8012898 <tcp_write_checks+0x20>
 801288a:	4b33      	ldr	r3, [pc, #204]	; (8012958 <tcp_write_checks+0xe0>)
 801288c:	f240 1233 	movw	r2, #307	; 0x133
 8012890:	4932      	ldr	r1, [pc, #200]	; (801295c <tcp_write_checks+0xe4>)
 8012892:	4833      	ldr	r0, [pc, #204]	; (8012960 <tcp_write_checks+0xe8>)
 8012894:	f009 f83c 	bl	801b910 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	7d1b      	ldrb	r3, [r3, #20]
 801289c:	2b04      	cmp	r3, #4
 801289e:	d00e      	beq.n	80128be <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80128a4:	2b07      	cmp	r3, #7
 80128a6:	d00a      	beq.n	80128be <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80128ac:	2b02      	cmp	r3, #2
 80128ae:	d006      	beq.n	80128be <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80128b4:	2b03      	cmp	r3, #3
 80128b6:	d002      	beq.n	80128be <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80128b8:	f06f 030a 	mvn.w	r3, #10
 80128bc:	e048      	b.n	8012950 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80128be:	887b      	ldrh	r3, [r7, #2]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d101      	bne.n	80128c8 <tcp_write_checks+0x50>
    return ERR_OK;
 80128c4:	2300      	movs	r3, #0
 80128c6:	e043      	b.n	8012950 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80128ce:	887a      	ldrh	r2, [r7, #2]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d909      	bls.n	80128e8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	8b5b      	ldrh	r3, [r3, #26]
 80128d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128dc:	b29a      	uxth	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80128e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128e6:	e033      	b.n	8012950 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128ee:	2b08      	cmp	r3, #8
 80128f0:	d909      	bls.n	8012906 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	8b5b      	ldrh	r3, [r3, #26]
 80128f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128fa:	b29a      	uxth	r2, r3
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012904:	e024      	b.n	8012950 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801290c:	2b00      	cmp	r3, #0
 801290e:	d00f      	beq.n	8012930 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012914:	2b00      	cmp	r3, #0
 8012916:	d11a      	bne.n	801294e <tcp_write_checks+0xd6>
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801291c:	2b00      	cmp	r3, #0
 801291e:	d116      	bne.n	801294e <tcp_write_checks+0xd6>
 8012920:	4b0d      	ldr	r3, [pc, #52]	; (8012958 <tcp_write_checks+0xe0>)
 8012922:	f240 1255 	movw	r2, #341	; 0x155
 8012926:	490f      	ldr	r1, [pc, #60]	; (8012964 <tcp_write_checks+0xec>)
 8012928:	480d      	ldr	r0, [pc, #52]	; (8012960 <tcp_write_checks+0xe8>)
 801292a:	f008 fff1 	bl	801b910 <iprintf>
 801292e:	e00e      	b.n	801294e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012934:	2b00      	cmp	r3, #0
 8012936:	d103      	bne.n	8012940 <tcp_write_checks+0xc8>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801293c:	2b00      	cmp	r3, #0
 801293e:	d006      	beq.n	801294e <tcp_write_checks+0xd6>
 8012940:	4b05      	ldr	r3, [pc, #20]	; (8012958 <tcp_write_checks+0xe0>)
 8012942:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012946:	4908      	ldr	r1, [pc, #32]	; (8012968 <tcp_write_checks+0xf0>)
 8012948:	4805      	ldr	r0, [pc, #20]	; (8012960 <tcp_write_checks+0xe8>)
 801294a:	f008 ffe1 	bl	801b910 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801294e:	2300      	movs	r3, #0
}
 8012950:	4618      	mov	r0, r3
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}
 8012958:	0801f264 	.word	0x0801f264
 801295c:	0801f374 	.word	0x0801f374
 8012960:	0801f2b8 	.word	0x0801f2b8
 8012964:	0801f394 	.word	0x0801f394
 8012968:	0801f3d0 	.word	0x0801f3d0

0801296c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801296c:	b590      	push	{r4, r7, lr}
 801296e:	b09b      	sub	sp, #108	; 0x6c
 8012970:	af04      	add	r7, sp, #16
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	4611      	mov	r1, r2
 8012978:	461a      	mov	r2, r3
 801297a:	460b      	mov	r3, r1
 801297c:	80fb      	strh	r3, [r7, #6]
 801297e:	4613      	mov	r3, r2
 8012980:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012982:	2300      	movs	r3, #0
 8012984:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012986:	2300      	movs	r3, #0
 8012988:	653b      	str	r3, [r7, #80]	; 0x50
 801298a:	2300      	movs	r3, #0
 801298c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801298e:	2300      	movs	r3, #0
 8012990:	64bb      	str	r3, [r7, #72]	; 0x48
 8012992:	2300      	movs	r3, #0
 8012994:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012996:	2300      	movs	r3, #0
 8012998:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801299c:	2300      	movs	r3, #0
 801299e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80129a2:	2300      	movs	r3, #0
 80129a4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80129a6:	2300      	movs	r3, #0
 80129a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80129aa:	2300      	movs	r3, #0
 80129ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d109      	bne.n	80129c8 <tcp_write+0x5c>
 80129b4:	4ba4      	ldr	r3, [pc, #656]	; (8012c48 <tcp_write+0x2dc>)
 80129b6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80129ba:	49a4      	ldr	r1, [pc, #656]	; (8012c4c <tcp_write+0x2e0>)
 80129bc:	48a4      	ldr	r0, [pc, #656]	; (8012c50 <tcp_write+0x2e4>)
 80129be:	f008 ffa7 	bl	801b910 <iprintf>
 80129c2:	f06f 030f 	mvn.w	r3, #15
 80129c6:	e32a      	b.n	801301e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80129ce:	085b      	lsrs	r3, r3, #1
 80129d0:	b29a      	uxth	r2, r3
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129d6:	4293      	cmp	r3, r2
 80129d8:	bf28      	it	cs
 80129da:	4613      	movcs	r3, r2
 80129dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80129de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d102      	bne.n	80129ea <tcp_write+0x7e>
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129e8:	e000      	b.n	80129ec <tcp_write+0x80>
 80129ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d109      	bne.n	8012a08 <tcp_write+0x9c>
 80129f4:	4b94      	ldr	r3, [pc, #592]	; (8012c48 <tcp_write+0x2dc>)
 80129f6:	f240 12ad 	movw	r2, #429	; 0x1ad
 80129fa:	4996      	ldr	r1, [pc, #600]	; (8012c54 <tcp_write+0x2e8>)
 80129fc:	4894      	ldr	r0, [pc, #592]	; (8012c50 <tcp_write+0x2e4>)
 80129fe:	f008 ff87 	bl	801b910 <iprintf>
 8012a02:	f06f 030f 	mvn.w	r3, #15
 8012a06:	e30a      	b.n	801301e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012a08:	88fb      	ldrh	r3, [r7, #6]
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	68f8      	ldr	r0, [r7, #12]
 8012a0e:	f7ff ff33 	bl	8012878 <tcp_write_checks>
 8012a12:	4603      	mov	r3, r0
 8012a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012a18:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d002      	beq.n	8012a26 <tcp_write+0xba>
    return err;
 8012a20:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012a24:	e2fb      	b.n	801301e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a2c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a30:	2300      	movs	r3, #0
 8012a32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	f000 80f6 	beq.w	8012c2c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a44:	653b      	str	r3, [r7, #80]	; 0x50
 8012a46:	e002      	b.n	8012a4e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d1f8      	bne.n	8012a48 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a58:	7a9b      	ldrb	r3, [r3, #10]
 8012a5a:	009b      	lsls	r3, r3, #2
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	f003 0304 	and.w	r3, r3, #4
 8012a62:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012a64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a68:	891b      	ldrh	r3, [r3, #8]
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	8c3b      	ldrh	r3, [r7, #32]
 8012a6e:	440b      	add	r3, r1
 8012a70:	429a      	cmp	r2, r3
 8012a72:	da06      	bge.n	8012a82 <tcp_write+0x116>
 8012a74:	4b74      	ldr	r3, [pc, #464]	; (8012c48 <tcp_write+0x2dc>)
 8012a76:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012a7a:	4977      	ldr	r1, [pc, #476]	; (8012c58 <tcp_write+0x2ec>)
 8012a7c:	4874      	ldr	r0, [pc, #464]	; (8012c50 <tcp_write+0x2e4>)
 8012a7e:	f008 ff47 	bl	801b910 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a84:	891a      	ldrh	r2, [r3, #8]
 8012a86:	8c3b      	ldrh	r3, [r7, #32]
 8012a88:	4413      	add	r3, r2
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a8e:	1ad3      	subs	r3, r2, r3
 8012a90:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a98:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012a9a:	8a7b      	ldrh	r3, [r7, #18]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d026      	beq.n	8012aee <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012aa0:	8a7b      	ldrh	r3, [r7, #18]
 8012aa2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d206      	bcs.n	8012ab6 <tcp_write+0x14a>
 8012aa8:	4b67      	ldr	r3, [pc, #412]	; (8012c48 <tcp_write+0x2dc>)
 8012aaa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012aae:	496b      	ldr	r1, [pc, #428]	; (8012c5c <tcp_write+0x2f0>)
 8012ab0:	4867      	ldr	r0, [pc, #412]	; (8012c50 <tcp_write+0x2e4>)
 8012ab2:	f008 ff2d 	bl	801b910 <iprintf>
      seg = last_unsent;
 8012ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012aba:	8a7b      	ldrh	r3, [r7, #18]
 8012abc:	88fa      	ldrh	r2, [r7, #6]
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	bf28      	it	cs
 8012ac2:	4613      	movcs	r3, r2
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	bf28      	it	cs
 8012acc:	4613      	movcs	r3, r2
 8012ace:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012ad0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ad4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ad6:	4413      	add	r3, r2
 8012ad8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012adc:	8a7a      	ldrh	r2, [r7, #18]
 8012ade:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ae0:	1ad3      	subs	r3, r2, r3
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012ae6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012ae8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012aea:	1ad3      	subs	r3, r2, r3
 8012aec:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012aee:	8a7b      	ldrh	r3, [r7, #18]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d00b      	beq.n	8012b0c <tcp_write+0x1a0>
 8012af4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012af8:	88fb      	ldrh	r3, [r7, #6]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d006      	beq.n	8012b0c <tcp_write+0x1a0>
 8012afe:	4b52      	ldr	r3, [pc, #328]	; (8012c48 <tcp_write+0x2dc>)
 8012b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b04:	4956      	ldr	r1, [pc, #344]	; (8012c60 <tcp_write+0x2f4>)
 8012b06:	4852      	ldr	r0, [pc, #328]	; (8012c50 <tcp_write+0x2e4>)
 8012b08:	f008 ff02 	bl	801b910 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012b0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b10:	88fb      	ldrh	r3, [r7, #6]
 8012b12:	429a      	cmp	r2, r3
 8012b14:	f080 8167 	bcs.w	8012de6 <tcp_write+0x47a>
 8012b18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 8163 	beq.w	8012de6 <tcp_write+0x47a>
 8012b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b22:	891b      	ldrh	r3, [r3, #8]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f000 815e 	beq.w	8012de6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012b2a:	88fa      	ldrh	r2, [r7, #6]
 8012b2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b30:	1ad2      	subs	r2, r2, r3
 8012b32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b34:	4293      	cmp	r3, r2
 8012b36:	bfa8      	it	ge
 8012b38:	4613      	movge	r3, r2
 8012b3a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b3e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012b40:	797b      	ldrb	r3, [r7, #5]
 8012b42:	f003 0301 	and.w	r3, r3, #1
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d027      	beq.n	8012b9a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012b4a:	f107 0012 	add.w	r0, r7, #18
 8012b4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b50:	8bf9      	ldrh	r1, [r7, #30]
 8012b52:	2301      	movs	r3, #1
 8012b54:	9302      	str	r3, [sp, #8]
 8012b56:	797b      	ldrb	r3, [r7, #5]
 8012b58:	9301      	str	r3, [sp, #4]
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	9300      	str	r3, [sp, #0]
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2000      	movs	r0, #0
 8012b62:	f7ff fe0f 	bl	8012784 <tcp_pbuf_prealloc>
 8012b66:	6578      	str	r0, [r7, #84]	; 0x54
 8012b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	f000 8225 	beq.w	8012fba <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b72:	6858      	ldr	r0, [r3, #4]
 8012b74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b78:	68ba      	ldr	r2, [r7, #8]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	8bfa      	ldrh	r2, [r7, #30]
 8012b7e:	4619      	mov	r1, r3
 8012b80:	f008 feb0 	bl	801b8e4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012b84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012b86:	f7fb f9fd 	bl	800df84 <pbuf_clen>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b92:	4413      	add	r3, r2
 8012b94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012b98:	e041      	b.n	8012c1e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8012ba0:	e002      	b.n	8012ba8 <tcp_write+0x23c>
 8012ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8012ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1f8      	bne.n	8012ba2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bb2:	7b1b      	ldrb	r3, [r3, #12]
 8012bb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d115      	bne.n	8012be8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bbe:	685b      	ldr	r3, [r3, #4]
 8012bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bc2:	8952      	ldrh	r2, [r2, #10]
 8012bc4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012bc6:	68ba      	ldr	r2, [r7, #8]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d10d      	bne.n	8012be8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012bcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d006      	beq.n	8012be2 <tcp_write+0x276>
 8012bd4:	4b1c      	ldr	r3, [pc, #112]	; (8012c48 <tcp_write+0x2dc>)
 8012bd6:	f240 2231 	movw	r2, #561	; 0x231
 8012bda:	4922      	ldr	r1, [pc, #136]	; (8012c64 <tcp_write+0x2f8>)
 8012bdc:	481c      	ldr	r0, [pc, #112]	; (8012c50 <tcp_write+0x2e4>)
 8012bde:	f008 fe97 	bl	801b910 <iprintf>
          extendlen = seglen;
 8012be2:	8bfb      	ldrh	r3, [r7, #30]
 8012be4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012be6:	e01a      	b.n	8012c1e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012be8:	8bfb      	ldrh	r3, [r7, #30]
 8012bea:	2201      	movs	r2, #1
 8012bec:	4619      	mov	r1, r3
 8012bee:	2000      	movs	r0, #0
 8012bf0:	f7fa fe24 	bl	800d83c <pbuf_alloc>
 8012bf4:	6578      	str	r0, [r7, #84]	; 0x54
 8012bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	f000 81e0 	beq.w	8012fbe <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012bfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c02:	68ba      	ldr	r2, [r7, #8]
 8012c04:	441a      	add	r2, r3
 8012c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c08:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012c0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012c0c:	f7fb f9ba 	bl	800df84 <pbuf_clen>
 8012c10:	4603      	mov	r3, r0
 8012c12:	461a      	mov	r2, r3
 8012c14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c18:	4413      	add	r3, r2
 8012c1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012c1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c22:	8bfb      	ldrh	r3, [r7, #30]
 8012c24:	4413      	add	r3, r2
 8012c26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012c2a:	e0dc      	b.n	8012de6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	f000 80d7 	beq.w	8012de6 <tcp_write+0x47a>
 8012c38:	4b03      	ldr	r3, [pc, #12]	; (8012c48 <tcp_write+0x2dc>)
 8012c3a:	f240 224a 	movw	r2, #586	; 0x24a
 8012c3e:	490a      	ldr	r1, [pc, #40]	; (8012c68 <tcp_write+0x2fc>)
 8012c40:	4803      	ldr	r0, [pc, #12]	; (8012c50 <tcp_write+0x2e4>)
 8012c42:	f008 fe65 	bl	801b910 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012c46:	e0ce      	b.n	8012de6 <tcp_write+0x47a>
 8012c48:	0801f264 	.word	0x0801f264
 8012c4c:	0801f404 	.word	0x0801f404
 8012c50:	0801f2b8 	.word	0x0801f2b8
 8012c54:	0801f41c 	.word	0x0801f41c
 8012c58:	0801f450 	.word	0x0801f450
 8012c5c:	0801f468 	.word	0x0801f468
 8012c60:	0801f488 	.word	0x0801f488
 8012c64:	0801f4a8 	.word	0x0801f4a8
 8012c68:	0801f4d4 	.word	0x0801f4d4
    struct pbuf *p;
    u16_t left = len - pos;
 8012c6c:	88fa      	ldrh	r2, [r7, #6]
 8012c6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c72:	1ad3      	subs	r3, r2, r3
 8012c74:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012c76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c7a:	b29b      	uxth	r3, r3
 8012c7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c7e:	1ad3      	subs	r3, r2, r3
 8012c80:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012c82:	8b7a      	ldrh	r2, [r7, #26]
 8012c84:	8bbb      	ldrh	r3, [r7, #28]
 8012c86:	4293      	cmp	r3, r2
 8012c88:	bf28      	it	cs
 8012c8a:	4613      	movcs	r3, r2
 8012c8c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012c8e:	797b      	ldrb	r3, [r7, #5]
 8012c90:	f003 0301 	and.w	r3, r3, #1
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d036      	beq.n	8012d06 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012c98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c9c:	b29a      	uxth	r2, r3
 8012c9e:	8b3b      	ldrh	r3, [r7, #24]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	b299      	uxth	r1, r3
 8012ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	bf0c      	ite	eq
 8012caa:	2301      	moveq	r3, #1
 8012cac:	2300      	movne	r3, #0
 8012cae:	b2db      	uxtb	r3, r3
 8012cb0:	f107 0012 	add.w	r0, r7, #18
 8012cb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012cb6:	9302      	str	r3, [sp, #8]
 8012cb8:	797b      	ldrb	r3, [r7, #5]
 8012cba:	9301      	str	r3, [sp, #4]
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	9300      	str	r3, [sp, #0]
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	2036      	movs	r0, #54	; 0x36
 8012cc4:	f7ff fd5e 	bl	8012784 <tcp_pbuf_prealloc>
 8012cc8:	6338      	str	r0, [r7, #48]	; 0x30
 8012cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	f000 8178 	beq.w	8012fc2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd4:	895b      	ldrh	r3, [r3, #10]
 8012cd6:	8b3a      	ldrh	r2, [r7, #24]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d906      	bls.n	8012cea <tcp_write+0x37e>
 8012cdc:	4b8c      	ldr	r3, [pc, #560]	; (8012f10 <tcp_write+0x5a4>)
 8012cde:	f240 2266 	movw	r2, #614	; 0x266
 8012ce2:	498c      	ldr	r1, [pc, #560]	; (8012f14 <tcp_write+0x5a8>)
 8012ce4:	488c      	ldr	r0, [pc, #560]	; (8012f18 <tcp_write+0x5ac>)
 8012ce6:	f008 fe13 	bl	801b910 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cec:	685a      	ldr	r2, [r3, #4]
 8012cee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012cf2:	18d0      	adds	r0, r2, r3
 8012cf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cf8:	68ba      	ldr	r2, [r7, #8]
 8012cfa:	4413      	add	r3, r2
 8012cfc:	8b3a      	ldrh	r2, [r7, #24]
 8012cfe:	4619      	mov	r1, r3
 8012d00:	f008 fdf0 	bl	801b8e4 <memcpy>
 8012d04:	e02f      	b.n	8012d66 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012d06:	8a7b      	ldrh	r3, [r7, #18]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d006      	beq.n	8012d1a <tcp_write+0x3ae>
 8012d0c:	4b80      	ldr	r3, [pc, #512]	; (8012f10 <tcp_write+0x5a4>)
 8012d0e:	f240 2271 	movw	r2, #625	; 0x271
 8012d12:	4982      	ldr	r1, [pc, #520]	; (8012f1c <tcp_write+0x5b0>)
 8012d14:	4880      	ldr	r0, [pc, #512]	; (8012f18 <tcp_write+0x5ac>)
 8012d16:	f008 fdfb 	bl	801b910 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012d1a:	8b3b      	ldrh	r3, [r7, #24]
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	4619      	mov	r1, r3
 8012d20:	2036      	movs	r0, #54	; 0x36
 8012d22:	f7fa fd8b 	bl	800d83c <pbuf_alloc>
 8012d26:	6178      	str	r0, [r7, #20]
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f000 814b 	beq.w	8012fc6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012d30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d34:	68ba      	ldr	r2, [r7, #8]
 8012d36:	441a      	add	r2, r3
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d46:	4619      	mov	r1, r3
 8012d48:	2036      	movs	r0, #54	; 0x36
 8012d4a:	f7fa fd77 	bl	800d83c <pbuf_alloc>
 8012d4e:	6338      	str	r0, [r7, #48]	; 0x30
 8012d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d103      	bne.n	8012d5e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012d56:	6978      	ldr	r0, [r7, #20]
 8012d58:	f7fb f886 	bl	800de68 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012d5c:	e136      	b.n	8012fcc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012d5e:	6979      	ldr	r1, [r7, #20]
 8012d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d62:	f7fb f94f 	bl	800e004 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012d66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d68:	f7fb f90c 	bl	800df84 <pbuf_clen>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	461a      	mov	r2, r3
 8012d70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d74:	4413      	add	r3, r2
 8012d76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012d7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d7e:	2b09      	cmp	r3, #9
 8012d80:	d903      	bls.n	8012d8a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d84:	f7fb f870 	bl	800de68 <pbuf_free>
      goto memerr;
 8012d88:	e120      	b.n	8012fcc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012d8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d92:	441a      	add	r2, r3
 8012d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d98:	9300      	str	r3, [sp, #0]
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012da0:	68f8      	ldr	r0, [r7, #12]
 8012da2:	f7ff fc51 	bl	8012648 <tcp_create_segment>
 8012da6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	f000 810d 	beq.w	8012fca <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d102      	bne.n	8012dbc <tcp_write+0x450>
      queue = seg;
 8012db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012db8:	647b      	str	r3, [r7, #68]	; 0x44
 8012dba:	e00c      	b.n	8012dd6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d106      	bne.n	8012dd0 <tcp_write+0x464>
 8012dc2:	4b53      	ldr	r3, [pc, #332]	; (8012f10 <tcp_write+0x5a4>)
 8012dc4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012dc8:	4955      	ldr	r1, [pc, #340]	; (8012f20 <tcp_write+0x5b4>)
 8012dca:	4853      	ldr	r0, [pc, #332]	; (8012f18 <tcp_write+0x5ac>)
 8012dcc:	f008 fda0 	bl	801b910 <iprintf>
      prev_seg->next = seg;
 8012dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012dd4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dd8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012dda:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012dde:	8b3b      	ldrh	r3, [r7, #24]
 8012de0:	4413      	add	r3, r2
 8012de2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012de6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012dea:	88fb      	ldrh	r3, [r7, #6]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	f4ff af3d 	bcc.w	8012c6c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012df2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d02c      	beq.n	8012e52 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012dfe:	e01e      	b.n	8012e3e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e02:	891a      	ldrh	r2, [r3, #8]
 8012e04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e06:	4413      	add	r3, r2
 8012e08:	b29a      	uxth	r2, r3
 8012e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d110      	bne.n	8012e38 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e1c:	8952      	ldrh	r2, [r2, #10]
 8012e1e:	4413      	add	r3, r2
 8012e20:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012e22:	68b9      	ldr	r1, [r7, #8]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f008 fd5d 	bl	801b8e4 <memcpy>
        p->len += oversize_used;
 8012e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2c:	895a      	ldrh	r2, [r3, #10]
 8012e2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e30:	4413      	add	r3, r2
 8012e32:	b29a      	uxth	r2, r3
 8012e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e36:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d1dd      	bne.n	8012e00 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e46:	891a      	ldrh	r2, [r3, #8]
 8012e48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e4a:	4413      	add	r3, r2
 8012e4c:	b29a      	uxth	r2, r3
 8012e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e50:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012e52:	8a7a      	ldrh	r2, [r7, #18]
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d018      	beq.n	8012e92 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d106      	bne.n	8012e74 <tcp_write+0x508>
 8012e66:	4b2a      	ldr	r3, [pc, #168]	; (8012f10 <tcp_write+0x5a4>)
 8012e68:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012e6c:	492d      	ldr	r1, [pc, #180]	; (8012f24 <tcp_write+0x5b8>)
 8012e6e:	482a      	ldr	r0, [pc, #168]	; (8012f18 <tcp_write+0x5ac>)
 8012e70:	f008 fd4e 	bl	801b910 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7fb f8c2 	bl	800e004 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e82:	891a      	ldrh	r2, [r3, #8]
 8012e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e86:	891b      	ldrh	r3, [r3, #8]
 8012e88:	4413      	add	r3, r2
 8012e8a:	b29a      	uxth	r2, r3
 8012e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e8e:	811a      	strh	r2, [r3, #8]
 8012e90:	e037      	b.n	8012f02 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012e92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d034      	beq.n	8012f02 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d003      	beq.n	8012ea6 <tcp_write+0x53a>
 8012e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ea0:	685b      	ldr	r3, [r3, #4]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d106      	bne.n	8012eb4 <tcp_write+0x548>
 8012ea6:	4b1a      	ldr	r3, [pc, #104]	; (8012f10 <tcp_write+0x5a4>)
 8012ea8:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012eac:	491e      	ldr	r1, [pc, #120]	; (8012f28 <tcp_write+0x5bc>)
 8012eae:	481a      	ldr	r0, [pc, #104]	; (8012f18 <tcp_write+0x5ac>)
 8012eb0:	f008 fd2e 	bl	801b910 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8012eba:	e009      	b.n	8012ed0 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ebe:	891a      	ldrh	r2, [r3, #8]
 8012ec0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ec2:	4413      	add	r3, r2
 8012ec4:	b29a      	uxth	r2, r3
 8012ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d1f1      	bne.n	8012ebc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eda:	891a      	ldrh	r2, [r3, #8]
 8012edc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ede:	4413      	add	r3, r2
 8012ee0:	b29a      	uxth	r2, r3
 8012ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee8:	895a      	ldrh	r2, [r3, #10]
 8012eea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012eec:	4413      	add	r3, r2
 8012eee:	b29a      	uxth	r2, r3
 8012ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ef6:	891a      	ldrh	r2, [r3, #8]
 8012ef8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012efa:	4413      	add	r3, r2
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f00:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d111      	bne.n	8012f2c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8012f0e:	e010      	b.n	8012f32 <tcp_write+0x5c6>
 8012f10:	0801f264 	.word	0x0801f264
 8012f14:	0801f504 	.word	0x0801f504
 8012f18:	0801f2b8 	.word	0x0801f2b8
 8012f1c:	0801f544 	.word	0x0801f544
 8012f20:	0801f554 	.word	0x0801f554
 8012f24:	0801f568 	.word	0x0801f568
 8012f28:	0801f5a0 	.word	0x0801f5a0
  } else {
    last_unsent->next = queue;
 8012f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f30:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012f36:	88fb      	ldrh	r3, [r7, #6]
 8012f38:	441a      	add	r2, r3
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012f44:	88fb      	ldrh	r3, [r7, #6]
 8012f46:	1ad3      	subs	r3, r2, r3
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f56:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d00e      	beq.n	8012f82 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d10a      	bne.n	8012f82 <tcp_write+0x616>
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d106      	bne.n	8012f82 <tcp_write+0x616>
 8012f74:	4b2c      	ldr	r3, [pc, #176]	; (8013028 <tcp_write+0x6bc>)
 8012f76:	f240 3212 	movw	r2, #786	; 0x312
 8012f7a:	492c      	ldr	r1, [pc, #176]	; (801302c <tcp_write+0x6c0>)
 8012f7c:	482c      	ldr	r0, [pc, #176]	; (8013030 <tcp_write+0x6c4>)
 8012f7e:	f008 fcc7 	bl	801b910 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d016      	beq.n	8012fb6 <tcp_write+0x64a>
 8012f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f8a:	68db      	ldr	r3, [r3, #12]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d012      	beq.n	8012fb6 <tcp_write+0x64a>
 8012f90:	797b      	ldrb	r3, [r7, #5]
 8012f92:	f003 0302 	and.w	r3, r3, #2
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d10d      	bne.n	8012fb6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f9c:	68db      	ldr	r3, [r3, #12]
 8012f9e:	899b      	ldrh	r3, [r3, #12]
 8012fa0:	b29c      	uxth	r4, r3
 8012fa2:	2008      	movs	r0, #8
 8012fa4:	f7f9 fb76 	bl	800c694 <lwip_htons>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	461a      	mov	r2, r3
 8012fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fae:	68db      	ldr	r3, [r3, #12]
 8012fb0:	4322      	orrs	r2, r4
 8012fb2:	b292      	uxth	r2, r2
 8012fb4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	e031      	b.n	801301e <tcp_write+0x6b2>
          goto memerr;
 8012fba:	bf00      	nop
 8012fbc:	e006      	b.n	8012fcc <tcp_write+0x660>
            goto memerr;
 8012fbe:	bf00      	nop
 8012fc0:	e004      	b.n	8012fcc <tcp_write+0x660>
        goto memerr;
 8012fc2:	bf00      	nop
 8012fc4:	e002      	b.n	8012fcc <tcp_write+0x660>
        goto memerr;
 8012fc6:	bf00      	nop
 8012fc8:	e000      	b.n	8012fcc <tcp_write+0x660>
      goto memerr;
 8012fca:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	8b5b      	ldrh	r3, [r3, #26]
 8012fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fd4:	b29a      	uxth	r2, r3
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d002      	beq.n	8012fe6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012fe0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012fe2:	f7fa ff41 	bl	800de68 <pbuf_free>
  }
  if (queue != NULL) {
 8012fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d002      	beq.n	8012ff2 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012fec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012fee:	f7fc fb6f 	bl	800f6d0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d00e      	beq.n	801301a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013000:	2b00      	cmp	r3, #0
 8013002:	d10a      	bne.n	801301a <tcp_write+0x6ae>
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013008:	2b00      	cmp	r3, #0
 801300a:	d106      	bne.n	801301a <tcp_write+0x6ae>
 801300c:	4b06      	ldr	r3, [pc, #24]	; (8013028 <tcp_write+0x6bc>)
 801300e:	f240 3227 	movw	r2, #807	; 0x327
 8013012:	4906      	ldr	r1, [pc, #24]	; (801302c <tcp_write+0x6c0>)
 8013014:	4806      	ldr	r0, [pc, #24]	; (8013030 <tcp_write+0x6c4>)
 8013016:	f008 fc7b 	bl	801b910 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801301a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801301e:	4618      	mov	r0, r3
 8013020:	375c      	adds	r7, #92	; 0x5c
 8013022:	46bd      	mov	sp, r7
 8013024:	bd90      	pop	{r4, r7, pc}
 8013026:	bf00      	nop
 8013028:	0801f264 	.word	0x0801f264
 801302c:	0801f5d8 	.word	0x0801f5d8
 8013030:	0801f2b8 	.word	0x0801f2b8

08013034 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013034:	b590      	push	{r4, r7, lr}
 8013036:	b08b      	sub	sp, #44	; 0x2c
 8013038:	af02      	add	r7, sp, #8
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	460b      	mov	r3, r1
 801303e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013040:	2300      	movs	r3, #0
 8013042:	61fb      	str	r3, [r7, #28]
 8013044:	2300      	movs	r3, #0
 8013046:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013048:	2300      	movs	r3, #0
 801304a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d106      	bne.n	8013060 <tcp_split_unsent_seg+0x2c>
 8013052:	4b95      	ldr	r3, [pc, #596]	; (80132a8 <tcp_split_unsent_seg+0x274>)
 8013054:	f240 324b 	movw	r2, #843	; 0x34b
 8013058:	4994      	ldr	r1, [pc, #592]	; (80132ac <tcp_split_unsent_seg+0x278>)
 801305a:	4895      	ldr	r0, [pc, #596]	; (80132b0 <tcp_split_unsent_seg+0x27c>)
 801305c:	f008 fc58 	bl	801b910 <iprintf>

  useg = pcb->unsent;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013064:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d102      	bne.n	8013072 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801306c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013070:	e116      	b.n	80132a0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013072:	887b      	ldrh	r3, [r7, #2]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d109      	bne.n	801308c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013078:	4b8b      	ldr	r3, [pc, #556]	; (80132a8 <tcp_split_unsent_seg+0x274>)
 801307a:	f240 3253 	movw	r2, #851	; 0x353
 801307e:	498d      	ldr	r1, [pc, #564]	; (80132b4 <tcp_split_unsent_seg+0x280>)
 8013080:	488b      	ldr	r0, [pc, #556]	; (80132b0 <tcp_split_unsent_seg+0x27c>)
 8013082:	f008 fc45 	bl	801b910 <iprintf>
    return ERR_VAL;
 8013086:	f06f 0305 	mvn.w	r3, #5
 801308a:	e109      	b.n	80132a0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	891b      	ldrh	r3, [r3, #8]
 8013090:	887a      	ldrh	r2, [r7, #2]
 8013092:	429a      	cmp	r2, r3
 8013094:	d301      	bcc.n	801309a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013096:	2300      	movs	r3, #0
 8013098:	e102      	b.n	80132a0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801309e:	887a      	ldrh	r2, [r7, #2]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d906      	bls.n	80130b2 <tcp_split_unsent_seg+0x7e>
 80130a4:	4b80      	ldr	r3, [pc, #512]	; (80132a8 <tcp_split_unsent_seg+0x274>)
 80130a6:	f240 325b 	movw	r2, #859	; 0x35b
 80130aa:	4983      	ldr	r1, [pc, #524]	; (80132b8 <tcp_split_unsent_seg+0x284>)
 80130ac:	4880      	ldr	r0, [pc, #512]	; (80132b0 <tcp_split_unsent_seg+0x27c>)
 80130ae:	f008 fc2f 	bl	801b910 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	891b      	ldrh	r3, [r3, #8]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d106      	bne.n	80130c8 <tcp_split_unsent_seg+0x94>
 80130ba:	4b7b      	ldr	r3, [pc, #492]	; (80132a8 <tcp_split_unsent_seg+0x274>)
 80130bc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80130c0:	497e      	ldr	r1, [pc, #504]	; (80132bc <tcp_split_unsent_seg+0x288>)
 80130c2:	487b      	ldr	r0, [pc, #492]	; (80132b0 <tcp_split_unsent_seg+0x27c>)
 80130c4:	f008 fc24 	bl	801b910 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	7a9b      	ldrb	r3, [r3, #10]
 80130cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80130ce:	7bfb      	ldrb	r3, [r7, #15]
 80130d0:	009b      	lsls	r3, r3, #2
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	f003 0304 	and.w	r3, r3, #4
 80130d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	891a      	ldrh	r2, [r3, #8]
 80130de:	887b      	ldrh	r3, [r7, #2]
 80130e0:	1ad3      	subs	r3, r2, r3
 80130e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80130e4:	7bbb      	ldrb	r3, [r7, #14]
 80130e6:	b29a      	uxth	r2, r3
 80130e8:	89bb      	ldrh	r3, [r7, #12]
 80130ea:	4413      	add	r3, r2
 80130ec:	b29b      	uxth	r3, r3
 80130ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130f2:	4619      	mov	r1, r3
 80130f4:	2036      	movs	r0, #54	; 0x36
 80130f6:	f7fa fba1 	bl	800d83c <pbuf_alloc>
 80130fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	f000 80b7 	beq.w	8013272 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	891a      	ldrh	r2, [r3, #8]
 801310a:	697b      	ldr	r3, [r7, #20]
 801310c:	891b      	ldrh	r3, [r3, #8]
 801310e:	1ad3      	subs	r3, r2, r3
 8013110:	b29a      	uxth	r2, r3
 8013112:	887b      	ldrh	r3, [r7, #2]
 8013114:	4413      	add	r3, r2
 8013116:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	6858      	ldr	r0, [r3, #4]
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	685a      	ldr	r2, [r3, #4]
 8013120:	7bbb      	ldrb	r3, [r7, #14]
 8013122:	18d1      	adds	r1, r2, r3
 8013124:	897b      	ldrh	r3, [r7, #10]
 8013126:	89ba      	ldrh	r2, [r7, #12]
 8013128:	f7fb f8a4 	bl	800e274 <pbuf_copy_partial>
 801312c:	4603      	mov	r3, r0
 801312e:	461a      	mov	r2, r3
 8013130:	89bb      	ldrh	r3, [r7, #12]
 8013132:	4293      	cmp	r3, r2
 8013134:	f040 809f 	bne.w	8013276 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	899b      	ldrh	r3, [r3, #12]
 801313e:	b29b      	uxth	r3, r3
 8013140:	4618      	mov	r0, r3
 8013142:	f7f9 faa7 	bl	800c694 <lwip_htons>
 8013146:	4603      	mov	r3, r0
 8013148:	b2db      	uxtb	r3, r3
 801314a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801314e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013150:	2300      	movs	r3, #0
 8013152:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013154:	7efb      	ldrb	r3, [r7, #27]
 8013156:	f003 0308 	and.w	r3, r3, #8
 801315a:	2b00      	cmp	r3, #0
 801315c:	d007      	beq.n	801316e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801315e:	7efb      	ldrb	r3, [r7, #27]
 8013160:	f023 0308 	bic.w	r3, r3, #8
 8013164:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013166:	7ebb      	ldrb	r3, [r7, #26]
 8013168:	f043 0308 	orr.w	r3, r3, #8
 801316c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801316e:	7efb      	ldrb	r3, [r7, #27]
 8013170:	f003 0301 	and.w	r3, r3, #1
 8013174:	2b00      	cmp	r3, #0
 8013176:	d007      	beq.n	8013188 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013178:	7efb      	ldrb	r3, [r7, #27]
 801317a:	f023 0301 	bic.w	r3, r3, #1
 801317e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013180:	7ebb      	ldrb	r3, [r7, #26]
 8013182:	f043 0301 	orr.w	r3, r3, #1
 8013186:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	685b      	ldr	r3, [r3, #4]
 801318e:	4618      	mov	r0, r3
 8013190:	f7f9 fa95 	bl	800c6be <lwip_htonl>
 8013194:	4602      	mov	r2, r0
 8013196:	887b      	ldrh	r3, [r7, #2]
 8013198:	18d1      	adds	r1, r2, r3
 801319a:	7eba      	ldrb	r2, [r7, #26]
 801319c:	7bfb      	ldrb	r3, [r7, #15]
 801319e:	9300      	str	r3, [sp, #0]
 80131a0:	460b      	mov	r3, r1
 80131a2:	6939      	ldr	r1, [r7, #16]
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f7ff fa4f 	bl	8012648 <tcp_create_segment>
 80131aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80131ac:	69fb      	ldr	r3, [r7, #28]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d063      	beq.n	801327a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7fa fee4 	bl	800df84 <pbuf_clen>
 80131bc:	4603      	mov	r3, r0
 80131be:	461a      	mov	r2, r3
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131c6:	1a9b      	subs	r3, r3, r2
 80131c8:	b29a      	uxth	r2, r3
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	6858      	ldr	r0, [r3, #4]
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	891a      	ldrh	r2, [r3, #8]
 80131da:	89bb      	ldrh	r3, [r7, #12]
 80131dc:	1ad3      	subs	r3, r2, r3
 80131de:	b29b      	uxth	r3, r3
 80131e0:	4619      	mov	r1, r3
 80131e2:	f7fa fc89 	bl	800daf8 <pbuf_realloc>
  useg->len -= remainder;
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	891a      	ldrh	r2, [r3, #8]
 80131ea:	89bb      	ldrh	r3, [r7, #12]
 80131ec:	1ad3      	subs	r3, r2, r3
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	68db      	ldr	r3, [r3, #12]
 80131f8:	899b      	ldrh	r3, [r3, #12]
 80131fa:	b29c      	uxth	r4, r3
 80131fc:	7efb      	ldrb	r3, [r7, #27]
 80131fe:	b29b      	uxth	r3, r3
 8013200:	4618      	mov	r0, r3
 8013202:	f7f9 fa47 	bl	800c694 <lwip_htons>
 8013206:	4603      	mov	r3, r0
 8013208:	461a      	mov	r2, r3
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	68db      	ldr	r3, [r3, #12]
 801320e:	4322      	orrs	r2, r4
 8013210:	b292      	uxth	r2, r2
 8013212:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	4618      	mov	r0, r3
 801321a:	f7fa feb3 	bl	800df84 <pbuf_clen>
 801321e:	4603      	mov	r3, r0
 8013220:	461a      	mov	r2, r3
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013228:	4413      	add	r3, r2
 801322a:	b29a      	uxth	r2, r3
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	4618      	mov	r0, r3
 8013238:	f7fa fea4 	bl	800df84 <pbuf_clen>
 801323c:	4603      	mov	r3, r0
 801323e:	461a      	mov	r2, r3
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013246:	4413      	add	r3, r2
 8013248:	b29a      	uxth	r2, r3
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	69fb      	ldr	r3, [r7, #28]
 8013256:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	69fa      	ldr	r2, [r7, #28]
 801325c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801325e:	69fb      	ldr	r3, [r7, #28]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d103      	bne.n	801326e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2200      	movs	r2, #0
 801326a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801326e:	2300      	movs	r3, #0
 8013270:	e016      	b.n	80132a0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013272:	bf00      	nop
 8013274:	e002      	b.n	801327c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013276:	bf00      	nop
 8013278:	e000      	b.n	801327c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801327a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801327c:	69fb      	ldr	r3, [r7, #28]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d006      	beq.n	8013290 <tcp_split_unsent_seg+0x25c>
 8013282:	4b09      	ldr	r3, [pc, #36]	; (80132a8 <tcp_split_unsent_seg+0x274>)
 8013284:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013288:	490d      	ldr	r1, [pc, #52]	; (80132c0 <tcp_split_unsent_seg+0x28c>)
 801328a:	4809      	ldr	r0, [pc, #36]	; (80132b0 <tcp_split_unsent_seg+0x27c>)
 801328c:	f008 fb40 	bl	801b910 <iprintf>
  if (p != NULL) {
 8013290:	693b      	ldr	r3, [r7, #16]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d002      	beq.n	801329c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013296:	6938      	ldr	r0, [r7, #16]
 8013298:	f7fa fde6 	bl	800de68 <pbuf_free>
  }

  return ERR_MEM;
 801329c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3724      	adds	r7, #36	; 0x24
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd90      	pop	{r4, r7, pc}
 80132a8:	0801f264 	.word	0x0801f264
 80132ac:	0801f5f8 	.word	0x0801f5f8
 80132b0:	0801f2b8 	.word	0x0801f2b8
 80132b4:	0801f61c 	.word	0x0801f61c
 80132b8:	0801f640 	.word	0x0801f640
 80132bc:	0801f650 	.word	0x0801f650
 80132c0:	0801f660 	.word	0x0801f660

080132c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80132c4:	b590      	push	{r4, r7, lr}
 80132c6:	b085      	sub	sp, #20
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d106      	bne.n	80132e0 <tcp_send_fin+0x1c>
 80132d2:	4b21      	ldr	r3, [pc, #132]	; (8013358 <tcp_send_fin+0x94>)
 80132d4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80132d8:	4920      	ldr	r1, [pc, #128]	; (801335c <tcp_send_fin+0x98>)
 80132da:	4821      	ldr	r0, [pc, #132]	; (8013360 <tcp_send_fin+0x9c>)
 80132dc:	f008 fb18 	bl	801b910 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d02e      	beq.n	8013346 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132ec:	60fb      	str	r3, [r7, #12]
 80132ee:	e002      	b.n	80132f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d1f8      	bne.n	80132f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	68db      	ldr	r3, [r3, #12]
 8013302:	899b      	ldrh	r3, [r3, #12]
 8013304:	b29b      	uxth	r3, r3
 8013306:	4618      	mov	r0, r3
 8013308:	f7f9 f9c4 	bl	800c694 <lwip_htons>
 801330c:	4603      	mov	r3, r0
 801330e:	b2db      	uxtb	r3, r3
 8013310:	f003 0307 	and.w	r3, r3, #7
 8013314:	2b00      	cmp	r3, #0
 8013316:	d116      	bne.n	8013346 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	68db      	ldr	r3, [r3, #12]
 801331c:	899b      	ldrh	r3, [r3, #12]
 801331e:	b29c      	uxth	r4, r3
 8013320:	2001      	movs	r0, #1
 8013322:	f7f9 f9b7 	bl	800c694 <lwip_htons>
 8013326:	4603      	mov	r3, r0
 8013328:	461a      	mov	r2, r3
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	68db      	ldr	r3, [r3, #12]
 801332e:	4322      	orrs	r2, r4
 8013330:	b292      	uxth	r2, r2
 8013332:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	8b5b      	ldrh	r3, [r3, #26]
 8013338:	f043 0320 	orr.w	r3, r3, #32
 801333c:	b29a      	uxth	r2, r3
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013342:	2300      	movs	r3, #0
 8013344:	e004      	b.n	8013350 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013346:	2101      	movs	r1, #1
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f000 f80b 	bl	8013364 <tcp_enqueue_flags>
 801334e:	4603      	mov	r3, r0
}
 8013350:	4618      	mov	r0, r3
 8013352:	3714      	adds	r7, #20
 8013354:	46bd      	mov	sp, r7
 8013356:	bd90      	pop	{r4, r7, pc}
 8013358:	0801f264 	.word	0x0801f264
 801335c:	0801f66c 	.word	0x0801f66c
 8013360:	0801f2b8 	.word	0x0801f2b8

08013364 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b08a      	sub	sp, #40	; 0x28
 8013368:	af02      	add	r7, sp, #8
 801336a:	6078      	str	r0, [r7, #4]
 801336c:	460b      	mov	r3, r1
 801336e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013370:	2300      	movs	r3, #0
 8013372:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013374:	2300      	movs	r3, #0
 8013376:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013378:	78fb      	ldrb	r3, [r7, #3]
 801337a:	f003 0303 	and.w	r3, r3, #3
 801337e:	2b00      	cmp	r3, #0
 8013380:	d106      	bne.n	8013390 <tcp_enqueue_flags+0x2c>
 8013382:	4b67      	ldr	r3, [pc, #412]	; (8013520 <tcp_enqueue_flags+0x1bc>)
 8013384:	f240 4211 	movw	r2, #1041	; 0x411
 8013388:	4966      	ldr	r1, [pc, #408]	; (8013524 <tcp_enqueue_flags+0x1c0>)
 801338a:	4867      	ldr	r0, [pc, #412]	; (8013528 <tcp_enqueue_flags+0x1c4>)
 801338c:	f008 fac0 	bl	801b910 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d106      	bne.n	80133a4 <tcp_enqueue_flags+0x40>
 8013396:	4b62      	ldr	r3, [pc, #392]	; (8013520 <tcp_enqueue_flags+0x1bc>)
 8013398:	f240 4213 	movw	r2, #1043	; 0x413
 801339c:	4963      	ldr	r1, [pc, #396]	; (801352c <tcp_enqueue_flags+0x1c8>)
 801339e:	4862      	ldr	r0, [pc, #392]	; (8013528 <tcp_enqueue_flags+0x1c4>)
 80133a0:	f008 fab6 	bl	801b910 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80133a4:	78fb      	ldrb	r3, [r7, #3]
 80133a6:	f003 0302 	and.w	r3, r3, #2
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d001      	beq.n	80133b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80133ae:	2301      	movs	r3, #1
 80133b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80133b2:	7ffb      	ldrb	r3, [r7, #31]
 80133b4:	009b      	lsls	r3, r3, #2
 80133b6:	b2db      	uxtb	r3, r3
 80133b8:	f003 0304 	and.w	r3, r3, #4
 80133bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80133be:	7dfb      	ldrb	r3, [r7, #23]
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133c6:	4619      	mov	r1, r3
 80133c8:	2036      	movs	r0, #54	; 0x36
 80133ca:	f7fa fa37 	bl	800d83c <pbuf_alloc>
 80133ce:	6138      	str	r0, [r7, #16]
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d109      	bne.n	80133ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	8b5b      	ldrh	r3, [r3, #26]
 80133da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133de:	b29a      	uxth	r2, r3
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80133e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133e8:	e095      	b.n	8013516 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	895a      	ldrh	r2, [r3, #10]
 80133ee:	7dfb      	ldrb	r3, [r7, #23]
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d206      	bcs.n	8013404 <tcp_enqueue_flags+0xa0>
 80133f6:	4b4a      	ldr	r3, [pc, #296]	; (8013520 <tcp_enqueue_flags+0x1bc>)
 80133f8:	f240 4239 	movw	r2, #1081	; 0x439
 80133fc:	494c      	ldr	r1, [pc, #304]	; (8013530 <tcp_enqueue_flags+0x1cc>)
 80133fe:	484a      	ldr	r0, [pc, #296]	; (8013528 <tcp_enqueue_flags+0x1c4>)
 8013400:	f008 fa86 	bl	801b910 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013408:	78fa      	ldrb	r2, [r7, #3]
 801340a:	7ffb      	ldrb	r3, [r7, #31]
 801340c:	9300      	str	r3, [sp, #0]
 801340e:	460b      	mov	r3, r1
 8013410:	6939      	ldr	r1, [r7, #16]
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f7ff f918 	bl	8012648 <tcp_create_segment>
 8013418:	60f8      	str	r0, [r7, #12]
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d109      	bne.n	8013434 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	8b5b      	ldrh	r3, [r3, #26]
 8013424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013428:	b29a      	uxth	r2, r3
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801342e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013432:	e070      	b.n	8013516 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	68db      	ldr	r3, [r3, #12]
 8013438:	f003 0303 	and.w	r3, r3, #3
 801343c:	2b00      	cmp	r3, #0
 801343e:	d006      	beq.n	801344e <tcp_enqueue_flags+0xea>
 8013440:	4b37      	ldr	r3, [pc, #220]	; (8013520 <tcp_enqueue_flags+0x1bc>)
 8013442:	f240 4242 	movw	r2, #1090	; 0x442
 8013446:	493b      	ldr	r1, [pc, #236]	; (8013534 <tcp_enqueue_flags+0x1d0>)
 8013448:	4837      	ldr	r0, [pc, #220]	; (8013528 <tcp_enqueue_flags+0x1c4>)
 801344a:	f008 fa61 	bl	801b910 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	891b      	ldrh	r3, [r3, #8]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d006      	beq.n	8013464 <tcp_enqueue_flags+0x100>
 8013456:	4b32      	ldr	r3, [pc, #200]	; (8013520 <tcp_enqueue_flags+0x1bc>)
 8013458:	f240 4243 	movw	r2, #1091	; 0x443
 801345c:	4936      	ldr	r1, [pc, #216]	; (8013538 <tcp_enqueue_flags+0x1d4>)
 801345e:	4832      	ldr	r0, [pc, #200]	; (8013528 <tcp_enqueue_flags+0x1c4>)
 8013460:	f008 fa56 	bl	801b910 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013468:	2b00      	cmp	r3, #0
 801346a:	d103      	bne.n	8013474 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	68fa      	ldr	r2, [r7, #12]
 8013470:	66da      	str	r2, [r3, #108]	; 0x6c
 8013472:	e00d      	b.n	8013490 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013478:	61bb      	str	r3, [r7, #24]
 801347a:	e002      	b.n	8013482 <tcp_enqueue_flags+0x11e>
 801347c:	69bb      	ldr	r3, [r7, #24]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	61bb      	str	r3, [r7, #24]
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d1f8      	bne.n	801347c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801348a:	69bb      	ldr	r3, [r7, #24]
 801348c:	68fa      	ldr	r2, [r7, #12]
 801348e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2200      	movs	r2, #0
 8013494:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013498:	78fb      	ldrb	r3, [r7, #3]
 801349a:	f003 0302 	and.w	r3, r3, #2
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d104      	bne.n	80134ac <tcp_enqueue_flags+0x148>
 80134a2:	78fb      	ldrb	r3, [r7, #3]
 80134a4:	f003 0301 	and.w	r3, r3, #1
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d004      	beq.n	80134b6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134b0:	1c5a      	adds	r2, r3, #1
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80134b6:	78fb      	ldrb	r3, [r7, #3]
 80134b8:	f003 0301 	and.w	r3, r3, #1
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d006      	beq.n	80134ce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	8b5b      	ldrh	r3, [r3, #26]
 80134c4:	f043 0320 	orr.w	r3, r3, #32
 80134c8:	b29a      	uxth	r2, r3
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7fa fd56 	bl	800df84 <pbuf_clen>
 80134d8:	4603      	mov	r3, r0
 80134da:	461a      	mov	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134e2:	4413      	add	r3, r2
 80134e4:	b29a      	uxth	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d00e      	beq.n	8013514 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d10a      	bne.n	8013514 <tcp_enqueue_flags+0x1b0>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013502:	2b00      	cmp	r3, #0
 8013504:	d106      	bne.n	8013514 <tcp_enqueue_flags+0x1b0>
 8013506:	4b06      	ldr	r3, [pc, #24]	; (8013520 <tcp_enqueue_flags+0x1bc>)
 8013508:	f240 4265 	movw	r2, #1125	; 0x465
 801350c:	490b      	ldr	r1, [pc, #44]	; (801353c <tcp_enqueue_flags+0x1d8>)
 801350e:	4806      	ldr	r0, [pc, #24]	; (8013528 <tcp_enqueue_flags+0x1c4>)
 8013510:	f008 f9fe 	bl	801b910 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013514:	2300      	movs	r3, #0
}
 8013516:	4618      	mov	r0, r3
 8013518:	3720      	adds	r7, #32
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	0801f264 	.word	0x0801f264
 8013524:	0801f688 	.word	0x0801f688
 8013528:	0801f2b8 	.word	0x0801f2b8
 801352c:	0801f6e0 	.word	0x0801f6e0
 8013530:	0801f700 	.word	0x0801f700
 8013534:	0801f73c 	.word	0x0801f73c
 8013538:	0801f754 	.word	0x0801f754
 801353c:	0801f780 	.word	0x0801f780

08013540 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013540:	b5b0      	push	{r4, r5, r7, lr}
 8013542:	b08a      	sub	sp, #40	; 0x28
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d106      	bne.n	801355c <tcp_output+0x1c>
 801354e:	4b9e      	ldr	r3, [pc, #632]	; (80137c8 <tcp_output+0x288>)
 8013550:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013554:	499d      	ldr	r1, [pc, #628]	; (80137cc <tcp_output+0x28c>)
 8013556:	489e      	ldr	r0, [pc, #632]	; (80137d0 <tcp_output+0x290>)
 8013558:	f008 f9da 	bl	801b910 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	7d1b      	ldrb	r3, [r3, #20]
 8013560:	2b01      	cmp	r3, #1
 8013562:	d106      	bne.n	8013572 <tcp_output+0x32>
 8013564:	4b98      	ldr	r3, [pc, #608]	; (80137c8 <tcp_output+0x288>)
 8013566:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801356a:	499a      	ldr	r1, [pc, #616]	; (80137d4 <tcp_output+0x294>)
 801356c:	4898      	ldr	r0, [pc, #608]	; (80137d0 <tcp_output+0x290>)
 801356e:	f008 f9cf 	bl	801b910 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013572:	4b99      	ldr	r3, [pc, #612]	; (80137d8 <tcp_output+0x298>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	429a      	cmp	r2, r3
 801357a:	d101      	bne.n	8013580 <tcp_output+0x40>
    return ERR_OK;
 801357c:	2300      	movs	r3, #0
 801357e:	e1ce      	b.n	801391e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801358c:	4293      	cmp	r3, r2
 801358e:	bf28      	it	cs
 8013590:	4613      	movcs	r3, r2
 8013592:	b29b      	uxth	r3, r3
 8013594:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801359a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d10b      	bne.n	80135ba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	8b5b      	ldrh	r3, [r3, #26]
 80135a6:	f003 0302 	and.w	r3, r3, #2
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	f000 81aa 	beq.w	8013904 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f000 fdcb 	bl	801414c <tcp_send_empty_ack>
 80135b6:	4603      	mov	r3, r0
 80135b8:	e1b1      	b.n	801391e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80135ba:	6879      	ldr	r1, [r7, #4]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	3304      	adds	r3, #4
 80135c0:	461a      	mov	r2, r3
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f7ff f824 	bl	8012610 <tcp_route>
 80135c8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d102      	bne.n	80135d6 <tcp_output+0x96>
    return ERR_RTE;
 80135d0:	f06f 0303 	mvn.w	r3, #3
 80135d4:	e1a3      	b.n	801391e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d003      	beq.n	80135e4 <tcp_output+0xa4>
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d111      	bne.n	8013608 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d002      	beq.n	80135f0 <tcp_output+0xb0>
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	3304      	adds	r3, #4
 80135ee:	e000      	b.n	80135f2 <tcp_output+0xb2>
 80135f0:	2300      	movs	r3, #0
 80135f2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d102      	bne.n	8013600 <tcp_output+0xc0>
      return ERR_RTE;
 80135fa:	f06f 0303 	mvn.w	r3, #3
 80135fe:	e18e      	b.n	801391e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	681a      	ldr	r2, [r3, #0]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801360a:	68db      	ldr	r3, [r3, #12]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	4618      	mov	r0, r3
 8013610:	f7f9 f855 	bl	800c6be <lwip_htonl>
 8013614:	4602      	mov	r2, r0
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801361a:	1ad3      	subs	r3, r2, r3
 801361c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801361e:	8912      	ldrh	r2, [r2, #8]
 8013620:	4413      	add	r3, r2
 8013622:	69ba      	ldr	r2, [r7, #24]
 8013624:	429a      	cmp	r2, r3
 8013626:	d227      	bcs.n	8013678 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801362e:	461a      	mov	r2, r3
 8013630:	69bb      	ldr	r3, [r7, #24]
 8013632:	4293      	cmp	r3, r2
 8013634:	d114      	bne.n	8013660 <tcp_output+0x120>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801363a:	2b00      	cmp	r3, #0
 801363c:	d110      	bne.n	8013660 <tcp_output+0x120>
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013644:	2b00      	cmp	r3, #0
 8013646:	d10b      	bne.n	8013660 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2200      	movs	r2, #0
 801364c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2201      	movs	r2, #1
 8013654:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2200      	movs	r2, #0
 801365c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	8b5b      	ldrh	r3, [r3, #26]
 8013664:	f003 0302 	and.w	r3, r3, #2
 8013668:	2b00      	cmp	r3, #0
 801366a:	f000 814d 	beq.w	8013908 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f000 fd6c 	bl	801414c <tcp_send_empty_ack>
 8013674:	4603      	mov	r3, r0
 8013676:	e152      	b.n	801391e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2200      	movs	r2, #0
 801367c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013684:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013686:	6a3b      	ldr	r3, [r7, #32]
 8013688:	2b00      	cmp	r3, #0
 801368a:	f000 811c 	beq.w	80138c6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801368e:	e002      	b.n	8013696 <tcp_output+0x156>
 8013690:	6a3b      	ldr	r3, [r7, #32]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	623b      	str	r3, [r7, #32]
 8013696:	6a3b      	ldr	r3, [r7, #32]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d1f8      	bne.n	8013690 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801369e:	e112      	b.n	80138c6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80136a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a2:	68db      	ldr	r3, [r3, #12]
 80136a4:	899b      	ldrh	r3, [r3, #12]
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7f8 fff3 	bl	800c694 <lwip_htons>
 80136ae:	4603      	mov	r3, r0
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	f003 0304 	and.w	r3, r3, #4
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d006      	beq.n	80136c8 <tcp_output+0x188>
 80136ba:	4b43      	ldr	r3, [pc, #268]	; (80137c8 <tcp_output+0x288>)
 80136bc:	f240 5236 	movw	r2, #1334	; 0x536
 80136c0:	4946      	ldr	r1, [pc, #280]	; (80137dc <tcp_output+0x29c>)
 80136c2:	4843      	ldr	r0, [pc, #268]	; (80137d0 <tcp_output+0x290>)
 80136c4:	f008 f924 	bl	801b910 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d01f      	beq.n	8013710 <tcp_output+0x1d0>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	8b5b      	ldrh	r3, [r3, #26]
 80136d4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d119      	bne.n	8013710 <tcp_output+0x1d0>
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d00b      	beq.n	80136fc <tcp_output+0x1bc>
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d110      	bne.n	8013710 <tcp_output+0x1d0>
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136f2:	891a      	ldrh	r2, [r3, #8]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d209      	bcs.n	8013710 <tcp_output+0x1d0>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013702:	2b00      	cmp	r3, #0
 8013704:	d004      	beq.n	8013710 <tcp_output+0x1d0>
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801370c:	2b08      	cmp	r3, #8
 801370e:	d901      	bls.n	8013714 <tcp_output+0x1d4>
 8013710:	2301      	movs	r3, #1
 8013712:	e000      	b.n	8013716 <tcp_output+0x1d6>
 8013714:	2300      	movs	r3, #0
 8013716:	2b00      	cmp	r3, #0
 8013718:	d106      	bne.n	8013728 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	8b5b      	ldrh	r3, [r3, #26]
 801371e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013722:	2b00      	cmp	r3, #0
 8013724:	f000 80e4 	beq.w	80138f0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	7d1b      	ldrb	r3, [r3, #20]
 801372c:	2b02      	cmp	r3, #2
 801372e:	d00d      	beq.n	801374c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013732:	68db      	ldr	r3, [r3, #12]
 8013734:	899b      	ldrh	r3, [r3, #12]
 8013736:	b29c      	uxth	r4, r3
 8013738:	2010      	movs	r0, #16
 801373a:	f7f8 ffab 	bl	800c694 <lwip_htons>
 801373e:	4603      	mov	r3, r0
 8013740:	461a      	mov	r2, r3
 8013742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013744:	68db      	ldr	r3, [r3, #12]
 8013746:	4322      	orrs	r2, r4
 8013748:	b292      	uxth	r2, r2
 801374a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801374c:	697a      	ldr	r2, [r7, #20]
 801374e:	6879      	ldr	r1, [r7, #4]
 8013750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013752:	f000 f909 	bl	8013968 <tcp_output_segment>
 8013756:	4603      	mov	r3, r0
 8013758:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801375a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d009      	beq.n	8013776 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	8b5b      	ldrh	r3, [r3, #26]
 8013766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801376a:	b29a      	uxth	r2, r3
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	835a      	strh	r2, [r3, #26]
      return err;
 8013770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013774:	e0d3      	b.n	801391e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013778:	681a      	ldr	r2, [r3, #0]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	7d1b      	ldrb	r3, [r3, #20]
 8013782:	2b02      	cmp	r3, #2
 8013784:	d006      	beq.n	8013794 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	8b5b      	ldrh	r3, [r3, #26]
 801378a:	f023 0303 	bic.w	r3, r3, #3
 801378e:	b29a      	uxth	r2, r3
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	4618      	mov	r0, r3
 801379c:	f7f8 ff8f 	bl	800c6be <lwip_htonl>
 80137a0:	4604      	mov	r4, r0
 80137a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a4:	891b      	ldrh	r3, [r3, #8]
 80137a6:	461d      	mov	r5, r3
 80137a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137aa:	68db      	ldr	r3, [r3, #12]
 80137ac:	899b      	ldrh	r3, [r3, #12]
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7f8 ff6f 	bl	800c694 <lwip_htons>
 80137b6:	4603      	mov	r3, r0
 80137b8:	b2db      	uxtb	r3, r3
 80137ba:	f003 0303 	and.w	r3, r3, #3
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d00e      	beq.n	80137e0 <tcp_output+0x2a0>
 80137c2:	2301      	movs	r3, #1
 80137c4:	e00d      	b.n	80137e2 <tcp_output+0x2a2>
 80137c6:	bf00      	nop
 80137c8:	0801f264 	.word	0x0801f264
 80137cc:	0801f7a8 	.word	0x0801f7a8
 80137d0:	0801f2b8 	.word	0x0801f2b8
 80137d4:	0801f7c0 	.word	0x0801f7c0
 80137d8:	20010674 	.word	0x20010674
 80137dc:	0801f7e8 	.word	0x0801f7e8
 80137e0:	2300      	movs	r3, #0
 80137e2:	442b      	add	r3, r5
 80137e4:	4423      	add	r3, r4
 80137e6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	1ad3      	subs	r3, r2, r3
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	da02      	bge.n	80137fa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	68ba      	ldr	r2, [r7, #8]
 80137f8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80137fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fc:	891b      	ldrh	r3, [r3, #8]
 80137fe:	461c      	mov	r4, r3
 8013800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	899b      	ldrh	r3, [r3, #12]
 8013806:	b29b      	uxth	r3, r3
 8013808:	4618      	mov	r0, r3
 801380a:	f7f8 ff43 	bl	800c694 <lwip_htons>
 801380e:	4603      	mov	r3, r0
 8013810:	b2db      	uxtb	r3, r3
 8013812:	f003 0303 	and.w	r3, r3, #3
 8013816:	2b00      	cmp	r3, #0
 8013818:	d001      	beq.n	801381e <tcp_output+0x2de>
 801381a:	2301      	movs	r3, #1
 801381c:	e000      	b.n	8013820 <tcp_output+0x2e0>
 801381e:	2300      	movs	r3, #0
 8013820:	4423      	add	r3, r4
 8013822:	2b00      	cmp	r3, #0
 8013824:	d049      	beq.n	80138ba <tcp_output+0x37a>
      seg->next = NULL;
 8013826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013828:	2200      	movs	r2, #0
 801382a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013830:	2b00      	cmp	r3, #0
 8013832:	d105      	bne.n	8013840 <tcp_output+0x300>
        pcb->unacked = seg;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013838:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383c:	623b      	str	r3, [r7, #32]
 801383e:	e03f      	b.n	80138c0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	4618      	mov	r0, r3
 8013848:	f7f8 ff39 	bl	800c6be <lwip_htonl>
 801384c:	4604      	mov	r4, r0
 801384e:	6a3b      	ldr	r3, [r7, #32]
 8013850:	68db      	ldr	r3, [r3, #12]
 8013852:	685b      	ldr	r3, [r3, #4]
 8013854:	4618      	mov	r0, r3
 8013856:	f7f8 ff32 	bl	800c6be <lwip_htonl>
 801385a:	4603      	mov	r3, r0
 801385c:	1ae3      	subs	r3, r4, r3
 801385e:	2b00      	cmp	r3, #0
 8013860:	da24      	bge.n	80138ac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	3370      	adds	r3, #112	; 0x70
 8013866:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013868:	e002      	b.n	8013870 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801386a:	69fb      	ldr	r3, [r7, #28]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d011      	beq.n	801389c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013878:	69fb      	ldr	r3, [r7, #28]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	68db      	ldr	r3, [r3, #12]
 801387e:	685b      	ldr	r3, [r3, #4]
 8013880:	4618      	mov	r0, r3
 8013882:	f7f8 ff1c 	bl	800c6be <lwip_htonl>
 8013886:	4604      	mov	r4, r0
 8013888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	4618      	mov	r0, r3
 8013890:	f7f8 ff15 	bl	800c6be <lwip_htonl>
 8013894:	4603      	mov	r3, r0
 8013896:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013898:	2b00      	cmp	r3, #0
 801389a:	dbe6      	blt.n	801386a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138a8:	601a      	str	r2, [r3, #0]
 80138aa:	e009      	b.n	80138c0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80138ac:	6a3b      	ldr	r3, [r7, #32]
 80138ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138b0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80138b2:	6a3b      	ldr	r3, [r7, #32]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	623b      	str	r3, [r7, #32]
 80138b8:	e002      	b.n	80138c0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80138ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138bc:	f7fb ff1d 	bl	800f6fa <tcp_seg_free>
    }
    seg = pcb->unsent;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138c4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80138c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d012      	beq.n	80138f2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80138cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ce:	68db      	ldr	r3, [r3, #12]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7f8 fef3 	bl	800c6be <lwip_htonl>
 80138d8:	4602      	mov	r2, r0
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138de:	1ad3      	subs	r3, r2, r3
 80138e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138e2:	8912      	ldrh	r2, [r2, #8]
 80138e4:	4413      	add	r3, r2
  while (seg != NULL &&
 80138e6:	69ba      	ldr	r2, [r7, #24]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	f4bf aed9 	bcs.w	80136a0 <tcp_output+0x160>
 80138ee:	e000      	b.n	80138f2 <tcp_output+0x3b2>
      break;
 80138f0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d108      	bne.n	801390c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2200      	movs	r2, #0
 80138fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013902:	e004      	b.n	801390e <tcp_output+0x3ce>
    goto output_done;
 8013904:	bf00      	nop
 8013906:	e002      	b.n	801390e <tcp_output+0x3ce>
    goto output_done;
 8013908:	bf00      	nop
 801390a:	e000      	b.n	801390e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801390c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	8b5b      	ldrh	r3, [r3, #26]
 8013912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013916:	b29a      	uxth	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801391c:	2300      	movs	r3, #0
}
 801391e:	4618      	mov	r0, r3
 8013920:	3728      	adds	r7, #40	; 0x28
 8013922:	46bd      	mov	sp, r7
 8013924:	bdb0      	pop	{r4, r5, r7, pc}
 8013926:	bf00      	nop

08013928 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d106      	bne.n	8013944 <tcp_output_segment_busy+0x1c>
 8013936:	4b09      	ldr	r3, [pc, #36]	; (801395c <tcp_output_segment_busy+0x34>)
 8013938:	f240 529a 	movw	r2, #1434	; 0x59a
 801393c:	4908      	ldr	r1, [pc, #32]	; (8013960 <tcp_output_segment_busy+0x38>)
 801393e:	4809      	ldr	r0, [pc, #36]	; (8013964 <tcp_output_segment_busy+0x3c>)
 8013940:	f007 ffe6 	bl	801b910 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	7b9b      	ldrb	r3, [r3, #14]
 801394a:	2b01      	cmp	r3, #1
 801394c:	d001      	beq.n	8013952 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801394e:	2301      	movs	r3, #1
 8013950:	e000      	b.n	8013954 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013952:	2300      	movs	r3, #0
}
 8013954:	4618      	mov	r0, r3
 8013956:	3708      	adds	r7, #8
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}
 801395c:	0801f264 	.word	0x0801f264
 8013960:	0801f800 	.word	0x0801f800
 8013964:	0801f2b8 	.word	0x0801f2b8

08013968 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013968:	b5b0      	push	{r4, r5, r7, lr}
 801396a:	b08c      	sub	sp, #48	; 0x30
 801396c:	af04      	add	r7, sp, #16
 801396e:	60f8      	str	r0, [r7, #12]
 8013970:	60b9      	str	r1, [r7, #8]
 8013972:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d106      	bne.n	8013988 <tcp_output_segment+0x20>
 801397a:	4b63      	ldr	r3, [pc, #396]	; (8013b08 <tcp_output_segment+0x1a0>)
 801397c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013980:	4962      	ldr	r1, [pc, #392]	; (8013b0c <tcp_output_segment+0x1a4>)
 8013982:	4863      	ldr	r0, [pc, #396]	; (8013b10 <tcp_output_segment+0x1a8>)
 8013984:	f007 ffc4 	bl	801b910 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d106      	bne.n	801399c <tcp_output_segment+0x34>
 801398e:	4b5e      	ldr	r3, [pc, #376]	; (8013b08 <tcp_output_segment+0x1a0>)
 8013990:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013994:	495f      	ldr	r1, [pc, #380]	; (8013b14 <tcp_output_segment+0x1ac>)
 8013996:	485e      	ldr	r0, [pc, #376]	; (8013b10 <tcp_output_segment+0x1a8>)
 8013998:	f007 ffba 	bl	801b910 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d106      	bne.n	80139b0 <tcp_output_segment+0x48>
 80139a2:	4b59      	ldr	r3, [pc, #356]	; (8013b08 <tcp_output_segment+0x1a0>)
 80139a4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80139a8:	495b      	ldr	r1, [pc, #364]	; (8013b18 <tcp_output_segment+0x1b0>)
 80139aa:	4859      	ldr	r0, [pc, #356]	; (8013b10 <tcp_output_segment+0x1a8>)
 80139ac:	f007 ffb0 	bl	801b910 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80139b0:	68f8      	ldr	r0, [r7, #12]
 80139b2:	f7ff ffb9 	bl	8013928 <tcp_output_segment_busy>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d001      	beq.n	80139c0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80139bc:	2300      	movs	r3, #0
 80139be:	e09f      	b.n	8013b00 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	68dc      	ldr	r4, [r3, #12]
 80139c8:	4610      	mov	r0, r2
 80139ca:	f7f8 fe78 	bl	800c6be <lwip_htonl>
 80139ce:	4603      	mov	r3, r0
 80139d0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	68dc      	ldr	r4, [r3, #12]
 80139da:	4610      	mov	r0, r2
 80139dc:	f7f8 fe5a 	bl	800c694 <lwip_htons>
 80139e0:	4603      	mov	r3, r0
 80139e2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e8:	68ba      	ldr	r2, [r7, #8]
 80139ea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80139ec:	441a      	add	r2, r3
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	68db      	ldr	r3, [r3, #12]
 80139f6:	3314      	adds	r3, #20
 80139f8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	7a9b      	ldrb	r3, [r3, #10]
 80139fe:	f003 0301 	and.w	r3, r3, #1
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d015      	beq.n	8013a32 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	3304      	adds	r3, #4
 8013a0a:	461a      	mov	r2, r3
 8013a0c:	6879      	ldr	r1, [r7, #4]
 8013a0e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013a12:	f7fc fa37 	bl	800fe84 <tcp_eff_send_mss_netif>
 8013a16:	4603      	mov	r3, r0
 8013a18:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013a1a:	8b7b      	ldrh	r3, [r7, #26]
 8013a1c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7f8 fe4c 	bl	800c6be <lwip_htonl>
 8013a26:	4602      	mov	r2, r0
 8013a28:	69fb      	ldr	r3, [r7, #28]
 8013a2a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	3304      	adds	r3, #4
 8013a30:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	da02      	bge.n	8013a42 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d10c      	bne.n	8013a64 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013a4a:	4b34      	ldr	r3, [pc, #208]	; (8013b1c <tcp_output_segment+0x1b4>)
 8013a4c:	681a      	ldr	r2, [r3, #0]
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	68db      	ldr	r3, [r3, #12]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7f8 fe30 	bl	800c6be <lwip_htonl>
 8013a5e:	4602      	mov	r2, r0
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	68da      	ldr	r2, [r3, #12]
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	685b      	ldr	r3, [r3, #4]
 8013a6c:	685b      	ldr	r3, [r3, #4]
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	685b      	ldr	r3, [r3, #4]
 8013a76:	8959      	ldrh	r1, [r3, #10]
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	8b3a      	ldrh	r2, [r7, #24]
 8013a7e:	1a8a      	subs	r2, r1, r2
 8013a80:	b292      	uxth	r2, r2
 8013a82:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	685b      	ldr	r3, [r3, #4]
 8013a88:	8919      	ldrh	r1, [r3, #8]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	8b3a      	ldrh	r2, [r7, #24]
 8013a90:	1a8a      	subs	r2, r1, r2
 8013a92:	b292      	uxth	r2, r2
 8013a94:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	68d2      	ldr	r2, [r2, #12]
 8013a9e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	68db      	ldr	r3, [r3, #12]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	741a      	strb	r2, [r3, #16]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	f103 0214 	add.w	r2, r3, #20
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	7a9b      	ldrb	r3, [r3, #10]
 8013ab8:	009b      	lsls	r3, r3, #2
 8013aba:	f003 0304 	and.w	r3, r3, #4
 8013abe:	4413      	add	r3, r2
 8013ac0:	69fa      	ldr	r2, [r7, #28]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d006      	beq.n	8013ad4 <tcp_output_segment+0x16c>
 8013ac6:	4b10      	ldr	r3, [pc, #64]	; (8013b08 <tcp_output_segment+0x1a0>)
 8013ac8:	f240 621c 	movw	r2, #1564	; 0x61c
 8013acc:	4914      	ldr	r1, [pc, #80]	; (8013b20 <tcp_output_segment+0x1b8>)
 8013ace:	4810      	ldr	r0, [pc, #64]	; (8013b10 <tcp_output_segment+0x1a8>)
 8013ad0:	f007 ff1e 	bl	801b910 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	6858      	ldr	r0, [r3, #4]
 8013ad8:	68b9      	ldr	r1, [r7, #8]
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	1d1c      	adds	r4, r3, #4
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	7add      	ldrb	r5, [r3, #11]
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	7a9b      	ldrb	r3, [r3, #10]
 8013ae6:	687a      	ldr	r2, [r7, #4]
 8013ae8:	9202      	str	r2, [sp, #8]
 8013aea:	2206      	movs	r2, #6
 8013aec:	9201      	str	r2, [sp, #4]
 8013aee:	9300      	str	r3, [sp, #0]
 8013af0:	462b      	mov	r3, r5
 8013af2:	4622      	mov	r2, r4
 8013af4:	f004 fce2 	bl	80184bc <ip4_output_if>
 8013af8:	4603      	mov	r3, r0
 8013afa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3720      	adds	r7, #32
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bdb0      	pop	{r4, r5, r7, pc}
 8013b08:	0801f264 	.word	0x0801f264
 8013b0c:	0801f828 	.word	0x0801f828
 8013b10:	0801f2b8 	.word	0x0801f2b8
 8013b14:	0801f848 	.word	0x0801f848
 8013b18:	0801f868 	.word	0x0801f868
 8013b1c:	20010664 	.word	0x20010664
 8013b20:	0801f88c 	.word	0x0801f88c

08013b24 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013b24:	b5b0      	push	{r4, r5, r7, lr}
 8013b26:	b084      	sub	sp, #16
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d106      	bne.n	8013b40 <tcp_rexmit_rto_prepare+0x1c>
 8013b32:	4b31      	ldr	r3, [pc, #196]	; (8013bf8 <tcp_rexmit_rto_prepare+0xd4>)
 8013b34:	f240 6263 	movw	r2, #1635	; 0x663
 8013b38:	4930      	ldr	r1, [pc, #192]	; (8013bfc <tcp_rexmit_rto_prepare+0xd8>)
 8013b3a:	4831      	ldr	r0, [pc, #196]	; (8013c00 <tcp_rexmit_rto_prepare+0xdc>)
 8013b3c:	f007 fee8 	bl	801b910 <iprintf>

  if (pcb->unacked == NULL) {
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d102      	bne.n	8013b4e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013b48:	f06f 0305 	mvn.w	r3, #5
 8013b4c:	e050      	b.n	8013bf0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b52:	60fb      	str	r3, [r7, #12]
 8013b54:	e00b      	b.n	8013b6e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013b56:	68f8      	ldr	r0, [r7, #12]
 8013b58:	f7ff fee6 	bl	8013928 <tcp_output_segment_busy>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d002      	beq.n	8013b68 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013b62:	f06f 0305 	mvn.w	r3, #5
 8013b66:	e043      	b.n	8013bf0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	60fb      	str	r3, [r7, #12]
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d1ef      	bne.n	8013b56 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013b76:	68f8      	ldr	r0, [r7, #12]
 8013b78:	f7ff fed6 	bl	8013928 <tcp_output_segment_busy>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d002      	beq.n	8013b88 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013b82:	f06f 0305 	mvn.w	r3, #5
 8013b86:	e033      	b.n	8013bf0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	8b5b      	ldrh	r3, [r3, #26]
 8013ba2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	68db      	ldr	r3, [r3, #12]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7f8 fd83 	bl	800c6be <lwip_htonl>
 8013bb8:	4604      	mov	r4, r0
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	891b      	ldrh	r3, [r3, #8]
 8013bbe:	461d      	mov	r5, r3
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	68db      	ldr	r3, [r3, #12]
 8013bc4:	899b      	ldrh	r3, [r3, #12]
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7f8 fd63 	bl	800c694 <lwip_htons>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	f003 0303 	and.w	r3, r3, #3
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d001      	beq.n	8013bde <tcp_rexmit_rto_prepare+0xba>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e000      	b.n	8013be0 <tcp_rexmit_rto_prepare+0xbc>
 8013bde:	2300      	movs	r3, #0
 8013be0:	442b      	add	r3, r5
 8013be2:	18e2      	adds	r2, r4, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2200      	movs	r2, #0
 8013bec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013bee:	2300      	movs	r3, #0
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3710      	adds	r7, #16
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8013bf8:	0801f264 	.word	0x0801f264
 8013bfc:	0801f8a0 	.word	0x0801f8a0
 8013c00:	0801f2b8 	.word	0x0801f2b8

08013c04 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d106      	bne.n	8013c20 <tcp_rexmit_rto_commit+0x1c>
 8013c12:	4b0d      	ldr	r3, [pc, #52]	; (8013c48 <tcp_rexmit_rto_commit+0x44>)
 8013c14:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013c18:	490c      	ldr	r1, [pc, #48]	; (8013c4c <tcp_rexmit_rto_commit+0x48>)
 8013c1a:	480d      	ldr	r0, [pc, #52]	; (8013c50 <tcp_rexmit_rto_commit+0x4c>)
 8013c1c:	f007 fe78 	bl	801b910 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c26:	2bff      	cmp	r3, #255	; 0xff
 8013c28:	d007      	beq.n	8013c3a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c30:	3301      	adds	r3, #1
 8013c32:	b2da      	uxtb	r2, r3
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7ff fc80 	bl	8013540 <tcp_output>
}
 8013c40:	bf00      	nop
 8013c42:	3708      	adds	r7, #8
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}
 8013c48:	0801f264 	.word	0x0801f264
 8013c4c:	0801f8c4 	.word	0x0801f8c4
 8013c50:	0801f2b8 	.word	0x0801f2b8

08013c54 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d106      	bne.n	8013c70 <tcp_rexmit_rto+0x1c>
 8013c62:	4b0a      	ldr	r3, [pc, #40]	; (8013c8c <tcp_rexmit_rto+0x38>)
 8013c64:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013c68:	4909      	ldr	r1, [pc, #36]	; (8013c90 <tcp_rexmit_rto+0x3c>)
 8013c6a:	480a      	ldr	r0, [pc, #40]	; (8013c94 <tcp_rexmit_rto+0x40>)
 8013c6c:	f007 fe50 	bl	801b910 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	f7ff ff57 	bl	8013b24 <tcp_rexmit_rto_prepare>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d102      	bne.n	8013c82 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7ff ffc1 	bl	8013c04 <tcp_rexmit_rto_commit>
  }
}
 8013c82:	bf00      	nop
 8013c84:	3708      	adds	r7, #8
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	0801f264 	.word	0x0801f264
 8013c90:	0801f8e8 	.word	0x0801f8e8
 8013c94:	0801f2b8 	.word	0x0801f2b8

08013c98 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013c98:	b590      	push	{r4, r7, lr}
 8013c9a:	b085      	sub	sp, #20
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d106      	bne.n	8013cb4 <tcp_rexmit+0x1c>
 8013ca6:	4b2f      	ldr	r3, [pc, #188]	; (8013d64 <tcp_rexmit+0xcc>)
 8013ca8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013cac:	492e      	ldr	r1, [pc, #184]	; (8013d68 <tcp_rexmit+0xd0>)
 8013cae:	482f      	ldr	r0, [pc, #188]	; (8013d6c <tcp_rexmit+0xd4>)
 8013cb0:	f007 fe2e 	bl	801b910 <iprintf>

  if (pcb->unacked == NULL) {
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d102      	bne.n	8013cc2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013cbc:	f06f 0305 	mvn.w	r3, #5
 8013cc0:	e04c      	b.n	8013d5c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cc6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013cc8:	68b8      	ldr	r0, [r7, #8]
 8013cca:	f7ff fe2d 	bl	8013928 <tcp_output_segment_busy>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d002      	beq.n	8013cda <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013cd4:	f06f 0305 	mvn.w	r3, #5
 8013cd8:	e040      	b.n	8013d5c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	681a      	ldr	r2, [r3, #0]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	336c      	adds	r3, #108	; 0x6c
 8013ce6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013ce8:	e002      	b.n	8013cf0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d011      	beq.n	8013d1c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	68db      	ldr	r3, [r3, #12]
 8013cfe:	685b      	ldr	r3, [r3, #4]
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7f8 fcdc 	bl	800c6be <lwip_htonl>
 8013d06:	4604      	mov	r4, r0
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	685b      	ldr	r3, [r3, #4]
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7f8 fcd5 	bl	800c6be <lwip_htonl>
 8013d14:	4603      	mov	r3, r0
 8013d16:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	dbe6      	blt.n	8013cea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	68ba      	ldr	r2, [r7, #8]
 8013d28:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d103      	bne.n	8013d3a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2200      	movs	r2, #0
 8013d36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d40:	2bff      	cmp	r3, #255	; 0xff
 8013d42:	d007      	beq.n	8013d54 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d4a:	3301      	adds	r3, #1
 8013d4c:	b2da      	uxtb	r2, r3
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2200      	movs	r2, #0
 8013d58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013d5a:	2300      	movs	r3, #0
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3714      	adds	r7, #20
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd90      	pop	{r4, r7, pc}
 8013d64:	0801f264 	.word	0x0801f264
 8013d68:	0801f904 	.word	0x0801f904
 8013d6c:	0801f2b8 	.word	0x0801f2b8

08013d70 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d106      	bne.n	8013d8c <tcp_rexmit_fast+0x1c>
 8013d7e:	4b2a      	ldr	r3, [pc, #168]	; (8013e28 <tcp_rexmit_fast+0xb8>)
 8013d80:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013d84:	4929      	ldr	r1, [pc, #164]	; (8013e2c <tcp_rexmit_fast+0xbc>)
 8013d86:	482a      	ldr	r0, [pc, #168]	; (8013e30 <tcp_rexmit_fast+0xc0>)
 8013d88:	f007 fdc2 	bl	801b910 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d045      	beq.n	8013e20 <tcp_rexmit_fast+0xb0>
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	8b5b      	ldrh	r3, [r3, #26]
 8013d98:	f003 0304 	and.w	r3, r3, #4
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d13f      	bne.n	8013e20 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f7ff ff79 	bl	8013c98 <tcp_rexmit>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d139      	bne.n	8013e20 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013db8:	4293      	cmp	r3, r2
 8013dba:	bf28      	it	cs
 8013dbc:	4613      	movcs	r3, r2
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	da00      	bge.n	8013dc6 <tcp_rexmit_fast+0x56>
 8013dc4:	3301      	adds	r3, #1
 8013dc6:	105b      	asrs	r3, r3, #1
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ddc:	005b      	lsls	r3, r3, #1
 8013dde:	429a      	cmp	r2, r3
 8013de0:	d206      	bcs.n	8013df0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013de6:	005b      	lsls	r3, r3, #1
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	0049      	lsls	r1, r1, #1
 8013dfe:	440b      	add	r3, r1
 8013e00:	b29b      	uxth	r3, r3
 8013e02:	4413      	add	r3, r2
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	8b5b      	ldrh	r3, [r3, #26]
 8013e10:	f043 0304 	orr.w	r3, r3, #4
 8013e14:	b29a      	uxth	r2, r3
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013e20:	bf00      	nop
 8013e22:	3708      	adds	r7, #8
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}
 8013e28:	0801f264 	.word	0x0801f264
 8013e2c:	0801f91c 	.word	0x0801f91c
 8013e30:	0801f2b8 	.word	0x0801f2b8

08013e34 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b086      	sub	sp, #24
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	60f8      	str	r0, [r7, #12]
 8013e3c:	607b      	str	r3, [r7, #4]
 8013e3e:	460b      	mov	r3, r1
 8013e40:	817b      	strh	r3, [r7, #10]
 8013e42:	4613      	mov	r3, r2
 8013e44:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013e46:	897a      	ldrh	r2, [r7, #10]
 8013e48:	893b      	ldrh	r3, [r7, #8]
 8013e4a:	4413      	add	r3, r2
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	3314      	adds	r3, #20
 8013e50:	b29b      	uxth	r3, r3
 8013e52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e56:	4619      	mov	r1, r3
 8013e58:	2022      	movs	r0, #34	; 0x22
 8013e5a:	f7f9 fcef 	bl	800d83c <pbuf_alloc>
 8013e5e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d04d      	beq.n	8013f02 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013e66:	897b      	ldrh	r3, [r7, #10]
 8013e68:	3313      	adds	r3, #19
 8013e6a:	697a      	ldr	r2, [r7, #20]
 8013e6c:	8952      	ldrh	r2, [r2, #10]
 8013e6e:	4293      	cmp	r3, r2
 8013e70:	db06      	blt.n	8013e80 <tcp_output_alloc_header_common+0x4c>
 8013e72:	4b26      	ldr	r3, [pc, #152]	; (8013f0c <tcp_output_alloc_header_common+0xd8>)
 8013e74:	f240 7223 	movw	r2, #1827	; 0x723
 8013e78:	4925      	ldr	r1, [pc, #148]	; (8013f10 <tcp_output_alloc_header_common+0xdc>)
 8013e7a:	4826      	ldr	r0, [pc, #152]	; (8013f14 <tcp_output_alloc_header_common+0xe0>)
 8013e7c:	f007 fd48 	bl	801b910 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013e86:	8c3b      	ldrh	r3, [r7, #32]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7f8 fc03 	bl	800c694 <lwip_htons>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	461a      	mov	r2, r3
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7f8 fbfb 	bl	800c694 <lwip_htons>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	687a      	ldr	r2, [r7, #4]
 8013eaa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013eac:	68f8      	ldr	r0, [r7, #12]
 8013eae:	f7f8 fc06 	bl	800c6be <lwip_htonl>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013eb8:	897b      	ldrh	r3, [r7, #10]
 8013eba:	089b      	lsrs	r3, r3, #2
 8013ebc:	b29b      	uxth	r3, r3
 8013ebe:	3305      	adds	r3, #5
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	031b      	lsls	r3, r3, #12
 8013ec4:	b29a      	uxth	r2, r3
 8013ec6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	4313      	orrs	r3, r2
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7f8 fbdf 	bl	800c694 <lwip_htons>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	461a      	mov	r2, r3
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013ede:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7f8 fbd7 	bl	800c694 <lwip_htons>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	461a      	mov	r2, r3
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	741a      	strb	r2, [r3, #16]
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013ef8:	693b      	ldr	r3, [r7, #16]
 8013efa:	2200      	movs	r2, #0
 8013efc:	749a      	strb	r2, [r3, #18]
 8013efe:	2200      	movs	r2, #0
 8013f00:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013f02:	697b      	ldr	r3, [r7, #20]
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3718      	adds	r7, #24
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}
 8013f0c:	0801f264 	.word	0x0801f264
 8013f10:	0801f93c 	.word	0x0801f93c
 8013f14:	0801f2b8 	.word	0x0801f2b8

08013f18 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013f18:	b5b0      	push	{r4, r5, r7, lr}
 8013f1a:	b08a      	sub	sp, #40	; 0x28
 8013f1c:	af04      	add	r7, sp, #16
 8013f1e:	60f8      	str	r0, [r7, #12]
 8013f20:	607b      	str	r3, [r7, #4]
 8013f22:	460b      	mov	r3, r1
 8013f24:	817b      	strh	r3, [r7, #10]
 8013f26:	4613      	mov	r3, r2
 8013f28:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d106      	bne.n	8013f3e <tcp_output_alloc_header+0x26>
 8013f30:	4b15      	ldr	r3, [pc, #84]	; (8013f88 <tcp_output_alloc_header+0x70>)
 8013f32:	f240 7242 	movw	r2, #1858	; 0x742
 8013f36:	4915      	ldr	r1, [pc, #84]	; (8013f8c <tcp_output_alloc_header+0x74>)
 8013f38:	4815      	ldr	r0, [pc, #84]	; (8013f90 <tcp_output_alloc_header+0x78>)
 8013f3a:	f007 fce9 	bl	801b910 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	8adb      	ldrh	r3, [r3, #22]
 8013f46:	68fa      	ldr	r2, [r7, #12]
 8013f48:	8b12      	ldrh	r2, [r2, #24]
 8013f4a:	68f9      	ldr	r1, [r7, #12]
 8013f4c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013f4e:	893d      	ldrh	r5, [r7, #8]
 8013f50:	897c      	ldrh	r4, [r7, #10]
 8013f52:	9103      	str	r1, [sp, #12]
 8013f54:	2110      	movs	r1, #16
 8013f56:	9102      	str	r1, [sp, #8]
 8013f58:	9201      	str	r2, [sp, #4]
 8013f5a:	9300      	str	r3, [sp, #0]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	462a      	mov	r2, r5
 8013f60:	4621      	mov	r1, r4
 8013f62:	f7ff ff67 	bl	8013e34 <tcp_output_alloc_header_common>
 8013f66:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d006      	beq.n	8013f7c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f72:	68fa      	ldr	r2, [r7, #12]
 8013f74:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013f76:	441a      	add	r2, r3
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013f7c:	697b      	ldr	r3, [r7, #20]
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3718      	adds	r7, #24
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bdb0      	pop	{r4, r5, r7, pc}
 8013f86:	bf00      	nop
 8013f88:	0801f264 	.word	0x0801f264
 8013f8c:	0801f96c 	.word	0x0801f96c
 8013f90:	0801f2b8 	.word	0x0801f2b8

08013f94 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b088      	sub	sp, #32
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	60f8      	str	r0, [r7, #12]
 8013f9c:	60b9      	str	r1, [r7, #8]
 8013f9e:	4611      	mov	r1, r2
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	460b      	mov	r3, r1
 8013fa4:	71fb      	strb	r3, [r7, #7]
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013faa:	2300      	movs	r3, #0
 8013fac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d106      	bne.n	8013fc2 <tcp_output_fill_options+0x2e>
 8013fb4:	4b13      	ldr	r3, [pc, #76]	; (8014004 <tcp_output_fill_options+0x70>)
 8013fb6:	f240 7256 	movw	r2, #1878	; 0x756
 8013fba:	4913      	ldr	r1, [pc, #76]	; (8014008 <tcp_output_fill_options+0x74>)
 8013fbc:	4813      	ldr	r0, [pc, #76]	; (801400c <tcp_output_fill_options+0x78>)
 8013fbe:	f007 fca7 	bl	801b910 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	685b      	ldr	r3, [r3, #4]
 8013fc6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013fc8:	69bb      	ldr	r3, [r7, #24]
 8013fca:	3314      	adds	r3, #20
 8013fcc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013fce:	69bb      	ldr	r3, [r7, #24]
 8013fd0:	f103 0214 	add.w	r2, r3, #20
 8013fd4:	8bfb      	ldrh	r3, [r7, #30]
 8013fd6:	009b      	lsls	r3, r3, #2
 8013fd8:	4619      	mov	r1, r3
 8013fda:	79fb      	ldrb	r3, [r7, #7]
 8013fdc:	009b      	lsls	r3, r3, #2
 8013fde:	f003 0304 	and.w	r3, r3, #4
 8013fe2:	440b      	add	r3, r1
 8013fe4:	4413      	add	r3, r2
 8013fe6:	697a      	ldr	r2, [r7, #20]
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	d006      	beq.n	8013ffa <tcp_output_fill_options+0x66>
 8013fec:	4b05      	ldr	r3, [pc, #20]	; (8014004 <tcp_output_fill_options+0x70>)
 8013fee:	f240 7275 	movw	r2, #1909	; 0x775
 8013ff2:	4907      	ldr	r1, [pc, #28]	; (8014010 <tcp_output_fill_options+0x7c>)
 8013ff4:	4805      	ldr	r0, [pc, #20]	; (801400c <tcp_output_fill_options+0x78>)
 8013ff6:	f007 fc8b 	bl	801b910 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013ffa:	bf00      	nop
 8013ffc:	3720      	adds	r7, #32
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}
 8014002:	bf00      	nop
 8014004:	0801f264 	.word	0x0801f264
 8014008:	0801f994 	.word	0x0801f994
 801400c:	0801f2b8 	.word	0x0801f2b8
 8014010:	0801f88c 	.word	0x0801f88c

08014014 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b08a      	sub	sp, #40	; 0x28
 8014018:	af04      	add	r7, sp, #16
 801401a:	60f8      	str	r0, [r7, #12]
 801401c:	60b9      	str	r1, [r7, #8]
 801401e:	607a      	str	r2, [r7, #4]
 8014020:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d106      	bne.n	8014036 <tcp_output_control_segment+0x22>
 8014028:	4b1c      	ldr	r3, [pc, #112]	; (801409c <tcp_output_control_segment+0x88>)
 801402a:	f240 7287 	movw	r2, #1927	; 0x787
 801402e:	491c      	ldr	r1, [pc, #112]	; (80140a0 <tcp_output_control_segment+0x8c>)
 8014030:	481c      	ldr	r0, [pc, #112]	; (80140a4 <tcp_output_control_segment+0x90>)
 8014032:	f007 fc6d 	bl	801b910 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014036:	683a      	ldr	r2, [r7, #0]
 8014038:	6879      	ldr	r1, [r7, #4]
 801403a:	68f8      	ldr	r0, [r7, #12]
 801403c:	f7fe fae8 	bl	8012610 <tcp_route>
 8014040:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d102      	bne.n	801404e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014048:	23fc      	movs	r3, #252	; 0xfc
 801404a:	75fb      	strb	r3, [r7, #23]
 801404c:	e01c      	b.n	8014088 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d006      	beq.n	8014062 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	7adb      	ldrb	r3, [r3, #11]
 8014058:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	7a9b      	ldrb	r3, [r3, #10]
 801405e:	757b      	strb	r3, [r7, #21]
 8014060:	e003      	b.n	801406a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014062:	23ff      	movs	r3, #255	; 0xff
 8014064:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014066:	2300      	movs	r3, #0
 8014068:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801406a:	7dba      	ldrb	r2, [r7, #22]
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	9302      	str	r3, [sp, #8]
 8014070:	2306      	movs	r3, #6
 8014072:	9301      	str	r3, [sp, #4]
 8014074:	7d7b      	ldrb	r3, [r7, #21]
 8014076:	9300      	str	r3, [sp, #0]
 8014078:	4613      	mov	r3, r2
 801407a:	683a      	ldr	r2, [r7, #0]
 801407c:	6879      	ldr	r1, [r7, #4]
 801407e:	68b8      	ldr	r0, [r7, #8]
 8014080:	f004 fa1c 	bl	80184bc <ip4_output_if>
 8014084:	4603      	mov	r3, r0
 8014086:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014088:	68b8      	ldr	r0, [r7, #8]
 801408a:	f7f9 feed 	bl	800de68 <pbuf_free>
  return err;
 801408e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014092:	4618      	mov	r0, r3
 8014094:	3718      	adds	r7, #24
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	0801f264 	.word	0x0801f264
 80140a0:	0801f9bc 	.word	0x0801f9bc
 80140a4:	0801f2b8 	.word	0x0801f2b8

080140a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80140a8:	b590      	push	{r4, r7, lr}
 80140aa:	b08b      	sub	sp, #44	; 0x2c
 80140ac:	af04      	add	r7, sp, #16
 80140ae:	60f8      	str	r0, [r7, #12]
 80140b0:	60b9      	str	r1, [r7, #8]
 80140b2:	607a      	str	r2, [r7, #4]
 80140b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d106      	bne.n	80140ca <tcp_rst+0x22>
 80140bc:	4b1f      	ldr	r3, [pc, #124]	; (801413c <tcp_rst+0x94>)
 80140be:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80140c2:	491f      	ldr	r1, [pc, #124]	; (8014140 <tcp_rst+0x98>)
 80140c4:	481f      	ldr	r0, [pc, #124]	; (8014144 <tcp_rst+0x9c>)
 80140c6:	f007 fc23 	bl	801b910 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80140ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d106      	bne.n	80140de <tcp_rst+0x36>
 80140d0:	4b1a      	ldr	r3, [pc, #104]	; (801413c <tcp_rst+0x94>)
 80140d2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80140d6:	491c      	ldr	r1, [pc, #112]	; (8014148 <tcp_rst+0xa0>)
 80140d8:	481a      	ldr	r0, [pc, #104]	; (8014144 <tcp_rst+0x9c>)
 80140da:	f007 fc19 	bl	801b910 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80140de:	2300      	movs	r3, #0
 80140e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80140e2:	f246 0308 	movw	r3, #24584	; 0x6008
 80140e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80140e8:	7dfb      	ldrb	r3, [r7, #23]
 80140ea:	b29c      	uxth	r4, r3
 80140ec:	68b8      	ldr	r0, [r7, #8]
 80140ee:	f7f8 fae6 	bl	800c6be <lwip_htonl>
 80140f2:	4602      	mov	r2, r0
 80140f4:	8abb      	ldrh	r3, [r7, #20]
 80140f6:	9303      	str	r3, [sp, #12]
 80140f8:	2314      	movs	r3, #20
 80140fa:	9302      	str	r3, [sp, #8]
 80140fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80140fe:	9301      	str	r3, [sp, #4]
 8014100:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014102:	9300      	str	r3, [sp, #0]
 8014104:	4613      	mov	r3, r2
 8014106:	2200      	movs	r2, #0
 8014108:	4621      	mov	r1, r4
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f7ff fe92 	bl	8013e34 <tcp_output_alloc_header_common>
 8014110:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d00c      	beq.n	8014132 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014118:	7dfb      	ldrb	r3, [r7, #23]
 801411a:	2200      	movs	r2, #0
 801411c:	6939      	ldr	r1, [r7, #16]
 801411e:	68f8      	ldr	r0, [r7, #12]
 8014120:	f7ff ff38 	bl	8013f94 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014126:	683a      	ldr	r2, [r7, #0]
 8014128:	6939      	ldr	r1, [r7, #16]
 801412a:	68f8      	ldr	r0, [r7, #12]
 801412c:	f7ff ff72 	bl	8014014 <tcp_output_control_segment>
 8014130:	e000      	b.n	8014134 <tcp_rst+0x8c>
    return;
 8014132:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014134:	371c      	adds	r7, #28
 8014136:	46bd      	mov	sp, r7
 8014138:	bd90      	pop	{r4, r7, pc}
 801413a:	bf00      	nop
 801413c:	0801f264 	.word	0x0801f264
 8014140:	0801f9e8 	.word	0x0801f9e8
 8014144:	0801f2b8 	.word	0x0801f2b8
 8014148:	0801fa04 	.word	0x0801fa04

0801414c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801414c:	b590      	push	{r4, r7, lr}
 801414e:	b087      	sub	sp, #28
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014154:	2300      	movs	r3, #0
 8014156:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014158:	2300      	movs	r3, #0
 801415a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d106      	bne.n	8014170 <tcp_send_empty_ack+0x24>
 8014162:	4b28      	ldr	r3, [pc, #160]	; (8014204 <tcp_send_empty_ack+0xb8>)
 8014164:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014168:	4927      	ldr	r1, [pc, #156]	; (8014208 <tcp_send_empty_ack+0xbc>)
 801416a:	4828      	ldr	r0, [pc, #160]	; (801420c <tcp_send_empty_ack+0xc0>)
 801416c:	f007 fbd0 	bl	801b910 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014170:	7dfb      	ldrb	r3, [r7, #23]
 8014172:	009b      	lsls	r3, r3, #2
 8014174:	b2db      	uxtb	r3, r3
 8014176:	f003 0304 	and.w	r3, r3, #4
 801417a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801417c:	7d7b      	ldrb	r3, [r7, #21]
 801417e:	b29c      	uxth	r4, r3
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014184:	4618      	mov	r0, r3
 8014186:	f7f8 fa9a 	bl	800c6be <lwip_htonl>
 801418a:	4603      	mov	r3, r0
 801418c:	2200      	movs	r2, #0
 801418e:	4621      	mov	r1, r4
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f7ff fec1 	bl	8013f18 <tcp_output_alloc_header>
 8014196:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d109      	bne.n	80141b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	8b5b      	ldrh	r3, [r3, #26]
 80141a2:	f043 0303 	orr.w	r3, r3, #3
 80141a6:	b29a      	uxth	r2, r3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80141ac:	f06f 0301 	mvn.w	r3, #1
 80141b0:	e023      	b.n	80141fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80141b2:	7dbb      	ldrb	r3, [r7, #22]
 80141b4:	7dfa      	ldrb	r2, [r7, #23]
 80141b6:	6939      	ldr	r1, [r7, #16]
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f7ff feeb 	bl	8013f94 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	3304      	adds	r3, #4
 80141c4:	6939      	ldr	r1, [r7, #16]
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f7ff ff24 	bl	8014014 <tcp_output_control_segment>
 80141cc:	4603      	mov	r3, r0
 80141ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80141d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d007      	beq.n	80141e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	8b5b      	ldrh	r3, [r3, #26]
 80141dc:	f043 0303 	orr.w	r3, r3, #3
 80141e0:	b29a      	uxth	r2, r3
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	835a      	strh	r2, [r3, #26]
 80141e6:	e006      	b.n	80141f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	8b5b      	ldrh	r3, [r3, #26]
 80141ec:	f023 0303 	bic.w	r3, r3, #3
 80141f0:	b29a      	uxth	r2, r3
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80141f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80141fa:	4618      	mov	r0, r3
 80141fc:	371c      	adds	r7, #28
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd90      	pop	{r4, r7, pc}
 8014202:	bf00      	nop
 8014204:	0801f264 	.word	0x0801f264
 8014208:	0801fa20 	.word	0x0801fa20
 801420c:	0801f2b8 	.word	0x0801f2b8

08014210 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014210:	b590      	push	{r4, r7, lr}
 8014212:	b087      	sub	sp, #28
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014218:	2300      	movs	r3, #0
 801421a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d106      	bne.n	8014230 <tcp_keepalive+0x20>
 8014222:	4b18      	ldr	r3, [pc, #96]	; (8014284 <tcp_keepalive+0x74>)
 8014224:	f640 0224 	movw	r2, #2084	; 0x824
 8014228:	4917      	ldr	r1, [pc, #92]	; (8014288 <tcp_keepalive+0x78>)
 801422a:	4818      	ldr	r0, [pc, #96]	; (801428c <tcp_keepalive+0x7c>)
 801422c:	f007 fb70 	bl	801b910 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014230:	7dfb      	ldrb	r3, [r7, #23]
 8014232:	b29c      	uxth	r4, r3
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014238:	3b01      	subs	r3, #1
 801423a:	4618      	mov	r0, r3
 801423c:	f7f8 fa3f 	bl	800c6be <lwip_htonl>
 8014240:	4603      	mov	r3, r0
 8014242:	2200      	movs	r2, #0
 8014244:	4621      	mov	r1, r4
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f7ff fe66 	bl	8013f18 <tcp_output_alloc_header>
 801424c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d102      	bne.n	801425a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014258:	e010      	b.n	801427c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801425a:	7dfb      	ldrb	r3, [r7, #23]
 801425c:	2200      	movs	r2, #0
 801425e:	6939      	ldr	r1, [r7, #16]
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f7ff fe97 	bl	8013f94 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014266:	687a      	ldr	r2, [r7, #4]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	3304      	adds	r3, #4
 801426c:	6939      	ldr	r1, [r7, #16]
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f7ff fed0 	bl	8014014 <tcp_output_control_segment>
 8014274:	4603      	mov	r3, r0
 8014276:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801427c:	4618      	mov	r0, r3
 801427e:	371c      	adds	r7, #28
 8014280:	46bd      	mov	sp, r7
 8014282:	bd90      	pop	{r4, r7, pc}
 8014284:	0801f264 	.word	0x0801f264
 8014288:	0801fa40 	.word	0x0801fa40
 801428c:	0801f2b8 	.word	0x0801f2b8

08014290 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014290:	b590      	push	{r4, r7, lr}
 8014292:	b08b      	sub	sp, #44	; 0x2c
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014298:	2300      	movs	r3, #0
 801429a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d106      	bne.n	80142b2 <tcp_zero_window_probe+0x22>
 80142a4:	4b4c      	ldr	r3, [pc, #304]	; (80143d8 <tcp_zero_window_probe+0x148>)
 80142a6:	f640 024f 	movw	r2, #2127	; 0x84f
 80142aa:	494c      	ldr	r1, [pc, #304]	; (80143dc <tcp_zero_window_probe+0x14c>)
 80142ac:	484c      	ldr	r0, [pc, #304]	; (80143e0 <tcp_zero_window_probe+0x150>)
 80142ae:	f007 fb2f 	bl	801b910 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80142b8:	6a3b      	ldr	r3, [r7, #32]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d101      	bne.n	80142c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80142be:	2300      	movs	r3, #0
 80142c0:	e086      	b.n	80143d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142c8:	2bff      	cmp	r3, #255	; 0xff
 80142ca:	d007      	beq.n	80142dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142d2:	3301      	adds	r3, #1
 80142d4:	b2da      	uxtb	r2, r3
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80142dc:	6a3b      	ldr	r3, [r7, #32]
 80142de:	68db      	ldr	r3, [r3, #12]
 80142e0:	899b      	ldrh	r3, [r3, #12]
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7f8 f9d5 	bl	800c694 <lwip_htons>
 80142ea:	4603      	mov	r3, r0
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	f003 0301 	and.w	r3, r3, #1
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d005      	beq.n	8014302 <tcp_zero_window_probe+0x72>
 80142f6:	6a3b      	ldr	r3, [r7, #32]
 80142f8:	891b      	ldrh	r3, [r3, #8]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d101      	bne.n	8014302 <tcp_zero_window_probe+0x72>
 80142fe:	2301      	movs	r3, #1
 8014300:	e000      	b.n	8014304 <tcp_zero_window_probe+0x74>
 8014302:	2300      	movs	r3, #0
 8014304:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014306:	7ffb      	ldrb	r3, [r7, #31]
 8014308:	2b00      	cmp	r3, #0
 801430a:	bf0c      	ite	eq
 801430c:	2301      	moveq	r3, #1
 801430e:	2300      	movne	r3, #0
 8014310:	b2db      	uxtb	r3, r3
 8014312:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014318:	b299      	uxth	r1, r3
 801431a:	6a3b      	ldr	r3, [r7, #32]
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	8bba      	ldrh	r2, [r7, #28]
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f7ff fdf8 	bl	8013f18 <tcp_output_alloc_header>
 8014328:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801432a:	69bb      	ldr	r3, [r7, #24]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d102      	bne.n	8014336 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014334:	e04c      	b.n	80143d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801433c:	7ffb      	ldrb	r3, [r7, #31]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d011      	beq.n	8014366 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	899b      	ldrh	r3, [r3, #12]
 8014346:	b29b      	uxth	r3, r3
 8014348:	b21b      	sxth	r3, r3
 801434a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801434e:	b21c      	sxth	r4, r3
 8014350:	2011      	movs	r0, #17
 8014352:	f7f8 f99f 	bl	800c694 <lwip_htons>
 8014356:	4603      	mov	r3, r0
 8014358:	b21b      	sxth	r3, r3
 801435a:	4323      	orrs	r3, r4
 801435c:	b21b      	sxth	r3, r3
 801435e:	b29a      	uxth	r2, r3
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	819a      	strh	r2, [r3, #12]
 8014364:	e010      	b.n	8014388 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014366:	69bb      	ldr	r3, [r7, #24]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	3314      	adds	r3, #20
 801436c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801436e:	6a3b      	ldr	r3, [r7, #32]
 8014370:	6858      	ldr	r0, [r3, #4]
 8014372:	6a3b      	ldr	r3, [r7, #32]
 8014374:	685b      	ldr	r3, [r3, #4]
 8014376:	891a      	ldrh	r2, [r3, #8]
 8014378:	6a3b      	ldr	r3, [r7, #32]
 801437a:	891b      	ldrh	r3, [r3, #8]
 801437c:	1ad3      	subs	r3, r2, r3
 801437e:	b29b      	uxth	r3, r3
 8014380:	2201      	movs	r2, #1
 8014382:	6939      	ldr	r1, [r7, #16]
 8014384:	f7f9 ff76 	bl	800e274 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	4618      	mov	r0, r3
 8014390:	f7f8 f995 	bl	800c6be <lwip_htonl>
 8014394:	4603      	mov	r3, r0
 8014396:	3301      	adds	r3, #1
 8014398:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	1ad3      	subs	r3, r2, r3
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	da02      	bge.n	80143ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	68fa      	ldr	r2, [r7, #12]
 80143aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80143ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143b0:	2200      	movs	r2, #0
 80143b2:	69b9      	ldr	r1, [r7, #24]
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f7ff fded 	bl	8013f94 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80143ba:	687a      	ldr	r2, [r7, #4]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	3304      	adds	r3, #4
 80143c0:	69b9      	ldr	r1, [r7, #24]
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f7ff fe26 	bl	8014014 <tcp_output_control_segment>
 80143c8:	4603      	mov	r3, r0
 80143ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80143cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	372c      	adds	r7, #44	; 0x2c
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd90      	pop	{r4, r7, pc}
 80143d8:	0801f264 	.word	0x0801f264
 80143dc:	0801fa5c 	.word	0x0801fa5c
 80143e0:	0801f2b8 	.word	0x0801f2b8

080143e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80143ec:	f7fa f830 	bl	800e450 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80143f0:	4b0a      	ldr	r3, [pc, #40]	; (801441c <tcpip_tcp_timer+0x38>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d103      	bne.n	8014400 <tcpip_tcp_timer+0x1c>
 80143f8:	4b09      	ldr	r3, [pc, #36]	; (8014420 <tcpip_tcp_timer+0x3c>)
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d005      	beq.n	801440c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014400:	2200      	movs	r2, #0
 8014402:	4908      	ldr	r1, [pc, #32]	; (8014424 <tcpip_tcp_timer+0x40>)
 8014404:	20fa      	movs	r0, #250	; 0xfa
 8014406:	f000 f8f3 	bl	80145f0 <sys_timeout>
 801440a:	e003      	b.n	8014414 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801440c:	4b06      	ldr	r3, [pc, #24]	; (8014428 <tcpip_tcp_timer+0x44>)
 801440e:	2200      	movs	r2, #0
 8014410:	601a      	str	r2, [r3, #0]
  }
}
 8014412:	bf00      	nop
 8014414:	bf00      	nop
 8014416:	3708      	adds	r7, #8
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}
 801441c:	20010660 	.word	0x20010660
 8014420:	20010670 	.word	0x20010670
 8014424:	080143e5 	.word	0x080143e5
 8014428:	20008b20 	.word	0x20008b20

0801442c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014430:	4b0a      	ldr	r3, [pc, #40]	; (801445c <tcp_timer_needed+0x30>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d10f      	bne.n	8014458 <tcp_timer_needed+0x2c>
 8014438:	4b09      	ldr	r3, [pc, #36]	; (8014460 <tcp_timer_needed+0x34>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d103      	bne.n	8014448 <tcp_timer_needed+0x1c>
 8014440:	4b08      	ldr	r3, [pc, #32]	; (8014464 <tcp_timer_needed+0x38>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d007      	beq.n	8014458 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014448:	4b04      	ldr	r3, [pc, #16]	; (801445c <tcp_timer_needed+0x30>)
 801444a:	2201      	movs	r2, #1
 801444c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801444e:	2200      	movs	r2, #0
 8014450:	4905      	ldr	r1, [pc, #20]	; (8014468 <tcp_timer_needed+0x3c>)
 8014452:	20fa      	movs	r0, #250	; 0xfa
 8014454:	f000 f8cc 	bl	80145f0 <sys_timeout>
  }
}
 8014458:	bf00      	nop
 801445a:	bd80      	pop	{r7, pc}
 801445c:	20008b20 	.word	0x20008b20
 8014460:	20010660 	.word	0x20010660
 8014464:	20010670 	.word	0x20010670
 8014468:	080143e5 	.word	0x080143e5

0801446c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b086      	sub	sp, #24
 8014470:	af00      	add	r7, sp, #0
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	60b9      	str	r1, [r7, #8]
 8014476:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014478:	200a      	movs	r0, #10
 801447a:	f7f8 fdc1 	bl	800d000 <memp_malloc>
 801447e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d109      	bne.n	801449a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d151      	bne.n	8014530 <sys_timeout_abs+0xc4>
 801448c:	4b2a      	ldr	r3, [pc, #168]	; (8014538 <sys_timeout_abs+0xcc>)
 801448e:	22be      	movs	r2, #190	; 0xbe
 8014490:	492a      	ldr	r1, [pc, #168]	; (801453c <sys_timeout_abs+0xd0>)
 8014492:	482b      	ldr	r0, [pc, #172]	; (8014540 <sys_timeout_abs+0xd4>)
 8014494:	f007 fa3c 	bl	801b910 <iprintf>
    return;
 8014498:	e04a      	b.n	8014530 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	2200      	movs	r2, #0
 801449e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80144a0:	693b      	ldr	r3, [r7, #16]
 80144a2:	68ba      	ldr	r2, [r7, #8]
 80144a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	687a      	ldr	r2, [r7, #4]
 80144aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80144b2:	4b24      	ldr	r3, [pc, #144]	; (8014544 <sys_timeout_abs+0xd8>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d103      	bne.n	80144c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80144ba:	4a22      	ldr	r2, [pc, #136]	; (8014544 <sys_timeout_abs+0xd8>)
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	6013      	str	r3, [r2, #0]
    return;
 80144c0:	e037      	b.n	8014532 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	685a      	ldr	r2, [r3, #4]
 80144c6:	4b1f      	ldr	r3, [pc, #124]	; (8014544 <sys_timeout_abs+0xd8>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	685b      	ldr	r3, [r3, #4]
 80144cc:	1ad3      	subs	r3, r2, r3
 80144ce:	0fdb      	lsrs	r3, r3, #31
 80144d0:	f003 0301 	and.w	r3, r3, #1
 80144d4:	b2db      	uxtb	r3, r3
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d007      	beq.n	80144ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80144da:	4b1a      	ldr	r3, [pc, #104]	; (8014544 <sys_timeout_abs+0xd8>)
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80144e2:	4a18      	ldr	r2, [pc, #96]	; (8014544 <sys_timeout_abs+0xd8>)
 80144e4:	693b      	ldr	r3, [r7, #16]
 80144e6:	6013      	str	r3, [r2, #0]
 80144e8:	e023      	b.n	8014532 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80144ea:	4b16      	ldr	r3, [pc, #88]	; (8014544 <sys_timeout_abs+0xd8>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	617b      	str	r3, [r7, #20]
 80144f0:	e01a      	b.n	8014528 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d00b      	beq.n	8014512 <sys_timeout_abs+0xa6>
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	685a      	ldr	r2, [r3, #4]
 80144fe:	697b      	ldr	r3, [r7, #20]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	1ad3      	subs	r3, r2, r3
 8014506:	0fdb      	lsrs	r3, r3, #31
 8014508:	f003 0301 	and.w	r3, r3, #1
 801450c:	b2db      	uxtb	r3, r3
 801450e:	2b00      	cmp	r3, #0
 8014510:	d007      	beq.n	8014522 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	681a      	ldr	r2, [r3, #0]
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	693a      	ldr	r2, [r7, #16]
 801451e:	601a      	str	r2, [r3, #0]
        break;
 8014520:	e007      	b.n	8014532 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	617b      	str	r3, [r7, #20]
 8014528:	697b      	ldr	r3, [r7, #20]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d1e1      	bne.n	80144f2 <sys_timeout_abs+0x86>
 801452e:	e000      	b.n	8014532 <sys_timeout_abs+0xc6>
    return;
 8014530:	bf00      	nop
      }
    }
  }
}
 8014532:	3718      	adds	r7, #24
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	0801fa80 	.word	0x0801fa80
 801453c:	0801fab4 	.word	0x0801fab4
 8014540:	0801faf4 	.word	0x0801faf4
 8014544:	20008b18 	.word	0x20008b18

08014548 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b086      	sub	sp, #24
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	4798      	blx	r3

  now = sys_now();
 801455a:	f7f1 fa8f 	bl	8005a7c <sys_now>
 801455e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	4b0f      	ldr	r3, [pc, #60]	; (80145a4 <lwip_cyclic_timer+0x5c>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	4413      	add	r3, r2
 801456a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801456c:	68fa      	ldr	r2, [r7, #12]
 801456e:	693b      	ldr	r3, [r7, #16]
 8014570:	1ad3      	subs	r3, r2, r3
 8014572:	0fdb      	lsrs	r3, r3, #31
 8014574:	f003 0301 	and.w	r3, r3, #1
 8014578:	b2db      	uxtb	r3, r3
 801457a:	2b00      	cmp	r3, #0
 801457c:	d009      	beq.n	8014592 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	681a      	ldr	r2, [r3, #0]
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	4413      	add	r3, r2
 8014586:	687a      	ldr	r2, [r7, #4]
 8014588:	4907      	ldr	r1, [pc, #28]	; (80145a8 <lwip_cyclic_timer+0x60>)
 801458a:	4618      	mov	r0, r3
 801458c:	f7ff ff6e 	bl	801446c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014590:	e004      	b.n	801459c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014592:	687a      	ldr	r2, [r7, #4]
 8014594:	4904      	ldr	r1, [pc, #16]	; (80145a8 <lwip_cyclic_timer+0x60>)
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	f7ff ff68 	bl	801446c <sys_timeout_abs>
}
 801459c:	bf00      	nop
 801459e:	3718      	adds	r7, #24
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	20008b1c 	.word	0x20008b1c
 80145a8:	08014549 	.word	0x08014549

080145ac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145b2:	2301      	movs	r3, #1
 80145b4:	607b      	str	r3, [r7, #4]
 80145b6:	e00e      	b.n	80145d6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80145b8:	4a0b      	ldr	r2, [pc, #44]	; (80145e8 <sys_timeouts_init+0x3c>)
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	00db      	lsls	r3, r3, #3
 80145c4:	4a08      	ldr	r2, [pc, #32]	; (80145e8 <sys_timeouts_init+0x3c>)
 80145c6:	4413      	add	r3, r2
 80145c8:	461a      	mov	r2, r3
 80145ca:	4908      	ldr	r1, [pc, #32]	; (80145ec <sys_timeouts_init+0x40>)
 80145cc:	f000 f810 	bl	80145f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	3301      	adds	r3, #1
 80145d4:	607b      	str	r3, [r7, #4]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2b04      	cmp	r3, #4
 80145da:	d9ed      	bls.n	80145b8 <sys_timeouts_init+0xc>
  }
}
 80145dc:	bf00      	nop
 80145de:	bf00      	nop
 80145e0:	3708      	adds	r7, #8
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}
 80145e6:	bf00      	nop
 80145e8:	08020b60 	.word	0x08020b60
 80145ec:	08014549 	.word	0x08014549

080145f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b086      	sub	sp, #24
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	60b9      	str	r1, [r7, #8]
 80145fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014602:	d306      	bcc.n	8014612 <sys_timeout+0x22>
 8014604:	4b0a      	ldr	r3, [pc, #40]	; (8014630 <sys_timeout+0x40>)
 8014606:	f240 1229 	movw	r2, #297	; 0x129
 801460a:	490a      	ldr	r1, [pc, #40]	; (8014634 <sys_timeout+0x44>)
 801460c:	480a      	ldr	r0, [pc, #40]	; (8014638 <sys_timeout+0x48>)
 801460e:	f007 f97f 	bl	801b910 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014612:	f7f1 fa33 	bl	8005a7c <sys_now>
 8014616:	4602      	mov	r2, r0
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	4413      	add	r3, r2
 801461c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801461e:	687a      	ldr	r2, [r7, #4]
 8014620:	68b9      	ldr	r1, [r7, #8]
 8014622:	6978      	ldr	r0, [r7, #20]
 8014624:	f7ff ff22 	bl	801446c <sys_timeout_abs>
#endif
}
 8014628:	bf00      	nop
 801462a:	3718      	adds	r7, #24
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}
 8014630:	0801fa80 	.word	0x0801fa80
 8014634:	0801fb1c 	.word	0x0801fb1c
 8014638:	0801faf4 	.word	0x0801faf4

0801463c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b084      	sub	sp, #16
 8014640:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014642:	f7f1 fa1b 	bl	8005a7c <sys_now>
 8014646:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014648:	4b17      	ldr	r3, [pc, #92]	; (80146a8 <sys_check_timeouts+0x6c>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d022      	beq.n	801469a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	68fa      	ldr	r2, [r7, #12]
 801465a:	1ad3      	subs	r3, r2, r3
 801465c:	0fdb      	lsrs	r3, r3, #31
 801465e:	f003 0301 	and.w	r3, r3, #1
 8014662:	b2db      	uxtb	r3, r3
 8014664:	2b00      	cmp	r3, #0
 8014666:	d11a      	bne.n	801469e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	4a0e      	ldr	r2, [pc, #56]	; (80146a8 <sys_check_timeouts+0x6c>)
 801466e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	689b      	ldr	r3, [r3, #8]
 8014674:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	68db      	ldr	r3, [r3, #12]
 801467a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	4a0a      	ldr	r2, [pc, #40]	; (80146ac <sys_check_timeouts+0x70>)
 8014682:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014684:	68b9      	ldr	r1, [r7, #8]
 8014686:	200a      	movs	r0, #10
 8014688:	f7f8 fd0c 	bl	800d0a4 <memp_free>
    if (handler != NULL) {
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d0da      	beq.n	8014648 <sys_check_timeouts+0xc>
      handler(arg);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	6838      	ldr	r0, [r7, #0]
 8014696:	4798      	blx	r3
  do {
 8014698:	e7d6      	b.n	8014648 <sys_check_timeouts+0xc>
      return;
 801469a:	bf00      	nop
 801469c:	e000      	b.n	80146a0 <sys_check_timeouts+0x64>
      return;
 801469e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80146a0:	3710      	adds	r7, #16
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	20008b18 	.word	0x20008b18
 80146ac:	20008b1c 	.word	0x20008b1c

080146b0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b082      	sub	sp, #8
 80146b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80146b6:	4b16      	ldr	r3, [pc, #88]	; (8014710 <sys_timeouts_sleeptime+0x60>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d102      	bne.n	80146c4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80146be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146c2:	e020      	b.n	8014706 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80146c4:	f7f1 f9da 	bl	8005a7c <sys_now>
 80146c8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80146ca:	4b11      	ldr	r3, [pc, #68]	; (8014710 <sys_timeouts_sleeptime+0x60>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	685a      	ldr	r2, [r3, #4]
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	1ad3      	subs	r3, r2, r3
 80146d4:	0fdb      	lsrs	r3, r3, #31
 80146d6:	f003 0301 	and.w	r3, r3, #1
 80146da:	b2db      	uxtb	r3, r3
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d001      	beq.n	80146e4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80146e0:	2300      	movs	r3, #0
 80146e2:	e010      	b.n	8014706 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80146e4:	4b0a      	ldr	r3, [pc, #40]	; (8014710 <sys_timeouts_sleeptime+0x60>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	685a      	ldr	r2, [r3, #4]
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	1ad3      	subs	r3, r2, r3
 80146ee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	da06      	bge.n	8014704 <sys_timeouts_sleeptime+0x54>
 80146f6:	4b07      	ldr	r3, [pc, #28]	; (8014714 <sys_timeouts_sleeptime+0x64>)
 80146f8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80146fc:	4906      	ldr	r1, [pc, #24]	; (8014718 <sys_timeouts_sleeptime+0x68>)
 80146fe:	4807      	ldr	r0, [pc, #28]	; (801471c <sys_timeouts_sleeptime+0x6c>)
 8014700:	f007 f906 	bl	801b910 <iprintf>
    return ret;
 8014704:	683b      	ldr	r3, [r7, #0]
  }
}
 8014706:	4618      	mov	r0, r3
 8014708:	3708      	adds	r7, #8
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	20008b18 	.word	0x20008b18
 8014714:	0801fa80 	.word	0x0801fa80
 8014718:	0801fb54 	.word	0x0801fb54
 801471c:	0801faf4 	.word	0x0801faf4

08014720 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014724:	f007 f982 	bl	801ba2c <rand>
 8014728:	4603      	mov	r3, r0
 801472a:	b29b      	uxth	r3, r3
 801472c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014730:	b29b      	uxth	r3, r3
 8014732:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014736:	b29a      	uxth	r2, r3
 8014738:	4b01      	ldr	r3, [pc, #4]	; (8014740 <udp_init+0x20>)
 801473a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801473c:	bf00      	nop
 801473e:	bd80      	pop	{r7, pc}
 8014740:	20000018 	.word	0x20000018

08014744 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014744:	b480      	push	{r7}
 8014746:	b083      	sub	sp, #12
 8014748:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801474a:	2300      	movs	r3, #0
 801474c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801474e:	4b17      	ldr	r3, [pc, #92]	; (80147ac <udp_new_port+0x68>)
 8014750:	881b      	ldrh	r3, [r3, #0]
 8014752:	1c5a      	adds	r2, r3, #1
 8014754:	b291      	uxth	r1, r2
 8014756:	4a15      	ldr	r2, [pc, #84]	; (80147ac <udp_new_port+0x68>)
 8014758:	8011      	strh	r1, [r2, #0]
 801475a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801475e:	4293      	cmp	r3, r2
 8014760:	d103      	bne.n	801476a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014762:	4b12      	ldr	r3, [pc, #72]	; (80147ac <udp_new_port+0x68>)
 8014764:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014768:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801476a:	4b11      	ldr	r3, [pc, #68]	; (80147b0 <udp_new_port+0x6c>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	603b      	str	r3, [r7, #0]
 8014770:	e011      	b.n	8014796 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	8a5a      	ldrh	r2, [r3, #18]
 8014776:	4b0d      	ldr	r3, [pc, #52]	; (80147ac <udp_new_port+0x68>)
 8014778:	881b      	ldrh	r3, [r3, #0]
 801477a:	429a      	cmp	r2, r3
 801477c:	d108      	bne.n	8014790 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801477e:	88fb      	ldrh	r3, [r7, #6]
 8014780:	3301      	adds	r3, #1
 8014782:	80fb      	strh	r3, [r7, #6]
 8014784:	88fb      	ldrh	r3, [r7, #6]
 8014786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801478a:	d3e0      	bcc.n	801474e <udp_new_port+0xa>
        return 0;
 801478c:	2300      	movs	r3, #0
 801478e:	e007      	b.n	80147a0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	68db      	ldr	r3, [r3, #12]
 8014794:	603b      	str	r3, [r7, #0]
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d1ea      	bne.n	8014772 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801479c:	4b03      	ldr	r3, [pc, #12]	; (80147ac <udp_new_port+0x68>)
 801479e:	881b      	ldrh	r3, [r3, #0]
}
 80147a0:	4618      	mov	r0, r3
 80147a2:	370c      	adds	r7, #12
 80147a4:	46bd      	mov	sp, r7
 80147a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147aa:	4770      	bx	lr
 80147ac:	20000018 	.word	0x20000018
 80147b0:	20010678 	.word	0x20010678

080147b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b084      	sub	sp, #16
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	60f8      	str	r0, [r7, #12]
 80147bc:	60b9      	str	r1, [r7, #8]
 80147be:	4613      	mov	r3, r2
 80147c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d105      	bne.n	80147d4 <udp_input_local_match+0x20>
 80147c8:	4b27      	ldr	r3, [pc, #156]	; (8014868 <udp_input_local_match+0xb4>)
 80147ca:	2287      	movs	r2, #135	; 0x87
 80147cc:	4927      	ldr	r1, [pc, #156]	; (801486c <udp_input_local_match+0xb8>)
 80147ce:	4828      	ldr	r0, [pc, #160]	; (8014870 <udp_input_local_match+0xbc>)
 80147d0:	f007 f89e 	bl	801b910 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d105      	bne.n	80147e6 <udp_input_local_match+0x32>
 80147da:	4b23      	ldr	r3, [pc, #140]	; (8014868 <udp_input_local_match+0xb4>)
 80147dc:	2288      	movs	r2, #136	; 0x88
 80147de:	4925      	ldr	r1, [pc, #148]	; (8014874 <udp_input_local_match+0xc0>)
 80147e0:	4823      	ldr	r0, [pc, #140]	; (8014870 <udp_input_local_match+0xbc>)
 80147e2:	f007 f895 	bl	801b910 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	7a1b      	ldrb	r3, [r3, #8]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d00b      	beq.n	8014806 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	7a1a      	ldrb	r2, [r3, #8]
 80147f2:	4b21      	ldr	r3, [pc, #132]	; (8014878 <udp_input_local_match+0xc4>)
 80147f4:	685b      	ldr	r3, [r3, #4]
 80147f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80147fa:	3301      	adds	r3, #1
 80147fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147fe:	429a      	cmp	r2, r3
 8014800:	d001      	beq.n	8014806 <udp_input_local_match+0x52>
    return 0;
 8014802:	2300      	movs	r3, #0
 8014804:	e02b      	b.n	801485e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014806:	79fb      	ldrb	r3, [r7, #7]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d018      	beq.n	801483e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d013      	beq.n	801483a <udp_input_local_match+0x86>
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d00f      	beq.n	801483a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801481a:	4b17      	ldr	r3, [pc, #92]	; (8014878 <udp_input_local_match+0xc4>)
 801481c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801481e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014822:	d00a      	beq.n	801483a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	681a      	ldr	r2, [r3, #0]
 8014828:	4b13      	ldr	r3, [pc, #76]	; (8014878 <udp_input_local_match+0xc4>)
 801482a:	695b      	ldr	r3, [r3, #20]
 801482c:	405a      	eors	r2, r3
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	3308      	adds	r3, #8
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014836:	2b00      	cmp	r3, #0
 8014838:	d110      	bne.n	801485c <udp_input_local_match+0xa8>
          return 1;
 801483a:	2301      	movs	r3, #1
 801483c:	e00f      	b.n	801485e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d009      	beq.n	8014858 <udp_input_local_match+0xa4>
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d005      	beq.n	8014858 <udp_input_local_match+0xa4>
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	681a      	ldr	r2, [r3, #0]
 8014850:	4b09      	ldr	r3, [pc, #36]	; (8014878 <udp_input_local_match+0xc4>)
 8014852:	695b      	ldr	r3, [r3, #20]
 8014854:	429a      	cmp	r2, r3
 8014856:	d101      	bne.n	801485c <udp_input_local_match+0xa8>
        return 1;
 8014858:	2301      	movs	r3, #1
 801485a:	e000      	b.n	801485e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801485c:	2300      	movs	r3, #0
}
 801485e:	4618      	mov	r0, r3
 8014860:	3710      	adds	r7, #16
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	0801fb68 	.word	0x0801fb68
 801486c:	0801fb98 	.word	0x0801fb98
 8014870:	0801fbbc 	.word	0x0801fbbc
 8014874:	0801fbe4 	.word	0x0801fbe4
 8014878:	2000cf0c 	.word	0x2000cf0c

0801487c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801487c:	b590      	push	{r4, r7, lr}
 801487e:	b08d      	sub	sp, #52	; 0x34
 8014880:	af02      	add	r7, sp, #8
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014886:	2300      	movs	r3, #0
 8014888:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d105      	bne.n	801489c <udp_input+0x20>
 8014890:	4b7c      	ldr	r3, [pc, #496]	; (8014a84 <udp_input+0x208>)
 8014892:	22cf      	movs	r2, #207	; 0xcf
 8014894:	497c      	ldr	r1, [pc, #496]	; (8014a88 <udp_input+0x20c>)
 8014896:	487d      	ldr	r0, [pc, #500]	; (8014a8c <udp_input+0x210>)
 8014898:	f007 f83a 	bl	801b910 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d105      	bne.n	80148ae <udp_input+0x32>
 80148a2:	4b78      	ldr	r3, [pc, #480]	; (8014a84 <udp_input+0x208>)
 80148a4:	22d0      	movs	r2, #208	; 0xd0
 80148a6:	497a      	ldr	r1, [pc, #488]	; (8014a90 <udp_input+0x214>)
 80148a8:	4878      	ldr	r0, [pc, #480]	; (8014a8c <udp_input+0x210>)
 80148aa:	f007 f831 	bl	801b910 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	895b      	ldrh	r3, [r3, #10]
 80148b2:	2b07      	cmp	r3, #7
 80148b4:	d803      	bhi.n	80148be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f7f9 fad6 	bl	800de68 <pbuf_free>
    goto end;
 80148bc:	e0de      	b.n	8014a7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	685b      	ldr	r3, [r3, #4]
 80148c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80148c4:	4b73      	ldr	r3, [pc, #460]	; (8014a94 <udp_input+0x218>)
 80148c6:	695b      	ldr	r3, [r3, #20]
 80148c8:	4a72      	ldr	r2, [pc, #456]	; (8014a94 <udp_input+0x218>)
 80148ca:	6812      	ldr	r2, [r2, #0]
 80148cc:	4611      	mov	r1, r2
 80148ce:	4618      	mov	r0, r3
 80148d0:	f003 fecc 	bl	801866c <ip4_addr_isbroadcast_u32>
 80148d4:	4603      	mov	r3, r0
 80148d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80148d8:	697b      	ldr	r3, [r7, #20]
 80148da:	881b      	ldrh	r3, [r3, #0]
 80148dc:	b29b      	uxth	r3, r3
 80148de:	4618      	mov	r0, r3
 80148e0:	f7f7 fed8 	bl	800c694 <lwip_htons>
 80148e4:	4603      	mov	r3, r0
 80148e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80148e8:	697b      	ldr	r3, [r7, #20]
 80148ea:	885b      	ldrh	r3, [r3, #2]
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7f7 fed0 	bl	800c694 <lwip_htons>
 80148f4:	4603      	mov	r3, r0
 80148f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80148f8:	2300      	movs	r3, #0
 80148fa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80148fc:	2300      	movs	r3, #0
 80148fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014900:	2300      	movs	r3, #0
 8014902:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014904:	4b64      	ldr	r3, [pc, #400]	; (8014a98 <udp_input+0x21c>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	627b      	str	r3, [r7, #36]	; 0x24
 801490a:	e054      	b.n	80149b6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801490e:	8a5b      	ldrh	r3, [r3, #18]
 8014910:	89fa      	ldrh	r2, [r7, #14]
 8014912:	429a      	cmp	r2, r3
 8014914:	d14a      	bne.n	80149ac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014916:	7cfb      	ldrb	r3, [r7, #19]
 8014918:	461a      	mov	r2, r3
 801491a:	6839      	ldr	r1, [r7, #0]
 801491c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801491e:	f7ff ff49 	bl	80147b4 <udp_input_local_match>
 8014922:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014924:	2b00      	cmp	r3, #0
 8014926:	d041      	beq.n	80149ac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492a:	7c1b      	ldrb	r3, [r3, #16]
 801492c:	f003 0304 	and.w	r3, r3, #4
 8014930:	2b00      	cmp	r3, #0
 8014932:	d11d      	bne.n	8014970 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014934:	69fb      	ldr	r3, [r7, #28]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d102      	bne.n	8014940 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801493c:	61fb      	str	r3, [r7, #28]
 801493e:	e017      	b.n	8014970 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014940:	7cfb      	ldrb	r3, [r7, #19]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d014      	beq.n	8014970 <udp_input+0xf4>
 8014946:	4b53      	ldr	r3, [pc, #332]	; (8014a94 <udp_input+0x218>)
 8014948:	695b      	ldr	r3, [r3, #20]
 801494a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801494e:	d10f      	bne.n	8014970 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	3304      	adds	r3, #4
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	429a      	cmp	r2, r3
 801495c:	d008      	beq.n	8014970 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014960:	681a      	ldr	r2, [r3, #0]
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	3304      	adds	r3, #4
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	429a      	cmp	r2, r3
 801496a:	d101      	bne.n	8014970 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014972:	8a9b      	ldrh	r3, [r3, #20]
 8014974:	8a3a      	ldrh	r2, [r7, #16]
 8014976:	429a      	cmp	r2, r3
 8014978:	d118      	bne.n	80149ac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801497e:	2b00      	cmp	r3, #0
 8014980:	d005      	beq.n	801498e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014984:	685a      	ldr	r2, [r3, #4]
 8014986:	4b43      	ldr	r3, [pc, #268]	; (8014a94 <udp_input+0x218>)
 8014988:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801498a:	429a      	cmp	r2, r3
 801498c:	d10e      	bne.n	80149ac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801498e:	6a3b      	ldr	r3, [r7, #32]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d014      	beq.n	80149be <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014996:	68da      	ldr	r2, [r3, #12]
 8014998:	6a3b      	ldr	r3, [r7, #32]
 801499a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801499c:	4b3e      	ldr	r3, [pc, #248]	; (8014a98 <udp_input+0x21c>)
 801499e:	681a      	ldr	r2, [r3, #0]
 80149a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80149a4:	4a3c      	ldr	r2, [pc, #240]	; (8014a98 <udp_input+0x21c>)
 80149a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80149aa:	e008      	b.n	80149be <udp_input+0x142>
      }
    }

    prev = pcb;
 80149ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80149b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b2:	68db      	ldr	r3, [r3, #12]
 80149b4:	627b      	str	r3, [r7, #36]	; 0x24
 80149b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d1a7      	bne.n	801490c <udp_input+0x90>
 80149bc:	e000      	b.n	80149c0 <udp_input+0x144>
        break;
 80149be:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80149c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d101      	bne.n	80149ca <udp_input+0x14e>
    pcb = uncon_pcb;
 80149c6:	69fb      	ldr	r3, [r7, #28]
 80149c8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80149ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d002      	beq.n	80149d6 <udp_input+0x15a>
    for_us = 1;
 80149d0:	2301      	movs	r3, #1
 80149d2:	76fb      	strb	r3, [r7, #27]
 80149d4:	e00a      	b.n	80149ec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	3304      	adds	r3, #4
 80149da:	681a      	ldr	r2, [r3, #0]
 80149dc:	4b2d      	ldr	r3, [pc, #180]	; (8014a94 <udp_input+0x218>)
 80149de:	695b      	ldr	r3, [r3, #20]
 80149e0:	429a      	cmp	r2, r3
 80149e2:	bf0c      	ite	eq
 80149e4:	2301      	moveq	r3, #1
 80149e6:	2300      	movne	r3, #0
 80149e8:	b2db      	uxtb	r3, r3
 80149ea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80149ec:	7efb      	ldrb	r3, [r7, #27]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d041      	beq.n	8014a76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80149f2:	2108      	movs	r1, #8
 80149f4:	6878      	ldr	r0, [r7, #4]
 80149f6:	f7f9 f97f 	bl	800dcf8 <pbuf_remove_header>
 80149fa:	4603      	mov	r3, r0
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d00a      	beq.n	8014a16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014a00:	4b20      	ldr	r3, [pc, #128]	; (8014a84 <udp_input+0x208>)
 8014a02:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014a06:	4925      	ldr	r1, [pc, #148]	; (8014a9c <udp_input+0x220>)
 8014a08:	4820      	ldr	r0, [pc, #128]	; (8014a8c <udp_input+0x210>)
 8014a0a:	f006 ff81 	bl	801b910 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f7f9 fa2a 	bl	800de68 <pbuf_free>
      goto end;
 8014a14:	e032      	b.n	8014a7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d012      	beq.n	8014a42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a1e:	699b      	ldr	r3, [r3, #24]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d00a      	beq.n	8014a3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a26:	699c      	ldr	r4, [r3, #24]
 8014a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2a:	69d8      	ldr	r0, [r3, #28]
 8014a2c:	8a3b      	ldrh	r3, [r7, #16]
 8014a2e:	9300      	str	r3, [sp, #0]
 8014a30:	4b1b      	ldr	r3, [pc, #108]	; (8014aa0 <udp_input+0x224>)
 8014a32:	687a      	ldr	r2, [r7, #4]
 8014a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014a38:	e021      	b.n	8014a7e <udp_input+0x202>
        pbuf_free(p);
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f7f9 fa14 	bl	800de68 <pbuf_free>
        goto end;
 8014a40:	e01c      	b.n	8014a7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014a42:	7cfb      	ldrb	r3, [r7, #19]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d112      	bne.n	8014a6e <udp_input+0x1f2>
 8014a48:	4b12      	ldr	r3, [pc, #72]	; (8014a94 <udp_input+0x218>)
 8014a4a:	695b      	ldr	r3, [r3, #20]
 8014a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a50:	2be0      	cmp	r3, #224	; 0xe0
 8014a52:	d00c      	beq.n	8014a6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014a54:	4b0f      	ldr	r3, [pc, #60]	; (8014a94 <udp_input+0x218>)
 8014a56:	899b      	ldrh	r3, [r3, #12]
 8014a58:	3308      	adds	r3, #8
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	b21b      	sxth	r3, r3
 8014a5e:	4619      	mov	r1, r3
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f7f9 f9bc 	bl	800ddde <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014a66:	2103      	movs	r1, #3
 8014a68:	6878      	ldr	r0, [r7, #4]
 8014a6a:	f003 fac1 	bl	8017ff0 <icmp_dest_unreach>
      pbuf_free(p);
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f7f9 f9fa 	bl	800de68 <pbuf_free>
  return;
 8014a74:	e003      	b.n	8014a7e <udp_input+0x202>
    pbuf_free(p);
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f7f9 f9f6 	bl	800de68 <pbuf_free>
  return;
 8014a7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014a7e:	372c      	adds	r7, #44	; 0x2c
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd90      	pop	{r4, r7, pc}
 8014a84:	0801fb68 	.word	0x0801fb68
 8014a88:	0801fc0c 	.word	0x0801fc0c
 8014a8c:	0801fbbc 	.word	0x0801fbbc
 8014a90:	0801fc24 	.word	0x0801fc24
 8014a94:	2000cf0c 	.word	0x2000cf0c
 8014a98:	20010678 	.word	0x20010678
 8014a9c:	0801fc40 	.word	0x0801fc40
 8014aa0:	2000cf1c 	.word	0x2000cf1c

08014aa4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b082      	sub	sp, #8
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
 8014aac:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d109      	bne.n	8014ac8 <udp_send+0x24>
 8014ab4:	4b11      	ldr	r3, [pc, #68]	; (8014afc <udp_send+0x58>)
 8014ab6:	f240 12d5 	movw	r2, #469	; 0x1d5
 8014aba:	4911      	ldr	r1, [pc, #68]	; (8014b00 <udp_send+0x5c>)
 8014abc:	4811      	ldr	r0, [pc, #68]	; (8014b04 <udp_send+0x60>)
 8014abe:	f006 ff27 	bl	801b910 <iprintf>
 8014ac2:	f06f 030f 	mvn.w	r3, #15
 8014ac6:	e015      	b.n	8014af4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d109      	bne.n	8014ae2 <udp_send+0x3e>
 8014ace:	4b0b      	ldr	r3, [pc, #44]	; (8014afc <udp_send+0x58>)
 8014ad0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8014ad4:	490c      	ldr	r1, [pc, #48]	; (8014b08 <udp_send+0x64>)
 8014ad6:	480b      	ldr	r0, [pc, #44]	; (8014b04 <udp_send+0x60>)
 8014ad8:	f006 ff1a 	bl	801b910 <iprintf>
 8014adc:	f06f 030f 	mvn.w	r3, #15
 8014ae0:	e008      	b.n	8014af4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	1d1a      	adds	r2, r3, #4
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	8a9b      	ldrh	r3, [r3, #20]
 8014aea:	6839      	ldr	r1, [r7, #0]
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f000 f80d 	bl	8014b0c <udp_sendto>
 8014af2:	4603      	mov	r3, r0
}
 8014af4:	4618      	mov	r0, r3
 8014af6:	3708      	adds	r7, #8
 8014af8:	46bd      	mov	sp, r7
 8014afa:	bd80      	pop	{r7, pc}
 8014afc:	0801fb68 	.word	0x0801fb68
 8014b00:	0801fc5c 	.word	0x0801fc5c
 8014b04:	0801fbbc 	.word	0x0801fbbc
 8014b08:	0801fc74 	.word	0x0801fc74

08014b0c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b088      	sub	sp, #32
 8014b10:	af02      	add	r7, sp, #8
 8014b12:	60f8      	str	r0, [r7, #12]
 8014b14:	60b9      	str	r1, [r7, #8]
 8014b16:	607a      	str	r2, [r7, #4]
 8014b18:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d109      	bne.n	8014b34 <udp_sendto+0x28>
 8014b20:	4b23      	ldr	r3, [pc, #140]	; (8014bb0 <udp_sendto+0xa4>)
 8014b22:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014b26:	4923      	ldr	r1, [pc, #140]	; (8014bb4 <udp_sendto+0xa8>)
 8014b28:	4823      	ldr	r0, [pc, #140]	; (8014bb8 <udp_sendto+0xac>)
 8014b2a:	f006 fef1 	bl	801b910 <iprintf>
 8014b2e:	f06f 030f 	mvn.w	r3, #15
 8014b32:	e038      	b.n	8014ba6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d109      	bne.n	8014b4e <udp_sendto+0x42>
 8014b3a:	4b1d      	ldr	r3, [pc, #116]	; (8014bb0 <udp_sendto+0xa4>)
 8014b3c:	f240 2219 	movw	r2, #537	; 0x219
 8014b40:	491e      	ldr	r1, [pc, #120]	; (8014bbc <udp_sendto+0xb0>)
 8014b42:	481d      	ldr	r0, [pc, #116]	; (8014bb8 <udp_sendto+0xac>)
 8014b44:	f006 fee4 	bl	801b910 <iprintf>
 8014b48:	f06f 030f 	mvn.w	r3, #15
 8014b4c:	e02b      	b.n	8014ba6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d109      	bne.n	8014b68 <udp_sendto+0x5c>
 8014b54:	4b16      	ldr	r3, [pc, #88]	; (8014bb0 <udp_sendto+0xa4>)
 8014b56:	f240 221a 	movw	r2, #538	; 0x21a
 8014b5a:	4919      	ldr	r1, [pc, #100]	; (8014bc0 <udp_sendto+0xb4>)
 8014b5c:	4816      	ldr	r0, [pc, #88]	; (8014bb8 <udp_sendto+0xac>)
 8014b5e:	f006 fed7 	bl	801b910 <iprintf>
 8014b62:	f06f 030f 	mvn.w	r3, #15
 8014b66:	e01e      	b.n	8014ba6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	7a1b      	ldrb	r3, [r3, #8]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d006      	beq.n	8014b7e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	7a1b      	ldrb	r3, [r3, #8]
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7f8 fdb7 	bl	800d6e8 <netif_get_by_index>
 8014b7a:	6178      	str	r0, [r7, #20]
 8014b7c:	e003      	b.n	8014b86 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f003 fac0 	bl	8018104 <ip4_route>
 8014b84:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d102      	bne.n	8014b92 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014b8c:	f06f 0303 	mvn.w	r3, #3
 8014b90:	e009      	b.n	8014ba6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8014b92:	887a      	ldrh	r2, [r7, #2]
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	4613      	mov	r3, r2
 8014b9a:	687a      	ldr	r2, [r7, #4]
 8014b9c:	68b9      	ldr	r1, [r7, #8]
 8014b9e:	68f8      	ldr	r0, [r7, #12]
 8014ba0:	f000 f810 	bl	8014bc4 <udp_sendto_if>
 8014ba4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3718      	adds	r7, #24
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	0801fb68 	.word	0x0801fb68
 8014bb4:	0801fc8c 	.word	0x0801fc8c
 8014bb8:	0801fbbc 	.word	0x0801fbbc
 8014bbc:	0801fca4 	.word	0x0801fca4
 8014bc0:	0801fcc0 	.word	0x0801fcc0

08014bc4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b088      	sub	sp, #32
 8014bc8:	af02      	add	r7, sp, #8
 8014bca:	60f8      	str	r0, [r7, #12]
 8014bcc:	60b9      	str	r1, [r7, #8]
 8014bce:	607a      	str	r2, [r7, #4]
 8014bd0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d109      	bne.n	8014bec <udp_sendto_if+0x28>
 8014bd8:	4b2e      	ldr	r3, [pc, #184]	; (8014c94 <udp_sendto_if+0xd0>)
 8014bda:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014bde:	492e      	ldr	r1, [pc, #184]	; (8014c98 <udp_sendto_if+0xd4>)
 8014be0:	482e      	ldr	r0, [pc, #184]	; (8014c9c <udp_sendto_if+0xd8>)
 8014be2:	f006 fe95 	bl	801b910 <iprintf>
 8014be6:	f06f 030f 	mvn.w	r3, #15
 8014bea:	e04f      	b.n	8014c8c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d109      	bne.n	8014c06 <udp_sendto_if+0x42>
 8014bf2:	4b28      	ldr	r3, [pc, #160]	; (8014c94 <udp_sendto_if+0xd0>)
 8014bf4:	f240 2281 	movw	r2, #641	; 0x281
 8014bf8:	4929      	ldr	r1, [pc, #164]	; (8014ca0 <udp_sendto_if+0xdc>)
 8014bfa:	4828      	ldr	r0, [pc, #160]	; (8014c9c <udp_sendto_if+0xd8>)
 8014bfc:	f006 fe88 	bl	801b910 <iprintf>
 8014c00:	f06f 030f 	mvn.w	r3, #15
 8014c04:	e042      	b.n	8014c8c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d109      	bne.n	8014c20 <udp_sendto_if+0x5c>
 8014c0c:	4b21      	ldr	r3, [pc, #132]	; (8014c94 <udp_sendto_if+0xd0>)
 8014c0e:	f240 2282 	movw	r2, #642	; 0x282
 8014c12:	4924      	ldr	r1, [pc, #144]	; (8014ca4 <udp_sendto_if+0xe0>)
 8014c14:	4821      	ldr	r0, [pc, #132]	; (8014c9c <udp_sendto_if+0xd8>)
 8014c16:	f006 fe7b 	bl	801b910 <iprintf>
 8014c1a:	f06f 030f 	mvn.w	r3, #15
 8014c1e:	e035      	b.n	8014c8c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014c20:	6a3b      	ldr	r3, [r7, #32]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d109      	bne.n	8014c3a <udp_sendto_if+0x76>
 8014c26:	4b1b      	ldr	r3, [pc, #108]	; (8014c94 <udp_sendto_if+0xd0>)
 8014c28:	f240 2283 	movw	r2, #643	; 0x283
 8014c2c:	491e      	ldr	r1, [pc, #120]	; (8014ca8 <udp_sendto_if+0xe4>)
 8014c2e:	481b      	ldr	r0, [pc, #108]	; (8014c9c <udp_sendto_if+0xd8>)
 8014c30:	f006 fe6e 	bl	801b910 <iprintf>
 8014c34:	f06f 030f 	mvn.w	r3, #15
 8014c38:	e028      	b.n	8014c8c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d009      	beq.n	8014c54 <udp_sendto_if+0x90>
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d005      	beq.n	8014c54 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014c50:	2be0      	cmp	r3, #224	; 0xe0
 8014c52:	d103      	bne.n	8014c5c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014c54:	6a3b      	ldr	r3, [r7, #32]
 8014c56:	3304      	adds	r3, #4
 8014c58:	617b      	str	r3, [r7, #20]
 8014c5a:	e00b      	b.n	8014c74 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	6a3b      	ldr	r3, [r7, #32]
 8014c62:	3304      	adds	r3, #4
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d002      	beq.n	8014c70 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014c6a:	f06f 0303 	mvn.w	r3, #3
 8014c6e:	e00d      	b.n	8014c8c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014c74:	887a      	ldrh	r2, [r7, #2]
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	9301      	str	r3, [sp, #4]
 8014c7a:	6a3b      	ldr	r3, [r7, #32]
 8014c7c:	9300      	str	r3, [sp, #0]
 8014c7e:	4613      	mov	r3, r2
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	68b9      	ldr	r1, [r7, #8]
 8014c84:	68f8      	ldr	r0, [r7, #12]
 8014c86:	f000 f811 	bl	8014cac <udp_sendto_if_src>
 8014c8a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	3718      	adds	r7, #24
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}
 8014c94:	0801fb68 	.word	0x0801fb68
 8014c98:	0801fcdc 	.word	0x0801fcdc
 8014c9c:	0801fbbc 	.word	0x0801fbbc
 8014ca0:	0801fcf8 	.word	0x0801fcf8
 8014ca4:	0801fd14 	.word	0x0801fd14
 8014ca8:	0801fd34 	.word	0x0801fd34

08014cac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b08c      	sub	sp, #48	; 0x30
 8014cb0:	af04      	add	r7, sp, #16
 8014cb2:	60f8      	str	r0, [r7, #12]
 8014cb4:	60b9      	str	r1, [r7, #8]
 8014cb6:	607a      	str	r2, [r7, #4]
 8014cb8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d109      	bne.n	8014cd4 <udp_sendto_if_src+0x28>
 8014cc0:	4b65      	ldr	r3, [pc, #404]	; (8014e58 <udp_sendto_if_src+0x1ac>)
 8014cc2:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014cc6:	4965      	ldr	r1, [pc, #404]	; (8014e5c <udp_sendto_if_src+0x1b0>)
 8014cc8:	4865      	ldr	r0, [pc, #404]	; (8014e60 <udp_sendto_if_src+0x1b4>)
 8014cca:	f006 fe21 	bl	801b910 <iprintf>
 8014cce:	f06f 030f 	mvn.w	r3, #15
 8014cd2:	e0bc      	b.n	8014e4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d109      	bne.n	8014cee <udp_sendto_if_src+0x42>
 8014cda:	4b5f      	ldr	r3, [pc, #380]	; (8014e58 <udp_sendto_if_src+0x1ac>)
 8014cdc:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014ce0:	4960      	ldr	r1, [pc, #384]	; (8014e64 <udp_sendto_if_src+0x1b8>)
 8014ce2:	485f      	ldr	r0, [pc, #380]	; (8014e60 <udp_sendto_if_src+0x1b4>)
 8014ce4:	f006 fe14 	bl	801b910 <iprintf>
 8014ce8:	f06f 030f 	mvn.w	r3, #15
 8014cec:	e0af      	b.n	8014e4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d109      	bne.n	8014d08 <udp_sendto_if_src+0x5c>
 8014cf4:	4b58      	ldr	r3, [pc, #352]	; (8014e58 <udp_sendto_if_src+0x1ac>)
 8014cf6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014cfa:	495b      	ldr	r1, [pc, #364]	; (8014e68 <udp_sendto_if_src+0x1bc>)
 8014cfc:	4858      	ldr	r0, [pc, #352]	; (8014e60 <udp_sendto_if_src+0x1b4>)
 8014cfe:	f006 fe07 	bl	801b910 <iprintf>
 8014d02:	f06f 030f 	mvn.w	r3, #15
 8014d06:	e0a2      	b.n	8014e4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d109      	bne.n	8014d22 <udp_sendto_if_src+0x76>
 8014d0e:	4b52      	ldr	r3, [pc, #328]	; (8014e58 <udp_sendto_if_src+0x1ac>)
 8014d10:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014d14:	4955      	ldr	r1, [pc, #340]	; (8014e6c <udp_sendto_if_src+0x1c0>)
 8014d16:	4852      	ldr	r0, [pc, #328]	; (8014e60 <udp_sendto_if_src+0x1b4>)
 8014d18:	f006 fdfa 	bl	801b910 <iprintf>
 8014d1c:	f06f 030f 	mvn.w	r3, #15
 8014d20:	e095      	b.n	8014e4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d109      	bne.n	8014d3c <udp_sendto_if_src+0x90>
 8014d28:	4b4b      	ldr	r3, [pc, #300]	; (8014e58 <udp_sendto_if_src+0x1ac>)
 8014d2a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014d2e:	4950      	ldr	r1, [pc, #320]	; (8014e70 <udp_sendto_if_src+0x1c4>)
 8014d30:	484b      	ldr	r0, [pc, #300]	; (8014e60 <udp_sendto_if_src+0x1b4>)
 8014d32:	f006 fded 	bl	801b910 <iprintf>
 8014d36:	f06f 030f 	mvn.w	r3, #15
 8014d3a:	e088      	b.n	8014e4e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	8a5b      	ldrh	r3, [r3, #18]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d10f      	bne.n	8014d64 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014d44:	68f9      	ldr	r1, [r7, #12]
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	8a5b      	ldrh	r3, [r3, #18]
 8014d4a:	461a      	mov	r2, r3
 8014d4c:	68f8      	ldr	r0, [r7, #12]
 8014d4e:	f000 f893 	bl	8014e78 <udp_bind>
 8014d52:	4603      	mov	r3, r0
 8014d54:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014d56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d002      	beq.n	8014d64 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014d5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014d62:	e074      	b.n	8014e4e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	891b      	ldrh	r3, [r3, #8]
 8014d68:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014d6c:	4293      	cmp	r3, r2
 8014d6e:	d902      	bls.n	8014d76 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d74:	e06b      	b.n	8014e4e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014d76:	2108      	movs	r1, #8
 8014d78:	68b8      	ldr	r0, [r7, #8]
 8014d7a:	f7f8 ffad 	bl	800dcd8 <pbuf_add_header>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d015      	beq.n	8014db0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014d84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d88:	2108      	movs	r1, #8
 8014d8a:	2022      	movs	r0, #34	; 0x22
 8014d8c:	f7f8 fd56 	bl	800d83c <pbuf_alloc>
 8014d90:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014d92:	69fb      	ldr	r3, [r7, #28]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d102      	bne.n	8014d9e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d9c:	e057      	b.n	8014e4e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014d9e:	68bb      	ldr	r3, [r7, #8]
 8014da0:	891b      	ldrh	r3, [r3, #8]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d006      	beq.n	8014db4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014da6:	68b9      	ldr	r1, [r7, #8]
 8014da8:	69f8      	ldr	r0, [r7, #28]
 8014daa:	f7f9 f981 	bl	800e0b0 <pbuf_chain>
 8014dae:	e001      	b.n	8014db4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014db0:	68bb      	ldr	r3, [r7, #8]
 8014db2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014db4:	69fb      	ldr	r3, [r7, #28]
 8014db6:	895b      	ldrh	r3, [r3, #10]
 8014db8:	2b07      	cmp	r3, #7
 8014dba:	d806      	bhi.n	8014dca <udp_sendto_if_src+0x11e>
 8014dbc:	4b26      	ldr	r3, [pc, #152]	; (8014e58 <udp_sendto_if_src+0x1ac>)
 8014dbe:	f240 320d 	movw	r2, #781	; 0x30d
 8014dc2:	492c      	ldr	r1, [pc, #176]	; (8014e74 <udp_sendto_if_src+0x1c8>)
 8014dc4:	4826      	ldr	r0, [pc, #152]	; (8014e60 <udp_sendto_if_src+0x1b4>)
 8014dc6:	f006 fda3 	bl	801b910 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014dca:	69fb      	ldr	r3, [r7, #28]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	8a5b      	ldrh	r3, [r3, #18]
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f7f7 fc5d 	bl	800c694 <lwip_htons>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	461a      	mov	r2, r3
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014de2:	887b      	ldrh	r3, [r7, #2]
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7f7 fc55 	bl	800c694 <lwip_htons>
 8014dea:	4603      	mov	r3, r0
 8014dec:	461a      	mov	r2, r3
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	2200      	movs	r2, #0
 8014df6:	719a      	strb	r2, [r3, #6]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014dfc:	69fb      	ldr	r3, [r7, #28]
 8014dfe:	891b      	ldrh	r3, [r3, #8]
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7f7 fc47 	bl	800c694 <lwip_htons>
 8014e06:	4603      	mov	r3, r0
 8014e08:	461a      	mov	r2, r3
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014e0e:	2311      	movs	r3, #17
 8014e10:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	7adb      	ldrb	r3, [r3, #11]
 8014e16:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	7a9b      	ldrb	r3, [r3, #10]
 8014e1c:	7cb9      	ldrb	r1, [r7, #18]
 8014e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e20:	9202      	str	r2, [sp, #8]
 8014e22:	7cfa      	ldrb	r2, [r7, #19]
 8014e24:	9201      	str	r2, [sp, #4]
 8014e26:	9300      	str	r3, [sp, #0]
 8014e28:	460b      	mov	r3, r1
 8014e2a:	687a      	ldr	r2, [r7, #4]
 8014e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e2e:	69f8      	ldr	r0, [r7, #28]
 8014e30:	f003 fb6e 	bl	8018510 <ip4_output_if_src>
 8014e34:	4603      	mov	r3, r0
 8014e36:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014e38:	69fa      	ldr	r2, [r7, #28]
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d004      	beq.n	8014e4a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014e40:	69f8      	ldr	r0, [r7, #28]
 8014e42:	f7f9 f811 	bl	800de68 <pbuf_free>
    q = NULL;
 8014e46:	2300      	movs	r3, #0
 8014e48:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014e4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3720      	adds	r7, #32
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	0801fb68 	.word	0x0801fb68
 8014e5c:	0801fd54 	.word	0x0801fd54
 8014e60:	0801fbbc 	.word	0x0801fbbc
 8014e64:	0801fd74 	.word	0x0801fd74
 8014e68:	0801fd94 	.word	0x0801fd94
 8014e6c:	0801fdb8 	.word	0x0801fdb8
 8014e70:	0801fddc 	.word	0x0801fddc
 8014e74:	0801fe00 	.word	0x0801fe00

08014e78 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b086      	sub	sp, #24
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	60f8      	str	r0, [r7, #12]
 8014e80:	60b9      	str	r1, [r7, #8]
 8014e82:	4613      	mov	r3, r2
 8014e84:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d101      	bne.n	8014e90 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014e8c:	4b39      	ldr	r3, [pc, #228]	; (8014f74 <udp_bind+0xfc>)
 8014e8e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d109      	bne.n	8014eaa <udp_bind+0x32>
 8014e96:	4b38      	ldr	r3, [pc, #224]	; (8014f78 <udp_bind+0x100>)
 8014e98:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014e9c:	4937      	ldr	r1, [pc, #220]	; (8014f7c <udp_bind+0x104>)
 8014e9e:	4838      	ldr	r0, [pc, #224]	; (8014f80 <udp_bind+0x108>)
 8014ea0:	f006 fd36 	bl	801b910 <iprintf>
 8014ea4:	f06f 030f 	mvn.w	r3, #15
 8014ea8:	e060      	b.n	8014f6c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014eae:	4b35      	ldr	r3, [pc, #212]	; (8014f84 <udp_bind+0x10c>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	617b      	str	r3, [r7, #20]
 8014eb4:	e009      	b.n	8014eca <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014eb6:	68fa      	ldr	r2, [r7, #12]
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d102      	bne.n	8014ec4 <udp_bind+0x4c>
      rebind = 1;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	74fb      	strb	r3, [r7, #19]
      break;
 8014ec2:	e005      	b.n	8014ed0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	68db      	ldr	r3, [r3, #12]
 8014ec8:	617b      	str	r3, [r7, #20]
 8014eca:	697b      	ldr	r3, [r7, #20]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d1f2      	bne.n	8014eb6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014ed0:	88fb      	ldrh	r3, [r7, #6]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d109      	bne.n	8014eea <udp_bind+0x72>
    port = udp_new_port();
 8014ed6:	f7ff fc35 	bl	8014744 <udp_new_port>
 8014eda:	4603      	mov	r3, r0
 8014edc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014ede:	88fb      	ldrh	r3, [r7, #6]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d12c      	bne.n	8014f3e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014ee4:	f06f 0307 	mvn.w	r3, #7
 8014ee8:	e040      	b.n	8014f6c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014eea:	4b26      	ldr	r3, [pc, #152]	; (8014f84 <udp_bind+0x10c>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	617b      	str	r3, [r7, #20]
 8014ef0:	e022      	b.n	8014f38 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014ef2:	68fa      	ldr	r2, [r7, #12]
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d01b      	beq.n	8014f32 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	8a5b      	ldrh	r3, [r3, #18]
 8014efe:	88fa      	ldrh	r2, [r7, #6]
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d116      	bne.n	8014f32 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	681a      	ldr	r2, [r3, #0]
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014f0c:	429a      	cmp	r2, r3
 8014f0e:	d00d      	beq.n	8014f2c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d00a      	beq.n	8014f2c <udp_bind+0xb4>
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d006      	beq.n	8014f2c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014f1e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d003      	beq.n	8014f2c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d102      	bne.n	8014f32 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014f2c:	f06f 0307 	mvn.w	r3, #7
 8014f30:	e01c      	b.n	8014f6c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	68db      	ldr	r3, [r3, #12]
 8014f36:	617b      	str	r3, [r7, #20]
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d1d9      	bne.n	8014ef2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d002      	beq.n	8014f4a <udp_bind+0xd2>
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	e000      	b.n	8014f4c <udp_bind+0xd4>
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	68fa      	ldr	r2, [r7, #12]
 8014f4e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	88fa      	ldrh	r2, [r7, #6]
 8014f54:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014f56:	7cfb      	ldrb	r3, [r7, #19]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d106      	bne.n	8014f6a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014f5c:	4b09      	ldr	r3, [pc, #36]	; (8014f84 <udp_bind+0x10c>)
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014f64:	4a07      	ldr	r2, [pc, #28]	; (8014f84 <udp_bind+0x10c>)
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014f6a:	2300      	movs	r3, #0
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3718      	adds	r7, #24
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	08020b88 	.word	0x08020b88
 8014f78:	0801fb68 	.word	0x0801fb68
 8014f7c:	0801fe30 	.word	0x0801fe30
 8014f80:	0801fbbc 	.word	0x0801fbbc
 8014f84:	20010678 	.word	0x20010678

08014f88 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b086      	sub	sp, #24
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	60f8      	str	r0, [r7, #12]
 8014f90:	60b9      	str	r1, [r7, #8]
 8014f92:	4613      	mov	r3, r2
 8014f94:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d109      	bne.n	8014fb0 <udp_connect+0x28>
 8014f9c:	4b2c      	ldr	r3, [pc, #176]	; (8015050 <udp_connect+0xc8>)
 8014f9e:	f240 4235 	movw	r2, #1077	; 0x435
 8014fa2:	492c      	ldr	r1, [pc, #176]	; (8015054 <udp_connect+0xcc>)
 8014fa4:	482c      	ldr	r0, [pc, #176]	; (8015058 <udp_connect+0xd0>)
 8014fa6:	f006 fcb3 	bl	801b910 <iprintf>
 8014faa:	f06f 030f 	mvn.w	r3, #15
 8014fae:	e04b      	b.n	8015048 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d109      	bne.n	8014fca <udp_connect+0x42>
 8014fb6:	4b26      	ldr	r3, [pc, #152]	; (8015050 <udp_connect+0xc8>)
 8014fb8:	f240 4236 	movw	r2, #1078	; 0x436
 8014fbc:	4927      	ldr	r1, [pc, #156]	; (801505c <udp_connect+0xd4>)
 8014fbe:	4826      	ldr	r0, [pc, #152]	; (8015058 <udp_connect+0xd0>)
 8014fc0:	f006 fca6 	bl	801b910 <iprintf>
 8014fc4:	f06f 030f 	mvn.w	r3, #15
 8014fc8:	e03e      	b.n	8015048 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	8a5b      	ldrh	r3, [r3, #18]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d10f      	bne.n	8014ff2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014fd2:	68f9      	ldr	r1, [r7, #12]
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	8a5b      	ldrh	r3, [r3, #18]
 8014fd8:	461a      	mov	r2, r3
 8014fda:	68f8      	ldr	r0, [r7, #12]
 8014fdc:	f7ff ff4c 	bl	8014e78 <udp_bind>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014fe4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d002      	beq.n	8014ff2 <udp_connect+0x6a>
      return err;
 8014fec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ff0:	e02a      	b.n	8015048 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014ff2:	68bb      	ldr	r3, [r7, #8]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d002      	beq.n	8014ffe <udp_connect+0x76>
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	e000      	b.n	8015000 <udp_connect+0x78>
 8014ffe:	2300      	movs	r3, #0
 8015000:	68fa      	ldr	r2, [r7, #12]
 8015002:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	88fa      	ldrh	r2, [r7, #6]
 8015008:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	7c1b      	ldrb	r3, [r3, #16]
 801500e:	f043 0304 	orr.w	r3, r3, #4
 8015012:	b2da      	uxtb	r2, r3
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015018:	4b11      	ldr	r3, [pc, #68]	; (8015060 <udp_connect+0xd8>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	617b      	str	r3, [r7, #20]
 801501e:	e008      	b.n	8015032 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015020:	68fa      	ldr	r2, [r7, #12]
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	429a      	cmp	r2, r3
 8015026:	d101      	bne.n	801502c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015028:	2300      	movs	r3, #0
 801502a:	e00d      	b.n	8015048 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801502c:	697b      	ldr	r3, [r7, #20]
 801502e:	68db      	ldr	r3, [r3, #12]
 8015030:	617b      	str	r3, [r7, #20]
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d1f3      	bne.n	8015020 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015038:	4b09      	ldr	r3, [pc, #36]	; (8015060 <udp_connect+0xd8>)
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015040:	4a07      	ldr	r2, [pc, #28]	; (8015060 <udp_connect+0xd8>)
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8015046:	2300      	movs	r3, #0
}
 8015048:	4618      	mov	r0, r3
 801504a:	3718      	adds	r7, #24
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	0801fb68 	.word	0x0801fb68
 8015054:	0801fe48 	.word	0x0801fe48
 8015058:	0801fbbc 	.word	0x0801fbbc
 801505c:	0801fe64 	.word	0x0801fe64
 8015060:	20010678 	.word	0x20010678

08015064 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d107      	bne.n	8015082 <udp_disconnect+0x1e>
 8015072:	4b0d      	ldr	r3, [pc, #52]	; (80150a8 <udp_disconnect+0x44>)
 8015074:	f240 426a 	movw	r2, #1130	; 0x46a
 8015078:	490c      	ldr	r1, [pc, #48]	; (80150ac <udp_disconnect+0x48>)
 801507a:	480d      	ldr	r0, [pc, #52]	; (80150b0 <udp_disconnect+0x4c>)
 801507c:	f006 fc48 	bl	801b910 <iprintf>
 8015080:	e00f      	b.n	80150a2 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	2200      	movs	r2, #0
 8015086:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	2200      	movs	r2, #0
 801508c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	2200      	movs	r2, #0
 8015092:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	7c1b      	ldrb	r3, [r3, #16]
 8015098:	f023 0304 	bic.w	r3, r3, #4
 801509c:	b2da      	uxtb	r2, r3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	741a      	strb	r2, [r3, #16]
}
 80150a2:	3708      	adds	r7, #8
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	0801fb68 	.word	0x0801fb68
 80150ac:	0801fe80 	.word	0x0801fe80
 80150b0:	0801fbbc 	.word	0x0801fbbc

080150b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b084      	sub	sp, #16
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	60f8      	str	r0, [r7, #12]
 80150bc:	60b9      	str	r1, [r7, #8]
 80150be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d107      	bne.n	80150d6 <udp_recv+0x22>
 80150c6:	4b08      	ldr	r3, [pc, #32]	; (80150e8 <udp_recv+0x34>)
 80150c8:	f240 428a 	movw	r2, #1162	; 0x48a
 80150cc:	4907      	ldr	r1, [pc, #28]	; (80150ec <udp_recv+0x38>)
 80150ce:	4808      	ldr	r0, [pc, #32]	; (80150f0 <udp_recv+0x3c>)
 80150d0:	f006 fc1e 	bl	801b910 <iprintf>
 80150d4:	e005      	b.n	80150e2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	68ba      	ldr	r2, [r7, #8]
 80150da:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	687a      	ldr	r2, [r7, #4]
 80150e0:	61da      	str	r2, [r3, #28]
}
 80150e2:	3710      	adds	r7, #16
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	0801fb68 	.word	0x0801fb68
 80150ec:	0801fe9c 	.word	0x0801fe9c
 80150f0:	0801fbbc 	.word	0x0801fbbc

080150f4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b084      	sub	sp, #16
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d107      	bne.n	8015112 <udp_remove+0x1e>
 8015102:	4b19      	ldr	r3, [pc, #100]	; (8015168 <udp_remove+0x74>)
 8015104:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015108:	4918      	ldr	r1, [pc, #96]	; (801516c <udp_remove+0x78>)
 801510a:	4819      	ldr	r0, [pc, #100]	; (8015170 <udp_remove+0x7c>)
 801510c:	f006 fc00 	bl	801b910 <iprintf>
 8015110:	e026      	b.n	8015160 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015112:	4b18      	ldr	r3, [pc, #96]	; (8015174 <udp_remove+0x80>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	687a      	ldr	r2, [r7, #4]
 8015118:	429a      	cmp	r2, r3
 801511a:	d105      	bne.n	8015128 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801511c:	4b15      	ldr	r3, [pc, #84]	; (8015174 <udp_remove+0x80>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	68db      	ldr	r3, [r3, #12]
 8015122:	4a14      	ldr	r2, [pc, #80]	; (8015174 <udp_remove+0x80>)
 8015124:	6013      	str	r3, [r2, #0]
 8015126:	e017      	b.n	8015158 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015128:	4b12      	ldr	r3, [pc, #72]	; (8015174 <udp_remove+0x80>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	60fb      	str	r3, [r7, #12]
 801512e:	e010      	b.n	8015152 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	68db      	ldr	r3, [r3, #12]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d009      	beq.n	801514c <udp_remove+0x58>
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	68db      	ldr	r3, [r3, #12]
 801513c:	687a      	ldr	r2, [r7, #4]
 801513e:	429a      	cmp	r2, r3
 8015140:	d104      	bne.n	801514c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	68da      	ldr	r2, [r3, #12]
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	60da      	str	r2, [r3, #12]
        break;
 801514a:	e005      	b.n	8015158 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	68db      	ldr	r3, [r3, #12]
 8015150:	60fb      	str	r3, [r7, #12]
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d1eb      	bne.n	8015130 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015158:	6879      	ldr	r1, [r7, #4]
 801515a:	2000      	movs	r0, #0
 801515c:	f7f7 ffa2 	bl	800d0a4 <memp_free>
}
 8015160:	3710      	adds	r7, #16
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	0801fb68 	.word	0x0801fb68
 801516c:	0801feb4 	.word	0x0801feb4
 8015170:	0801fbbc 	.word	0x0801fbbc
 8015174:	20010678 	.word	0x20010678

08015178 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801517e:	2000      	movs	r0, #0
 8015180:	f7f7 ff3e 	bl	800d000 <memp_malloc>
 8015184:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d007      	beq.n	801519c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801518c:	2220      	movs	r2, #32
 801518e:	2100      	movs	r1, #0
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f006 fbb5 	bl	801b900 <memset>
    pcb->ttl = UDP_TTL;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	22ff      	movs	r2, #255	; 0xff
 801519a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801519c:	687b      	ldr	r3, [r7, #4]
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3708      	adds	r7, #8
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}

080151a6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80151a6:	b580      	push	{r7, lr}
 80151a8:	b084      	sub	sp, #16
 80151aa:	af00      	add	r7, sp, #0
 80151ac:	4603      	mov	r3, r0
 80151ae:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80151b0:	f7ff ffe2 	bl	8015178 <udp_new>
 80151b4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80151b6:	68fb      	ldr	r3, [r7, #12]
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	3710      	adds	r7, #16
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80151c0:	b480      	push	{r7}
 80151c2:	b085      	sub	sp, #20
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d01e      	beq.n	801520e <udp_netif_ip_addr_changed+0x4e>
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d01a      	beq.n	801520e <udp_netif_ip_addr_changed+0x4e>
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d017      	beq.n	801520e <udp_netif_ip_addr_changed+0x4e>
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d013      	beq.n	801520e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80151e6:	4b0d      	ldr	r3, [pc, #52]	; (801521c <udp_netif_ip_addr_changed+0x5c>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	60fb      	str	r3, [r7, #12]
 80151ec:	e00c      	b.n	8015208 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	681a      	ldr	r2, [r3, #0]
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d103      	bne.n	8015202 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	681a      	ldr	r2, [r3, #0]
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	68db      	ldr	r3, [r3, #12]
 8015206:	60fb      	str	r3, [r7, #12]
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d1ef      	bne.n	80151ee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801520e:	bf00      	nop
 8015210:	3714      	adds	r7, #20
 8015212:	46bd      	mov	sp, r7
 8015214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	20010678 	.word	0x20010678

08015220 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015224:	4b20      	ldr	r3, [pc, #128]	; (80152a8 <dhcp_inc_pcb_refcount+0x88>)
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d133      	bne.n	8015294 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801522c:	4b1f      	ldr	r3, [pc, #124]	; (80152ac <dhcp_inc_pcb_refcount+0x8c>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d005      	beq.n	8015240 <dhcp_inc_pcb_refcount+0x20>
 8015234:	4b1e      	ldr	r3, [pc, #120]	; (80152b0 <dhcp_inc_pcb_refcount+0x90>)
 8015236:	22e5      	movs	r2, #229	; 0xe5
 8015238:	491e      	ldr	r1, [pc, #120]	; (80152b4 <dhcp_inc_pcb_refcount+0x94>)
 801523a:	481f      	ldr	r0, [pc, #124]	; (80152b8 <dhcp_inc_pcb_refcount+0x98>)
 801523c:	f006 fb68 	bl	801b910 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015240:	f7ff ff9a 	bl	8015178 <udp_new>
 8015244:	4603      	mov	r3, r0
 8015246:	4a19      	ldr	r2, [pc, #100]	; (80152ac <dhcp_inc_pcb_refcount+0x8c>)
 8015248:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801524a:	4b18      	ldr	r3, [pc, #96]	; (80152ac <dhcp_inc_pcb_refcount+0x8c>)
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d102      	bne.n	8015258 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015256:	e024      	b.n	80152a2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015258:	4b14      	ldr	r3, [pc, #80]	; (80152ac <dhcp_inc_pcb_refcount+0x8c>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	7a5a      	ldrb	r2, [r3, #9]
 801525e:	4b13      	ldr	r3, [pc, #76]	; (80152ac <dhcp_inc_pcb_refcount+0x8c>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f042 0220 	orr.w	r2, r2, #32
 8015266:	b2d2      	uxtb	r2, r2
 8015268:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801526a:	4b10      	ldr	r3, [pc, #64]	; (80152ac <dhcp_inc_pcb_refcount+0x8c>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	2244      	movs	r2, #68	; 0x44
 8015270:	4912      	ldr	r1, [pc, #72]	; (80152bc <dhcp_inc_pcb_refcount+0x9c>)
 8015272:	4618      	mov	r0, r3
 8015274:	f7ff fe00 	bl	8014e78 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015278:	4b0c      	ldr	r3, [pc, #48]	; (80152ac <dhcp_inc_pcb_refcount+0x8c>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	2243      	movs	r2, #67	; 0x43
 801527e:	490f      	ldr	r1, [pc, #60]	; (80152bc <dhcp_inc_pcb_refcount+0x9c>)
 8015280:	4618      	mov	r0, r3
 8015282:	f7ff fe81 	bl	8014f88 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015286:	4b09      	ldr	r3, [pc, #36]	; (80152ac <dhcp_inc_pcb_refcount+0x8c>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	2200      	movs	r2, #0
 801528c:	490c      	ldr	r1, [pc, #48]	; (80152c0 <dhcp_inc_pcb_refcount+0xa0>)
 801528e:	4618      	mov	r0, r3
 8015290:	f7ff ff10 	bl	80150b4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015294:	4b04      	ldr	r3, [pc, #16]	; (80152a8 <dhcp_inc_pcb_refcount+0x88>)
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	3301      	adds	r3, #1
 801529a:	b2da      	uxtb	r2, r3
 801529c:	4b02      	ldr	r3, [pc, #8]	; (80152a8 <dhcp_inc_pcb_refcount+0x88>)
 801529e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80152a0:	2300      	movs	r3, #0
}
 80152a2:	4618      	mov	r0, r3
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	20008b28 	.word	0x20008b28
 80152ac:	20008b24 	.word	0x20008b24
 80152b0:	0801fecc 	.word	0x0801fecc
 80152b4:	0801ff04 	.word	0x0801ff04
 80152b8:	0801ff2c 	.word	0x0801ff2c
 80152bc:	08020b88 	.word	0x08020b88
 80152c0:	08016b59 	.word	0x08016b59

080152c4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80152c8:	4b0e      	ldr	r3, [pc, #56]	; (8015304 <dhcp_dec_pcb_refcount+0x40>)
 80152ca:	781b      	ldrb	r3, [r3, #0]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d105      	bne.n	80152dc <dhcp_dec_pcb_refcount+0x18>
 80152d0:	4b0d      	ldr	r3, [pc, #52]	; (8015308 <dhcp_dec_pcb_refcount+0x44>)
 80152d2:	22ff      	movs	r2, #255	; 0xff
 80152d4:	490d      	ldr	r1, [pc, #52]	; (801530c <dhcp_dec_pcb_refcount+0x48>)
 80152d6:	480e      	ldr	r0, [pc, #56]	; (8015310 <dhcp_dec_pcb_refcount+0x4c>)
 80152d8:	f006 fb1a 	bl	801b910 <iprintf>
  dhcp_pcb_refcount--;
 80152dc:	4b09      	ldr	r3, [pc, #36]	; (8015304 <dhcp_dec_pcb_refcount+0x40>)
 80152de:	781b      	ldrb	r3, [r3, #0]
 80152e0:	3b01      	subs	r3, #1
 80152e2:	b2da      	uxtb	r2, r3
 80152e4:	4b07      	ldr	r3, [pc, #28]	; (8015304 <dhcp_dec_pcb_refcount+0x40>)
 80152e6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80152e8:	4b06      	ldr	r3, [pc, #24]	; (8015304 <dhcp_dec_pcb_refcount+0x40>)
 80152ea:	781b      	ldrb	r3, [r3, #0]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d107      	bne.n	8015300 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80152f0:	4b08      	ldr	r3, [pc, #32]	; (8015314 <dhcp_dec_pcb_refcount+0x50>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7ff fefd 	bl	80150f4 <udp_remove>
    dhcp_pcb = NULL;
 80152fa:	4b06      	ldr	r3, [pc, #24]	; (8015314 <dhcp_dec_pcb_refcount+0x50>)
 80152fc:	2200      	movs	r2, #0
 80152fe:	601a      	str	r2, [r3, #0]
  }
}
 8015300:	bf00      	nop
 8015302:	bd80      	pop	{r7, pc}
 8015304:	20008b28 	.word	0x20008b28
 8015308:	0801fecc 	.word	0x0801fecc
 801530c:	0801ff54 	.word	0x0801ff54
 8015310:	0801ff2c 	.word	0x0801ff2c
 8015314:	20008b24 	.word	0x20008b24

08015318 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b084      	sub	sp, #16
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015324:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015326:	210c      	movs	r1, #12
 8015328:	68f8      	ldr	r0, [r7, #12]
 801532a:	f001 f857 	bl	80163dc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801532e:	4b06      	ldr	r3, [pc, #24]	; (8015348 <dhcp_handle_nak+0x30>)
 8015330:	4a05      	ldr	r2, [pc, #20]	; (8015348 <dhcp_handle_nak+0x30>)
 8015332:	4905      	ldr	r1, [pc, #20]	; (8015348 <dhcp_handle_nak+0x30>)
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f7f8 f857 	bl	800d3e8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	f000 fc4a 	bl	8015bd4 <dhcp_discover>
}
 8015340:	bf00      	nop
 8015342:	3710      	adds	r7, #16
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}
 8015348:	08020b88 	.word	0x08020b88

0801534c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015358:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801535a:	2108      	movs	r1, #8
 801535c:	68f8      	ldr	r0, [r7, #12]
 801535e:	f001 f83d 	bl	80163dc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	331c      	adds	r3, #28
 8015366:	2200      	movs	r2, #0
 8015368:	4619      	mov	r1, r3
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f002 fb3e 	bl	80179ec <etharp_query>
 8015370:	4603      	mov	r3, r0
 8015372:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	799b      	ldrb	r3, [r3, #6]
 8015378:	2bff      	cmp	r3, #255	; 0xff
 801537a:	d005      	beq.n	8015388 <dhcp_check+0x3c>
    dhcp->tries++;
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	799b      	ldrb	r3, [r3, #6]
 8015380:	3301      	adds	r3, #1
 8015382:	b2da      	uxtb	r2, r3
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015388:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801538c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801538e:	893b      	ldrh	r3, [r7, #8]
 8015390:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015394:	4a06      	ldr	r2, [pc, #24]	; (80153b0 <dhcp_check+0x64>)
 8015396:	fb82 1203 	smull	r1, r2, r2, r3
 801539a:	1152      	asrs	r2, r2, #5
 801539c:	17db      	asrs	r3, r3, #31
 801539e:	1ad3      	subs	r3, r2, r3
 80153a0:	b29a      	uxth	r2, r3
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80153a6:	bf00      	nop
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}
 80153ae:	bf00      	nop
 80153b0:	10624dd3 	.word	0x10624dd3

080153b4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b084      	sub	sp, #16
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80153c4:	4b0c      	ldr	r3, [pc, #48]	; (80153f8 <dhcp_handle_offer+0x44>)
 80153c6:	789b      	ldrb	r3, [r3, #2]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d011      	beq.n	80153f0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	2200      	movs	r2, #0
 80153d0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80153d2:	4b0a      	ldr	r3, [pc, #40]	; (80153fc <dhcp_handle_offer+0x48>)
 80153d4:	689b      	ldr	r3, [r3, #8]
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7f7 f971 	bl	800c6be <lwip_htonl>
 80153dc:	4602      	mov	r2, r0
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	691a      	ldr	r2, [r3, #16]
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	f000 f808 	bl	8015400 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80153f0:	bf00      	nop
 80153f2:	3710      	adds	r7, #16
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}
 80153f8:	2001067c 	.word	0x2001067c
 80153fc:	20010684 	.word	0x20010684

08015400 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015400:	b5b0      	push	{r4, r5, r7, lr}
 8015402:	b08a      	sub	sp, #40	; 0x28
 8015404:	af02      	add	r7, sp, #8
 8015406:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d109      	bne.n	8015422 <dhcp_select+0x22>
 801540e:	4b71      	ldr	r3, [pc, #452]	; (80155d4 <dhcp_select+0x1d4>)
 8015410:	f240 1277 	movw	r2, #375	; 0x177
 8015414:	4970      	ldr	r1, [pc, #448]	; (80155d8 <dhcp_select+0x1d8>)
 8015416:	4871      	ldr	r0, [pc, #452]	; (80155dc <dhcp_select+0x1dc>)
 8015418:	f006 fa7a 	bl	801b910 <iprintf>
 801541c:	f06f 030f 	mvn.w	r3, #15
 8015420:	e0d3      	b.n	80155ca <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015426:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015428:	69bb      	ldr	r3, [r7, #24]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d109      	bne.n	8015442 <dhcp_select+0x42>
 801542e:	4b69      	ldr	r3, [pc, #420]	; (80155d4 <dhcp_select+0x1d4>)
 8015430:	f240 1279 	movw	r2, #377	; 0x179
 8015434:	496a      	ldr	r1, [pc, #424]	; (80155e0 <dhcp_select+0x1e0>)
 8015436:	4869      	ldr	r0, [pc, #420]	; (80155dc <dhcp_select+0x1dc>)
 8015438:	f006 fa6a 	bl	801b910 <iprintf>
 801543c:	f06f 0305 	mvn.w	r3, #5
 8015440:	e0c3      	b.n	80155ca <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015442:	2101      	movs	r1, #1
 8015444:	69b8      	ldr	r0, [r7, #24]
 8015446:	f000 ffc9 	bl	80163dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801544a:	f107 030c 	add.w	r3, r7, #12
 801544e:	2203      	movs	r2, #3
 8015450:	69b9      	ldr	r1, [r7, #24]
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f001 fc4e 	bl	8016cf4 <dhcp_create_msg>
 8015458:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	2b00      	cmp	r3, #0
 801545e:	f000 8085 	beq.w	801556c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015468:	89b8      	ldrh	r0, [r7, #12]
 801546a:	693b      	ldr	r3, [r7, #16]
 801546c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015470:	2302      	movs	r3, #2
 8015472:	2239      	movs	r2, #57	; 0x39
 8015474:	f000 ffcc 	bl	8016410 <dhcp_option>
 8015478:	4603      	mov	r3, r0
 801547a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801547c:	89b8      	ldrh	r0, [r7, #12]
 801547e:	693b      	ldr	r3, [r7, #16]
 8015480:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015488:	461a      	mov	r2, r3
 801548a:	f001 f81b 	bl	80164c4 <dhcp_option_short>
 801548e:	4603      	mov	r3, r0
 8015490:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015492:	89b8      	ldrh	r0, [r7, #12]
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801549a:	2304      	movs	r3, #4
 801549c:	2232      	movs	r2, #50	; 0x32
 801549e:	f000 ffb7 	bl	8016410 <dhcp_option>
 80154a2:	4603      	mov	r3, r0
 80154a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80154a6:	89bc      	ldrh	r4, [r7, #12]
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80154ae:	69bb      	ldr	r3, [r7, #24]
 80154b0:	69db      	ldr	r3, [r3, #28]
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7f7 f903 	bl	800c6be <lwip_htonl>
 80154b8:	4603      	mov	r3, r0
 80154ba:	461a      	mov	r2, r3
 80154bc:	4629      	mov	r1, r5
 80154be:	4620      	mov	r0, r4
 80154c0:	f001 f832 	bl	8016528 <dhcp_option_long>
 80154c4:	4603      	mov	r3, r0
 80154c6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80154c8:	89b8      	ldrh	r0, [r7, #12]
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154d0:	2304      	movs	r3, #4
 80154d2:	2236      	movs	r2, #54	; 0x36
 80154d4:	f000 ff9c 	bl	8016410 <dhcp_option>
 80154d8:	4603      	mov	r3, r0
 80154da:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80154dc:	89bc      	ldrh	r4, [r7, #12]
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80154e4:	69bb      	ldr	r3, [r7, #24]
 80154e6:	699b      	ldr	r3, [r3, #24]
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7f7 f8e8 	bl	800c6be <lwip_htonl>
 80154ee:	4603      	mov	r3, r0
 80154f0:	461a      	mov	r2, r3
 80154f2:	4629      	mov	r1, r5
 80154f4:	4620      	mov	r0, r4
 80154f6:	f001 f817 	bl	8016528 <dhcp_option_long>
 80154fa:	4603      	mov	r3, r0
 80154fc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80154fe:	89b8      	ldrh	r0, [r7, #12]
 8015500:	693b      	ldr	r3, [r7, #16]
 8015502:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015506:	2303      	movs	r3, #3
 8015508:	2237      	movs	r2, #55	; 0x37
 801550a:	f000 ff81 	bl	8016410 <dhcp_option>
 801550e:	4603      	mov	r3, r0
 8015510:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015512:	2300      	movs	r3, #0
 8015514:	77bb      	strb	r3, [r7, #30]
 8015516:	e00e      	b.n	8015536 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015518:	89b8      	ldrh	r0, [r7, #12]
 801551a:	693b      	ldr	r3, [r7, #16]
 801551c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015520:	7fbb      	ldrb	r3, [r7, #30]
 8015522:	4a30      	ldr	r2, [pc, #192]	; (80155e4 <dhcp_select+0x1e4>)
 8015524:	5cd3      	ldrb	r3, [r2, r3]
 8015526:	461a      	mov	r2, r3
 8015528:	f000 ffa6 	bl	8016478 <dhcp_option_byte>
 801552c:	4603      	mov	r3, r0
 801552e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015530:	7fbb      	ldrb	r3, [r7, #30]
 8015532:	3301      	adds	r3, #1
 8015534:	77bb      	strb	r3, [r7, #30]
 8015536:	7fbb      	ldrb	r3, [r7, #30]
 8015538:	2b02      	cmp	r3, #2
 801553a:	d9ed      	bls.n	8015518 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801553c:	89b8      	ldrh	r0, [r7, #12]
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	33f0      	adds	r3, #240	; 0xf0
 8015542:	697a      	ldr	r2, [r7, #20]
 8015544:	4619      	mov	r1, r3
 8015546:	f001 fcab 	bl	8016ea0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801554a:	4b27      	ldr	r3, [pc, #156]	; (80155e8 <dhcp_select+0x1e8>)
 801554c:	6818      	ldr	r0, [r3, #0]
 801554e:	4b27      	ldr	r3, [pc, #156]	; (80155ec <dhcp_select+0x1ec>)
 8015550:	9301      	str	r3, [sp, #4]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	9300      	str	r3, [sp, #0]
 8015556:	2343      	movs	r3, #67	; 0x43
 8015558:	4a25      	ldr	r2, [pc, #148]	; (80155f0 <dhcp_select+0x1f0>)
 801555a:	6979      	ldr	r1, [r7, #20]
 801555c:	f7ff fba6 	bl	8014cac <udp_sendto_if_src>
 8015560:	4603      	mov	r3, r0
 8015562:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015564:	6978      	ldr	r0, [r7, #20]
 8015566:	f7f8 fc7f 	bl	800de68 <pbuf_free>
 801556a:	e001      	b.n	8015570 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801556c:	23ff      	movs	r3, #255	; 0xff
 801556e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015570:	69bb      	ldr	r3, [r7, #24]
 8015572:	799b      	ldrb	r3, [r3, #6]
 8015574:	2bff      	cmp	r3, #255	; 0xff
 8015576:	d005      	beq.n	8015584 <dhcp_select+0x184>
    dhcp->tries++;
 8015578:	69bb      	ldr	r3, [r7, #24]
 801557a:	799b      	ldrb	r3, [r3, #6]
 801557c:	3301      	adds	r3, #1
 801557e:	b2da      	uxtb	r2, r3
 8015580:	69bb      	ldr	r3, [r7, #24]
 8015582:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015584:	69bb      	ldr	r3, [r7, #24]
 8015586:	799b      	ldrb	r3, [r3, #6]
 8015588:	2b05      	cmp	r3, #5
 801558a:	d80d      	bhi.n	80155a8 <dhcp_select+0x1a8>
 801558c:	69bb      	ldr	r3, [r7, #24]
 801558e:	799b      	ldrb	r3, [r3, #6]
 8015590:	461a      	mov	r2, r3
 8015592:	2301      	movs	r3, #1
 8015594:	4093      	lsls	r3, r2
 8015596:	b29b      	uxth	r3, r3
 8015598:	461a      	mov	r2, r3
 801559a:	0152      	lsls	r2, r2, #5
 801559c:	1ad2      	subs	r2, r2, r3
 801559e:	0092      	lsls	r2, r2, #2
 80155a0:	4413      	add	r3, r2
 80155a2:	00db      	lsls	r3, r3, #3
 80155a4:	b29b      	uxth	r3, r3
 80155a6:	e001      	b.n	80155ac <dhcp_select+0x1ac>
 80155a8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80155ac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80155ae:	89fb      	ldrh	r3, [r7, #14]
 80155b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80155b4:	4a0f      	ldr	r2, [pc, #60]	; (80155f4 <dhcp_select+0x1f4>)
 80155b6:	fb82 1203 	smull	r1, r2, r2, r3
 80155ba:	1152      	asrs	r2, r2, #5
 80155bc:	17db      	asrs	r3, r3, #31
 80155be:	1ad3      	subs	r3, r2, r3
 80155c0:	b29a      	uxth	r2, r3
 80155c2:	69bb      	ldr	r3, [r7, #24]
 80155c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80155c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80155ca:	4618      	mov	r0, r3
 80155cc:	3720      	adds	r7, #32
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bdb0      	pop	{r4, r5, r7, pc}
 80155d2:	bf00      	nop
 80155d4:	0801fecc 	.word	0x0801fecc
 80155d8:	0801ff78 	.word	0x0801ff78
 80155dc:	0801ff2c 	.word	0x0801ff2c
 80155e0:	0801ff94 	.word	0x0801ff94
 80155e4:	2000001c 	.word	0x2000001c
 80155e8:	20008b24 	.word	0x20008b24
 80155ec:	08020b88 	.word	0x08020b88
 80155f0:	08020b8c 	.word	0x08020b8c
 80155f4:	10624dd3 	.word	0x10624dd3

080155f8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80155fe:	4b27      	ldr	r3, [pc, #156]	; (801569c <dhcp_coarse_tmr+0xa4>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	607b      	str	r3, [r7, #4]
 8015604:	e042      	b.n	801568c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801560a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d039      	beq.n	8015686 <dhcp_coarse_tmr+0x8e>
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	795b      	ldrb	r3, [r3, #5]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d035      	beq.n	8015686 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801561a:	683b      	ldr	r3, [r7, #0]
 801561c:	8a9b      	ldrh	r3, [r3, #20]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d012      	beq.n	8015648 <dhcp_coarse_tmr+0x50>
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	8a5b      	ldrh	r3, [r3, #18]
 8015626:	3301      	adds	r3, #1
 8015628:	b29a      	uxth	r2, r3
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	825a      	strh	r2, [r3, #18]
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	8a5a      	ldrh	r2, [r3, #18]
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	8a9b      	ldrh	r3, [r3, #20]
 8015636:	429a      	cmp	r2, r3
 8015638:	d106      	bne.n	8015648 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f000 fe34 	bl	80162a8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f000 f96b 	bl	801591c <dhcp_start>
 8015646:	e01e      	b.n	8015686 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	8a1b      	ldrh	r3, [r3, #16]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d00b      	beq.n	8015668 <dhcp_coarse_tmr+0x70>
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	8a1b      	ldrh	r3, [r3, #16]
 8015654:	1e5a      	subs	r2, r3, #1
 8015656:	b291      	uxth	r1, r2
 8015658:	683a      	ldr	r2, [r7, #0]
 801565a:	8211      	strh	r1, [r2, #16]
 801565c:	2b01      	cmp	r3, #1
 801565e:	d103      	bne.n	8015668 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015660:	6878      	ldr	r0, [r7, #4]
 8015662:	f000 f8c7 	bl	80157f4 <dhcp_t2_timeout>
 8015666:	e00e      	b.n	8015686 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	89db      	ldrh	r3, [r3, #14]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d00a      	beq.n	8015686 <dhcp_coarse_tmr+0x8e>
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	89db      	ldrh	r3, [r3, #14]
 8015674:	1e5a      	subs	r2, r3, #1
 8015676:	b291      	uxth	r1, r2
 8015678:	683a      	ldr	r2, [r7, #0]
 801567a:	81d1      	strh	r1, [r2, #14]
 801567c:	2b01      	cmp	r3, #1
 801567e:	d102      	bne.n	8015686 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f000 f888 	bl	8015796 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	607b      	str	r3, [r7, #4]
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d1b9      	bne.n	8015606 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015692:	bf00      	nop
 8015694:	bf00      	nop
 8015696:	3708      	adds	r7, #8
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}
 801569c:	20010650 	.word	0x20010650

080156a0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80156a6:	4b16      	ldr	r3, [pc, #88]	; (8015700 <dhcp_fine_tmr+0x60>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	607b      	str	r3, [r7, #4]
 80156ac:	e020      	b.n	80156f0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156b2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d017      	beq.n	80156ea <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	891b      	ldrh	r3, [r3, #8]
 80156be:	2b01      	cmp	r3, #1
 80156c0:	d906      	bls.n	80156d0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	891b      	ldrh	r3, [r3, #8]
 80156c6:	3b01      	subs	r3, #1
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	811a      	strh	r2, [r3, #8]
 80156ce:	e00c      	b.n	80156ea <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	891b      	ldrh	r3, [r3, #8]
 80156d4:	2b01      	cmp	r3, #1
 80156d6:	d108      	bne.n	80156ea <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	891b      	ldrh	r3, [r3, #8]
 80156dc:	3b01      	subs	r3, #1
 80156de:	b29a      	uxth	r2, r3
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80156e4:	6878      	ldr	r0, [r7, #4]
 80156e6:	f000 f80d 	bl	8015704 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	607b      	str	r3, [r7, #4]
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d1db      	bne.n	80156ae <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80156f6:	bf00      	nop
 80156f8:	bf00      	nop
 80156fa:	3708      	adds	r7, #8
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}
 8015700:	20010650 	.word	0x20010650

08015704 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b084      	sub	sp, #16
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015710:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	795b      	ldrb	r3, [r3, #5]
 8015716:	2b0c      	cmp	r3, #12
 8015718:	d003      	beq.n	8015722 <dhcp_timeout+0x1e>
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	795b      	ldrb	r3, [r3, #5]
 801571e:	2b06      	cmp	r3, #6
 8015720:	d103      	bne.n	801572a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015722:	6878      	ldr	r0, [r7, #4]
 8015724:	f000 fa56 	bl	8015bd4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015728:	e031      	b.n	801578e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	795b      	ldrb	r3, [r3, #5]
 801572e:	2b01      	cmp	r3, #1
 8015730:	d10e      	bne.n	8015750 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	799b      	ldrb	r3, [r3, #6]
 8015736:	2b05      	cmp	r3, #5
 8015738:	d803      	bhi.n	8015742 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f7ff fe60 	bl	8015400 <dhcp_select>
}
 8015740:	e025      	b.n	801578e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f000 fdb0 	bl	80162a8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f000 f8e7 	bl	801591c <dhcp_start>
}
 801574e:	e01e      	b.n	801578e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	795b      	ldrb	r3, [r3, #5]
 8015754:	2b08      	cmp	r3, #8
 8015756:	d10b      	bne.n	8015770 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	799b      	ldrb	r3, [r3, #6]
 801575c:	2b01      	cmp	r3, #1
 801575e:	d803      	bhi.n	8015768 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	f7ff fdf3 	bl	801534c <dhcp_check>
}
 8015766:	e012      	b.n	801578e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f000 fad5 	bl	8015d18 <dhcp_bind>
}
 801576e:	e00e      	b.n	801578e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	795b      	ldrb	r3, [r3, #5]
 8015774:	2b03      	cmp	r3, #3
 8015776:	d10a      	bne.n	801578e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	799b      	ldrb	r3, [r3, #6]
 801577c:	2b01      	cmp	r3, #1
 801577e:	d803      	bhi.n	8015788 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015780:	6878      	ldr	r0, [r7, #4]
 8015782:	f000 fcdb 	bl	801613c <dhcp_reboot>
}
 8015786:	e002      	b.n	801578e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	f000 fa23 	bl	8015bd4 <dhcp_discover>
}
 801578e:	bf00      	nop
 8015790:	3710      	adds	r7, #16
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}

08015796 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015796:	b580      	push	{r7, lr}
 8015798:	b084      	sub	sp, #16
 801579a:	af00      	add	r7, sp, #0
 801579c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157a2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	795b      	ldrb	r3, [r3, #5]
 80157a8:	2b01      	cmp	r3, #1
 80157aa:	d007      	beq.n	80157bc <dhcp_t1_timeout+0x26>
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	795b      	ldrb	r3, [r3, #5]
 80157b0:	2b0a      	cmp	r3, #10
 80157b2:	d003      	beq.n	80157bc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80157b8:	2b05      	cmp	r3, #5
 80157ba:	d117      	bne.n	80157ec <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80157bc:	6878      	ldr	r0, [r7, #4]
 80157be:	f000 fb85 	bl	8015ecc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	899b      	ldrh	r3, [r3, #12]
 80157c6:	461a      	mov	r2, r3
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	8a5b      	ldrh	r3, [r3, #18]
 80157cc:	1ad3      	subs	r3, r2, r3
 80157ce:	2b01      	cmp	r3, #1
 80157d0:	dd0c      	ble.n	80157ec <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	899b      	ldrh	r3, [r3, #12]
 80157d6:	461a      	mov	r2, r3
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	8a5b      	ldrh	r3, [r3, #18]
 80157dc:	1ad3      	subs	r3, r2, r3
 80157de:	2b00      	cmp	r3, #0
 80157e0:	da00      	bge.n	80157e4 <dhcp_t1_timeout+0x4e>
 80157e2:	3301      	adds	r3, #1
 80157e4:	105b      	asrs	r3, r3, #1
 80157e6:	b29a      	uxth	r2, r3
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80157ec:	bf00      	nop
 80157ee:	3710      	adds	r7, #16
 80157f0:	46bd      	mov	sp, r7
 80157f2:	bd80      	pop	{r7, pc}

080157f4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b084      	sub	sp, #16
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015800:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	795b      	ldrb	r3, [r3, #5]
 8015806:	2b01      	cmp	r3, #1
 8015808:	d00b      	beq.n	8015822 <dhcp_t2_timeout+0x2e>
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	795b      	ldrb	r3, [r3, #5]
 801580e:	2b0a      	cmp	r3, #10
 8015810:	d007      	beq.n	8015822 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015816:	2b05      	cmp	r3, #5
 8015818:	d003      	beq.n	8015822 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	795b      	ldrb	r3, [r3, #5]
 801581e:	2b04      	cmp	r3, #4
 8015820:	d117      	bne.n	8015852 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f000 fbee 	bl	8016004 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	8a9b      	ldrh	r3, [r3, #20]
 801582c:	461a      	mov	r2, r3
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	8a5b      	ldrh	r3, [r3, #18]
 8015832:	1ad3      	subs	r3, r2, r3
 8015834:	2b01      	cmp	r3, #1
 8015836:	dd0c      	ble.n	8015852 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	8a9b      	ldrh	r3, [r3, #20]
 801583c:	461a      	mov	r2, r3
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	8a5b      	ldrh	r3, [r3, #18]
 8015842:	1ad3      	subs	r3, r2, r3
 8015844:	2b00      	cmp	r3, #0
 8015846:	da00      	bge.n	801584a <dhcp_t2_timeout+0x56>
 8015848:	3301      	adds	r3, #1
 801584a:	105b      	asrs	r3, r3, #1
 801584c:	b29a      	uxth	r2, r3
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8015852:	bf00      	nop
 8015854:	3710      	adds	r7, #16
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}
	...

0801585c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b084      	sub	sp, #16
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801586a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	2200      	movs	r2, #0
 8015870:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	2200      	movs	r2, #0
 8015876:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015878:	4b26      	ldr	r3, [pc, #152]	; (8015914 <dhcp_handle_ack+0xb8>)
 801587a:	78db      	ldrb	r3, [r3, #3]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d003      	beq.n	8015888 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015880:	4b25      	ldr	r3, [pc, #148]	; (8015918 <dhcp_handle_ack+0xbc>)
 8015882:	68da      	ldr	r2, [r3, #12]
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015888:	4b22      	ldr	r3, [pc, #136]	; (8015914 <dhcp_handle_ack+0xb8>)
 801588a:	791b      	ldrb	r3, [r3, #4]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d004      	beq.n	801589a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015890:	4b21      	ldr	r3, [pc, #132]	; (8015918 <dhcp_handle_ack+0xbc>)
 8015892:	691a      	ldr	r2, [r3, #16]
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	62da      	str	r2, [r3, #44]	; 0x2c
 8015898:	e004      	b.n	80158a4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801589e:	085a      	lsrs	r2, r3, #1
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80158a4:	4b1b      	ldr	r3, [pc, #108]	; (8015914 <dhcp_handle_ack+0xb8>)
 80158a6:	795b      	ldrb	r3, [r3, #5]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d004      	beq.n	80158b6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80158ac:	4b1a      	ldr	r3, [pc, #104]	; (8015918 <dhcp_handle_ack+0xbc>)
 80158ae:	695a      	ldr	r2, [r3, #20]
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	631a      	str	r2, [r3, #48]	; 0x30
 80158b4:	e007      	b.n	80158c6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80158ba:	4613      	mov	r3, r2
 80158bc:	00db      	lsls	r3, r3, #3
 80158be:	1a9b      	subs	r3, r3, r2
 80158c0:	08da      	lsrs	r2, r3, #3
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	691a      	ldr	r2, [r3, #16]
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80158ce:	4b11      	ldr	r3, [pc, #68]	; (8015914 <dhcp_handle_ack+0xb8>)
 80158d0:	799b      	ldrb	r3, [r3, #6]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d00b      	beq.n	80158ee <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80158d6:	4b10      	ldr	r3, [pc, #64]	; (8015918 <dhcp_handle_ack+0xbc>)
 80158d8:	699b      	ldr	r3, [r3, #24]
 80158da:	4618      	mov	r0, r3
 80158dc:	f7f6 feef 	bl	800c6be <lwip_htonl>
 80158e0:	4602      	mov	r2, r0
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	2201      	movs	r2, #1
 80158ea:	71da      	strb	r2, [r3, #7]
 80158ec:	e002      	b.n	80158f4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	2200      	movs	r2, #0
 80158f2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80158f4:	4b07      	ldr	r3, [pc, #28]	; (8015914 <dhcp_handle_ack+0xb8>)
 80158f6:	79db      	ldrb	r3, [r3, #7]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d007      	beq.n	801590c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80158fc:	4b06      	ldr	r3, [pc, #24]	; (8015918 <dhcp_handle_ack+0xbc>)
 80158fe:	69db      	ldr	r3, [r3, #28]
 8015900:	4618      	mov	r0, r3
 8015902:	f7f6 fedc 	bl	800c6be <lwip_htonl>
 8015906:	4602      	mov	r2, r0
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801590c:	bf00      	nop
 801590e:	3710      	adds	r7, #16
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}
 8015914:	2001067c 	.word	0x2001067c
 8015918:	20010684 	.word	0x20010684

0801591c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b084      	sub	sp, #16
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d109      	bne.n	801593e <dhcp_start+0x22>
 801592a:	4b37      	ldr	r3, [pc, #220]	; (8015a08 <dhcp_start+0xec>)
 801592c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015930:	4936      	ldr	r1, [pc, #216]	; (8015a0c <dhcp_start+0xf0>)
 8015932:	4837      	ldr	r0, [pc, #220]	; (8015a10 <dhcp_start+0xf4>)
 8015934:	f005 ffec 	bl	801b910 <iprintf>
 8015938:	f06f 030f 	mvn.w	r3, #15
 801593c:	e060      	b.n	8015a00 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015944:	f003 0301 	and.w	r3, r3, #1
 8015948:	2b00      	cmp	r3, #0
 801594a:	d109      	bne.n	8015960 <dhcp_start+0x44>
 801594c:	4b2e      	ldr	r3, [pc, #184]	; (8015a08 <dhcp_start+0xec>)
 801594e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8015952:	4930      	ldr	r1, [pc, #192]	; (8015a14 <dhcp_start+0xf8>)
 8015954:	482e      	ldr	r0, [pc, #184]	; (8015a10 <dhcp_start+0xf4>)
 8015956:	f005 ffdb 	bl	801b910 <iprintf>
 801595a:	f06f 030f 	mvn.w	r3, #15
 801595e:	e04f      	b.n	8015a00 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015964:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801596a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801596e:	d202      	bcs.n	8015976 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015974:	e044      	b.n	8015a00 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d10d      	bne.n	8015998 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801597c:	2034      	movs	r0, #52	; 0x34
 801597e:	f7f7 f9bd 	bl	800ccfc <mem_malloc>
 8015982:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d102      	bne.n	8015990 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801598a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801598e:	e037      	b.n	8015a00 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	68fa      	ldr	r2, [r7, #12]
 8015994:	625a      	str	r2, [r3, #36]	; 0x24
 8015996:	e005      	b.n	80159a4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	791b      	ldrb	r3, [r3, #4]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d001      	beq.n	80159a4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80159a0:	f7ff fc90 	bl	80152c4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80159a4:	2234      	movs	r2, #52	; 0x34
 80159a6:	2100      	movs	r1, #0
 80159a8:	68f8      	ldr	r0, [r7, #12]
 80159aa:	f005 ffa9 	bl	801b900 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80159ae:	f7ff fc37 	bl	8015220 <dhcp_inc_pcb_refcount>
 80159b2:	4603      	mov	r3, r0
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d002      	beq.n	80159be <dhcp_start+0xa2>
    return ERR_MEM;
 80159b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159bc:	e020      	b.n	8015a00 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	2201      	movs	r2, #1
 80159c2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159ca:	f003 0304 	and.w	r3, r3, #4
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d105      	bne.n	80159de <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80159d2:	2102      	movs	r1, #2
 80159d4:	68f8      	ldr	r0, [r7, #12]
 80159d6:	f000 fd01 	bl	80163dc <dhcp_set_state>
    return ERR_OK;
 80159da:	2300      	movs	r3, #0
 80159dc:	e010      	b.n	8015a00 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f000 f8f8 	bl	8015bd4 <dhcp_discover>
 80159e4:	4603      	mov	r3, r0
 80159e6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80159e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d005      	beq.n	80159fc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80159f0:	6878      	ldr	r0, [r7, #4]
 80159f2:	f000 fc59 	bl	80162a8 <dhcp_release_and_stop>
    return ERR_MEM;
 80159f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159fa:	e001      	b.n	8015a00 <dhcp_start+0xe4>
  }
  return result;
 80159fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015a00:	4618      	mov	r0, r3
 8015a02:	3710      	adds	r7, #16
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}
 8015a08:	0801fecc 	.word	0x0801fecc
 8015a0c:	0801ffb0 	.word	0x0801ffb0
 8015a10:	0801ff2c 	.word	0x0801ff2c
 8015a14:	0801fff4 	.word	0x0801fff4

08015a18 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b084      	sub	sp, #16
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a24:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d025      	beq.n	8015a78 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	795b      	ldrb	r3, [r3, #5]
 8015a30:	2b0a      	cmp	r3, #10
 8015a32:	d008      	beq.n	8015a46 <dhcp_network_changed+0x2e>
 8015a34:	2b0a      	cmp	r3, #10
 8015a36:	dc0d      	bgt.n	8015a54 <dhcp_network_changed+0x3c>
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d01f      	beq.n	8015a7c <dhcp_network_changed+0x64>
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	db09      	blt.n	8015a54 <dhcp_network_changed+0x3c>
 8015a40:	3b03      	subs	r3, #3
 8015a42:	2b02      	cmp	r3, #2
 8015a44:	d806      	bhi.n	8015a54 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f000 fb75 	bl	801613c <dhcp_reboot>
      break;
 8015a52:	e014      	b.n	8015a7e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	795b      	ldrb	r3, [r3, #5]
 8015a58:	2b0c      	cmp	r3, #12
 8015a5a:	d906      	bls.n	8015a6a <dhcp_network_changed+0x52>
 8015a5c:	4b09      	ldr	r3, [pc, #36]	; (8015a84 <dhcp_network_changed+0x6c>)
 8015a5e:	f240 326d 	movw	r2, #877	; 0x36d
 8015a62:	4909      	ldr	r1, [pc, #36]	; (8015a88 <dhcp_network_changed+0x70>)
 8015a64:	4809      	ldr	r0, [pc, #36]	; (8015a8c <dhcp_network_changed+0x74>)
 8015a66:	f005 ff53 	bl	801b910 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f000 f8af 	bl	8015bd4 <dhcp_discover>
      break;
 8015a76:	e002      	b.n	8015a7e <dhcp_network_changed+0x66>
    return;
 8015a78:	bf00      	nop
 8015a7a:	e000      	b.n	8015a7e <dhcp_network_changed+0x66>
      break;
 8015a7c:	bf00      	nop
  }
}
 8015a7e:	3710      	adds	r7, #16
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	0801fecc 	.word	0x0801fecc
 8015a88:	08020018 	.word	0x08020018
 8015a8c:	0801ff2c 	.word	0x0801ff2c

08015a90 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b084      	sub	sp, #16
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d107      	bne.n	8015ab0 <dhcp_arp_reply+0x20>
 8015aa0:	4b0e      	ldr	r3, [pc, #56]	; (8015adc <dhcp_arp_reply+0x4c>)
 8015aa2:	f240 328b 	movw	r2, #907	; 0x38b
 8015aa6:	490e      	ldr	r1, [pc, #56]	; (8015ae0 <dhcp_arp_reply+0x50>)
 8015aa8:	480e      	ldr	r0, [pc, #56]	; (8015ae4 <dhcp_arp_reply+0x54>)
 8015aaa:	f005 ff31 	bl	801b910 <iprintf>
 8015aae:	e012      	b.n	8015ad6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ab4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d00c      	beq.n	8015ad6 <dhcp_arp_reply+0x46>
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	795b      	ldrb	r3, [r3, #5]
 8015ac0:	2b08      	cmp	r3, #8
 8015ac2:	d108      	bne.n	8015ad6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	681a      	ldr	r2, [r3, #0]
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	69db      	ldr	r3, [r3, #28]
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d102      	bne.n	8015ad6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f000 f809 	bl	8015ae8 <dhcp_decline>
    }
  }
}
 8015ad6:	3710      	adds	r7, #16
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}
 8015adc:	0801fecc 	.word	0x0801fecc
 8015ae0:	0801ffb0 	.word	0x0801ffb0
 8015ae4:	0801ff2c 	.word	0x0801ff2c

08015ae8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015ae8:	b5b0      	push	{r4, r5, r7, lr}
 8015aea:	b08a      	sub	sp, #40	; 0x28
 8015aec:	af02      	add	r7, sp, #8
 8015aee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015af4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015af6:	210c      	movs	r1, #12
 8015af8:	69b8      	ldr	r0, [r7, #24]
 8015afa:	f000 fc6f 	bl	80163dc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8015afe:	f107 030c 	add.w	r3, r7, #12
 8015b02:	2204      	movs	r2, #4
 8015b04:	69b9      	ldr	r1, [r7, #24]
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f001 f8f4 	bl	8016cf4 <dhcp_create_msg>
 8015b0c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015b0e:	697b      	ldr	r3, [r7, #20]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d035      	beq.n	8015b80 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	685b      	ldr	r3, [r3, #4]
 8015b18:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015b1a:	89b8      	ldrh	r0, [r7, #12]
 8015b1c:	693b      	ldr	r3, [r7, #16]
 8015b1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b22:	2304      	movs	r3, #4
 8015b24:	2232      	movs	r2, #50	; 0x32
 8015b26:	f000 fc73 	bl	8016410 <dhcp_option>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015b2e:	89bc      	ldrh	r4, [r7, #12]
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015b36:	69bb      	ldr	r3, [r7, #24]
 8015b38:	69db      	ldr	r3, [r3, #28]
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7f6 fdbf 	bl	800c6be <lwip_htonl>
 8015b40:	4603      	mov	r3, r0
 8015b42:	461a      	mov	r2, r3
 8015b44:	4629      	mov	r1, r5
 8015b46:	4620      	mov	r0, r4
 8015b48:	f000 fcee 	bl	8016528 <dhcp_option_long>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015b50:	89b8      	ldrh	r0, [r7, #12]
 8015b52:	693b      	ldr	r3, [r7, #16]
 8015b54:	33f0      	adds	r3, #240	; 0xf0
 8015b56:	697a      	ldr	r2, [r7, #20]
 8015b58:	4619      	mov	r1, r3
 8015b5a:	f001 f9a1 	bl	8016ea0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015b5e:	4b19      	ldr	r3, [pc, #100]	; (8015bc4 <dhcp_decline+0xdc>)
 8015b60:	6818      	ldr	r0, [r3, #0]
 8015b62:	4b19      	ldr	r3, [pc, #100]	; (8015bc8 <dhcp_decline+0xe0>)
 8015b64:	9301      	str	r3, [sp, #4]
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	9300      	str	r3, [sp, #0]
 8015b6a:	2343      	movs	r3, #67	; 0x43
 8015b6c:	4a17      	ldr	r2, [pc, #92]	; (8015bcc <dhcp_decline+0xe4>)
 8015b6e:	6979      	ldr	r1, [r7, #20]
 8015b70:	f7ff f89c 	bl	8014cac <udp_sendto_if_src>
 8015b74:	4603      	mov	r3, r0
 8015b76:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015b78:	6978      	ldr	r0, [r7, #20]
 8015b7a:	f7f8 f975 	bl	800de68 <pbuf_free>
 8015b7e:	e001      	b.n	8015b84 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015b80:	23ff      	movs	r3, #255	; 0xff
 8015b82:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015b84:	69bb      	ldr	r3, [r7, #24]
 8015b86:	799b      	ldrb	r3, [r3, #6]
 8015b88:	2bff      	cmp	r3, #255	; 0xff
 8015b8a:	d005      	beq.n	8015b98 <dhcp_decline+0xb0>
    dhcp->tries++;
 8015b8c:	69bb      	ldr	r3, [r7, #24]
 8015b8e:	799b      	ldrb	r3, [r3, #6]
 8015b90:	3301      	adds	r3, #1
 8015b92:	b2da      	uxtb	r2, r3
 8015b94:	69bb      	ldr	r3, [r7, #24]
 8015b96:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015b98:	f242 7310 	movw	r3, #10000	; 0x2710
 8015b9c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015b9e:	89fb      	ldrh	r3, [r7, #14]
 8015ba0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015ba4:	4a0a      	ldr	r2, [pc, #40]	; (8015bd0 <dhcp_decline+0xe8>)
 8015ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8015baa:	1152      	asrs	r2, r2, #5
 8015bac:	17db      	asrs	r3, r3, #31
 8015bae:	1ad3      	subs	r3, r2, r3
 8015bb0:	b29a      	uxth	r2, r3
 8015bb2:	69bb      	ldr	r3, [r7, #24]
 8015bb4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015bb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	3720      	adds	r7, #32
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8015bc2:	bf00      	nop
 8015bc4:	20008b24 	.word	0x20008b24
 8015bc8:	08020b88 	.word	0x08020b88
 8015bcc:	08020b8c 	.word	0x08020b8c
 8015bd0:	10624dd3 	.word	0x10624dd3

08015bd4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b08a      	sub	sp, #40	; 0x28
 8015bd8:	af02      	add	r7, sp, #8
 8015bda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8015be2:	2300      	movs	r3, #0
 8015be4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015be6:	69bb      	ldr	r3, [r7, #24]
 8015be8:	2200      	movs	r2, #0
 8015bea:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015bec:	2106      	movs	r1, #6
 8015bee:	69b8      	ldr	r0, [r7, #24]
 8015bf0:	f000 fbf4 	bl	80163dc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015bf4:	f107 0308 	add.w	r3, r7, #8
 8015bf8:	2201      	movs	r2, #1
 8015bfa:	69b9      	ldr	r1, [r7, #24]
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f001 f879 	bl	8016cf4 <dhcp_create_msg>
 8015c02:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d04b      	beq.n	8015ca2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015c10:	8938      	ldrh	r0, [r7, #8]
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c18:	2302      	movs	r3, #2
 8015c1a:	2239      	movs	r2, #57	; 0x39
 8015c1c:	f000 fbf8 	bl	8016410 <dhcp_option>
 8015c20:	4603      	mov	r3, r0
 8015c22:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015c24:	8938      	ldrh	r0, [r7, #8]
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c30:	461a      	mov	r2, r3
 8015c32:	f000 fc47 	bl	80164c4 <dhcp_option_short>
 8015c36:	4603      	mov	r3, r0
 8015c38:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015c3a:	8938      	ldrh	r0, [r7, #8]
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c42:	2303      	movs	r3, #3
 8015c44:	2237      	movs	r2, #55	; 0x37
 8015c46:	f000 fbe3 	bl	8016410 <dhcp_option>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015c4e:	2300      	movs	r3, #0
 8015c50:	77fb      	strb	r3, [r7, #31]
 8015c52:	e00e      	b.n	8015c72 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015c54:	8938      	ldrh	r0, [r7, #8]
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c5c:	7ffb      	ldrb	r3, [r7, #31]
 8015c5e:	4a29      	ldr	r2, [pc, #164]	; (8015d04 <dhcp_discover+0x130>)
 8015c60:	5cd3      	ldrb	r3, [r2, r3]
 8015c62:	461a      	mov	r2, r3
 8015c64:	f000 fc08 	bl	8016478 <dhcp_option_byte>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015c6c:	7ffb      	ldrb	r3, [r7, #31]
 8015c6e:	3301      	adds	r3, #1
 8015c70:	77fb      	strb	r3, [r7, #31]
 8015c72:	7ffb      	ldrb	r3, [r7, #31]
 8015c74:	2b02      	cmp	r3, #2
 8015c76:	d9ed      	bls.n	8015c54 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015c78:	8938      	ldrh	r0, [r7, #8]
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	33f0      	adds	r3, #240	; 0xf0
 8015c7e:	693a      	ldr	r2, [r7, #16]
 8015c80:	4619      	mov	r1, r3
 8015c82:	f001 f90d 	bl	8016ea0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015c86:	4b20      	ldr	r3, [pc, #128]	; (8015d08 <dhcp_discover+0x134>)
 8015c88:	6818      	ldr	r0, [r3, #0]
 8015c8a:	4b20      	ldr	r3, [pc, #128]	; (8015d0c <dhcp_discover+0x138>)
 8015c8c:	9301      	str	r3, [sp, #4]
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	9300      	str	r3, [sp, #0]
 8015c92:	2343      	movs	r3, #67	; 0x43
 8015c94:	4a1e      	ldr	r2, [pc, #120]	; (8015d10 <dhcp_discover+0x13c>)
 8015c96:	6939      	ldr	r1, [r7, #16]
 8015c98:	f7ff f808 	bl	8014cac <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015c9c:	6938      	ldr	r0, [r7, #16]
 8015c9e:	f7f8 f8e3 	bl	800de68 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015ca2:	69bb      	ldr	r3, [r7, #24]
 8015ca4:	799b      	ldrb	r3, [r3, #6]
 8015ca6:	2bff      	cmp	r3, #255	; 0xff
 8015ca8:	d005      	beq.n	8015cb6 <dhcp_discover+0xe2>
    dhcp->tries++;
 8015caa:	69bb      	ldr	r3, [r7, #24]
 8015cac:	799b      	ldrb	r3, [r3, #6]
 8015cae:	3301      	adds	r3, #1
 8015cb0:	b2da      	uxtb	r2, r3
 8015cb2:	69bb      	ldr	r3, [r7, #24]
 8015cb4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015cb6:	69bb      	ldr	r3, [r7, #24]
 8015cb8:	799b      	ldrb	r3, [r3, #6]
 8015cba:	2b05      	cmp	r3, #5
 8015cbc:	d80d      	bhi.n	8015cda <dhcp_discover+0x106>
 8015cbe:	69bb      	ldr	r3, [r7, #24]
 8015cc0:	799b      	ldrb	r3, [r3, #6]
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	4093      	lsls	r3, r2
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	461a      	mov	r2, r3
 8015ccc:	0152      	lsls	r2, r2, #5
 8015cce:	1ad2      	subs	r2, r2, r3
 8015cd0:	0092      	lsls	r2, r2, #2
 8015cd2:	4413      	add	r3, r2
 8015cd4:	00db      	lsls	r3, r3, #3
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	e001      	b.n	8015cde <dhcp_discover+0x10a>
 8015cda:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015cde:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015ce0:	897b      	ldrh	r3, [r7, #10]
 8015ce2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015ce6:	4a0b      	ldr	r2, [pc, #44]	; (8015d14 <dhcp_discover+0x140>)
 8015ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8015cec:	1152      	asrs	r2, r2, #5
 8015cee:	17db      	asrs	r3, r3, #31
 8015cf0:	1ad3      	subs	r3, r2, r3
 8015cf2:	b29a      	uxth	r2, r3
 8015cf4:	69bb      	ldr	r3, [r7, #24]
 8015cf6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3720      	adds	r7, #32
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	2000001c 	.word	0x2000001c
 8015d08:	20008b24 	.word	0x20008b24
 8015d0c:	08020b88 	.word	0x08020b88
 8015d10:	08020b8c 	.word	0x08020b8c
 8015d14:	10624dd3 	.word	0x10624dd3

08015d18 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b088      	sub	sp, #32
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d107      	bne.n	8015d36 <dhcp_bind+0x1e>
 8015d26:	4b64      	ldr	r3, [pc, #400]	; (8015eb8 <dhcp_bind+0x1a0>)
 8015d28:	f240 4215 	movw	r2, #1045	; 0x415
 8015d2c:	4963      	ldr	r1, [pc, #396]	; (8015ebc <dhcp_bind+0x1a4>)
 8015d2e:	4864      	ldr	r0, [pc, #400]	; (8015ec0 <dhcp_bind+0x1a8>)
 8015d30:	f005 fdee 	bl	801b910 <iprintf>
 8015d34:	e0bc      	b.n	8015eb0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d3a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015d3c:	69bb      	ldr	r3, [r7, #24]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d107      	bne.n	8015d52 <dhcp_bind+0x3a>
 8015d42:	4b5d      	ldr	r3, [pc, #372]	; (8015eb8 <dhcp_bind+0x1a0>)
 8015d44:	f240 4217 	movw	r2, #1047	; 0x417
 8015d48:	495e      	ldr	r1, [pc, #376]	; (8015ec4 <dhcp_bind+0x1ac>)
 8015d4a:	485d      	ldr	r0, [pc, #372]	; (8015ec0 <dhcp_bind+0x1a8>)
 8015d4c:	f005 fde0 	bl	801b910 <iprintf>
 8015d50:	e0ae      	b.n	8015eb0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015d52:	69bb      	ldr	r3, [r7, #24]
 8015d54:	2200      	movs	r2, #0
 8015d56:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015d58:	69bb      	ldr	r3, [r7, #24]
 8015d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d60:	d019      	beq.n	8015d96 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015d62:	69bb      	ldr	r3, [r7, #24]
 8015d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d66:	331e      	adds	r3, #30
 8015d68:	4a57      	ldr	r2, [pc, #348]	; (8015ec8 <dhcp_bind+0x1b0>)
 8015d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8015d6e:	095b      	lsrs	r3, r3, #5
 8015d70:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015d72:	69fb      	ldr	r3, [r7, #28]
 8015d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d78:	d302      	bcc.n	8015d80 <dhcp_bind+0x68>
      timeout = 0xffff;
 8015d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d7e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	b29a      	uxth	r2, r3
 8015d84:	69bb      	ldr	r3, [r7, #24]
 8015d86:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015d88:	69bb      	ldr	r3, [r7, #24]
 8015d8a:	8a9b      	ldrh	r3, [r3, #20]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d102      	bne.n	8015d96 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015d90:	69bb      	ldr	r3, [r7, #24]
 8015d92:	2201      	movs	r2, #1
 8015d94:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015d96:	69bb      	ldr	r3, [r7, #24]
 8015d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d9e:	d01d      	beq.n	8015ddc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015da0:	69bb      	ldr	r3, [r7, #24]
 8015da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015da4:	331e      	adds	r3, #30
 8015da6:	4a48      	ldr	r2, [pc, #288]	; (8015ec8 <dhcp_bind+0x1b0>)
 8015da8:	fba2 2303 	umull	r2, r3, r2, r3
 8015dac:	095b      	lsrs	r3, r3, #5
 8015dae:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015db0:	69fb      	ldr	r3, [r7, #28]
 8015db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015db6:	d302      	bcc.n	8015dbe <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015dbc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015dbe:	69fb      	ldr	r3, [r7, #28]
 8015dc0:	b29a      	uxth	r2, r3
 8015dc2:	69bb      	ldr	r3, [r7, #24]
 8015dc4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015dc6:	69bb      	ldr	r3, [r7, #24]
 8015dc8:	895b      	ldrh	r3, [r3, #10]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d102      	bne.n	8015dd4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015dce:	69bb      	ldr	r3, [r7, #24]
 8015dd0:	2201      	movs	r2, #1
 8015dd2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015dd4:	69bb      	ldr	r3, [r7, #24]
 8015dd6:	895a      	ldrh	r2, [r3, #10]
 8015dd8:	69bb      	ldr	r3, [r7, #24]
 8015dda:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015ddc:	69bb      	ldr	r3, [r7, #24]
 8015dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015de4:	d01d      	beq.n	8015e22 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015de6:	69bb      	ldr	r3, [r7, #24]
 8015de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dea:	331e      	adds	r3, #30
 8015dec:	4a36      	ldr	r2, [pc, #216]	; (8015ec8 <dhcp_bind+0x1b0>)
 8015dee:	fba2 2303 	umull	r2, r3, r2, r3
 8015df2:	095b      	lsrs	r3, r3, #5
 8015df4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015df6:	69fb      	ldr	r3, [r7, #28]
 8015df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015dfc:	d302      	bcc.n	8015e04 <dhcp_bind+0xec>
      timeout = 0xffff;
 8015dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e02:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015e04:	69fb      	ldr	r3, [r7, #28]
 8015e06:	b29a      	uxth	r2, r3
 8015e08:	69bb      	ldr	r3, [r7, #24]
 8015e0a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015e0c:	69bb      	ldr	r3, [r7, #24]
 8015e0e:	899b      	ldrh	r3, [r3, #12]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d102      	bne.n	8015e1a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015e14:	69bb      	ldr	r3, [r7, #24]
 8015e16:	2201      	movs	r2, #1
 8015e18:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015e1a:	69bb      	ldr	r3, [r7, #24]
 8015e1c:	899a      	ldrh	r2, [r3, #12]
 8015e1e:	69bb      	ldr	r3, [r7, #24]
 8015e20:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015e22:	69bb      	ldr	r3, [r7, #24]
 8015e24:	895a      	ldrh	r2, [r3, #10]
 8015e26:	69bb      	ldr	r3, [r7, #24]
 8015e28:	899b      	ldrh	r3, [r3, #12]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d306      	bcc.n	8015e3c <dhcp_bind+0x124>
 8015e2e:	69bb      	ldr	r3, [r7, #24]
 8015e30:	899b      	ldrh	r3, [r3, #12]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d002      	beq.n	8015e3c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8015e36:	69bb      	ldr	r3, [r7, #24]
 8015e38:	2200      	movs	r2, #0
 8015e3a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015e3c:	69bb      	ldr	r3, [r7, #24]
 8015e3e:	79db      	ldrb	r3, [r3, #7]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d003      	beq.n	8015e4c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015e44:	69bb      	ldr	r3, [r7, #24]
 8015e46:	6a1b      	ldr	r3, [r3, #32]
 8015e48:	613b      	str	r3, [r7, #16]
 8015e4a:	e014      	b.n	8015e76 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015e4c:	69bb      	ldr	r3, [r7, #24]
 8015e4e:	331c      	adds	r3, #28
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	db02      	blt.n	8015e62 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015e5c:	23ff      	movs	r3, #255	; 0xff
 8015e5e:	613b      	str	r3, [r7, #16]
 8015e60:	e009      	b.n	8015e76 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015e62:	7dfb      	ldrb	r3, [r7, #23]
 8015e64:	2bbf      	cmp	r3, #191	; 0xbf
 8015e66:	d903      	bls.n	8015e70 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015e68:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015e6c:	613b      	str	r3, [r7, #16]
 8015e6e:	e002      	b.n	8015e76 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e74:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015e76:	69bb      	ldr	r3, [r7, #24]
 8015e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e7a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d108      	bne.n	8015e94 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015e82:	69bb      	ldr	r3, [r7, #24]
 8015e84:	69da      	ldr	r2, [r3, #28]
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	4013      	ands	r3, r2
 8015e8a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015e92:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015e94:	210a      	movs	r1, #10
 8015e96:	69b8      	ldr	r0, [r7, #24]
 8015e98:	f000 faa0 	bl	80163dc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015e9c:	69bb      	ldr	r3, [r7, #24]
 8015e9e:	f103 011c 	add.w	r1, r3, #28
 8015ea2:	f107 030c 	add.w	r3, r7, #12
 8015ea6:	f107 0210 	add.w	r2, r7, #16
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f7f7 fa9c 	bl	800d3e8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015eb0:	3720      	adds	r7, #32
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}
 8015eb6:	bf00      	nop
 8015eb8:	0801fecc 	.word	0x0801fecc
 8015ebc:	0802002c 	.word	0x0802002c
 8015ec0:	0801ff2c 	.word	0x0801ff2c
 8015ec4:	08020048 	.word	0x08020048
 8015ec8:	88888889 	.word	0x88888889

08015ecc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b08a      	sub	sp, #40	; 0x28
 8015ed0:	af02      	add	r7, sp, #8
 8015ed2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015eda:	2105      	movs	r1, #5
 8015edc:	69b8      	ldr	r0, [r7, #24]
 8015ede:	f000 fa7d 	bl	80163dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015ee2:	f107 030c 	add.w	r3, r7, #12
 8015ee6:	2203      	movs	r2, #3
 8015ee8:	69b9      	ldr	r1, [r7, #24]
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f000 ff02 	bl	8016cf4 <dhcp_create_msg>
 8015ef0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015ef2:	697b      	ldr	r3, [r7, #20]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d04e      	beq.n	8015f96 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015ef8:	697b      	ldr	r3, [r7, #20]
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015efe:	89b8      	ldrh	r0, [r7, #12]
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f06:	2302      	movs	r3, #2
 8015f08:	2239      	movs	r2, #57	; 0x39
 8015f0a:	f000 fa81 	bl	8016410 <dhcp_option>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015f12:	89b8      	ldrh	r0, [r7, #12]
 8015f14:	693b      	ldr	r3, [r7, #16]
 8015f16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f1e:	461a      	mov	r2, r3
 8015f20:	f000 fad0 	bl	80164c4 <dhcp_option_short>
 8015f24:	4603      	mov	r3, r0
 8015f26:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015f28:	89b8      	ldrh	r0, [r7, #12]
 8015f2a:	693b      	ldr	r3, [r7, #16]
 8015f2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f30:	2303      	movs	r3, #3
 8015f32:	2237      	movs	r2, #55	; 0x37
 8015f34:	f000 fa6c 	bl	8016410 <dhcp_option>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	77bb      	strb	r3, [r7, #30]
 8015f40:	e00e      	b.n	8015f60 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015f42:	89b8      	ldrh	r0, [r7, #12]
 8015f44:	693b      	ldr	r3, [r7, #16]
 8015f46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f4a:	7fbb      	ldrb	r3, [r7, #30]
 8015f4c:	4a2a      	ldr	r2, [pc, #168]	; (8015ff8 <dhcp_renew+0x12c>)
 8015f4e:	5cd3      	ldrb	r3, [r2, r3]
 8015f50:	461a      	mov	r2, r3
 8015f52:	f000 fa91 	bl	8016478 <dhcp_option_byte>
 8015f56:	4603      	mov	r3, r0
 8015f58:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015f5a:	7fbb      	ldrb	r3, [r7, #30]
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	77bb      	strb	r3, [r7, #30]
 8015f60:	7fbb      	ldrb	r3, [r7, #30]
 8015f62:	2b02      	cmp	r3, #2
 8015f64:	d9ed      	bls.n	8015f42 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015f66:	89b8      	ldrh	r0, [r7, #12]
 8015f68:	693b      	ldr	r3, [r7, #16]
 8015f6a:	33f0      	adds	r3, #240	; 0xf0
 8015f6c:	697a      	ldr	r2, [r7, #20]
 8015f6e:	4619      	mov	r1, r3
 8015f70:	f000 ff96 	bl	8016ea0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015f74:	4b21      	ldr	r3, [pc, #132]	; (8015ffc <dhcp_renew+0x130>)
 8015f76:	6818      	ldr	r0, [r3, #0]
 8015f78:	69bb      	ldr	r3, [r7, #24]
 8015f7a:	f103 0218 	add.w	r2, r3, #24
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	9300      	str	r3, [sp, #0]
 8015f82:	2343      	movs	r3, #67	; 0x43
 8015f84:	6979      	ldr	r1, [r7, #20]
 8015f86:	f7fe fe1d 	bl	8014bc4 <udp_sendto_if>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015f8e:	6978      	ldr	r0, [r7, #20]
 8015f90:	f7f7 ff6a 	bl	800de68 <pbuf_free>
 8015f94:	e001      	b.n	8015f9a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015f96:	23ff      	movs	r3, #255	; 0xff
 8015f98:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015f9a:	69bb      	ldr	r3, [r7, #24]
 8015f9c:	799b      	ldrb	r3, [r3, #6]
 8015f9e:	2bff      	cmp	r3, #255	; 0xff
 8015fa0:	d005      	beq.n	8015fae <dhcp_renew+0xe2>
    dhcp->tries++;
 8015fa2:	69bb      	ldr	r3, [r7, #24]
 8015fa4:	799b      	ldrb	r3, [r3, #6]
 8015fa6:	3301      	adds	r3, #1
 8015fa8:	b2da      	uxtb	r2, r3
 8015faa:	69bb      	ldr	r3, [r7, #24]
 8015fac:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015fae:	69bb      	ldr	r3, [r7, #24]
 8015fb0:	799b      	ldrb	r3, [r3, #6]
 8015fb2:	2b09      	cmp	r3, #9
 8015fb4:	d80a      	bhi.n	8015fcc <dhcp_renew+0x100>
 8015fb6:	69bb      	ldr	r3, [r7, #24]
 8015fb8:	799b      	ldrb	r3, [r3, #6]
 8015fba:	b29b      	uxth	r3, r3
 8015fbc:	461a      	mov	r2, r3
 8015fbe:	0152      	lsls	r2, r2, #5
 8015fc0:	1ad2      	subs	r2, r2, r3
 8015fc2:	0092      	lsls	r2, r2, #2
 8015fc4:	4413      	add	r3, r2
 8015fc6:	011b      	lsls	r3, r3, #4
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	e001      	b.n	8015fd0 <dhcp_renew+0x104>
 8015fcc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015fd0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015fd2:	89fb      	ldrh	r3, [r7, #14]
 8015fd4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015fd8:	4a09      	ldr	r2, [pc, #36]	; (8016000 <dhcp_renew+0x134>)
 8015fda:	fb82 1203 	smull	r1, r2, r2, r3
 8015fde:	1152      	asrs	r2, r2, #5
 8015fe0:	17db      	asrs	r3, r3, #31
 8015fe2:	1ad3      	subs	r3, r2, r3
 8015fe4:	b29a      	uxth	r2, r3
 8015fe6:	69bb      	ldr	r3, [r7, #24]
 8015fe8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015fea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015fee:	4618      	mov	r0, r3
 8015ff0:	3720      	adds	r7, #32
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}
 8015ff6:	bf00      	nop
 8015ff8:	2000001c 	.word	0x2000001c
 8015ffc:	20008b24 	.word	0x20008b24
 8016000:	10624dd3 	.word	0x10624dd3

08016004 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b08a      	sub	sp, #40	; 0x28
 8016008:	af02      	add	r7, sp, #8
 801600a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016010:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016012:	2104      	movs	r1, #4
 8016014:	69b8      	ldr	r0, [r7, #24]
 8016016:	f000 f9e1 	bl	80163dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801601a:	f107 030c 	add.w	r3, r7, #12
 801601e:	2203      	movs	r2, #3
 8016020:	69b9      	ldr	r1, [r7, #24]
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f000 fe66 	bl	8016cf4 <dhcp_create_msg>
 8016028:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801602a:	697b      	ldr	r3, [r7, #20]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d04c      	beq.n	80160ca <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016030:	697b      	ldr	r3, [r7, #20]
 8016032:	685b      	ldr	r3, [r3, #4]
 8016034:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016036:	89b8      	ldrh	r0, [r7, #12]
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801603e:	2302      	movs	r3, #2
 8016040:	2239      	movs	r2, #57	; 0x39
 8016042:	f000 f9e5 	bl	8016410 <dhcp_option>
 8016046:	4603      	mov	r3, r0
 8016048:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801604a:	89b8      	ldrh	r0, [r7, #12]
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016056:	461a      	mov	r2, r3
 8016058:	f000 fa34 	bl	80164c4 <dhcp_option_short>
 801605c:	4603      	mov	r3, r0
 801605e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016060:	89b8      	ldrh	r0, [r7, #12]
 8016062:	693b      	ldr	r3, [r7, #16]
 8016064:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016068:	2303      	movs	r3, #3
 801606a:	2237      	movs	r2, #55	; 0x37
 801606c:	f000 f9d0 	bl	8016410 <dhcp_option>
 8016070:	4603      	mov	r3, r0
 8016072:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016074:	2300      	movs	r3, #0
 8016076:	77bb      	strb	r3, [r7, #30]
 8016078:	e00e      	b.n	8016098 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801607a:	89b8      	ldrh	r0, [r7, #12]
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016082:	7fbb      	ldrb	r3, [r7, #30]
 8016084:	4a29      	ldr	r2, [pc, #164]	; (801612c <dhcp_rebind+0x128>)
 8016086:	5cd3      	ldrb	r3, [r2, r3]
 8016088:	461a      	mov	r2, r3
 801608a:	f000 f9f5 	bl	8016478 <dhcp_option_byte>
 801608e:	4603      	mov	r3, r0
 8016090:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016092:	7fbb      	ldrb	r3, [r7, #30]
 8016094:	3301      	adds	r3, #1
 8016096:	77bb      	strb	r3, [r7, #30]
 8016098:	7fbb      	ldrb	r3, [r7, #30]
 801609a:	2b02      	cmp	r3, #2
 801609c:	d9ed      	bls.n	801607a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801609e:	89b8      	ldrh	r0, [r7, #12]
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	33f0      	adds	r3, #240	; 0xf0
 80160a4:	697a      	ldr	r2, [r7, #20]
 80160a6:	4619      	mov	r1, r3
 80160a8:	f000 fefa 	bl	8016ea0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80160ac:	4b20      	ldr	r3, [pc, #128]	; (8016130 <dhcp_rebind+0x12c>)
 80160ae:	6818      	ldr	r0, [r3, #0]
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	9300      	str	r3, [sp, #0]
 80160b4:	2343      	movs	r3, #67	; 0x43
 80160b6:	4a1f      	ldr	r2, [pc, #124]	; (8016134 <dhcp_rebind+0x130>)
 80160b8:	6979      	ldr	r1, [r7, #20]
 80160ba:	f7fe fd83 	bl	8014bc4 <udp_sendto_if>
 80160be:	4603      	mov	r3, r0
 80160c0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80160c2:	6978      	ldr	r0, [r7, #20]
 80160c4:	f7f7 fed0 	bl	800de68 <pbuf_free>
 80160c8:	e001      	b.n	80160ce <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80160ca:	23ff      	movs	r3, #255	; 0xff
 80160cc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80160ce:	69bb      	ldr	r3, [r7, #24]
 80160d0:	799b      	ldrb	r3, [r3, #6]
 80160d2:	2bff      	cmp	r3, #255	; 0xff
 80160d4:	d005      	beq.n	80160e2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80160d6:	69bb      	ldr	r3, [r7, #24]
 80160d8:	799b      	ldrb	r3, [r3, #6]
 80160da:	3301      	adds	r3, #1
 80160dc:	b2da      	uxtb	r2, r3
 80160de:	69bb      	ldr	r3, [r7, #24]
 80160e0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80160e2:	69bb      	ldr	r3, [r7, #24]
 80160e4:	799b      	ldrb	r3, [r3, #6]
 80160e6:	2b09      	cmp	r3, #9
 80160e8:	d80a      	bhi.n	8016100 <dhcp_rebind+0xfc>
 80160ea:	69bb      	ldr	r3, [r7, #24]
 80160ec:	799b      	ldrb	r3, [r3, #6]
 80160ee:	b29b      	uxth	r3, r3
 80160f0:	461a      	mov	r2, r3
 80160f2:	0152      	lsls	r2, r2, #5
 80160f4:	1ad2      	subs	r2, r2, r3
 80160f6:	0092      	lsls	r2, r2, #2
 80160f8:	4413      	add	r3, r2
 80160fa:	00db      	lsls	r3, r3, #3
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	e001      	b.n	8016104 <dhcp_rebind+0x100>
 8016100:	f242 7310 	movw	r3, #10000	; 0x2710
 8016104:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016106:	89fb      	ldrh	r3, [r7, #14]
 8016108:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801610c:	4a0a      	ldr	r2, [pc, #40]	; (8016138 <dhcp_rebind+0x134>)
 801610e:	fb82 1203 	smull	r1, r2, r2, r3
 8016112:	1152      	asrs	r2, r2, #5
 8016114:	17db      	asrs	r3, r3, #31
 8016116:	1ad3      	subs	r3, r2, r3
 8016118:	b29a      	uxth	r2, r3
 801611a:	69bb      	ldr	r3, [r7, #24]
 801611c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801611e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016122:	4618      	mov	r0, r3
 8016124:	3720      	adds	r7, #32
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	2000001c 	.word	0x2000001c
 8016130:	20008b24 	.word	0x20008b24
 8016134:	08020b8c 	.word	0x08020b8c
 8016138:	10624dd3 	.word	0x10624dd3

0801613c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801613c:	b5b0      	push	{r4, r5, r7, lr}
 801613e:	b08a      	sub	sp, #40	; 0x28
 8016140:	af02      	add	r7, sp, #8
 8016142:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016148:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801614a:	2103      	movs	r1, #3
 801614c:	69b8      	ldr	r0, [r7, #24]
 801614e:	f000 f945 	bl	80163dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016152:	f107 030c 	add.w	r3, r7, #12
 8016156:	2203      	movs	r2, #3
 8016158:	69b9      	ldr	r1, [r7, #24]
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	f000 fdca 	bl	8016cf4 <dhcp_create_msg>
 8016160:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016162:	697b      	ldr	r3, [r7, #20]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d066      	beq.n	8016236 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016168:	697b      	ldr	r3, [r7, #20]
 801616a:	685b      	ldr	r3, [r3, #4]
 801616c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801616e:	89b8      	ldrh	r0, [r7, #12]
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016176:	2302      	movs	r3, #2
 8016178:	2239      	movs	r2, #57	; 0x39
 801617a:	f000 f949 	bl	8016410 <dhcp_option>
 801617e:	4603      	mov	r3, r0
 8016180:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016182:	89b8      	ldrh	r0, [r7, #12]
 8016184:	693b      	ldr	r3, [r7, #16]
 8016186:	33f0      	adds	r3, #240	; 0xf0
 8016188:	f44f 7210 	mov.w	r2, #576	; 0x240
 801618c:	4619      	mov	r1, r3
 801618e:	f000 f999 	bl	80164c4 <dhcp_option_short>
 8016192:	4603      	mov	r3, r0
 8016194:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016196:	89b8      	ldrh	r0, [r7, #12]
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801619e:	2304      	movs	r3, #4
 80161a0:	2232      	movs	r2, #50	; 0x32
 80161a2:	f000 f935 	bl	8016410 <dhcp_option>
 80161a6:	4603      	mov	r3, r0
 80161a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80161aa:	89bc      	ldrh	r4, [r7, #12]
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80161b2:	69bb      	ldr	r3, [r7, #24]
 80161b4:	69db      	ldr	r3, [r3, #28]
 80161b6:	4618      	mov	r0, r3
 80161b8:	f7f6 fa81 	bl	800c6be <lwip_htonl>
 80161bc:	4603      	mov	r3, r0
 80161be:	461a      	mov	r2, r3
 80161c0:	4629      	mov	r1, r5
 80161c2:	4620      	mov	r0, r4
 80161c4:	f000 f9b0 	bl	8016528 <dhcp_option_long>
 80161c8:	4603      	mov	r3, r0
 80161ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80161cc:	89b8      	ldrh	r0, [r7, #12]
 80161ce:	693b      	ldr	r3, [r7, #16]
 80161d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80161d4:	2303      	movs	r3, #3
 80161d6:	2237      	movs	r2, #55	; 0x37
 80161d8:	f000 f91a 	bl	8016410 <dhcp_option>
 80161dc:	4603      	mov	r3, r0
 80161de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80161e0:	2300      	movs	r3, #0
 80161e2:	77bb      	strb	r3, [r7, #30]
 80161e4:	e00e      	b.n	8016204 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80161e6:	89b8      	ldrh	r0, [r7, #12]
 80161e8:	693b      	ldr	r3, [r7, #16]
 80161ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80161ee:	7fbb      	ldrb	r3, [r7, #30]
 80161f0:	4a29      	ldr	r2, [pc, #164]	; (8016298 <dhcp_reboot+0x15c>)
 80161f2:	5cd3      	ldrb	r3, [r2, r3]
 80161f4:	461a      	mov	r2, r3
 80161f6:	f000 f93f 	bl	8016478 <dhcp_option_byte>
 80161fa:	4603      	mov	r3, r0
 80161fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80161fe:	7fbb      	ldrb	r3, [r7, #30]
 8016200:	3301      	adds	r3, #1
 8016202:	77bb      	strb	r3, [r7, #30]
 8016204:	7fbb      	ldrb	r3, [r7, #30]
 8016206:	2b02      	cmp	r3, #2
 8016208:	d9ed      	bls.n	80161e6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801620a:	89b8      	ldrh	r0, [r7, #12]
 801620c:	693b      	ldr	r3, [r7, #16]
 801620e:	33f0      	adds	r3, #240	; 0xf0
 8016210:	697a      	ldr	r2, [r7, #20]
 8016212:	4619      	mov	r1, r3
 8016214:	f000 fe44 	bl	8016ea0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016218:	4b20      	ldr	r3, [pc, #128]	; (801629c <dhcp_reboot+0x160>)
 801621a:	6818      	ldr	r0, [r3, #0]
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	9300      	str	r3, [sp, #0]
 8016220:	2343      	movs	r3, #67	; 0x43
 8016222:	4a1f      	ldr	r2, [pc, #124]	; (80162a0 <dhcp_reboot+0x164>)
 8016224:	6979      	ldr	r1, [r7, #20]
 8016226:	f7fe fccd 	bl	8014bc4 <udp_sendto_if>
 801622a:	4603      	mov	r3, r0
 801622c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801622e:	6978      	ldr	r0, [r7, #20]
 8016230:	f7f7 fe1a 	bl	800de68 <pbuf_free>
 8016234:	e001      	b.n	801623a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016236:	23ff      	movs	r3, #255	; 0xff
 8016238:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801623a:	69bb      	ldr	r3, [r7, #24]
 801623c:	799b      	ldrb	r3, [r3, #6]
 801623e:	2bff      	cmp	r3, #255	; 0xff
 8016240:	d005      	beq.n	801624e <dhcp_reboot+0x112>
    dhcp->tries++;
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	799b      	ldrb	r3, [r3, #6]
 8016246:	3301      	adds	r3, #1
 8016248:	b2da      	uxtb	r2, r3
 801624a:	69bb      	ldr	r3, [r7, #24]
 801624c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801624e:	69bb      	ldr	r3, [r7, #24]
 8016250:	799b      	ldrb	r3, [r3, #6]
 8016252:	2b09      	cmp	r3, #9
 8016254:	d80a      	bhi.n	801626c <dhcp_reboot+0x130>
 8016256:	69bb      	ldr	r3, [r7, #24]
 8016258:	799b      	ldrb	r3, [r3, #6]
 801625a:	b29b      	uxth	r3, r3
 801625c:	461a      	mov	r2, r3
 801625e:	0152      	lsls	r2, r2, #5
 8016260:	1ad2      	subs	r2, r2, r3
 8016262:	0092      	lsls	r2, r2, #2
 8016264:	4413      	add	r3, r2
 8016266:	00db      	lsls	r3, r3, #3
 8016268:	b29b      	uxth	r3, r3
 801626a:	e001      	b.n	8016270 <dhcp_reboot+0x134>
 801626c:	f242 7310 	movw	r3, #10000	; 0x2710
 8016270:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016272:	89fb      	ldrh	r3, [r7, #14]
 8016274:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016278:	4a0a      	ldr	r2, [pc, #40]	; (80162a4 <dhcp_reboot+0x168>)
 801627a:	fb82 1203 	smull	r1, r2, r2, r3
 801627e:	1152      	asrs	r2, r2, #5
 8016280:	17db      	asrs	r3, r3, #31
 8016282:	1ad3      	subs	r3, r2, r3
 8016284:	b29a      	uxth	r2, r3
 8016286:	69bb      	ldr	r3, [r7, #24]
 8016288:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801628a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801628e:	4618      	mov	r0, r3
 8016290:	3720      	adds	r7, #32
 8016292:	46bd      	mov	sp, r7
 8016294:	bdb0      	pop	{r4, r5, r7, pc}
 8016296:	bf00      	nop
 8016298:	2000001c 	.word	0x2000001c
 801629c:	20008b24 	.word	0x20008b24
 80162a0:	08020b8c 	.word	0x08020b8c
 80162a4:	10624dd3 	.word	0x10624dd3

080162a8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80162a8:	b5b0      	push	{r4, r5, r7, lr}
 80162aa:	b08a      	sub	sp, #40	; 0x28
 80162ac:	af02      	add	r7, sp, #8
 80162ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80162b6:	69fb      	ldr	r3, [r7, #28]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	f000 8084 	beq.w	80163c6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80162be:	69fb      	ldr	r3, [r7, #28]
 80162c0:	795b      	ldrb	r3, [r3, #5]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	f000 8081 	beq.w	80163ca <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80162c8:	69fb      	ldr	r3, [r7, #28]
 80162ca:	699b      	ldr	r3, [r3, #24]
 80162cc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80162ce:	69fb      	ldr	r3, [r7, #28]
 80162d0:	2200      	movs	r2, #0
 80162d2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80162d4:	69fb      	ldr	r3, [r7, #28]
 80162d6:	2200      	movs	r2, #0
 80162d8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80162da:	69fb      	ldr	r3, [r7, #28]
 80162dc:	2200      	movs	r2, #0
 80162de:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80162e0:	69fb      	ldr	r3, [r7, #28]
 80162e2:	2200      	movs	r2, #0
 80162e4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80162e6:	69fb      	ldr	r3, [r7, #28]
 80162e8:	2200      	movs	r2, #0
 80162ea:	631a      	str	r2, [r3, #48]	; 0x30
 80162ec:	69fb      	ldr	r3, [r7, #28]
 80162ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80162f0:	69fb      	ldr	r3, [r7, #28]
 80162f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162f8:	69fb      	ldr	r3, [r7, #28]
 80162fa:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	2200      	movs	r2, #0
 8016300:	829a      	strh	r2, [r3, #20]
 8016302:	69fb      	ldr	r3, [r7, #28]
 8016304:	8a9a      	ldrh	r2, [r3, #20]
 8016306:	69fb      	ldr	r3, [r7, #28]
 8016308:	825a      	strh	r2, [r3, #18]
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	8a5a      	ldrh	r2, [r3, #18]
 801630e:	69fb      	ldr	r3, [r7, #28]
 8016310:	821a      	strh	r2, [r3, #16]
 8016312:	69fb      	ldr	r3, [r7, #28]
 8016314:	8a1a      	ldrh	r2, [r3, #16]
 8016316:	69fb      	ldr	r3, [r7, #28]
 8016318:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f000 fdee 	bl	8016efc <dhcp_supplied_address>
 8016320:	4603      	mov	r3, r0
 8016322:	2b00      	cmp	r3, #0
 8016324:	d03b      	beq.n	801639e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016326:	f107 030e 	add.w	r3, r7, #14
 801632a:	2207      	movs	r2, #7
 801632c:	69f9      	ldr	r1, [r7, #28]
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 fce0 	bl	8016cf4 <dhcp_create_msg>
 8016334:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d030      	beq.n	801639e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801633c:	69bb      	ldr	r3, [r7, #24]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016342:	89f8      	ldrh	r0, [r7, #14]
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801634a:	2304      	movs	r3, #4
 801634c:	2236      	movs	r2, #54	; 0x36
 801634e:	f000 f85f 	bl	8016410 <dhcp_option>
 8016352:	4603      	mov	r3, r0
 8016354:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016356:	89fc      	ldrh	r4, [r7, #14]
 8016358:	697b      	ldr	r3, [r7, #20]
 801635a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	4618      	mov	r0, r3
 8016362:	f7f6 f9ac 	bl	800c6be <lwip_htonl>
 8016366:	4603      	mov	r3, r0
 8016368:	461a      	mov	r2, r3
 801636a:	4629      	mov	r1, r5
 801636c:	4620      	mov	r0, r4
 801636e:	f000 f8db 	bl	8016528 <dhcp_option_long>
 8016372:	4603      	mov	r3, r0
 8016374:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016376:	89f8      	ldrh	r0, [r7, #14]
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	33f0      	adds	r3, #240	; 0xf0
 801637c:	69ba      	ldr	r2, [r7, #24]
 801637e:	4619      	mov	r1, r3
 8016380:	f000 fd8e 	bl	8016ea0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016384:	4b13      	ldr	r3, [pc, #76]	; (80163d4 <dhcp_release_and_stop+0x12c>)
 8016386:	6818      	ldr	r0, [r3, #0]
 8016388:	f107 0210 	add.w	r2, r7, #16
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	9300      	str	r3, [sp, #0]
 8016390:	2343      	movs	r3, #67	; 0x43
 8016392:	69b9      	ldr	r1, [r7, #24]
 8016394:	f7fe fc16 	bl	8014bc4 <udp_sendto_if>
      pbuf_free(p_out);
 8016398:	69b8      	ldr	r0, [r7, #24]
 801639a:	f7f7 fd65 	bl	800de68 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801639e:	4b0e      	ldr	r3, [pc, #56]	; (80163d8 <dhcp_release_and_stop+0x130>)
 80163a0:	4a0d      	ldr	r2, [pc, #52]	; (80163d8 <dhcp_release_and_stop+0x130>)
 80163a2:	490d      	ldr	r1, [pc, #52]	; (80163d8 <dhcp_release_and_stop+0x130>)
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f7f7 f81f 	bl	800d3e8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80163aa:	2100      	movs	r1, #0
 80163ac:	69f8      	ldr	r0, [r7, #28]
 80163ae:	f000 f815 	bl	80163dc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80163b2:	69fb      	ldr	r3, [r7, #28]
 80163b4:	791b      	ldrb	r3, [r3, #4]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d008      	beq.n	80163cc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80163ba:	f7fe ff83 	bl	80152c4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80163be:	69fb      	ldr	r3, [r7, #28]
 80163c0:	2200      	movs	r2, #0
 80163c2:	711a      	strb	r2, [r3, #4]
 80163c4:	e002      	b.n	80163cc <dhcp_release_and_stop+0x124>
    return;
 80163c6:	bf00      	nop
 80163c8:	e000      	b.n	80163cc <dhcp_release_and_stop+0x124>
    return;
 80163ca:	bf00      	nop
  }
}
 80163cc:	3720      	adds	r7, #32
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bdb0      	pop	{r4, r5, r7, pc}
 80163d2:	bf00      	nop
 80163d4:	20008b24 	.word	0x20008b24
 80163d8:	08020b88 	.word	0x08020b88

080163dc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80163dc:	b480      	push	{r7}
 80163de:	b083      	sub	sp, #12
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	460b      	mov	r3, r1
 80163e6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	795b      	ldrb	r3, [r3, #5]
 80163ec:	78fa      	ldrb	r2, [r7, #3]
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d008      	beq.n	8016404 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	78fa      	ldrb	r2, [r7, #3]
 80163f6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2200      	movs	r2, #0
 80163fc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	2200      	movs	r2, #0
 8016402:	811a      	strh	r2, [r3, #8]
  }
}
 8016404:	bf00      	nop
 8016406:	370c      	adds	r7, #12
 8016408:	46bd      	mov	sp, r7
 801640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640e:	4770      	bx	lr

08016410 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
 8016416:	6039      	str	r1, [r7, #0]
 8016418:	4611      	mov	r1, r2
 801641a:	461a      	mov	r2, r3
 801641c:	4603      	mov	r3, r0
 801641e:	80fb      	strh	r3, [r7, #6]
 8016420:	460b      	mov	r3, r1
 8016422:	717b      	strb	r3, [r7, #5]
 8016424:	4613      	mov	r3, r2
 8016426:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016428:	88fa      	ldrh	r2, [r7, #6]
 801642a:	793b      	ldrb	r3, [r7, #4]
 801642c:	4413      	add	r3, r2
 801642e:	3302      	adds	r3, #2
 8016430:	2b44      	cmp	r3, #68	; 0x44
 8016432:	d906      	bls.n	8016442 <dhcp_option+0x32>
 8016434:	4b0d      	ldr	r3, [pc, #52]	; (801646c <dhcp_option+0x5c>)
 8016436:	f240 529a 	movw	r2, #1434	; 0x59a
 801643a:	490d      	ldr	r1, [pc, #52]	; (8016470 <dhcp_option+0x60>)
 801643c:	480d      	ldr	r0, [pc, #52]	; (8016474 <dhcp_option+0x64>)
 801643e:	f005 fa67 	bl	801b910 <iprintf>
  options[options_out_len++] = option_type;
 8016442:	88fb      	ldrh	r3, [r7, #6]
 8016444:	1c5a      	adds	r2, r3, #1
 8016446:	80fa      	strh	r2, [r7, #6]
 8016448:	461a      	mov	r2, r3
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	4413      	add	r3, r2
 801644e:	797a      	ldrb	r2, [r7, #5]
 8016450:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016452:	88fb      	ldrh	r3, [r7, #6]
 8016454:	1c5a      	adds	r2, r3, #1
 8016456:	80fa      	strh	r2, [r7, #6]
 8016458:	461a      	mov	r2, r3
 801645a:	683b      	ldr	r3, [r7, #0]
 801645c:	4413      	add	r3, r2
 801645e:	793a      	ldrb	r2, [r7, #4]
 8016460:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016462:	88fb      	ldrh	r3, [r7, #6]
}
 8016464:	4618      	mov	r0, r3
 8016466:	3708      	adds	r7, #8
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}
 801646c:	0801fecc 	.word	0x0801fecc
 8016470:	08020060 	.word	0x08020060
 8016474:	0801ff2c 	.word	0x0801ff2c

08016478 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b082      	sub	sp, #8
 801647c:	af00      	add	r7, sp, #0
 801647e:	4603      	mov	r3, r0
 8016480:	6039      	str	r1, [r7, #0]
 8016482:	80fb      	strh	r3, [r7, #6]
 8016484:	4613      	mov	r3, r2
 8016486:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016488:	88fb      	ldrh	r3, [r7, #6]
 801648a:	2b43      	cmp	r3, #67	; 0x43
 801648c:	d906      	bls.n	801649c <dhcp_option_byte+0x24>
 801648e:	4b0a      	ldr	r3, [pc, #40]	; (80164b8 <dhcp_option_byte+0x40>)
 8016490:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016494:	4909      	ldr	r1, [pc, #36]	; (80164bc <dhcp_option_byte+0x44>)
 8016496:	480a      	ldr	r0, [pc, #40]	; (80164c0 <dhcp_option_byte+0x48>)
 8016498:	f005 fa3a 	bl	801b910 <iprintf>
  options[options_out_len++] = value;
 801649c:	88fb      	ldrh	r3, [r7, #6]
 801649e:	1c5a      	adds	r2, r3, #1
 80164a0:	80fa      	strh	r2, [r7, #6]
 80164a2:	461a      	mov	r2, r3
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	4413      	add	r3, r2
 80164a8:	797a      	ldrb	r2, [r7, #5]
 80164aa:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80164ac:	88fb      	ldrh	r3, [r7, #6]
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	3708      	adds	r7, #8
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd80      	pop	{r7, pc}
 80164b6:	bf00      	nop
 80164b8:	0801fecc 	.word	0x0801fecc
 80164bc:	080200a4 	.word	0x080200a4
 80164c0:	0801ff2c 	.word	0x0801ff2c

080164c4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b082      	sub	sp, #8
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	4603      	mov	r3, r0
 80164cc:	6039      	str	r1, [r7, #0]
 80164ce:	80fb      	strh	r3, [r7, #6]
 80164d0:	4613      	mov	r3, r2
 80164d2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80164d4:	88fb      	ldrh	r3, [r7, #6]
 80164d6:	3302      	adds	r3, #2
 80164d8:	2b44      	cmp	r3, #68	; 0x44
 80164da:	d906      	bls.n	80164ea <dhcp_option_short+0x26>
 80164dc:	4b0f      	ldr	r3, [pc, #60]	; (801651c <dhcp_option_short+0x58>)
 80164de:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80164e2:	490f      	ldr	r1, [pc, #60]	; (8016520 <dhcp_option_short+0x5c>)
 80164e4:	480f      	ldr	r0, [pc, #60]	; (8016524 <dhcp_option_short+0x60>)
 80164e6:	f005 fa13 	bl	801b910 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80164ea:	88bb      	ldrh	r3, [r7, #4]
 80164ec:	0a1b      	lsrs	r3, r3, #8
 80164ee:	b29a      	uxth	r2, r3
 80164f0:	88fb      	ldrh	r3, [r7, #6]
 80164f2:	1c59      	adds	r1, r3, #1
 80164f4:	80f9      	strh	r1, [r7, #6]
 80164f6:	4619      	mov	r1, r3
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	440b      	add	r3, r1
 80164fc:	b2d2      	uxtb	r2, r2
 80164fe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016500:	88fb      	ldrh	r3, [r7, #6]
 8016502:	1c5a      	adds	r2, r3, #1
 8016504:	80fa      	strh	r2, [r7, #6]
 8016506:	461a      	mov	r2, r3
 8016508:	683b      	ldr	r3, [r7, #0]
 801650a:	4413      	add	r3, r2
 801650c:	88ba      	ldrh	r2, [r7, #4]
 801650e:	b2d2      	uxtb	r2, r2
 8016510:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016512:	88fb      	ldrh	r3, [r7, #6]
}
 8016514:	4618      	mov	r0, r3
 8016516:	3708      	adds	r7, #8
 8016518:	46bd      	mov	sp, r7
 801651a:	bd80      	pop	{r7, pc}
 801651c:	0801fecc 	.word	0x0801fecc
 8016520:	080200dc 	.word	0x080200dc
 8016524:	0801ff2c 	.word	0x0801ff2c

08016528 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b084      	sub	sp, #16
 801652c:	af00      	add	r7, sp, #0
 801652e:	4603      	mov	r3, r0
 8016530:	60b9      	str	r1, [r7, #8]
 8016532:	607a      	str	r2, [r7, #4]
 8016534:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016536:	89fb      	ldrh	r3, [r7, #14]
 8016538:	3304      	adds	r3, #4
 801653a:	2b44      	cmp	r3, #68	; 0x44
 801653c:	d906      	bls.n	801654c <dhcp_option_long+0x24>
 801653e:	4b19      	ldr	r3, [pc, #100]	; (80165a4 <dhcp_option_long+0x7c>)
 8016540:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8016544:	4918      	ldr	r1, [pc, #96]	; (80165a8 <dhcp_option_long+0x80>)
 8016546:	4819      	ldr	r0, [pc, #100]	; (80165ac <dhcp_option_long+0x84>)
 8016548:	f005 f9e2 	bl	801b910 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	0e1a      	lsrs	r2, r3, #24
 8016550:	89fb      	ldrh	r3, [r7, #14]
 8016552:	1c59      	adds	r1, r3, #1
 8016554:	81f9      	strh	r1, [r7, #14]
 8016556:	4619      	mov	r1, r3
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	440b      	add	r3, r1
 801655c:	b2d2      	uxtb	r2, r2
 801655e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	0c1a      	lsrs	r2, r3, #16
 8016564:	89fb      	ldrh	r3, [r7, #14]
 8016566:	1c59      	adds	r1, r3, #1
 8016568:	81f9      	strh	r1, [r7, #14]
 801656a:	4619      	mov	r1, r3
 801656c:	68bb      	ldr	r3, [r7, #8]
 801656e:	440b      	add	r3, r1
 8016570:	b2d2      	uxtb	r2, r2
 8016572:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	0a1a      	lsrs	r2, r3, #8
 8016578:	89fb      	ldrh	r3, [r7, #14]
 801657a:	1c59      	adds	r1, r3, #1
 801657c:	81f9      	strh	r1, [r7, #14]
 801657e:	4619      	mov	r1, r3
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	440b      	add	r3, r1
 8016584:	b2d2      	uxtb	r2, r2
 8016586:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016588:	89fb      	ldrh	r3, [r7, #14]
 801658a:	1c5a      	adds	r2, r3, #1
 801658c:	81fa      	strh	r2, [r7, #14]
 801658e:	461a      	mov	r2, r3
 8016590:	68bb      	ldr	r3, [r7, #8]
 8016592:	4413      	add	r3, r2
 8016594:	687a      	ldr	r2, [r7, #4]
 8016596:	b2d2      	uxtb	r2, r2
 8016598:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801659a:	89fb      	ldrh	r3, [r7, #14]
}
 801659c:	4618      	mov	r0, r3
 801659e:	3710      	adds	r7, #16
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}
 80165a4:	0801fecc 	.word	0x0801fecc
 80165a8:	08020118 	.word	0x08020118
 80165ac:	0801ff2c 	.word	0x0801ff2c

080165b0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b090      	sub	sp, #64	; 0x40
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80165ba:	2300      	movs	r3, #0
 80165bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80165be:	2300      	movs	r3, #0
 80165c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80165c2:	2208      	movs	r2, #8
 80165c4:	2100      	movs	r1, #0
 80165c6:	48be      	ldr	r0, [pc, #760]	; (80168c0 <dhcp_parse_reply+0x310>)
 80165c8:	f005 f99a 	bl	801b900 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	895b      	ldrh	r3, [r3, #10]
 80165d0:	2b2b      	cmp	r3, #43	; 0x2b
 80165d2:	d802      	bhi.n	80165da <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80165d4:	f06f 0301 	mvn.w	r3, #1
 80165d8:	e2a8      	b.n	8016b2c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	685b      	ldr	r3, [r3, #4]
 80165de:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80165e0:	23f0      	movs	r3, #240	; 0xf0
 80165e2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	891b      	ldrh	r3, [r3, #8]
 80165e8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80165ee:	e00c      	b.n	801660a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80165f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f2:	895b      	ldrh	r3, [r3, #10]
 80165f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80165f6:	1ad3      	subs	r3, r2, r3
 80165f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80165fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165fc:	895b      	ldrh	r3, [r3, #10]
 80165fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016600:	1ad3      	subs	r3, r2, r3
 8016602:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8016604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801660c:	2b00      	cmp	r3, #0
 801660e:	d004      	beq.n	801661a <dhcp_parse_reply+0x6a>
 8016610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016612:	895b      	ldrh	r3, [r3, #10]
 8016614:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016616:	429a      	cmp	r2, r3
 8016618:	d2ea      	bcs.n	80165f0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801661c:	2b00      	cmp	r3, #0
 801661e:	d102      	bne.n	8016626 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016620:	f06f 0301 	mvn.w	r3, #1
 8016624:	e282      	b.n	8016b2c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8016626:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016628:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801662a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801662c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016630:	685b      	ldr	r3, [r3, #4]
 8016632:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016634:	e23a      	b.n	8016aac <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8016636:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801663a:	4413      	add	r3, r2
 801663c:	781b      	ldrb	r3, [r3, #0]
 801663e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8016640:	2300      	movs	r3, #0
 8016642:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8016646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801664a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801664c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801664e:	3302      	adds	r3, #2
 8016650:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8016652:	8bfa      	ldrh	r2, [r7, #30]
 8016654:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016656:	429a      	cmp	r2, r3
 8016658:	d202      	bcs.n	8016660 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801665a:	f06f 0301 	mvn.w	r3, #1
 801665e:	e265      	b.n	8016b2c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016660:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016662:	3301      	adds	r3, #1
 8016664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016666:	8952      	ldrh	r2, [r2, #10]
 8016668:	4293      	cmp	r3, r2
 801666a:	da07      	bge.n	801667c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801666c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801666e:	3301      	adds	r3, #1
 8016670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016672:	4413      	add	r3, r2
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801667a:	e00b      	b.n	8016694 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d004      	beq.n	801668e <dhcp_parse_reply+0xde>
 8016684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	685b      	ldr	r3, [r3, #4]
 801668a:	781b      	ldrb	r3, [r3, #0]
 801668c:	e000      	b.n	8016690 <dhcp_parse_reply+0xe0>
 801668e:	2300      	movs	r3, #0
 8016690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016698:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801669c:	7dfb      	ldrb	r3, [r7, #23]
 801669e:	2b3b      	cmp	r3, #59	; 0x3b
 80166a0:	f200 812d 	bhi.w	80168fe <dhcp_parse_reply+0x34e>
 80166a4:	a201      	add	r2, pc, #4	; (adr r2, 80166ac <dhcp_parse_reply+0xfc>)
 80166a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166aa:	bf00      	nop
 80166ac:	0801679d 	.word	0x0801679d
 80166b0:	080167ad 	.word	0x080167ad
 80166b4:	080168ff 	.word	0x080168ff
 80166b8:	080167cf 	.word	0x080167cf
 80166bc:	080168ff 	.word	0x080168ff
 80166c0:	080168ff 	.word	0x080168ff
 80166c4:	080168ff 	.word	0x080168ff
 80166c8:	080168ff 	.word	0x080168ff
 80166cc:	080168ff 	.word	0x080168ff
 80166d0:	080168ff 	.word	0x080168ff
 80166d4:	080168ff 	.word	0x080168ff
 80166d8:	080168ff 	.word	0x080168ff
 80166dc:	080168ff 	.word	0x080168ff
 80166e0:	080168ff 	.word	0x080168ff
 80166e4:	080168ff 	.word	0x080168ff
 80166e8:	080168ff 	.word	0x080168ff
 80166ec:	080168ff 	.word	0x080168ff
 80166f0:	080168ff 	.word	0x080168ff
 80166f4:	080168ff 	.word	0x080168ff
 80166f8:	080168ff 	.word	0x080168ff
 80166fc:	080168ff 	.word	0x080168ff
 8016700:	080168ff 	.word	0x080168ff
 8016704:	080168ff 	.word	0x080168ff
 8016708:	080168ff 	.word	0x080168ff
 801670c:	080168ff 	.word	0x080168ff
 8016710:	080168ff 	.word	0x080168ff
 8016714:	080168ff 	.word	0x080168ff
 8016718:	080168ff 	.word	0x080168ff
 801671c:	080168ff 	.word	0x080168ff
 8016720:	080168ff 	.word	0x080168ff
 8016724:	080168ff 	.word	0x080168ff
 8016728:	080168ff 	.word	0x080168ff
 801672c:	080168ff 	.word	0x080168ff
 8016730:	080168ff 	.word	0x080168ff
 8016734:	080168ff 	.word	0x080168ff
 8016738:	080168ff 	.word	0x080168ff
 801673c:	080168ff 	.word	0x080168ff
 8016740:	080168ff 	.word	0x080168ff
 8016744:	080168ff 	.word	0x080168ff
 8016748:	080168ff 	.word	0x080168ff
 801674c:	080168ff 	.word	0x080168ff
 8016750:	080168ff 	.word	0x080168ff
 8016754:	080168ff 	.word	0x080168ff
 8016758:	080168ff 	.word	0x080168ff
 801675c:	080168ff 	.word	0x080168ff
 8016760:	080168ff 	.word	0x080168ff
 8016764:	080168ff 	.word	0x080168ff
 8016768:	080168ff 	.word	0x080168ff
 801676c:	080168ff 	.word	0x080168ff
 8016770:	080168ff 	.word	0x080168ff
 8016774:	080168ff 	.word	0x080168ff
 8016778:	080167fb 	.word	0x080167fb
 801677c:	0801681d 	.word	0x0801681d
 8016780:	08016859 	.word	0x08016859
 8016784:	0801687b 	.word	0x0801687b
 8016788:	080168ff 	.word	0x080168ff
 801678c:	080168ff 	.word	0x080168ff
 8016790:	080168ff 	.word	0x080168ff
 8016794:	0801689d 	.word	0x0801689d
 8016798:	080168dd 	.word	0x080168dd
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801679c:	2300      	movs	r3, #0
 801679e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80167a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80167aa:	e0ac      	b.n	8016906 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80167ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167b0:	2b04      	cmp	r3, #4
 80167b2:	d009      	beq.n	80167c8 <dhcp_parse_reply+0x218>
 80167b4:	4b43      	ldr	r3, [pc, #268]	; (80168c4 <dhcp_parse_reply+0x314>)
 80167b6:	f240 622e 	movw	r2, #1582	; 0x62e
 80167ba:	4943      	ldr	r1, [pc, #268]	; (80168c8 <dhcp_parse_reply+0x318>)
 80167bc:	4843      	ldr	r0, [pc, #268]	; (80168cc <dhcp_parse_reply+0x31c>)
 80167be:	f005 f8a7 	bl	801b910 <iprintf>
 80167c2:	f06f 0305 	mvn.w	r3, #5
 80167c6:	e1b1      	b.n	8016b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80167c8:	2306      	movs	r3, #6
 80167ca:	623b      	str	r3, [r7, #32]
        break;
 80167cc:	e09b      	b.n	8016906 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80167ce:	2304      	movs	r3, #4
 80167d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80167d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80167d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80167dc:	429a      	cmp	r2, r3
 80167de:	d209      	bcs.n	80167f4 <dhcp_parse_reply+0x244>
 80167e0:	4b38      	ldr	r3, [pc, #224]	; (80168c4 <dhcp_parse_reply+0x314>)
 80167e2:	f240 6233 	movw	r2, #1587	; 0x633
 80167e6:	493a      	ldr	r1, [pc, #232]	; (80168d0 <dhcp_parse_reply+0x320>)
 80167e8:	4838      	ldr	r0, [pc, #224]	; (80168cc <dhcp_parse_reply+0x31c>)
 80167ea:	f005 f891 	bl	801b910 <iprintf>
 80167ee:	f06f 0305 	mvn.w	r3, #5
 80167f2:	e19b      	b.n	8016b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80167f4:	2307      	movs	r3, #7
 80167f6:	623b      	str	r3, [r7, #32]
        break;
 80167f8:	e085      	b.n	8016906 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80167fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167fe:	2b04      	cmp	r3, #4
 8016800:	d009      	beq.n	8016816 <dhcp_parse_reply+0x266>
 8016802:	4b30      	ldr	r3, [pc, #192]	; (80168c4 <dhcp_parse_reply+0x314>)
 8016804:	f240 6241 	movw	r2, #1601	; 0x641
 8016808:	492f      	ldr	r1, [pc, #188]	; (80168c8 <dhcp_parse_reply+0x318>)
 801680a:	4830      	ldr	r0, [pc, #192]	; (80168cc <dhcp_parse_reply+0x31c>)
 801680c:	f005 f880 	bl	801b910 <iprintf>
 8016810:	f06f 0305 	mvn.w	r3, #5
 8016814:	e18a      	b.n	8016b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016816:	2303      	movs	r3, #3
 8016818:	623b      	str	r3, [r7, #32]
        break;
 801681a:	e074      	b.n	8016906 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801681c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016820:	2b01      	cmp	r3, #1
 8016822:	d009      	beq.n	8016838 <dhcp_parse_reply+0x288>
 8016824:	4b27      	ldr	r3, [pc, #156]	; (80168c4 <dhcp_parse_reply+0x314>)
 8016826:	f240 624f 	movw	r2, #1615	; 0x64f
 801682a:	492a      	ldr	r1, [pc, #168]	; (80168d4 <dhcp_parse_reply+0x324>)
 801682c:	4827      	ldr	r0, [pc, #156]	; (80168cc <dhcp_parse_reply+0x31c>)
 801682e:	f005 f86f 	bl	801b910 <iprintf>
 8016832:	f06f 0305 	mvn.w	r3, #5
 8016836:	e179      	b.n	8016b2c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801683a:	2bf0      	cmp	r3, #240	; 0xf0
 801683c:	d009      	beq.n	8016852 <dhcp_parse_reply+0x2a2>
 801683e:	4b21      	ldr	r3, [pc, #132]	; (80168c4 <dhcp_parse_reply+0x314>)
 8016840:	f240 6251 	movw	r2, #1617	; 0x651
 8016844:	4924      	ldr	r1, [pc, #144]	; (80168d8 <dhcp_parse_reply+0x328>)
 8016846:	4821      	ldr	r0, [pc, #132]	; (80168cc <dhcp_parse_reply+0x31c>)
 8016848:	f005 f862 	bl	801b910 <iprintf>
 801684c:	f06f 0305 	mvn.w	r3, #5
 8016850:	e16c      	b.n	8016b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016852:	2300      	movs	r3, #0
 8016854:	623b      	str	r3, [r7, #32]
        break;
 8016856:	e056      	b.n	8016906 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801685c:	2b01      	cmp	r3, #1
 801685e:	d009      	beq.n	8016874 <dhcp_parse_reply+0x2c4>
 8016860:	4b18      	ldr	r3, [pc, #96]	; (80168c4 <dhcp_parse_reply+0x314>)
 8016862:	f240 6255 	movw	r2, #1621	; 0x655
 8016866:	491b      	ldr	r1, [pc, #108]	; (80168d4 <dhcp_parse_reply+0x324>)
 8016868:	4818      	ldr	r0, [pc, #96]	; (80168cc <dhcp_parse_reply+0x31c>)
 801686a:	f005 f851 	bl	801b910 <iprintf>
 801686e:	f06f 0305 	mvn.w	r3, #5
 8016872:	e15b      	b.n	8016b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016874:	2301      	movs	r3, #1
 8016876:	623b      	str	r3, [r7, #32]
        break;
 8016878:	e045      	b.n	8016906 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801687a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801687e:	2b04      	cmp	r3, #4
 8016880:	d009      	beq.n	8016896 <dhcp_parse_reply+0x2e6>
 8016882:	4b10      	ldr	r3, [pc, #64]	; (80168c4 <dhcp_parse_reply+0x314>)
 8016884:	f240 6259 	movw	r2, #1625	; 0x659
 8016888:	490f      	ldr	r1, [pc, #60]	; (80168c8 <dhcp_parse_reply+0x318>)
 801688a:	4810      	ldr	r0, [pc, #64]	; (80168cc <dhcp_parse_reply+0x31c>)
 801688c:	f005 f840 	bl	801b910 <iprintf>
 8016890:	f06f 0305 	mvn.w	r3, #5
 8016894:	e14a      	b.n	8016b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016896:	2302      	movs	r3, #2
 8016898:	623b      	str	r3, [r7, #32]
        break;
 801689a:	e034      	b.n	8016906 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801689c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168a0:	2b04      	cmp	r3, #4
 80168a2:	d009      	beq.n	80168b8 <dhcp_parse_reply+0x308>
 80168a4:	4b07      	ldr	r3, [pc, #28]	; (80168c4 <dhcp_parse_reply+0x314>)
 80168a6:	f240 625d 	movw	r2, #1629	; 0x65d
 80168aa:	4907      	ldr	r1, [pc, #28]	; (80168c8 <dhcp_parse_reply+0x318>)
 80168ac:	4807      	ldr	r0, [pc, #28]	; (80168cc <dhcp_parse_reply+0x31c>)
 80168ae:	f005 f82f 	bl	801b910 <iprintf>
 80168b2:	f06f 0305 	mvn.w	r3, #5
 80168b6:	e139      	b.n	8016b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80168b8:	2304      	movs	r3, #4
 80168ba:	623b      	str	r3, [r7, #32]
        break;
 80168bc:	e023      	b.n	8016906 <dhcp_parse_reply+0x356>
 80168be:	bf00      	nop
 80168c0:	2001067c 	.word	0x2001067c
 80168c4:	0801fecc 	.word	0x0801fecc
 80168c8:	08020154 	.word	0x08020154
 80168cc:	0801ff2c 	.word	0x0801ff2c
 80168d0:	08020160 	.word	0x08020160
 80168d4:	08020174 	.word	0x08020174
 80168d8:	08020180 	.word	0x08020180
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80168dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168e0:	2b04      	cmp	r3, #4
 80168e2:	d009      	beq.n	80168f8 <dhcp_parse_reply+0x348>
 80168e4:	4b93      	ldr	r3, [pc, #588]	; (8016b34 <dhcp_parse_reply+0x584>)
 80168e6:	f240 6261 	movw	r2, #1633	; 0x661
 80168ea:	4993      	ldr	r1, [pc, #588]	; (8016b38 <dhcp_parse_reply+0x588>)
 80168ec:	4893      	ldr	r0, [pc, #588]	; (8016b3c <dhcp_parse_reply+0x58c>)
 80168ee:	f005 f80f 	bl	801b910 <iprintf>
 80168f2:	f06f 0305 	mvn.w	r3, #5
 80168f6:	e119      	b.n	8016b2c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80168f8:	2305      	movs	r3, #5
 80168fa:	623b      	str	r3, [r7, #32]
        break;
 80168fc:	e003      	b.n	8016906 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80168fe:	2300      	movs	r3, #0
 8016900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8016904:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016906:	7dfb      	ldrb	r3, [r7, #23]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d103      	bne.n	8016914 <dhcp_parse_reply+0x364>
      offset++;
 801690c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801690e:	3301      	adds	r3, #1
 8016910:	877b      	strh	r3, [r7, #58]	; 0x3a
 8016912:	e0a1      	b.n	8016a58 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8016914:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801691a:	4413      	add	r3, r2
 801691c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8016920:	4293      	cmp	r3, r2
 8016922:	dd02      	ble.n	801692a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8016924:	f06f 0301 	mvn.w	r3, #1
 8016928:	e100      	b.n	8016b2c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801692a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801692e:	b29a      	uxth	r2, r3
 8016930:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016932:	4413      	add	r3, r2
 8016934:	b29b      	uxth	r3, r3
 8016936:	3302      	adds	r3, #2
 8016938:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801693a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801693e:	2b00      	cmp	r3, #0
 8016940:	f000 808a 	beq.w	8016a58 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8016944:	2300      	movs	r3, #0
 8016946:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016948:	6a3b      	ldr	r3, [r7, #32]
 801694a:	2b00      	cmp	r3, #0
 801694c:	db02      	blt.n	8016954 <dhcp_parse_reply+0x3a4>
 801694e:	6a3b      	ldr	r3, [r7, #32]
 8016950:	2b07      	cmp	r3, #7
 8016952:	dd06      	ble.n	8016962 <dhcp_parse_reply+0x3b2>
 8016954:	4b77      	ldr	r3, [pc, #476]	; (8016b34 <dhcp_parse_reply+0x584>)
 8016956:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801695a:	4979      	ldr	r1, [pc, #484]	; (8016b40 <dhcp_parse_reply+0x590>)
 801695c:	4877      	ldr	r0, [pc, #476]	; (8016b3c <dhcp_parse_reply+0x58c>)
 801695e:	f004 ffd7 	bl	801b910 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8016962:	4a78      	ldr	r2, [pc, #480]	; (8016b44 <dhcp_parse_reply+0x594>)
 8016964:	6a3b      	ldr	r3, [r7, #32]
 8016966:	4413      	add	r3, r2
 8016968:	781b      	ldrb	r3, [r3, #0]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d174      	bne.n	8016a58 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801696e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016972:	2b04      	cmp	r3, #4
 8016974:	bf28      	it	cs
 8016976:	2304      	movcs	r3, #4
 8016978:	b2db      	uxtb	r3, r3
 801697a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801697c:	8bfb      	ldrh	r3, [r7, #30]
 801697e:	8aba      	ldrh	r2, [r7, #20]
 8016980:	f107 0108 	add.w	r1, r7, #8
 8016984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016986:	f7f7 fc75 	bl	800e274 <pbuf_copy_partial>
 801698a:	4603      	mov	r3, r0
 801698c:	461a      	mov	r2, r3
 801698e:	8abb      	ldrh	r3, [r7, #20]
 8016990:	4293      	cmp	r3, r2
 8016992:	d002      	beq.n	801699a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8016994:	f06f 0301 	mvn.w	r3, #1
 8016998:	e0c8      	b.n	8016b2c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801699a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801699e:	2b04      	cmp	r3, #4
 80169a0:	d933      	bls.n	8016a0a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80169a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169a6:	f003 0303 	and.w	r3, r3, #3
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d009      	beq.n	80169c4 <dhcp_parse_reply+0x414>
 80169b0:	4b60      	ldr	r3, [pc, #384]	; (8016b34 <dhcp_parse_reply+0x584>)
 80169b2:	f240 6281 	movw	r2, #1665	; 0x681
 80169b6:	4964      	ldr	r1, [pc, #400]	; (8016b48 <dhcp_parse_reply+0x598>)
 80169b8:	4860      	ldr	r0, [pc, #384]	; (8016b3c <dhcp_parse_reply+0x58c>)
 80169ba:	f004 ffa9 	bl	801b910 <iprintf>
 80169be:	f06f 0305 	mvn.w	r3, #5
 80169c2:	e0b3      	b.n	8016b2c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80169c4:	4a5f      	ldr	r2, [pc, #380]	; (8016b44 <dhcp_parse_reply+0x594>)
 80169c6:	6a3b      	ldr	r3, [r7, #32]
 80169c8:	4413      	add	r3, r2
 80169ca:	2201      	movs	r2, #1
 80169cc:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80169ce:	68bb      	ldr	r3, [r7, #8]
 80169d0:	4618      	mov	r0, r3
 80169d2:	f7f5 fe74 	bl	800c6be <lwip_htonl>
 80169d6:	4602      	mov	r2, r0
 80169d8:	495c      	ldr	r1, [pc, #368]	; (8016b4c <dhcp_parse_reply+0x59c>)
 80169da:	6a3b      	ldr	r3, [r7, #32]
 80169dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80169e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169e4:	3b04      	subs	r3, #4
 80169e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80169ea:	8bfb      	ldrh	r3, [r7, #30]
 80169ec:	3304      	adds	r3, #4
 80169ee:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80169f0:	8a7a      	ldrh	r2, [r7, #18]
 80169f2:	8bfb      	ldrh	r3, [r7, #30]
 80169f4:	429a      	cmp	r2, r3
 80169f6:	d202      	bcs.n	80169fe <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80169f8:	f06f 0301 	mvn.w	r3, #1
 80169fc:	e096      	b.n	8016b2c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80169fe:	8a7b      	ldrh	r3, [r7, #18]
 8016a00:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8016a02:	6a3b      	ldr	r3, [r7, #32]
 8016a04:	3301      	adds	r3, #1
 8016a06:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8016a08:	e79e      	b.n	8016948 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8016a0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a0e:	2b04      	cmp	r3, #4
 8016a10:	d106      	bne.n	8016a20 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7f5 fe52 	bl	800c6be <lwip_htonl>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	60bb      	str	r3, [r7, #8]
 8016a1e:	e011      	b.n	8016a44 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8016a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a24:	2b01      	cmp	r3, #1
 8016a26:	d009      	beq.n	8016a3c <dhcp_parse_reply+0x48c>
 8016a28:	4b42      	ldr	r3, [pc, #264]	; (8016b34 <dhcp_parse_reply+0x584>)
 8016a2a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8016a2e:	4948      	ldr	r1, [pc, #288]	; (8016b50 <dhcp_parse_reply+0x5a0>)
 8016a30:	4842      	ldr	r0, [pc, #264]	; (8016b3c <dhcp_parse_reply+0x58c>)
 8016a32:	f004 ff6d 	bl	801b910 <iprintf>
 8016a36:	f06f 0305 	mvn.w	r3, #5
 8016a3a:	e077      	b.n	8016b2c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8016a3c:	f107 0308 	add.w	r3, r7, #8
 8016a40:	781b      	ldrb	r3, [r3, #0]
 8016a42:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8016a44:	4a3f      	ldr	r2, [pc, #252]	; (8016b44 <dhcp_parse_reply+0x594>)
 8016a46:	6a3b      	ldr	r3, [r7, #32]
 8016a48:	4413      	add	r3, r2
 8016a4a:	2201      	movs	r2, #1
 8016a4c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8016a4e:	68ba      	ldr	r2, [r7, #8]
 8016a50:	493e      	ldr	r1, [pc, #248]	; (8016b4c <dhcp_parse_reply+0x59c>)
 8016a52:	6a3b      	ldr	r3, [r7, #32]
 8016a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a5a:	895b      	ldrh	r3, [r3, #10]
 8016a5c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d324      	bcc.n	8016aac <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8016a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a64:	895b      	ldrh	r3, [r3, #10]
 8016a66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a68:	1ad3      	subs	r3, r2, r3
 8016a6a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8016a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a6e:	895b      	ldrh	r3, [r3, #10]
 8016a70:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8016a76:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016a78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016a7a:	429a      	cmp	r2, r3
 8016a7c:	d213      	bcs.n	8016aa6 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8016a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8016a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d109      	bne.n	8016a9e <dhcp_parse_reply+0x4ee>
 8016a8a:	4b2a      	ldr	r3, [pc, #168]	; (8016b34 <dhcp_parse_reply+0x584>)
 8016a8c:	f240 629d 	movw	r2, #1693	; 0x69d
 8016a90:	4930      	ldr	r1, [pc, #192]	; (8016b54 <dhcp_parse_reply+0x5a4>)
 8016a92:	482a      	ldr	r0, [pc, #168]	; (8016b3c <dhcp_parse_reply+0x58c>)
 8016a94:	f004 ff3c 	bl	801b910 <iprintf>
 8016a98:	f06f 0305 	mvn.w	r3, #5
 8016a9c:	e046      	b.n	8016b2c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8016a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aa0:	685b      	ldr	r3, [r3, #4]
 8016aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016aa4:	e002      	b.n	8016aac <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016aa6:	f06f 0301 	mvn.w	r3, #1
 8016aaa:	e03f      	b.n	8016b2c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d00a      	beq.n	8016ac8 <dhcp_parse_reply+0x518>
 8016ab2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016ab4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d206      	bcs.n	8016ac8 <dhcp_parse_reply+0x518>
 8016aba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016abe:	4413      	add	r3, r2
 8016ac0:	781b      	ldrb	r3, [r3, #0]
 8016ac2:	2bff      	cmp	r3, #255	; 0xff
 8016ac4:	f47f adb7 	bne.w	8016636 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016ac8:	4b1e      	ldr	r3, [pc, #120]	; (8016b44 <dhcp_parse_reply+0x594>)
 8016aca:	781b      	ldrb	r3, [r3, #0]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d018      	beq.n	8016b02 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016ad0:	4b1e      	ldr	r3, [pc, #120]	; (8016b4c <dhcp_parse_reply+0x59c>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016ad6:	4b1b      	ldr	r3, [pc, #108]	; (8016b44 <dhcp_parse_reply+0x594>)
 8016ad8:	2200      	movs	r2, #0
 8016ada:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	2b01      	cmp	r3, #1
 8016ae0:	d102      	bne.n	8016ae8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8016ae2:	2301      	movs	r3, #1
 8016ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ae6:	e00c      	b.n	8016b02 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	2b02      	cmp	r3, #2
 8016aec:	d102      	bne.n	8016af4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8016aee:	2301      	movs	r3, #1
 8016af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8016af2:	e006      	b.n	8016b02 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	2b03      	cmp	r3, #3
 8016af8:	d103      	bne.n	8016b02 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8016afa:	2301      	movs	r3, #1
 8016afc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016afe:	2301      	movs	r3, #1
 8016b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8016b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d006      	beq.n	8016b16 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016b08:	2300      	movs	r3, #0
 8016b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016b0c:	236c      	movs	r3, #108	; 0x6c
 8016b0e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8016b10:	23ec      	movs	r3, #236	; 0xec
 8016b12:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8016b14:	e569      	b.n	80165ea <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d006      	beq.n	8016b2a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8016b20:	232c      	movs	r3, #44	; 0x2c
 8016b22:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016b24:	236c      	movs	r3, #108	; 0x6c
 8016b26:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8016b28:	e55f      	b.n	80165ea <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8016b2a:	2300      	movs	r3, #0
}
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	3740      	adds	r7, #64	; 0x40
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd80      	pop	{r7, pc}
 8016b34:	0801fecc 	.word	0x0801fecc
 8016b38:	08020154 	.word	0x08020154
 8016b3c:	0801ff2c 	.word	0x0801ff2c
 8016b40:	08020198 	.word	0x08020198
 8016b44:	2001067c 	.word	0x2001067c
 8016b48:	080201ac 	.word	0x080201ac
 8016b4c:	20010684 	.word	0x20010684
 8016b50:	080201c4 	.word	0x080201c4
 8016b54:	080201d8 	.word	0x080201d8

08016b58 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b08a      	sub	sp, #40	; 0x28
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	60f8      	str	r0, [r7, #12]
 8016b60:	60b9      	str	r1, [r7, #8]
 8016b62:	607a      	str	r2, [r7, #4]
 8016b64:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8016b66:	4b60      	ldr	r3, [pc, #384]	; (8016ce8 <dhcp_recv+0x190>)
 8016b68:	685b      	ldr	r3, [r3, #4]
 8016b6a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b6c:	6a3b      	ldr	r3, [r7, #32]
 8016b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b70:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	685b      	ldr	r3, [r3, #4]
 8016b76:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016b78:	69fb      	ldr	r3, [r7, #28]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	f000 809d 	beq.w	8016cba <dhcp_recv+0x162>
 8016b80:	69fb      	ldr	r3, [r7, #28]
 8016b82:	791b      	ldrb	r3, [r3, #4]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	f000 8098 	beq.w	8016cba <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	895b      	ldrh	r3, [r3, #10]
 8016b8e:	2b2b      	cmp	r3, #43	; 0x2b
 8016b90:	f240 8095 	bls.w	8016cbe <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016b94:	69bb      	ldr	r3, [r7, #24]
 8016b96:	781b      	ldrb	r3, [r3, #0]
 8016b98:	2b02      	cmp	r3, #2
 8016b9a:	f040 8092 	bne.w	8016cc2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ba4:	e012      	b.n	8016bcc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016baa:	6a3a      	ldr	r2, [r7, #32]
 8016bac:	4413      	add	r3, r2
 8016bae:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8016bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bb6:	69b9      	ldr	r1, [r7, #24]
 8016bb8:	440b      	add	r3, r1
 8016bba:	7f1b      	ldrb	r3, [r3, #28]
 8016bbc:	429a      	cmp	r2, r3
 8016bbe:	f040 8082 	bne.w	8016cc6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bc6:	3301      	adds	r3, #1
 8016bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016bcc:	6a3b      	ldr	r3, [r7, #32]
 8016bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016bd2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016bd6:	429a      	cmp	r2, r3
 8016bd8:	d203      	bcs.n	8016be2 <dhcp_recv+0x8a>
 8016bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bde:	2b05      	cmp	r3, #5
 8016be0:	d9e1      	bls.n	8016ba6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8016be2:	69bb      	ldr	r3, [r7, #24]
 8016be4:	685b      	ldr	r3, [r3, #4]
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7f5 fd69 	bl	800c6be <lwip_htonl>
 8016bec:	4602      	mov	r2, r0
 8016bee:	69fb      	ldr	r3, [r7, #28]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d169      	bne.n	8016cca <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016bf6:	69f9      	ldr	r1, [r7, #28]
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f7ff fcd9 	bl	80165b0 <dhcp_parse_reply>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d164      	bne.n	8016cce <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016c04:	4b39      	ldr	r3, [pc, #228]	; (8016cec <dhcp_recv+0x194>)
 8016c06:	785b      	ldrb	r3, [r3, #1]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d062      	beq.n	8016cd2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	685b      	ldr	r3, [r3, #4]
 8016c10:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016c12:	4b37      	ldr	r3, [pc, #220]	; (8016cf0 <dhcp_recv+0x198>)
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016c18:	7cfb      	ldrb	r3, [r7, #19]
 8016c1a:	2b05      	cmp	r3, #5
 8016c1c:	d12a      	bne.n	8016c74 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016c1e:	69fb      	ldr	r3, [r7, #28]
 8016c20:	795b      	ldrb	r3, [r3, #5]
 8016c22:	2b01      	cmp	r3, #1
 8016c24:	d112      	bne.n	8016c4c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8016c26:	6979      	ldr	r1, [r7, #20]
 8016c28:	6a38      	ldr	r0, [r7, #32]
 8016c2a:	f7fe fe17 	bl	801585c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016c2e:	6a3b      	ldr	r3, [r7, #32]
 8016c30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c34:	f003 0308 	and.w	r3, r3, #8
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d003      	beq.n	8016c44 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016c3c:	6a38      	ldr	r0, [r7, #32]
 8016c3e:	f7fe fb85 	bl	801534c <dhcp_check>
 8016c42:	e049      	b.n	8016cd8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016c44:	6a38      	ldr	r0, [r7, #32]
 8016c46:	f7ff f867 	bl	8015d18 <dhcp_bind>
 8016c4a:	e045      	b.n	8016cd8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016c4c:	69fb      	ldr	r3, [r7, #28]
 8016c4e:	795b      	ldrb	r3, [r3, #5]
 8016c50:	2b03      	cmp	r3, #3
 8016c52:	d007      	beq.n	8016c64 <dhcp_recv+0x10c>
 8016c54:	69fb      	ldr	r3, [r7, #28]
 8016c56:	795b      	ldrb	r3, [r3, #5]
 8016c58:	2b04      	cmp	r3, #4
 8016c5a:	d003      	beq.n	8016c64 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016c5c:	69fb      	ldr	r3, [r7, #28]
 8016c5e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016c60:	2b05      	cmp	r3, #5
 8016c62:	d139      	bne.n	8016cd8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8016c64:	6979      	ldr	r1, [r7, #20]
 8016c66:	6a38      	ldr	r0, [r7, #32]
 8016c68:	f7fe fdf8 	bl	801585c <dhcp_handle_ack>
      dhcp_bind(netif);
 8016c6c:	6a38      	ldr	r0, [r7, #32]
 8016c6e:	f7ff f853 	bl	8015d18 <dhcp_bind>
 8016c72:	e031      	b.n	8016cd8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016c74:	7cfb      	ldrb	r3, [r7, #19]
 8016c76:	2b06      	cmp	r3, #6
 8016c78:	d113      	bne.n	8016ca2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016c7a:	69fb      	ldr	r3, [r7, #28]
 8016c7c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016c7e:	2b03      	cmp	r3, #3
 8016c80:	d00b      	beq.n	8016c9a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016c82:	69fb      	ldr	r3, [r7, #28]
 8016c84:	795b      	ldrb	r3, [r3, #5]
 8016c86:	2b01      	cmp	r3, #1
 8016c88:	d007      	beq.n	8016c9a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016c8a:	69fb      	ldr	r3, [r7, #28]
 8016c8c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016c8e:	2b04      	cmp	r3, #4
 8016c90:	d003      	beq.n	8016c9a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016c92:	69fb      	ldr	r3, [r7, #28]
 8016c94:	795b      	ldrb	r3, [r3, #5]
 8016c96:	2b05      	cmp	r3, #5
 8016c98:	d103      	bne.n	8016ca2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016c9a:	6a38      	ldr	r0, [r7, #32]
 8016c9c:	f7fe fb3c 	bl	8015318 <dhcp_handle_nak>
 8016ca0:	e01a      	b.n	8016cd8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8016ca2:	7cfb      	ldrb	r3, [r7, #19]
 8016ca4:	2b02      	cmp	r3, #2
 8016ca6:	d116      	bne.n	8016cd6 <dhcp_recv+0x17e>
 8016ca8:	69fb      	ldr	r3, [r7, #28]
 8016caa:	795b      	ldrb	r3, [r3, #5]
 8016cac:	2b06      	cmp	r3, #6
 8016cae:	d112      	bne.n	8016cd6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8016cb0:	6979      	ldr	r1, [r7, #20]
 8016cb2:	6a38      	ldr	r0, [r7, #32]
 8016cb4:	f7fe fb7e 	bl	80153b4 <dhcp_handle_offer>
 8016cb8:	e00e      	b.n	8016cd8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016cba:	bf00      	nop
 8016cbc:	e00c      	b.n	8016cd8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016cbe:	bf00      	nop
 8016cc0:	e00a      	b.n	8016cd8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016cc2:	bf00      	nop
 8016cc4:	e008      	b.n	8016cd8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8016cc6:	bf00      	nop
 8016cc8:	e006      	b.n	8016cd8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016cca:	bf00      	nop
 8016ccc:	e004      	b.n	8016cd8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016cce:	bf00      	nop
 8016cd0:	e002      	b.n	8016cd8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016cd2:	bf00      	nop
 8016cd4:	e000      	b.n	8016cd8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8016cd6:	bf00      	nop
  pbuf_free(p);
 8016cd8:	6878      	ldr	r0, [r7, #4]
 8016cda:	f7f7 f8c5 	bl	800de68 <pbuf_free>
}
 8016cde:	bf00      	nop
 8016ce0:	3728      	adds	r7, #40	; 0x28
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}
 8016ce6:	bf00      	nop
 8016ce8:	2000cf0c 	.word	0x2000cf0c
 8016cec:	2001067c 	.word	0x2001067c
 8016cf0:	20010684 	.word	0x20010684

08016cf4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b088      	sub	sp, #32
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	60f8      	str	r0, [r7, #12]
 8016cfc:	60b9      	str	r1, [r7, #8]
 8016cfe:	603b      	str	r3, [r7, #0]
 8016d00:	4613      	mov	r3, r2
 8016d02:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d108      	bne.n	8016d1c <dhcp_create_msg+0x28>
 8016d0a:	4b5f      	ldr	r3, [pc, #380]	; (8016e88 <dhcp_create_msg+0x194>)
 8016d0c:	f240 7269 	movw	r2, #1897	; 0x769
 8016d10:	495e      	ldr	r1, [pc, #376]	; (8016e8c <dhcp_create_msg+0x198>)
 8016d12:	485f      	ldr	r0, [pc, #380]	; (8016e90 <dhcp_create_msg+0x19c>)
 8016d14:	f004 fdfc 	bl	801b910 <iprintf>
 8016d18:	2300      	movs	r3, #0
 8016d1a:	e0b1      	b.n	8016e80 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d108      	bne.n	8016d34 <dhcp_create_msg+0x40>
 8016d22:	4b59      	ldr	r3, [pc, #356]	; (8016e88 <dhcp_create_msg+0x194>)
 8016d24:	f240 726a 	movw	r2, #1898	; 0x76a
 8016d28:	495a      	ldr	r1, [pc, #360]	; (8016e94 <dhcp_create_msg+0x1a0>)
 8016d2a:	4859      	ldr	r0, [pc, #356]	; (8016e90 <dhcp_create_msg+0x19c>)
 8016d2c:	f004 fdf0 	bl	801b910 <iprintf>
 8016d30:	2300      	movs	r3, #0
 8016d32:	e0a5      	b.n	8016e80 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016d34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d38:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016d3c:	2036      	movs	r0, #54	; 0x36
 8016d3e:	f7f6 fd7d 	bl	800d83c <pbuf_alloc>
 8016d42:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016d44:	69bb      	ldr	r3, [r7, #24]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d101      	bne.n	8016d4e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	e098      	b.n	8016e80 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016d4e:	69bb      	ldr	r3, [r7, #24]
 8016d50:	895b      	ldrh	r3, [r3, #10]
 8016d52:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8016d56:	d206      	bcs.n	8016d66 <dhcp_create_msg+0x72>
 8016d58:	4b4b      	ldr	r3, [pc, #300]	; (8016e88 <dhcp_create_msg+0x194>)
 8016d5a:	f240 7271 	movw	r2, #1905	; 0x771
 8016d5e:	494e      	ldr	r1, [pc, #312]	; (8016e98 <dhcp_create_msg+0x1a4>)
 8016d60:	484b      	ldr	r0, [pc, #300]	; (8016e90 <dhcp_create_msg+0x19c>)
 8016d62:	f004 fdd5 	bl	801b910 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8016d66:	79fb      	ldrb	r3, [r7, #7]
 8016d68:	2b03      	cmp	r3, #3
 8016d6a:	d103      	bne.n	8016d74 <dhcp_create_msg+0x80>
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	795b      	ldrb	r3, [r3, #5]
 8016d70:	2b03      	cmp	r3, #3
 8016d72:	d10d      	bne.n	8016d90 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	799b      	ldrb	r3, [r3, #6]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d105      	bne.n	8016d88 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016d7c:	f004 fe56 	bl	801ba2c <rand>
 8016d80:	4603      	mov	r3, r0
 8016d82:	461a      	mov	r2, r3
 8016d84:	4b45      	ldr	r3, [pc, #276]	; (8016e9c <dhcp_create_msg+0x1a8>)
 8016d86:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016d88:	4b44      	ldr	r3, [pc, #272]	; (8016e9c <dhcp_create_msg+0x1a8>)
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016d90:	69bb      	ldr	r3, [r7, #24]
 8016d92:	685b      	ldr	r3, [r3, #4]
 8016d94:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8016d96:	f44f 729a 	mov.w	r2, #308	; 0x134
 8016d9a:	2100      	movs	r1, #0
 8016d9c:	6978      	ldr	r0, [r7, #20]
 8016d9e:	f004 fdaf 	bl	801b900 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016da2:	697b      	ldr	r3, [r7, #20]
 8016da4:	2201      	movs	r2, #1
 8016da6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016da8:	697b      	ldr	r3, [r7, #20]
 8016daa:	2201      	movs	r2, #1
 8016dac:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016db4:	697b      	ldr	r3, [r7, #20]
 8016db6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7f5 fc7e 	bl	800c6be <lwip_htonl>
 8016dc2:	4602      	mov	r2, r0
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016dc8:	79fb      	ldrb	r3, [r7, #7]
 8016dca:	2b08      	cmp	r3, #8
 8016dcc:	d010      	beq.n	8016df0 <dhcp_create_msg+0xfc>
 8016dce:	79fb      	ldrb	r3, [r7, #7]
 8016dd0:	2b04      	cmp	r3, #4
 8016dd2:	d00d      	beq.n	8016df0 <dhcp_create_msg+0xfc>
 8016dd4:	79fb      	ldrb	r3, [r7, #7]
 8016dd6:	2b07      	cmp	r3, #7
 8016dd8:	d00a      	beq.n	8016df0 <dhcp_create_msg+0xfc>
 8016dda:	79fb      	ldrb	r3, [r7, #7]
 8016ddc:	2b03      	cmp	r3, #3
 8016dde:	d10c      	bne.n	8016dfa <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016de4:	2b05      	cmp	r3, #5
 8016de6:	d003      	beq.n	8016df0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016de8:	68bb      	ldr	r3, [r7, #8]
 8016dea:	795b      	ldrb	r3, [r3, #5]
 8016dec:	2b04      	cmp	r3, #4
 8016dee:	d104      	bne.n	8016dfa <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	3304      	adds	r3, #4
 8016df4:	681a      	ldr	r2, [r3, #0]
 8016df6:	697b      	ldr	r3, [r7, #20]
 8016df8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	83fb      	strh	r3, [r7, #30]
 8016dfe:	e00c      	b.n	8016e1a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016e00:	8bfa      	ldrh	r2, [r7, #30]
 8016e02:	8bfb      	ldrh	r3, [r7, #30]
 8016e04:	68f9      	ldr	r1, [r7, #12]
 8016e06:	440a      	add	r2, r1
 8016e08:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016e0c:	697a      	ldr	r2, [r7, #20]
 8016e0e:	4413      	add	r3, r2
 8016e10:	460a      	mov	r2, r1
 8016e12:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016e14:	8bfb      	ldrh	r3, [r7, #30]
 8016e16:	3301      	adds	r3, #1
 8016e18:	83fb      	strh	r3, [r7, #30]
 8016e1a:	8bfb      	ldrh	r3, [r7, #30]
 8016e1c:	2b05      	cmp	r3, #5
 8016e1e:	d9ef      	bls.n	8016e00 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016e20:	697b      	ldr	r3, [r7, #20]
 8016e22:	2200      	movs	r2, #0
 8016e24:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016e28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016e32:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016e36:	2200      	movs	r2, #0
 8016e38:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016e3c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016e40:	2200      	movs	r2, #0
 8016e42:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016e46:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8016e4a:	697b      	ldr	r3, [r7, #20]
 8016e4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e50:	2301      	movs	r3, #1
 8016e52:	2235      	movs	r2, #53	; 0x35
 8016e54:	2000      	movs	r0, #0
 8016e56:	f7ff fadb 	bl	8016410 <dhcp_option>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016e5e:	697b      	ldr	r3, [r7, #20]
 8016e60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e64:	79fa      	ldrb	r2, [r7, #7]
 8016e66:	8a7b      	ldrh	r3, [r7, #18]
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f7ff fb05 	bl	8016478 <dhcp_option_byte>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016e72:	683b      	ldr	r3, [r7, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d002      	beq.n	8016e7e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016e78:	683b      	ldr	r3, [r7, #0]
 8016e7a:	8a7a      	ldrh	r2, [r7, #18]
 8016e7c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016e7e:	69bb      	ldr	r3, [r7, #24]
}
 8016e80:	4618      	mov	r0, r3
 8016e82:	3720      	adds	r7, #32
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}
 8016e88:	0801fecc 	.word	0x0801fecc
 8016e8c:	080201ec 	.word	0x080201ec
 8016e90:	0801ff2c 	.word	0x0801ff2c
 8016e94:	0802020c 	.word	0x0802020c
 8016e98:	0802022c 	.word	0x0802022c
 8016e9c:	20008b2c 	.word	0x20008b2c

08016ea0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b084      	sub	sp, #16
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	60b9      	str	r1, [r7, #8]
 8016eaa:	607a      	str	r2, [r7, #4]
 8016eac:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016eae:	89fb      	ldrh	r3, [r7, #14]
 8016eb0:	1c5a      	adds	r2, r3, #1
 8016eb2:	81fa      	strh	r2, [r7, #14]
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	4413      	add	r3, r2
 8016eba:	22ff      	movs	r2, #255	; 0xff
 8016ebc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016ebe:	e007      	b.n	8016ed0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016ec0:	89fb      	ldrh	r3, [r7, #14]
 8016ec2:	1c5a      	adds	r2, r3, #1
 8016ec4:	81fa      	strh	r2, [r7, #14]
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	68bb      	ldr	r3, [r7, #8]
 8016eca:	4413      	add	r3, r2
 8016ecc:	2200      	movs	r2, #0
 8016ece:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016ed0:	89fb      	ldrh	r3, [r7, #14]
 8016ed2:	2b43      	cmp	r3, #67	; 0x43
 8016ed4:	d904      	bls.n	8016ee0 <dhcp_option_trailer+0x40>
 8016ed6:	89fb      	ldrh	r3, [r7, #14]
 8016ed8:	f003 0303 	and.w	r3, r3, #3
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d002      	beq.n	8016ee6 <dhcp_option_trailer+0x46>
 8016ee0:	89fb      	ldrh	r3, [r7, #14]
 8016ee2:	2b43      	cmp	r3, #67	; 0x43
 8016ee4:	d9ec      	bls.n	8016ec0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016ee6:	89fb      	ldrh	r3, [r7, #14]
 8016ee8:	33f0      	adds	r3, #240	; 0xf0
 8016eea:	b29b      	uxth	r3, r3
 8016eec:	4619      	mov	r1, r3
 8016eee:	6878      	ldr	r0, [r7, #4]
 8016ef0:	f7f6 fe02 	bl	800daf8 <pbuf_realloc>
}
 8016ef4:	bf00      	nop
 8016ef6:	3710      	adds	r7, #16
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}

08016efc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016efc:	b480      	push	{r7}
 8016efe:	b085      	sub	sp, #20
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d017      	beq.n	8016f3a <dhcp_supplied_address+0x3e>
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d013      	beq.n	8016f3a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f16:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	795b      	ldrb	r3, [r3, #5]
 8016f1c:	2b0a      	cmp	r3, #10
 8016f1e:	d007      	beq.n	8016f30 <dhcp_supplied_address+0x34>
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	795b      	ldrb	r3, [r3, #5]
 8016f24:	2b05      	cmp	r3, #5
 8016f26:	d003      	beq.n	8016f30 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016f2c:	2b04      	cmp	r3, #4
 8016f2e:	d101      	bne.n	8016f34 <dhcp_supplied_address+0x38>
 8016f30:	2301      	movs	r3, #1
 8016f32:	e000      	b.n	8016f36 <dhcp_supplied_address+0x3a>
 8016f34:	2300      	movs	r3, #0
 8016f36:	b2db      	uxtb	r3, r3
 8016f38:	e000      	b.n	8016f3c <dhcp_supplied_address+0x40>
  }
  return 0;
 8016f3a:	2300      	movs	r3, #0
}
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	3714      	adds	r7, #20
 8016f40:	46bd      	mov	sp, r7
 8016f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f46:	4770      	bx	lr

08016f48 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b082      	sub	sp, #8
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016f50:	4915      	ldr	r1, [pc, #84]	; (8016fa8 <etharp_free_entry+0x60>)
 8016f52:	687a      	ldr	r2, [r7, #4]
 8016f54:	4613      	mov	r3, r2
 8016f56:	005b      	lsls	r3, r3, #1
 8016f58:	4413      	add	r3, r2
 8016f5a:	00db      	lsls	r3, r3, #3
 8016f5c:	440b      	add	r3, r1
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d013      	beq.n	8016f8c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016f64:	4910      	ldr	r1, [pc, #64]	; (8016fa8 <etharp_free_entry+0x60>)
 8016f66:	687a      	ldr	r2, [r7, #4]
 8016f68:	4613      	mov	r3, r2
 8016f6a:	005b      	lsls	r3, r3, #1
 8016f6c:	4413      	add	r3, r2
 8016f6e:	00db      	lsls	r3, r3, #3
 8016f70:	440b      	add	r3, r1
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	4618      	mov	r0, r3
 8016f76:	f7f6 ff77 	bl	800de68 <pbuf_free>
    arp_table[i].q = NULL;
 8016f7a:	490b      	ldr	r1, [pc, #44]	; (8016fa8 <etharp_free_entry+0x60>)
 8016f7c:	687a      	ldr	r2, [r7, #4]
 8016f7e:	4613      	mov	r3, r2
 8016f80:	005b      	lsls	r3, r3, #1
 8016f82:	4413      	add	r3, r2
 8016f84:	00db      	lsls	r3, r3, #3
 8016f86:	440b      	add	r3, r1
 8016f88:	2200      	movs	r2, #0
 8016f8a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016f8c:	4906      	ldr	r1, [pc, #24]	; (8016fa8 <etharp_free_entry+0x60>)
 8016f8e:	687a      	ldr	r2, [r7, #4]
 8016f90:	4613      	mov	r3, r2
 8016f92:	005b      	lsls	r3, r3, #1
 8016f94:	4413      	add	r3, r2
 8016f96:	00db      	lsls	r3, r3, #3
 8016f98:	440b      	add	r3, r1
 8016f9a:	3314      	adds	r3, #20
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016fa0:	bf00      	nop
 8016fa2:	3708      	adds	r7, #8
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}
 8016fa8:	20008b30 	.word	0x20008b30

08016fac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b082      	sub	sp, #8
 8016fb0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	607b      	str	r3, [r7, #4]
 8016fb6:	e096      	b.n	80170e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016fb8:	494f      	ldr	r1, [pc, #316]	; (80170f8 <etharp_tmr+0x14c>)
 8016fba:	687a      	ldr	r2, [r7, #4]
 8016fbc:	4613      	mov	r3, r2
 8016fbe:	005b      	lsls	r3, r3, #1
 8016fc0:	4413      	add	r3, r2
 8016fc2:	00db      	lsls	r3, r3, #3
 8016fc4:	440b      	add	r3, r1
 8016fc6:	3314      	adds	r3, #20
 8016fc8:	781b      	ldrb	r3, [r3, #0]
 8016fca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016fcc:	78fb      	ldrb	r3, [r7, #3]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	f000 8086 	beq.w	80170e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016fd4:	4948      	ldr	r1, [pc, #288]	; (80170f8 <etharp_tmr+0x14c>)
 8016fd6:	687a      	ldr	r2, [r7, #4]
 8016fd8:	4613      	mov	r3, r2
 8016fda:	005b      	lsls	r3, r3, #1
 8016fdc:	4413      	add	r3, r2
 8016fde:	00db      	lsls	r3, r3, #3
 8016fe0:	440b      	add	r3, r1
 8016fe2:	3312      	adds	r3, #18
 8016fe4:	881b      	ldrh	r3, [r3, #0]
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	b298      	uxth	r0, r3
 8016fea:	4943      	ldr	r1, [pc, #268]	; (80170f8 <etharp_tmr+0x14c>)
 8016fec:	687a      	ldr	r2, [r7, #4]
 8016fee:	4613      	mov	r3, r2
 8016ff0:	005b      	lsls	r3, r3, #1
 8016ff2:	4413      	add	r3, r2
 8016ff4:	00db      	lsls	r3, r3, #3
 8016ff6:	440b      	add	r3, r1
 8016ff8:	3312      	adds	r3, #18
 8016ffa:	4602      	mov	r2, r0
 8016ffc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016ffe:	493e      	ldr	r1, [pc, #248]	; (80170f8 <etharp_tmr+0x14c>)
 8017000:	687a      	ldr	r2, [r7, #4]
 8017002:	4613      	mov	r3, r2
 8017004:	005b      	lsls	r3, r3, #1
 8017006:	4413      	add	r3, r2
 8017008:	00db      	lsls	r3, r3, #3
 801700a:	440b      	add	r3, r1
 801700c:	3312      	adds	r3, #18
 801700e:	881b      	ldrh	r3, [r3, #0]
 8017010:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017014:	d215      	bcs.n	8017042 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017016:	4938      	ldr	r1, [pc, #224]	; (80170f8 <etharp_tmr+0x14c>)
 8017018:	687a      	ldr	r2, [r7, #4]
 801701a:	4613      	mov	r3, r2
 801701c:	005b      	lsls	r3, r3, #1
 801701e:	4413      	add	r3, r2
 8017020:	00db      	lsls	r3, r3, #3
 8017022:	440b      	add	r3, r1
 8017024:	3314      	adds	r3, #20
 8017026:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017028:	2b01      	cmp	r3, #1
 801702a:	d10e      	bne.n	801704a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801702c:	4932      	ldr	r1, [pc, #200]	; (80170f8 <etharp_tmr+0x14c>)
 801702e:	687a      	ldr	r2, [r7, #4]
 8017030:	4613      	mov	r3, r2
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	4413      	add	r3, r2
 8017036:	00db      	lsls	r3, r3, #3
 8017038:	440b      	add	r3, r1
 801703a:	3312      	adds	r3, #18
 801703c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801703e:	2b04      	cmp	r3, #4
 8017040:	d903      	bls.n	801704a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f7ff ff80 	bl	8016f48 <etharp_free_entry>
 8017048:	e04a      	b.n	80170e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801704a:	492b      	ldr	r1, [pc, #172]	; (80170f8 <etharp_tmr+0x14c>)
 801704c:	687a      	ldr	r2, [r7, #4]
 801704e:	4613      	mov	r3, r2
 8017050:	005b      	lsls	r3, r3, #1
 8017052:	4413      	add	r3, r2
 8017054:	00db      	lsls	r3, r3, #3
 8017056:	440b      	add	r3, r1
 8017058:	3314      	adds	r3, #20
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	2b03      	cmp	r3, #3
 801705e:	d10a      	bne.n	8017076 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017060:	4925      	ldr	r1, [pc, #148]	; (80170f8 <etharp_tmr+0x14c>)
 8017062:	687a      	ldr	r2, [r7, #4]
 8017064:	4613      	mov	r3, r2
 8017066:	005b      	lsls	r3, r3, #1
 8017068:	4413      	add	r3, r2
 801706a:	00db      	lsls	r3, r3, #3
 801706c:	440b      	add	r3, r1
 801706e:	3314      	adds	r3, #20
 8017070:	2204      	movs	r2, #4
 8017072:	701a      	strb	r2, [r3, #0]
 8017074:	e034      	b.n	80170e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017076:	4920      	ldr	r1, [pc, #128]	; (80170f8 <etharp_tmr+0x14c>)
 8017078:	687a      	ldr	r2, [r7, #4]
 801707a:	4613      	mov	r3, r2
 801707c:	005b      	lsls	r3, r3, #1
 801707e:	4413      	add	r3, r2
 8017080:	00db      	lsls	r3, r3, #3
 8017082:	440b      	add	r3, r1
 8017084:	3314      	adds	r3, #20
 8017086:	781b      	ldrb	r3, [r3, #0]
 8017088:	2b04      	cmp	r3, #4
 801708a:	d10a      	bne.n	80170a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801708c:	491a      	ldr	r1, [pc, #104]	; (80170f8 <etharp_tmr+0x14c>)
 801708e:	687a      	ldr	r2, [r7, #4]
 8017090:	4613      	mov	r3, r2
 8017092:	005b      	lsls	r3, r3, #1
 8017094:	4413      	add	r3, r2
 8017096:	00db      	lsls	r3, r3, #3
 8017098:	440b      	add	r3, r1
 801709a:	3314      	adds	r3, #20
 801709c:	2202      	movs	r2, #2
 801709e:	701a      	strb	r2, [r3, #0]
 80170a0:	e01e      	b.n	80170e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80170a2:	4915      	ldr	r1, [pc, #84]	; (80170f8 <etharp_tmr+0x14c>)
 80170a4:	687a      	ldr	r2, [r7, #4]
 80170a6:	4613      	mov	r3, r2
 80170a8:	005b      	lsls	r3, r3, #1
 80170aa:	4413      	add	r3, r2
 80170ac:	00db      	lsls	r3, r3, #3
 80170ae:	440b      	add	r3, r1
 80170b0:	3314      	adds	r3, #20
 80170b2:	781b      	ldrb	r3, [r3, #0]
 80170b4:	2b01      	cmp	r3, #1
 80170b6:	d113      	bne.n	80170e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80170b8:	490f      	ldr	r1, [pc, #60]	; (80170f8 <etharp_tmr+0x14c>)
 80170ba:	687a      	ldr	r2, [r7, #4]
 80170bc:	4613      	mov	r3, r2
 80170be:	005b      	lsls	r3, r3, #1
 80170c0:	4413      	add	r3, r2
 80170c2:	00db      	lsls	r3, r3, #3
 80170c4:	440b      	add	r3, r1
 80170c6:	3308      	adds	r3, #8
 80170c8:	6818      	ldr	r0, [r3, #0]
 80170ca:	687a      	ldr	r2, [r7, #4]
 80170cc:	4613      	mov	r3, r2
 80170ce:	005b      	lsls	r3, r3, #1
 80170d0:	4413      	add	r3, r2
 80170d2:	00db      	lsls	r3, r3, #3
 80170d4:	4a08      	ldr	r2, [pc, #32]	; (80170f8 <etharp_tmr+0x14c>)
 80170d6:	4413      	add	r3, r2
 80170d8:	3304      	adds	r3, #4
 80170da:	4619      	mov	r1, r3
 80170dc:	f000 fe72 	bl	8017dc4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	3301      	adds	r3, #1
 80170e4:	607b      	str	r3, [r7, #4]
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	2b09      	cmp	r3, #9
 80170ea:	f77f af65 	ble.w	8016fb8 <etharp_tmr+0xc>
      }
    }
  }
}
 80170ee:	bf00      	nop
 80170f0:	bf00      	nop
 80170f2:	3708      	adds	r7, #8
 80170f4:	46bd      	mov	sp, r7
 80170f6:	bd80      	pop	{r7, pc}
 80170f8:	20008b30 	.word	0x20008b30

080170fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b08a      	sub	sp, #40	; 0x28
 8017100:	af00      	add	r7, sp, #0
 8017102:	60f8      	str	r0, [r7, #12]
 8017104:	460b      	mov	r3, r1
 8017106:	607a      	str	r2, [r7, #4]
 8017108:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801710a:	230a      	movs	r3, #10
 801710c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801710e:	230a      	movs	r3, #10
 8017110:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017112:	230a      	movs	r3, #10
 8017114:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017116:	2300      	movs	r3, #0
 8017118:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801711a:	230a      	movs	r3, #10
 801711c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801711e:	2300      	movs	r3, #0
 8017120:	83bb      	strh	r3, [r7, #28]
 8017122:	2300      	movs	r3, #0
 8017124:	837b      	strh	r3, [r7, #26]
 8017126:	2300      	movs	r3, #0
 8017128:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801712a:	2300      	movs	r3, #0
 801712c:	843b      	strh	r3, [r7, #32]
 801712e:	e0ae      	b.n	801728e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017130:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017134:	49a6      	ldr	r1, [pc, #664]	; (80173d0 <etharp_find_entry+0x2d4>)
 8017136:	4613      	mov	r3, r2
 8017138:	005b      	lsls	r3, r3, #1
 801713a:	4413      	add	r3, r2
 801713c:	00db      	lsls	r3, r3, #3
 801713e:	440b      	add	r3, r1
 8017140:	3314      	adds	r3, #20
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017146:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801714a:	2b0a      	cmp	r3, #10
 801714c:	d105      	bne.n	801715a <etharp_find_entry+0x5e>
 801714e:	7dfb      	ldrb	r3, [r7, #23]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d102      	bne.n	801715a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017154:	8c3b      	ldrh	r3, [r7, #32]
 8017156:	847b      	strh	r3, [r7, #34]	; 0x22
 8017158:	e095      	b.n	8017286 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801715a:	7dfb      	ldrb	r3, [r7, #23]
 801715c:	2b00      	cmp	r3, #0
 801715e:	f000 8092 	beq.w	8017286 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017162:	7dfb      	ldrb	r3, [r7, #23]
 8017164:	2b01      	cmp	r3, #1
 8017166:	d009      	beq.n	801717c <etharp_find_entry+0x80>
 8017168:	7dfb      	ldrb	r3, [r7, #23]
 801716a:	2b01      	cmp	r3, #1
 801716c:	d806      	bhi.n	801717c <etharp_find_entry+0x80>
 801716e:	4b99      	ldr	r3, [pc, #612]	; (80173d4 <etharp_find_entry+0x2d8>)
 8017170:	f240 1223 	movw	r2, #291	; 0x123
 8017174:	4998      	ldr	r1, [pc, #608]	; (80173d8 <etharp_find_entry+0x2dc>)
 8017176:	4899      	ldr	r0, [pc, #612]	; (80173dc <etharp_find_entry+0x2e0>)
 8017178:	f004 fbca 	bl	801b910 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d020      	beq.n	80171c4 <etharp_find_entry+0xc8>
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	6819      	ldr	r1, [r3, #0]
 8017186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801718a:	4891      	ldr	r0, [pc, #580]	; (80173d0 <etharp_find_entry+0x2d4>)
 801718c:	4613      	mov	r3, r2
 801718e:	005b      	lsls	r3, r3, #1
 8017190:	4413      	add	r3, r2
 8017192:	00db      	lsls	r3, r3, #3
 8017194:	4403      	add	r3, r0
 8017196:	3304      	adds	r3, #4
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	4299      	cmp	r1, r3
 801719c:	d112      	bne.n	80171c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d00c      	beq.n	80171be <etharp_find_entry+0xc2>
 80171a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171a8:	4989      	ldr	r1, [pc, #548]	; (80173d0 <etharp_find_entry+0x2d4>)
 80171aa:	4613      	mov	r3, r2
 80171ac:	005b      	lsls	r3, r3, #1
 80171ae:	4413      	add	r3, r2
 80171b0:	00db      	lsls	r3, r3, #3
 80171b2:	440b      	add	r3, r1
 80171b4:	3308      	adds	r3, #8
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	687a      	ldr	r2, [r7, #4]
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d102      	bne.n	80171c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80171be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171c2:	e100      	b.n	80173c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80171c4:	7dfb      	ldrb	r3, [r7, #23]
 80171c6:	2b01      	cmp	r3, #1
 80171c8:	d140      	bne.n	801724c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80171ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171ce:	4980      	ldr	r1, [pc, #512]	; (80173d0 <etharp_find_entry+0x2d4>)
 80171d0:	4613      	mov	r3, r2
 80171d2:	005b      	lsls	r3, r3, #1
 80171d4:	4413      	add	r3, r2
 80171d6:	00db      	lsls	r3, r3, #3
 80171d8:	440b      	add	r3, r1
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d01a      	beq.n	8017216 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80171e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171e4:	497a      	ldr	r1, [pc, #488]	; (80173d0 <etharp_find_entry+0x2d4>)
 80171e6:	4613      	mov	r3, r2
 80171e8:	005b      	lsls	r3, r3, #1
 80171ea:	4413      	add	r3, r2
 80171ec:	00db      	lsls	r3, r3, #3
 80171ee:	440b      	add	r3, r1
 80171f0:	3312      	adds	r3, #18
 80171f2:	881b      	ldrh	r3, [r3, #0]
 80171f4:	8bba      	ldrh	r2, [r7, #28]
 80171f6:	429a      	cmp	r2, r3
 80171f8:	d845      	bhi.n	8017286 <etharp_find_entry+0x18a>
            old_queue = i;
 80171fa:	8c3b      	ldrh	r3, [r7, #32]
 80171fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80171fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017202:	4973      	ldr	r1, [pc, #460]	; (80173d0 <etharp_find_entry+0x2d4>)
 8017204:	4613      	mov	r3, r2
 8017206:	005b      	lsls	r3, r3, #1
 8017208:	4413      	add	r3, r2
 801720a:	00db      	lsls	r3, r3, #3
 801720c:	440b      	add	r3, r1
 801720e:	3312      	adds	r3, #18
 8017210:	881b      	ldrh	r3, [r3, #0]
 8017212:	83bb      	strh	r3, [r7, #28]
 8017214:	e037      	b.n	8017286 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017216:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801721a:	496d      	ldr	r1, [pc, #436]	; (80173d0 <etharp_find_entry+0x2d4>)
 801721c:	4613      	mov	r3, r2
 801721e:	005b      	lsls	r3, r3, #1
 8017220:	4413      	add	r3, r2
 8017222:	00db      	lsls	r3, r3, #3
 8017224:	440b      	add	r3, r1
 8017226:	3312      	adds	r3, #18
 8017228:	881b      	ldrh	r3, [r3, #0]
 801722a:	8b7a      	ldrh	r2, [r7, #26]
 801722c:	429a      	cmp	r2, r3
 801722e:	d82a      	bhi.n	8017286 <etharp_find_entry+0x18a>
            old_pending = i;
 8017230:	8c3b      	ldrh	r3, [r7, #32]
 8017232:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017234:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017238:	4965      	ldr	r1, [pc, #404]	; (80173d0 <etharp_find_entry+0x2d4>)
 801723a:	4613      	mov	r3, r2
 801723c:	005b      	lsls	r3, r3, #1
 801723e:	4413      	add	r3, r2
 8017240:	00db      	lsls	r3, r3, #3
 8017242:	440b      	add	r3, r1
 8017244:	3312      	adds	r3, #18
 8017246:	881b      	ldrh	r3, [r3, #0]
 8017248:	837b      	strh	r3, [r7, #26]
 801724a:	e01c      	b.n	8017286 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801724c:	7dfb      	ldrb	r3, [r7, #23]
 801724e:	2b01      	cmp	r3, #1
 8017250:	d919      	bls.n	8017286 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017252:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017256:	495e      	ldr	r1, [pc, #376]	; (80173d0 <etharp_find_entry+0x2d4>)
 8017258:	4613      	mov	r3, r2
 801725a:	005b      	lsls	r3, r3, #1
 801725c:	4413      	add	r3, r2
 801725e:	00db      	lsls	r3, r3, #3
 8017260:	440b      	add	r3, r1
 8017262:	3312      	adds	r3, #18
 8017264:	881b      	ldrh	r3, [r3, #0]
 8017266:	8b3a      	ldrh	r2, [r7, #24]
 8017268:	429a      	cmp	r2, r3
 801726a:	d80c      	bhi.n	8017286 <etharp_find_entry+0x18a>
            old_stable = i;
 801726c:	8c3b      	ldrh	r3, [r7, #32]
 801726e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017274:	4956      	ldr	r1, [pc, #344]	; (80173d0 <etharp_find_entry+0x2d4>)
 8017276:	4613      	mov	r3, r2
 8017278:	005b      	lsls	r3, r3, #1
 801727a:	4413      	add	r3, r2
 801727c:	00db      	lsls	r3, r3, #3
 801727e:	440b      	add	r3, r1
 8017280:	3312      	adds	r3, #18
 8017282:	881b      	ldrh	r3, [r3, #0]
 8017284:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017286:	8c3b      	ldrh	r3, [r7, #32]
 8017288:	3301      	adds	r3, #1
 801728a:	b29b      	uxth	r3, r3
 801728c:	843b      	strh	r3, [r7, #32]
 801728e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017292:	2b09      	cmp	r3, #9
 8017294:	f77f af4c 	ble.w	8017130 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017298:	7afb      	ldrb	r3, [r7, #11]
 801729a:	f003 0302 	and.w	r3, r3, #2
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d108      	bne.n	80172b4 <etharp_find_entry+0x1b8>
 80172a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80172a6:	2b0a      	cmp	r3, #10
 80172a8:	d107      	bne.n	80172ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80172aa:	7afb      	ldrb	r3, [r7, #11]
 80172ac:	f003 0301 	and.w	r3, r3, #1
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d102      	bne.n	80172ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80172b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172b8:	e085      	b.n	80173c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80172ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80172be:	2b09      	cmp	r3, #9
 80172c0:	dc02      	bgt.n	80172c8 <etharp_find_entry+0x1cc>
    i = empty;
 80172c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172c4:	843b      	strh	r3, [r7, #32]
 80172c6:	e039      	b.n	801733c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80172c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80172cc:	2b09      	cmp	r3, #9
 80172ce:	dc14      	bgt.n	80172fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80172d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80172d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80172d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80172d8:	493d      	ldr	r1, [pc, #244]	; (80173d0 <etharp_find_entry+0x2d4>)
 80172da:	4613      	mov	r3, r2
 80172dc:	005b      	lsls	r3, r3, #1
 80172de:	4413      	add	r3, r2
 80172e0:	00db      	lsls	r3, r3, #3
 80172e2:	440b      	add	r3, r1
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d018      	beq.n	801731c <etharp_find_entry+0x220>
 80172ea:	4b3a      	ldr	r3, [pc, #232]	; (80173d4 <etharp_find_entry+0x2d8>)
 80172ec:	f240 126d 	movw	r2, #365	; 0x16d
 80172f0:	493b      	ldr	r1, [pc, #236]	; (80173e0 <etharp_find_entry+0x2e4>)
 80172f2:	483a      	ldr	r0, [pc, #232]	; (80173dc <etharp_find_entry+0x2e0>)
 80172f4:	f004 fb0c 	bl	801b910 <iprintf>
 80172f8:	e010      	b.n	801731c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80172fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80172fe:	2b09      	cmp	r3, #9
 8017300:	dc02      	bgt.n	8017308 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017302:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017304:	843b      	strh	r3, [r7, #32]
 8017306:	e009      	b.n	801731c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017308:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801730c:	2b09      	cmp	r3, #9
 801730e:	dc02      	bgt.n	8017316 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017310:	8bfb      	ldrh	r3, [r7, #30]
 8017312:	843b      	strh	r3, [r7, #32]
 8017314:	e002      	b.n	801731c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801731a:	e054      	b.n	80173c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801731c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017320:	2b09      	cmp	r3, #9
 8017322:	dd06      	ble.n	8017332 <etharp_find_entry+0x236>
 8017324:	4b2b      	ldr	r3, [pc, #172]	; (80173d4 <etharp_find_entry+0x2d8>)
 8017326:	f240 127f 	movw	r2, #383	; 0x17f
 801732a:	492e      	ldr	r1, [pc, #184]	; (80173e4 <etharp_find_entry+0x2e8>)
 801732c:	482b      	ldr	r0, [pc, #172]	; (80173dc <etharp_find_entry+0x2e0>)
 801732e:	f004 faef 	bl	801b910 <iprintf>
    etharp_free_entry(i);
 8017332:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017336:	4618      	mov	r0, r3
 8017338:	f7ff fe06 	bl	8016f48 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801733c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017340:	2b09      	cmp	r3, #9
 8017342:	dd06      	ble.n	8017352 <etharp_find_entry+0x256>
 8017344:	4b23      	ldr	r3, [pc, #140]	; (80173d4 <etharp_find_entry+0x2d8>)
 8017346:	f240 1283 	movw	r2, #387	; 0x183
 801734a:	4926      	ldr	r1, [pc, #152]	; (80173e4 <etharp_find_entry+0x2e8>)
 801734c:	4823      	ldr	r0, [pc, #140]	; (80173dc <etharp_find_entry+0x2e0>)
 801734e:	f004 fadf 	bl	801b910 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017356:	491e      	ldr	r1, [pc, #120]	; (80173d0 <etharp_find_entry+0x2d4>)
 8017358:	4613      	mov	r3, r2
 801735a:	005b      	lsls	r3, r3, #1
 801735c:	4413      	add	r3, r2
 801735e:	00db      	lsls	r3, r3, #3
 8017360:	440b      	add	r3, r1
 8017362:	3314      	adds	r3, #20
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d006      	beq.n	8017378 <etharp_find_entry+0x27c>
 801736a:	4b1a      	ldr	r3, [pc, #104]	; (80173d4 <etharp_find_entry+0x2d8>)
 801736c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017370:	491d      	ldr	r1, [pc, #116]	; (80173e8 <etharp_find_entry+0x2ec>)
 8017372:	481a      	ldr	r0, [pc, #104]	; (80173dc <etharp_find_entry+0x2e0>)
 8017374:	f004 facc 	bl	801b910 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d00b      	beq.n	8017396 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801737e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	6819      	ldr	r1, [r3, #0]
 8017386:	4812      	ldr	r0, [pc, #72]	; (80173d0 <etharp_find_entry+0x2d4>)
 8017388:	4613      	mov	r3, r2
 801738a:	005b      	lsls	r3, r3, #1
 801738c:	4413      	add	r3, r2
 801738e:	00db      	lsls	r3, r3, #3
 8017390:	4403      	add	r3, r0
 8017392:	3304      	adds	r3, #4
 8017394:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017396:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801739a:	490d      	ldr	r1, [pc, #52]	; (80173d0 <etharp_find_entry+0x2d4>)
 801739c:	4613      	mov	r3, r2
 801739e:	005b      	lsls	r3, r3, #1
 80173a0:	4413      	add	r3, r2
 80173a2:	00db      	lsls	r3, r3, #3
 80173a4:	440b      	add	r3, r1
 80173a6:	3312      	adds	r3, #18
 80173a8:	2200      	movs	r2, #0
 80173aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80173ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80173b0:	4907      	ldr	r1, [pc, #28]	; (80173d0 <etharp_find_entry+0x2d4>)
 80173b2:	4613      	mov	r3, r2
 80173b4:	005b      	lsls	r3, r3, #1
 80173b6:	4413      	add	r3, r2
 80173b8:	00db      	lsls	r3, r3, #3
 80173ba:	440b      	add	r3, r1
 80173bc:	3308      	adds	r3, #8
 80173be:	687a      	ldr	r2, [r7, #4]
 80173c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80173c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80173c6:	4618      	mov	r0, r3
 80173c8:	3728      	adds	r7, #40	; 0x28
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd80      	pop	{r7, pc}
 80173ce:	bf00      	nop
 80173d0:	20008b30 	.word	0x20008b30
 80173d4:	0802026c 	.word	0x0802026c
 80173d8:	080202a4 	.word	0x080202a4
 80173dc:	080202e4 	.word	0x080202e4
 80173e0:	0802030c 	.word	0x0802030c
 80173e4:	08020324 	.word	0x08020324
 80173e8:	08020338 	.word	0x08020338

080173ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b088      	sub	sp, #32
 80173f0:	af02      	add	r7, sp, #8
 80173f2:	60f8      	str	r0, [r7, #12]
 80173f4:	60b9      	str	r1, [r7, #8]
 80173f6:	607a      	str	r2, [r7, #4]
 80173f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017400:	2b06      	cmp	r3, #6
 8017402:	d006      	beq.n	8017412 <etharp_update_arp_entry+0x26>
 8017404:	4b48      	ldr	r3, [pc, #288]	; (8017528 <etharp_update_arp_entry+0x13c>)
 8017406:	f240 12a9 	movw	r2, #425	; 0x1a9
 801740a:	4948      	ldr	r1, [pc, #288]	; (801752c <etharp_update_arp_entry+0x140>)
 801740c:	4848      	ldr	r0, [pc, #288]	; (8017530 <etharp_update_arp_entry+0x144>)
 801740e:	f004 fa7f 	bl	801b910 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017412:	68bb      	ldr	r3, [r7, #8]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d012      	beq.n	801743e <etharp_update_arp_entry+0x52>
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d00e      	beq.n	801743e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	68f9      	ldr	r1, [r7, #12]
 8017426:	4618      	mov	r0, r3
 8017428:	f001 f920 	bl	801866c <ip4_addr_isbroadcast_u32>
 801742c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801742e:	2b00      	cmp	r3, #0
 8017430:	d105      	bne.n	801743e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017432:	68bb      	ldr	r3, [r7, #8]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801743a:	2be0      	cmp	r3, #224	; 0xe0
 801743c:	d102      	bne.n	8017444 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801743e:	f06f 030f 	mvn.w	r3, #15
 8017442:	e06c      	b.n	801751e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017444:	78fb      	ldrb	r3, [r7, #3]
 8017446:	68fa      	ldr	r2, [r7, #12]
 8017448:	4619      	mov	r1, r3
 801744a:	68b8      	ldr	r0, [r7, #8]
 801744c:	f7ff fe56 	bl	80170fc <etharp_find_entry>
 8017450:	4603      	mov	r3, r0
 8017452:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017454:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017458:	2b00      	cmp	r3, #0
 801745a:	da02      	bge.n	8017462 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801745c:	8afb      	ldrh	r3, [r7, #22]
 801745e:	b25b      	sxtb	r3, r3
 8017460:	e05d      	b.n	801751e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017462:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017466:	4933      	ldr	r1, [pc, #204]	; (8017534 <etharp_update_arp_entry+0x148>)
 8017468:	4613      	mov	r3, r2
 801746a:	005b      	lsls	r3, r3, #1
 801746c:	4413      	add	r3, r2
 801746e:	00db      	lsls	r3, r3, #3
 8017470:	440b      	add	r3, r1
 8017472:	3314      	adds	r3, #20
 8017474:	2202      	movs	r2, #2
 8017476:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017478:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801747c:	492d      	ldr	r1, [pc, #180]	; (8017534 <etharp_update_arp_entry+0x148>)
 801747e:	4613      	mov	r3, r2
 8017480:	005b      	lsls	r3, r3, #1
 8017482:	4413      	add	r3, r2
 8017484:	00db      	lsls	r3, r3, #3
 8017486:	440b      	add	r3, r1
 8017488:	3308      	adds	r3, #8
 801748a:	68fa      	ldr	r2, [r7, #12]
 801748c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801748e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017492:	4613      	mov	r3, r2
 8017494:	005b      	lsls	r3, r3, #1
 8017496:	4413      	add	r3, r2
 8017498:	00db      	lsls	r3, r3, #3
 801749a:	3308      	adds	r3, #8
 801749c:	4a25      	ldr	r2, [pc, #148]	; (8017534 <etharp_update_arp_entry+0x148>)
 801749e:	4413      	add	r3, r2
 80174a0:	3304      	adds	r3, #4
 80174a2:	2206      	movs	r2, #6
 80174a4:	6879      	ldr	r1, [r7, #4]
 80174a6:	4618      	mov	r0, r3
 80174a8:	f004 fa1c 	bl	801b8e4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80174ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80174b0:	4920      	ldr	r1, [pc, #128]	; (8017534 <etharp_update_arp_entry+0x148>)
 80174b2:	4613      	mov	r3, r2
 80174b4:	005b      	lsls	r3, r3, #1
 80174b6:	4413      	add	r3, r2
 80174b8:	00db      	lsls	r3, r3, #3
 80174ba:	440b      	add	r3, r1
 80174bc:	3312      	adds	r3, #18
 80174be:	2200      	movs	r2, #0
 80174c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80174c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80174c6:	491b      	ldr	r1, [pc, #108]	; (8017534 <etharp_update_arp_entry+0x148>)
 80174c8:	4613      	mov	r3, r2
 80174ca:	005b      	lsls	r3, r3, #1
 80174cc:	4413      	add	r3, r2
 80174ce:	00db      	lsls	r3, r3, #3
 80174d0:	440b      	add	r3, r1
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d021      	beq.n	801751c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80174d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80174dc:	4915      	ldr	r1, [pc, #84]	; (8017534 <etharp_update_arp_entry+0x148>)
 80174de:	4613      	mov	r3, r2
 80174e0:	005b      	lsls	r3, r3, #1
 80174e2:	4413      	add	r3, r2
 80174e4:	00db      	lsls	r3, r3, #3
 80174e6:	440b      	add	r3, r1
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80174ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80174f0:	4910      	ldr	r1, [pc, #64]	; (8017534 <etharp_update_arp_entry+0x148>)
 80174f2:	4613      	mov	r3, r2
 80174f4:	005b      	lsls	r3, r3, #1
 80174f6:	4413      	add	r3, r2
 80174f8:	00db      	lsls	r3, r3, #3
 80174fa:	440b      	add	r3, r1
 80174fc:	2200      	movs	r2, #0
 80174fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801750a:	9300      	str	r3, [sp, #0]
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6939      	ldr	r1, [r7, #16]
 8017510:	68f8      	ldr	r0, [r7, #12]
 8017512:	f002 f8f1 	bl	80196f8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017516:	6938      	ldr	r0, [r7, #16]
 8017518:	f7f6 fca6 	bl	800de68 <pbuf_free>
  }
  return ERR_OK;
 801751c:	2300      	movs	r3, #0
}
 801751e:	4618      	mov	r0, r3
 8017520:	3718      	adds	r7, #24
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}
 8017526:	bf00      	nop
 8017528:	0802026c 	.word	0x0802026c
 801752c:	08020364 	.word	0x08020364
 8017530:	080202e4 	.word	0x080202e4
 8017534:	20008b30 	.word	0x20008b30

08017538 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b084      	sub	sp, #16
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017540:	2300      	movs	r3, #0
 8017542:	60fb      	str	r3, [r7, #12]
 8017544:	e01e      	b.n	8017584 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017546:	4913      	ldr	r1, [pc, #76]	; (8017594 <etharp_cleanup_netif+0x5c>)
 8017548:	68fa      	ldr	r2, [r7, #12]
 801754a:	4613      	mov	r3, r2
 801754c:	005b      	lsls	r3, r3, #1
 801754e:	4413      	add	r3, r2
 8017550:	00db      	lsls	r3, r3, #3
 8017552:	440b      	add	r3, r1
 8017554:	3314      	adds	r3, #20
 8017556:	781b      	ldrb	r3, [r3, #0]
 8017558:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801755a:	7afb      	ldrb	r3, [r7, #11]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d00e      	beq.n	801757e <etharp_cleanup_netif+0x46>
 8017560:	490c      	ldr	r1, [pc, #48]	; (8017594 <etharp_cleanup_netif+0x5c>)
 8017562:	68fa      	ldr	r2, [r7, #12]
 8017564:	4613      	mov	r3, r2
 8017566:	005b      	lsls	r3, r3, #1
 8017568:	4413      	add	r3, r2
 801756a:	00db      	lsls	r3, r3, #3
 801756c:	440b      	add	r3, r1
 801756e:	3308      	adds	r3, #8
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	687a      	ldr	r2, [r7, #4]
 8017574:	429a      	cmp	r2, r3
 8017576:	d102      	bne.n	801757e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017578:	68f8      	ldr	r0, [r7, #12]
 801757a:	f7ff fce5 	bl	8016f48 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	3301      	adds	r3, #1
 8017582:	60fb      	str	r3, [r7, #12]
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	2b09      	cmp	r3, #9
 8017588:	dddd      	ble.n	8017546 <etharp_cleanup_netif+0xe>
    }
  }
}
 801758a:	bf00      	nop
 801758c:	bf00      	nop
 801758e:	3710      	adds	r7, #16
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	20008b30 	.word	0x20008b30

08017598 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017598:	b5b0      	push	{r4, r5, r7, lr}
 801759a:	b08a      	sub	sp, #40	; 0x28
 801759c:	af04      	add	r7, sp, #16
 801759e:	6078      	str	r0, [r7, #4]
 80175a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d107      	bne.n	80175b8 <etharp_input+0x20>
 80175a8:	4b3f      	ldr	r3, [pc, #252]	; (80176a8 <etharp_input+0x110>)
 80175aa:	f240 228a 	movw	r2, #650	; 0x28a
 80175ae:	493f      	ldr	r1, [pc, #252]	; (80176ac <etharp_input+0x114>)
 80175b0:	483f      	ldr	r0, [pc, #252]	; (80176b0 <etharp_input+0x118>)
 80175b2:	f004 f9ad 	bl	801b910 <iprintf>
 80175b6:	e074      	b.n	80176a2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	685b      	ldr	r3, [r3, #4]
 80175bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	881b      	ldrh	r3, [r3, #0]
 80175c2:	b29b      	uxth	r3, r3
 80175c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80175c8:	d10c      	bne.n	80175e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80175ca:	693b      	ldr	r3, [r7, #16]
 80175cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80175ce:	2b06      	cmp	r3, #6
 80175d0:	d108      	bne.n	80175e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80175d2:	693b      	ldr	r3, [r7, #16]
 80175d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80175d6:	2b04      	cmp	r3, #4
 80175d8:	d104      	bne.n	80175e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80175da:	693b      	ldr	r3, [r7, #16]
 80175dc:	885b      	ldrh	r3, [r3, #2]
 80175de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80175e0:	2b08      	cmp	r3, #8
 80175e2:	d003      	beq.n	80175ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f7f6 fc3f 	bl	800de68 <pbuf_free>
    return;
 80175ea:	e05a      	b.n	80176a2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80175ec:	693b      	ldr	r3, [r7, #16]
 80175ee:	330e      	adds	r3, #14
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80175f4:	693b      	ldr	r3, [r7, #16]
 80175f6:	3318      	adds	r3, #24
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80175fc:	683b      	ldr	r3, [r7, #0]
 80175fe:	3304      	adds	r3, #4
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d102      	bne.n	801760c <etharp_input+0x74>
    for_us = 0;
 8017606:	2300      	movs	r3, #0
 8017608:	75fb      	strb	r3, [r7, #23]
 801760a:	e009      	b.n	8017620 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801760c:	68ba      	ldr	r2, [r7, #8]
 801760e:	683b      	ldr	r3, [r7, #0]
 8017610:	3304      	adds	r3, #4
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	429a      	cmp	r2, r3
 8017616:	bf0c      	ite	eq
 8017618:	2301      	moveq	r3, #1
 801761a:	2300      	movne	r3, #0
 801761c:	b2db      	uxtb	r3, r3
 801761e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017620:	693b      	ldr	r3, [r7, #16]
 8017622:	f103 0208 	add.w	r2, r3, #8
 8017626:	7dfb      	ldrb	r3, [r7, #23]
 8017628:	2b00      	cmp	r3, #0
 801762a:	d001      	beq.n	8017630 <etharp_input+0x98>
 801762c:	2301      	movs	r3, #1
 801762e:	e000      	b.n	8017632 <etharp_input+0x9a>
 8017630:	2302      	movs	r3, #2
 8017632:	f107 010c 	add.w	r1, r7, #12
 8017636:	6838      	ldr	r0, [r7, #0]
 8017638:	f7ff fed8 	bl	80173ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801763c:	693b      	ldr	r3, [r7, #16]
 801763e:	88db      	ldrh	r3, [r3, #6]
 8017640:	b29b      	uxth	r3, r3
 8017642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017646:	d003      	beq.n	8017650 <etharp_input+0xb8>
 8017648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801764c:	d01e      	beq.n	801768c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801764e:	e025      	b.n	801769c <etharp_input+0x104>
      if (for_us) {
 8017650:	7dfb      	ldrb	r3, [r7, #23]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d021      	beq.n	801769a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017656:	683b      	ldr	r3, [r7, #0]
 8017658:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801765c:	693b      	ldr	r3, [r7, #16]
 801765e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017662:	683b      	ldr	r3, [r7, #0]
 8017664:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017668:	683b      	ldr	r3, [r7, #0]
 801766a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801766c:	693a      	ldr	r2, [r7, #16]
 801766e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017670:	2102      	movs	r1, #2
 8017672:	9103      	str	r1, [sp, #12]
 8017674:	f107 010c 	add.w	r1, r7, #12
 8017678:	9102      	str	r1, [sp, #8]
 801767a:	9201      	str	r2, [sp, #4]
 801767c:	9300      	str	r3, [sp, #0]
 801767e:	462b      	mov	r3, r5
 8017680:	4622      	mov	r2, r4
 8017682:	4601      	mov	r1, r0
 8017684:	6838      	ldr	r0, [r7, #0]
 8017686:	f000 faef 	bl	8017c68 <etharp_raw>
      break;
 801768a:	e006      	b.n	801769a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801768c:	f107 030c 	add.w	r3, r7, #12
 8017690:	4619      	mov	r1, r3
 8017692:	6838      	ldr	r0, [r7, #0]
 8017694:	f7fe f9fc 	bl	8015a90 <dhcp_arp_reply>
      break;
 8017698:	e000      	b.n	801769c <etharp_input+0x104>
      break;
 801769a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801769c:	6878      	ldr	r0, [r7, #4]
 801769e:	f7f6 fbe3 	bl	800de68 <pbuf_free>
}
 80176a2:	3718      	adds	r7, #24
 80176a4:	46bd      	mov	sp, r7
 80176a6:	bdb0      	pop	{r4, r5, r7, pc}
 80176a8:	0802026c 	.word	0x0802026c
 80176ac:	080203bc 	.word	0x080203bc
 80176b0:	080202e4 	.word	0x080202e4

080176b4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b086      	sub	sp, #24
 80176b8:	af02      	add	r7, sp, #8
 80176ba:	60f8      	str	r0, [r7, #12]
 80176bc:	60b9      	str	r1, [r7, #8]
 80176be:	4613      	mov	r3, r2
 80176c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80176c2:	79fa      	ldrb	r2, [r7, #7]
 80176c4:	4944      	ldr	r1, [pc, #272]	; (80177d8 <etharp_output_to_arp_index+0x124>)
 80176c6:	4613      	mov	r3, r2
 80176c8:	005b      	lsls	r3, r3, #1
 80176ca:	4413      	add	r3, r2
 80176cc:	00db      	lsls	r3, r3, #3
 80176ce:	440b      	add	r3, r1
 80176d0:	3314      	adds	r3, #20
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	2b01      	cmp	r3, #1
 80176d6:	d806      	bhi.n	80176e6 <etharp_output_to_arp_index+0x32>
 80176d8:	4b40      	ldr	r3, [pc, #256]	; (80177dc <etharp_output_to_arp_index+0x128>)
 80176da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80176de:	4940      	ldr	r1, [pc, #256]	; (80177e0 <etharp_output_to_arp_index+0x12c>)
 80176e0:	4840      	ldr	r0, [pc, #256]	; (80177e4 <etharp_output_to_arp_index+0x130>)
 80176e2:	f004 f915 	bl	801b910 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80176e6:	79fa      	ldrb	r2, [r7, #7]
 80176e8:	493b      	ldr	r1, [pc, #236]	; (80177d8 <etharp_output_to_arp_index+0x124>)
 80176ea:	4613      	mov	r3, r2
 80176ec:	005b      	lsls	r3, r3, #1
 80176ee:	4413      	add	r3, r2
 80176f0:	00db      	lsls	r3, r3, #3
 80176f2:	440b      	add	r3, r1
 80176f4:	3314      	adds	r3, #20
 80176f6:	781b      	ldrb	r3, [r3, #0]
 80176f8:	2b02      	cmp	r3, #2
 80176fa:	d153      	bne.n	80177a4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80176fc:	79fa      	ldrb	r2, [r7, #7]
 80176fe:	4936      	ldr	r1, [pc, #216]	; (80177d8 <etharp_output_to_arp_index+0x124>)
 8017700:	4613      	mov	r3, r2
 8017702:	005b      	lsls	r3, r3, #1
 8017704:	4413      	add	r3, r2
 8017706:	00db      	lsls	r3, r3, #3
 8017708:	440b      	add	r3, r1
 801770a:	3312      	adds	r3, #18
 801770c:	881b      	ldrh	r3, [r3, #0]
 801770e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017712:	d919      	bls.n	8017748 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017714:	79fa      	ldrb	r2, [r7, #7]
 8017716:	4613      	mov	r3, r2
 8017718:	005b      	lsls	r3, r3, #1
 801771a:	4413      	add	r3, r2
 801771c:	00db      	lsls	r3, r3, #3
 801771e:	4a2e      	ldr	r2, [pc, #184]	; (80177d8 <etharp_output_to_arp_index+0x124>)
 8017720:	4413      	add	r3, r2
 8017722:	3304      	adds	r3, #4
 8017724:	4619      	mov	r1, r3
 8017726:	68f8      	ldr	r0, [r7, #12]
 8017728:	f000 fb4c 	bl	8017dc4 <etharp_request>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d138      	bne.n	80177a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017732:	79fa      	ldrb	r2, [r7, #7]
 8017734:	4928      	ldr	r1, [pc, #160]	; (80177d8 <etharp_output_to_arp_index+0x124>)
 8017736:	4613      	mov	r3, r2
 8017738:	005b      	lsls	r3, r3, #1
 801773a:	4413      	add	r3, r2
 801773c:	00db      	lsls	r3, r3, #3
 801773e:	440b      	add	r3, r1
 8017740:	3314      	adds	r3, #20
 8017742:	2203      	movs	r2, #3
 8017744:	701a      	strb	r2, [r3, #0]
 8017746:	e02d      	b.n	80177a4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017748:	79fa      	ldrb	r2, [r7, #7]
 801774a:	4923      	ldr	r1, [pc, #140]	; (80177d8 <etharp_output_to_arp_index+0x124>)
 801774c:	4613      	mov	r3, r2
 801774e:	005b      	lsls	r3, r3, #1
 8017750:	4413      	add	r3, r2
 8017752:	00db      	lsls	r3, r3, #3
 8017754:	440b      	add	r3, r1
 8017756:	3312      	adds	r3, #18
 8017758:	881b      	ldrh	r3, [r3, #0]
 801775a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801775e:	d321      	bcc.n	80177a4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017760:	79fa      	ldrb	r2, [r7, #7]
 8017762:	4613      	mov	r3, r2
 8017764:	005b      	lsls	r3, r3, #1
 8017766:	4413      	add	r3, r2
 8017768:	00db      	lsls	r3, r3, #3
 801776a:	4a1b      	ldr	r2, [pc, #108]	; (80177d8 <etharp_output_to_arp_index+0x124>)
 801776c:	4413      	add	r3, r2
 801776e:	1d19      	adds	r1, r3, #4
 8017770:	79fa      	ldrb	r2, [r7, #7]
 8017772:	4613      	mov	r3, r2
 8017774:	005b      	lsls	r3, r3, #1
 8017776:	4413      	add	r3, r2
 8017778:	00db      	lsls	r3, r3, #3
 801777a:	3308      	adds	r3, #8
 801777c:	4a16      	ldr	r2, [pc, #88]	; (80177d8 <etharp_output_to_arp_index+0x124>)
 801777e:	4413      	add	r3, r2
 8017780:	3304      	adds	r3, #4
 8017782:	461a      	mov	r2, r3
 8017784:	68f8      	ldr	r0, [r7, #12]
 8017786:	f000 fafb 	bl	8017d80 <etharp_request_dst>
 801778a:	4603      	mov	r3, r0
 801778c:	2b00      	cmp	r3, #0
 801778e:	d109      	bne.n	80177a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017790:	79fa      	ldrb	r2, [r7, #7]
 8017792:	4911      	ldr	r1, [pc, #68]	; (80177d8 <etharp_output_to_arp_index+0x124>)
 8017794:	4613      	mov	r3, r2
 8017796:	005b      	lsls	r3, r3, #1
 8017798:	4413      	add	r3, r2
 801779a:	00db      	lsls	r3, r3, #3
 801779c:	440b      	add	r3, r1
 801779e:	3314      	adds	r3, #20
 80177a0:	2203      	movs	r2, #3
 80177a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80177aa:	79fa      	ldrb	r2, [r7, #7]
 80177ac:	4613      	mov	r3, r2
 80177ae:	005b      	lsls	r3, r3, #1
 80177b0:	4413      	add	r3, r2
 80177b2:	00db      	lsls	r3, r3, #3
 80177b4:	3308      	adds	r3, #8
 80177b6:	4a08      	ldr	r2, [pc, #32]	; (80177d8 <etharp_output_to_arp_index+0x124>)
 80177b8:	4413      	add	r3, r2
 80177ba:	3304      	adds	r3, #4
 80177bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80177c0:	9200      	str	r2, [sp, #0]
 80177c2:	460a      	mov	r2, r1
 80177c4:	68b9      	ldr	r1, [r7, #8]
 80177c6:	68f8      	ldr	r0, [r7, #12]
 80177c8:	f001 ff96 	bl	80196f8 <ethernet_output>
 80177cc:	4603      	mov	r3, r0
}
 80177ce:	4618      	mov	r0, r3
 80177d0:	3710      	adds	r7, #16
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bd80      	pop	{r7, pc}
 80177d6:	bf00      	nop
 80177d8:	20008b30 	.word	0x20008b30
 80177dc:	0802026c 	.word	0x0802026c
 80177e0:	080203dc 	.word	0x080203dc
 80177e4:	080202e4 	.word	0x080202e4

080177e8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b08a      	sub	sp, #40	; 0x28
 80177ec:	af02      	add	r7, sp, #8
 80177ee:	60f8      	str	r0, [r7, #12]
 80177f0:	60b9      	str	r1, [r7, #8]
 80177f2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d106      	bne.n	801780c <etharp_output+0x24>
 80177fe:	4b73      	ldr	r3, [pc, #460]	; (80179cc <etharp_output+0x1e4>)
 8017800:	f240 321e 	movw	r2, #798	; 0x31e
 8017804:	4972      	ldr	r1, [pc, #456]	; (80179d0 <etharp_output+0x1e8>)
 8017806:	4873      	ldr	r0, [pc, #460]	; (80179d4 <etharp_output+0x1ec>)
 8017808:	f004 f882 	bl	801b910 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801780c:	68bb      	ldr	r3, [r7, #8]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d106      	bne.n	8017820 <etharp_output+0x38>
 8017812:	4b6e      	ldr	r3, [pc, #440]	; (80179cc <etharp_output+0x1e4>)
 8017814:	f240 321f 	movw	r2, #799	; 0x31f
 8017818:	496f      	ldr	r1, [pc, #444]	; (80179d8 <etharp_output+0x1f0>)
 801781a:	486e      	ldr	r0, [pc, #440]	; (80179d4 <etharp_output+0x1ec>)
 801781c:	f004 f878 	bl	801b910 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d106      	bne.n	8017834 <etharp_output+0x4c>
 8017826:	4b69      	ldr	r3, [pc, #420]	; (80179cc <etharp_output+0x1e4>)
 8017828:	f44f 7248 	mov.w	r2, #800	; 0x320
 801782c:	496b      	ldr	r1, [pc, #428]	; (80179dc <etharp_output+0x1f4>)
 801782e:	4869      	ldr	r0, [pc, #420]	; (80179d4 <etharp_output+0x1ec>)
 8017830:	f004 f86e 	bl	801b910 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	68f9      	ldr	r1, [r7, #12]
 801783a:	4618      	mov	r0, r3
 801783c:	f000 ff16 	bl	801866c <ip4_addr_isbroadcast_u32>
 8017840:	4603      	mov	r3, r0
 8017842:	2b00      	cmp	r3, #0
 8017844:	d002      	beq.n	801784c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017846:	4b66      	ldr	r3, [pc, #408]	; (80179e0 <etharp_output+0x1f8>)
 8017848:	61fb      	str	r3, [r7, #28]
 801784a:	e0af      	b.n	80179ac <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017854:	2be0      	cmp	r3, #224	; 0xe0
 8017856:	d118      	bne.n	801788a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017858:	2301      	movs	r3, #1
 801785a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801785c:	2300      	movs	r3, #0
 801785e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017860:	235e      	movs	r3, #94	; 0x5e
 8017862:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	3301      	adds	r3, #1
 8017868:	781b      	ldrb	r3, [r3, #0]
 801786a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801786e:	b2db      	uxtb	r3, r3
 8017870:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	3302      	adds	r3, #2
 8017876:	781b      	ldrb	r3, [r3, #0]
 8017878:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	3303      	adds	r3, #3
 801787e:	781b      	ldrb	r3, [r3, #0]
 8017880:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017882:	f107 0310 	add.w	r3, r7, #16
 8017886:	61fb      	str	r3, [r7, #28]
 8017888:	e090      	b.n	80179ac <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	681a      	ldr	r2, [r3, #0]
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	3304      	adds	r3, #4
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	405a      	eors	r2, r3
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	3308      	adds	r3, #8
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	4013      	ands	r3, r2
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d012      	beq.n	80178c8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80178a8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80178ac:	4293      	cmp	r3, r2
 80178ae:	d00b      	beq.n	80178c8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	330c      	adds	r3, #12
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d003      	beq.n	80178c2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	330c      	adds	r3, #12
 80178be:	61bb      	str	r3, [r7, #24]
 80178c0:	e002      	b.n	80178c8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80178c2:	f06f 0303 	mvn.w	r3, #3
 80178c6:	e07d      	b.n	80179c4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80178c8:	4b46      	ldr	r3, [pc, #280]	; (80179e4 <etharp_output+0x1fc>)
 80178ca:	781b      	ldrb	r3, [r3, #0]
 80178cc:	4619      	mov	r1, r3
 80178ce:	4a46      	ldr	r2, [pc, #280]	; (80179e8 <etharp_output+0x200>)
 80178d0:	460b      	mov	r3, r1
 80178d2:	005b      	lsls	r3, r3, #1
 80178d4:	440b      	add	r3, r1
 80178d6:	00db      	lsls	r3, r3, #3
 80178d8:	4413      	add	r3, r2
 80178da:	3314      	adds	r3, #20
 80178dc:	781b      	ldrb	r3, [r3, #0]
 80178de:	2b01      	cmp	r3, #1
 80178e0:	d925      	bls.n	801792e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80178e2:	4b40      	ldr	r3, [pc, #256]	; (80179e4 <etharp_output+0x1fc>)
 80178e4:	781b      	ldrb	r3, [r3, #0]
 80178e6:	4619      	mov	r1, r3
 80178e8:	4a3f      	ldr	r2, [pc, #252]	; (80179e8 <etharp_output+0x200>)
 80178ea:	460b      	mov	r3, r1
 80178ec:	005b      	lsls	r3, r3, #1
 80178ee:	440b      	add	r3, r1
 80178f0:	00db      	lsls	r3, r3, #3
 80178f2:	4413      	add	r3, r2
 80178f4:	3308      	adds	r3, #8
 80178f6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80178f8:	68fa      	ldr	r2, [r7, #12]
 80178fa:	429a      	cmp	r2, r3
 80178fc:	d117      	bne.n	801792e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80178fe:	69bb      	ldr	r3, [r7, #24]
 8017900:	681a      	ldr	r2, [r3, #0]
 8017902:	4b38      	ldr	r3, [pc, #224]	; (80179e4 <etharp_output+0x1fc>)
 8017904:	781b      	ldrb	r3, [r3, #0]
 8017906:	4618      	mov	r0, r3
 8017908:	4937      	ldr	r1, [pc, #220]	; (80179e8 <etharp_output+0x200>)
 801790a:	4603      	mov	r3, r0
 801790c:	005b      	lsls	r3, r3, #1
 801790e:	4403      	add	r3, r0
 8017910:	00db      	lsls	r3, r3, #3
 8017912:	440b      	add	r3, r1
 8017914:	3304      	adds	r3, #4
 8017916:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017918:	429a      	cmp	r2, r3
 801791a:	d108      	bne.n	801792e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801791c:	4b31      	ldr	r3, [pc, #196]	; (80179e4 <etharp_output+0x1fc>)
 801791e:	781b      	ldrb	r3, [r3, #0]
 8017920:	461a      	mov	r2, r3
 8017922:	68b9      	ldr	r1, [r7, #8]
 8017924:	68f8      	ldr	r0, [r7, #12]
 8017926:	f7ff fec5 	bl	80176b4 <etharp_output_to_arp_index>
 801792a:	4603      	mov	r3, r0
 801792c:	e04a      	b.n	80179c4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801792e:	2300      	movs	r3, #0
 8017930:	75fb      	strb	r3, [r7, #23]
 8017932:	e031      	b.n	8017998 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017934:	7dfa      	ldrb	r2, [r7, #23]
 8017936:	492c      	ldr	r1, [pc, #176]	; (80179e8 <etharp_output+0x200>)
 8017938:	4613      	mov	r3, r2
 801793a:	005b      	lsls	r3, r3, #1
 801793c:	4413      	add	r3, r2
 801793e:	00db      	lsls	r3, r3, #3
 8017940:	440b      	add	r3, r1
 8017942:	3314      	adds	r3, #20
 8017944:	781b      	ldrb	r3, [r3, #0]
 8017946:	2b01      	cmp	r3, #1
 8017948:	d923      	bls.n	8017992 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801794a:	7dfa      	ldrb	r2, [r7, #23]
 801794c:	4926      	ldr	r1, [pc, #152]	; (80179e8 <etharp_output+0x200>)
 801794e:	4613      	mov	r3, r2
 8017950:	005b      	lsls	r3, r3, #1
 8017952:	4413      	add	r3, r2
 8017954:	00db      	lsls	r3, r3, #3
 8017956:	440b      	add	r3, r1
 8017958:	3308      	adds	r3, #8
 801795a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801795c:	68fa      	ldr	r2, [r7, #12]
 801795e:	429a      	cmp	r2, r3
 8017960:	d117      	bne.n	8017992 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017962:	69bb      	ldr	r3, [r7, #24]
 8017964:	6819      	ldr	r1, [r3, #0]
 8017966:	7dfa      	ldrb	r2, [r7, #23]
 8017968:	481f      	ldr	r0, [pc, #124]	; (80179e8 <etharp_output+0x200>)
 801796a:	4613      	mov	r3, r2
 801796c:	005b      	lsls	r3, r3, #1
 801796e:	4413      	add	r3, r2
 8017970:	00db      	lsls	r3, r3, #3
 8017972:	4403      	add	r3, r0
 8017974:	3304      	adds	r3, #4
 8017976:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017978:	4299      	cmp	r1, r3
 801797a:	d10a      	bne.n	8017992 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801797c:	4a19      	ldr	r2, [pc, #100]	; (80179e4 <etharp_output+0x1fc>)
 801797e:	7dfb      	ldrb	r3, [r7, #23]
 8017980:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017982:	7dfb      	ldrb	r3, [r7, #23]
 8017984:	461a      	mov	r2, r3
 8017986:	68b9      	ldr	r1, [r7, #8]
 8017988:	68f8      	ldr	r0, [r7, #12]
 801798a:	f7ff fe93 	bl	80176b4 <etharp_output_to_arp_index>
 801798e:	4603      	mov	r3, r0
 8017990:	e018      	b.n	80179c4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017992:	7dfb      	ldrb	r3, [r7, #23]
 8017994:	3301      	adds	r3, #1
 8017996:	75fb      	strb	r3, [r7, #23]
 8017998:	7dfb      	ldrb	r3, [r7, #23]
 801799a:	2b09      	cmp	r3, #9
 801799c:	d9ca      	bls.n	8017934 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801799e:	68ba      	ldr	r2, [r7, #8]
 80179a0:	69b9      	ldr	r1, [r7, #24]
 80179a2:	68f8      	ldr	r0, [r7, #12]
 80179a4:	f000 f822 	bl	80179ec <etharp_query>
 80179a8:	4603      	mov	r3, r0
 80179aa:	e00b      	b.n	80179c4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80179b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80179b6:	9300      	str	r3, [sp, #0]
 80179b8:	69fb      	ldr	r3, [r7, #28]
 80179ba:	68b9      	ldr	r1, [r7, #8]
 80179bc:	68f8      	ldr	r0, [r7, #12]
 80179be:	f001 fe9b 	bl	80196f8 <ethernet_output>
 80179c2:	4603      	mov	r3, r0
}
 80179c4:	4618      	mov	r0, r3
 80179c6:	3720      	adds	r7, #32
 80179c8:	46bd      	mov	sp, r7
 80179ca:	bd80      	pop	{r7, pc}
 80179cc:	0802026c 	.word	0x0802026c
 80179d0:	080203bc 	.word	0x080203bc
 80179d4:	080202e4 	.word	0x080202e4
 80179d8:	0802040c 	.word	0x0802040c
 80179dc:	080203ac 	.word	0x080203ac
 80179e0:	08020b90 	.word	0x08020b90
 80179e4:	20008c20 	.word	0x20008c20
 80179e8:	20008b30 	.word	0x20008b30

080179ec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b08c      	sub	sp, #48	; 0x30
 80179f0:	af02      	add	r7, sp, #8
 80179f2:	60f8      	str	r0, [r7, #12]
 80179f4:	60b9      	str	r1, [r7, #8]
 80179f6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	332a      	adds	r3, #42	; 0x2a
 80179fc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80179fe:	23ff      	movs	r3, #255	; 0xff
 8017a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017a04:	2300      	movs	r3, #0
 8017a06:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	68f9      	ldr	r1, [r7, #12]
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f000 fe2c 	bl	801866c <ip4_addr_isbroadcast_u32>
 8017a14:	4603      	mov	r3, r0
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d10c      	bne.n	8017a34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017a1a:	68bb      	ldr	r3, [r7, #8]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017a22:	2be0      	cmp	r3, #224	; 0xe0
 8017a24:	d006      	beq.n	8017a34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017a26:	68bb      	ldr	r3, [r7, #8]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d003      	beq.n	8017a34 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017a2c:	68bb      	ldr	r3, [r7, #8]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d102      	bne.n	8017a3a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017a34:	f06f 030f 	mvn.w	r3, #15
 8017a38:	e101      	b.n	8017c3e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017a3a:	68fa      	ldr	r2, [r7, #12]
 8017a3c:	2101      	movs	r1, #1
 8017a3e:	68b8      	ldr	r0, [r7, #8]
 8017a40:	f7ff fb5c 	bl	80170fc <etharp_find_entry>
 8017a44:	4603      	mov	r3, r0
 8017a46:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017a48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	da02      	bge.n	8017a56 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017a50:	8a7b      	ldrh	r3, [r7, #18]
 8017a52:	b25b      	sxtb	r3, r3
 8017a54:	e0f3      	b.n	8017c3e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017a56:	8a7b      	ldrh	r3, [r7, #18]
 8017a58:	2b7e      	cmp	r3, #126	; 0x7e
 8017a5a:	d906      	bls.n	8017a6a <etharp_query+0x7e>
 8017a5c:	4b7a      	ldr	r3, [pc, #488]	; (8017c48 <etharp_query+0x25c>)
 8017a5e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017a62:	497a      	ldr	r1, [pc, #488]	; (8017c4c <etharp_query+0x260>)
 8017a64:	487a      	ldr	r0, [pc, #488]	; (8017c50 <etharp_query+0x264>)
 8017a66:	f003 ff53 	bl	801b910 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017a6a:	8a7b      	ldrh	r3, [r7, #18]
 8017a6c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017a6e:	7c7a      	ldrb	r2, [r7, #17]
 8017a70:	4978      	ldr	r1, [pc, #480]	; (8017c54 <etharp_query+0x268>)
 8017a72:	4613      	mov	r3, r2
 8017a74:	005b      	lsls	r3, r3, #1
 8017a76:	4413      	add	r3, r2
 8017a78:	00db      	lsls	r3, r3, #3
 8017a7a:	440b      	add	r3, r1
 8017a7c:	3314      	adds	r3, #20
 8017a7e:	781b      	ldrb	r3, [r3, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d115      	bne.n	8017ab0 <etharp_query+0xc4>
    is_new_entry = 1;
 8017a84:	2301      	movs	r3, #1
 8017a86:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017a88:	7c7a      	ldrb	r2, [r7, #17]
 8017a8a:	4972      	ldr	r1, [pc, #456]	; (8017c54 <etharp_query+0x268>)
 8017a8c:	4613      	mov	r3, r2
 8017a8e:	005b      	lsls	r3, r3, #1
 8017a90:	4413      	add	r3, r2
 8017a92:	00db      	lsls	r3, r3, #3
 8017a94:	440b      	add	r3, r1
 8017a96:	3314      	adds	r3, #20
 8017a98:	2201      	movs	r2, #1
 8017a9a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017a9c:	7c7a      	ldrb	r2, [r7, #17]
 8017a9e:	496d      	ldr	r1, [pc, #436]	; (8017c54 <etharp_query+0x268>)
 8017aa0:	4613      	mov	r3, r2
 8017aa2:	005b      	lsls	r3, r3, #1
 8017aa4:	4413      	add	r3, r2
 8017aa6:	00db      	lsls	r3, r3, #3
 8017aa8:	440b      	add	r3, r1
 8017aaa:	3308      	adds	r3, #8
 8017aac:	68fa      	ldr	r2, [r7, #12]
 8017aae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017ab0:	7c7a      	ldrb	r2, [r7, #17]
 8017ab2:	4968      	ldr	r1, [pc, #416]	; (8017c54 <etharp_query+0x268>)
 8017ab4:	4613      	mov	r3, r2
 8017ab6:	005b      	lsls	r3, r3, #1
 8017ab8:	4413      	add	r3, r2
 8017aba:	00db      	lsls	r3, r3, #3
 8017abc:	440b      	add	r3, r1
 8017abe:	3314      	adds	r3, #20
 8017ac0:	781b      	ldrb	r3, [r3, #0]
 8017ac2:	2b01      	cmp	r3, #1
 8017ac4:	d011      	beq.n	8017aea <etharp_query+0xfe>
 8017ac6:	7c7a      	ldrb	r2, [r7, #17]
 8017ac8:	4962      	ldr	r1, [pc, #392]	; (8017c54 <etharp_query+0x268>)
 8017aca:	4613      	mov	r3, r2
 8017acc:	005b      	lsls	r3, r3, #1
 8017ace:	4413      	add	r3, r2
 8017ad0:	00db      	lsls	r3, r3, #3
 8017ad2:	440b      	add	r3, r1
 8017ad4:	3314      	adds	r3, #20
 8017ad6:	781b      	ldrb	r3, [r3, #0]
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	d806      	bhi.n	8017aea <etharp_query+0xfe>
 8017adc:	4b5a      	ldr	r3, [pc, #360]	; (8017c48 <etharp_query+0x25c>)
 8017ade:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017ae2:	495d      	ldr	r1, [pc, #372]	; (8017c58 <etharp_query+0x26c>)
 8017ae4:	485a      	ldr	r0, [pc, #360]	; (8017c50 <etharp_query+0x264>)
 8017ae6:	f003 ff13 	bl	801b910 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017aea:	6a3b      	ldr	r3, [r7, #32]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d102      	bne.n	8017af6 <etharp_query+0x10a>
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d10c      	bne.n	8017b10 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017af6:	68b9      	ldr	r1, [r7, #8]
 8017af8:	68f8      	ldr	r0, [r7, #12]
 8017afa:	f000 f963 	bl	8017dc4 <etharp_request>
 8017afe:	4603      	mov	r3, r0
 8017b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d102      	bne.n	8017b10 <etharp_query+0x124>
      return result;
 8017b0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017b0e:	e096      	b.n	8017c3e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d106      	bne.n	8017b24 <etharp_query+0x138>
 8017b16:	4b4c      	ldr	r3, [pc, #304]	; (8017c48 <etharp_query+0x25c>)
 8017b18:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017b1c:	494f      	ldr	r1, [pc, #316]	; (8017c5c <etharp_query+0x270>)
 8017b1e:	484c      	ldr	r0, [pc, #304]	; (8017c50 <etharp_query+0x264>)
 8017b20:	f003 fef6 	bl	801b910 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017b24:	7c7a      	ldrb	r2, [r7, #17]
 8017b26:	494b      	ldr	r1, [pc, #300]	; (8017c54 <etharp_query+0x268>)
 8017b28:	4613      	mov	r3, r2
 8017b2a:	005b      	lsls	r3, r3, #1
 8017b2c:	4413      	add	r3, r2
 8017b2e:	00db      	lsls	r3, r3, #3
 8017b30:	440b      	add	r3, r1
 8017b32:	3314      	adds	r3, #20
 8017b34:	781b      	ldrb	r3, [r3, #0]
 8017b36:	2b01      	cmp	r3, #1
 8017b38:	d917      	bls.n	8017b6a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017b3a:	4a49      	ldr	r2, [pc, #292]	; (8017c60 <etharp_query+0x274>)
 8017b3c:	7c7b      	ldrb	r3, [r7, #17]
 8017b3e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017b40:	7c7a      	ldrb	r2, [r7, #17]
 8017b42:	4613      	mov	r3, r2
 8017b44:	005b      	lsls	r3, r3, #1
 8017b46:	4413      	add	r3, r2
 8017b48:	00db      	lsls	r3, r3, #3
 8017b4a:	3308      	adds	r3, #8
 8017b4c:	4a41      	ldr	r2, [pc, #260]	; (8017c54 <etharp_query+0x268>)
 8017b4e:	4413      	add	r3, r2
 8017b50:	3304      	adds	r3, #4
 8017b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017b56:	9200      	str	r2, [sp, #0]
 8017b58:	697a      	ldr	r2, [r7, #20]
 8017b5a:	6879      	ldr	r1, [r7, #4]
 8017b5c:	68f8      	ldr	r0, [r7, #12]
 8017b5e:	f001 fdcb 	bl	80196f8 <ethernet_output>
 8017b62:	4603      	mov	r3, r0
 8017b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017b68:	e067      	b.n	8017c3a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017b6a:	7c7a      	ldrb	r2, [r7, #17]
 8017b6c:	4939      	ldr	r1, [pc, #228]	; (8017c54 <etharp_query+0x268>)
 8017b6e:	4613      	mov	r3, r2
 8017b70:	005b      	lsls	r3, r3, #1
 8017b72:	4413      	add	r3, r2
 8017b74:	00db      	lsls	r3, r3, #3
 8017b76:	440b      	add	r3, r1
 8017b78:	3314      	adds	r3, #20
 8017b7a:	781b      	ldrb	r3, [r3, #0]
 8017b7c:	2b01      	cmp	r3, #1
 8017b7e:	d15c      	bne.n	8017c3a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017b80:	2300      	movs	r3, #0
 8017b82:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017b88:	e01c      	b.n	8017bc4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017b8a:	69fb      	ldr	r3, [r7, #28]
 8017b8c:	895a      	ldrh	r2, [r3, #10]
 8017b8e:	69fb      	ldr	r3, [r7, #28]
 8017b90:	891b      	ldrh	r3, [r3, #8]
 8017b92:	429a      	cmp	r2, r3
 8017b94:	d10a      	bne.n	8017bac <etharp_query+0x1c0>
 8017b96:	69fb      	ldr	r3, [r7, #28]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d006      	beq.n	8017bac <etharp_query+0x1c0>
 8017b9e:	4b2a      	ldr	r3, [pc, #168]	; (8017c48 <etharp_query+0x25c>)
 8017ba0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017ba4:	492f      	ldr	r1, [pc, #188]	; (8017c64 <etharp_query+0x278>)
 8017ba6:	482a      	ldr	r0, [pc, #168]	; (8017c50 <etharp_query+0x264>)
 8017ba8:	f003 feb2 	bl	801b910 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017bac:	69fb      	ldr	r3, [r7, #28]
 8017bae:	7b1b      	ldrb	r3, [r3, #12]
 8017bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d002      	beq.n	8017bbe <etharp_query+0x1d2>
        copy_needed = 1;
 8017bb8:	2301      	movs	r3, #1
 8017bba:	61bb      	str	r3, [r7, #24]
        break;
 8017bbc:	e005      	b.n	8017bca <etharp_query+0x1de>
      }
      p = p->next;
 8017bbe:	69fb      	ldr	r3, [r7, #28]
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017bc4:	69fb      	ldr	r3, [r7, #28]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d1df      	bne.n	8017b8a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017bca:	69bb      	ldr	r3, [r7, #24]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d007      	beq.n	8017be0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017bd0:	687a      	ldr	r2, [r7, #4]
 8017bd2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017bd6:	200e      	movs	r0, #14
 8017bd8:	f7f6 fbbe 	bl	800e358 <pbuf_clone>
 8017bdc:	61f8      	str	r0, [r7, #28]
 8017bde:	e004      	b.n	8017bea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017be4:	69f8      	ldr	r0, [r7, #28]
 8017be6:	f7f6 f9e5 	bl	800dfb4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017bea:	69fb      	ldr	r3, [r7, #28]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d021      	beq.n	8017c34 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017bf0:	7c7a      	ldrb	r2, [r7, #17]
 8017bf2:	4918      	ldr	r1, [pc, #96]	; (8017c54 <etharp_query+0x268>)
 8017bf4:	4613      	mov	r3, r2
 8017bf6:	005b      	lsls	r3, r3, #1
 8017bf8:	4413      	add	r3, r2
 8017bfa:	00db      	lsls	r3, r3, #3
 8017bfc:	440b      	add	r3, r1
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d00a      	beq.n	8017c1a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017c04:	7c7a      	ldrb	r2, [r7, #17]
 8017c06:	4913      	ldr	r1, [pc, #76]	; (8017c54 <etharp_query+0x268>)
 8017c08:	4613      	mov	r3, r2
 8017c0a:	005b      	lsls	r3, r3, #1
 8017c0c:	4413      	add	r3, r2
 8017c0e:	00db      	lsls	r3, r3, #3
 8017c10:	440b      	add	r3, r1
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7f6 f927 	bl	800de68 <pbuf_free>
      }
      arp_table[i].q = p;
 8017c1a:	7c7a      	ldrb	r2, [r7, #17]
 8017c1c:	490d      	ldr	r1, [pc, #52]	; (8017c54 <etharp_query+0x268>)
 8017c1e:	4613      	mov	r3, r2
 8017c20:	005b      	lsls	r3, r3, #1
 8017c22:	4413      	add	r3, r2
 8017c24:	00db      	lsls	r3, r3, #3
 8017c26:	440b      	add	r3, r1
 8017c28:	69fa      	ldr	r2, [r7, #28]
 8017c2a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017c32:	e002      	b.n	8017c3a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017c34:	23ff      	movs	r3, #255	; 0xff
 8017c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017c3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017c3e:	4618      	mov	r0, r3
 8017c40:	3728      	adds	r7, #40	; 0x28
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bd80      	pop	{r7, pc}
 8017c46:	bf00      	nop
 8017c48:	0802026c 	.word	0x0802026c
 8017c4c:	08020418 	.word	0x08020418
 8017c50:	080202e4 	.word	0x080202e4
 8017c54:	20008b30 	.word	0x20008b30
 8017c58:	08020428 	.word	0x08020428
 8017c5c:	0802040c 	.word	0x0802040c
 8017c60:	20008c20 	.word	0x20008c20
 8017c64:	08020450 	.word	0x08020450

08017c68 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b08a      	sub	sp, #40	; 0x28
 8017c6c:	af02      	add	r7, sp, #8
 8017c6e:	60f8      	str	r0, [r7, #12]
 8017c70:	60b9      	str	r1, [r7, #8]
 8017c72:	607a      	str	r2, [r7, #4]
 8017c74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017c76:	2300      	movs	r3, #0
 8017c78:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d106      	bne.n	8017c8e <etharp_raw+0x26>
 8017c80:	4b3a      	ldr	r3, [pc, #232]	; (8017d6c <etharp_raw+0x104>)
 8017c82:	f240 4257 	movw	r2, #1111	; 0x457
 8017c86:	493a      	ldr	r1, [pc, #232]	; (8017d70 <etharp_raw+0x108>)
 8017c88:	483a      	ldr	r0, [pc, #232]	; (8017d74 <etharp_raw+0x10c>)
 8017c8a:	f003 fe41 	bl	801b910 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017c8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c92:	211c      	movs	r1, #28
 8017c94:	200e      	movs	r0, #14
 8017c96:	f7f5 fdd1 	bl	800d83c <pbuf_alloc>
 8017c9a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017c9c:	69bb      	ldr	r3, [r7, #24]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d102      	bne.n	8017ca8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ca6:	e05d      	b.n	8017d64 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017ca8:	69bb      	ldr	r3, [r7, #24]
 8017caa:	895b      	ldrh	r3, [r3, #10]
 8017cac:	2b1b      	cmp	r3, #27
 8017cae:	d806      	bhi.n	8017cbe <etharp_raw+0x56>
 8017cb0:	4b2e      	ldr	r3, [pc, #184]	; (8017d6c <etharp_raw+0x104>)
 8017cb2:	f240 4262 	movw	r2, #1122	; 0x462
 8017cb6:	4930      	ldr	r1, [pc, #192]	; (8017d78 <etharp_raw+0x110>)
 8017cb8:	482e      	ldr	r0, [pc, #184]	; (8017d74 <etharp_raw+0x10c>)
 8017cba:	f003 fe29 	bl	801b910 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017cbe:	69bb      	ldr	r3, [r7, #24]
 8017cc0:	685b      	ldr	r3, [r3, #4]
 8017cc2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017cc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	f7f4 fce4 	bl	800c694 <lwip_htons>
 8017ccc:	4603      	mov	r3, r0
 8017cce:	461a      	mov	r2, r3
 8017cd0:	697b      	ldr	r3, [r7, #20]
 8017cd2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017cda:	2b06      	cmp	r3, #6
 8017cdc:	d006      	beq.n	8017cec <etharp_raw+0x84>
 8017cde:	4b23      	ldr	r3, [pc, #140]	; (8017d6c <etharp_raw+0x104>)
 8017ce0:	f240 4269 	movw	r2, #1129	; 0x469
 8017ce4:	4925      	ldr	r1, [pc, #148]	; (8017d7c <etharp_raw+0x114>)
 8017ce6:	4823      	ldr	r0, [pc, #140]	; (8017d74 <etharp_raw+0x10c>)
 8017ce8:	f003 fe12 	bl	801b910 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017cec:	697b      	ldr	r3, [r7, #20]
 8017cee:	3308      	adds	r3, #8
 8017cf0:	2206      	movs	r2, #6
 8017cf2:	6839      	ldr	r1, [r7, #0]
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f003 fdf5 	bl	801b8e4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017cfa:	697b      	ldr	r3, [r7, #20]
 8017cfc:	3312      	adds	r3, #18
 8017cfe:	2206      	movs	r2, #6
 8017d00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017d02:	4618      	mov	r0, r3
 8017d04:	f003 fdee 	bl	801b8e4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017d08:	697b      	ldr	r3, [r7, #20]
 8017d0a:	330e      	adds	r3, #14
 8017d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d0e:	6812      	ldr	r2, [r2, #0]
 8017d10:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017d12:	697b      	ldr	r3, [r7, #20]
 8017d14:	3318      	adds	r3, #24
 8017d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d18:	6812      	ldr	r2, [r2, #0]
 8017d1a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017d1c:	697b      	ldr	r3, [r7, #20]
 8017d1e:	2200      	movs	r2, #0
 8017d20:	701a      	strb	r2, [r3, #0]
 8017d22:	2200      	movs	r2, #0
 8017d24:	f042 0201 	orr.w	r2, r2, #1
 8017d28:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017d2a:	697b      	ldr	r3, [r7, #20]
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	f042 0208 	orr.w	r2, r2, #8
 8017d32:	709a      	strb	r2, [r3, #2]
 8017d34:	2200      	movs	r2, #0
 8017d36:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017d38:	697b      	ldr	r3, [r7, #20]
 8017d3a:	2206      	movs	r2, #6
 8017d3c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017d3e:	697b      	ldr	r3, [r7, #20]
 8017d40:	2204      	movs	r2, #4
 8017d42:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017d44:	f640 0306 	movw	r3, #2054	; 0x806
 8017d48:	9300      	str	r3, [sp, #0]
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	68ba      	ldr	r2, [r7, #8]
 8017d4e:	69b9      	ldr	r1, [r7, #24]
 8017d50:	68f8      	ldr	r0, [r7, #12]
 8017d52:	f001 fcd1 	bl	80196f8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017d56:	69b8      	ldr	r0, [r7, #24]
 8017d58:	f7f6 f886 	bl	800de68 <pbuf_free>
  p = NULL;
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017d60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017d64:	4618      	mov	r0, r3
 8017d66:	3720      	adds	r7, #32
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	bd80      	pop	{r7, pc}
 8017d6c:	0802026c 	.word	0x0802026c
 8017d70:	080203bc 	.word	0x080203bc
 8017d74:	080202e4 	.word	0x080202e4
 8017d78:	0802046c 	.word	0x0802046c
 8017d7c:	080204a0 	.word	0x080204a0

08017d80 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b088      	sub	sp, #32
 8017d84:	af04      	add	r7, sp, #16
 8017d86:	60f8      	str	r0, [r7, #12]
 8017d88:	60b9      	str	r1, [r7, #8]
 8017d8a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017d9c:	2201      	movs	r2, #1
 8017d9e:	9203      	str	r2, [sp, #12]
 8017da0:	68ba      	ldr	r2, [r7, #8]
 8017da2:	9202      	str	r2, [sp, #8]
 8017da4:	4a06      	ldr	r2, [pc, #24]	; (8017dc0 <etharp_request_dst+0x40>)
 8017da6:	9201      	str	r2, [sp, #4]
 8017da8:	9300      	str	r3, [sp, #0]
 8017daa:	4603      	mov	r3, r0
 8017dac:	687a      	ldr	r2, [r7, #4]
 8017dae:	68f8      	ldr	r0, [r7, #12]
 8017db0:	f7ff ff5a 	bl	8017c68 <etharp_raw>
 8017db4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017db6:	4618      	mov	r0, r3
 8017db8:	3710      	adds	r7, #16
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}
 8017dbe:	bf00      	nop
 8017dc0:	08020b98 	.word	0x08020b98

08017dc4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b082      	sub	sp, #8
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
 8017dcc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017dce:	4a05      	ldr	r2, [pc, #20]	; (8017de4 <etharp_request+0x20>)
 8017dd0:	6839      	ldr	r1, [r7, #0]
 8017dd2:	6878      	ldr	r0, [r7, #4]
 8017dd4:	f7ff ffd4 	bl	8017d80 <etharp_request_dst>
 8017dd8:	4603      	mov	r3, r0
}
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3708      	adds	r7, #8
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
 8017de2:	bf00      	nop
 8017de4:	08020b90 	.word	0x08020b90

08017de8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b08e      	sub	sp, #56	; 0x38
 8017dec:	af04      	add	r7, sp, #16
 8017dee:	6078      	str	r0, [r7, #4]
 8017df0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017df2:	4b79      	ldr	r3, [pc, #484]	; (8017fd8 <icmp_input+0x1f0>)
 8017df4:	689b      	ldr	r3, [r3, #8]
 8017df6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfa:	781b      	ldrb	r3, [r3, #0]
 8017dfc:	f003 030f 	and.w	r3, r3, #15
 8017e00:	b2db      	uxtb	r3, r3
 8017e02:	009b      	lsls	r3, r3, #2
 8017e04:	b2db      	uxtb	r3, r3
 8017e06:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017e08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e0a:	2b13      	cmp	r3, #19
 8017e0c:	f240 80cd 	bls.w	8017faa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	895b      	ldrh	r3, [r3, #10]
 8017e14:	2b03      	cmp	r3, #3
 8017e16:	f240 80ca 	bls.w	8017fae <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	685b      	ldr	r3, [r3, #4]
 8017e1e:	781b      	ldrb	r3, [r3, #0]
 8017e20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017e24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	f000 80b7 	beq.w	8017f9c <icmp_input+0x1b4>
 8017e2e:	2b08      	cmp	r3, #8
 8017e30:	f040 80b7 	bne.w	8017fa2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017e34:	4b69      	ldr	r3, [pc, #420]	; (8017fdc <icmp_input+0x1f4>)
 8017e36:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017e38:	4b67      	ldr	r3, [pc, #412]	; (8017fd8 <icmp_input+0x1f0>)
 8017e3a:	695b      	ldr	r3, [r3, #20]
 8017e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017e40:	2be0      	cmp	r3, #224	; 0xe0
 8017e42:	f000 80bb 	beq.w	8017fbc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017e46:	4b64      	ldr	r3, [pc, #400]	; (8017fd8 <icmp_input+0x1f0>)
 8017e48:	695b      	ldr	r3, [r3, #20]
 8017e4a:	4a63      	ldr	r2, [pc, #396]	; (8017fd8 <icmp_input+0x1f0>)
 8017e4c:	6812      	ldr	r2, [r2, #0]
 8017e4e:	4611      	mov	r1, r2
 8017e50:	4618      	mov	r0, r3
 8017e52:	f000 fc0b 	bl	801866c <ip4_addr_isbroadcast_u32>
 8017e56:	4603      	mov	r3, r0
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	f040 80b1 	bne.w	8017fc0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	891b      	ldrh	r3, [r3, #8]
 8017e62:	2b07      	cmp	r3, #7
 8017e64:	f240 80a5 	bls.w	8017fb2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017e68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e6a:	330e      	adds	r3, #14
 8017e6c:	4619      	mov	r1, r3
 8017e6e:	6878      	ldr	r0, [r7, #4]
 8017e70:	f7f5 ff32 	bl	800dcd8 <pbuf_add_header>
 8017e74:	4603      	mov	r3, r0
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d04b      	beq.n	8017f12 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	891a      	ldrh	r2, [r3, #8]
 8017e7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e80:	4413      	add	r3, r2
 8017e82:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	891b      	ldrh	r3, [r3, #8]
 8017e88:	8b7a      	ldrh	r2, [r7, #26]
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	f0c0 809a 	bcc.w	8017fc4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017e90:	8b7b      	ldrh	r3, [r7, #26]
 8017e92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e96:	4619      	mov	r1, r3
 8017e98:	200e      	movs	r0, #14
 8017e9a:	f7f5 fccf 	bl	800d83c <pbuf_alloc>
 8017e9e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	f000 8090 	beq.w	8017fc8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017ea8:	697b      	ldr	r3, [r7, #20]
 8017eaa:	895b      	ldrh	r3, [r3, #10]
 8017eac:	461a      	mov	r2, r3
 8017eae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017eb0:	3308      	adds	r3, #8
 8017eb2:	429a      	cmp	r2, r3
 8017eb4:	d203      	bcs.n	8017ebe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017eb6:	6978      	ldr	r0, [r7, #20]
 8017eb8:	f7f5 ffd6 	bl	800de68 <pbuf_free>
          goto icmperr;
 8017ebc:	e085      	b.n	8017fca <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017ebe:	697b      	ldr	r3, [r7, #20]
 8017ec0:	685b      	ldr	r3, [r3, #4]
 8017ec2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f003 fd0c 	bl	801b8e4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017ecc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ece:	4619      	mov	r1, r3
 8017ed0:	6978      	ldr	r0, [r7, #20]
 8017ed2:	f7f5 ff11 	bl	800dcf8 <pbuf_remove_header>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d009      	beq.n	8017ef0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017edc:	4b40      	ldr	r3, [pc, #256]	; (8017fe0 <icmp_input+0x1f8>)
 8017ede:	22b6      	movs	r2, #182	; 0xb6
 8017ee0:	4940      	ldr	r1, [pc, #256]	; (8017fe4 <icmp_input+0x1fc>)
 8017ee2:	4841      	ldr	r0, [pc, #260]	; (8017fe8 <icmp_input+0x200>)
 8017ee4:	f003 fd14 	bl	801b910 <iprintf>
          pbuf_free(r);
 8017ee8:	6978      	ldr	r0, [r7, #20]
 8017eea:	f7f5 ffbd 	bl	800de68 <pbuf_free>
          goto icmperr;
 8017eee:	e06c      	b.n	8017fca <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017ef0:	6879      	ldr	r1, [r7, #4]
 8017ef2:	6978      	ldr	r0, [r7, #20]
 8017ef4:	f7f6 f8ec 	bl	800e0d0 <pbuf_copy>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d003      	beq.n	8017f06 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017efe:	6978      	ldr	r0, [r7, #20]
 8017f00:	f7f5 ffb2 	bl	800de68 <pbuf_free>
          goto icmperr;
 8017f04:	e061      	b.n	8017fca <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017f06:	6878      	ldr	r0, [r7, #4]
 8017f08:	f7f5 ffae 	bl	800de68 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	607b      	str	r3, [r7, #4]
 8017f10:	e00f      	b.n	8017f32 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017f12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017f14:	330e      	adds	r3, #14
 8017f16:	4619      	mov	r1, r3
 8017f18:	6878      	ldr	r0, [r7, #4]
 8017f1a:	f7f5 feed 	bl	800dcf8 <pbuf_remove_header>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d006      	beq.n	8017f32 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017f24:	4b2e      	ldr	r3, [pc, #184]	; (8017fe0 <icmp_input+0x1f8>)
 8017f26:	22c7      	movs	r2, #199	; 0xc7
 8017f28:	4930      	ldr	r1, [pc, #192]	; (8017fec <icmp_input+0x204>)
 8017f2a:	482f      	ldr	r0, [pc, #188]	; (8017fe8 <icmp_input+0x200>)
 8017f2c:	f003 fcf0 	bl	801b910 <iprintf>
          goto icmperr;
 8017f30:	e04b      	b.n	8017fca <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	685b      	ldr	r3, [r3, #4]
 8017f36:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017f38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017f3a:	4619      	mov	r1, r3
 8017f3c:	6878      	ldr	r0, [r7, #4]
 8017f3e:	f7f5 fecb 	bl	800dcd8 <pbuf_add_header>
 8017f42:	4603      	mov	r3, r0
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d12b      	bne.n	8017fa0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	685b      	ldr	r3, [r3, #4]
 8017f4c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017f4e:	69fb      	ldr	r3, [r7, #28]
 8017f50:	681a      	ldr	r2, [r3, #0]
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017f56:	4b20      	ldr	r3, [pc, #128]	; (8017fd8 <icmp_input+0x1f0>)
 8017f58:	691a      	ldr	r2, [r3, #16]
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017f5e:	693b      	ldr	r3, [r7, #16]
 8017f60:	2200      	movs	r2, #0
 8017f62:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017f64:	693b      	ldr	r3, [r7, #16]
 8017f66:	2200      	movs	r2, #0
 8017f68:	709a      	strb	r2, [r3, #2]
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	22ff      	movs	r2, #255	; 0xff
 8017f72:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	2200      	movs	r2, #0
 8017f78:	729a      	strb	r2, [r3, #10]
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017f7e:	683b      	ldr	r3, [r7, #0]
 8017f80:	9302      	str	r3, [sp, #8]
 8017f82:	2301      	movs	r3, #1
 8017f84:	9301      	str	r3, [sp, #4]
 8017f86:	2300      	movs	r3, #0
 8017f88:	9300      	str	r3, [sp, #0]
 8017f8a:	23ff      	movs	r3, #255	; 0xff
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	69f9      	ldr	r1, [r7, #28]
 8017f90:	6878      	ldr	r0, [r7, #4]
 8017f92:	f000 fa93 	bl	80184bc <ip4_output_if>
 8017f96:	4603      	mov	r3, r0
 8017f98:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017f9a:	e001      	b.n	8017fa0 <icmp_input+0x1b8>
      break;
 8017f9c:	bf00      	nop
 8017f9e:	e000      	b.n	8017fa2 <icmp_input+0x1ba>
      break;
 8017fa0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017fa2:	6878      	ldr	r0, [r7, #4]
 8017fa4:	f7f5 ff60 	bl	800de68 <pbuf_free>
  return;
 8017fa8:	e013      	b.n	8017fd2 <icmp_input+0x1ea>
    goto lenerr;
 8017faa:	bf00      	nop
 8017fac:	e002      	b.n	8017fb4 <icmp_input+0x1cc>
    goto lenerr;
 8017fae:	bf00      	nop
 8017fb0:	e000      	b.n	8017fb4 <icmp_input+0x1cc>
        goto lenerr;
 8017fb2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017fb4:	6878      	ldr	r0, [r7, #4]
 8017fb6:	f7f5 ff57 	bl	800de68 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017fba:	e00a      	b.n	8017fd2 <icmp_input+0x1ea>
        goto icmperr;
 8017fbc:	bf00      	nop
 8017fbe:	e004      	b.n	8017fca <icmp_input+0x1e2>
        goto icmperr;
 8017fc0:	bf00      	nop
 8017fc2:	e002      	b.n	8017fca <icmp_input+0x1e2>
          goto icmperr;
 8017fc4:	bf00      	nop
 8017fc6:	e000      	b.n	8017fca <icmp_input+0x1e2>
          goto icmperr;
 8017fc8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017fca:	6878      	ldr	r0, [r7, #4]
 8017fcc:	f7f5 ff4c 	bl	800de68 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017fd0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017fd2:	3728      	adds	r7, #40	; 0x28
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	bd80      	pop	{r7, pc}
 8017fd8:	2000cf0c 	.word	0x2000cf0c
 8017fdc:	2000cf20 	.word	0x2000cf20
 8017fe0:	080204e4 	.word	0x080204e4
 8017fe4:	0802051c 	.word	0x0802051c
 8017fe8:	08020554 	.word	0x08020554
 8017fec:	0802057c 	.word	0x0802057c

08017ff0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b082      	sub	sp, #8
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
 8017ff8:	460b      	mov	r3, r1
 8017ffa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017ffc:	78fb      	ldrb	r3, [r7, #3]
 8017ffe:	461a      	mov	r2, r3
 8018000:	2103      	movs	r1, #3
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	f000 f814 	bl	8018030 <icmp_send_response>
}
 8018008:	bf00      	nop
 801800a:	3708      	adds	r7, #8
 801800c:	46bd      	mov	sp, r7
 801800e:	bd80      	pop	{r7, pc}

08018010 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b082      	sub	sp, #8
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
 8018018:	460b      	mov	r3, r1
 801801a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801801c:	78fb      	ldrb	r3, [r7, #3]
 801801e:	461a      	mov	r2, r3
 8018020:	210b      	movs	r1, #11
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f000 f804 	bl	8018030 <icmp_send_response>
}
 8018028:	bf00      	nop
 801802a:	3708      	adds	r7, #8
 801802c:	46bd      	mov	sp, r7
 801802e:	bd80      	pop	{r7, pc}

08018030 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b08c      	sub	sp, #48	; 0x30
 8018034:	af04      	add	r7, sp, #16
 8018036:	6078      	str	r0, [r7, #4]
 8018038:	460b      	mov	r3, r1
 801803a:	70fb      	strb	r3, [r7, #3]
 801803c:	4613      	mov	r3, r2
 801803e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018040:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018044:	2124      	movs	r1, #36	; 0x24
 8018046:	2022      	movs	r0, #34	; 0x22
 8018048:	f7f5 fbf8 	bl	800d83c <pbuf_alloc>
 801804c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801804e:	69fb      	ldr	r3, [r7, #28]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d04c      	beq.n	80180ee <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018054:	69fb      	ldr	r3, [r7, #28]
 8018056:	895b      	ldrh	r3, [r3, #10]
 8018058:	2b23      	cmp	r3, #35	; 0x23
 801805a:	d806      	bhi.n	801806a <icmp_send_response+0x3a>
 801805c:	4b26      	ldr	r3, [pc, #152]	; (80180f8 <icmp_send_response+0xc8>)
 801805e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018062:	4926      	ldr	r1, [pc, #152]	; (80180fc <icmp_send_response+0xcc>)
 8018064:	4826      	ldr	r0, [pc, #152]	; (8018100 <icmp_send_response+0xd0>)
 8018066:	f003 fc53 	bl	801b910 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	685b      	ldr	r3, [r3, #4]
 801806e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018070:	69fb      	ldr	r3, [r7, #28]
 8018072:	685b      	ldr	r3, [r3, #4]
 8018074:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018076:	697b      	ldr	r3, [r7, #20]
 8018078:	78fa      	ldrb	r2, [r7, #3]
 801807a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801807c:	697b      	ldr	r3, [r7, #20]
 801807e:	78ba      	ldrb	r2, [r7, #2]
 8018080:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	2200      	movs	r2, #0
 8018086:	711a      	strb	r2, [r3, #4]
 8018088:	2200      	movs	r2, #0
 801808a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801808c:	697b      	ldr	r3, [r7, #20]
 801808e:	2200      	movs	r2, #0
 8018090:	719a      	strb	r2, [r3, #6]
 8018092:	2200      	movs	r2, #0
 8018094:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018096:	69fb      	ldr	r3, [r7, #28]
 8018098:	685b      	ldr	r3, [r3, #4]
 801809a:	f103 0008 	add.w	r0, r3, #8
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	685b      	ldr	r3, [r3, #4]
 80180a2:	221c      	movs	r2, #28
 80180a4:	4619      	mov	r1, r3
 80180a6:	f003 fc1d 	bl	801b8e4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80180aa:	69bb      	ldr	r3, [r7, #24]
 80180ac:	68db      	ldr	r3, [r3, #12]
 80180ae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80180b0:	f107 030c 	add.w	r3, r7, #12
 80180b4:	4618      	mov	r0, r3
 80180b6:	f000 f825 	bl	8018104 <ip4_route>
 80180ba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80180bc:	693b      	ldr	r3, [r7, #16]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d011      	beq.n	80180e6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80180c2:	697b      	ldr	r3, [r7, #20]
 80180c4:	2200      	movs	r2, #0
 80180c6:	709a      	strb	r2, [r3, #2]
 80180c8:	2200      	movs	r2, #0
 80180ca:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80180cc:	f107 020c 	add.w	r2, r7, #12
 80180d0:	693b      	ldr	r3, [r7, #16]
 80180d2:	9302      	str	r3, [sp, #8]
 80180d4:	2301      	movs	r3, #1
 80180d6:	9301      	str	r3, [sp, #4]
 80180d8:	2300      	movs	r3, #0
 80180da:	9300      	str	r3, [sp, #0]
 80180dc:	23ff      	movs	r3, #255	; 0xff
 80180de:	2100      	movs	r1, #0
 80180e0:	69f8      	ldr	r0, [r7, #28]
 80180e2:	f000 f9eb 	bl	80184bc <ip4_output_if>
  }
  pbuf_free(q);
 80180e6:	69f8      	ldr	r0, [r7, #28]
 80180e8:	f7f5 febe 	bl	800de68 <pbuf_free>
 80180ec:	e000      	b.n	80180f0 <icmp_send_response+0xc0>
    return;
 80180ee:	bf00      	nop
}
 80180f0:	3720      	adds	r7, #32
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}
 80180f6:	bf00      	nop
 80180f8:	080204e4 	.word	0x080204e4
 80180fc:	080205b0 	.word	0x080205b0
 8018100:	08020554 	.word	0x08020554

08018104 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018104:	b480      	push	{r7}
 8018106:	b085      	sub	sp, #20
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801810c:	4b33      	ldr	r3, [pc, #204]	; (80181dc <ip4_route+0xd8>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	60fb      	str	r3, [r7, #12]
 8018112:	e036      	b.n	8018182 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801811a:	f003 0301 	and.w	r3, r3, #1
 801811e:	b2db      	uxtb	r3, r3
 8018120:	2b00      	cmp	r3, #0
 8018122:	d02b      	beq.n	801817c <ip4_route+0x78>
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801812a:	089b      	lsrs	r3, r3, #2
 801812c:	f003 0301 	and.w	r3, r3, #1
 8018130:	b2db      	uxtb	r3, r3
 8018132:	2b00      	cmp	r3, #0
 8018134:	d022      	beq.n	801817c <ip4_route+0x78>
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	3304      	adds	r3, #4
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d01d      	beq.n	801817c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	681a      	ldr	r2, [r3, #0]
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	3304      	adds	r3, #4
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	405a      	eors	r2, r3
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	3308      	adds	r3, #8
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	4013      	ands	r3, r2
 8018154:	2b00      	cmp	r3, #0
 8018156:	d101      	bne.n	801815c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	e038      	b.n	80181ce <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018162:	f003 0302 	and.w	r3, r3, #2
 8018166:	2b00      	cmp	r3, #0
 8018168:	d108      	bne.n	801817c <ip4_route+0x78>
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	681a      	ldr	r2, [r3, #0]
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	330c      	adds	r3, #12
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	429a      	cmp	r2, r3
 8018176:	d101      	bne.n	801817c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	e028      	b.n	80181ce <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	60fb      	str	r3, [r7, #12]
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d1c5      	bne.n	8018114 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018188:	4b15      	ldr	r3, [pc, #84]	; (80181e0 <ip4_route+0xdc>)
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d01a      	beq.n	80181c6 <ip4_route+0xc2>
 8018190:	4b13      	ldr	r3, [pc, #76]	; (80181e0 <ip4_route+0xdc>)
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018198:	f003 0301 	and.w	r3, r3, #1
 801819c:	2b00      	cmp	r3, #0
 801819e:	d012      	beq.n	80181c6 <ip4_route+0xc2>
 80181a0:	4b0f      	ldr	r3, [pc, #60]	; (80181e0 <ip4_route+0xdc>)
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80181a8:	f003 0304 	and.w	r3, r3, #4
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d00a      	beq.n	80181c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80181b0:	4b0b      	ldr	r3, [pc, #44]	; (80181e0 <ip4_route+0xdc>)
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	3304      	adds	r3, #4
 80181b6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d004      	beq.n	80181c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	b2db      	uxtb	r3, r3
 80181c2:	2b7f      	cmp	r3, #127	; 0x7f
 80181c4:	d101      	bne.n	80181ca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80181c6:	2300      	movs	r3, #0
 80181c8:	e001      	b.n	80181ce <ip4_route+0xca>
  }

  return netif_default;
 80181ca:	4b05      	ldr	r3, [pc, #20]	; (80181e0 <ip4_route+0xdc>)
 80181cc:	681b      	ldr	r3, [r3, #0]
}
 80181ce:	4618      	mov	r0, r3
 80181d0:	3714      	adds	r7, #20
 80181d2:	46bd      	mov	sp, r7
 80181d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d8:	4770      	bx	lr
 80181da:	bf00      	nop
 80181dc:	20010650 	.word	0x20010650
 80181e0:	20010654 	.word	0x20010654

080181e4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b082      	sub	sp, #8
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80181f2:	f003 0301 	and.w	r3, r3, #1
 80181f6:	b2db      	uxtb	r3, r3
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d016      	beq.n	801822a <ip4_input_accept+0x46>
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	3304      	adds	r3, #4
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d011      	beq.n	801822a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018206:	4b0b      	ldr	r3, [pc, #44]	; (8018234 <ip4_input_accept+0x50>)
 8018208:	695a      	ldr	r2, [r3, #20]
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	3304      	adds	r3, #4
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	429a      	cmp	r2, r3
 8018212:	d008      	beq.n	8018226 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018214:	4b07      	ldr	r3, [pc, #28]	; (8018234 <ip4_input_accept+0x50>)
 8018216:	695b      	ldr	r3, [r3, #20]
 8018218:	6879      	ldr	r1, [r7, #4]
 801821a:	4618      	mov	r0, r3
 801821c:	f000 fa26 	bl	801866c <ip4_addr_isbroadcast_u32>
 8018220:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018222:	2b00      	cmp	r3, #0
 8018224:	d001      	beq.n	801822a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018226:	2301      	movs	r3, #1
 8018228:	e000      	b.n	801822c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801822a:	2300      	movs	r3, #0
}
 801822c:	4618      	mov	r0, r3
 801822e:	3708      	adds	r7, #8
 8018230:	46bd      	mov	sp, r7
 8018232:	bd80      	pop	{r7, pc}
 8018234:	2000cf0c 	.word	0x2000cf0c

08018238 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b088      	sub	sp, #32
 801823c:	af00      	add	r7, sp, #0
 801823e:	6078      	str	r0, [r7, #4]
 8018240:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018242:	2301      	movs	r3, #1
 8018244:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	685b      	ldr	r3, [r3, #4]
 801824a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801824c:	69fb      	ldr	r3, [r7, #28]
 801824e:	781b      	ldrb	r3, [r3, #0]
 8018250:	091b      	lsrs	r3, r3, #4
 8018252:	b2db      	uxtb	r3, r3
 8018254:	2b04      	cmp	r3, #4
 8018256:	d004      	beq.n	8018262 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018258:	6878      	ldr	r0, [r7, #4]
 801825a:	f7f5 fe05 	bl	800de68 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801825e:	2300      	movs	r3, #0
 8018260:	e123      	b.n	80184aa <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018262:	69fb      	ldr	r3, [r7, #28]
 8018264:	781b      	ldrb	r3, [r3, #0]
 8018266:	f003 030f 	and.w	r3, r3, #15
 801826a:	b2db      	uxtb	r3, r3
 801826c:	009b      	lsls	r3, r3, #2
 801826e:	b2db      	uxtb	r3, r3
 8018270:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018272:	69fb      	ldr	r3, [r7, #28]
 8018274:	885b      	ldrh	r3, [r3, #2]
 8018276:	b29b      	uxth	r3, r3
 8018278:	4618      	mov	r0, r3
 801827a:	f7f4 fa0b 	bl	800c694 <lwip_htons>
 801827e:	4603      	mov	r3, r0
 8018280:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	891b      	ldrh	r3, [r3, #8]
 8018286:	8a3a      	ldrh	r2, [r7, #16]
 8018288:	429a      	cmp	r2, r3
 801828a:	d204      	bcs.n	8018296 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801828c:	8a3b      	ldrh	r3, [r7, #16]
 801828e:	4619      	mov	r1, r3
 8018290:	6878      	ldr	r0, [r7, #4]
 8018292:	f7f5 fc31 	bl	800daf8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	895b      	ldrh	r3, [r3, #10]
 801829a:	8a7a      	ldrh	r2, [r7, #18]
 801829c:	429a      	cmp	r2, r3
 801829e:	d807      	bhi.n	80182b0 <ip4_input+0x78>
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	891b      	ldrh	r3, [r3, #8]
 80182a4:	8a3a      	ldrh	r2, [r7, #16]
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d802      	bhi.n	80182b0 <ip4_input+0x78>
 80182aa:	8a7b      	ldrh	r3, [r7, #18]
 80182ac:	2b13      	cmp	r3, #19
 80182ae:	d804      	bhi.n	80182ba <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80182b0:	6878      	ldr	r0, [r7, #4]
 80182b2:	f7f5 fdd9 	bl	800de68 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80182b6:	2300      	movs	r3, #0
 80182b8:	e0f7      	b.n	80184aa <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80182ba:	69fb      	ldr	r3, [r7, #28]
 80182bc:	691b      	ldr	r3, [r3, #16]
 80182be:	4a7d      	ldr	r2, [pc, #500]	; (80184b4 <ip4_input+0x27c>)
 80182c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80182c2:	69fb      	ldr	r3, [r7, #28]
 80182c4:	68db      	ldr	r3, [r3, #12]
 80182c6:	4a7b      	ldr	r2, [pc, #492]	; (80184b4 <ip4_input+0x27c>)
 80182c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80182ca:	4b7a      	ldr	r3, [pc, #488]	; (80184b4 <ip4_input+0x27c>)
 80182cc:	695b      	ldr	r3, [r3, #20]
 80182ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80182d2:	2be0      	cmp	r3, #224	; 0xe0
 80182d4:	d112      	bne.n	80182fc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80182d6:	683b      	ldr	r3, [r7, #0]
 80182d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80182dc:	f003 0301 	and.w	r3, r3, #1
 80182e0:	b2db      	uxtb	r3, r3
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d007      	beq.n	80182f6 <ip4_input+0xbe>
 80182e6:	683b      	ldr	r3, [r7, #0]
 80182e8:	3304      	adds	r3, #4
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d002      	beq.n	80182f6 <ip4_input+0xbe>
      netif = inp;
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	61bb      	str	r3, [r7, #24]
 80182f4:	e02a      	b.n	801834c <ip4_input+0x114>
    } else {
      netif = NULL;
 80182f6:	2300      	movs	r3, #0
 80182f8:	61bb      	str	r3, [r7, #24]
 80182fa:	e027      	b.n	801834c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80182fc:	6838      	ldr	r0, [r7, #0]
 80182fe:	f7ff ff71 	bl	80181e4 <ip4_input_accept>
 8018302:	4603      	mov	r3, r0
 8018304:	2b00      	cmp	r3, #0
 8018306:	d002      	beq.n	801830e <ip4_input+0xd6>
      netif = inp;
 8018308:	683b      	ldr	r3, [r7, #0]
 801830a:	61bb      	str	r3, [r7, #24]
 801830c:	e01e      	b.n	801834c <ip4_input+0x114>
    } else {
      netif = NULL;
 801830e:	2300      	movs	r3, #0
 8018310:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018312:	4b68      	ldr	r3, [pc, #416]	; (80184b4 <ip4_input+0x27c>)
 8018314:	695b      	ldr	r3, [r3, #20]
 8018316:	b2db      	uxtb	r3, r3
 8018318:	2b7f      	cmp	r3, #127	; 0x7f
 801831a:	d017      	beq.n	801834c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801831c:	4b66      	ldr	r3, [pc, #408]	; (80184b8 <ip4_input+0x280>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	61bb      	str	r3, [r7, #24]
 8018322:	e00e      	b.n	8018342 <ip4_input+0x10a>
          if (netif == inp) {
 8018324:	69ba      	ldr	r2, [r7, #24]
 8018326:	683b      	ldr	r3, [r7, #0]
 8018328:	429a      	cmp	r2, r3
 801832a:	d006      	beq.n	801833a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801832c:	69b8      	ldr	r0, [r7, #24]
 801832e:	f7ff ff59 	bl	80181e4 <ip4_input_accept>
 8018332:	4603      	mov	r3, r0
 8018334:	2b00      	cmp	r3, #0
 8018336:	d108      	bne.n	801834a <ip4_input+0x112>
 8018338:	e000      	b.n	801833c <ip4_input+0x104>
            continue;
 801833a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801833c:	69bb      	ldr	r3, [r7, #24]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	61bb      	str	r3, [r7, #24]
 8018342:	69bb      	ldr	r3, [r7, #24]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d1ed      	bne.n	8018324 <ip4_input+0xec>
 8018348:	e000      	b.n	801834c <ip4_input+0x114>
            break;
 801834a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801834c:	69bb      	ldr	r3, [r7, #24]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d111      	bne.n	8018376 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018352:	69fb      	ldr	r3, [r7, #28]
 8018354:	7a5b      	ldrb	r3, [r3, #9]
 8018356:	2b11      	cmp	r3, #17
 8018358:	d10d      	bne.n	8018376 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801835a:	8a7b      	ldrh	r3, [r7, #18]
 801835c:	69fa      	ldr	r2, [r7, #28]
 801835e:	4413      	add	r3, r2
 8018360:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	885b      	ldrh	r3, [r3, #2]
 8018366:	b29b      	uxth	r3, r3
 8018368:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801836c:	d103      	bne.n	8018376 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801836e:	683b      	ldr	r3, [r7, #0]
 8018370:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8018372:	2300      	movs	r3, #0
 8018374:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018376:	697b      	ldr	r3, [r7, #20]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d017      	beq.n	80183ac <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801837c:	4b4d      	ldr	r3, [pc, #308]	; (80184b4 <ip4_input+0x27c>)
 801837e:	691b      	ldr	r3, [r3, #16]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d013      	beq.n	80183ac <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018384:	4b4b      	ldr	r3, [pc, #300]	; (80184b4 <ip4_input+0x27c>)
 8018386:	691b      	ldr	r3, [r3, #16]
 8018388:	6839      	ldr	r1, [r7, #0]
 801838a:	4618      	mov	r0, r3
 801838c:	f000 f96e 	bl	801866c <ip4_addr_isbroadcast_u32>
 8018390:	4603      	mov	r3, r0
 8018392:	2b00      	cmp	r3, #0
 8018394:	d105      	bne.n	80183a2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018396:	4b47      	ldr	r3, [pc, #284]	; (80184b4 <ip4_input+0x27c>)
 8018398:	691b      	ldr	r3, [r3, #16]
 801839a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801839e:	2be0      	cmp	r3, #224	; 0xe0
 80183a0:	d104      	bne.n	80183ac <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80183a2:	6878      	ldr	r0, [r7, #4]
 80183a4:	f7f5 fd60 	bl	800de68 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80183a8:	2300      	movs	r3, #0
 80183aa:	e07e      	b.n	80184aa <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80183ac:	69bb      	ldr	r3, [r7, #24]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d104      	bne.n	80183bc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80183b2:	6878      	ldr	r0, [r7, #4]
 80183b4:	f7f5 fd58 	bl	800de68 <pbuf_free>
    return ERR_OK;
 80183b8:	2300      	movs	r3, #0
 80183ba:	e076      	b.n	80184aa <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80183bc:	69fb      	ldr	r3, [r7, #28]
 80183be:	88db      	ldrh	r3, [r3, #6]
 80183c0:	b29b      	uxth	r3, r3
 80183c2:	461a      	mov	r2, r3
 80183c4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80183c8:	4013      	ands	r3, r2
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d00b      	beq.n	80183e6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80183ce:	6878      	ldr	r0, [r7, #4]
 80183d0:	f000 fdd0 	bl	8018f74 <ip4_reass>
 80183d4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d101      	bne.n	80183e0 <ip4_input+0x1a8>
      return ERR_OK;
 80183dc:	2300      	movs	r3, #0
 80183de:	e064      	b.n	80184aa <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	685b      	ldr	r3, [r3, #4]
 80183e4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80183e6:	4a33      	ldr	r2, [pc, #204]	; (80184b4 <ip4_input+0x27c>)
 80183e8:	69bb      	ldr	r3, [r7, #24]
 80183ea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80183ec:	4a31      	ldr	r2, [pc, #196]	; (80184b4 <ip4_input+0x27c>)
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80183f2:	4a30      	ldr	r2, [pc, #192]	; (80184b4 <ip4_input+0x27c>)
 80183f4:	69fb      	ldr	r3, [r7, #28]
 80183f6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80183f8:	69fb      	ldr	r3, [r7, #28]
 80183fa:	781b      	ldrb	r3, [r3, #0]
 80183fc:	f003 030f 	and.w	r3, r3, #15
 8018400:	b2db      	uxtb	r3, r3
 8018402:	009b      	lsls	r3, r3, #2
 8018404:	b2db      	uxtb	r3, r3
 8018406:	b29a      	uxth	r2, r3
 8018408:	4b2a      	ldr	r3, [pc, #168]	; (80184b4 <ip4_input+0x27c>)
 801840a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801840c:	8a7b      	ldrh	r3, [r7, #18]
 801840e:	4619      	mov	r1, r3
 8018410:	6878      	ldr	r0, [r7, #4]
 8018412:	f7f5 fc71 	bl	800dcf8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018416:	69fb      	ldr	r3, [r7, #28]
 8018418:	7a5b      	ldrb	r3, [r3, #9]
 801841a:	2b11      	cmp	r3, #17
 801841c:	d006      	beq.n	801842c <ip4_input+0x1f4>
 801841e:	2b11      	cmp	r3, #17
 8018420:	dc13      	bgt.n	801844a <ip4_input+0x212>
 8018422:	2b01      	cmp	r3, #1
 8018424:	d00c      	beq.n	8018440 <ip4_input+0x208>
 8018426:	2b06      	cmp	r3, #6
 8018428:	d005      	beq.n	8018436 <ip4_input+0x1fe>
 801842a:	e00e      	b.n	801844a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801842c:	6839      	ldr	r1, [r7, #0]
 801842e:	6878      	ldr	r0, [r7, #4]
 8018430:	f7fc fa24 	bl	801487c <udp_input>
        break;
 8018434:	e026      	b.n	8018484 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018436:	6839      	ldr	r1, [r7, #0]
 8018438:	6878      	ldr	r0, [r7, #4]
 801843a:	f7f7 fde1 	bl	8010000 <tcp_input>
        break;
 801843e:	e021      	b.n	8018484 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018440:	6839      	ldr	r1, [r7, #0]
 8018442:	6878      	ldr	r0, [r7, #4]
 8018444:	f7ff fcd0 	bl	8017de8 <icmp_input>
        break;
 8018448:	e01c      	b.n	8018484 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801844a:	4b1a      	ldr	r3, [pc, #104]	; (80184b4 <ip4_input+0x27c>)
 801844c:	695b      	ldr	r3, [r3, #20]
 801844e:	69b9      	ldr	r1, [r7, #24]
 8018450:	4618      	mov	r0, r3
 8018452:	f000 f90b 	bl	801866c <ip4_addr_isbroadcast_u32>
 8018456:	4603      	mov	r3, r0
 8018458:	2b00      	cmp	r3, #0
 801845a:	d10f      	bne.n	801847c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801845c:	4b15      	ldr	r3, [pc, #84]	; (80184b4 <ip4_input+0x27c>)
 801845e:	695b      	ldr	r3, [r3, #20]
 8018460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018464:	2be0      	cmp	r3, #224	; 0xe0
 8018466:	d009      	beq.n	801847c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018468:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801846c:	4619      	mov	r1, r3
 801846e:	6878      	ldr	r0, [r7, #4]
 8018470:	f7f5 fcb5 	bl	800ddde <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018474:	2102      	movs	r1, #2
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	f7ff fdba 	bl	8017ff0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801847c:	6878      	ldr	r0, [r7, #4]
 801847e:	f7f5 fcf3 	bl	800de68 <pbuf_free>
        break;
 8018482:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018484:	4b0b      	ldr	r3, [pc, #44]	; (80184b4 <ip4_input+0x27c>)
 8018486:	2200      	movs	r2, #0
 8018488:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801848a:	4b0a      	ldr	r3, [pc, #40]	; (80184b4 <ip4_input+0x27c>)
 801848c:	2200      	movs	r2, #0
 801848e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018490:	4b08      	ldr	r3, [pc, #32]	; (80184b4 <ip4_input+0x27c>)
 8018492:	2200      	movs	r2, #0
 8018494:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018496:	4b07      	ldr	r3, [pc, #28]	; (80184b4 <ip4_input+0x27c>)
 8018498:	2200      	movs	r2, #0
 801849a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801849c:	4b05      	ldr	r3, [pc, #20]	; (80184b4 <ip4_input+0x27c>)
 801849e:	2200      	movs	r2, #0
 80184a0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80184a2:	4b04      	ldr	r3, [pc, #16]	; (80184b4 <ip4_input+0x27c>)
 80184a4:	2200      	movs	r2, #0
 80184a6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80184a8:	2300      	movs	r3, #0
}
 80184aa:	4618      	mov	r0, r3
 80184ac:	3720      	adds	r7, #32
 80184ae:	46bd      	mov	sp, r7
 80184b0:	bd80      	pop	{r7, pc}
 80184b2:	bf00      	nop
 80184b4:	2000cf0c 	.word	0x2000cf0c
 80184b8:	20010650 	.word	0x20010650

080184bc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b08a      	sub	sp, #40	; 0x28
 80184c0:	af04      	add	r7, sp, #16
 80184c2:	60f8      	str	r0, [r7, #12]
 80184c4:	60b9      	str	r1, [r7, #8]
 80184c6:	607a      	str	r2, [r7, #4]
 80184c8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d009      	beq.n	80184e8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d003      	beq.n	80184e2 <ip4_output_if+0x26>
 80184da:	68bb      	ldr	r3, [r7, #8]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d102      	bne.n	80184e8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80184e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184e4:	3304      	adds	r3, #4
 80184e6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80184e8:	78fa      	ldrb	r2, [r7, #3]
 80184ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ec:	9302      	str	r3, [sp, #8]
 80184ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80184f2:	9301      	str	r3, [sp, #4]
 80184f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80184f8:	9300      	str	r3, [sp, #0]
 80184fa:	4613      	mov	r3, r2
 80184fc:	687a      	ldr	r2, [r7, #4]
 80184fe:	6979      	ldr	r1, [r7, #20]
 8018500:	68f8      	ldr	r0, [r7, #12]
 8018502:	f000 f805 	bl	8018510 <ip4_output_if_src>
 8018506:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018508:	4618      	mov	r0, r3
 801850a:	3718      	adds	r7, #24
 801850c:	46bd      	mov	sp, r7
 801850e:	bd80      	pop	{r7, pc}

08018510 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b088      	sub	sp, #32
 8018514:	af00      	add	r7, sp, #0
 8018516:	60f8      	str	r0, [r7, #12]
 8018518:	60b9      	str	r1, [r7, #8]
 801851a:	607a      	str	r2, [r7, #4]
 801851c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	7b9b      	ldrb	r3, [r3, #14]
 8018522:	2b01      	cmp	r3, #1
 8018524:	d006      	beq.n	8018534 <ip4_output_if_src+0x24>
 8018526:	4b4b      	ldr	r3, [pc, #300]	; (8018654 <ip4_output_if_src+0x144>)
 8018528:	f44f 7255 	mov.w	r2, #852	; 0x354
 801852c:	494a      	ldr	r1, [pc, #296]	; (8018658 <ip4_output_if_src+0x148>)
 801852e:	484b      	ldr	r0, [pc, #300]	; (801865c <ip4_output_if_src+0x14c>)
 8018530:	f003 f9ee 	bl	801b910 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d060      	beq.n	80185fc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801853a:	2314      	movs	r3, #20
 801853c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801853e:	2114      	movs	r1, #20
 8018540:	68f8      	ldr	r0, [r7, #12]
 8018542:	f7f5 fbc9 	bl	800dcd8 <pbuf_add_header>
 8018546:	4603      	mov	r3, r0
 8018548:	2b00      	cmp	r3, #0
 801854a:	d002      	beq.n	8018552 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801854c:	f06f 0301 	mvn.w	r3, #1
 8018550:	e07c      	b.n	801864c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	685b      	ldr	r3, [r3, #4]
 8018556:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	895b      	ldrh	r3, [r3, #10]
 801855c:	2b13      	cmp	r3, #19
 801855e:	d806      	bhi.n	801856e <ip4_output_if_src+0x5e>
 8018560:	4b3c      	ldr	r3, [pc, #240]	; (8018654 <ip4_output_if_src+0x144>)
 8018562:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018566:	493e      	ldr	r1, [pc, #248]	; (8018660 <ip4_output_if_src+0x150>)
 8018568:	483c      	ldr	r0, [pc, #240]	; (801865c <ip4_output_if_src+0x14c>)
 801856a:	f003 f9d1 	bl	801b910 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801856e:	69fb      	ldr	r3, [r7, #28]
 8018570:	78fa      	ldrb	r2, [r7, #3]
 8018572:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018574:	69fb      	ldr	r3, [r7, #28]
 8018576:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801857a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	681a      	ldr	r2, [r3, #0]
 8018580:	69fb      	ldr	r3, [r7, #28]
 8018582:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018584:	8b7b      	ldrh	r3, [r7, #26]
 8018586:	089b      	lsrs	r3, r3, #2
 8018588:	b29b      	uxth	r3, r3
 801858a:	b2db      	uxtb	r3, r3
 801858c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018590:	b2da      	uxtb	r2, r3
 8018592:	69fb      	ldr	r3, [r7, #28]
 8018594:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018596:	69fb      	ldr	r3, [r7, #28]
 8018598:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801859c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	891b      	ldrh	r3, [r3, #8]
 80185a2:	4618      	mov	r0, r3
 80185a4:	f7f4 f876 	bl	800c694 <lwip_htons>
 80185a8:	4603      	mov	r3, r0
 80185aa:	461a      	mov	r2, r3
 80185ac:	69fb      	ldr	r3, [r7, #28]
 80185ae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80185b0:	69fb      	ldr	r3, [r7, #28]
 80185b2:	2200      	movs	r2, #0
 80185b4:	719a      	strb	r2, [r3, #6]
 80185b6:	2200      	movs	r2, #0
 80185b8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80185ba:	4b2a      	ldr	r3, [pc, #168]	; (8018664 <ip4_output_if_src+0x154>)
 80185bc:	881b      	ldrh	r3, [r3, #0]
 80185be:	4618      	mov	r0, r3
 80185c0:	f7f4 f868 	bl	800c694 <lwip_htons>
 80185c4:	4603      	mov	r3, r0
 80185c6:	461a      	mov	r2, r3
 80185c8:	69fb      	ldr	r3, [r7, #28]
 80185ca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80185cc:	4b25      	ldr	r3, [pc, #148]	; (8018664 <ip4_output_if_src+0x154>)
 80185ce:	881b      	ldrh	r3, [r3, #0]
 80185d0:	3301      	adds	r3, #1
 80185d2:	b29a      	uxth	r2, r3
 80185d4:	4b23      	ldr	r3, [pc, #140]	; (8018664 <ip4_output_if_src+0x154>)
 80185d6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80185d8:	68bb      	ldr	r3, [r7, #8]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d104      	bne.n	80185e8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80185de:	4b22      	ldr	r3, [pc, #136]	; (8018668 <ip4_output_if_src+0x158>)
 80185e0:	681a      	ldr	r2, [r3, #0]
 80185e2:	69fb      	ldr	r3, [r7, #28]
 80185e4:	60da      	str	r2, [r3, #12]
 80185e6:	e003      	b.n	80185f0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80185e8:	68bb      	ldr	r3, [r7, #8]
 80185ea:	681a      	ldr	r2, [r3, #0]
 80185ec:	69fb      	ldr	r3, [r7, #28]
 80185ee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80185f0:	69fb      	ldr	r3, [r7, #28]
 80185f2:	2200      	movs	r2, #0
 80185f4:	729a      	strb	r2, [r3, #10]
 80185f6:	2200      	movs	r2, #0
 80185f8:	72da      	strb	r2, [r3, #11]
 80185fa:	e00f      	b.n	801861c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	895b      	ldrh	r3, [r3, #10]
 8018600:	2b13      	cmp	r3, #19
 8018602:	d802      	bhi.n	801860a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018604:	f06f 0301 	mvn.w	r3, #1
 8018608:	e020      	b.n	801864c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	685b      	ldr	r3, [r3, #4]
 801860e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018610:	69fb      	ldr	r3, [r7, #28]
 8018612:	691b      	ldr	r3, [r3, #16]
 8018614:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018616:	f107 0314 	add.w	r3, r7, #20
 801861a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801861e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018620:	2b00      	cmp	r3, #0
 8018622:	d00c      	beq.n	801863e <ip4_output_if_src+0x12e>
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	891a      	ldrh	r2, [r3, #8]
 8018628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801862a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801862c:	429a      	cmp	r2, r3
 801862e:	d906      	bls.n	801863e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018630:	687a      	ldr	r2, [r7, #4]
 8018632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018634:	68f8      	ldr	r0, [r7, #12]
 8018636:	f000 fe8b 	bl	8019350 <ip4_frag>
 801863a:	4603      	mov	r3, r0
 801863c:	e006      	b.n	801864c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018640:	695b      	ldr	r3, [r3, #20]
 8018642:	687a      	ldr	r2, [r7, #4]
 8018644:	68f9      	ldr	r1, [r7, #12]
 8018646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018648:	4798      	blx	r3
 801864a:	4603      	mov	r3, r0
}
 801864c:	4618      	mov	r0, r3
 801864e:	3720      	adds	r7, #32
 8018650:	46bd      	mov	sp, r7
 8018652:	bd80      	pop	{r7, pc}
 8018654:	080205dc 	.word	0x080205dc
 8018658:	08020610 	.word	0x08020610
 801865c:	0802061c 	.word	0x0802061c
 8018660:	08020644 	.word	0x08020644
 8018664:	20008c22 	.word	0x20008c22
 8018668:	08020b88 	.word	0x08020b88

0801866c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801866c:	b480      	push	{r7}
 801866e:	b085      	sub	sp, #20
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
 8018674:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018680:	d002      	beq.n	8018688 <ip4_addr_isbroadcast_u32+0x1c>
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d101      	bne.n	801868c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018688:	2301      	movs	r3, #1
 801868a:	e02a      	b.n	80186e2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801868c:	683b      	ldr	r3, [r7, #0]
 801868e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018692:	f003 0302 	and.w	r3, r3, #2
 8018696:	2b00      	cmp	r3, #0
 8018698:	d101      	bne.n	801869e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801869a:	2300      	movs	r3, #0
 801869c:	e021      	b.n	80186e2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801869e:	683b      	ldr	r3, [r7, #0]
 80186a0:	3304      	adds	r3, #4
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	687a      	ldr	r2, [r7, #4]
 80186a6:	429a      	cmp	r2, r3
 80186a8:	d101      	bne.n	80186ae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80186aa:	2300      	movs	r3, #0
 80186ac:	e019      	b.n	80186e2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80186ae:	68fa      	ldr	r2, [r7, #12]
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	3304      	adds	r3, #4
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	405a      	eors	r2, r3
 80186b8:	683b      	ldr	r3, [r7, #0]
 80186ba:	3308      	adds	r3, #8
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	4013      	ands	r3, r2
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d10d      	bne.n	80186e0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	3308      	adds	r3, #8
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	43da      	mvns	r2, r3
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80186d0:	683b      	ldr	r3, [r7, #0]
 80186d2:	3308      	adds	r3, #8
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80186d8:	429a      	cmp	r2, r3
 80186da:	d101      	bne.n	80186e0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80186dc:	2301      	movs	r3, #1
 80186de:	e000      	b.n	80186e2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80186e0:	2300      	movs	r3, #0
  }
}
 80186e2:	4618      	mov	r0, r3
 80186e4:	3714      	adds	r7, #20
 80186e6:	46bd      	mov	sp, r7
 80186e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ec:	4770      	bx	lr

080186ee <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 80186ee:	b580      	push	{r7, lr}
 80186f0:	b084      	sub	sp, #16
 80186f2:	af00      	add	r7, sp, #0
 80186f4:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 80186f6:	f107 030c 	add.w	r3, r7, #12
 80186fa:	4619      	mov	r1, r3
 80186fc:	6878      	ldr	r0, [r7, #4]
 80186fe:	f000 f80b 	bl	8018718 <ip4addr_aton>
 8018702:	4603      	mov	r3, r0
 8018704:	2b00      	cmp	r3, #0
 8018706:	d001      	beq.n	801870c <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	e001      	b.n	8018710 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 801870c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018710:	4618      	mov	r0, r3
 8018712:	3710      	adds	r7, #16
 8018714:	46bd      	mov	sp, r7
 8018716:	bd80      	pop	{r7, pc}

08018718 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b08a      	sub	sp, #40	; 0x28
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8018722:	f107 030c 	add.w	r3, r7, #12
 8018726:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8018730:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018734:	3301      	adds	r3, #1
 8018736:	4a89      	ldr	r2, [pc, #548]	; (801895c <ip4addr_aton+0x244>)
 8018738:	4413      	add	r3, r2
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	f003 0304 	and.w	r3, r3, #4
 8018740:	2b00      	cmp	r3, #0
 8018742:	d101      	bne.n	8018748 <ip4addr_aton+0x30>
      return 0;
 8018744:	2300      	movs	r3, #0
 8018746:	e105      	b.n	8018954 <ip4addr_aton+0x23c>
    }
    val = 0;
 8018748:	2300      	movs	r3, #0
 801874a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801874c:	230a      	movs	r3, #10
 801874e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8018752:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018756:	2b30      	cmp	r3, #48	; 0x30
 8018758:	d11c      	bne.n	8018794 <ip4addr_aton+0x7c>
      c = *++cp;
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	3301      	adds	r3, #1
 801875e:	607b      	str	r3, [r7, #4]
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	781b      	ldrb	r3, [r3, #0]
 8018764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8018768:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801876c:	2b78      	cmp	r3, #120	; 0x78
 801876e:	d003      	beq.n	8018778 <ip4addr_aton+0x60>
 8018770:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018774:	2b58      	cmp	r3, #88	; 0x58
 8018776:	d10a      	bne.n	801878e <ip4addr_aton+0x76>
        base = 16;
 8018778:	2310      	movs	r3, #16
 801877a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	3301      	adds	r3, #1
 8018782:	607b      	str	r3, [r7, #4]
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	781b      	ldrb	r3, [r3, #0]
 8018788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801878c:	e002      	b.n	8018794 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801878e:	2308      	movs	r3, #8
 8018790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8018794:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018798:	3301      	adds	r3, #1
 801879a:	4a70      	ldr	r2, [pc, #448]	; (801895c <ip4addr_aton+0x244>)
 801879c:	4413      	add	r3, r2
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	f003 0304 	and.w	r3, r3, #4
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d011      	beq.n	80187cc <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80187a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80187ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187ae:	fb02 f203 	mul.w	r2, r2, r3
 80187b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80187b6:	4413      	add	r3, r2
 80187b8:	3b30      	subs	r3, #48	; 0x30
 80187ba:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	3301      	adds	r3, #1
 80187c0:	607b      	str	r3, [r7, #4]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	781b      	ldrb	r3, [r3, #0]
 80187c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80187ca:	e7e3      	b.n	8018794 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80187cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80187d0:	2b10      	cmp	r3, #16
 80187d2:	d127      	bne.n	8018824 <ip4addr_aton+0x10c>
 80187d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80187d8:	3301      	adds	r3, #1
 80187da:	4a60      	ldr	r2, [pc, #384]	; (801895c <ip4addr_aton+0x244>)
 80187dc:	4413      	add	r3, r2
 80187de:	781b      	ldrb	r3, [r3, #0]
 80187e0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d01d      	beq.n	8018824 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80187e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ea:	011b      	lsls	r3, r3, #4
 80187ec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80187f0:	f102 010a 	add.w	r1, r2, #10
 80187f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80187f8:	3201      	adds	r2, #1
 80187fa:	4858      	ldr	r0, [pc, #352]	; (801895c <ip4addr_aton+0x244>)
 80187fc:	4402      	add	r2, r0
 80187fe:	7812      	ldrb	r2, [r2, #0]
 8018800:	f002 0203 	and.w	r2, r2, #3
 8018804:	2a02      	cmp	r2, #2
 8018806:	d101      	bne.n	801880c <ip4addr_aton+0xf4>
 8018808:	2261      	movs	r2, #97	; 0x61
 801880a:	e000      	b.n	801880e <ip4addr_aton+0xf6>
 801880c:	2241      	movs	r2, #65	; 0x41
 801880e:	1a8a      	subs	r2, r1, r2
 8018810:	4313      	orrs	r3, r2
 8018812:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	3301      	adds	r3, #1
 8018818:	607b      	str	r3, [r7, #4]
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	781b      	ldrb	r3, [r3, #0]
 801881e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8018822:	e7b7      	b.n	8018794 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8018824:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018828:	2b2e      	cmp	r3, #46	; 0x2e
 801882a:	d114      	bne.n	8018856 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801882c:	f107 030c 	add.w	r3, r7, #12
 8018830:	330c      	adds	r3, #12
 8018832:	69fa      	ldr	r2, [r7, #28]
 8018834:	429a      	cmp	r2, r3
 8018836:	d301      	bcc.n	801883c <ip4addr_aton+0x124>
        return 0;
 8018838:	2300      	movs	r3, #0
 801883a:	e08b      	b.n	8018954 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801883c:	69fb      	ldr	r3, [r7, #28]
 801883e:	1d1a      	adds	r2, r3, #4
 8018840:	61fa      	str	r2, [r7, #28]
 8018842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018844:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	3301      	adds	r3, #1
 801884a:	607b      	str	r3, [r7, #4]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	781b      	ldrb	r3, [r3, #0]
 8018850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8018854:	e76c      	b.n	8018730 <ip4addr_aton+0x18>
    } else {
      break;
 8018856:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8018858:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801885c:	2b00      	cmp	r3, #0
 801885e:	d00b      	beq.n	8018878 <ip4addr_aton+0x160>
 8018860:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018864:	3301      	adds	r3, #1
 8018866:	4a3d      	ldr	r2, [pc, #244]	; (801895c <ip4addr_aton+0x244>)
 8018868:	4413      	add	r3, r2
 801886a:	781b      	ldrb	r3, [r3, #0]
 801886c:	f003 0308 	and.w	r3, r3, #8
 8018870:	2b00      	cmp	r3, #0
 8018872:	d101      	bne.n	8018878 <ip4addr_aton+0x160>
    return 0;
 8018874:	2300      	movs	r3, #0
 8018876:	e06d      	b.n	8018954 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8018878:	f107 030c 	add.w	r3, r7, #12
 801887c:	69fa      	ldr	r2, [r7, #28]
 801887e:	1ad3      	subs	r3, r2, r3
 8018880:	109b      	asrs	r3, r3, #2
 8018882:	3301      	adds	r3, #1
 8018884:	2b04      	cmp	r3, #4
 8018886:	d853      	bhi.n	8018930 <ip4addr_aton+0x218>
 8018888:	a201      	add	r2, pc, #4	; (adr r2, 8018890 <ip4addr_aton+0x178>)
 801888a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801888e:	bf00      	nop
 8018890:	080188a5 	.word	0x080188a5
 8018894:	0801893f 	.word	0x0801893f
 8018898:	080188a9 	.word	0x080188a9
 801889c:	080188cb 	.word	0x080188cb
 80188a0:	080188f9 	.word	0x080188f9

    case 0:
      return 0;       /* initial nondigit */
 80188a4:	2300      	movs	r3, #0
 80188a6:	e055      	b.n	8018954 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80188a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80188ae:	d301      	bcc.n	80188b4 <ip4addr_aton+0x19c>
        return 0;
 80188b0:	2300      	movs	r3, #0
 80188b2:	e04f      	b.n	8018954 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	2bff      	cmp	r3, #255	; 0xff
 80188b8:	d901      	bls.n	80188be <ip4addr_aton+0x1a6>
        return 0;
 80188ba:	2300      	movs	r3, #0
 80188bc:	e04a      	b.n	8018954 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	061b      	lsls	r3, r3, #24
 80188c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188c4:	4313      	orrs	r3, r2
 80188c6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80188c8:	e03a      	b.n	8018940 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80188ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80188d0:	d301      	bcc.n	80188d6 <ip4addr_aton+0x1be>
        return 0;
 80188d2:	2300      	movs	r3, #0
 80188d4:	e03e      	b.n	8018954 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	2bff      	cmp	r3, #255	; 0xff
 80188da:	d802      	bhi.n	80188e2 <ip4addr_aton+0x1ca>
 80188dc:	693b      	ldr	r3, [r7, #16]
 80188de:	2bff      	cmp	r3, #255	; 0xff
 80188e0:	d901      	bls.n	80188e6 <ip4addr_aton+0x1ce>
        return 0;
 80188e2:	2300      	movs	r3, #0
 80188e4:	e036      	b.n	8018954 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	061a      	lsls	r2, r3, #24
 80188ea:	693b      	ldr	r3, [r7, #16]
 80188ec:	041b      	lsls	r3, r3, #16
 80188ee:	4313      	orrs	r3, r2
 80188f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188f2:	4313      	orrs	r3, r2
 80188f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80188f6:	e023      	b.n	8018940 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 80188f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188fa:	2bff      	cmp	r3, #255	; 0xff
 80188fc:	d901      	bls.n	8018902 <ip4addr_aton+0x1ea>
        return 0;
 80188fe:	2300      	movs	r3, #0
 8018900:	e028      	b.n	8018954 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	2bff      	cmp	r3, #255	; 0xff
 8018906:	d805      	bhi.n	8018914 <ip4addr_aton+0x1fc>
 8018908:	693b      	ldr	r3, [r7, #16]
 801890a:	2bff      	cmp	r3, #255	; 0xff
 801890c:	d802      	bhi.n	8018914 <ip4addr_aton+0x1fc>
 801890e:	697b      	ldr	r3, [r7, #20]
 8018910:	2bff      	cmp	r3, #255	; 0xff
 8018912:	d901      	bls.n	8018918 <ip4addr_aton+0x200>
        return 0;
 8018914:	2300      	movs	r3, #0
 8018916:	e01d      	b.n	8018954 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	061a      	lsls	r2, r3, #24
 801891c:	693b      	ldr	r3, [r7, #16]
 801891e:	041b      	lsls	r3, r3, #16
 8018920:	431a      	orrs	r2, r3
 8018922:	697b      	ldr	r3, [r7, #20]
 8018924:	021b      	lsls	r3, r3, #8
 8018926:	4313      	orrs	r3, r2
 8018928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801892a:	4313      	orrs	r3, r2
 801892c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801892e:	e007      	b.n	8018940 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8018930:	4b0b      	ldr	r3, [pc, #44]	; (8018960 <ip4addr_aton+0x248>)
 8018932:	22f9      	movs	r2, #249	; 0xf9
 8018934:	490b      	ldr	r1, [pc, #44]	; (8018964 <ip4addr_aton+0x24c>)
 8018936:	480c      	ldr	r0, [pc, #48]	; (8018968 <ip4addr_aton+0x250>)
 8018938:	f002 ffea 	bl	801b910 <iprintf>
      break;
 801893c:	e000      	b.n	8018940 <ip4addr_aton+0x228>
      break;
 801893e:	bf00      	nop
  }
  if (addr) {
 8018940:	683b      	ldr	r3, [r7, #0]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d005      	beq.n	8018952 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8018946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018948:	f7f3 feb9 	bl	800c6be <lwip_htonl>
 801894c:	4602      	mov	r2, r0
 801894e:	683b      	ldr	r3, [r7, #0]
 8018950:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8018952:	2301      	movs	r3, #1
}
 8018954:	4618      	mov	r0, r3
 8018956:	3728      	adds	r7, #40	; 0x28
 8018958:	46bd      	mov	sp, r7
 801895a:	bd80      	pop	{r7, pc}
 801895c:	08020ba8 	.word	0x08020ba8
 8018960:	08020674 	.word	0x08020674
 8018964:	080206b0 	.word	0x080206b0
 8018968:	080206bc 	.word	0x080206bc

0801896c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b084      	sub	sp, #16
 8018970:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018972:	2300      	movs	r3, #0
 8018974:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018976:	4b12      	ldr	r3, [pc, #72]	; (80189c0 <ip_reass_tmr+0x54>)
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801897c:	e018      	b.n	80189b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	7fdb      	ldrb	r3, [r3, #31]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d00b      	beq.n	801899e <ip_reass_tmr+0x32>
      r->timer--;
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	7fdb      	ldrb	r3, [r3, #31]
 801898a:	3b01      	subs	r3, #1
 801898c:	b2da      	uxtb	r2, r3
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	60fb      	str	r3, [r7, #12]
 801899c:	e008      	b.n	80189b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80189a8:	68b9      	ldr	r1, [r7, #8]
 80189aa:	6878      	ldr	r0, [r7, #4]
 80189ac:	f000 f80a 	bl	80189c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d1e3      	bne.n	801897e <ip_reass_tmr+0x12>
    }
  }
}
 80189b6:	bf00      	nop
 80189b8:	bf00      	nop
 80189ba:	3710      	adds	r7, #16
 80189bc:	46bd      	mov	sp, r7
 80189be:	bd80      	pop	{r7, pc}
 80189c0:	20008c24 	.word	0x20008c24

080189c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b088      	sub	sp, #32
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
 80189cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80189ce:	2300      	movs	r3, #0
 80189d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80189d2:	683a      	ldr	r2, [r7, #0]
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	429a      	cmp	r2, r3
 80189d8:	d105      	bne.n	80189e6 <ip_reass_free_complete_datagram+0x22>
 80189da:	4b45      	ldr	r3, [pc, #276]	; (8018af0 <ip_reass_free_complete_datagram+0x12c>)
 80189dc:	22ab      	movs	r2, #171	; 0xab
 80189de:	4945      	ldr	r1, [pc, #276]	; (8018af4 <ip_reass_free_complete_datagram+0x130>)
 80189e0:	4845      	ldr	r0, [pc, #276]	; (8018af8 <ip_reass_free_complete_datagram+0x134>)
 80189e2:	f002 ff95 	bl	801b910 <iprintf>
  if (prev != NULL) {
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d00a      	beq.n	8018a02 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80189ec:	683b      	ldr	r3, [r7, #0]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	687a      	ldr	r2, [r7, #4]
 80189f2:	429a      	cmp	r2, r3
 80189f4:	d005      	beq.n	8018a02 <ip_reass_free_complete_datagram+0x3e>
 80189f6:	4b3e      	ldr	r3, [pc, #248]	; (8018af0 <ip_reass_free_complete_datagram+0x12c>)
 80189f8:	22ad      	movs	r2, #173	; 0xad
 80189fa:	4940      	ldr	r1, [pc, #256]	; (8018afc <ip_reass_free_complete_datagram+0x138>)
 80189fc:	483e      	ldr	r0, [pc, #248]	; (8018af8 <ip_reass_free_complete_datagram+0x134>)
 80189fe:	f002 ff87 	bl	801b910 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	685b      	ldr	r3, [r3, #4]
 8018a06:	685b      	ldr	r3, [r3, #4]
 8018a08:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018a0a:	697b      	ldr	r3, [r7, #20]
 8018a0c:	889b      	ldrh	r3, [r3, #4]
 8018a0e:	b29b      	uxth	r3, r3
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d12a      	bne.n	8018a6a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	685b      	ldr	r3, [r3, #4]
 8018a18:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018a1a:	697b      	ldr	r3, [r7, #20]
 8018a1c:	681a      	ldr	r2, [r3, #0]
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018a22:	69bb      	ldr	r3, [r7, #24]
 8018a24:	6858      	ldr	r0, [r3, #4]
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	3308      	adds	r3, #8
 8018a2a:	2214      	movs	r2, #20
 8018a2c:	4619      	mov	r1, r3
 8018a2e:	f002 ff59 	bl	801b8e4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018a32:	2101      	movs	r1, #1
 8018a34:	69b8      	ldr	r0, [r7, #24]
 8018a36:	f7ff faeb 	bl	8018010 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018a3a:	69b8      	ldr	r0, [r7, #24]
 8018a3c:	f7f5 faa2 	bl	800df84 <pbuf_clen>
 8018a40:	4603      	mov	r3, r0
 8018a42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018a44:	8bfa      	ldrh	r2, [r7, #30]
 8018a46:	8a7b      	ldrh	r3, [r7, #18]
 8018a48:	4413      	add	r3, r2
 8018a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018a4e:	db05      	blt.n	8018a5c <ip_reass_free_complete_datagram+0x98>
 8018a50:	4b27      	ldr	r3, [pc, #156]	; (8018af0 <ip_reass_free_complete_datagram+0x12c>)
 8018a52:	22bc      	movs	r2, #188	; 0xbc
 8018a54:	492a      	ldr	r1, [pc, #168]	; (8018b00 <ip_reass_free_complete_datagram+0x13c>)
 8018a56:	4828      	ldr	r0, [pc, #160]	; (8018af8 <ip_reass_free_complete_datagram+0x134>)
 8018a58:	f002 ff5a 	bl	801b910 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018a5c:	8bfa      	ldrh	r2, [r7, #30]
 8018a5e:	8a7b      	ldrh	r3, [r7, #18]
 8018a60:	4413      	add	r3, r2
 8018a62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018a64:	69b8      	ldr	r0, [r7, #24]
 8018a66:	f7f5 f9ff 	bl	800de68 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	685b      	ldr	r3, [r3, #4]
 8018a6e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018a70:	e01f      	b.n	8018ab2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018a72:	69bb      	ldr	r3, [r7, #24]
 8018a74:	685b      	ldr	r3, [r3, #4]
 8018a76:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018a78:	69bb      	ldr	r3, [r7, #24]
 8018a7a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018a7c:	697b      	ldr	r3, [r7, #20]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018a82:	68f8      	ldr	r0, [r7, #12]
 8018a84:	f7f5 fa7e 	bl	800df84 <pbuf_clen>
 8018a88:	4603      	mov	r3, r0
 8018a8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018a8c:	8bfa      	ldrh	r2, [r7, #30]
 8018a8e:	8a7b      	ldrh	r3, [r7, #18]
 8018a90:	4413      	add	r3, r2
 8018a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018a96:	db05      	blt.n	8018aa4 <ip_reass_free_complete_datagram+0xe0>
 8018a98:	4b15      	ldr	r3, [pc, #84]	; (8018af0 <ip_reass_free_complete_datagram+0x12c>)
 8018a9a:	22cc      	movs	r2, #204	; 0xcc
 8018a9c:	4918      	ldr	r1, [pc, #96]	; (8018b00 <ip_reass_free_complete_datagram+0x13c>)
 8018a9e:	4816      	ldr	r0, [pc, #88]	; (8018af8 <ip_reass_free_complete_datagram+0x134>)
 8018aa0:	f002 ff36 	bl	801b910 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018aa4:	8bfa      	ldrh	r2, [r7, #30]
 8018aa6:	8a7b      	ldrh	r3, [r7, #18]
 8018aa8:	4413      	add	r3, r2
 8018aaa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018aac:	68f8      	ldr	r0, [r7, #12]
 8018aae:	f7f5 f9db 	bl	800de68 <pbuf_free>
  while (p != NULL) {
 8018ab2:	69bb      	ldr	r3, [r7, #24]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d1dc      	bne.n	8018a72 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018ab8:	6839      	ldr	r1, [r7, #0]
 8018aba:	6878      	ldr	r0, [r7, #4]
 8018abc:	f000 f8c2 	bl	8018c44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018ac0:	4b10      	ldr	r3, [pc, #64]	; (8018b04 <ip_reass_free_complete_datagram+0x140>)
 8018ac2:	881b      	ldrh	r3, [r3, #0]
 8018ac4:	8bfa      	ldrh	r2, [r7, #30]
 8018ac6:	429a      	cmp	r2, r3
 8018ac8:	d905      	bls.n	8018ad6 <ip_reass_free_complete_datagram+0x112>
 8018aca:	4b09      	ldr	r3, [pc, #36]	; (8018af0 <ip_reass_free_complete_datagram+0x12c>)
 8018acc:	22d2      	movs	r2, #210	; 0xd2
 8018ace:	490e      	ldr	r1, [pc, #56]	; (8018b08 <ip_reass_free_complete_datagram+0x144>)
 8018ad0:	4809      	ldr	r0, [pc, #36]	; (8018af8 <ip_reass_free_complete_datagram+0x134>)
 8018ad2:	f002 ff1d 	bl	801b910 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018ad6:	4b0b      	ldr	r3, [pc, #44]	; (8018b04 <ip_reass_free_complete_datagram+0x140>)
 8018ad8:	881a      	ldrh	r2, [r3, #0]
 8018ada:	8bfb      	ldrh	r3, [r7, #30]
 8018adc:	1ad3      	subs	r3, r2, r3
 8018ade:	b29a      	uxth	r2, r3
 8018ae0:	4b08      	ldr	r3, [pc, #32]	; (8018b04 <ip_reass_free_complete_datagram+0x140>)
 8018ae2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018ae4:	8bfb      	ldrh	r3, [r7, #30]
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3720      	adds	r7, #32
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}
 8018aee:	bf00      	nop
 8018af0:	080206e4 	.word	0x080206e4
 8018af4:	08020720 	.word	0x08020720
 8018af8:	0802072c 	.word	0x0802072c
 8018afc:	08020754 	.word	0x08020754
 8018b00:	08020768 	.word	0x08020768
 8018b04:	20008c28 	.word	0x20008c28
 8018b08:	08020788 	.word	0x08020788

08018b0c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	b08a      	sub	sp, #40	; 0x28
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	6078      	str	r0, [r7, #4]
 8018b14:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018b16:	2300      	movs	r3, #0
 8018b18:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018b1e:	2300      	movs	r3, #0
 8018b20:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018b22:	2300      	movs	r3, #0
 8018b24:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018b26:	2300      	movs	r3, #0
 8018b28:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018b2a:	4b28      	ldr	r3, [pc, #160]	; (8018bcc <ip_reass_remove_oldest_datagram+0xc0>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018b30:	e030      	b.n	8018b94 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b34:	695a      	ldr	r2, [r3, #20]
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	68db      	ldr	r3, [r3, #12]
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	d10c      	bne.n	8018b58 <ip_reass_remove_oldest_datagram+0x4c>
 8018b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b40:	699a      	ldr	r2, [r3, #24]
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	691b      	ldr	r3, [r3, #16]
 8018b46:	429a      	cmp	r2, r3
 8018b48:	d106      	bne.n	8018b58 <ip_reass_remove_oldest_datagram+0x4c>
 8018b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b4c:	899a      	ldrh	r2, [r3, #12]
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	889b      	ldrh	r3, [r3, #4]
 8018b52:	b29b      	uxth	r3, r3
 8018b54:	429a      	cmp	r2, r3
 8018b56:	d014      	beq.n	8018b82 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018b58:	693b      	ldr	r3, [r7, #16]
 8018b5a:	3301      	adds	r3, #1
 8018b5c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018b5e:	6a3b      	ldr	r3, [r7, #32]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d104      	bne.n	8018b6e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b66:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018b68:	69fb      	ldr	r3, [r7, #28]
 8018b6a:	61bb      	str	r3, [r7, #24]
 8018b6c:	e009      	b.n	8018b82 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b70:	7fda      	ldrb	r2, [r3, #31]
 8018b72:	6a3b      	ldr	r3, [r7, #32]
 8018b74:	7fdb      	ldrb	r3, [r3, #31]
 8018b76:	429a      	cmp	r2, r3
 8018b78:	d803      	bhi.n	8018b82 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b7c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018b7e:	69fb      	ldr	r3, [r7, #28]
 8018b80:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d001      	beq.n	8018b8e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b8c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d1cb      	bne.n	8018b32 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018b9a:	6a3b      	ldr	r3, [r7, #32]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d008      	beq.n	8018bb2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018ba0:	69b9      	ldr	r1, [r7, #24]
 8018ba2:	6a38      	ldr	r0, [r7, #32]
 8018ba4:	f7ff ff0e 	bl	80189c4 <ip_reass_free_complete_datagram>
 8018ba8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018baa:	697a      	ldr	r2, [r7, #20]
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	4413      	add	r3, r2
 8018bb0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018bb2:	697a      	ldr	r2, [r7, #20]
 8018bb4:	683b      	ldr	r3, [r7, #0]
 8018bb6:	429a      	cmp	r2, r3
 8018bb8:	da02      	bge.n	8018bc0 <ip_reass_remove_oldest_datagram+0xb4>
 8018bba:	693b      	ldr	r3, [r7, #16]
 8018bbc:	2b01      	cmp	r3, #1
 8018bbe:	dcac      	bgt.n	8018b1a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018bc0:	697b      	ldr	r3, [r7, #20]
}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	3728      	adds	r7, #40	; 0x28
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bd80      	pop	{r7, pc}
 8018bca:	bf00      	nop
 8018bcc:	20008c24 	.word	0x20008c24

08018bd0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b084      	sub	sp, #16
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	6078      	str	r0, [r7, #4]
 8018bd8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018bda:	2004      	movs	r0, #4
 8018bdc:	f7f4 fa10 	bl	800d000 <memp_malloc>
 8018be0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d110      	bne.n	8018c0a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018be8:	6839      	ldr	r1, [r7, #0]
 8018bea:	6878      	ldr	r0, [r7, #4]
 8018bec:	f7ff ff8e 	bl	8018b0c <ip_reass_remove_oldest_datagram>
 8018bf0:	4602      	mov	r2, r0
 8018bf2:	683b      	ldr	r3, [r7, #0]
 8018bf4:	4293      	cmp	r3, r2
 8018bf6:	dc03      	bgt.n	8018c00 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018bf8:	2004      	movs	r0, #4
 8018bfa:	f7f4 fa01 	bl	800d000 <memp_malloc>
 8018bfe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d101      	bne.n	8018c0a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018c06:	2300      	movs	r3, #0
 8018c08:	e016      	b.n	8018c38 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018c0a:	2220      	movs	r2, #32
 8018c0c:	2100      	movs	r1, #0
 8018c0e:	68f8      	ldr	r0, [r7, #12]
 8018c10:	f002 fe76 	bl	801b900 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	220f      	movs	r2, #15
 8018c18:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018c1a:	4b09      	ldr	r3, [pc, #36]	; (8018c40 <ip_reass_enqueue_new_datagram+0x70>)
 8018c1c:	681a      	ldr	r2, [r3, #0]
 8018c1e:	68fb      	ldr	r3, [r7, #12]
 8018c20:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018c22:	4a07      	ldr	r2, [pc, #28]	; (8018c40 <ip_reass_enqueue_new_datagram+0x70>)
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	3308      	adds	r3, #8
 8018c2c:	2214      	movs	r2, #20
 8018c2e:	6879      	ldr	r1, [r7, #4]
 8018c30:	4618      	mov	r0, r3
 8018c32:	f002 fe57 	bl	801b8e4 <memcpy>
  return ipr;
 8018c36:	68fb      	ldr	r3, [r7, #12]
}
 8018c38:	4618      	mov	r0, r3
 8018c3a:	3710      	adds	r7, #16
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	bd80      	pop	{r7, pc}
 8018c40:	20008c24 	.word	0x20008c24

08018c44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b082      	sub	sp, #8
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
 8018c4c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018c4e:	4b10      	ldr	r3, [pc, #64]	; (8018c90 <ip_reass_dequeue_datagram+0x4c>)
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	687a      	ldr	r2, [r7, #4]
 8018c54:	429a      	cmp	r2, r3
 8018c56:	d104      	bne.n	8018c62 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	4a0c      	ldr	r2, [pc, #48]	; (8018c90 <ip_reass_dequeue_datagram+0x4c>)
 8018c5e:	6013      	str	r3, [r2, #0]
 8018c60:	e00d      	b.n	8018c7e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d106      	bne.n	8018c76 <ip_reass_dequeue_datagram+0x32>
 8018c68:	4b0a      	ldr	r3, [pc, #40]	; (8018c94 <ip_reass_dequeue_datagram+0x50>)
 8018c6a:	f240 1245 	movw	r2, #325	; 0x145
 8018c6e:	490a      	ldr	r1, [pc, #40]	; (8018c98 <ip_reass_dequeue_datagram+0x54>)
 8018c70:	480a      	ldr	r0, [pc, #40]	; (8018c9c <ip_reass_dequeue_datagram+0x58>)
 8018c72:	f002 fe4d 	bl	801b910 <iprintf>
    prev->next = ipr->next;
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681a      	ldr	r2, [r3, #0]
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018c7e:	6879      	ldr	r1, [r7, #4]
 8018c80:	2004      	movs	r0, #4
 8018c82:	f7f4 fa0f 	bl	800d0a4 <memp_free>
}
 8018c86:	bf00      	nop
 8018c88:	3708      	adds	r7, #8
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	bd80      	pop	{r7, pc}
 8018c8e:	bf00      	nop
 8018c90:	20008c24 	.word	0x20008c24
 8018c94:	080206e4 	.word	0x080206e4
 8018c98:	080207ac 	.word	0x080207ac
 8018c9c:	0802072c 	.word	0x0802072c

08018ca0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b08c      	sub	sp, #48	; 0x30
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	60f8      	str	r0, [r7, #12]
 8018ca8:	60b9      	str	r1, [r7, #8]
 8018caa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018cac:	2300      	movs	r3, #0
 8018cae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018cb0:	2301      	movs	r3, #1
 8018cb2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018cb4:	68bb      	ldr	r3, [r7, #8]
 8018cb6:	685b      	ldr	r3, [r3, #4]
 8018cb8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018cba:	69fb      	ldr	r3, [r7, #28]
 8018cbc:	885b      	ldrh	r3, [r3, #2]
 8018cbe:	b29b      	uxth	r3, r3
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f7f3 fce7 	bl	800c694 <lwip_htons>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018cca:	69fb      	ldr	r3, [r7, #28]
 8018ccc:	781b      	ldrb	r3, [r3, #0]
 8018cce:	f003 030f 	and.w	r3, r3, #15
 8018cd2:	b2db      	uxtb	r3, r3
 8018cd4:	009b      	lsls	r3, r3, #2
 8018cd6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018cd8:	7e7b      	ldrb	r3, [r7, #25]
 8018cda:	b29b      	uxth	r3, r3
 8018cdc:	8b7a      	ldrh	r2, [r7, #26]
 8018cde:	429a      	cmp	r2, r3
 8018ce0:	d202      	bcs.n	8018ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ce6:	e135      	b.n	8018f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018ce8:	7e7b      	ldrb	r3, [r7, #25]
 8018cea:	b29b      	uxth	r3, r3
 8018cec:	8b7a      	ldrh	r2, [r7, #26]
 8018cee:	1ad3      	subs	r3, r2, r3
 8018cf0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018cf2:	69fb      	ldr	r3, [r7, #28]
 8018cf4:	88db      	ldrh	r3, [r3, #6]
 8018cf6:	b29b      	uxth	r3, r3
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f7f3 fccb 	bl	800c694 <lwip_htons>
 8018cfe:	4603      	mov	r3, r0
 8018d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018d04:	b29b      	uxth	r3, r3
 8018d06:	00db      	lsls	r3, r3, #3
 8018d08:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018d0a:	68bb      	ldr	r3, [r7, #8]
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d12:	2200      	movs	r2, #0
 8018d14:	701a      	strb	r2, [r3, #0]
 8018d16:	2200      	movs	r2, #0
 8018d18:	705a      	strb	r2, [r3, #1]
 8018d1a:	2200      	movs	r2, #0
 8018d1c:	709a      	strb	r2, [r3, #2]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d24:	8afa      	ldrh	r2, [r7, #22]
 8018d26:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018d28:	8afa      	ldrh	r2, [r7, #22]
 8018d2a:	8b7b      	ldrh	r3, [r7, #26]
 8018d2c:	4413      	add	r3, r2
 8018d2e:	b29a      	uxth	r2, r3
 8018d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d32:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d36:	88db      	ldrh	r3, [r3, #6]
 8018d38:	b29b      	uxth	r3, r3
 8018d3a:	8afa      	ldrh	r2, [r7, #22]
 8018d3c:	429a      	cmp	r2, r3
 8018d3e:	d902      	bls.n	8018d46 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d44:	e106      	b.n	8018f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	685b      	ldr	r3, [r3, #4]
 8018d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8018d4c:	e068      	b.n	8018e20 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d50:	685b      	ldr	r3, [r3, #4]
 8018d52:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d56:	889b      	ldrh	r3, [r3, #4]
 8018d58:	b29a      	uxth	r2, r3
 8018d5a:	693b      	ldr	r3, [r7, #16]
 8018d5c:	889b      	ldrh	r3, [r3, #4]
 8018d5e:	b29b      	uxth	r3, r3
 8018d60:	429a      	cmp	r2, r3
 8018d62:	d235      	bcs.n	8018dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d68:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d020      	beq.n	8018db2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d72:	889b      	ldrh	r3, [r3, #4]
 8018d74:	b29a      	uxth	r2, r3
 8018d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d78:	88db      	ldrh	r3, [r3, #6]
 8018d7a:	b29b      	uxth	r3, r3
 8018d7c:	429a      	cmp	r2, r3
 8018d7e:	d307      	bcc.n	8018d90 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d82:	88db      	ldrh	r3, [r3, #6]
 8018d84:	b29a      	uxth	r2, r3
 8018d86:	693b      	ldr	r3, [r7, #16]
 8018d88:	889b      	ldrh	r3, [r3, #4]
 8018d8a:	b29b      	uxth	r3, r3
 8018d8c:	429a      	cmp	r2, r3
 8018d8e:	d902      	bls.n	8018d96 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d94:	e0de      	b.n	8018f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d98:	68ba      	ldr	r2, [r7, #8]
 8018d9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d9e:	88db      	ldrh	r3, [r3, #6]
 8018da0:	b29a      	uxth	r2, r3
 8018da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018da4:	889b      	ldrh	r3, [r3, #4]
 8018da6:	b29b      	uxth	r3, r3
 8018da8:	429a      	cmp	r2, r3
 8018daa:	d03d      	beq.n	8018e28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018dac:	2300      	movs	r3, #0
 8018dae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018db0:	e03a      	b.n	8018e28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018db4:	88db      	ldrh	r3, [r3, #6]
 8018db6:	b29a      	uxth	r2, r3
 8018db8:	693b      	ldr	r3, [r7, #16]
 8018dba:	889b      	ldrh	r3, [r3, #4]
 8018dbc:	b29b      	uxth	r3, r3
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	d902      	bls.n	8018dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018dc6:	e0c5      	b.n	8018f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	68ba      	ldr	r2, [r7, #8]
 8018dcc:	605a      	str	r2, [r3, #4]
      break;
 8018dce:	e02b      	b.n	8018e28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dd2:	889b      	ldrh	r3, [r3, #4]
 8018dd4:	b29a      	uxth	r2, r3
 8018dd6:	693b      	ldr	r3, [r7, #16]
 8018dd8:	889b      	ldrh	r3, [r3, #4]
 8018dda:	b29b      	uxth	r3, r3
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d102      	bne.n	8018de6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018de4:	e0b6      	b.n	8018f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018de8:	889b      	ldrh	r3, [r3, #4]
 8018dea:	b29a      	uxth	r2, r3
 8018dec:	693b      	ldr	r3, [r7, #16]
 8018dee:	88db      	ldrh	r3, [r3, #6]
 8018df0:	b29b      	uxth	r3, r3
 8018df2:	429a      	cmp	r2, r3
 8018df4:	d202      	bcs.n	8018dfc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018dfa:	e0ab      	b.n	8018f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d009      	beq.n	8018e16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e04:	88db      	ldrh	r3, [r3, #6]
 8018e06:	b29a      	uxth	r2, r3
 8018e08:	693b      	ldr	r3, [r7, #16]
 8018e0a:	889b      	ldrh	r3, [r3, #4]
 8018e0c:	b29b      	uxth	r3, r3
 8018e0e:	429a      	cmp	r2, r3
 8018e10:	d001      	beq.n	8018e16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018e12:	2300      	movs	r3, #0
 8018e14:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018e16:	693b      	ldr	r3, [r7, #16]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018e1c:	693b      	ldr	r3, [r7, #16]
 8018e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d193      	bne.n	8018d4e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018e26:	e000      	b.n	8018e2a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018e28:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d12d      	bne.n	8018e8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d01c      	beq.n	8018e70 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e38:	88db      	ldrh	r3, [r3, #6]
 8018e3a:	b29a      	uxth	r2, r3
 8018e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e3e:	889b      	ldrh	r3, [r3, #4]
 8018e40:	b29b      	uxth	r3, r3
 8018e42:	429a      	cmp	r2, r3
 8018e44:	d906      	bls.n	8018e54 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018e46:	4b45      	ldr	r3, [pc, #276]	; (8018f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018e48:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018e4c:	4944      	ldr	r1, [pc, #272]	; (8018f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018e4e:	4845      	ldr	r0, [pc, #276]	; (8018f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018e50:	f002 fd5e 	bl	801b910 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e56:	68ba      	ldr	r2, [r7, #8]
 8018e58:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e5c:	88db      	ldrh	r3, [r3, #6]
 8018e5e:	b29a      	uxth	r2, r3
 8018e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e62:	889b      	ldrh	r3, [r3, #4]
 8018e64:	b29b      	uxth	r3, r3
 8018e66:	429a      	cmp	r2, r3
 8018e68:	d010      	beq.n	8018e8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	623b      	str	r3, [r7, #32]
 8018e6e:	e00d      	b.n	8018e8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	685b      	ldr	r3, [r3, #4]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d006      	beq.n	8018e86 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018e78:	4b38      	ldr	r3, [pc, #224]	; (8018f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018e7a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018e7e:	493a      	ldr	r1, [pc, #232]	; (8018f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018e80:	4838      	ldr	r0, [pc, #224]	; (8018f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018e82:	f002 fd45 	bl	801b910 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	68ba      	ldr	r2, [r7, #8]
 8018e8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d105      	bne.n	8018e9e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	7f9b      	ldrb	r3, [r3, #30]
 8018e96:	f003 0301 	and.w	r3, r3, #1
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d059      	beq.n	8018f52 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018e9e:	6a3b      	ldr	r3, [r7, #32]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d04f      	beq.n	8018f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	685b      	ldr	r3, [r3, #4]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d006      	beq.n	8018eba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	685b      	ldr	r3, [r3, #4]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	889b      	ldrh	r3, [r3, #4]
 8018eb4:	b29b      	uxth	r3, r3
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d002      	beq.n	8018ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018eba:	2300      	movs	r3, #0
 8018ebc:	623b      	str	r3, [r7, #32]
 8018ebe:	e041      	b.n	8018f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ec2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018eca:	e012      	b.n	8018ef2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ece:	685b      	ldr	r3, [r3, #4]
 8018ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ed4:	88db      	ldrh	r3, [r3, #6]
 8018ed6:	b29a      	uxth	r2, r3
 8018ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eda:	889b      	ldrh	r3, [r3, #4]
 8018edc:	b29b      	uxth	r3, r3
 8018ede:	429a      	cmp	r2, r3
 8018ee0:	d002      	beq.n	8018ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	623b      	str	r3, [r7, #32]
            break;
 8018ee6:	e007      	b.n	8018ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d1e9      	bne.n	8018ecc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018ef8:	6a3b      	ldr	r3, [r7, #32]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d022      	beq.n	8018f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	685b      	ldr	r3, [r3, #4]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d106      	bne.n	8018f14 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018f06:	4b15      	ldr	r3, [pc, #84]	; (8018f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018f08:	f240 12df 	movw	r2, #479	; 0x1df
 8018f0c:	4917      	ldr	r1, [pc, #92]	; (8018f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018f0e:	4815      	ldr	r0, [pc, #84]	; (8018f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018f10:	f002 fcfe 	bl	801b910 <iprintf>
          LWIP_ASSERT("sanity check",
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	685b      	ldr	r3, [r3, #4]
 8018f18:	685b      	ldr	r3, [r3, #4]
 8018f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f1c:	429a      	cmp	r2, r3
 8018f1e:	d106      	bne.n	8018f2e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018f20:	4b0e      	ldr	r3, [pc, #56]	; (8018f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018f22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018f26:	4911      	ldr	r1, [pc, #68]	; (8018f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018f28:	480e      	ldr	r0, [pc, #56]	; (8018f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018f2a:	f002 fcf1 	bl	801b910 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d006      	beq.n	8018f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018f36:	4b09      	ldr	r3, [pc, #36]	; (8018f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018f38:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018f3c:	490c      	ldr	r1, [pc, #48]	; (8018f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018f3e:	4809      	ldr	r0, [pc, #36]	; (8018f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018f40:	f002 fce6 	bl	801b910 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018f44:	6a3b      	ldr	r3, [r7, #32]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	bf14      	ite	ne
 8018f4a:	2301      	movne	r3, #1
 8018f4c:	2300      	moveq	r3, #0
 8018f4e:	b2db      	uxtb	r3, r3
 8018f50:	e000      	b.n	8018f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018f52:	2300      	movs	r3, #0
}
 8018f54:	4618      	mov	r0, r3
 8018f56:	3730      	adds	r7, #48	; 0x30
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	bd80      	pop	{r7, pc}
 8018f5c:	080206e4 	.word	0x080206e4
 8018f60:	080207c8 	.word	0x080207c8
 8018f64:	0802072c 	.word	0x0802072c
 8018f68:	080207e8 	.word	0x080207e8
 8018f6c:	08020820 	.word	0x08020820
 8018f70:	08020830 	.word	0x08020830

08018f74 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b08e      	sub	sp, #56	; 0x38
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	685b      	ldr	r3, [r3, #4]
 8018f80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f84:	781b      	ldrb	r3, [r3, #0]
 8018f86:	f003 030f 	and.w	r3, r3, #15
 8018f8a:	b2db      	uxtb	r3, r3
 8018f8c:	009b      	lsls	r3, r3, #2
 8018f8e:	b2db      	uxtb	r3, r3
 8018f90:	2b14      	cmp	r3, #20
 8018f92:	f040 8167 	bne.w	8019264 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f98:	88db      	ldrh	r3, [r3, #6]
 8018f9a:	b29b      	uxth	r3, r3
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	f7f3 fb79 	bl	800c694 <lwip_htons>
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018fa8:	b29b      	uxth	r3, r3
 8018faa:	00db      	lsls	r3, r3, #3
 8018fac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fb0:	885b      	ldrh	r3, [r3, #2]
 8018fb2:	b29b      	uxth	r3, r3
 8018fb4:	4618      	mov	r0, r3
 8018fb6:	f7f3 fb6d 	bl	800c694 <lwip_htons>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc0:	781b      	ldrb	r3, [r3, #0]
 8018fc2:	f003 030f 	and.w	r3, r3, #15
 8018fc6:	b2db      	uxtb	r3, r3
 8018fc8:	009b      	lsls	r3, r3, #2
 8018fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018fce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018fd2:	b29b      	uxth	r3, r3
 8018fd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018fd6:	429a      	cmp	r2, r3
 8018fd8:	f0c0 8146 	bcc.w	8019268 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018fe0:	b29b      	uxth	r3, r3
 8018fe2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018fe4:	1ad3      	subs	r3, r2, r3
 8018fe6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018fe8:	6878      	ldr	r0, [r7, #4]
 8018fea:	f7f4 ffcb 	bl	800df84 <pbuf_clen>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018ff2:	4b9f      	ldr	r3, [pc, #636]	; (8019270 <ip4_reass+0x2fc>)
 8018ff4:	881b      	ldrh	r3, [r3, #0]
 8018ff6:	461a      	mov	r2, r3
 8018ff8:	8c3b      	ldrh	r3, [r7, #32]
 8018ffa:	4413      	add	r3, r2
 8018ffc:	2b0a      	cmp	r3, #10
 8018ffe:	dd10      	ble.n	8019022 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019000:	8c3b      	ldrh	r3, [r7, #32]
 8019002:	4619      	mov	r1, r3
 8019004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019006:	f7ff fd81 	bl	8018b0c <ip_reass_remove_oldest_datagram>
 801900a:	4603      	mov	r3, r0
 801900c:	2b00      	cmp	r3, #0
 801900e:	f000 812d 	beq.w	801926c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019012:	4b97      	ldr	r3, [pc, #604]	; (8019270 <ip4_reass+0x2fc>)
 8019014:	881b      	ldrh	r3, [r3, #0]
 8019016:	461a      	mov	r2, r3
 8019018:	8c3b      	ldrh	r3, [r7, #32]
 801901a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801901c:	2b0a      	cmp	r3, #10
 801901e:	f300 8125 	bgt.w	801926c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019022:	4b94      	ldr	r3, [pc, #592]	; (8019274 <ip4_reass+0x300>)
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	633b      	str	r3, [r7, #48]	; 0x30
 8019028:	e015      	b.n	8019056 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801902c:	695a      	ldr	r2, [r3, #20]
 801902e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019030:	68db      	ldr	r3, [r3, #12]
 8019032:	429a      	cmp	r2, r3
 8019034:	d10c      	bne.n	8019050 <ip4_reass+0xdc>
 8019036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019038:	699a      	ldr	r2, [r3, #24]
 801903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801903c:	691b      	ldr	r3, [r3, #16]
 801903e:	429a      	cmp	r2, r3
 8019040:	d106      	bne.n	8019050 <ip4_reass+0xdc>
 8019042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019044:	899a      	ldrh	r2, [r3, #12]
 8019046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019048:	889b      	ldrh	r3, [r3, #4]
 801904a:	b29b      	uxth	r3, r3
 801904c:	429a      	cmp	r2, r3
 801904e:	d006      	beq.n	801905e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	633b      	str	r3, [r7, #48]	; 0x30
 8019056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019058:	2b00      	cmp	r3, #0
 801905a:	d1e6      	bne.n	801902a <ip4_reass+0xb6>
 801905c:	e000      	b.n	8019060 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801905e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019062:	2b00      	cmp	r3, #0
 8019064:	d109      	bne.n	801907a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019066:	8c3b      	ldrh	r3, [r7, #32]
 8019068:	4619      	mov	r1, r3
 801906a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801906c:	f7ff fdb0 	bl	8018bd0 <ip_reass_enqueue_new_datagram>
 8019070:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019074:	2b00      	cmp	r3, #0
 8019076:	d11c      	bne.n	80190b2 <ip4_reass+0x13e>
      goto nullreturn;
 8019078:	e109      	b.n	801928e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801907c:	88db      	ldrh	r3, [r3, #6]
 801907e:	b29b      	uxth	r3, r3
 8019080:	4618      	mov	r0, r3
 8019082:	f7f3 fb07 	bl	800c694 <lwip_htons>
 8019086:	4603      	mov	r3, r0
 8019088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801908c:	2b00      	cmp	r3, #0
 801908e:	d110      	bne.n	80190b2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019092:	89db      	ldrh	r3, [r3, #14]
 8019094:	4618      	mov	r0, r3
 8019096:	f7f3 fafd 	bl	800c694 <lwip_htons>
 801909a:	4603      	mov	r3, r0
 801909c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d006      	beq.n	80190b2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80190a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190a6:	3308      	adds	r3, #8
 80190a8:	2214      	movs	r2, #20
 80190aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80190ac:	4618      	mov	r0, r3
 80190ae:	f002 fc19 	bl	801b8e4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80190b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190b4:	88db      	ldrh	r3, [r3, #6]
 80190b6:	b29b      	uxth	r3, r3
 80190b8:	f003 0320 	and.w	r3, r3, #32
 80190bc:	2b00      	cmp	r3, #0
 80190be:	bf0c      	ite	eq
 80190c0:	2301      	moveq	r3, #1
 80190c2:	2300      	movne	r3, #0
 80190c4:	b2db      	uxtb	r3, r3
 80190c6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80190c8:	69fb      	ldr	r3, [r7, #28]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d00e      	beq.n	80190ec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80190ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80190d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190d2:	4413      	add	r3, r2
 80190d4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80190d6:	8b7a      	ldrh	r2, [r7, #26]
 80190d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80190da:	429a      	cmp	r2, r3
 80190dc:	f0c0 80a0 	bcc.w	8019220 <ip4_reass+0x2ac>
 80190e0:	8b7b      	ldrh	r3, [r7, #26]
 80190e2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80190e6:	4293      	cmp	r3, r2
 80190e8:	f200 809a 	bhi.w	8019220 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80190ec:	69fa      	ldr	r2, [r7, #28]
 80190ee:	6879      	ldr	r1, [r7, #4]
 80190f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190f2:	f7ff fdd5 	bl	8018ca0 <ip_reass_chain_frag_into_datagram_and_validate>
 80190f6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80190f8:	697b      	ldr	r3, [r7, #20]
 80190fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80190fe:	f000 8091 	beq.w	8019224 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019102:	4b5b      	ldr	r3, [pc, #364]	; (8019270 <ip4_reass+0x2fc>)
 8019104:	881a      	ldrh	r2, [r3, #0]
 8019106:	8c3b      	ldrh	r3, [r7, #32]
 8019108:	4413      	add	r3, r2
 801910a:	b29a      	uxth	r2, r3
 801910c:	4b58      	ldr	r3, [pc, #352]	; (8019270 <ip4_reass+0x2fc>)
 801910e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019110:	69fb      	ldr	r3, [r7, #28]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d00d      	beq.n	8019132 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019116:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801911a:	4413      	add	r3, r2
 801911c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019120:	8a7a      	ldrh	r2, [r7, #18]
 8019122:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019126:	7f9b      	ldrb	r3, [r3, #30]
 8019128:	f043 0301 	orr.w	r3, r3, #1
 801912c:	b2da      	uxtb	r2, r3
 801912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019130:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019132:	697b      	ldr	r3, [r7, #20]
 8019134:	2b01      	cmp	r3, #1
 8019136:	d171      	bne.n	801921c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801913a:	8b9b      	ldrh	r3, [r3, #28]
 801913c:	3314      	adds	r3, #20
 801913e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019142:	685b      	ldr	r3, [r3, #4]
 8019144:	685b      	ldr	r3, [r3, #4]
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801914c:	685b      	ldr	r3, [r3, #4]
 801914e:	685b      	ldr	r3, [r3, #4]
 8019150:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019154:	3308      	adds	r3, #8
 8019156:	2214      	movs	r2, #20
 8019158:	4619      	mov	r1, r3
 801915a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801915c:	f002 fbc2 	bl	801b8e4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019160:	8a3b      	ldrh	r3, [r7, #16]
 8019162:	4618      	mov	r0, r3
 8019164:	f7f3 fa96 	bl	800c694 <lwip_htons>
 8019168:	4603      	mov	r3, r0
 801916a:	461a      	mov	r2, r3
 801916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801916e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019172:	2200      	movs	r2, #0
 8019174:	719a      	strb	r2, [r3, #6]
 8019176:	2200      	movs	r2, #0
 8019178:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801917c:	2200      	movs	r2, #0
 801917e:	729a      	strb	r2, [r3, #10]
 8019180:	2200      	movs	r2, #0
 8019182:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019186:	685b      	ldr	r3, [r3, #4]
 8019188:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801918a:	e00d      	b.n	80191a8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801918c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801918e:	685b      	ldr	r3, [r3, #4]
 8019190:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019192:	2114      	movs	r1, #20
 8019194:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019196:	f7f4 fdaf 	bl	800dcf8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801919a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801919c:	6878      	ldr	r0, [r7, #4]
 801919e:	f7f4 ff31 	bl	800e004 <pbuf_cat>
      r = iprh->next_pbuf;
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80191a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d1ee      	bne.n	801918c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80191ae:	4b31      	ldr	r3, [pc, #196]	; (8019274 <ip4_reass+0x300>)
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80191b4:	429a      	cmp	r2, r3
 80191b6:	d102      	bne.n	80191be <ip4_reass+0x24a>
      ipr_prev = NULL;
 80191b8:	2300      	movs	r3, #0
 80191ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191bc:	e010      	b.n	80191e0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80191be:	4b2d      	ldr	r3, [pc, #180]	; (8019274 <ip4_reass+0x300>)
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191c4:	e007      	b.n	80191d6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80191c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80191cc:	429a      	cmp	r2, r3
 80191ce:	d006      	beq.n	80191de <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80191d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d1f4      	bne.n	80191c6 <ip4_reass+0x252>
 80191dc:	e000      	b.n	80191e0 <ip4_reass+0x26c>
          break;
 80191de:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80191e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80191e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80191e4:	f7ff fd2e 	bl	8018c44 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80191e8:	6878      	ldr	r0, [r7, #4]
 80191ea:	f7f4 fecb 	bl	800df84 <pbuf_clen>
 80191ee:	4603      	mov	r3, r0
 80191f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80191f2:	4b1f      	ldr	r3, [pc, #124]	; (8019270 <ip4_reass+0x2fc>)
 80191f4:	881b      	ldrh	r3, [r3, #0]
 80191f6:	8c3a      	ldrh	r2, [r7, #32]
 80191f8:	429a      	cmp	r2, r3
 80191fa:	d906      	bls.n	801920a <ip4_reass+0x296>
 80191fc:	4b1e      	ldr	r3, [pc, #120]	; (8019278 <ip4_reass+0x304>)
 80191fe:	f240 229b 	movw	r2, #667	; 0x29b
 8019202:	491e      	ldr	r1, [pc, #120]	; (801927c <ip4_reass+0x308>)
 8019204:	481e      	ldr	r0, [pc, #120]	; (8019280 <ip4_reass+0x30c>)
 8019206:	f002 fb83 	bl	801b910 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801920a:	4b19      	ldr	r3, [pc, #100]	; (8019270 <ip4_reass+0x2fc>)
 801920c:	881a      	ldrh	r2, [r3, #0]
 801920e:	8c3b      	ldrh	r3, [r7, #32]
 8019210:	1ad3      	subs	r3, r2, r3
 8019212:	b29a      	uxth	r2, r3
 8019214:	4b16      	ldr	r3, [pc, #88]	; (8019270 <ip4_reass+0x2fc>)
 8019216:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	e03c      	b.n	8019296 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801921c:	2300      	movs	r3, #0
 801921e:	e03a      	b.n	8019296 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8019220:	bf00      	nop
 8019222:	e000      	b.n	8019226 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8019224:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019228:	2b00      	cmp	r3, #0
 801922a:	d106      	bne.n	801923a <ip4_reass+0x2c6>
 801922c:	4b12      	ldr	r3, [pc, #72]	; (8019278 <ip4_reass+0x304>)
 801922e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019232:	4914      	ldr	r1, [pc, #80]	; (8019284 <ip4_reass+0x310>)
 8019234:	4812      	ldr	r0, [pc, #72]	; (8019280 <ip4_reass+0x30c>)
 8019236:	f002 fb6b 	bl	801b910 <iprintf>
  if (ipr->p == NULL) {
 801923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801923c:	685b      	ldr	r3, [r3, #4]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d124      	bne.n	801928c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019242:	4b0c      	ldr	r3, [pc, #48]	; (8019274 <ip4_reass+0x300>)
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019248:	429a      	cmp	r2, r3
 801924a:	d006      	beq.n	801925a <ip4_reass+0x2e6>
 801924c:	4b0a      	ldr	r3, [pc, #40]	; (8019278 <ip4_reass+0x304>)
 801924e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019252:	490d      	ldr	r1, [pc, #52]	; (8019288 <ip4_reass+0x314>)
 8019254:	480a      	ldr	r0, [pc, #40]	; (8019280 <ip4_reass+0x30c>)
 8019256:	f002 fb5b 	bl	801b910 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801925a:	2100      	movs	r1, #0
 801925c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801925e:	f7ff fcf1 	bl	8018c44 <ip_reass_dequeue_datagram>
 8019262:	e014      	b.n	801928e <ip4_reass+0x31a>
    goto nullreturn;
 8019264:	bf00      	nop
 8019266:	e012      	b.n	801928e <ip4_reass+0x31a>
    goto nullreturn;
 8019268:	bf00      	nop
 801926a:	e010      	b.n	801928e <ip4_reass+0x31a>
      goto nullreturn;
 801926c:	bf00      	nop
 801926e:	e00e      	b.n	801928e <ip4_reass+0x31a>
 8019270:	20008c28 	.word	0x20008c28
 8019274:	20008c24 	.word	0x20008c24
 8019278:	080206e4 	.word	0x080206e4
 801927c:	08020854 	.word	0x08020854
 8019280:	0802072c 	.word	0x0802072c
 8019284:	08020870 	.word	0x08020870
 8019288:	0802087c 	.word	0x0802087c
  }

nullreturn:
 801928c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801928e:	6878      	ldr	r0, [r7, #4]
 8019290:	f7f4 fdea 	bl	800de68 <pbuf_free>
  return NULL;
 8019294:	2300      	movs	r3, #0
}
 8019296:	4618      	mov	r0, r3
 8019298:	3738      	adds	r7, #56	; 0x38
 801929a:	46bd      	mov	sp, r7
 801929c:	bd80      	pop	{r7, pc}
 801929e:	bf00      	nop

080192a0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80192a4:	2005      	movs	r0, #5
 80192a6:	f7f3 feab 	bl	800d000 <memp_malloc>
 80192aa:	4603      	mov	r3, r0
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	bd80      	pop	{r7, pc}

080192b0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b082      	sub	sp, #8
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d106      	bne.n	80192cc <ip_frag_free_pbuf_custom_ref+0x1c>
 80192be:	4b07      	ldr	r3, [pc, #28]	; (80192dc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80192c0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80192c4:	4906      	ldr	r1, [pc, #24]	; (80192e0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80192c6:	4807      	ldr	r0, [pc, #28]	; (80192e4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80192c8:	f002 fb22 	bl	801b910 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80192cc:	6879      	ldr	r1, [r7, #4]
 80192ce:	2005      	movs	r0, #5
 80192d0:	f7f3 fee8 	bl	800d0a4 <memp_free>
}
 80192d4:	bf00      	nop
 80192d6:	3708      	adds	r7, #8
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}
 80192dc:	080206e4 	.word	0x080206e4
 80192e0:	0802089c 	.word	0x0802089c
 80192e4:	0802072c 	.word	0x0802072c

080192e8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b084      	sub	sp, #16
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d106      	bne.n	8019308 <ipfrag_free_pbuf_custom+0x20>
 80192fa:	4b11      	ldr	r3, [pc, #68]	; (8019340 <ipfrag_free_pbuf_custom+0x58>)
 80192fc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019300:	4910      	ldr	r1, [pc, #64]	; (8019344 <ipfrag_free_pbuf_custom+0x5c>)
 8019302:	4811      	ldr	r0, [pc, #68]	; (8019348 <ipfrag_free_pbuf_custom+0x60>)
 8019304:	f002 fb04 	bl	801b910 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019308:	68fa      	ldr	r2, [r7, #12]
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	429a      	cmp	r2, r3
 801930e:	d006      	beq.n	801931e <ipfrag_free_pbuf_custom+0x36>
 8019310:	4b0b      	ldr	r3, [pc, #44]	; (8019340 <ipfrag_free_pbuf_custom+0x58>)
 8019312:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019316:	490d      	ldr	r1, [pc, #52]	; (801934c <ipfrag_free_pbuf_custom+0x64>)
 8019318:	480b      	ldr	r0, [pc, #44]	; (8019348 <ipfrag_free_pbuf_custom+0x60>)
 801931a:	f002 faf9 	bl	801b910 <iprintf>
  if (pcr->original != NULL) {
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	695b      	ldr	r3, [r3, #20]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d004      	beq.n	8019330 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	695b      	ldr	r3, [r3, #20]
 801932a:	4618      	mov	r0, r3
 801932c:	f7f4 fd9c 	bl	800de68 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019330:	68f8      	ldr	r0, [r7, #12]
 8019332:	f7ff ffbd 	bl	80192b0 <ip_frag_free_pbuf_custom_ref>
}
 8019336:	bf00      	nop
 8019338:	3710      	adds	r7, #16
 801933a:	46bd      	mov	sp, r7
 801933c:	bd80      	pop	{r7, pc}
 801933e:	bf00      	nop
 8019340:	080206e4 	.word	0x080206e4
 8019344:	080208a8 	.word	0x080208a8
 8019348:	0802072c 	.word	0x0802072c
 801934c:	080208b4 	.word	0x080208b4

08019350 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b094      	sub	sp, #80	; 0x50
 8019354:	af02      	add	r7, sp, #8
 8019356:	60f8      	str	r0, [r7, #12]
 8019358:	60b9      	str	r1, [r7, #8]
 801935a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801935c:	2300      	movs	r3, #0
 801935e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019362:	68bb      	ldr	r3, [r7, #8]
 8019364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019366:	3b14      	subs	r3, #20
 8019368:	2b00      	cmp	r3, #0
 801936a:	da00      	bge.n	801936e <ip4_frag+0x1e>
 801936c:	3307      	adds	r3, #7
 801936e:	10db      	asrs	r3, r3, #3
 8019370:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019372:	2314      	movs	r3, #20
 8019374:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	685b      	ldr	r3, [r3, #4]
 801937a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801937c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801937e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019382:	781b      	ldrb	r3, [r3, #0]
 8019384:	f003 030f 	and.w	r3, r3, #15
 8019388:	b2db      	uxtb	r3, r3
 801938a:	009b      	lsls	r3, r3, #2
 801938c:	b2db      	uxtb	r3, r3
 801938e:	2b14      	cmp	r3, #20
 8019390:	d002      	beq.n	8019398 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019392:	f06f 0305 	mvn.w	r3, #5
 8019396:	e110      	b.n	80195ba <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	895b      	ldrh	r3, [r3, #10]
 801939c:	2b13      	cmp	r3, #19
 801939e:	d809      	bhi.n	80193b4 <ip4_frag+0x64>
 80193a0:	4b88      	ldr	r3, [pc, #544]	; (80195c4 <ip4_frag+0x274>)
 80193a2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80193a6:	4988      	ldr	r1, [pc, #544]	; (80195c8 <ip4_frag+0x278>)
 80193a8:	4888      	ldr	r0, [pc, #544]	; (80195cc <ip4_frag+0x27c>)
 80193aa:	f002 fab1 	bl	801b910 <iprintf>
 80193ae:	f06f 0305 	mvn.w	r3, #5
 80193b2:	e102      	b.n	80195ba <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80193b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193b6:	88db      	ldrh	r3, [r3, #6]
 80193b8:	b29b      	uxth	r3, r3
 80193ba:	4618      	mov	r0, r3
 80193bc:	f7f3 f96a 	bl	800c694 <lwip_htons>
 80193c0:	4603      	mov	r3, r0
 80193c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80193c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80193c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80193ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80193ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80193d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80193d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	891b      	ldrh	r3, [r3, #8]
 80193da:	3b14      	subs	r3, #20
 80193dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80193e0:	e0e1      	b.n	80195a6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80193e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80193e4:	00db      	lsls	r3, r3, #3
 80193e6:	b29b      	uxth	r3, r3
 80193e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80193ec:	4293      	cmp	r3, r2
 80193ee:	bf28      	it	cs
 80193f0:	4613      	movcs	r3, r2
 80193f2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80193f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80193f8:	2114      	movs	r1, #20
 80193fa:	200e      	movs	r0, #14
 80193fc:	f7f4 fa1e 	bl	800d83c <pbuf_alloc>
 8019400:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019404:	2b00      	cmp	r3, #0
 8019406:	f000 80d5 	beq.w	80195b4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801940c:	895b      	ldrh	r3, [r3, #10]
 801940e:	2b13      	cmp	r3, #19
 8019410:	d806      	bhi.n	8019420 <ip4_frag+0xd0>
 8019412:	4b6c      	ldr	r3, [pc, #432]	; (80195c4 <ip4_frag+0x274>)
 8019414:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019418:	496d      	ldr	r1, [pc, #436]	; (80195d0 <ip4_frag+0x280>)
 801941a:	486c      	ldr	r0, [pc, #432]	; (80195cc <ip4_frag+0x27c>)
 801941c:	f002 fa78 	bl	801b910 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019422:	685b      	ldr	r3, [r3, #4]
 8019424:	2214      	movs	r2, #20
 8019426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019428:	4618      	mov	r0, r3
 801942a:	f002 fa5b 	bl	801b8e4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019430:	685b      	ldr	r3, [r3, #4]
 8019432:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019434:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019436:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801943a:	e064      	b.n	8019506 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	895a      	ldrh	r2, [r3, #10]
 8019440:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019442:	1ad3      	subs	r3, r2, r3
 8019444:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	895b      	ldrh	r3, [r3, #10]
 801944a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801944c:	429a      	cmp	r2, r3
 801944e:	d906      	bls.n	801945e <ip4_frag+0x10e>
 8019450:	4b5c      	ldr	r3, [pc, #368]	; (80195c4 <ip4_frag+0x274>)
 8019452:	f240 322d 	movw	r2, #813	; 0x32d
 8019456:	495f      	ldr	r1, [pc, #380]	; (80195d4 <ip4_frag+0x284>)
 8019458:	485c      	ldr	r0, [pc, #368]	; (80195cc <ip4_frag+0x27c>)
 801945a:	f002 fa59 	bl	801b910 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801945e:	8bfa      	ldrh	r2, [r7, #30]
 8019460:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019464:	4293      	cmp	r3, r2
 8019466:	bf28      	it	cs
 8019468:	4613      	movcs	r3, r2
 801946a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801946e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019472:	2b00      	cmp	r3, #0
 8019474:	d105      	bne.n	8019482 <ip4_frag+0x132>
        poff = 0;
 8019476:	2300      	movs	r3, #0
 8019478:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	60fb      	str	r3, [r7, #12]
        continue;
 8019480:	e041      	b.n	8019506 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019482:	f7ff ff0d 	bl	80192a0 <ip_frag_alloc_pbuf_custom_ref>
 8019486:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019488:	69bb      	ldr	r3, [r7, #24]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d103      	bne.n	8019496 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801948e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019490:	f7f4 fcea 	bl	800de68 <pbuf_free>
        goto memerr;
 8019494:	e08f      	b.n	80195b6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019496:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801949c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801949e:	4413      	add	r3, r2
 80194a0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80194a4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80194a8:	9201      	str	r2, [sp, #4]
 80194aa:	9300      	str	r3, [sp, #0]
 80194ac:	4603      	mov	r3, r0
 80194ae:	2241      	movs	r2, #65	; 0x41
 80194b0:	2000      	movs	r0, #0
 80194b2:	f7f4 faed 	bl	800da90 <pbuf_alloced_custom>
 80194b6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80194b8:	697b      	ldr	r3, [r7, #20]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d106      	bne.n	80194cc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80194be:	69b8      	ldr	r0, [r7, #24]
 80194c0:	f7ff fef6 	bl	80192b0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80194c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80194c6:	f7f4 fccf 	bl	800de68 <pbuf_free>
        goto memerr;
 80194ca:	e074      	b.n	80195b6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80194cc:	68f8      	ldr	r0, [r7, #12]
 80194ce:	f7f4 fd71 	bl	800dfb4 <pbuf_ref>
      pcr->original = p;
 80194d2:	69bb      	ldr	r3, [r7, #24]
 80194d4:	68fa      	ldr	r2, [r7, #12]
 80194d6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80194d8:	69bb      	ldr	r3, [r7, #24]
 80194da:	4a3f      	ldr	r2, [pc, #252]	; (80195d8 <ip4_frag+0x288>)
 80194dc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80194de:	6979      	ldr	r1, [r7, #20]
 80194e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80194e2:	f7f4 fd8f 	bl	800e004 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80194e6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80194ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80194ee:	1ad3      	subs	r3, r2, r3
 80194f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80194f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d004      	beq.n	8019506 <ip4_frag+0x1b6>
        poff = 0;
 80194fc:	2300      	movs	r3, #0
 80194fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019506:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801950a:	2b00      	cmp	r3, #0
 801950c:	d196      	bne.n	801943c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801950e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019510:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019514:	4413      	add	r3, r2
 8019516:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019518:	68bb      	ldr	r3, [r7, #8]
 801951a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801951c:	f1a3 0213 	sub.w	r2, r3, #19
 8019520:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019524:	429a      	cmp	r2, r3
 8019526:	bfcc      	ite	gt
 8019528:	2301      	movgt	r3, #1
 801952a:	2300      	movle	r3, #0
 801952c:	b2db      	uxtb	r3, r3
 801952e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019530:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019538:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801953a:	6a3b      	ldr	r3, [r7, #32]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d002      	beq.n	8019546 <ip4_frag+0x1f6>
 8019540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019542:	2b00      	cmp	r3, #0
 8019544:	d003      	beq.n	801954e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019546:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801954c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801954e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019550:	4618      	mov	r0, r3
 8019552:	f7f3 f89f 	bl	800c694 <lwip_htons>
 8019556:	4603      	mov	r3, r0
 8019558:	461a      	mov	r2, r3
 801955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801955c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801955e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019560:	3314      	adds	r3, #20
 8019562:	b29b      	uxth	r3, r3
 8019564:	4618      	mov	r0, r3
 8019566:	f7f3 f895 	bl	800c694 <lwip_htons>
 801956a:	4603      	mov	r3, r0
 801956c:	461a      	mov	r2, r3
 801956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019570:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019574:	2200      	movs	r2, #0
 8019576:	729a      	strb	r2, [r3, #10]
 8019578:	2200      	movs	r2, #0
 801957a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801957c:	68bb      	ldr	r3, [r7, #8]
 801957e:	695b      	ldr	r3, [r3, #20]
 8019580:	687a      	ldr	r2, [r7, #4]
 8019582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019584:	68b8      	ldr	r0, [r7, #8]
 8019586:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801958a:	f7f4 fc6d 	bl	800de68 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801958e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019592:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019594:	1ad3      	subs	r3, r2, r3
 8019596:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801959a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801959e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195a0:	4413      	add	r3, r2
 80195a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80195a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	f47f af19 	bne.w	80193e2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80195b0:	2300      	movs	r3, #0
 80195b2:	e002      	b.n	80195ba <ip4_frag+0x26a>
      goto memerr;
 80195b4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80195b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80195ba:	4618      	mov	r0, r3
 80195bc:	3748      	adds	r7, #72	; 0x48
 80195be:	46bd      	mov	sp, r7
 80195c0:	bd80      	pop	{r7, pc}
 80195c2:	bf00      	nop
 80195c4:	080206e4 	.word	0x080206e4
 80195c8:	080208c0 	.word	0x080208c0
 80195cc:	0802072c 	.word	0x0802072c
 80195d0:	080208dc 	.word	0x080208dc
 80195d4:	080208fc 	.word	0x080208fc
 80195d8:	080192e9 	.word	0x080192e9

080195dc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b086      	sub	sp, #24
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	6078      	str	r0, [r7, #4]
 80195e4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80195e6:	230e      	movs	r3, #14
 80195e8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	895b      	ldrh	r3, [r3, #10]
 80195ee:	2b0e      	cmp	r3, #14
 80195f0:	d96e      	bls.n	80196d0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	7bdb      	ldrb	r3, [r3, #15]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d106      	bne.n	8019608 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019600:	3301      	adds	r3, #1
 8019602:	b2da      	uxtb	r2, r3
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	685b      	ldr	r3, [r3, #4]
 801960c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801960e:	693b      	ldr	r3, [r7, #16]
 8019610:	7b1a      	ldrb	r2, [r3, #12]
 8019612:	7b5b      	ldrb	r3, [r3, #13]
 8019614:	021b      	lsls	r3, r3, #8
 8019616:	4313      	orrs	r3, r2
 8019618:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801961a:	693b      	ldr	r3, [r7, #16]
 801961c:	781b      	ldrb	r3, [r3, #0]
 801961e:	f003 0301 	and.w	r3, r3, #1
 8019622:	2b00      	cmp	r3, #0
 8019624:	d023      	beq.n	801966e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019626:	693b      	ldr	r3, [r7, #16]
 8019628:	781b      	ldrb	r3, [r3, #0]
 801962a:	2b01      	cmp	r3, #1
 801962c:	d10f      	bne.n	801964e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801962e:	693b      	ldr	r3, [r7, #16]
 8019630:	785b      	ldrb	r3, [r3, #1]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d11b      	bne.n	801966e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019636:	693b      	ldr	r3, [r7, #16]
 8019638:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801963a:	2b5e      	cmp	r3, #94	; 0x5e
 801963c:	d117      	bne.n	801966e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	7b5b      	ldrb	r3, [r3, #13]
 8019642:	f043 0310 	orr.w	r3, r3, #16
 8019646:	b2da      	uxtb	r2, r3
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	735a      	strb	r2, [r3, #13]
 801964c:	e00f      	b.n	801966e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801964e:	693b      	ldr	r3, [r7, #16]
 8019650:	2206      	movs	r2, #6
 8019652:	4928      	ldr	r1, [pc, #160]	; (80196f4 <ethernet_input+0x118>)
 8019654:	4618      	mov	r0, r3
 8019656:	f002 f937 	bl	801b8c8 <memcmp>
 801965a:	4603      	mov	r3, r0
 801965c:	2b00      	cmp	r3, #0
 801965e:	d106      	bne.n	801966e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	7b5b      	ldrb	r3, [r3, #13]
 8019664:	f043 0308 	orr.w	r3, r3, #8
 8019668:	b2da      	uxtb	r2, r3
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801966e:	89fb      	ldrh	r3, [r7, #14]
 8019670:	2b08      	cmp	r3, #8
 8019672:	d003      	beq.n	801967c <ethernet_input+0xa0>
 8019674:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019678:	d014      	beq.n	80196a4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801967a:	e032      	b.n	80196e2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801967c:	683b      	ldr	r3, [r7, #0]
 801967e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019682:	f003 0308 	and.w	r3, r3, #8
 8019686:	2b00      	cmp	r3, #0
 8019688:	d024      	beq.n	80196d4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801968a:	8afb      	ldrh	r3, [r7, #22]
 801968c:	4619      	mov	r1, r3
 801968e:	6878      	ldr	r0, [r7, #4]
 8019690:	f7f4 fb32 	bl	800dcf8 <pbuf_remove_header>
 8019694:	4603      	mov	r3, r0
 8019696:	2b00      	cmp	r3, #0
 8019698:	d11e      	bne.n	80196d8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801969a:	6839      	ldr	r1, [r7, #0]
 801969c:	6878      	ldr	r0, [r7, #4]
 801969e:	f7fe fdcb 	bl	8018238 <ip4_input>
      break;
 80196a2:	e013      	b.n	80196cc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80196a4:	683b      	ldr	r3, [r7, #0]
 80196a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80196aa:	f003 0308 	and.w	r3, r3, #8
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d014      	beq.n	80196dc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80196b2:	8afb      	ldrh	r3, [r7, #22]
 80196b4:	4619      	mov	r1, r3
 80196b6:	6878      	ldr	r0, [r7, #4]
 80196b8:	f7f4 fb1e 	bl	800dcf8 <pbuf_remove_header>
 80196bc:	4603      	mov	r3, r0
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d10e      	bne.n	80196e0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80196c2:	6839      	ldr	r1, [r7, #0]
 80196c4:	6878      	ldr	r0, [r7, #4]
 80196c6:	f7fd ff67 	bl	8017598 <etharp_input>
      break;
 80196ca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80196cc:	2300      	movs	r3, #0
 80196ce:	e00c      	b.n	80196ea <ethernet_input+0x10e>
    goto free_and_return;
 80196d0:	bf00      	nop
 80196d2:	e006      	b.n	80196e2 <ethernet_input+0x106>
        goto free_and_return;
 80196d4:	bf00      	nop
 80196d6:	e004      	b.n	80196e2 <ethernet_input+0x106>
        goto free_and_return;
 80196d8:	bf00      	nop
 80196da:	e002      	b.n	80196e2 <ethernet_input+0x106>
        goto free_and_return;
 80196dc:	bf00      	nop
 80196de:	e000      	b.n	80196e2 <ethernet_input+0x106>
        goto free_and_return;
 80196e0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80196e2:	6878      	ldr	r0, [r7, #4]
 80196e4:	f7f4 fbc0 	bl	800de68 <pbuf_free>
  return ERR_OK;
 80196e8:	2300      	movs	r3, #0
}
 80196ea:	4618      	mov	r0, r3
 80196ec:	3718      	adds	r7, #24
 80196ee:	46bd      	mov	sp, r7
 80196f0:	bd80      	pop	{r7, pc}
 80196f2:	bf00      	nop
 80196f4:	08020b90 	.word	0x08020b90

080196f8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b086      	sub	sp, #24
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	60f8      	str	r0, [r7, #12]
 8019700:	60b9      	str	r1, [r7, #8]
 8019702:	607a      	str	r2, [r7, #4]
 8019704:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019706:	8c3b      	ldrh	r3, [r7, #32]
 8019708:	4618      	mov	r0, r3
 801970a:	f7f2 ffc3 	bl	800c694 <lwip_htons>
 801970e:	4603      	mov	r3, r0
 8019710:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019712:	210e      	movs	r1, #14
 8019714:	68b8      	ldr	r0, [r7, #8]
 8019716:	f7f4 fadf 	bl	800dcd8 <pbuf_add_header>
 801971a:	4603      	mov	r3, r0
 801971c:	2b00      	cmp	r3, #0
 801971e:	d125      	bne.n	801976c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019720:	68bb      	ldr	r3, [r7, #8]
 8019722:	685b      	ldr	r3, [r3, #4]
 8019724:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019726:	693b      	ldr	r3, [r7, #16]
 8019728:	8afa      	ldrh	r2, [r7, #22]
 801972a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801972c:	693b      	ldr	r3, [r7, #16]
 801972e:	2206      	movs	r2, #6
 8019730:	6839      	ldr	r1, [r7, #0]
 8019732:	4618      	mov	r0, r3
 8019734:	f002 f8d6 	bl	801b8e4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019738:	693b      	ldr	r3, [r7, #16]
 801973a:	3306      	adds	r3, #6
 801973c:	2206      	movs	r2, #6
 801973e:	6879      	ldr	r1, [r7, #4]
 8019740:	4618      	mov	r0, r3
 8019742:	f002 f8cf 	bl	801b8e4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801974c:	2b06      	cmp	r3, #6
 801974e:	d006      	beq.n	801975e <ethernet_output+0x66>
 8019750:	4b0a      	ldr	r3, [pc, #40]	; (801977c <ethernet_output+0x84>)
 8019752:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019756:	490a      	ldr	r1, [pc, #40]	; (8019780 <ethernet_output+0x88>)
 8019758:	480a      	ldr	r0, [pc, #40]	; (8019784 <ethernet_output+0x8c>)
 801975a:	f002 f8d9 	bl	801b910 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	699b      	ldr	r3, [r3, #24]
 8019762:	68b9      	ldr	r1, [r7, #8]
 8019764:	68f8      	ldr	r0, [r7, #12]
 8019766:	4798      	blx	r3
 8019768:	4603      	mov	r3, r0
 801976a:	e002      	b.n	8019772 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801976c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801976e:	f06f 0301 	mvn.w	r3, #1
}
 8019772:	4618      	mov	r0, r3
 8019774:	3718      	adds	r7, #24
 8019776:	46bd      	mov	sp, r7
 8019778:	bd80      	pop	{r7, pc}
 801977a:	bf00      	nop
 801977c:	0802090c 	.word	0x0802090c
 8019780:	08020944 	.word	0x08020944
 8019784:	08020978 	.word	0x08020978

08019788 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019788:	b580      	push	{r7, lr}
 801978a:	b086      	sub	sp, #24
 801978c:	af00      	add	r7, sp, #0
 801978e:	6078      	str	r0, [r7, #4]
 8019790:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019792:	683b      	ldr	r3, [r7, #0]
 8019794:	60bb      	str	r3, [r7, #8]
 8019796:	2304      	movs	r3, #4
 8019798:	60fb      	str	r3, [r7, #12]
 801979a:	2300      	movs	r3, #0
 801979c:	613b      	str	r3, [r7, #16]
 801979e:	2300      	movs	r3, #0
 80197a0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80197a2:	f107 0308 	add.w	r3, r7, #8
 80197a6:	2100      	movs	r1, #0
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7ec fc38 	bl	800601e <osMessageCreate>
 80197ae:	4602      	mov	r2, r0
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d102      	bne.n	80197c2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80197bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80197c0:	e000      	b.n	80197c4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80197c2:	2300      	movs	r3, #0
}
 80197c4:	4618      	mov	r0, r3
 80197c6:	3718      	adds	r7, #24
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}

080197cc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b082      	sub	sp, #8
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	4618      	mov	r0, r3
 80197da:	f7ec fcfd 	bl	80061d8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7ec fd0e 	bl	8006204 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80197e8:	bf00      	nop
 80197ea:	3708      	adds	r7, #8
 80197ec:	46bd      	mov	sp, r7
 80197ee:	bd80      	pop	{r7, pc}

080197f0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b084      	sub	sp, #16
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
 80197f8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	6839      	ldr	r1, [r7, #0]
 8019800:	2200      	movs	r2, #0
 8019802:	4618      	mov	r0, r3
 8019804:	f7ec fc34 	bl	8006070 <osMessagePut>
 8019808:	4603      	mov	r3, r0
 801980a:	2b00      	cmp	r3, #0
 801980c:	d102      	bne.n	8019814 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801980e:	2300      	movs	r3, #0
 8019810:	73fb      	strb	r3, [r7, #15]
 8019812:	e001      	b.n	8019818 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019814:	23ff      	movs	r3, #255	; 0xff
 8019816:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019818:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801981c:	4618      	mov	r0, r3
 801981e:	3710      	adds	r7, #16
 8019820:	46bd      	mov	sp, r7
 8019822:	bd80      	pop	{r7, pc}

08019824 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b08c      	sub	sp, #48	; 0x30
 8019828:	af00      	add	r7, sp, #0
 801982a:	61f8      	str	r0, [r7, #28]
 801982c:	61b9      	str	r1, [r7, #24]
 801982e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019830:	f7ec fa1f 	bl	8005c72 <osKernelSysTick>
 8019834:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019836:	697b      	ldr	r3, [r7, #20]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d017      	beq.n	801986c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801983c:	69fb      	ldr	r3, [r7, #28]
 801983e:	6819      	ldr	r1, [r3, #0]
 8019840:	f107 0320 	add.w	r3, r7, #32
 8019844:	697a      	ldr	r2, [r7, #20]
 8019846:	4618      	mov	r0, r3
 8019848:	f7ec fc52 	bl	80060f0 <osMessageGet>

    if(event.status == osEventMessage)
 801984c:	6a3b      	ldr	r3, [r7, #32]
 801984e:	2b10      	cmp	r3, #16
 8019850:	d109      	bne.n	8019866 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019854:	461a      	mov	r2, r3
 8019856:	69bb      	ldr	r3, [r7, #24]
 8019858:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801985a:	f7ec fa0a 	bl	8005c72 <osKernelSysTick>
 801985e:	4602      	mov	r2, r0
 8019860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019862:	1ad3      	subs	r3, r2, r3
 8019864:	e019      	b.n	801989a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801986a:	e016      	b.n	801989a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801986c:	69fb      	ldr	r3, [r7, #28]
 801986e:	6819      	ldr	r1, [r3, #0]
 8019870:	463b      	mov	r3, r7
 8019872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019876:	4618      	mov	r0, r3
 8019878:	f7ec fc3a 	bl	80060f0 <osMessageGet>
 801987c:	f107 0320 	add.w	r3, r7, #32
 8019880:	463a      	mov	r2, r7
 8019882:	ca07      	ldmia	r2, {r0, r1, r2}
 8019884:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801988a:	461a      	mov	r2, r3
 801988c:	69bb      	ldr	r3, [r7, #24]
 801988e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019890:	f7ec f9ef 	bl	8005c72 <osKernelSysTick>
 8019894:	4602      	mov	r2, r0
 8019896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019898:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801989a:	4618      	mov	r0, r3
 801989c:	3730      	adds	r7, #48	; 0x30
 801989e:	46bd      	mov	sp, r7
 80198a0:	bd80      	pop	{r7, pc}

080198a2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80198a2:	b580      	push	{r7, lr}
 80198a4:	b086      	sub	sp, #24
 80198a6:	af00      	add	r7, sp, #0
 80198a8:	6078      	str	r0, [r7, #4]
 80198aa:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	6819      	ldr	r1, [r3, #0]
 80198b0:	f107 030c 	add.w	r3, r7, #12
 80198b4:	2200      	movs	r2, #0
 80198b6:	4618      	mov	r0, r3
 80198b8:	f7ec fc1a 	bl	80060f0 <osMessageGet>

  if(event.status == osEventMessage)
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	2b10      	cmp	r3, #16
 80198c0:	d105      	bne.n	80198ce <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80198c2:	693b      	ldr	r3, [r7, #16]
 80198c4:	461a      	mov	r2, r3
 80198c6:	683b      	ldr	r3, [r7, #0]
 80198c8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80198ca:	2300      	movs	r3, #0
 80198cc:	e001      	b.n	80198d2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80198ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80198d2:	4618      	mov	r0, r3
 80198d4:	3718      	adds	r7, #24
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}

080198da <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80198da:	b480      	push	{r7}
 80198dc:	b083      	sub	sp, #12
 80198de:	af00      	add	r7, sp, #0
 80198e0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d101      	bne.n	80198ee <sys_mbox_valid+0x14>
    return 0;
 80198ea:	2300      	movs	r3, #0
 80198ec:	e000      	b.n	80198f0 <sys_mbox_valid+0x16>
  else
    return 1;
 80198ee:	2301      	movs	r3, #1
}
 80198f0:	4618      	mov	r0, r3
 80198f2:	370c      	adds	r7, #12
 80198f4:	46bd      	mov	sp, r7
 80198f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198fa:	4770      	bx	lr

080198fc <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80198fc:	b480      	push	{r7}
 80198fe:	b083      	sub	sp, #12
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	2200      	movs	r2, #0
 8019908:	601a      	str	r2, [r3, #0]
}
 801990a:	bf00      	nop
 801990c:	370c      	adds	r7, #12
 801990e:	46bd      	mov	sp, r7
 8019910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019914:	4770      	bx	lr

08019916 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019916:	b580      	push	{r7, lr}
 8019918:	b084      	sub	sp, #16
 801991a:	af00      	add	r7, sp, #0
 801991c:	6078      	str	r0, [r7, #4]
 801991e:	460b      	mov	r3, r1
 8019920:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8019922:	2300      	movs	r3, #0
 8019924:	60bb      	str	r3, [r7, #8]
 8019926:	2300      	movs	r3, #0
 8019928:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801992a:	f107 0308 	add.w	r3, r7, #8
 801992e:	2101      	movs	r1, #1
 8019930:	4618      	mov	r0, r3
 8019932:	f7ec faab 	bl	8005e8c <osSemaphoreCreate>
 8019936:	4602      	mov	r2, r0
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d102      	bne.n	801994a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019948:	e009      	b.n	801995e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801994a:	78fb      	ldrb	r3, [r7, #3]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d105      	bne.n	801995c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	2100      	movs	r1, #0
 8019956:	4618      	mov	r0, r3
 8019958:	f7ec faca 	bl	8005ef0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801995c:	2300      	movs	r3, #0
}
 801995e:	4618      	mov	r0, r3
 8019960:	3710      	adds	r7, #16
 8019962:	46bd      	mov	sp, r7
 8019964:	bd80      	pop	{r7, pc}

08019966 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019966:	b580      	push	{r7, lr}
 8019968:	b084      	sub	sp, #16
 801996a:	af00      	add	r7, sp, #0
 801996c:	6078      	str	r0, [r7, #4]
 801996e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8019970:	f7ec f97f 	bl	8005c72 <osKernelSysTick>
 8019974:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019976:	683b      	ldr	r3, [r7, #0]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d011      	beq.n	80199a0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	6839      	ldr	r1, [r7, #0]
 8019982:	4618      	mov	r0, r3
 8019984:	f7ec fab4 	bl	8005ef0 <osSemaphoreWait>
 8019988:	4603      	mov	r3, r0
 801998a:	2b00      	cmp	r3, #0
 801998c:	d105      	bne.n	801999a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801998e:	f7ec f970 	bl	8005c72 <osKernelSysTick>
 8019992:	4602      	mov	r2, r0
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	1ad3      	subs	r3, r2, r3
 8019998:	e012      	b.n	80199c0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801999a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801999e:	e00f      	b.n	80199c0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80199a0:	bf00      	nop
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80199aa:	4618      	mov	r0, r3
 80199ac:	f7ec faa0 	bl	8005ef0 <osSemaphoreWait>
 80199b0:	4603      	mov	r3, r0
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d1f5      	bne.n	80199a2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80199b6:	f7ec f95c 	bl	8005c72 <osKernelSysTick>
 80199ba:	4602      	mov	r2, r0
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80199c0:	4618      	mov	r0, r3
 80199c2:	3710      	adds	r7, #16
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}

080199c8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b082      	sub	sp, #8
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	4618      	mov	r0, r3
 80199d6:	f7ec fad9 	bl	8005f8c <osSemaphoreRelease>
}
 80199da:	bf00      	nop
 80199dc:	3708      	adds	r7, #8
 80199de:	46bd      	mov	sp, r7
 80199e0:	bd80      	pop	{r7, pc}

080199e2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80199e2:	b580      	push	{r7, lr}
 80199e4:	b082      	sub	sp, #8
 80199e6:	af00      	add	r7, sp, #0
 80199e8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	4618      	mov	r0, r3
 80199f0:	f7ec fb02 	bl	8005ff8 <osSemaphoreDelete>
}
 80199f4:	bf00      	nop
 80199f6:	3708      	adds	r7, #8
 80199f8:	46bd      	mov	sp, r7
 80199fa:	bd80      	pop	{r7, pc}

080199fc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80199fc:	b480      	push	{r7}
 80199fe:	b083      	sub	sp, #12
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d101      	bne.n	8019a10 <sys_sem_valid+0x14>
    return 0;
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	e000      	b.n	8019a12 <sys_sem_valid+0x16>
  else
    return 1;
 8019a10:	2301      	movs	r3, #1
}
 8019a12:	4618      	mov	r0, r3
 8019a14:	370c      	adds	r7, #12
 8019a16:	46bd      	mov	sp, r7
 8019a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1c:	4770      	bx	lr

08019a1e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019a1e:	b480      	push	{r7}
 8019a20:	b083      	sub	sp, #12
 8019a22:	af00      	add	r7, sp, #0
 8019a24:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	2200      	movs	r2, #0
 8019a2a:	601a      	str	r2, [r3, #0]
}
 8019a2c:	bf00      	nop
 8019a2e:	370c      	adds	r7, #12
 8019a30:	46bd      	mov	sp, r7
 8019a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a36:	4770      	bx	lr

08019a38 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019a3c:	4803      	ldr	r0, [pc, #12]	; (8019a4c <sys_init+0x14>)
 8019a3e:	f7ec f988 	bl	8005d52 <osMutexCreate>
 8019a42:	4603      	mov	r3, r0
 8019a44:	4a02      	ldr	r2, [pc, #8]	; (8019a50 <sys_init+0x18>)
 8019a46:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019a48:	bf00      	nop
 8019a4a:	bd80      	pop	{r7, pc}
 8019a4c:	08020ba0 	.word	0x08020ba0
 8019a50:	200106a8 	.word	0x200106a8

08019a54 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019a54:	b580      	push	{r7, lr}
 8019a56:	b084      	sub	sp, #16
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	60bb      	str	r3, [r7, #8]
 8019a60:	2300      	movs	r3, #0
 8019a62:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019a64:	f107 0308 	add.w	r3, r7, #8
 8019a68:	4618      	mov	r0, r3
 8019a6a:	f7ec f972 	bl	8005d52 <osMutexCreate>
 8019a6e:	4602      	mov	r2, r0
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d102      	bne.n	8019a82 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019a80:	e000      	b.n	8019a84 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019a82:	2300      	movs	r3, #0
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	3710      	adds	r7, #16
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bd80      	pop	{r7, pc}

08019a8c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b082      	sub	sp, #8
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	f7ec f971 	bl	8005d84 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019aa2:	bf00      	nop
 8019aa4:	3708      	adds	r7, #8
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	bd80      	pop	{r7, pc}

08019aaa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019aaa:	b580      	push	{r7, lr}
 8019aac:	b082      	sub	sp, #8
 8019aae:	af00      	add	r7, sp, #0
 8019ab0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	f7ec f9b2 	bl	8005e20 <osMutexRelease>
}
 8019abc:	bf00      	nop
 8019abe:	3708      	adds	r7, #8
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	bd80      	pop	{r7, pc}

08019ac4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b08c      	sub	sp, #48	; 0x30
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	60f8      	str	r0, [r7, #12]
 8019acc:	60b9      	str	r1, [r7, #8]
 8019ace:	607a      	str	r2, [r7, #4]
 8019ad0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019ad2:	f107 0314 	add.w	r3, r7, #20
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	601a      	str	r2, [r3, #0]
 8019ada:	605a      	str	r2, [r3, #4]
 8019adc:	609a      	str	r2, [r3, #8]
 8019ade:	60da      	str	r2, [r3, #12]
 8019ae0:	611a      	str	r2, [r3, #16]
 8019ae2:	615a      	str	r2, [r3, #20]
 8019ae4:	619a      	str	r2, [r3, #24]
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	617b      	str	r3, [r7, #20]
 8019aea:	68bb      	ldr	r3, [r7, #8]
 8019aec:	61bb      	str	r3, [r7, #24]
 8019aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019af0:	b21b      	sxth	r3, r3
 8019af2:	83bb      	strh	r3, [r7, #28]
 8019af4:	683b      	ldr	r3, [r7, #0]
 8019af6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019af8:	f107 0314 	add.w	r3, r7, #20
 8019afc:	6879      	ldr	r1, [r7, #4]
 8019afe:	4618      	mov	r0, r3
 8019b00:	f7ec f8c7 	bl	8005c92 <osThreadCreate>
 8019b04:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019b06:	4618      	mov	r0, r3
 8019b08:	3730      	adds	r7, #48	; 0x30
 8019b0a:	46bd      	mov	sp, r7
 8019b0c:	bd80      	pop	{r7, pc}
	...

08019b10 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019b14:	4b04      	ldr	r3, [pc, #16]	; (8019b28 <sys_arch_protect+0x18>)
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f7ec f931 	bl	8005d84 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019b22:	2301      	movs	r3, #1
}
 8019b24:	4618      	mov	r0, r3
 8019b26:	bd80      	pop	{r7, pc}
 8019b28:	200106a8 	.word	0x200106a8

08019b2c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b082      	sub	sp, #8
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019b34:	4b04      	ldr	r3, [pc, #16]	; (8019b48 <sys_arch_unprotect+0x1c>)
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	4618      	mov	r0, r3
 8019b3a:	f7ec f971 	bl	8005e20 <osMutexRelease>
}
 8019b3e:	bf00      	nop
 8019b40:	3708      	adds	r7, #8
 8019b42:	46bd      	mov	sp, r7
 8019b44:	bd80      	pop	{r7, pc}
 8019b46:	bf00      	nop
 8019b48:	200106a8 	.word	0x200106a8

08019b4c <NewMessageData>:
 *******************************************************************************/
#include <MQTTClient.h>
#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8019b4c:	b480      	push	{r7}
 8019b4e:	b085      	sub	sp, #20
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	60f8      	str	r0, [r7, #12]
 8019b54:	60b9      	str	r1, [r7, #8]
 8019b56:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	68ba      	ldr	r2, [r7, #8]
 8019b5c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	687a      	ldr	r2, [r7, #4]
 8019b62:	601a      	str	r2, [r3, #0]
}
 8019b64:	bf00      	nop
 8019b66:	3714      	adds	r7, #20
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6e:	4770      	bx	lr

08019b70 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8019b70:	b480      	push	{r7}
 8019b72:	b083      	sub	sp, #12
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b80:	4293      	cmp	r3, r2
 8019b82:	d003      	beq.n	8019b8c <getNextPacketId+0x1c>
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	3301      	adds	r3, #1
 8019b8a:	e000      	b.n	8019b8e <getNextPacketId+0x1e>
 8019b8c:	2301      	movs	r3, #1
 8019b8e:	687a      	ldr	r2, [r7, #4]
 8019b90:	6013      	str	r3, [r2, #0]
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	681b      	ldr	r3, [r3, #0]
}
 8019b96:	4618      	mov	r0, r3
 8019b98:	370c      	adds	r7, #12
 8019b9a:	46bd      	mov	sp, r7
 8019b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba0:	4770      	bx	lr

08019ba2 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8019ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ba4:	b087      	sub	sp, #28
 8019ba6:	af00      	add	r7, sp, #0
 8019ba8:	60f8      	str	r0, [r7, #12]
 8019baa:	60b9      	str	r1, [r7, #8]
 8019bac:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8019bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019bb2:	617b      	str	r3, [r7, #20]
        sent = 0;
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8019bb8:	e018      	b.n	8019bec <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019bbe:	689c      	ldr	r4, [r3, #8]
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	691a      	ldr	r2, [r3, #16]
 8019bc8:	693b      	ldr	r3, [r7, #16]
 8019bca:	18d6      	adds	r6, r2, r3
 8019bcc:	6878      	ldr	r0, [r7, #4]
 8019bce:	f000 fecd 	bl	801a96c <TimerLeftMS>
 8019bd2:	4603      	mov	r3, r0
 8019bd4:	68ba      	ldr	r2, [r7, #8]
 8019bd6:	4631      	mov	r1, r6
 8019bd8:	4628      	mov	r0, r5
 8019bda:	47a0      	blx	r4
 8019bdc:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8019bde:	697b      	ldr	r3, [r7, #20]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	db0e      	blt.n	8019c02 <sendPacket+0x60>
            break;
        sent += rc;
 8019be4:	693a      	ldr	r2, [r7, #16]
 8019be6:	697b      	ldr	r3, [r7, #20]
 8019be8:	4413      	add	r3, r2
 8019bea:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8019bec:	693a      	ldr	r2, [r7, #16]
 8019bee:	68bb      	ldr	r3, [r7, #8]
 8019bf0:	429a      	cmp	r2, r3
 8019bf2:	da07      	bge.n	8019c04 <sendPacket+0x62>
 8019bf4:	6878      	ldr	r0, [r7, #4]
 8019bf6:	f000 fe77 	bl	801a8e8 <TimerIsExpired>
 8019bfa:	4603      	mov	r3, r0
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d0dc      	beq.n	8019bba <sendPacket+0x18>
 8019c00:	e000      	b.n	8019c04 <sendPacket+0x62>
            break;
 8019c02:	bf00      	nop
    }
    if (sent == length)
 8019c04:	693a      	ldr	r2, [r7, #16]
 8019c06:	68bb      	ldr	r3, [r7, #8]
 8019c08:	429a      	cmp	r2, r3
 8019c0a:	d10b      	bne.n	8019c24 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully sent the packet
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	699b      	ldr	r3, [r3, #24]
 8019c16:	4619      	mov	r1, r3
 8019c18:	4610      	mov	r0, r2
 8019c1a:	f000 fe8f 	bl	801a93c <TimerCountdown>
        rc = MQTT_SUCCESS;
 8019c1e:	2300      	movs	r3, #0
 8019c20:	617b      	str	r3, [r7, #20]
 8019c22:	e002      	b.n	8019c2a <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8019c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c28:	617b      	str	r3, [r7, #20]
    return rc;
 8019c2a:	697b      	ldr	r3, [r7, #20]
}
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	371c      	adds	r7, #28
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019c34 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b086      	sub	sp, #24
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	60f8      	str	r0, [r7, #12]
 8019c3c:	60b9      	str	r1, [r7, #8]
 8019c3e:	607a      	str	r2, [r7, #4]
 8019c40:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	68ba      	ldr	r2, [r7, #8]
 8019c46:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8019c48:	2300      	movs	r3, #0
 8019c4a:	617b      	str	r3, [r7, #20]
 8019c4c:	e008      	b.n	8019c60 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	697a      	ldr	r2, [r7, #20]
 8019c52:	3205      	adds	r2, #5
 8019c54:	2100      	movs	r1, #0
 8019c56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8019c5a:	697b      	ldr	r3, [r7, #20]
 8019c5c:	3301      	adds	r3, #1
 8019c5e:	617b      	str	r3, [r7, #20]
 8019c60:	697b      	ldr	r3, [r7, #20]
 8019c62:	2b04      	cmp	r3, #4
 8019c64:	ddf3      	ble.n	8019c4e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	687a      	ldr	r2, [r7, #4]
 8019c6a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	683a      	ldr	r2, [r7, #0]
 8019c70:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	6a3a      	ldr	r2, [r7, #32]
 8019c76:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c7c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c82:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	2200      	movs	r2, #0
 8019c88:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	2200      	movs	r2, #0
 8019c94:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	2200      	movs	r2, #0
 8019c9a:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	2201      	movs	r2, #1
 8019ca0:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	3358      	adds	r3, #88	; 0x58
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	f000 fe76 	bl	801a998 <TimerInit>
    TimerInit(&c->last_received);
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	3360      	adds	r3, #96	; 0x60
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	f000 fe71 	bl	801a998 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 8019cb6:	bf00      	nop
 8019cb8:	3718      	adds	r7, #24
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	bd80      	pop	{r7, pc}

08019cbe <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8019cbe:	b590      	push	{r4, r7, lr}
 8019cc0:	b08b      	sub	sp, #44	; 0x2c
 8019cc2:	af00      	add	r7, sp, #0
 8019cc4:	60f8      	str	r0, [r7, #12]
 8019cc6:	60b9      	str	r1, [r7, #8]
 8019cc8:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8019cca:	2301      	movs	r3, #1
 8019ccc:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8019cce:	2300      	movs	r3, #0
 8019cd0:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8019cd2:	2304      	movs	r3, #4
 8019cd4:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8019cd6:	68bb      	ldr	r3, [r7, #8]
 8019cd8:	2200      	movs	r2, #0
 8019cda:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8019cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ce0:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8019ce2:	6a3b      	ldr	r3, [r7, #32]
 8019ce4:	3301      	adds	r3, #1
 8019ce6:	623b      	str	r3, [r7, #32]
 8019ce8:	6a3a      	ldr	r2, [r7, #32]
 8019cea:	69fb      	ldr	r3, [r7, #28]
 8019cec:	429a      	cmp	r2, r3
 8019cee:	dd03      	ble.n	8019cf8 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8019cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019cf4:	61bb      	str	r3, [r7, #24]
            goto exit;
 8019cf6:	e021      	b.n	8019d3c <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019cfc:	685c      	ldr	r4, [r3, #4]
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8019d02:	f107 0117 	add.w	r1, r7, #23
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	2201      	movs	r2, #1
 8019d0a:	47a0      	blx	r4
 8019d0c:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8019d0e:	69bb      	ldr	r3, [r7, #24]
 8019d10:	2b01      	cmp	r3, #1
 8019d12:	d112      	bne.n	8019d3a <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8019d14:	68bb      	ldr	r3, [r7, #8]
 8019d16:	681a      	ldr	r2, [r3, #0]
 8019d18:	7dfb      	ldrb	r3, [r7, #23]
 8019d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019d20:	fb01 f303 	mul.w	r3, r1, r3
 8019d24:	441a      	add	r2, r3
 8019d26:	68bb      	ldr	r3, [r7, #8]
 8019d28:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8019d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2c:	01db      	lsls	r3, r3, #7
 8019d2e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8019d30:	7dfb      	ldrb	r3, [r7, #23]
 8019d32:	b25b      	sxtb	r3, r3
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	dbd1      	blt.n	8019cdc <decodePacket+0x1e>
exit:
 8019d38:	e000      	b.n	8019d3c <decodePacket+0x7e>
            goto exit;
 8019d3a:	bf00      	nop
    return len;
 8019d3c:	6a3b      	ldr	r3, [r7, #32]
}
 8019d3e:	4618      	mov	r0, r3
 8019d40:	372c      	adds	r7, #44	; 0x2c
 8019d42:	46bd      	mov	sp, r7
 8019d44:	bd90      	pop	{r4, r7, pc}

08019d46 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8019d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d48:	b089      	sub	sp, #36	; 0x24
 8019d4a:	af00      	add	r7, sp, #0
 8019d4c:	60f8      	str	r0, [r7, #12]
 8019d4e:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8019d50:	2300      	movs	r3, #0
 8019d52:	617b      	str	r3, [r7, #20]
    int len = 0;
 8019d54:	2300      	movs	r3, #0
 8019d56:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8019d58:	2300      	movs	r3, #0
 8019d5a:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d60:	685c      	ldr	r4, [r3, #4]
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	695e      	ldr	r6, [r3, #20]
 8019d6a:	68b8      	ldr	r0, [r7, #8]
 8019d6c:	f000 fdfe 	bl	801a96c <TimerLeftMS>
 8019d70:	4603      	mov	r3, r0
 8019d72:	2201      	movs	r2, #1
 8019d74:	4631      	mov	r1, r6
 8019d76:	4628      	mov	r0, r5
 8019d78:	47a0      	blx	r4
 8019d7a:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 8019d7c:	69fb      	ldr	r3, [r7, #28]
 8019d7e:	2b01      	cmp	r3, #1
 8019d80:	d15d      	bne.n	8019e3e <readPacket+0xf8>
        goto exit;

    len = 1;
 8019d82:	2301      	movs	r3, #1
 8019d84:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8019d86:	68b8      	ldr	r0, [r7, #8]
 8019d88:	f000 fdf0 	bl	801a96c <TimerLeftMS>
 8019d8c:	4602      	mov	r2, r0
 8019d8e:	f107 0310 	add.w	r3, r7, #16
 8019d92:	4619      	mov	r1, r3
 8019d94:	68f8      	ldr	r0, [r7, #12]
 8019d96:	f7ff ff92 	bl	8019cbe <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	695b      	ldr	r3, [r3, #20]
 8019d9e:	3301      	adds	r3, #1
 8019da0:	693a      	ldr	r2, [r7, #16]
 8019da2:	4611      	mov	r1, r2
 8019da4:	4618      	mov	r0, r3
 8019da6:	f001 f96f 	bl	801b088 <MQTTPacket_encode>
 8019daa:	4602      	mov	r2, r0
 8019dac:	69bb      	ldr	r3, [r7, #24]
 8019dae:	4413      	add	r3, r2
 8019db0:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	68da      	ldr	r2, [r3, #12]
 8019db6:	69bb      	ldr	r3, [r7, #24]
 8019db8:	1ad3      	subs	r3, r2, r3
 8019dba:	693a      	ldr	r2, [r7, #16]
 8019dbc:	4293      	cmp	r3, r2
 8019dbe:	d203      	bcs.n	8019dc8 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8019dc0:	f06f 0301 	mvn.w	r3, #1
 8019dc4:	61fb      	str	r3, [r7, #28]
        goto exit;
 8019dc6:	e03d      	b.n	8019e44 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 8019dc8:	693b      	ldr	r3, [r7, #16]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	dd20      	ble.n	8019e10 <readPacket+0xca>
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019dd2:	685c      	ldr	r4, [r3, #4]
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	695a      	ldr	r2, [r3, #20]
 8019ddc:	69bb      	ldr	r3, [r7, #24]
 8019dde:	18d6      	adds	r6, r2, r3
 8019de0:	693b      	ldr	r3, [r7, #16]
 8019de2:	607b      	str	r3, [r7, #4]
 8019de4:	68b8      	ldr	r0, [r7, #8]
 8019de6:	f000 fdc1 	bl	801a96c <TimerLeftMS>
 8019dea:	4603      	mov	r3, r0
 8019dec:	687a      	ldr	r2, [r7, #4]
 8019dee:	4631      	mov	r1, r6
 8019df0:	4628      	mov	r0, r5
 8019df2:	47a0      	blx	r4
 8019df4:	4602      	mov	r2, r0
 8019df6:	693b      	ldr	r3, [r7, #16]
 8019df8:	429a      	cmp	r2, r3
 8019dfa:	bf14      	ite	ne
 8019dfc:	2301      	movne	r3, #1
 8019dfe:	2300      	moveq	r3, #0
 8019e00:	b2db      	uxtb	r3, r3
 8019e02:	61fb      	str	r3, [r7, #28]
 8019e04:	69fb      	ldr	r3, [r7, #28]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d002      	beq.n	8019e10 <readPacket+0xca>
        rc = 0;
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	61fb      	str	r3, [r7, #28]
        goto exit;
 8019e0e:	e019      	b.n	8019e44 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	695b      	ldr	r3, [r3, #20]
 8019e14:	781b      	ldrb	r3, [r3, #0]
 8019e16:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8019e18:	7d3b      	ldrb	r3, [r7, #20]
 8019e1a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8019e1e:	b2db      	uxtb	r3, r3
 8019e20:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	699b      	ldr	r3, [r3, #24]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d00b      	beq.n	8019e42 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully received a packet
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	699b      	ldr	r3, [r3, #24]
 8019e34:	4619      	mov	r1, r3
 8019e36:	4610      	mov	r0, r2
 8019e38:	f000 fd80 	bl	801a93c <TimerCountdown>
 8019e3c:	e002      	b.n	8019e44 <readPacket+0xfe>
        goto exit;
 8019e3e:	bf00      	nop
 8019e40:	e000      	b.n	8019e44 <readPacket+0xfe>
exit:
 8019e42:	bf00      	nop
    return rc;
 8019e44:	69fb      	ldr	r3, [r7, #28]
}
 8019e46:	4618      	mov	r0, r3
 8019e48:	3724      	adds	r7, #36	; 0x24
 8019e4a:	46bd      	mov	sp, r7
 8019e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019e4e <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8019e4e:	b480      	push	{r7}
 8019e50:	b087      	sub	sp, #28
 8019e52:	af00      	add	r7, sp, #0
 8019e54:	6078      	str	r0, [r7, #4]
 8019e56:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8019e5c:	683b      	ldr	r3, [r7, #0]
 8019e5e:	689b      	ldr	r3, [r3, #8]
 8019e60:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8019e62:	683b      	ldr	r3, [r7, #0]
 8019e64:	685b      	ldr	r3, [r3, #4]
 8019e66:	461a      	mov	r2, r3
 8019e68:	693b      	ldr	r3, [r7, #16]
 8019e6a:	4413      	add	r3, r2
 8019e6c:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8019e6e:	e039      	b.n	8019ee4 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8019e70:	693b      	ldr	r3, [r7, #16]
 8019e72:	781b      	ldrb	r3, [r3, #0]
 8019e74:	2b2f      	cmp	r3, #47	; 0x2f
 8019e76:	d103      	bne.n	8019e80 <isTopicMatched+0x32>
 8019e78:	697b      	ldr	r3, [r7, #20]
 8019e7a:	781b      	ldrb	r3, [r3, #0]
 8019e7c:	2b2f      	cmp	r3, #47	; 0x2f
 8019e7e:	d13a      	bne.n	8019ef6 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8019e80:	697b      	ldr	r3, [r7, #20]
 8019e82:	781b      	ldrb	r3, [r3, #0]
 8019e84:	2b2b      	cmp	r3, #43	; 0x2b
 8019e86:	d009      	beq.n	8019e9c <isTopicMatched+0x4e>
 8019e88:	697b      	ldr	r3, [r7, #20]
 8019e8a:	781b      	ldrb	r3, [r3, #0]
 8019e8c:	2b23      	cmp	r3, #35	; 0x23
 8019e8e:	d005      	beq.n	8019e9c <isTopicMatched+0x4e>
 8019e90:	697b      	ldr	r3, [r7, #20]
 8019e92:	781a      	ldrb	r2, [r3, #0]
 8019e94:	693b      	ldr	r3, [r7, #16]
 8019e96:	781b      	ldrb	r3, [r3, #0]
 8019e98:	429a      	cmp	r2, r3
 8019e9a:	d12e      	bne.n	8019efa <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8019e9c:	697b      	ldr	r3, [r7, #20]
 8019e9e:	781b      	ldrb	r3, [r3, #0]
 8019ea0:	2b2b      	cmp	r3, #43	; 0x2b
 8019ea2:	d112      	bne.n	8019eca <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8019ea4:	693b      	ldr	r3, [r7, #16]
 8019ea6:	3301      	adds	r3, #1
 8019ea8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8019eaa:	e005      	b.n	8019eb8 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8019eac:	693b      	ldr	r3, [r7, #16]
 8019eae:	3301      	adds	r3, #1
 8019eb0:	613b      	str	r3, [r7, #16]
 8019eb2:	693b      	ldr	r3, [r7, #16]
 8019eb4:	3301      	adds	r3, #1
 8019eb6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8019eb8:	68fa      	ldr	r2, [r7, #12]
 8019eba:	68bb      	ldr	r3, [r7, #8]
 8019ebc:	429a      	cmp	r2, r3
 8019ebe:	d20b      	bcs.n	8019ed8 <isTopicMatched+0x8a>
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	781b      	ldrb	r3, [r3, #0]
 8019ec4:	2b2f      	cmp	r3, #47	; 0x2f
 8019ec6:	d1f1      	bne.n	8019eac <isTopicMatched+0x5e>
 8019ec8:	e006      	b.n	8019ed8 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8019eca:	697b      	ldr	r3, [r7, #20]
 8019ecc:	781b      	ldrb	r3, [r3, #0]
 8019ece:	2b23      	cmp	r3, #35	; 0x23
 8019ed0:	d102      	bne.n	8019ed8 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8019ed2:	68bb      	ldr	r3, [r7, #8]
 8019ed4:	3b01      	subs	r3, #1
 8019ed6:	613b      	str	r3, [r7, #16]
        curf++;
 8019ed8:	697b      	ldr	r3, [r7, #20]
 8019eda:	3301      	adds	r3, #1
 8019edc:	617b      	str	r3, [r7, #20]
        curn++;
 8019ede:	693b      	ldr	r3, [r7, #16]
 8019ee0:	3301      	adds	r3, #1
 8019ee2:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8019ee4:	697b      	ldr	r3, [r7, #20]
 8019ee6:	781b      	ldrb	r3, [r3, #0]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d007      	beq.n	8019efc <isTopicMatched+0xae>
 8019eec:	693a      	ldr	r2, [r7, #16]
 8019eee:	68bb      	ldr	r3, [r7, #8]
 8019ef0:	429a      	cmp	r2, r3
 8019ef2:	d3bd      	bcc.n	8019e70 <isTopicMatched+0x22>
 8019ef4:	e002      	b.n	8019efc <isTopicMatched+0xae>
            break;
 8019ef6:	bf00      	nop
 8019ef8:	e000      	b.n	8019efc <isTopicMatched+0xae>
            break;
 8019efa:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8019efc:	693a      	ldr	r2, [r7, #16]
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	429a      	cmp	r2, r3
 8019f02:	d105      	bne.n	8019f10 <isTopicMatched+0xc2>
 8019f04:	697b      	ldr	r3, [r7, #20]
 8019f06:	781b      	ldrb	r3, [r3, #0]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d101      	bne.n	8019f10 <isTopicMatched+0xc2>
 8019f0c:	2301      	movs	r3, #1
 8019f0e:	e000      	b.n	8019f12 <isTopicMatched+0xc4>
 8019f10:	2300      	movs	r3, #0
 8019f12:	b2db      	uxtb	r3, r3
}
 8019f14:	4618      	mov	r0, r3
 8019f16:	371c      	adds	r7, #28
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f1e:	4770      	bx	lr

08019f20 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b08a      	sub	sp, #40	; 0x28
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	60f8      	str	r0, [r7, #12]
 8019f28:	60b9      	str	r1, [r7, #8]
 8019f2a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8019f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019f30:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8019f32:	2300      	movs	r3, #0
 8019f34:	627b      	str	r3, [r7, #36]	; 0x24
 8019f36:	e03c      	b.n	8019fb2 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f3c:	3205      	adds	r2, #5
 8019f3e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d032      	beq.n	8019fac <deliverMessage+0x8c>
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f4a:	3205      	adds	r2, #5
 8019f4c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8019f50:	4619      	mov	r1, r3
 8019f52:	68b8      	ldr	r0, [r7, #8]
 8019f54:	f001 fa68 	bl	801b428 <MQTTPacket_equals>
 8019f58:	4603      	mov	r3, r0
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d10b      	bne.n	8019f76 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f62:	3205      	adds	r2, #5
 8019f64:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8019f68:	68b9      	ldr	r1, [r7, #8]
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	f7ff ff6f 	bl	8019e4e <isTopicMatched>
 8019f70:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d01a      	beq.n	8019fac <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8019f76:	68fa      	ldr	r2, [r7, #12]
 8019f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7a:	3305      	adds	r3, #5
 8019f7c:	00db      	lsls	r3, r3, #3
 8019f7e:	4413      	add	r3, r2
 8019f80:	685b      	ldr	r3, [r3, #4]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d012      	beq.n	8019fac <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8019f86:	f107 0318 	add.w	r3, r7, #24
 8019f8a:	687a      	ldr	r2, [r7, #4]
 8019f8c:	68b9      	ldr	r1, [r7, #8]
 8019f8e:	4618      	mov	r0, r3
 8019f90:	f7ff fddc 	bl	8019b4c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8019f94:	68fa      	ldr	r2, [r7, #12]
 8019f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f98:	3305      	adds	r3, #5
 8019f9a:	00db      	lsls	r3, r3, #3
 8019f9c:	4413      	add	r3, r2
 8019f9e:	685b      	ldr	r3, [r3, #4]
 8019fa0:	f107 0218 	add.w	r2, r7, #24
 8019fa4:	4610      	mov	r0, r2
 8019fa6:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 8019fa8:	2300      	movs	r3, #0
 8019faa:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8019fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fae:	3301      	adds	r3, #1
 8019fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8019fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb4:	2b04      	cmp	r3, #4
 8019fb6:	ddbf      	ble.n	8019f38 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8019fb8:	6a3b      	ldr	r3, [r7, #32]
 8019fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019fbe:	d112      	bne.n	8019fe6 <deliverMessage+0xc6>
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d00e      	beq.n	8019fe6 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8019fc8:	f107 0310 	add.w	r3, r7, #16
 8019fcc:	687a      	ldr	r2, [r7, #4]
 8019fce:	68b9      	ldr	r1, [r7, #8]
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f7ff fdbb 	bl	8019b4c <NewMessageData>
        c->defaultMessageHandler(&md);
 8019fd6:	68fb      	ldr	r3, [r7, #12]
 8019fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019fda:	f107 0210 	add.w	r2, r7, #16
 8019fde:	4610      	mov	r0, r2
 8019fe0:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8019fe6:	6a3b      	ldr	r3, [r7, #32]
}
 8019fe8:	4618      	mov	r0, r3
 8019fea:	3728      	adds	r7, #40	; 0x28
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}

08019ff0 <keepalive>:


int keepalive(MQTTClient* c)
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b086      	sub	sp, #24
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	699b      	ldr	r3, [r3, #24]
 801a000:	2b00      	cmp	r3, #0
 801a002:	d03e      	beq.n	801a082 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	3358      	adds	r3, #88	; 0x58
 801a008:	4618      	mov	r0, r3
 801a00a:	f000 fc6d 	bl	801a8e8 <TimerIsExpired>
 801a00e:	4603      	mov	r3, r0
 801a010:	2b00      	cmp	r3, #0
 801a012:	d107      	bne.n	801a024 <keepalive+0x34>
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	3360      	adds	r3, #96	; 0x60
 801a018:	4618      	mov	r0, r3
 801a01a:	f000 fc65 	bl	801a8e8 <TimerIsExpired>
 801a01e:	4603      	mov	r3, r0
 801a020:	2b00      	cmp	r3, #0
 801a022:	d030      	beq.n	801a086 <keepalive+0x96>
    {
        if (c->ping_outstanding)
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	7f1b      	ldrb	r3, [r3, #28]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d003      	beq.n	801a034 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 801a02c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a030:	617b      	str	r3, [r7, #20]
 801a032:	e029      	b.n	801a088 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 801a034:	f107 0308 	add.w	r3, r7, #8
 801a038:	4618      	mov	r0, r3
 801a03a:	f000 fcad 	bl	801a998 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801a03e:	f107 0308 	add.w	r3, r7, #8
 801a042:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a046:	4618      	mov	r0, r3
 801a048:	f000 fc64 	bl	801a914 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	691a      	ldr	r2, [r3, #16]
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	689b      	ldr	r3, [r3, #8]
 801a054:	4619      	mov	r1, r3
 801a056:	4610      	mov	r0, r2
 801a058:	f000 ff4a 	bl	801aef0 <MQTTSerialize_pingreq>
 801a05c:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 801a05e:	693b      	ldr	r3, [r7, #16]
 801a060:	2b00      	cmp	r3, #0
 801a062:	dd11      	ble.n	801a088 <keepalive+0x98>
 801a064:	f107 0308 	add.w	r3, r7, #8
 801a068:	461a      	mov	r2, r3
 801a06a:	6939      	ldr	r1, [r7, #16]
 801a06c:	6878      	ldr	r0, [r7, #4]
 801a06e:	f7ff fd98 	bl	8019ba2 <sendPacket>
 801a072:	6178      	str	r0, [r7, #20]
 801a074:	697b      	ldr	r3, [r7, #20]
 801a076:	2b00      	cmp	r3, #0
 801a078:	d106      	bne.n	801a088 <keepalive+0x98>
                c->ping_outstanding = 1;
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	2201      	movs	r2, #1
 801a07e:	771a      	strb	r2, [r3, #28]
 801a080:	e002      	b.n	801a088 <keepalive+0x98>
        goto exit;
 801a082:	bf00      	nop
 801a084:	e000      	b.n	801a088 <keepalive+0x98>
        }
    }

exit:
 801a086:	bf00      	nop
    return rc;
 801a088:	697b      	ldr	r3, [r7, #20]
}
 801a08a:	4618      	mov	r0, r3
 801a08c:	3718      	adds	r7, #24
 801a08e:	46bd      	mov	sp, r7
 801a090:	bd80      	pop	{r7, pc}

0801a092 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 801a092:	b480      	push	{r7}
 801a094:	b085      	sub	sp, #20
 801a096:	af00      	add	r7, sp, #0
 801a098:	6078      	str	r0, [r7, #4]
    int i = 0;
 801a09a:	2300      	movs	r3, #0
 801a09c:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a09e:	2300      	movs	r3, #0
 801a0a0:	60fb      	str	r3, [r7, #12]
 801a0a2:	e008      	b.n	801a0b6 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	68fa      	ldr	r2, [r7, #12]
 801a0a8:	3205      	adds	r2, #5
 801a0aa:	2100      	movs	r1, #0
 801a0ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a0b0:	68fb      	ldr	r3, [r7, #12]
 801a0b2:	3301      	adds	r3, #1
 801a0b4:	60fb      	str	r3, [r7, #12]
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	2b04      	cmp	r3, #4
 801a0ba:	ddf3      	ble.n	801a0a4 <MQTTCleanSession+0x12>
}
 801a0bc:	bf00      	nop
 801a0be:	bf00      	nop
 801a0c0:	3714      	adds	r7, #20
 801a0c2:	46bd      	mov	sp, r7
 801a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0c8:	4770      	bx	lr

0801a0ca <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 801a0ca:	b580      	push	{r7, lr}
 801a0cc:	b082      	sub	sp, #8
 801a0ce:	af00      	add	r7, sp, #0
 801a0d0:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	2200      	movs	r2, #0
 801a0d6:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	2200      	movs	r2, #0
 801a0dc:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d002      	beq.n	801a0ec <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 801a0e6:	6878      	ldr	r0, [r7, #4]
 801a0e8:	f7ff ffd3 	bl	801a092 <MQTTCleanSession>
}
 801a0ec:	bf00      	nop
 801a0ee:	3708      	adds	r7, #8
 801a0f0:	46bd      	mov	sp, r7
 801a0f2:	bd80      	pop	{r7, pc}

0801a0f4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 801a0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0f6:	b095      	sub	sp, #84	; 0x54
 801a0f8:	af06      	add	r7, sp, #24
 801a0fa:	6078      	str	r0, [r7, #4]
 801a0fc:	6039      	str	r1, [r7, #0]
    int len = 0,
 801a0fe:	2300      	movs	r3, #0
 801a100:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTT_SUCCESS;
 801a102:	2300      	movs	r3, #0
 801a104:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 801a106:	6839      	ldr	r1, [r7, #0]
 801a108:	6878      	ldr	r0, [r7, #4]
 801a10a:	f7ff fe1c 	bl	8019d46 <readPacket>
 801a10e:	62f8      	str	r0, [r7, #44]	; 0x2c
 801a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a112:	2b0d      	cmp	r3, #13
 801a114:	d81e      	bhi.n	801a154 <cycle+0x60>
 801a116:	a201      	add	r2, pc, #4	; (adr r2, 801a11c <cycle+0x28>)
 801a118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a11c:	0801a2ab 	.word	0x0801a2ab
 801a120:	0801a155 	.word	0x0801a155
 801a124:	0801a2ab 	.word	0x0801a2ab
 801a128:	0801a15b 	.word	0x0801a15b
 801a12c:	0801a2ab 	.word	0x0801a2ab
 801a130:	0801a227 	.word	0x0801a227
 801a134:	0801a227 	.word	0x0801a227
 801a138:	0801a2ab 	.word	0x0801a2ab
 801a13c:	0801a155 	.word	0x0801a155
 801a140:	0801a2ab 	.word	0x0801a2ab
 801a144:	0801a155 	.word	0x0801a155
 801a148:	0801a2ab 	.word	0x0801a2ab
 801a14c:	0801a155 	.word	0x0801a155
 801a150:	0801a2a3 	.word	0x0801a2a3

    switch (packet_type)
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 801a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a156:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 801a158:	e0b9      	b.n	801a2ce <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 801a15a:	2300      	movs	r3, #0
 801a15c:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801a162:	687a      	ldr	r2, [r7, #4]
 801a164:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801a166:	4616      	mov	r6, r2
 801a168:	f107 0210 	add.w	r2, r7, #16
 801a16c:	1d15      	adds	r5, r2, #4
 801a16e:	f107 0210 	add.w	r2, r7, #16
 801a172:	1c54      	adds	r4, r2, #1
 801a174:	f107 010c 	add.w	r1, r7, #12
 801a178:	f107 0210 	add.w	r2, r7, #16
 801a17c:	1c90      	adds	r0, r2, #2
 801a17e:	9604      	str	r6, [sp, #16]
 801a180:	9303      	str	r3, [sp, #12]
 801a182:	f107 0310 	add.w	r3, r7, #16
 801a186:	330c      	adds	r3, #12
 801a188:	9302      	str	r3, [sp, #8]
 801a18a:	f107 0310 	add.w	r3, r7, #16
 801a18e:	3308      	adds	r3, #8
 801a190:	9301      	str	r3, [sp, #4]
 801a192:	f107 0320 	add.w	r3, r7, #32
 801a196:	9300      	str	r3, [sp, #0]
 801a198:	462b      	mov	r3, r5
 801a19a:	4622      	mov	r2, r4
 801a19c:	f000 feb7 	bl	801af0e <MQTTDeserialize_publish>
 801a1a0:	4603      	mov	r3, r0
 801a1a2:	2b01      	cmp	r3, #1
 801a1a4:	f040 8090 	bne.w	801a2c8 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	b2db      	uxtb	r3, r3
 801a1ac:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801a1ae:	f107 0210 	add.w	r2, r7, #16
 801a1b2:	f107 0320 	add.w	r3, r7, #32
 801a1b6:	4619      	mov	r1, r3
 801a1b8:	6878      	ldr	r0, [r7, #4]
 801a1ba:	f7ff feb1 	bl	8019f20 <deliverMessage>
            if (msg.qos != QOS0)
 801a1be:	7c3b      	ldrb	r3, [r7, #16]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d074      	beq.n	801a2ae <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 801a1c4:	7c3b      	ldrb	r3, [r7, #16]
 801a1c6:	2b01      	cmp	r3, #1
 801a1c8:	d10c      	bne.n	801a1e4 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	6918      	ldr	r0, [r3, #16]
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	689b      	ldr	r3, [r3, #8]
 801a1d2:	4619      	mov	r1, r3
 801a1d4:	8abb      	ldrh	r3, [r7, #20]
 801a1d6:	9300      	str	r3, [sp, #0]
 801a1d8:	2300      	movs	r3, #0
 801a1da:	2204      	movs	r2, #4
 801a1dc:	f001 f9f1 	bl	801b5c2 <MQTTSerialize_ack>
 801a1e0:	6378      	str	r0, [r7, #52]	; 0x34
 801a1e2:	e00e      	b.n	801a202 <cycle+0x10e>
                else if (msg.qos == QOS2)
 801a1e4:	7c3b      	ldrb	r3, [r7, #16]
 801a1e6:	2b02      	cmp	r3, #2
 801a1e8:	d10b      	bne.n	801a202 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	6918      	ldr	r0, [r3, #16]
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	689b      	ldr	r3, [r3, #8]
 801a1f2:	4619      	mov	r1, r3
 801a1f4:	8abb      	ldrh	r3, [r7, #20]
 801a1f6:	9300      	str	r3, [sp, #0]
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	2205      	movs	r2, #5
 801a1fc:	f001 f9e1 	bl	801b5c2 <MQTTSerialize_ack>
 801a200:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 801a202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a204:	2b00      	cmp	r3, #0
 801a206:	dc03      	bgt.n	801a210 <cycle+0x11c>
                    rc = FAILURE;
 801a208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a20c:	633b      	str	r3, [r7, #48]	; 0x30
 801a20e:	e005      	b.n	801a21c <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 801a210:	683a      	ldr	r2, [r7, #0]
 801a212:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a214:	6878      	ldr	r0, [r7, #4]
 801a216:	f7ff fcc4 	bl	8019ba2 <sendPacket>
 801a21a:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801a21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a21e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a222:	d144      	bne.n	801a2ae <cycle+0x1ba>
                    goto exit; // there was a problem
 801a224:	e053      	b.n	801a2ce <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	695c      	ldr	r4, [r3, #20]
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	68db      	ldr	r3, [r3, #12]
 801a22e:	f107 020a 	add.w	r2, r7, #10
 801a232:	f107 0109 	add.w	r1, r7, #9
 801a236:	f107 0008 	add.w	r0, r7, #8
 801a23a:	9300      	str	r3, [sp, #0]
 801a23c:	4623      	mov	r3, r4
 801a23e:	f000 fed8 	bl	801aff2 <MQTTDeserialize_ack>
 801a242:	4603      	mov	r3, r0
 801a244:	2b01      	cmp	r3, #1
 801a246:	d003      	beq.n	801a250 <cycle+0x15c>
                rc = FAILURE;
 801a248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a24c:	633b      	str	r3, [r7, #48]	; 0x30
 801a24e:	e023      	b.n	801a298 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	6918      	ldr	r0, [r3, #16]
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	689b      	ldr	r3, [r3, #8]
 801a258:	4619      	mov	r1, r3
 801a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a25c:	2b05      	cmp	r3, #5
 801a25e:	d101      	bne.n	801a264 <cycle+0x170>
 801a260:	2206      	movs	r2, #6
 801a262:	e000      	b.n	801a266 <cycle+0x172>
 801a264:	2207      	movs	r2, #7
 801a266:	897b      	ldrh	r3, [r7, #10]
 801a268:	9300      	str	r3, [sp, #0]
 801a26a:	2300      	movs	r3, #0
 801a26c:	f001 f9a9 	bl	801b5c2 <MQTTSerialize_ack>
 801a270:	6378      	str	r0, [r7, #52]	; 0x34
 801a272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a274:	2b00      	cmp	r3, #0
 801a276:	dc03      	bgt.n	801a280 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 801a278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a27c:	633b      	str	r3, [r7, #48]	; 0x30
 801a27e:	e00b      	b.n	801a298 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 801a280:	683a      	ldr	r2, [r7, #0]
 801a282:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a284:	6878      	ldr	r0, [r7, #4]
 801a286:	f7ff fc8c 	bl	8019ba2 <sendPacket>
 801a28a:	6338      	str	r0, [r7, #48]	; 0x30
 801a28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d002      	beq.n	801a298 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 801a292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a296:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 801a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a29a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a29e:	d108      	bne.n	801a2b2 <cycle+0x1be>
                goto exit; // there was a problem
 801a2a0:	e015      	b.n	801a2ce <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	2200      	movs	r2, #0
 801a2a6:	771a      	strb	r2, [r3, #28]
            break;
 801a2a8:	e004      	b.n	801a2b4 <cycle+0x1c0>
            break;
 801a2aa:	bf00      	nop
 801a2ac:	e002      	b.n	801a2b4 <cycle+0x1c0>
            break;
 801a2ae:	bf00      	nop
 801a2b0:	e000      	b.n	801a2b4 <cycle+0x1c0>
            break;
 801a2b2:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 801a2b4:	6878      	ldr	r0, [r7, #4]
 801a2b6:	f7ff fe9b 	bl	8019ff0 <keepalive>
 801a2ba:	4603      	mov	r3, r0
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d005      	beq.n	801a2cc <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 801a2c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a2c4:	633b      	str	r3, [r7, #48]	; 0x30
 801a2c6:	e002      	b.n	801a2ce <cycle+0x1da>
                goto exit;
 801a2c8:	bf00      	nop
 801a2ca:	e000      	b.n	801a2ce <cycle+0x1da>
    }

exit:
 801a2cc:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 801a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d102      	bne.n	801a2da <cycle+0x1e6>
        rc = packet_type;
 801a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2d6:	633b      	str	r3, [r7, #48]	; 0x30
 801a2d8:	e006      	b.n	801a2e8 <cycle+0x1f4>
    else if (c->isconnected)
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	6a1b      	ldr	r3, [r3, #32]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d002      	beq.n	801a2e8 <cycle+0x1f4>
        MQTTCloseSession(c);
 801a2e2:	6878      	ldr	r0, [r7, #4]
 801a2e4:	f7ff fef1 	bl	801a0ca <MQTTCloseSession>
    return rc;
 801a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	373c      	adds	r7, #60	; 0x3c
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2f2:	bf00      	nop

0801a2f4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b086      	sub	sp, #24
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
 801a2fc:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 801a2fe:	2300      	movs	r3, #0
 801a300:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 801a302:	f107 030c 	add.w	r3, r7, #12
 801a306:	4618      	mov	r0, r3
 801a308:	f000 fb46 	bl	801a998 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 801a30c:	683a      	ldr	r2, [r7, #0]
 801a30e:	f107 030c 	add.w	r3, r7, #12
 801a312:	4611      	mov	r1, r2
 801a314:	4618      	mov	r0, r3
 801a316:	f000 fafd 	bl	801a914 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 801a31a:	f107 030c 	add.w	r3, r7, #12
 801a31e:	4619      	mov	r1, r3
 801a320:	6878      	ldr	r0, [r7, #4]
 801a322:	f7ff fee7 	bl	801a0f4 <cycle>
 801a326:	4603      	mov	r3, r0
 801a328:	2b00      	cmp	r3, #0
 801a32a:	da03      	bge.n	801a334 <MQTTYield+0x40>
        {
            rc = FAILURE;
 801a32c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a330:	617b      	str	r3, [r7, #20]
            break;
 801a332:	e007      	b.n	801a344 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 801a334:	f107 030c 	add.w	r3, r7, #12
 801a338:	4618      	mov	r0, r3
 801a33a:	f000 fad5 	bl	801a8e8 <TimerIsExpired>
 801a33e:	4603      	mov	r3, r0
 801a340:	2b00      	cmp	r3, #0
 801a342:	d0ea      	beq.n	801a31a <MQTTYield+0x26>

    return rc;
 801a344:	697b      	ldr	r3, [r7, #20]
}
 801a346:	4618      	mov	r0, r3
 801a348:	3718      	adds	r7, #24
 801a34a:	46bd      	mov	sp, r7
 801a34c:	bd80      	pop	{r7, pc}

0801a34e <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801a34e:	b580      	push	{r7, lr}
 801a350:	b086      	sub	sp, #24
 801a352:	af00      	add	r7, sp, #0
 801a354:	60f8      	str	r0, [r7, #12]
 801a356:	60b9      	str	r1, [r7, #8]
 801a358:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801a35a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a35e:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 801a360:	6878      	ldr	r0, [r7, #4]
 801a362:	f000 fac1 	bl	801a8e8 <TimerIsExpired>
 801a366:	4603      	mov	r3, r0
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d10c      	bne.n	801a386 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 801a36c:	6879      	ldr	r1, [r7, #4]
 801a36e:	68f8      	ldr	r0, [r7, #12]
 801a370:	f7ff fec0 	bl	801a0f4 <cycle>
 801a374:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 801a376:	697a      	ldr	r2, [r7, #20]
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	429a      	cmp	r2, r3
 801a37c:	d004      	beq.n	801a388 <waitfor+0x3a>
 801a37e:	697b      	ldr	r3, [r7, #20]
 801a380:	2b00      	cmp	r3, #0
 801a382:	daed      	bge.n	801a360 <waitfor+0x12>
 801a384:	e000      	b.n	801a388 <waitfor+0x3a>
            break; // we timed out
 801a386:	bf00      	nop

    return rc;
 801a388:	697b      	ldr	r3, [r7, #20]
}
 801a38a:	4618      	mov	r0, r3
 801a38c:	3718      	adds	r7, #24
 801a38e:	46bd      	mov	sp, r7
 801a390:	bd80      	pop	{r7, pc}
	...

0801a394 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b09e      	sub	sp, #120	; 0x78
 801a398:	af00      	add	r7, sp, #0
 801a39a:	60f8      	str	r0, [r7, #12]
 801a39c:	60b9      	str	r1, [r7, #8]
 801a39e:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 801a3a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a3a4:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801a3a6:	4a43      	ldr	r2, [pc, #268]	; (801a4b4 <MQTTConnectWithResults+0x120>)
 801a3a8:	f107 0310 	add.w	r3, r7, #16
 801a3ac:	4611      	mov	r1, r2
 801a3ae:	2258      	movs	r2, #88	; 0x58
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	f001 fa97 	bl	801b8e4 <memcpy>
    int len = 0;
 801a3b6:	2300      	movs	r3, #0
 801a3b8:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 801a3ba:	68fb      	ldr	r3, [r7, #12]
 801a3bc:	6a1b      	ldr	r3, [r3, #32]
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	d164      	bne.n	801a48c <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 801a3c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	f000 fae6 	bl	801a998 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	685a      	ldr	r2, [r3, #4]
 801a3d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a3d4:	4611      	mov	r1, r2
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	f000 fa9c 	bl	801a914 <TimerCountdownMS>

    if (options == 0)
 801a3dc:	68bb      	ldr	r3, [r7, #8]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d102      	bne.n	801a3e8 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 801a3e2:	f107 0310 	add.w	r3, r7, #16
 801a3e6:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 801a3e8:	68bb      	ldr	r3, [r7, #8]
 801a3ea:	8b1b      	ldrh	r3, [r3, #24]
 801a3ec:	461a      	mov	r2, r3
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 801a3f2:	68bb      	ldr	r3, [r7, #8]
 801a3f4:	7e9b      	ldrb	r3, [r3, #26]
 801a3f6:	461a      	mov	r2, r3
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	f103 0260 	add.w	r2, r3, #96	; 0x60
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	699b      	ldr	r3, [r3, #24]
 801a406:	4619      	mov	r1, r3
 801a408:	4610      	mov	r0, r2
 801a40a:	f000 fa97 	bl	801a93c <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	6918      	ldr	r0, [r3, #16]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	689b      	ldr	r3, [r3, #8]
 801a416:	68ba      	ldr	r2, [r7, #8]
 801a418:	4619      	mov	r1, r3
 801a41a:	f000 fbe1 	bl	801abe0 <MQTTSerialize_connect>
 801a41e:	6738      	str	r0, [r7, #112]	; 0x70
 801a420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a422:	2b00      	cmp	r3, #0
 801a424:	dd34      	ble.n	801a490 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 801a426:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a42a:	461a      	mov	r2, r3
 801a42c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801a42e:	68f8      	ldr	r0, [r7, #12]
 801a430:	f7ff fbb7 	bl	8019ba2 <sendPacket>
 801a434:	6778      	str	r0, [r7, #116]	; 0x74
 801a436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d12b      	bne.n	801a494 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801a43c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801a440:	461a      	mov	r2, r3
 801a442:	2102      	movs	r1, #2
 801a444:	68f8      	ldr	r0, [r7, #12]
 801a446:	f7ff ff82 	bl	801a34e <waitfor>
 801a44a:	4603      	mov	r3, r0
 801a44c:	2b02      	cmp	r3, #2
 801a44e:	d119      	bne.n	801a484 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	2200      	movs	r2, #0
 801a454:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	2200      	movs	r2, #0
 801a45a:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	1c58      	adds	r0, r3, #1
 801a460:	6879      	ldr	r1, [r7, #4]
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	695a      	ldr	r2, [r3, #20]
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	68db      	ldr	r3, [r3, #12]
 801a46a:	f000 fca5 	bl	801adb8 <MQTTDeserialize_connack>
 801a46e:	4603      	mov	r3, r0
 801a470:	2b01      	cmp	r3, #1
 801a472:	d103      	bne.n	801a47c <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	781b      	ldrb	r3, [r3, #0]
 801a478:	677b      	str	r3, [r7, #116]	; 0x74
 801a47a:	e00c      	b.n	801a496 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 801a47c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a480:	677b      	str	r3, [r7, #116]	; 0x74
 801a482:	e008      	b.n	801a496 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 801a484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a488:	677b      	str	r3, [r7, #116]	; 0x74
 801a48a:	e004      	b.n	801a496 <MQTTConnectWithResults+0x102>
		  goto exit;
 801a48c:	bf00      	nop
 801a48e:	e002      	b.n	801a496 <MQTTConnectWithResults+0x102>
        goto exit;
 801a490:	bf00      	nop
 801a492:	e000      	b.n	801a496 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 801a494:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 801a496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d105      	bne.n	801a4a8 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	2201      	movs	r2, #1
 801a4a0:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 801a4a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	3778      	adds	r7, #120	; 0x78
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	bd80      	pop	{r7, pc}
 801a4b2:	bf00      	nop
 801a4b4:	080209a0 	.word	0x080209a0

0801a4b8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b084      	sub	sp, #16
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 801a4c2:	f107 030c 	add.w	r3, r7, #12
 801a4c6:	461a      	mov	r2, r3
 801a4c8:	6839      	ldr	r1, [r7, #0]
 801a4ca:	6878      	ldr	r0, [r7, #4]
 801a4cc:	f7ff ff62 	bl	801a394 <MQTTConnectWithResults>
 801a4d0:	4603      	mov	r3, r0
}
 801a4d2:	4618      	mov	r0, r3
 801a4d4:	3710      	adds	r7, #16
 801a4d6:	46bd      	mov	sp, r7
 801a4d8:	bd80      	pop	{r7, pc}

0801a4da <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 801a4da:	b580      	push	{r7, lr}
 801a4dc:	b086      	sub	sp, #24
 801a4de:	af00      	add	r7, sp, #0
 801a4e0:	60f8      	str	r0, [r7, #12]
 801a4e2:	60b9      	str	r1, [r7, #8]
 801a4e4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801a4e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a4ea:	617b      	str	r3, [r7, #20]
    int i = -1;
 801a4ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a4f0:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	613b      	str	r3, [r7, #16]
 801a4f6:	e028      	b.n	801a54a <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	693a      	ldr	r2, [r7, #16]
 801a4fc:	3205      	adds	r2, #5
 801a4fe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d01e      	beq.n	801a544 <MQTTSetMessageHandler+0x6a>
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	693a      	ldr	r2, [r7, #16]
 801a50a:	3205      	adds	r2, #5
 801a50c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801a510:	68b9      	ldr	r1, [r7, #8]
 801a512:	4618      	mov	r0, r3
 801a514:	f7e5 fe94 	bl	8000240 <strcmp>
 801a518:	4603      	mov	r3, r0
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d112      	bne.n	801a544 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	2b00      	cmp	r3, #0
 801a522:	d10c      	bne.n	801a53e <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	693a      	ldr	r2, [r7, #16]
 801a528:	3205      	adds	r2, #5
 801a52a:	2100      	movs	r1, #0
 801a52c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 801a530:	68fa      	ldr	r2, [r7, #12]
 801a532:	693b      	ldr	r3, [r7, #16]
 801a534:	3305      	adds	r3, #5
 801a536:	00db      	lsls	r3, r3, #3
 801a538:	4413      	add	r3, r2
 801a53a:	2200      	movs	r2, #0
 801a53c:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 801a53e:	2300      	movs	r3, #0
 801a540:	617b      	str	r3, [r7, #20]
            break;
 801a542:	e005      	b.n	801a550 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a544:	693b      	ldr	r3, [r7, #16]
 801a546:	3301      	adds	r3, #1
 801a548:	613b      	str	r3, [r7, #16]
 801a54a:	693b      	ldr	r3, [r7, #16]
 801a54c:	2b04      	cmp	r3, #4
 801a54e:	ddd3      	ble.n	801a4f8 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d026      	beq.n	801a5a4 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 801a556:	697b      	ldr	r3, [r7, #20]
 801a558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a55c:	d112      	bne.n	801a584 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a55e:	2300      	movs	r3, #0
 801a560:	613b      	str	r3, [r7, #16]
 801a562:	e00c      	b.n	801a57e <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	693a      	ldr	r2, [r7, #16]
 801a568:	3205      	adds	r2, #5
 801a56a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d102      	bne.n	801a578 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 801a572:	2300      	movs	r3, #0
 801a574:	617b      	str	r3, [r7, #20]
                    break;
 801a576:	e005      	b.n	801a584 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801a578:	693b      	ldr	r3, [r7, #16]
 801a57a:	3301      	adds	r3, #1
 801a57c:	613b      	str	r3, [r7, #16]
 801a57e:	693b      	ldr	r3, [r7, #16]
 801a580:	2b04      	cmp	r3, #4
 801a582:	ddef      	ble.n	801a564 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 801a584:	693b      	ldr	r3, [r7, #16]
 801a586:	2b04      	cmp	r3, #4
 801a588:	dc0c      	bgt.n	801a5a4 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	693a      	ldr	r2, [r7, #16]
 801a58e:	3205      	adds	r2, #5
 801a590:	68b9      	ldr	r1, [r7, #8]
 801a592:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 801a596:	68fa      	ldr	r2, [r7, #12]
 801a598:	693b      	ldr	r3, [r7, #16]
 801a59a:	3305      	adds	r3, #5
 801a59c:	00db      	lsls	r3, r3, #3
 801a59e:	4413      	add	r3, r2
 801a5a0:	687a      	ldr	r2, [r7, #4]
 801a5a2:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 801a5a4:	697b      	ldr	r3, [r7, #20]
}
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	3718      	adds	r7, #24
 801a5aa:	46bd      	mov	sp, r7
 801a5ac:	bd80      	pop	{r7, pc}

0801a5ae <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 801a5ae:	b5b0      	push	{r4, r5, r7, lr}
 801a5b0:	b092      	sub	sp, #72	; 0x48
 801a5b2:	af04      	add	r7, sp, #16
 801a5b4:	60f8      	str	r0, [r7, #12]
 801a5b6:	60b9      	str	r1, [r7, #8]
 801a5b8:	603b      	str	r3, [r7, #0]
 801a5ba:	4613      	mov	r3, r2
 801a5bc:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 801a5be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a5c2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 801a5c4:	2300      	movs	r3, #0
 801a5c6:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	61fb      	str	r3, [r7, #28]
 801a5cc:	2300      	movs	r3, #0
 801a5ce:	623b      	str	r3, [r7, #32]
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 801a5d4:	68bb      	ldr	r3, [r7, #8]
 801a5d6:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	6a1b      	ldr	r3, [r3, #32]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d063      	beq.n	801a6a8 <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 801a5e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f000 f9d7 	bl	801a998 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	685a      	ldr	r2, [r3, #4]
 801a5ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a5f2:	4611      	mov	r1, r2
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	f000 f98d 	bl	801a914 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	691c      	ldr	r4, [r3, #16]
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	689b      	ldr	r3, [r3, #8]
 801a602:	461d      	mov	r5, r3
 801a604:	68f8      	ldr	r0, [r7, #12]
 801a606:	f7ff fab3 	bl	8019b70 <getNextPacketId>
 801a60a:	4603      	mov	r3, r0
 801a60c:	b29a      	uxth	r2, r3
 801a60e:	1dfb      	adds	r3, r7, #7
 801a610:	9302      	str	r3, [sp, #8]
 801a612:	f107 031c 	add.w	r3, r7, #28
 801a616:	9301      	str	r3, [sp, #4]
 801a618:	2301      	movs	r3, #1
 801a61a:	9300      	str	r3, [sp, #0]
 801a61c:	4613      	mov	r3, r2
 801a61e:	2200      	movs	r2, #0
 801a620:	4629      	mov	r1, r5
 801a622:	4620      	mov	r0, r4
 801a624:	f001 f849 	bl	801b6ba <MQTTSerialize_subscribe>
 801a628:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	dd3d      	ble.n	801a6ac <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 801a630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a634:	461a      	mov	r2, r3
 801a636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a638:	68f8      	ldr	r0, [r7, #12]
 801a63a:	f7ff fab2 	bl	8019ba2 <sendPacket>
 801a63e:	6378      	str	r0, [r7, #52]	; 0x34
 801a640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a642:	2b00      	cmp	r3, #0
 801a644:	d134      	bne.n	801a6b0 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 801a646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a64a:	461a      	mov	r2, r3
 801a64c:	2109      	movs	r1, #9
 801a64e:	68f8      	ldr	r0, [r7, #12]
 801a650:	f7ff fe7d 	bl	801a34e <waitfor>
 801a654:	4603      	mov	r3, r0
 801a656:	2b09      	cmp	r3, #9
 801a658:	d122      	bne.n	801a6a0 <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 801a65a:	2300      	movs	r3, #0
 801a65c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 801a65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a660:	2200      	movs	r2, #0
 801a662:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 801a664:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	695b      	ldr	r3, [r3, #20]
 801a66a:	68fa      	ldr	r2, [r7, #12]
 801a66c:	68d2      	ldr	r2, [r2, #12]
 801a66e:	4614      	mov	r4, r2
 801a670:	f107 0218 	add.w	r2, r7, #24
 801a674:	f107 0016 	add.w	r0, r7, #22
 801a678:	9401      	str	r4, [sp, #4]
 801a67a:	9300      	str	r3, [sp, #0]
 801a67c:	460b      	mov	r3, r1
 801a67e:	2101      	movs	r1, #1
 801a680:	f001 f897 	bl	801b7b2 <MQTTDeserialize_suback>
 801a684:	4603      	mov	r3, r0
 801a686:	2b01      	cmp	r3, #1
 801a688:	d113      	bne.n	801a6b2 <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 801a68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a68c:	781b      	ldrb	r3, [r3, #0]
 801a68e:	2b80      	cmp	r3, #128	; 0x80
 801a690:	d00f      	beq.n	801a6b2 <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 801a692:	683a      	ldr	r2, [r7, #0]
 801a694:	68b9      	ldr	r1, [r7, #8]
 801a696:	68f8      	ldr	r0, [r7, #12]
 801a698:	f7ff ff1f 	bl	801a4da <MQTTSetMessageHandler>
 801a69c:	6378      	str	r0, [r7, #52]	; 0x34
 801a69e:	e008      	b.n	801a6b2 <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 801a6a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a6a4:	637b      	str	r3, [r7, #52]	; 0x34
 801a6a6:	e004      	b.n	801a6b2 <MQTTSubscribeWithResults+0x104>
		    goto exit;
 801a6a8:	bf00      	nop
 801a6aa:	e002      	b.n	801a6b2 <MQTTSubscribeWithResults+0x104>
        goto exit;
 801a6ac:	bf00      	nop
 801a6ae:	e000      	b.n	801a6b2 <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 801a6b0:	bf00      	nop

exit:
    if (rc == FAILURE)
 801a6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a6b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a6b8:	d102      	bne.n	801a6c0 <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 801a6ba:	68f8      	ldr	r0, [r7, #12]
 801a6bc:	f7ff fd05 	bl	801a0ca <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	3738      	adds	r7, #56	; 0x38
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	bdb0      	pop	{r4, r5, r7, pc}

0801a6ca <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 801a6ca:	b580      	push	{r7, lr}
 801a6cc:	b088      	sub	sp, #32
 801a6ce:	af02      	add	r7, sp, #8
 801a6d0:	60f8      	str	r0, [r7, #12]
 801a6d2:	60b9      	str	r1, [r7, #8]
 801a6d4:	603b      	str	r3, [r7, #0]
 801a6d6:	4613      	mov	r3, r2
 801a6d8:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 801a6da:	79fa      	ldrb	r2, [r7, #7]
 801a6dc:	f107 0314 	add.w	r3, r7, #20
 801a6e0:	9300      	str	r3, [sp, #0]
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	68b9      	ldr	r1, [r7, #8]
 801a6e6:	68f8      	ldr	r0, [r7, #12]
 801a6e8:	f7ff ff61 	bl	801a5ae <MQTTSubscribeWithResults>
 801a6ec:	4603      	mov	r3, r0
}
 801a6ee:	4618      	mov	r0, r3
 801a6f0:	3718      	adds	r7, #24
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	bd80      	pop	{r7, pc}

0801a6f6 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801a6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6f8:	b097      	sub	sp, #92	; 0x5c
 801a6fa:	af08      	add	r7, sp, #32
 801a6fc:	60f8      	str	r0, [r7, #12]
 801a6fe:	60b9      	str	r1, [r7, #8]
 801a700:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801a702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a706:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 801a708:	2300      	movs	r3, #0
 801a70a:	61fb      	str	r3, [r7, #28]
 801a70c:	2300      	movs	r3, #0
 801a70e:	623b      	str	r3, [r7, #32]
 801a710:	2300      	movs	r3, #0
 801a712:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 801a714:	68bb      	ldr	r3, [r7, #8]
 801a716:	61fb      	str	r3, [r7, #28]
    int len = 0;
 801a718:	2300      	movs	r3, #0
 801a71a:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	6a1b      	ldr	r3, [r3, #32]
 801a720:	2b00      	cmp	r3, #0
 801a722:	f000 809b 	beq.w	801a85c <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 801a726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a72a:	4618      	mov	r0, r3
 801a72c:	f000 f934 	bl	801a998 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	685a      	ldr	r2, [r3, #4]
 801a734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a738:	4611      	mov	r1, r2
 801a73a:	4618      	mov	r0, r3
 801a73c:	f000 f8ea 	bl	801a914 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	781b      	ldrb	r3, [r3, #0]
 801a744:	2b01      	cmp	r3, #1
 801a746:	d003      	beq.n	801a750 <MQTTPublish+0x5a>
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	781b      	ldrb	r3, [r3, #0]
 801a74c:	2b02      	cmp	r3, #2
 801a74e:	d106      	bne.n	801a75e <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801a750:	68f8      	ldr	r0, [r7, #12]
 801a752:	f7ff fa0d 	bl	8019b70 <getNextPacketId>
 801a756:	4603      	mov	r3, r0
 801a758:	b29a      	uxth	r2, r3
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	691b      	ldr	r3, [r3, #16]
 801a762:	603b      	str	r3, [r7, #0]
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	689b      	ldr	r3, [r3, #8]
 801a768:	469c      	mov	ip, r3
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	781b      	ldrb	r3, [r3, #0]
 801a76e:	469e      	mov	lr, r3
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	785d      	ldrb	r5, [r3, #1]
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	689b      	ldr	r3, [r3, #8]
 801a77c:	687a      	ldr	r2, [r7, #4]
 801a77e:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801a780:	9206      	str	r2, [sp, #24]
 801a782:	9305      	str	r3, [sp, #20]
 801a784:	ac02      	add	r4, sp, #8
 801a786:	f107 031c 	add.w	r3, r7, #28
 801a78a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a78e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a792:	9601      	str	r6, [sp, #4]
 801a794:	9500      	str	r5, [sp, #0]
 801a796:	4673      	mov	r3, lr
 801a798:	2200      	movs	r2, #0
 801a79a:	4661      	mov	r1, ip
 801a79c:	6838      	ldr	r0, [r7, #0]
 801a79e:	f000 fe9a 	bl	801b4d6 <MQTTSerialize_publish>
 801a7a2:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801a7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	dd5a      	ble.n	801a860 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 801a7aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a7ae:	461a      	mov	r2, r3
 801a7b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a7b2:	68f8      	ldr	r0, [r7, #12]
 801a7b4:	f7ff f9f5 	bl	8019ba2 <sendPacket>
 801a7b8:	6378      	str	r0, [r7, #52]	; 0x34
 801a7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d151      	bne.n	801a864 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	781b      	ldrb	r3, [r3, #0]
 801a7c4:	2b01      	cmp	r3, #1
 801a7c6:	d122      	bne.n	801a80e <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 801a7c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a7cc:	461a      	mov	r2, r3
 801a7ce:	2104      	movs	r1, #4
 801a7d0:	68f8      	ldr	r0, [r7, #12]
 801a7d2:	f7ff fdbc 	bl	801a34e <waitfor>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	2b04      	cmp	r3, #4
 801a7da:	d114      	bne.n	801a806 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	695c      	ldr	r4, [r3, #20]
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	68db      	ldr	r3, [r3, #12]
 801a7e4:	f107 021a 	add.w	r2, r7, #26
 801a7e8:	f107 0119 	add.w	r1, r7, #25
 801a7ec:	f107 0018 	add.w	r0, r7, #24
 801a7f0:	9300      	str	r3, [sp, #0]
 801a7f2:	4623      	mov	r3, r4
 801a7f4:	f000 fbfd 	bl	801aff2 <MQTTDeserialize_ack>
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	2b01      	cmp	r3, #1
 801a7fc:	d035      	beq.n	801a86a <MQTTPublish+0x174>
                rc = FAILURE;
 801a7fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a802:	637b      	str	r3, [r7, #52]	; 0x34
 801a804:	e031      	b.n	801a86a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801a806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a80a:	637b      	str	r3, [r7, #52]	; 0x34
 801a80c:	e02d      	b.n	801a86a <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	781b      	ldrb	r3, [r3, #0]
 801a812:	2b02      	cmp	r3, #2
 801a814:	d128      	bne.n	801a868 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 801a816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a81a:	461a      	mov	r2, r3
 801a81c:	2107      	movs	r1, #7
 801a81e:	68f8      	ldr	r0, [r7, #12]
 801a820:	f7ff fd95 	bl	801a34e <waitfor>
 801a824:	4603      	mov	r3, r0
 801a826:	2b07      	cmp	r3, #7
 801a828:	d114      	bne.n	801a854 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	695c      	ldr	r4, [r3, #20]
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	68db      	ldr	r3, [r3, #12]
 801a832:	f107 0216 	add.w	r2, r7, #22
 801a836:	f107 0115 	add.w	r1, r7, #21
 801a83a:	f107 0014 	add.w	r0, r7, #20
 801a83e:	9300      	str	r3, [sp, #0]
 801a840:	4623      	mov	r3, r4
 801a842:	f000 fbd6 	bl	801aff2 <MQTTDeserialize_ack>
 801a846:	4603      	mov	r3, r0
 801a848:	2b01      	cmp	r3, #1
 801a84a:	d00e      	beq.n	801a86a <MQTTPublish+0x174>
                rc = FAILURE;
 801a84c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a850:	637b      	str	r3, [r7, #52]	; 0x34
 801a852:	e00a      	b.n	801a86a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801a854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a858:	637b      	str	r3, [r7, #52]	; 0x34
 801a85a:	e006      	b.n	801a86a <MQTTPublish+0x174>
		    goto exit;
 801a85c:	bf00      	nop
 801a85e:	e004      	b.n	801a86a <MQTTPublish+0x174>
        goto exit;
 801a860:	bf00      	nop
 801a862:	e002      	b.n	801a86a <MQTTPublish+0x174>
        goto exit; // there was a problem
 801a864:	bf00      	nop
 801a866:	e000      	b.n	801a86a <MQTTPublish+0x174>
    }

exit:
 801a868:	bf00      	nop
    if (rc == FAILURE)
 801a86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a86c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a870:	d102      	bne.n	801a878 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 801a872:	68f8      	ldr	r0, [r7, #12]
 801a874:	f7ff fc29 	bl	801a0ca <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801a878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a87a:	4618      	mov	r0, r3
 801a87c:	373c      	adds	r7, #60	; 0x3c
 801a87e:	46bd      	mov	sp, r7
 801a880:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a882 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 801a882:	b580      	push	{r7, lr}
 801a884:	b086      	sub	sp, #24
 801a886:	af00      	add	r7, sp, #0
 801a888:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801a88a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a88e:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 801a890:	2300      	movs	r3, #0
 801a892:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 801a894:	f107 0308 	add.w	r3, r7, #8
 801a898:	4618      	mov	r0, r3
 801a89a:	f000 f87d 	bl	801a998 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	685a      	ldr	r2, [r3, #4]
 801a8a2:	f107 0308 	add.w	r3, r7, #8
 801a8a6:	4611      	mov	r1, r2
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f000 f833 	bl	801a914 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	691a      	ldr	r2, [r3, #16]
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	689b      	ldr	r3, [r3, #8]
 801a8b6:	4619      	mov	r1, r3
 801a8b8:	4610      	mov	r0, r2
 801a8ba:	f000 fb0a 	bl	801aed2 <MQTTSerialize_disconnect>
 801a8be:	6138      	str	r0, [r7, #16]
    if (len > 0)
 801a8c0:	693b      	ldr	r3, [r7, #16]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	dd07      	ble.n	801a8d6 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 801a8c6:	f107 0308 	add.w	r3, r7, #8
 801a8ca:	461a      	mov	r2, r3
 801a8cc:	6939      	ldr	r1, [r7, #16]
 801a8ce:	6878      	ldr	r0, [r7, #4]
 801a8d0:	f7ff f967 	bl	8019ba2 <sendPacket>
 801a8d4:	6178      	str	r0, [r7, #20]
    MQTTCloseSession(c);
 801a8d6:	6878      	ldr	r0, [r7, #4]
 801a8d8:	f7ff fbf7 	bl	801a0ca <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801a8dc:	697b      	ldr	r3, [r7, #20]
}
 801a8de:	4618      	mov	r0, r3
 801a8e0:	3718      	adds	r7, #24
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	bd80      	pop	{r7, pc}
	...

0801a8e8 <TimerIsExpired>:
#define SERVER_IP4	227

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
 801a8e8:	b480      	push	{r7}
 801a8ea:	b085      	sub	sp, #20
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	685a      	ldr	r2, [r3, #4]
 801a8f4:	4b06      	ldr	r3, [pc, #24]	; (801a910 <TimerIsExpired+0x28>)
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	1ad3      	subs	r3, r2, r3
 801a8fa:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	0fdb      	lsrs	r3, r3, #31
 801a900:	b2db      	uxtb	r3, r3
}
 801a902:	4618      	mov	r0, r3
 801a904:	3714      	adds	r7, #20
 801a906:	46bd      	mov	sp, r7
 801a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a90c:	4770      	bx	lr
 801a90e:	bf00      	nop
 801a910:	200106ac 	.word	0x200106ac

0801a914 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 801a914:	b480      	push	{r7}
 801a916:	b083      	sub	sp, #12
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
 801a91c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801a91e:	4b06      	ldr	r3, [pc, #24]	; (801a938 <TimerCountdownMS+0x24>)
 801a920:	681a      	ldr	r2, [r3, #0]
 801a922:	683b      	ldr	r3, [r7, #0]
 801a924:	441a      	add	r2, r3
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	605a      	str	r2, [r3, #4]
}
 801a92a:	bf00      	nop
 801a92c:	370c      	adds	r7, #12
 801a92e:	46bd      	mov	sp, r7
 801a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a934:	4770      	bx	lr
 801a936:	bf00      	nop
 801a938:	200106ac 	.word	0x200106ac

0801a93c <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 801a93c:	b480      	push	{r7}
 801a93e:	b083      	sub	sp, #12
 801a940:	af00      	add	r7, sp, #0
 801a942:	6078      	str	r0, [r7, #4]
 801a944:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 801a946:	683b      	ldr	r3, [r7, #0]
 801a948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a94c:	fb02 f203 	mul.w	r2, r2, r3
 801a950:	4b05      	ldr	r3, [pc, #20]	; (801a968 <TimerCountdown+0x2c>)
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	441a      	add	r2, r3
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	605a      	str	r2, [r3, #4]
}
 801a95a:	bf00      	nop
 801a95c:	370c      	adds	r7, #12
 801a95e:	46bd      	mov	sp, r7
 801a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a964:	4770      	bx	lr
 801a966:	bf00      	nop
 801a968:	200106ac 	.word	0x200106ac

0801a96c <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 801a96c:	b480      	push	{r7}
 801a96e:	b085      	sub	sp, #20
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	685a      	ldr	r2, [r3, #4]
 801a978:	4b06      	ldr	r3, [pc, #24]	; (801a994 <TimerLeftMS+0x28>)
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	1ad3      	subs	r3, r2, r3
 801a97e:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801a980:	68fb      	ldr	r3, [r7, #12]
 801a982:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801a986:	4618      	mov	r0, r3
 801a988:	3714      	adds	r7, #20
 801a98a:	46bd      	mov	sp, r7
 801a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a990:	4770      	bx	lr
 801a992:	bf00      	nop
 801a994:	200106ac 	.word	0x200106ac

0801a998 <TimerInit>:

void TimerInit(Timer *timer) {
 801a998:	b480      	push	{r7}
 801a99a:	b083      	sub	sp, #12
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	605a      	str	r2, [r3, #4]
}
 801a9a6:	bf00      	nop
 801a9a8:	370c      	adds	r7, #12
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b0:	4770      	bx	lr
	...

0801a9b4 <NewNetwork>:

#ifdef MQTT_LWIP_SOCKET
void NewNetwork(Network *n) {
 801a9b4:	b480      	push	{r7}
 801a9b6:	b083      	sub	sp, #12
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	6078      	str	r0, [r7, #4]
	n->socket = 0; //clear
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	2200      	movs	r2, #0
 801a9c0:	601a      	str	r2, [r3, #0]
	n->mqttread = net_read; //receive function
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	4a06      	ldr	r2, [pc, #24]	; (801a9e0 <NewNetwork+0x2c>)
 801a9c6:	605a      	str	r2, [r3, #4]
	n->mqttwrite = net_write; //send function
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	4a06      	ldr	r2, [pc, #24]	; (801a9e4 <NewNetwork+0x30>)
 801a9cc:	609a      	str	r2, [r3, #8]
	n->disconnect = net_disconnect; //disconnection function
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	4a05      	ldr	r2, [pc, #20]	; (801a9e8 <NewNetwork+0x34>)
 801a9d2:	60da      	str	r2, [r3, #12]
}
 801a9d4:	bf00      	nop
 801a9d6:	370c      	adds	r7, #12
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9de:	4770      	bx	lr
 801a9e0:	0801aa89 	.word	0x0801aa89
 801a9e4:	0801aad9 	.word	0x0801aad9
 801a9e8:	0801aaff 	.word	0x0801aaff

0801a9ec <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 801a9ec:	b580      	push	{r7, lr}
 801a9ee:	b088      	sub	sp, #32
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	60f8      	str	r0, [r7, #12]
 801a9f4:	60b9      	str	r1, [r7, #8]
 801a9f6:	607a      	str	r2, [r7, #4]
	struct sockaddr_in server_addr;

	if(n->socket)
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d004      	beq.n	801aa0a <ConnectNetwork+0x1e>
	{
		close(n->socket);
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4618      	mov	r0, r3
 801aa06:	f7f0 fcf3 	bl	800b3f0 <lwip_close>
	}

	n->socket = socket(PF_INET, SOCK_STREAM, 0); //create socket
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	2101      	movs	r1, #1
 801aa0e:	2002      	movs	r0, #2
 801aa10:	f7f1 fa00 	bl	800be14 <lwip_socket>
 801aa14:	4602      	mov	r2, r0
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	601a      	str	r2, [r3, #0]
	if(n->socket < 0)
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	da05      	bge.n	801aa2e <ConnectNetwork+0x42>
	{
		n->socket = 0;
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	2200      	movs	r2, #0
 801aa26:	601a      	str	r2, [r3, #0]
		return -1;
 801aa28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa2c:	e028      	b.n	801aa80 <ConnectNetwork+0x94>
	}

	memset(&server_addr, 0, sizeof(struct sockaddr_in)); //broker address info
 801aa2e:	f107 0310 	add.w	r3, r7, #16
 801aa32:	2210      	movs	r2, #16
 801aa34:	2100      	movs	r1, #0
 801aa36:	4618      	mov	r0, r3
 801aa38:	f000 ff62 	bl	801b900 <memset>
	server_addr.sin_family = AF_INET;
 801aa3c:	2302      	movs	r3, #2
 801aa3e:	747b      	strb	r3, [r7, #17]
	server_addr.sin_addr.s_addr = inet_addr(ip);
 801aa40:	68b8      	ldr	r0, [r7, #8]
 801aa42:	f7fd fe54 	bl	80186ee <ipaddr_addr>
 801aa46:	4603      	mov	r3, r0
 801aa48:	617b      	str	r3, [r7, #20]
	server_addr.sin_port = htons(port);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	b29b      	uxth	r3, r3
 801aa4e:	4618      	mov	r0, r3
 801aa50:	f7f1 fe20 	bl	800c694 <lwip_htons>
 801aa54:	4603      	mov	r3, r0
 801aa56:	827b      	strh	r3, [r7, #18]

	if(connect(n->socket, (struct sockaddr*)&server_addr, sizeof(struct sockaddr_in)) < 0) //connect to the broker
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	f107 0110 	add.w	r1, r7, #16
 801aa60:	2210      	movs	r2, #16
 801aa62:	4618      	mov	r0, r3
 801aa64:	f7f0 fd1a 	bl	800b49c <lwip_connect>
 801aa68:	4603      	mov	r3, r0
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	da07      	bge.n	801aa7e <ConnectNetwork+0x92>
	{
		close(n->socket);
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	4618      	mov	r0, r3
 801aa74:	f7f0 fcbc 	bl	800b3f0 <lwip_close>
		return -1;
 801aa78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa7c:	e000      	b.n	801aa80 <ConnectNetwork+0x94>
	}
	return 0;
 801aa7e:	2300      	movs	r3, #0
}
 801aa80:	4618      	mov	r0, r3
 801aa82:	3720      	adds	r7, #32
 801aa84:	46bd      	mov	sp, r7
 801aa86:	bd80      	pop	{r7, pc}

0801aa88 <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 801aa88:	b580      	push	{r7, lr}
 801aa8a:	b086      	sub	sp, #24
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	60f8      	str	r0, [r7, #12]
 801aa90:	60b9      	str	r1, [r7, #8]
 801aa92:	607a      	str	r2, [r7, #4]
 801aa94:	603b      	str	r3, [r7, #0]
	int available;

	/* !!! LWIP_SO_RCVBUF must be enabled !!! */
	if(ioctl(n->socket, FIONREAD, &available) < 0) return -1; //check receive buffer
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	f107 0214 	add.w	r2, r7, #20
 801aa9e:	490d      	ldr	r1, [pc, #52]	; (801aad4 <net_read+0x4c>)
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	f7f1 fb9b 	bl	800c1dc <lwip_ioctl>
 801aaa6:	4603      	mov	r3, r0
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	da02      	bge.n	801aab2 <net_read+0x2a>
 801aaac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aab0:	e00c      	b.n	801aacc <net_read+0x44>

	if(available > 0)
 801aab2:	697b      	ldr	r3, [r7, #20]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	dd08      	ble.n	801aaca <net_read+0x42>
	{
		return recv(n->socket, buffer, len, 0);
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	6818      	ldr	r0, [r3, #0]
 801aabc:	687a      	ldr	r2, [r7, #4]
 801aabe:	2300      	movs	r3, #0
 801aac0:	68b9      	ldr	r1, [r7, #8]
 801aac2:	f7f1 f881 	bl	800bbc8 <lwip_recv>
 801aac6:	4603      	mov	r3, r0
 801aac8:	e000      	b.n	801aacc <net_read+0x44>
	}

	return 0;
 801aaca:	2300      	movs	r3, #0
}
 801aacc:	4618      	mov	r0, r3
 801aace:	3718      	adds	r7, #24
 801aad0:	46bd      	mov	sp, r7
 801aad2:	bd80      	pop	{r7, pc}
 801aad4:	4004667f 	.word	0x4004667f

0801aad8 <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 801aad8:	b580      	push	{r7, lr}
 801aada:	b084      	sub	sp, #16
 801aadc:	af00      	add	r7, sp, #0
 801aade:	60f8      	str	r0, [r7, #12]
 801aae0:	60b9      	str	r1, [r7, #8]
 801aae2:	607a      	str	r2, [r7, #4]
 801aae4:	603b      	str	r3, [r7, #0]
	return send(n->socket, buffer, len, 0);
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	6818      	ldr	r0, [r3, #0]
 801aaea:	687a      	ldr	r2, [r7, #4]
 801aaec:	2300      	movs	r3, #0
 801aaee:	68b9      	ldr	r1, [r7, #8]
 801aaf0:	f7f1 f880 	bl	800bbf4 <lwip_send>
 801aaf4:	4603      	mov	r3, r0
}
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	3710      	adds	r7, #16
 801aafa:	46bd      	mov	sp, r7
 801aafc:	bd80      	pop	{r7, pc}

0801aafe <net_disconnect>:

void net_disconnect(Network *n) {
 801aafe:	b580      	push	{r7, lr}
 801ab00:	b082      	sub	sp, #8
 801ab02:	af00      	add	r7, sp, #0
 801ab04:	6078      	str	r0, [r7, #4]
	close(n->socket);
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	f7f0 fc70 	bl	800b3f0 <lwip_close>
	n->socket = 0;
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	2200      	movs	r2, #0
 801ab14:	601a      	str	r2, [r3, #0]
}
 801ab16:	bf00      	nop
 801ab18:	3708      	adds	r7, #8
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	bd80      	pop	{r7, pc}

0801ab1e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801ab1e:	b590      	push	{r4, r7, lr}
 801ab20:	b085      	sub	sp, #20
 801ab22:	af00      	add	r7, sp, #0
 801ab24:	6078      	str	r0, [r7, #4]
	int len = 0;
 801ab26:	2300      	movs	r3, #0
 801ab28:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	7a1b      	ldrb	r3, [r3, #8]
 801ab2e:	2b03      	cmp	r3, #3
 801ab30:	d102      	bne.n	801ab38 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801ab32:	230c      	movs	r3, #12
 801ab34:	60fb      	str	r3, [r7, #12]
 801ab36:	e005      	b.n	801ab44 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	7a1b      	ldrb	r3, [r3, #8]
 801ab3c:	2b04      	cmp	r3, #4
 801ab3e:	d101      	bne.n	801ab44 <MQTTSerialize_connectLength+0x26>
		len = 10;
 801ab40:	230a      	movs	r3, #10
 801ab42:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	330c      	adds	r3, #12
 801ab48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab4c:	f000 fc53 	bl	801b3f6 <MQTTstrlen>
 801ab50:	4603      	mov	r3, r0
 801ab52:	3302      	adds	r3, #2
 801ab54:	68fa      	ldr	r2, [r7, #12]
 801ab56:	4413      	add	r3, r2
 801ab58:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	7edb      	ldrb	r3, [r3, #27]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d013      	beq.n	801ab8a <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	3324      	adds	r3, #36	; 0x24
 801ab66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab6a:	f000 fc44 	bl	801b3f6 <MQTTstrlen>
 801ab6e:	4603      	mov	r3, r0
 801ab70:	1c9c      	adds	r4, r3, #2
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	3330      	adds	r3, #48	; 0x30
 801ab76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab7a:	f000 fc3c 	bl	801b3f6 <MQTTstrlen>
 801ab7e:	4603      	mov	r3, r0
 801ab80:	4423      	add	r3, r4
 801ab82:	3302      	adds	r3, #2
 801ab84:	68fa      	ldr	r2, [r7, #12]
 801ab86:	4413      	add	r3, r2
 801ab88:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d103      	bne.n	801ab9a <MQTTSerialize_connectLength+0x7c>
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d00a      	beq.n	801abb0 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	3340      	adds	r3, #64	; 0x40
 801ab9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801aba2:	f000 fc28 	bl	801b3f6 <MQTTstrlen>
 801aba6:	4603      	mov	r3, r0
 801aba8:	3302      	adds	r3, #2
 801abaa:	68fa      	ldr	r2, [r7, #12]
 801abac:	4413      	add	r3, r2
 801abae:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d103      	bne.n	801abc0 <MQTTSerialize_connectLength+0xa2>
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d00a      	beq.n	801abd6 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	334c      	adds	r3, #76	; 0x4c
 801abc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801abc8:	f000 fc15 	bl	801b3f6 <MQTTstrlen>
 801abcc:	4603      	mov	r3, r0
 801abce:	3302      	adds	r3, #2
 801abd0:	68fa      	ldr	r2, [r7, #12]
 801abd2:	4413      	add	r3, r2
 801abd4:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 801abd6:	68fb      	ldr	r3, [r7, #12]
}
 801abd8:	4618      	mov	r0, r3
 801abda:	3714      	adds	r7, #20
 801abdc:	46bd      	mov	sp, r7
 801abde:	bd90      	pop	{r4, r7, pc}

0801abe0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b08a      	sub	sp, #40	; 0x28
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	60f8      	str	r0, [r7, #12]
 801abe8:	60b9      	str	r1, [r7, #8]
 801abea:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801abf0:	2300      	movs	r3, #0
 801abf2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 801abf4:	2300      	movs	r3, #0
 801abf6:	617b      	str	r3, [r7, #20]
	int len = 0;
 801abf8:	2300      	movs	r3, #0
 801abfa:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801abfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac00:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	f7ff ff8b 	bl	801ab1e <MQTTSerialize_connectLength>
 801ac08:	6238      	str	r0, [r7, #32]
 801ac0a:	6a38      	ldr	r0, [r7, #32]
 801ac0c:	f000 faa8 	bl	801b160 <MQTTPacket_len>
 801ac10:	4602      	mov	r2, r0
 801ac12:	68bb      	ldr	r3, [r7, #8]
 801ac14:	4293      	cmp	r3, r2
 801ac16:	da03      	bge.n	801ac20 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801ac18:	f06f 0301 	mvn.w	r3, #1
 801ac1c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801ac1e:	e0c2      	b.n	801ada6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801ac20:	2300      	movs	r3, #0
 801ac22:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 801ac24:	7e3b      	ldrb	r3, [r7, #24]
 801ac26:	2201      	movs	r2, #1
 801ac28:	f362 1307 	bfi	r3, r2, #4, #4
 801ac2c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801ac2e:	7e3a      	ldrb	r2, [r7, #24]
 801ac30:	f107 031c 	add.w	r3, r7, #28
 801ac34:	4611      	mov	r1, r2
 801ac36:	4618      	mov	r0, r3
 801ac38:	f000 fb21 	bl	801b27e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801ac3c:	69fb      	ldr	r3, [r7, #28]
 801ac3e:	6a39      	ldr	r1, [r7, #32]
 801ac40:	4618      	mov	r0, r3
 801ac42:	f000 fa21 	bl	801b088 <MQTTPacket_encode>
 801ac46:	4602      	mov	r2, r0
 801ac48:	69fb      	ldr	r3, [r7, #28]
 801ac4a:	4413      	add	r3, r2
 801ac4c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	7a1b      	ldrb	r3, [r3, #8]
 801ac52:	2b04      	cmp	r3, #4
 801ac54:	d10c      	bne.n	801ac70 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801ac56:	f107 031c 	add.w	r3, r7, #28
 801ac5a:	4955      	ldr	r1, [pc, #340]	; (801adb0 <MQTTSerialize_connect+0x1d0>)
 801ac5c:	4618      	mov	r0, r3
 801ac5e:	f000 fb4c 	bl	801b2fa <writeCString>
		writeChar(&ptr, (char) 4);
 801ac62:	f107 031c 	add.w	r3, r7, #28
 801ac66:	2104      	movs	r1, #4
 801ac68:	4618      	mov	r0, r3
 801ac6a:	f000 fb08 	bl	801b27e <writeChar>
 801ac6e:	e00b      	b.n	801ac88 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801ac70:	f107 031c 	add.w	r3, r7, #28
 801ac74:	494f      	ldr	r1, [pc, #316]	; (801adb4 <MQTTSerialize_connect+0x1d4>)
 801ac76:	4618      	mov	r0, r3
 801ac78:	f000 fb3f 	bl	801b2fa <writeCString>
		writeChar(&ptr, (char) 3);
 801ac7c:	f107 031c 	add.w	r3, r7, #28
 801ac80:	2103      	movs	r1, #3
 801ac82:	4618      	mov	r0, r3
 801ac84:	f000 fafb 	bl	801b27e <writeChar>
	}

	flags.all = 0;
 801ac88:	2300      	movs	r3, #0
 801ac8a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	7e9b      	ldrb	r3, [r3, #26]
 801ac90:	f003 0301 	and.w	r3, r3, #1
 801ac94:	b2da      	uxtb	r2, r3
 801ac96:	7d3b      	ldrb	r3, [r7, #20]
 801ac98:	f362 0341 	bfi	r3, r2, #1, #1
 801ac9c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	7edb      	ldrb	r3, [r3, #27]
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	bf14      	ite	ne
 801aca6:	2301      	movne	r3, #1
 801aca8:	2300      	moveq	r3, #0
 801acaa:	b2da      	uxtb	r2, r3
 801acac:	7d3b      	ldrb	r3, [r7, #20]
 801acae:	f362 0382 	bfi	r3, r2, #2, #1
 801acb2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 801acb4:	7d3b      	ldrb	r3, [r7, #20]
 801acb6:	f003 0304 	and.w	r3, r3, #4
 801acba:	b2db      	uxtb	r3, r3
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d013      	beq.n	801ace8 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801acc6:	f003 0303 	and.w	r3, r3, #3
 801acca:	b2da      	uxtb	r2, r3
 801accc:	7d3b      	ldrb	r3, [r7, #20]
 801acce:	f362 03c4 	bfi	r3, r2, #3, #2
 801acd2:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801acda:	f003 0301 	and.w	r3, r3, #1
 801acde:	b2da      	uxtb	r2, r3
 801ace0:	7d3b      	ldrb	r3, [r7, #20]
 801ace2:	f362 1345 	bfi	r3, r2, #5, #1
 801ace6:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acec:	2b00      	cmp	r3, #0
 801acee:	d103      	bne.n	801acf8 <MQTTSerialize_connect+0x118>
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d003      	beq.n	801ad00 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 801acf8:	7d3b      	ldrb	r3, [r7, #20]
 801acfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801acfe:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d103      	bne.n	801ad10 <MQTTSerialize_connect+0x130>
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	d003      	beq.n	801ad18 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801ad10:	7d3b      	ldrb	r3, [r7, #20]
 801ad12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad16:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 801ad18:	7d3a      	ldrb	r2, [r7, #20]
 801ad1a:	f107 031c 	add.w	r3, r7, #28
 801ad1e:	4611      	mov	r1, r2
 801ad20:	4618      	mov	r0, r3
 801ad22:	f000 faac 	bl	801b27e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	8b1b      	ldrh	r3, [r3, #24]
 801ad2a:	461a      	mov	r2, r3
 801ad2c:	f107 031c 	add.w	r3, r7, #28
 801ad30:	4611      	mov	r1, r2
 801ad32:	4618      	mov	r0, r3
 801ad34:	f000 fab8 	bl	801b2a8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	f107 001c 	add.w	r0, r7, #28
 801ad3e:	330c      	adds	r3, #12
 801ad40:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad42:	f000 faf9 	bl	801b338 <writeMQTTString>
	if (options->willFlag)
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	7edb      	ldrb	r3, [r3, #27]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d00d      	beq.n	801ad6a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	f107 001c 	add.w	r0, r7, #28
 801ad54:	3324      	adds	r3, #36	; 0x24
 801ad56:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad58:	f000 faee 	bl	801b338 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	f107 001c 	add.w	r0, r7, #28
 801ad62:	3330      	adds	r3, #48	; 0x30
 801ad64:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad66:	f000 fae7 	bl	801b338 <writeMQTTString>
	}
	if (flags.bits.username)
 801ad6a:	7d3b      	ldrb	r3, [r7, #20]
 801ad6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801ad70:	b2db      	uxtb	r3, r3
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d006      	beq.n	801ad84 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	f107 001c 	add.w	r0, r7, #28
 801ad7c:	3340      	adds	r3, #64	; 0x40
 801ad7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad80:	f000 fada 	bl	801b338 <writeMQTTString>
	if (flags.bits.password)
 801ad84:	7d3b      	ldrb	r3, [r7, #20]
 801ad86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad8a:	b2db      	uxtb	r3, r3
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d006      	beq.n	801ad9e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	f107 001c 	add.w	r0, r7, #28
 801ad96:	334c      	adds	r3, #76	; 0x4c
 801ad98:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad9a:	f000 facd 	bl	801b338 <writeMQTTString>

	rc = ptr - buf;
 801ad9e:	69fa      	ldr	r2, [r7, #28]
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	1ad3      	subs	r3, r2, r3
 801ada4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ada8:	4618      	mov	r0, r3
 801adaa:	3728      	adds	r7, #40	; 0x28
 801adac:	46bd      	mov	sp, r7
 801adae:	bd80      	pop	{r7, pc}
 801adb0:	080209f8 	.word	0x080209f8
 801adb4:	08020a00 	.word	0x08020a00

0801adb8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801adb8:	b580      	push	{r7, lr}
 801adba:	b08a      	sub	sp, #40	; 0x28
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	60f8      	str	r0, [r7, #12]
 801adc0:	60b9      	str	r1, [r7, #8]
 801adc2:	607a      	str	r2, [r7, #4]
 801adc4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801adc6:	2300      	movs	r3, #0
 801adc8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801adce:	2300      	movs	r3, #0
 801add0:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801add2:	2300      	movs	r3, #0
 801add4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 801add6:	2300      	movs	r3, #0
 801add8:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801adda:	f107 0318 	add.w	r3, r7, #24
 801adde:	4618      	mov	r0, r3
 801ade0:	f000 fa39 	bl	801b256 <readChar>
 801ade4:	4603      	mov	r3, r0
 801ade6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 801ade8:	7f3b      	ldrb	r3, [r7, #28]
 801adea:	f023 030f 	bic.w	r3, r3, #15
 801adee:	b2db      	uxtb	r3, r3
 801adf0:	2b20      	cmp	r3, #32
 801adf2:	d12e      	bne.n	801ae52 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801adf4:	69bb      	ldr	r3, [r7, #24]
 801adf6:	f107 0214 	add.w	r2, r7, #20
 801adfa:	4611      	mov	r1, r2
 801adfc:	4618      	mov	r0, r3
 801adfe:	f000 f9f9 	bl	801b1f4 <MQTTPacket_decodeBuf>
 801ae02:	6278      	str	r0, [r7, #36]	; 0x24
 801ae04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ae06:	69bb      	ldr	r3, [r7, #24]
 801ae08:	4413      	add	r3, r2
 801ae0a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801ae0c:	69bb      	ldr	r3, [r7, #24]
 801ae0e:	697a      	ldr	r2, [r7, #20]
 801ae10:	4413      	add	r3, r2
 801ae12:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801ae14:	69bb      	ldr	r3, [r7, #24]
 801ae16:	6a3a      	ldr	r2, [r7, #32]
 801ae18:	1ad3      	subs	r3, r2, r3
 801ae1a:	2b01      	cmp	r3, #1
 801ae1c:	dd1b      	ble.n	801ae56 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801ae1e:	f107 0318 	add.w	r3, r7, #24
 801ae22:	4618      	mov	r0, r3
 801ae24:	f000 fa17 	bl	801b256 <readChar>
 801ae28:	4603      	mov	r3, r0
 801ae2a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801ae2c:	7c3b      	ldrb	r3, [r7, #16]
 801ae2e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ae32:	b2db      	uxtb	r3, r3
 801ae34:	461a      	mov	r2, r3
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801ae3a:	f107 0318 	add.w	r3, r7, #24
 801ae3e:	4618      	mov	r0, r3
 801ae40:	f000 fa09 	bl	801b256 <readChar>
 801ae44:	4603      	mov	r3, r0
 801ae46:	461a      	mov	r2, r3
 801ae48:	68bb      	ldr	r3, [r7, #8]
 801ae4a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801ae4c:	2301      	movs	r3, #1
 801ae4e:	627b      	str	r3, [r7, #36]	; 0x24
 801ae50:	e002      	b.n	801ae58 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801ae52:	bf00      	nop
 801ae54:	e000      	b.n	801ae58 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801ae56:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	3728      	adds	r7, #40	; 0x28
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	bd80      	pop	{r7, pc}

0801ae62 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801ae62:	b580      	push	{r7, lr}
 801ae64:	b088      	sub	sp, #32
 801ae66:	af00      	add	r7, sp, #0
 801ae68:	60f8      	str	r0, [r7, #12]
 801ae6a:	60b9      	str	r1, [r7, #8]
 801ae6c:	4613      	mov	r3, r2
 801ae6e:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801ae70:	2300      	movs	r3, #0
 801ae72:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801ae74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae78:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801ae7e:	68bb      	ldr	r3, [r7, #8]
 801ae80:	2b01      	cmp	r3, #1
 801ae82:	dc03      	bgt.n	801ae8c <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801ae84:	f06f 0301 	mvn.w	r3, #1
 801ae88:	61fb      	str	r3, [r7, #28]
		goto exit;
 801ae8a:	e01d      	b.n	801aec8 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801ae90:	79fb      	ldrb	r3, [r7, #7]
 801ae92:	f003 030f 	and.w	r3, r3, #15
 801ae96:	b2da      	uxtb	r2, r3
 801ae98:	7e3b      	ldrb	r3, [r7, #24]
 801ae9a:	f362 1307 	bfi	r3, r2, #4, #4
 801ae9e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801aea0:	7e3a      	ldrb	r2, [r7, #24]
 801aea2:	f107 0314 	add.w	r3, r7, #20
 801aea6:	4611      	mov	r1, r2
 801aea8:	4618      	mov	r0, r3
 801aeaa:	f000 f9e8 	bl	801b27e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801aeae:	697b      	ldr	r3, [r7, #20]
 801aeb0:	2100      	movs	r1, #0
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	f000 f8e8 	bl	801b088 <MQTTPacket_encode>
 801aeb8:	4602      	mov	r2, r0
 801aeba:	697b      	ldr	r3, [r7, #20]
 801aebc:	4413      	add	r3, r2
 801aebe:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801aec0:	697a      	ldr	r2, [r7, #20]
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	1ad3      	subs	r3, r2, r3
 801aec6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801aec8:	69fb      	ldr	r3, [r7, #28]
}
 801aeca:	4618      	mov	r0, r3
 801aecc:	3720      	adds	r7, #32
 801aece:	46bd      	mov	sp, r7
 801aed0:	bd80      	pop	{r7, pc}

0801aed2 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 801aed2:	b580      	push	{r7, lr}
 801aed4:	b082      	sub	sp, #8
 801aed6:	af00      	add	r7, sp, #0
 801aed8:	6078      	str	r0, [r7, #4]
 801aeda:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 801aedc:	220e      	movs	r2, #14
 801aede:	6839      	ldr	r1, [r7, #0]
 801aee0:	6878      	ldr	r0, [r7, #4]
 801aee2:	f7ff ffbe 	bl	801ae62 <MQTTSerialize_zero>
 801aee6:	4603      	mov	r3, r0
}
 801aee8:	4618      	mov	r0, r3
 801aeea:	3708      	adds	r7, #8
 801aeec:	46bd      	mov	sp, r7
 801aeee:	bd80      	pop	{r7, pc}

0801aef0 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b082      	sub	sp, #8
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]
 801aef8:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801aefa:	220c      	movs	r2, #12
 801aefc:	6839      	ldr	r1, [r7, #0]
 801aefe:	6878      	ldr	r0, [r7, #4]
 801af00:	f7ff ffaf 	bl	801ae62 <MQTTSerialize_zero>
 801af04:	4603      	mov	r3, r0
}
 801af06:	4618      	mov	r0, r3
 801af08:	3708      	adds	r7, #8
 801af0a:	46bd      	mov	sp, r7
 801af0c:	bd80      	pop	{r7, pc}

0801af0e <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801af0e:	b580      	push	{r7, lr}
 801af10:	b08a      	sub	sp, #40	; 0x28
 801af12:	af00      	add	r7, sp, #0
 801af14:	60f8      	str	r0, [r7, #12]
 801af16:	60b9      	str	r1, [r7, #8]
 801af18:	607a      	str	r2, [r7, #4]
 801af1a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801af1c:	2300      	movs	r3, #0
 801af1e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801af20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af22:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801af24:	2300      	movs	r3, #0
 801af26:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801af28:	2300      	movs	r3, #0
 801af2a:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 801af2c:	2300      	movs	r3, #0
 801af2e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801af30:	f107 0318 	add.w	r3, r7, #24
 801af34:	4618      	mov	r0, r3
 801af36:	f000 f98e 	bl	801b256 <readChar>
 801af3a:	4603      	mov	r3, r0
 801af3c:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801af3e:	7f3b      	ldrb	r3, [r7, #28]
 801af40:	f023 030f 	bic.w	r3, r3, #15
 801af44:	b2db      	uxtb	r3, r3
 801af46:	2b30      	cmp	r3, #48	; 0x30
 801af48:	d14b      	bne.n	801afe2 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801af4a:	7f3b      	ldrb	r3, [r7, #28]
 801af4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801af50:	b2db      	uxtb	r3, r3
 801af52:	461a      	mov	r2, r3
 801af54:	68fb      	ldr	r3, [r7, #12]
 801af56:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 801af58:	7f3b      	ldrb	r3, [r7, #28]
 801af5a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801af5e:	b2db      	uxtb	r3, r3
 801af60:	461a      	mov	r2, r3
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 801af66:	7f3b      	ldrb	r3, [r7, #28]
 801af68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801af6c:	b2db      	uxtb	r3, r3
 801af6e:	461a      	mov	r2, r3
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801af74:	69bb      	ldr	r3, [r7, #24]
 801af76:	f107 0214 	add.w	r2, r7, #20
 801af7a:	4611      	mov	r1, r2
 801af7c:	4618      	mov	r0, r3
 801af7e:	f000 f939 	bl	801b1f4 <MQTTPacket_decodeBuf>
 801af82:	6278      	str	r0, [r7, #36]	; 0x24
 801af84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af86:	69bb      	ldr	r3, [r7, #24]
 801af88:	4413      	add	r3, r2
 801af8a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801af8c:	69bb      	ldr	r3, [r7, #24]
 801af8e:	697a      	ldr	r2, [r7, #20]
 801af90:	4413      	add	r3, r2
 801af92:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801af94:	f107 0318 	add.w	r3, r7, #24
 801af98:	6a3a      	ldr	r2, [r7, #32]
 801af9a:	4619      	mov	r1, r3
 801af9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af9e:	f000 f9f9 	bl	801b394 <readMQTTLenString>
 801afa2:	4603      	mov	r3, r0
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d01e      	beq.n	801afe6 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801afa8:	69bb      	ldr	r3, [r7, #24]
 801afaa:	6a3a      	ldr	r2, [r7, #32]
 801afac:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801afae:	2b00      	cmp	r3, #0
 801afb0:	db19      	blt.n	801afe6 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801afb2:	68bb      	ldr	r3, [r7, #8]
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	dd08      	ble.n	801afcc <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801afba:	f107 0318 	add.w	r3, r7, #24
 801afbe:	4618      	mov	r0, r3
 801afc0:	f000 f92e 	bl	801b220 <readInt>
 801afc4:	4603      	mov	r3, r0
 801afc6:	b29a      	uxth	r2, r3
 801afc8:	683b      	ldr	r3, [r7, #0]
 801afca:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801afcc:	69bb      	ldr	r3, [r7, #24]
 801afce:	6a3a      	ldr	r2, [r7, #32]
 801afd0:	1ad2      	subs	r2, r2, r3
 801afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afd4:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 801afd6:	69ba      	ldr	r2, [r7, #24]
 801afd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801afda:	601a      	str	r2, [r3, #0]
	rc = 1;
 801afdc:	2301      	movs	r3, #1
 801afde:	627b      	str	r3, [r7, #36]	; 0x24
 801afe0:	e002      	b.n	801afe8 <MQTTDeserialize_publish+0xda>
		goto exit;
 801afe2:	bf00      	nop
 801afe4:	e000      	b.n	801afe8 <MQTTDeserialize_publish+0xda>
		goto exit;
 801afe6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801afea:	4618      	mov	r0, r3
 801afec:	3728      	adds	r7, #40	; 0x28
 801afee:	46bd      	mov	sp, r7
 801aff0:	bd80      	pop	{r7, pc}

0801aff2 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801aff2:	b580      	push	{r7, lr}
 801aff4:	b08a      	sub	sp, #40	; 0x28
 801aff6:	af00      	add	r7, sp, #0
 801aff8:	60f8      	str	r0, [r7, #12]
 801affa:	60b9      	str	r1, [r7, #8]
 801affc:	607a      	str	r2, [r7, #4]
 801affe:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801b000:	2300      	movs	r3, #0
 801b002:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801b004:	683b      	ldr	r3, [r7, #0]
 801b006:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801b008:	2300      	movs	r3, #0
 801b00a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801b00c:	2300      	movs	r3, #0
 801b00e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801b010:	f107 0318 	add.w	r3, r7, #24
 801b014:	4618      	mov	r0, r3
 801b016:	f000 f91e 	bl	801b256 <readChar>
 801b01a:	4603      	mov	r3, r0
 801b01c:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801b01e:	7f3b      	ldrb	r3, [r7, #28]
 801b020:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b024:	b2db      	uxtb	r3, r3
 801b026:	461a      	mov	r2, r3
 801b028:	68bb      	ldr	r3, [r7, #8]
 801b02a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801b02c:	7f3b      	ldrb	r3, [r7, #28]
 801b02e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801b032:	b2db      	uxtb	r3, r3
 801b034:	461a      	mov	r2, r3
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801b03a:	69bb      	ldr	r3, [r7, #24]
 801b03c:	f107 0214 	add.w	r2, r7, #20
 801b040:	4611      	mov	r1, r2
 801b042:	4618      	mov	r0, r3
 801b044:	f000 f8d6 	bl	801b1f4 <MQTTPacket_decodeBuf>
 801b048:	6278      	str	r0, [r7, #36]	; 0x24
 801b04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b04c:	69bb      	ldr	r3, [r7, #24]
 801b04e:	4413      	add	r3, r2
 801b050:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801b052:	69bb      	ldr	r3, [r7, #24]
 801b054:	697a      	ldr	r2, [r7, #20]
 801b056:	4413      	add	r3, r2
 801b058:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801b05a:	69bb      	ldr	r3, [r7, #24]
 801b05c:	6a3a      	ldr	r2, [r7, #32]
 801b05e:	1ad3      	subs	r3, r2, r3
 801b060:	2b01      	cmp	r3, #1
 801b062:	dd0b      	ble.n	801b07c <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 801b064:	f107 0318 	add.w	r3, r7, #24
 801b068:	4618      	mov	r0, r3
 801b06a:	f000 f8d9 	bl	801b220 <readInt>
 801b06e:	4603      	mov	r3, r0
 801b070:	b29a      	uxth	r2, r3
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	801a      	strh	r2, [r3, #0]

	rc = 1;
 801b076:	2301      	movs	r3, #1
 801b078:	627b      	str	r3, [r7, #36]	; 0x24
 801b07a:	e000      	b.n	801b07e <MQTTDeserialize_ack+0x8c>
		goto exit;
 801b07c:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b080:	4618      	mov	r0, r3
 801b082:	3728      	adds	r7, #40	; 0x28
 801b084:	46bd      	mov	sp, r7
 801b086:	bd80      	pop	{r7, pc}

0801b088 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 801b088:	b480      	push	{r7}
 801b08a:	b085      	sub	sp, #20
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
 801b090:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801b092:	2300      	movs	r3, #0
 801b094:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	425a      	negs	r2, r3
 801b09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b09e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b0a2:	bf58      	it	pl
 801b0a4:	4253      	negpl	r3, r2
 801b0a6:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	da00      	bge.n	801b0b0 <MQTTPacket_encode+0x28>
 801b0ae:	337f      	adds	r3, #127	; 0x7f
 801b0b0:	11db      	asrs	r3, r3, #7
 801b0b2:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801b0b4:	683b      	ldr	r3, [r7, #0]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	dd03      	ble.n	801b0c2 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 801b0ba:	7afb      	ldrb	r3, [r7, #11]
 801b0bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b0c0:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	1c5a      	adds	r2, r3, #1
 801b0c6:	60fa      	str	r2, [r7, #12]
 801b0c8:	461a      	mov	r2, r3
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	4413      	add	r3, r2
 801b0ce:	7afa      	ldrb	r2, [r7, #11]
 801b0d0:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801b0d2:	683b      	ldr	r3, [r7, #0]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	dcde      	bgt.n	801b096 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 801b0d8:	68fb      	ldr	r3, [r7, #12]
}
 801b0da:	4618      	mov	r0, r3
 801b0dc:	3714      	adds	r7, #20
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0e4:	4770      	bx	lr

0801b0e6 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 801b0e6:	b580      	push	{r7, lr}
 801b0e8:	b086      	sub	sp, #24
 801b0ea:	af00      	add	r7, sp, #0
 801b0ec:	6078      	str	r0, [r7, #4]
 801b0ee:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801b0f0:	2301      	movs	r3, #1
 801b0f2:	617b      	str	r3, [r7, #20]
	int len = 0;
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 801b0f8:	683b      	ldr	r3, [r7, #0]
 801b0fa:	2200      	movs	r2, #0
 801b0fc:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801b0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b102:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801b104:	693b      	ldr	r3, [r7, #16]
 801b106:	3301      	adds	r3, #1
 801b108:	613b      	str	r3, [r7, #16]
 801b10a:	693b      	ldr	r3, [r7, #16]
 801b10c:	2b04      	cmp	r3, #4
 801b10e:	dd03      	ble.n	801b118 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801b110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b114:	60fb      	str	r3, [r7, #12]
			goto exit;
 801b116:	e01d      	b.n	801b154 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801b118:	f107 020b 	add.w	r2, r7, #11
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	2101      	movs	r1, #1
 801b120:	4610      	mov	r0, r2
 801b122:	4798      	blx	r3
 801b124:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801b126:	68fb      	ldr	r3, [r7, #12]
 801b128:	2b01      	cmp	r3, #1
 801b12a:	d112      	bne.n	801b152 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801b12c:	683b      	ldr	r3, [r7, #0]
 801b12e:	681a      	ldr	r2, [r3, #0]
 801b130:	7afb      	ldrb	r3, [r7, #11]
 801b132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b136:	6979      	ldr	r1, [r7, #20]
 801b138:	fb01 f303 	mul.w	r3, r1, r3
 801b13c:	441a      	add	r2, r3
 801b13e:	683b      	ldr	r3, [r7, #0]
 801b140:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801b142:	697b      	ldr	r3, [r7, #20]
 801b144:	01db      	lsls	r3, r3, #7
 801b146:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801b148:	7afb      	ldrb	r3, [r7, #11]
 801b14a:	b25b      	sxtb	r3, r3
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	dbd6      	blt.n	801b0fe <MQTTPacket_decode+0x18>
exit:
 801b150:	e000      	b.n	801b154 <MQTTPacket_decode+0x6e>
			goto exit;
 801b152:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801b154:	693b      	ldr	r3, [r7, #16]
}
 801b156:	4618      	mov	r0, r3
 801b158:	3718      	adds	r7, #24
 801b15a:	46bd      	mov	sp, r7
 801b15c:	bd80      	pop	{r7, pc}
	...

0801b160 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801b160:	b480      	push	{r7}
 801b162:	b083      	sub	sp, #12
 801b164:	af00      	add	r7, sp, #0
 801b166:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	3301      	adds	r3, #1
 801b16c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	2b7f      	cmp	r3, #127	; 0x7f
 801b172:	dc03      	bgt.n	801b17c <MQTTPacket_len+0x1c>
		rem_len += 1;
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	3301      	adds	r3, #1
 801b178:	607b      	str	r3, [r7, #4]
 801b17a:	e012      	b.n	801b1a2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b182:	da03      	bge.n	801b18c <MQTTPacket_len+0x2c>
		rem_len += 2;
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	3302      	adds	r3, #2
 801b188:	607b      	str	r3, [r7, #4]
 801b18a:	e00a      	b.n	801b1a2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	4a08      	ldr	r2, [pc, #32]	; (801b1b0 <MQTTPacket_len+0x50>)
 801b190:	4293      	cmp	r3, r2
 801b192:	dc03      	bgt.n	801b19c <MQTTPacket_len+0x3c>
		rem_len += 3;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	3303      	adds	r3, #3
 801b198:	607b      	str	r3, [r7, #4]
 801b19a:	e002      	b.n	801b1a2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	3304      	adds	r3, #4
 801b1a0:	607b      	str	r3, [r7, #4]
	return rem_len;
 801b1a2:	687b      	ldr	r3, [r7, #4]
}
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	370c      	adds	r7, #12
 801b1a8:	46bd      	mov	sp, r7
 801b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ae:	4770      	bx	lr
 801b1b0:	001ffffe 	.word	0x001ffffe

0801b1b4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801b1b4:	b480      	push	{r7}
 801b1b6:	b085      	sub	sp, #20
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	6078      	str	r0, [r7, #4]
 801b1bc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801b1be:	2300      	movs	r3, #0
 801b1c0:	60fb      	str	r3, [r7, #12]
 801b1c2:	e00a      	b.n	801b1da <bufchar+0x26>
		*c = *bufptr++;
 801b1c4:	4b0a      	ldr	r3, [pc, #40]	; (801b1f0 <bufchar+0x3c>)
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	1c5a      	adds	r2, r3, #1
 801b1ca:	4909      	ldr	r1, [pc, #36]	; (801b1f0 <bufchar+0x3c>)
 801b1cc:	600a      	str	r2, [r1, #0]
 801b1ce:	781a      	ldrb	r2, [r3, #0]
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	3301      	adds	r3, #1
 801b1d8:	60fb      	str	r3, [r7, #12]
 801b1da:	68fa      	ldr	r2, [r7, #12]
 801b1dc:	683b      	ldr	r3, [r7, #0]
 801b1de:	429a      	cmp	r2, r3
 801b1e0:	dbf0      	blt.n	801b1c4 <bufchar+0x10>
	return count;
 801b1e2:	683b      	ldr	r3, [r7, #0]
}
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	3714      	adds	r7, #20
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ee:	4770      	bx	lr
 801b1f0:	20008c2c 	.word	0x20008c2c

0801b1f4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b082      	sub	sp, #8
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
 801b1fc:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801b1fe:	4a06      	ldr	r2, [pc, #24]	; (801b218 <MQTTPacket_decodeBuf+0x24>)
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801b204:	6839      	ldr	r1, [r7, #0]
 801b206:	4805      	ldr	r0, [pc, #20]	; (801b21c <MQTTPacket_decodeBuf+0x28>)
 801b208:	f7ff ff6d 	bl	801b0e6 <MQTTPacket_decode>
 801b20c:	4603      	mov	r3, r0
}
 801b20e:	4618      	mov	r0, r3
 801b210:	3708      	adds	r7, #8
 801b212:	46bd      	mov	sp, r7
 801b214:	bd80      	pop	{r7, pc}
 801b216:	bf00      	nop
 801b218:	20008c2c 	.word	0x20008c2c
 801b21c:	0801b1b5 	.word	0x0801b1b5

0801b220 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801b220:	b480      	push	{r7}
 801b222:	b085      	sub	sp, #20
 801b224:	af00      	add	r7, sp, #0
 801b226:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	781b      	ldrb	r3, [r3, #0]
 801b232:	021b      	lsls	r3, r3, #8
 801b234:	68fa      	ldr	r2, [r7, #12]
 801b236:	3201      	adds	r2, #1
 801b238:	7812      	ldrb	r2, [r2, #0]
 801b23a:	4413      	add	r3, r2
 801b23c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	1c9a      	adds	r2, r3, #2
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	601a      	str	r2, [r3, #0]
	return len;
 801b248:	68bb      	ldr	r3, [r7, #8]
}
 801b24a:	4618      	mov	r0, r3
 801b24c:	3714      	adds	r7, #20
 801b24e:	46bd      	mov	sp, r7
 801b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b254:	4770      	bx	lr

0801b256 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801b256:	b480      	push	{r7}
 801b258:	b085      	sub	sp, #20
 801b25a:	af00      	add	r7, sp, #0
 801b25c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	781b      	ldrb	r3, [r3, #0]
 801b264:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	681b      	ldr	r3, [r3, #0]
 801b26a:	1c5a      	adds	r2, r3, #1
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	601a      	str	r2, [r3, #0]
	return c;
 801b270:	7bfb      	ldrb	r3, [r7, #15]
}
 801b272:	4618      	mov	r0, r3
 801b274:	3714      	adds	r7, #20
 801b276:	46bd      	mov	sp, r7
 801b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b27c:	4770      	bx	lr

0801b27e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801b27e:	b480      	push	{r7}
 801b280:	b083      	sub	sp, #12
 801b282:	af00      	add	r7, sp, #0
 801b284:	6078      	str	r0, [r7, #4]
 801b286:	460b      	mov	r3, r1
 801b288:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	78fa      	ldrb	r2, [r7, #3]
 801b290:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	1c5a      	adds	r2, r3, #1
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	601a      	str	r2, [r3, #0]
}
 801b29c:	bf00      	nop
 801b29e:	370c      	adds	r7, #12
 801b2a0:	46bd      	mov	sp, r7
 801b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a6:	4770      	bx	lr

0801b2a8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801b2a8:	b480      	push	{r7}
 801b2aa:	b083      	sub	sp, #12
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	6078      	str	r0, [r7, #4]
 801b2b0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801b2b2:	683b      	ldr	r3, [r7, #0]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	da00      	bge.n	801b2ba <writeInt+0x12>
 801b2b8:	33ff      	adds	r3, #255	; 0xff
 801b2ba:	121b      	asrs	r3, r3, #8
 801b2bc:	461a      	mov	r2, r3
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	b2d2      	uxtb	r2, r2
 801b2c4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	1c5a      	adds	r2, r3, #1
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801b2d0:	683b      	ldr	r3, [r7, #0]
 801b2d2:	425a      	negs	r2, r3
 801b2d4:	b2db      	uxtb	r3, r3
 801b2d6:	b2d2      	uxtb	r2, r2
 801b2d8:	bf58      	it	pl
 801b2da:	4253      	negpl	r3, r2
 801b2dc:	687a      	ldr	r2, [r7, #4]
 801b2de:	6812      	ldr	r2, [r2, #0]
 801b2e0:	b2db      	uxtb	r3, r3
 801b2e2:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	1c5a      	adds	r2, r3, #1
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	601a      	str	r2, [r3, #0]
}
 801b2ee:	bf00      	nop
 801b2f0:	370c      	adds	r7, #12
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f8:	4770      	bx	lr

0801b2fa <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801b2fa:	b580      	push	{r7, lr}
 801b2fc:	b084      	sub	sp, #16
 801b2fe:	af00      	add	r7, sp, #0
 801b300:	6078      	str	r0, [r7, #4]
 801b302:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801b304:	6838      	ldr	r0, [r7, #0]
 801b306:	f7e4 ffa5 	bl	8000254 <strlen>
 801b30a:	4603      	mov	r3, r0
 801b30c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801b30e:	68f9      	ldr	r1, [r7, #12]
 801b310:	6878      	ldr	r0, [r7, #4]
 801b312:	f7ff ffc9 	bl	801b2a8 <writeInt>
	memcpy(*pptr, string, len);
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	68fa      	ldr	r2, [r7, #12]
 801b31c:	6839      	ldr	r1, [r7, #0]
 801b31e:	4618      	mov	r0, r3
 801b320:	f000 fae0 	bl	801b8e4 <memcpy>
	*pptr += len;
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681a      	ldr	r2, [r3, #0]
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	441a      	add	r2, r3
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	601a      	str	r2, [r3, #0]
}
 801b330:	bf00      	nop
 801b332:	3710      	adds	r7, #16
 801b334:	46bd      	mov	sp, r7
 801b336:	bd80      	pop	{r7, pc}

0801b338 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b084      	sub	sp, #16
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	60f8      	str	r0, [r7, #12]
 801b340:	4638      	mov	r0, r7
 801b342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	dd12      	ble.n	801b372 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	4619      	mov	r1, r3
 801b350:	68f8      	ldr	r0, [r7, #12]
 801b352:	f7ff ffa9 	bl	801b2a8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801b356:	68fb      	ldr	r3, [r7, #12]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	68b9      	ldr	r1, [r7, #8]
 801b35c:	687a      	ldr	r2, [r7, #4]
 801b35e:	4618      	mov	r0, r3
 801b360:	f000 fac0 	bl	801b8e4 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	687a      	ldr	r2, [r7, #4]
 801b36a:	441a      	add	r2, r3
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801b370:	e00c      	b.n	801b38c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	2b00      	cmp	r3, #0
 801b376:	d005      	beq.n	801b384 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801b378:	683b      	ldr	r3, [r7, #0]
 801b37a:	4619      	mov	r1, r3
 801b37c:	68f8      	ldr	r0, [r7, #12]
 801b37e:	f7ff ffbc 	bl	801b2fa <writeCString>
}
 801b382:	e003      	b.n	801b38c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801b384:	2100      	movs	r1, #0
 801b386:	68f8      	ldr	r0, [r7, #12]
 801b388:	f7ff ff8e 	bl	801b2a8 <writeInt>
}
 801b38c:	bf00      	nop
 801b38e:	3710      	adds	r7, #16
 801b390:	46bd      	mov	sp, r7
 801b392:	bd80      	pop	{r7, pc}

0801b394 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801b394:	b580      	push	{r7, lr}
 801b396:	b086      	sub	sp, #24
 801b398:	af00      	add	r7, sp, #0
 801b39a:	60f8      	str	r0, [r7, #12]
 801b39c:	60b9      	str	r1, [r7, #8]
 801b39e:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801b3a4:	68bb      	ldr	r3, [r7, #8]
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	687a      	ldr	r2, [r7, #4]
 801b3aa:	1ad3      	subs	r3, r2, r3
 801b3ac:	2b01      	cmp	r3, #1
 801b3ae:	dd1a      	ble.n	801b3e6 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801b3b0:	68b8      	ldr	r0, [r7, #8]
 801b3b2:	f7ff ff35 	bl	801b220 <readInt>
 801b3b6:	4602      	mov	r2, r0
 801b3b8:	68fb      	ldr	r3, [r7, #12]
 801b3ba:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801b3bc:	68bb      	ldr	r3, [r7, #8]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	68fa      	ldr	r2, [r7, #12]
 801b3c2:	6852      	ldr	r2, [r2, #4]
 801b3c4:	4413      	add	r3, r2
 801b3c6:	687a      	ldr	r2, [r7, #4]
 801b3c8:	429a      	cmp	r2, r3
 801b3ca:	d30c      	bcc.n	801b3e6 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801b3cc:	68bb      	ldr	r3, [r7, #8]
 801b3ce:	681a      	ldr	r2, [r3, #0]
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801b3d4:	68bb      	ldr	r3, [r7, #8]
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	68fa      	ldr	r2, [r7, #12]
 801b3da:	6852      	ldr	r2, [r2, #4]
 801b3dc:	441a      	add	r2, r3
 801b3de:	68bb      	ldr	r3, [r7, #8]
 801b3e0:	601a      	str	r2, [r3, #0]
			rc = 1;
 801b3e2:	2301      	movs	r3, #1
 801b3e4:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	2200      	movs	r2, #0
 801b3ea:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801b3ec:	697b      	ldr	r3, [r7, #20]
}
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	3718      	adds	r7, #24
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	bd80      	pop	{r7, pc}

0801b3f6 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801b3f6:	b580      	push	{r7, lr}
 801b3f8:	b086      	sub	sp, #24
 801b3fa:	af00      	add	r7, sp, #0
 801b3fc:	1d3b      	adds	r3, r7, #4
 801b3fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801b402:	2300      	movs	r3, #0
 801b404:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d006      	beq.n	801b41a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	4618      	mov	r0, r3
 801b410:	f7e4 ff20 	bl	8000254 <strlen>
 801b414:	4603      	mov	r3, r0
 801b416:	617b      	str	r3, [r7, #20]
 801b418:	e001      	b.n	801b41e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801b41a:	68bb      	ldr	r3, [r7, #8]
 801b41c:	617b      	str	r3, [r7, #20]
	return rc;
 801b41e:	697b      	ldr	r3, [r7, #20]
}
 801b420:	4618      	mov	r0, r3
 801b422:	3718      	adds	r7, #24
 801b424:	46bd      	mov	sp, r7
 801b426:	bd80      	pop	{r7, pc}

0801b428 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b086      	sub	sp, #24
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
 801b430:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801b432:	2300      	movs	r3, #0
 801b434:	617b      	str	r3, [r7, #20]
		blen = 0;
 801b436:	2300      	movs	r3, #0
 801b438:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d00a      	beq.n	801b458 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	4618      	mov	r0, r3
 801b44e:	f7e4 ff01 	bl	8000254 <strlen>
 801b452:	4603      	mov	r3, r0
 801b454:	617b      	str	r3, [r7, #20]
 801b456:	e005      	b.n	801b464 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	689b      	ldr	r3, [r3, #8]
 801b45c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	685b      	ldr	r3, [r3, #4]
 801b462:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801b464:	6838      	ldr	r0, [r7, #0]
 801b466:	f7e4 fef5 	bl	8000254 <strlen>
 801b46a:	4603      	mov	r3, r0
 801b46c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801b46e:	697a      	ldr	r2, [r7, #20]
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	429a      	cmp	r2, r3
 801b474:	d10a      	bne.n	801b48c <MQTTPacket_equals+0x64>
 801b476:	697b      	ldr	r3, [r7, #20]
 801b478:	461a      	mov	r2, r3
 801b47a:	6839      	ldr	r1, [r7, #0]
 801b47c:	6938      	ldr	r0, [r7, #16]
 801b47e:	f000 fb15 	bl	801baac <strncmp>
 801b482:	4603      	mov	r3, r0
 801b484:	2b00      	cmp	r3, #0
 801b486:	d101      	bne.n	801b48c <MQTTPacket_equals+0x64>
 801b488:	2301      	movs	r3, #1
 801b48a:	e000      	b.n	801b48e <MQTTPacket_equals+0x66>
 801b48c:	2300      	movs	r3, #0
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3718      	adds	r7, #24
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}

0801b496 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801b496:	b580      	push	{r7, lr}
 801b498:	b086      	sub	sp, #24
 801b49a:	af00      	add	r7, sp, #0
 801b49c:	60f8      	str	r0, [r7, #12]
 801b49e:	4638      	mov	r0, r7
 801b4a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801b4a4:	2300      	movs	r3, #0
 801b4a6:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801b4a8:	463b      	mov	r3, r7
 801b4aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b4ae:	f7ff ffa2 	bl	801b3f6 <MQTTstrlen>
 801b4b2:	4603      	mov	r3, r0
 801b4b4:	1c9a      	adds	r2, r3, #2
 801b4b6:	6a3b      	ldr	r3, [r7, #32]
 801b4b8:	4413      	add	r3, r2
 801b4ba:	697a      	ldr	r2, [r7, #20]
 801b4bc:	4413      	add	r3, r2
 801b4be:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	dd02      	ble.n	801b4cc <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801b4c6:	697b      	ldr	r3, [r7, #20]
 801b4c8:	3302      	adds	r3, #2
 801b4ca:	617b      	str	r3, [r7, #20]
	return len;
 801b4cc:	697b      	ldr	r3, [r7, #20]
}
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	3718      	adds	r7, #24
 801b4d2:	46bd      	mov	sp, r7
 801b4d4:	bd80      	pop	{r7, pc}

0801b4d6 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801b4d6:	b580      	push	{r7, lr}
 801b4d8:	b08a      	sub	sp, #40	; 0x28
 801b4da:	af02      	add	r7, sp, #8
 801b4dc:	60f8      	str	r0, [r7, #12]
 801b4de:	60b9      	str	r1, [r7, #8]
 801b4e0:	603b      	str	r3, [r7, #0]
 801b4e2:	4613      	mov	r3, r2
 801b4e4:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801b4ea:	2300      	movs	r3, #0
 801b4ec:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801b4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b4f8:	9300      	str	r3, [sp, #0]
 801b4fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b4fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b500:	6838      	ldr	r0, [r7, #0]
 801b502:	f7ff ffc8 	bl	801b496 <MQTTSerialize_publishLength>
 801b506:	61b8      	str	r0, [r7, #24]
 801b508:	69b8      	ldr	r0, [r7, #24]
 801b50a:	f7ff fe29 	bl	801b160 <MQTTPacket_len>
 801b50e:	4602      	mov	r2, r0
 801b510:	68bb      	ldr	r3, [r7, #8]
 801b512:	4293      	cmp	r3, r2
 801b514:	da03      	bge.n	801b51e <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801b516:	f06f 0301 	mvn.w	r3, #1
 801b51a:	61fb      	str	r3, [r7, #28]
		goto exit;
 801b51c:	e04c      	b.n	801b5b8 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801b51e:	7c3b      	ldrb	r3, [r7, #16]
 801b520:	2203      	movs	r2, #3
 801b522:	f362 1307 	bfi	r3, r2, #4, #4
 801b526:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801b528:	79fb      	ldrb	r3, [r7, #7]
 801b52a:	f003 0301 	and.w	r3, r3, #1
 801b52e:	b2da      	uxtb	r2, r3
 801b530:	7c3b      	ldrb	r3, [r7, #16]
 801b532:	f362 03c3 	bfi	r3, r2, #3, #1
 801b536:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801b538:	683b      	ldr	r3, [r7, #0]
 801b53a:	f003 0303 	and.w	r3, r3, #3
 801b53e:	b2da      	uxtb	r2, r3
 801b540:	7c3b      	ldrb	r3, [r7, #16]
 801b542:	f362 0342 	bfi	r3, r2, #1, #2
 801b546:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801b548:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b54c:	f003 0301 	and.w	r3, r3, #1
 801b550:	b2da      	uxtb	r2, r3
 801b552:	7c3b      	ldrb	r3, [r7, #16]
 801b554:	f362 0300 	bfi	r3, r2, #0, #1
 801b558:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801b55a:	7c3a      	ldrb	r2, [r7, #16]
 801b55c:	f107 0314 	add.w	r3, r7, #20
 801b560:	4611      	mov	r1, r2
 801b562:	4618      	mov	r0, r3
 801b564:	f7ff fe8b 	bl	801b27e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801b568:	697b      	ldr	r3, [r7, #20]
 801b56a:	69b9      	ldr	r1, [r7, #24]
 801b56c:	4618      	mov	r0, r3
 801b56e:	f7ff fd8b 	bl	801b088 <MQTTPacket_encode>
 801b572:	4602      	mov	r2, r0
 801b574:	697b      	ldr	r3, [r7, #20]
 801b576:	4413      	add	r3, r2
 801b578:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801b57a:	f107 0014 	add.w	r0, r7, #20
 801b57e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b582:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b584:	f7ff fed8 	bl	801b338 <writeMQTTString>

	if (qos > 0)
 801b588:	683b      	ldr	r3, [r7, #0]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	dd06      	ble.n	801b59c <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801b58e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801b590:	f107 0314 	add.w	r3, r7, #20
 801b594:	4611      	mov	r1, r2
 801b596:	4618      	mov	r0, r3
 801b598:	f7ff fe86 	bl	801b2a8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801b59c:	697b      	ldr	r3, [r7, #20]
 801b59e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b5a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	f000 f99e 	bl	801b8e4 <memcpy>
	ptr += payloadlen;
 801b5a8:	697a      	ldr	r2, [r7, #20]
 801b5aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b5ac:	4413      	add	r3, r2
 801b5ae:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801b5b0:	697a      	ldr	r2, [r7, #20]
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	1ad3      	subs	r3, r2, r3
 801b5b6:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801b5b8:	69fb      	ldr	r3, [r7, #28]
}
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	3720      	adds	r7, #32
 801b5be:	46bd      	mov	sp, r7
 801b5c0:	bd80      	pop	{r7, pc}

0801b5c2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801b5c2:	b580      	push	{r7, lr}
 801b5c4:	b088      	sub	sp, #32
 801b5c6:	af00      	add	r7, sp, #0
 801b5c8:	60f8      	str	r0, [r7, #12]
 801b5ca:	60b9      	str	r1, [r7, #8]
 801b5cc:	4611      	mov	r1, r2
 801b5ce:	461a      	mov	r2, r3
 801b5d0:	460b      	mov	r3, r1
 801b5d2:	71fb      	strb	r3, [r7, #7]
 801b5d4:	4613      	mov	r3, r2
 801b5d6:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801b5d8:	2300      	movs	r3, #0
 801b5da:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801b5dc:	2300      	movs	r3, #0
 801b5de:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801b5e4:	68bb      	ldr	r3, [r7, #8]
 801b5e6:	2b03      	cmp	r3, #3
 801b5e8:	dc03      	bgt.n	801b5f2 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801b5ea:	f06f 0301 	mvn.w	r3, #1
 801b5ee:	61fb      	str	r3, [r7, #28]
		goto exit;
 801b5f0:	e037      	b.n	801b662 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801b5f2:	79fb      	ldrb	r3, [r7, #7]
 801b5f4:	f003 030f 	and.w	r3, r3, #15
 801b5f8:	b2da      	uxtb	r2, r3
 801b5fa:	7e3b      	ldrb	r3, [r7, #24]
 801b5fc:	f362 1307 	bfi	r3, r2, #4, #4
 801b600:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801b602:	79bb      	ldrb	r3, [r7, #6]
 801b604:	f003 0301 	and.w	r3, r3, #1
 801b608:	b2da      	uxtb	r2, r3
 801b60a:	7e3b      	ldrb	r3, [r7, #24]
 801b60c:	f362 03c3 	bfi	r3, r2, #3, #1
 801b610:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801b612:	79fb      	ldrb	r3, [r7, #7]
 801b614:	2b06      	cmp	r3, #6
 801b616:	bf0c      	ite	eq
 801b618:	2301      	moveq	r3, #1
 801b61a:	2300      	movne	r3, #0
 801b61c:	b2db      	uxtb	r3, r3
 801b61e:	f003 0303 	and.w	r3, r3, #3
 801b622:	b2da      	uxtb	r2, r3
 801b624:	7e3b      	ldrb	r3, [r7, #24]
 801b626:	f362 0342 	bfi	r3, r2, #1, #2
 801b62a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801b62c:	7e3a      	ldrb	r2, [r7, #24]
 801b62e:	f107 0314 	add.w	r3, r7, #20
 801b632:	4611      	mov	r1, r2
 801b634:	4618      	mov	r0, r3
 801b636:	f7ff fe22 	bl	801b27e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801b63a:	697b      	ldr	r3, [r7, #20]
 801b63c:	2102      	movs	r1, #2
 801b63e:	4618      	mov	r0, r3
 801b640:	f7ff fd22 	bl	801b088 <MQTTPacket_encode>
 801b644:	4602      	mov	r2, r0
 801b646:	697b      	ldr	r3, [r7, #20]
 801b648:	4413      	add	r3, r2
 801b64a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801b64c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801b64e:	f107 0314 	add.w	r3, r7, #20
 801b652:	4611      	mov	r1, r2
 801b654:	4618      	mov	r0, r3
 801b656:	f7ff fe27 	bl	801b2a8 <writeInt>
	rc = ptr - buf;
 801b65a:	697a      	ldr	r2, [r7, #20]
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	1ad3      	subs	r3, r2, r3
 801b660:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801b662:	69fb      	ldr	r3, [r7, #28]
}
 801b664:	4618      	mov	r0, r3
 801b666:	3720      	adds	r7, #32
 801b668:	46bd      	mov	sp, r7
 801b66a:	bd80      	pop	{r7, pc}

0801b66c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b084      	sub	sp, #16
 801b670:	af00      	add	r7, sp, #0
 801b672:	6078      	str	r0, [r7, #4]
 801b674:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 801b676:	2302      	movs	r3, #2
 801b678:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 801b67a:	2300      	movs	r3, #0
 801b67c:	60fb      	str	r3, [r7, #12]
 801b67e:	e013      	b.n	801b6a8 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 801b680:	68fa      	ldr	r2, [r7, #12]
 801b682:	4613      	mov	r3, r2
 801b684:	005b      	lsls	r3, r3, #1
 801b686:	4413      	add	r3, r2
 801b688:	009b      	lsls	r3, r3, #2
 801b68a:	461a      	mov	r2, r3
 801b68c:	683b      	ldr	r3, [r7, #0]
 801b68e:	4413      	add	r3, r2
 801b690:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b694:	f7ff feaf 	bl	801b3f6 <MQTTstrlen>
 801b698:	4603      	mov	r3, r0
 801b69a:	3303      	adds	r3, #3
 801b69c:	68ba      	ldr	r2, [r7, #8]
 801b69e:	4413      	add	r3, r2
 801b6a0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	3301      	adds	r3, #1
 801b6a6:	60fb      	str	r3, [r7, #12]
 801b6a8:	68fa      	ldr	r2, [r7, #12]
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	429a      	cmp	r2, r3
 801b6ae:	dbe7      	blt.n	801b680 <MQTTSerialize_subscribeLength+0x14>
	return len;
 801b6b0:	68bb      	ldr	r3, [r7, #8]
}
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	3710      	adds	r7, #16
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	bd80      	pop	{r7, pc}

0801b6ba <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 801b6ba:	b580      	push	{r7, lr}
 801b6bc:	b08a      	sub	sp, #40	; 0x28
 801b6be:	af00      	add	r7, sp, #0
 801b6c0:	60f8      	str	r0, [r7, #12]
 801b6c2:	60b9      	str	r1, [r7, #8]
 801b6c4:	4611      	mov	r1, r2
 801b6c6:	461a      	mov	r2, r3
 801b6c8:	460b      	mov	r3, r1
 801b6ca:	71fb      	strb	r3, [r7, #7]
 801b6cc:	4613      	mov	r3, r2
 801b6ce:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 801b6d8:	2300      	movs	r3, #0
 801b6da:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 801b6dc:	2300      	movs	r3, #0
 801b6de:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 801b6e0:	2300      	movs	r3, #0
 801b6e2:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 801b6e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b6e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b6e8:	f7ff ffc0 	bl	801b66c <MQTTSerialize_subscribeLength>
 801b6ec:	61f8      	str	r0, [r7, #28]
 801b6ee:	69f8      	ldr	r0, [r7, #28]
 801b6f0:	f7ff fd36 	bl	801b160 <MQTTPacket_len>
 801b6f4:	4602      	mov	r2, r0
 801b6f6:	68bb      	ldr	r3, [r7, #8]
 801b6f8:	4293      	cmp	r3, r2
 801b6fa:	da03      	bge.n	801b704 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801b6fc:	f06f 0301 	mvn.w	r3, #1
 801b700:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801b702:	e051      	b.n	801b7a8 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 801b704:	2300      	movs	r3, #0
 801b706:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 801b708:	7d3b      	ldrb	r3, [r7, #20]
 801b70a:	2208      	movs	r2, #8
 801b70c:	f362 1307 	bfi	r3, r2, #4, #4
 801b710:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 801b712:	79fb      	ldrb	r3, [r7, #7]
 801b714:	f003 0301 	and.w	r3, r3, #1
 801b718:	b2da      	uxtb	r2, r3
 801b71a:	7d3b      	ldrb	r3, [r7, #20]
 801b71c:	f362 03c3 	bfi	r3, r2, #3, #1
 801b720:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 801b722:	7d3b      	ldrb	r3, [r7, #20]
 801b724:	2201      	movs	r2, #1
 801b726:	f362 0342 	bfi	r3, r2, #1, #2
 801b72a:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 801b72c:	7d3a      	ldrb	r2, [r7, #20]
 801b72e:	f107 0318 	add.w	r3, r7, #24
 801b732:	4611      	mov	r1, r2
 801b734:	4618      	mov	r0, r3
 801b736:	f7ff fda2 	bl	801b27e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801b73a:	69bb      	ldr	r3, [r7, #24]
 801b73c:	69f9      	ldr	r1, [r7, #28]
 801b73e:	4618      	mov	r0, r3
 801b740:	f7ff fca2 	bl	801b088 <MQTTPacket_encode>
 801b744:	4602      	mov	r2, r0
 801b746:	69bb      	ldr	r3, [r7, #24]
 801b748:	4413      	add	r3, r2
 801b74a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 801b74c:	88ba      	ldrh	r2, [r7, #4]
 801b74e:	f107 0318 	add.w	r3, r7, #24
 801b752:	4611      	mov	r1, r2
 801b754:	4618      	mov	r0, r3
 801b756:	f7ff fda7 	bl	801b2a8 <writeInt>

	for (i = 0; i < count; ++i)
 801b75a:	2300      	movs	r3, #0
 801b75c:	623b      	str	r3, [r7, #32]
 801b75e:	e01b      	b.n	801b798 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 801b760:	6a3a      	ldr	r2, [r7, #32]
 801b762:	4613      	mov	r3, r2
 801b764:	005b      	lsls	r3, r3, #1
 801b766:	4413      	add	r3, r2
 801b768:	009b      	lsls	r3, r3, #2
 801b76a:	461a      	mov	r2, r3
 801b76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b76e:	4413      	add	r3, r2
 801b770:	f107 0018 	add.w	r0, r7, #24
 801b774:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b776:	f7ff fddf 	bl	801b338 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 801b77a:	6a3b      	ldr	r3, [r7, #32]
 801b77c:	009b      	lsls	r3, r3, #2
 801b77e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b780:	4413      	add	r3, r2
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	b2da      	uxtb	r2, r3
 801b786:	f107 0318 	add.w	r3, r7, #24
 801b78a:	4611      	mov	r1, r2
 801b78c:	4618      	mov	r0, r3
 801b78e:	f7ff fd76 	bl	801b27e <writeChar>
	for (i = 0; i < count; ++i)
 801b792:	6a3b      	ldr	r3, [r7, #32]
 801b794:	3301      	adds	r3, #1
 801b796:	623b      	str	r3, [r7, #32]
 801b798:	6a3a      	ldr	r2, [r7, #32]
 801b79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b79c:	429a      	cmp	r2, r3
 801b79e:	dbdf      	blt.n	801b760 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 801b7a0:	69ba      	ldr	r2, [r7, #24]
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	1ad3      	subs	r3, r2, r3
 801b7a6:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b7aa:	4618      	mov	r0, r3
 801b7ac:	3728      	adds	r7, #40	; 0x28
 801b7ae:	46bd      	mov	sp, r7
 801b7b0:	bd80      	pop	{r7, pc}

0801b7b2 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 801b7b2:	b580      	push	{r7, lr}
 801b7b4:	b08a      	sub	sp, #40	; 0x28
 801b7b6:	af00      	add	r7, sp, #0
 801b7b8:	60f8      	str	r0, [r7, #12]
 801b7ba:	60b9      	str	r1, [r7, #8]
 801b7bc:	607a      	str	r2, [r7, #4]
 801b7be:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801b7c0:	2300      	movs	r3, #0
 801b7c2:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801b7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7c6:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801b7c8:	2300      	movs	r3, #0
 801b7ca:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801b7d0:	f107 0318 	add.w	r3, r7, #24
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	f7ff fd3e 	bl	801b256 <readChar>
 801b7da:	4603      	mov	r3, r0
 801b7dc:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 801b7de:	7f3b      	ldrb	r3, [r7, #28]
 801b7e0:	f023 030f 	bic.w	r3, r3, #15
 801b7e4:	b2db      	uxtb	r3, r3
 801b7e6:	2b90      	cmp	r3, #144	; 0x90
 801b7e8:	d142      	bne.n	801b870 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801b7ea:	69bb      	ldr	r3, [r7, #24]
 801b7ec:	f107 0214 	add.w	r2, r7, #20
 801b7f0:	4611      	mov	r1, r2
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	f7ff fcfe 	bl	801b1f4 <MQTTPacket_decodeBuf>
 801b7f8:	6278      	str	r0, [r7, #36]	; 0x24
 801b7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b7fc:	69bb      	ldr	r3, [r7, #24]
 801b7fe:	4413      	add	r3, r2
 801b800:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801b802:	69bb      	ldr	r3, [r7, #24]
 801b804:	697a      	ldr	r2, [r7, #20]
 801b806:	4413      	add	r3, r2
 801b808:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801b80a:	69bb      	ldr	r3, [r7, #24]
 801b80c:	6a3a      	ldr	r2, [r7, #32]
 801b80e:	1ad3      	subs	r3, r2, r3
 801b810:	2b01      	cmp	r3, #1
 801b812:	dd2f      	ble.n	801b874 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 801b814:	f107 0318 	add.w	r3, r7, #24
 801b818:	4618      	mov	r0, r3
 801b81a:	f7ff fd01 	bl	801b220 <readInt>
 801b81e:	4603      	mov	r3, r0
 801b820:	b29a      	uxth	r2, r3
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	801a      	strh	r2, [r3, #0]

	*count = 0;
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	2200      	movs	r2, #0
 801b82a:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801b82c:	e019      	b.n	801b862 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	68ba      	ldr	r2, [r7, #8]
 801b834:	429a      	cmp	r2, r3
 801b836:	da03      	bge.n	801b840 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 801b838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b83c:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 801b83e:	e01a      	b.n	801b876 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 801b840:	f107 0318 	add.w	r3, r7, #24
 801b844:	4618      	mov	r0, r3
 801b846:	f7ff fd06 	bl	801b256 <readChar>
 801b84a:	4603      	mov	r3, r0
 801b84c:	4618      	mov	r0, r3
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	1c59      	adds	r1, r3, #1
 801b854:	687a      	ldr	r2, [r7, #4]
 801b856:	6011      	str	r1, [r2, #0]
 801b858:	009b      	lsls	r3, r3, #2
 801b85a:	683a      	ldr	r2, [r7, #0]
 801b85c:	4413      	add	r3, r2
 801b85e:	4602      	mov	r2, r0
 801b860:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801b862:	69bb      	ldr	r3, [r7, #24]
 801b864:	6a3a      	ldr	r2, [r7, #32]
 801b866:	429a      	cmp	r2, r3
 801b868:	d8e1      	bhi.n	801b82e <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 801b86a:	2301      	movs	r3, #1
 801b86c:	627b      	str	r3, [r7, #36]	; 0x24
 801b86e:	e002      	b.n	801b876 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801b870:	bf00      	nop
 801b872:	e000      	b.n	801b876 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801b874:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b878:	4618      	mov	r0, r3
 801b87a:	3728      	adds	r7, #40	; 0x28
 801b87c:	46bd      	mov	sp, r7
 801b87e:	bd80      	pop	{r7, pc}

0801b880 <__libc_init_array>:
 801b880:	b570      	push	{r4, r5, r6, lr}
 801b882:	4d0d      	ldr	r5, [pc, #52]	; (801b8b8 <__libc_init_array+0x38>)
 801b884:	4c0d      	ldr	r4, [pc, #52]	; (801b8bc <__libc_init_array+0x3c>)
 801b886:	1b64      	subs	r4, r4, r5
 801b888:	10a4      	asrs	r4, r4, #2
 801b88a:	2600      	movs	r6, #0
 801b88c:	42a6      	cmp	r6, r4
 801b88e:	d109      	bne.n	801b8a4 <__libc_init_array+0x24>
 801b890:	4d0b      	ldr	r5, [pc, #44]	; (801b8c0 <__libc_init_array+0x40>)
 801b892:	4c0c      	ldr	r4, [pc, #48]	; (801b8c4 <__libc_init_array+0x44>)
 801b894:	f001 f8de 	bl	801ca54 <_init>
 801b898:	1b64      	subs	r4, r4, r5
 801b89a:	10a4      	asrs	r4, r4, #2
 801b89c:	2600      	movs	r6, #0
 801b89e:	42a6      	cmp	r6, r4
 801b8a0:	d105      	bne.n	801b8ae <__libc_init_array+0x2e>
 801b8a2:	bd70      	pop	{r4, r5, r6, pc}
 801b8a4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b8a8:	4798      	blx	r3
 801b8aa:	3601      	adds	r6, #1
 801b8ac:	e7ee      	b.n	801b88c <__libc_init_array+0xc>
 801b8ae:	f855 3b04 	ldr.w	r3, [r5], #4
 801b8b2:	4798      	blx	r3
 801b8b4:	3601      	adds	r6, #1
 801b8b6:	e7f2      	b.n	801b89e <__libc_init_array+0x1e>
 801b8b8:	08020e00 	.word	0x08020e00
 801b8bc:	08020e00 	.word	0x08020e00
 801b8c0:	08020e00 	.word	0x08020e00
 801b8c4:	08020e04 	.word	0x08020e04

0801b8c8 <memcmp>:
 801b8c8:	b530      	push	{r4, r5, lr}
 801b8ca:	3901      	subs	r1, #1
 801b8cc:	2400      	movs	r4, #0
 801b8ce:	42a2      	cmp	r2, r4
 801b8d0:	d101      	bne.n	801b8d6 <memcmp+0xe>
 801b8d2:	2000      	movs	r0, #0
 801b8d4:	e005      	b.n	801b8e2 <memcmp+0x1a>
 801b8d6:	5d03      	ldrb	r3, [r0, r4]
 801b8d8:	3401      	adds	r4, #1
 801b8da:	5d0d      	ldrb	r5, [r1, r4]
 801b8dc:	42ab      	cmp	r3, r5
 801b8de:	d0f6      	beq.n	801b8ce <memcmp+0x6>
 801b8e0:	1b58      	subs	r0, r3, r5
 801b8e2:	bd30      	pop	{r4, r5, pc}

0801b8e4 <memcpy>:
 801b8e4:	440a      	add	r2, r1
 801b8e6:	4291      	cmp	r1, r2
 801b8e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801b8ec:	d100      	bne.n	801b8f0 <memcpy+0xc>
 801b8ee:	4770      	bx	lr
 801b8f0:	b510      	push	{r4, lr}
 801b8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b8fa:	4291      	cmp	r1, r2
 801b8fc:	d1f9      	bne.n	801b8f2 <memcpy+0xe>
 801b8fe:	bd10      	pop	{r4, pc}

0801b900 <memset>:
 801b900:	4402      	add	r2, r0
 801b902:	4603      	mov	r3, r0
 801b904:	4293      	cmp	r3, r2
 801b906:	d100      	bne.n	801b90a <memset+0xa>
 801b908:	4770      	bx	lr
 801b90a:	f803 1b01 	strb.w	r1, [r3], #1
 801b90e:	e7f9      	b.n	801b904 <memset+0x4>

0801b910 <iprintf>:
 801b910:	b40f      	push	{r0, r1, r2, r3}
 801b912:	4b0a      	ldr	r3, [pc, #40]	; (801b93c <iprintf+0x2c>)
 801b914:	b513      	push	{r0, r1, r4, lr}
 801b916:	681c      	ldr	r4, [r3, #0]
 801b918:	b124      	cbz	r4, 801b924 <iprintf+0x14>
 801b91a:	69a3      	ldr	r3, [r4, #24]
 801b91c:	b913      	cbnz	r3, 801b924 <iprintf+0x14>
 801b91e:	4620      	mov	r0, r4
 801b920:	f000 face 	bl	801bec0 <__sinit>
 801b924:	ab05      	add	r3, sp, #20
 801b926:	9a04      	ldr	r2, [sp, #16]
 801b928:	68a1      	ldr	r1, [r4, #8]
 801b92a:	9301      	str	r3, [sp, #4]
 801b92c:	4620      	mov	r0, r4
 801b92e:	f000 fcb9 	bl	801c2a4 <_vfiprintf_r>
 801b932:	b002      	add	sp, #8
 801b934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b938:	b004      	add	sp, #16
 801b93a:	4770      	bx	lr
 801b93c:	20000020 	.word	0x20000020

0801b940 <_puts_r>:
 801b940:	b570      	push	{r4, r5, r6, lr}
 801b942:	460e      	mov	r6, r1
 801b944:	4605      	mov	r5, r0
 801b946:	b118      	cbz	r0, 801b950 <_puts_r+0x10>
 801b948:	6983      	ldr	r3, [r0, #24]
 801b94a:	b90b      	cbnz	r3, 801b950 <_puts_r+0x10>
 801b94c:	f000 fab8 	bl	801bec0 <__sinit>
 801b950:	69ab      	ldr	r3, [r5, #24]
 801b952:	68ac      	ldr	r4, [r5, #8]
 801b954:	b913      	cbnz	r3, 801b95c <_puts_r+0x1c>
 801b956:	4628      	mov	r0, r5
 801b958:	f000 fab2 	bl	801bec0 <__sinit>
 801b95c:	4b2c      	ldr	r3, [pc, #176]	; (801ba10 <_puts_r+0xd0>)
 801b95e:	429c      	cmp	r4, r3
 801b960:	d120      	bne.n	801b9a4 <_puts_r+0x64>
 801b962:	686c      	ldr	r4, [r5, #4]
 801b964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b966:	07db      	lsls	r3, r3, #31
 801b968:	d405      	bmi.n	801b976 <_puts_r+0x36>
 801b96a:	89a3      	ldrh	r3, [r4, #12]
 801b96c:	0598      	lsls	r0, r3, #22
 801b96e:	d402      	bmi.n	801b976 <_puts_r+0x36>
 801b970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b972:	f000 fb55 	bl	801c020 <__retarget_lock_acquire_recursive>
 801b976:	89a3      	ldrh	r3, [r4, #12]
 801b978:	0719      	lsls	r1, r3, #28
 801b97a:	d51d      	bpl.n	801b9b8 <_puts_r+0x78>
 801b97c:	6923      	ldr	r3, [r4, #16]
 801b97e:	b1db      	cbz	r3, 801b9b8 <_puts_r+0x78>
 801b980:	3e01      	subs	r6, #1
 801b982:	68a3      	ldr	r3, [r4, #8]
 801b984:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b988:	3b01      	subs	r3, #1
 801b98a:	60a3      	str	r3, [r4, #8]
 801b98c:	bb39      	cbnz	r1, 801b9de <_puts_r+0x9e>
 801b98e:	2b00      	cmp	r3, #0
 801b990:	da38      	bge.n	801ba04 <_puts_r+0xc4>
 801b992:	4622      	mov	r2, r4
 801b994:	210a      	movs	r1, #10
 801b996:	4628      	mov	r0, r5
 801b998:	f000 f89a 	bl	801bad0 <__swbuf_r>
 801b99c:	3001      	adds	r0, #1
 801b99e:	d011      	beq.n	801b9c4 <_puts_r+0x84>
 801b9a0:	250a      	movs	r5, #10
 801b9a2:	e011      	b.n	801b9c8 <_puts_r+0x88>
 801b9a4:	4b1b      	ldr	r3, [pc, #108]	; (801ba14 <_puts_r+0xd4>)
 801b9a6:	429c      	cmp	r4, r3
 801b9a8:	d101      	bne.n	801b9ae <_puts_r+0x6e>
 801b9aa:	68ac      	ldr	r4, [r5, #8]
 801b9ac:	e7da      	b.n	801b964 <_puts_r+0x24>
 801b9ae:	4b1a      	ldr	r3, [pc, #104]	; (801ba18 <_puts_r+0xd8>)
 801b9b0:	429c      	cmp	r4, r3
 801b9b2:	bf08      	it	eq
 801b9b4:	68ec      	ldreq	r4, [r5, #12]
 801b9b6:	e7d5      	b.n	801b964 <_puts_r+0x24>
 801b9b8:	4621      	mov	r1, r4
 801b9ba:	4628      	mov	r0, r5
 801b9bc:	f000 f8da 	bl	801bb74 <__swsetup_r>
 801b9c0:	2800      	cmp	r0, #0
 801b9c2:	d0dd      	beq.n	801b980 <_puts_r+0x40>
 801b9c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b9c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b9ca:	07da      	lsls	r2, r3, #31
 801b9cc:	d405      	bmi.n	801b9da <_puts_r+0x9a>
 801b9ce:	89a3      	ldrh	r3, [r4, #12]
 801b9d0:	059b      	lsls	r3, r3, #22
 801b9d2:	d402      	bmi.n	801b9da <_puts_r+0x9a>
 801b9d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9d6:	f000 fb24 	bl	801c022 <__retarget_lock_release_recursive>
 801b9da:	4628      	mov	r0, r5
 801b9dc:	bd70      	pop	{r4, r5, r6, pc}
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	da04      	bge.n	801b9ec <_puts_r+0xac>
 801b9e2:	69a2      	ldr	r2, [r4, #24]
 801b9e4:	429a      	cmp	r2, r3
 801b9e6:	dc06      	bgt.n	801b9f6 <_puts_r+0xb6>
 801b9e8:	290a      	cmp	r1, #10
 801b9ea:	d004      	beq.n	801b9f6 <_puts_r+0xb6>
 801b9ec:	6823      	ldr	r3, [r4, #0]
 801b9ee:	1c5a      	adds	r2, r3, #1
 801b9f0:	6022      	str	r2, [r4, #0]
 801b9f2:	7019      	strb	r1, [r3, #0]
 801b9f4:	e7c5      	b.n	801b982 <_puts_r+0x42>
 801b9f6:	4622      	mov	r2, r4
 801b9f8:	4628      	mov	r0, r5
 801b9fa:	f000 f869 	bl	801bad0 <__swbuf_r>
 801b9fe:	3001      	adds	r0, #1
 801ba00:	d1bf      	bne.n	801b982 <_puts_r+0x42>
 801ba02:	e7df      	b.n	801b9c4 <_puts_r+0x84>
 801ba04:	6823      	ldr	r3, [r4, #0]
 801ba06:	250a      	movs	r5, #10
 801ba08:	1c5a      	adds	r2, r3, #1
 801ba0a:	6022      	str	r2, [r4, #0]
 801ba0c:	701d      	strb	r5, [r3, #0]
 801ba0e:	e7db      	b.n	801b9c8 <_puts_r+0x88>
 801ba10:	08020d84 	.word	0x08020d84
 801ba14:	08020da4 	.word	0x08020da4
 801ba18:	08020d64 	.word	0x08020d64

0801ba1c <puts>:
 801ba1c:	4b02      	ldr	r3, [pc, #8]	; (801ba28 <puts+0xc>)
 801ba1e:	4601      	mov	r1, r0
 801ba20:	6818      	ldr	r0, [r3, #0]
 801ba22:	f7ff bf8d 	b.w	801b940 <_puts_r>
 801ba26:	bf00      	nop
 801ba28:	20000020 	.word	0x20000020

0801ba2c <rand>:
 801ba2c:	4b17      	ldr	r3, [pc, #92]	; (801ba8c <rand+0x60>)
 801ba2e:	b510      	push	{r4, lr}
 801ba30:	681c      	ldr	r4, [r3, #0]
 801ba32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ba34:	b9b3      	cbnz	r3, 801ba64 <rand+0x38>
 801ba36:	2018      	movs	r0, #24
 801ba38:	f000 fb58 	bl	801c0ec <malloc>
 801ba3c:	63a0      	str	r0, [r4, #56]	; 0x38
 801ba3e:	b928      	cbnz	r0, 801ba4c <rand+0x20>
 801ba40:	4602      	mov	r2, r0
 801ba42:	4b13      	ldr	r3, [pc, #76]	; (801ba90 <rand+0x64>)
 801ba44:	4813      	ldr	r0, [pc, #76]	; (801ba94 <rand+0x68>)
 801ba46:	214e      	movs	r1, #78	; 0x4e
 801ba48:	f000 f902 	bl	801bc50 <__assert_func>
 801ba4c:	4a12      	ldr	r2, [pc, #72]	; (801ba98 <rand+0x6c>)
 801ba4e:	4b13      	ldr	r3, [pc, #76]	; (801ba9c <rand+0x70>)
 801ba50:	e9c0 2300 	strd	r2, r3, [r0]
 801ba54:	4b12      	ldr	r3, [pc, #72]	; (801baa0 <rand+0x74>)
 801ba56:	6083      	str	r3, [r0, #8]
 801ba58:	230b      	movs	r3, #11
 801ba5a:	8183      	strh	r3, [r0, #12]
 801ba5c:	2201      	movs	r2, #1
 801ba5e:	2300      	movs	r3, #0
 801ba60:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ba64:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ba66:	480f      	ldr	r0, [pc, #60]	; (801baa4 <rand+0x78>)
 801ba68:	690a      	ldr	r2, [r1, #16]
 801ba6a:	694b      	ldr	r3, [r1, #20]
 801ba6c:	4c0e      	ldr	r4, [pc, #56]	; (801baa8 <rand+0x7c>)
 801ba6e:	4350      	muls	r0, r2
 801ba70:	fb04 0003 	mla	r0, r4, r3, r0
 801ba74:	fba2 3404 	umull	r3, r4, r2, r4
 801ba78:	1c5a      	adds	r2, r3, #1
 801ba7a:	4404      	add	r4, r0
 801ba7c:	f144 0000 	adc.w	r0, r4, #0
 801ba80:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ba84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ba88:	bd10      	pop	{r4, pc}
 801ba8a:	bf00      	nop
 801ba8c:	20000020 	.word	0x20000020
 801ba90:	08020cb0 	.word	0x08020cb0
 801ba94:	08020cc7 	.word	0x08020cc7
 801ba98:	abcd330e 	.word	0xabcd330e
 801ba9c:	e66d1234 	.word	0xe66d1234
 801baa0:	0005deec 	.word	0x0005deec
 801baa4:	5851f42d 	.word	0x5851f42d
 801baa8:	4c957f2d 	.word	0x4c957f2d

0801baac <strncmp>:
 801baac:	b510      	push	{r4, lr}
 801baae:	b16a      	cbz	r2, 801bacc <strncmp+0x20>
 801bab0:	3901      	subs	r1, #1
 801bab2:	1884      	adds	r4, r0, r2
 801bab4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bab8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801babc:	4293      	cmp	r3, r2
 801babe:	d103      	bne.n	801bac8 <strncmp+0x1c>
 801bac0:	42a0      	cmp	r0, r4
 801bac2:	d001      	beq.n	801bac8 <strncmp+0x1c>
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d1f5      	bne.n	801bab4 <strncmp+0x8>
 801bac8:	1a98      	subs	r0, r3, r2
 801baca:	bd10      	pop	{r4, pc}
 801bacc:	4610      	mov	r0, r2
 801bace:	e7fc      	b.n	801baca <strncmp+0x1e>

0801bad0 <__swbuf_r>:
 801bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bad2:	460e      	mov	r6, r1
 801bad4:	4614      	mov	r4, r2
 801bad6:	4605      	mov	r5, r0
 801bad8:	b118      	cbz	r0, 801bae2 <__swbuf_r+0x12>
 801bada:	6983      	ldr	r3, [r0, #24]
 801badc:	b90b      	cbnz	r3, 801bae2 <__swbuf_r+0x12>
 801bade:	f000 f9ef 	bl	801bec0 <__sinit>
 801bae2:	4b21      	ldr	r3, [pc, #132]	; (801bb68 <__swbuf_r+0x98>)
 801bae4:	429c      	cmp	r4, r3
 801bae6:	d12b      	bne.n	801bb40 <__swbuf_r+0x70>
 801bae8:	686c      	ldr	r4, [r5, #4]
 801baea:	69a3      	ldr	r3, [r4, #24]
 801baec:	60a3      	str	r3, [r4, #8]
 801baee:	89a3      	ldrh	r3, [r4, #12]
 801baf0:	071a      	lsls	r2, r3, #28
 801baf2:	d52f      	bpl.n	801bb54 <__swbuf_r+0x84>
 801baf4:	6923      	ldr	r3, [r4, #16]
 801baf6:	b36b      	cbz	r3, 801bb54 <__swbuf_r+0x84>
 801baf8:	6923      	ldr	r3, [r4, #16]
 801bafa:	6820      	ldr	r0, [r4, #0]
 801bafc:	1ac0      	subs	r0, r0, r3
 801bafe:	6963      	ldr	r3, [r4, #20]
 801bb00:	b2f6      	uxtb	r6, r6
 801bb02:	4283      	cmp	r3, r0
 801bb04:	4637      	mov	r7, r6
 801bb06:	dc04      	bgt.n	801bb12 <__swbuf_r+0x42>
 801bb08:	4621      	mov	r1, r4
 801bb0a:	4628      	mov	r0, r5
 801bb0c:	f000 f944 	bl	801bd98 <_fflush_r>
 801bb10:	bb30      	cbnz	r0, 801bb60 <__swbuf_r+0x90>
 801bb12:	68a3      	ldr	r3, [r4, #8]
 801bb14:	3b01      	subs	r3, #1
 801bb16:	60a3      	str	r3, [r4, #8]
 801bb18:	6823      	ldr	r3, [r4, #0]
 801bb1a:	1c5a      	adds	r2, r3, #1
 801bb1c:	6022      	str	r2, [r4, #0]
 801bb1e:	701e      	strb	r6, [r3, #0]
 801bb20:	6963      	ldr	r3, [r4, #20]
 801bb22:	3001      	adds	r0, #1
 801bb24:	4283      	cmp	r3, r0
 801bb26:	d004      	beq.n	801bb32 <__swbuf_r+0x62>
 801bb28:	89a3      	ldrh	r3, [r4, #12]
 801bb2a:	07db      	lsls	r3, r3, #31
 801bb2c:	d506      	bpl.n	801bb3c <__swbuf_r+0x6c>
 801bb2e:	2e0a      	cmp	r6, #10
 801bb30:	d104      	bne.n	801bb3c <__swbuf_r+0x6c>
 801bb32:	4621      	mov	r1, r4
 801bb34:	4628      	mov	r0, r5
 801bb36:	f000 f92f 	bl	801bd98 <_fflush_r>
 801bb3a:	b988      	cbnz	r0, 801bb60 <__swbuf_r+0x90>
 801bb3c:	4638      	mov	r0, r7
 801bb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb40:	4b0a      	ldr	r3, [pc, #40]	; (801bb6c <__swbuf_r+0x9c>)
 801bb42:	429c      	cmp	r4, r3
 801bb44:	d101      	bne.n	801bb4a <__swbuf_r+0x7a>
 801bb46:	68ac      	ldr	r4, [r5, #8]
 801bb48:	e7cf      	b.n	801baea <__swbuf_r+0x1a>
 801bb4a:	4b09      	ldr	r3, [pc, #36]	; (801bb70 <__swbuf_r+0xa0>)
 801bb4c:	429c      	cmp	r4, r3
 801bb4e:	bf08      	it	eq
 801bb50:	68ec      	ldreq	r4, [r5, #12]
 801bb52:	e7ca      	b.n	801baea <__swbuf_r+0x1a>
 801bb54:	4621      	mov	r1, r4
 801bb56:	4628      	mov	r0, r5
 801bb58:	f000 f80c 	bl	801bb74 <__swsetup_r>
 801bb5c:	2800      	cmp	r0, #0
 801bb5e:	d0cb      	beq.n	801baf8 <__swbuf_r+0x28>
 801bb60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bb64:	e7ea      	b.n	801bb3c <__swbuf_r+0x6c>
 801bb66:	bf00      	nop
 801bb68:	08020d84 	.word	0x08020d84
 801bb6c:	08020da4 	.word	0x08020da4
 801bb70:	08020d64 	.word	0x08020d64

0801bb74 <__swsetup_r>:
 801bb74:	4b32      	ldr	r3, [pc, #200]	; (801bc40 <__swsetup_r+0xcc>)
 801bb76:	b570      	push	{r4, r5, r6, lr}
 801bb78:	681d      	ldr	r5, [r3, #0]
 801bb7a:	4606      	mov	r6, r0
 801bb7c:	460c      	mov	r4, r1
 801bb7e:	b125      	cbz	r5, 801bb8a <__swsetup_r+0x16>
 801bb80:	69ab      	ldr	r3, [r5, #24]
 801bb82:	b913      	cbnz	r3, 801bb8a <__swsetup_r+0x16>
 801bb84:	4628      	mov	r0, r5
 801bb86:	f000 f99b 	bl	801bec0 <__sinit>
 801bb8a:	4b2e      	ldr	r3, [pc, #184]	; (801bc44 <__swsetup_r+0xd0>)
 801bb8c:	429c      	cmp	r4, r3
 801bb8e:	d10f      	bne.n	801bbb0 <__swsetup_r+0x3c>
 801bb90:	686c      	ldr	r4, [r5, #4]
 801bb92:	89a3      	ldrh	r3, [r4, #12]
 801bb94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb98:	0719      	lsls	r1, r3, #28
 801bb9a:	d42c      	bmi.n	801bbf6 <__swsetup_r+0x82>
 801bb9c:	06dd      	lsls	r5, r3, #27
 801bb9e:	d411      	bmi.n	801bbc4 <__swsetup_r+0x50>
 801bba0:	2309      	movs	r3, #9
 801bba2:	6033      	str	r3, [r6, #0]
 801bba4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bba8:	81a3      	strh	r3, [r4, #12]
 801bbaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bbae:	e03e      	b.n	801bc2e <__swsetup_r+0xba>
 801bbb0:	4b25      	ldr	r3, [pc, #148]	; (801bc48 <__swsetup_r+0xd4>)
 801bbb2:	429c      	cmp	r4, r3
 801bbb4:	d101      	bne.n	801bbba <__swsetup_r+0x46>
 801bbb6:	68ac      	ldr	r4, [r5, #8]
 801bbb8:	e7eb      	b.n	801bb92 <__swsetup_r+0x1e>
 801bbba:	4b24      	ldr	r3, [pc, #144]	; (801bc4c <__swsetup_r+0xd8>)
 801bbbc:	429c      	cmp	r4, r3
 801bbbe:	bf08      	it	eq
 801bbc0:	68ec      	ldreq	r4, [r5, #12]
 801bbc2:	e7e6      	b.n	801bb92 <__swsetup_r+0x1e>
 801bbc4:	0758      	lsls	r0, r3, #29
 801bbc6:	d512      	bpl.n	801bbee <__swsetup_r+0x7a>
 801bbc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bbca:	b141      	cbz	r1, 801bbde <__swsetup_r+0x6a>
 801bbcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bbd0:	4299      	cmp	r1, r3
 801bbd2:	d002      	beq.n	801bbda <__swsetup_r+0x66>
 801bbd4:	4630      	mov	r0, r6
 801bbd6:	f000 fa91 	bl	801c0fc <_free_r>
 801bbda:	2300      	movs	r3, #0
 801bbdc:	6363      	str	r3, [r4, #52]	; 0x34
 801bbde:	89a3      	ldrh	r3, [r4, #12]
 801bbe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bbe4:	81a3      	strh	r3, [r4, #12]
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	6063      	str	r3, [r4, #4]
 801bbea:	6923      	ldr	r3, [r4, #16]
 801bbec:	6023      	str	r3, [r4, #0]
 801bbee:	89a3      	ldrh	r3, [r4, #12]
 801bbf0:	f043 0308 	orr.w	r3, r3, #8
 801bbf4:	81a3      	strh	r3, [r4, #12]
 801bbf6:	6923      	ldr	r3, [r4, #16]
 801bbf8:	b94b      	cbnz	r3, 801bc0e <__swsetup_r+0x9a>
 801bbfa:	89a3      	ldrh	r3, [r4, #12]
 801bbfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bc00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bc04:	d003      	beq.n	801bc0e <__swsetup_r+0x9a>
 801bc06:	4621      	mov	r1, r4
 801bc08:	4630      	mov	r0, r6
 801bc0a:	f000 fa2f 	bl	801c06c <__smakebuf_r>
 801bc0e:	89a0      	ldrh	r0, [r4, #12]
 801bc10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bc14:	f010 0301 	ands.w	r3, r0, #1
 801bc18:	d00a      	beq.n	801bc30 <__swsetup_r+0xbc>
 801bc1a:	2300      	movs	r3, #0
 801bc1c:	60a3      	str	r3, [r4, #8]
 801bc1e:	6963      	ldr	r3, [r4, #20]
 801bc20:	425b      	negs	r3, r3
 801bc22:	61a3      	str	r3, [r4, #24]
 801bc24:	6923      	ldr	r3, [r4, #16]
 801bc26:	b943      	cbnz	r3, 801bc3a <__swsetup_r+0xc6>
 801bc28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bc2c:	d1ba      	bne.n	801bba4 <__swsetup_r+0x30>
 801bc2e:	bd70      	pop	{r4, r5, r6, pc}
 801bc30:	0781      	lsls	r1, r0, #30
 801bc32:	bf58      	it	pl
 801bc34:	6963      	ldrpl	r3, [r4, #20]
 801bc36:	60a3      	str	r3, [r4, #8]
 801bc38:	e7f4      	b.n	801bc24 <__swsetup_r+0xb0>
 801bc3a:	2000      	movs	r0, #0
 801bc3c:	e7f7      	b.n	801bc2e <__swsetup_r+0xba>
 801bc3e:	bf00      	nop
 801bc40:	20000020 	.word	0x20000020
 801bc44:	08020d84 	.word	0x08020d84
 801bc48:	08020da4 	.word	0x08020da4
 801bc4c:	08020d64 	.word	0x08020d64

0801bc50 <__assert_func>:
 801bc50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bc52:	4614      	mov	r4, r2
 801bc54:	461a      	mov	r2, r3
 801bc56:	4b09      	ldr	r3, [pc, #36]	; (801bc7c <__assert_func+0x2c>)
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	4605      	mov	r5, r0
 801bc5c:	68d8      	ldr	r0, [r3, #12]
 801bc5e:	b14c      	cbz	r4, 801bc74 <__assert_func+0x24>
 801bc60:	4b07      	ldr	r3, [pc, #28]	; (801bc80 <__assert_func+0x30>)
 801bc62:	9100      	str	r1, [sp, #0]
 801bc64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bc68:	4906      	ldr	r1, [pc, #24]	; (801bc84 <__assert_func+0x34>)
 801bc6a:	462b      	mov	r3, r5
 801bc6c:	f000 f9a6 	bl	801bfbc <fiprintf>
 801bc70:	f000 fe42 	bl	801c8f8 <abort>
 801bc74:	4b04      	ldr	r3, [pc, #16]	; (801bc88 <__assert_func+0x38>)
 801bc76:	461c      	mov	r4, r3
 801bc78:	e7f3      	b.n	801bc62 <__assert_func+0x12>
 801bc7a:	bf00      	nop
 801bc7c:	20000020 	.word	0x20000020
 801bc80:	08020d26 	.word	0x08020d26
 801bc84:	08020d33 	.word	0x08020d33
 801bc88:	08020d61 	.word	0x08020d61

0801bc8c <__sflush_r>:
 801bc8c:	898a      	ldrh	r2, [r1, #12]
 801bc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc92:	4605      	mov	r5, r0
 801bc94:	0710      	lsls	r0, r2, #28
 801bc96:	460c      	mov	r4, r1
 801bc98:	d458      	bmi.n	801bd4c <__sflush_r+0xc0>
 801bc9a:	684b      	ldr	r3, [r1, #4]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	dc05      	bgt.n	801bcac <__sflush_r+0x20>
 801bca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	dc02      	bgt.n	801bcac <__sflush_r+0x20>
 801bca6:	2000      	movs	r0, #0
 801bca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bcae:	2e00      	cmp	r6, #0
 801bcb0:	d0f9      	beq.n	801bca6 <__sflush_r+0x1a>
 801bcb2:	2300      	movs	r3, #0
 801bcb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bcb8:	682f      	ldr	r7, [r5, #0]
 801bcba:	602b      	str	r3, [r5, #0]
 801bcbc:	d032      	beq.n	801bd24 <__sflush_r+0x98>
 801bcbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bcc0:	89a3      	ldrh	r3, [r4, #12]
 801bcc2:	075a      	lsls	r2, r3, #29
 801bcc4:	d505      	bpl.n	801bcd2 <__sflush_r+0x46>
 801bcc6:	6863      	ldr	r3, [r4, #4]
 801bcc8:	1ac0      	subs	r0, r0, r3
 801bcca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bccc:	b10b      	cbz	r3, 801bcd2 <__sflush_r+0x46>
 801bcce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bcd0:	1ac0      	subs	r0, r0, r3
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	4602      	mov	r2, r0
 801bcd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bcd8:	6a21      	ldr	r1, [r4, #32]
 801bcda:	4628      	mov	r0, r5
 801bcdc:	47b0      	blx	r6
 801bcde:	1c43      	adds	r3, r0, #1
 801bce0:	89a3      	ldrh	r3, [r4, #12]
 801bce2:	d106      	bne.n	801bcf2 <__sflush_r+0x66>
 801bce4:	6829      	ldr	r1, [r5, #0]
 801bce6:	291d      	cmp	r1, #29
 801bce8:	d82c      	bhi.n	801bd44 <__sflush_r+0xb8>
 801bcea:	4a2a      	ldr	r2, [pc, #168]	; (801bd94 <__sflush_r+0x108>)
 801bcec:	40ca      	lsrs	r2, r1
 801bcee:	07d6      	lsls	r6, r2, #31
 801bcf0:	d528      	bpl.n	801bd44 <__sflush_r+0xb8>
 801bcf2:	2200      	movs	r2, #0
 801bcf4:	6062      	str	r2, [r4, #4]
 801bcf6:	04d9      	lsls	r1, r3, #19
 801bcf8:	6922      	ldr	r2, [r4, #16]
 801bcfa:	6022      	str	r2, [r4, #0]
 801bcfc:	d504      	bpl.n	801bd08 <__sflush_r+0x7c>
 801bcfe:	1c42      	adds	r2, r0, #1
 801bd00:	d101      	bne.n	801bd06 <__sflush_r+0x7a>
 801bd02:	682b      	ldr	r3, [r5, #0]
 801bd04:	b903      	cbnz	r3, 801bd08 <__sflush_r+0x7c>
 801bd06:	6560      	str	r0, [r4, #84]	; 0x54
 801bd08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bd0a:	602f      	str	r7, [r5, #0]
 801bd0c:	2900      	cmp	r1, #0
 801bd0e:	d0ca      	beq.n	801bca6 <__sflush_r+0x1a>
 801bd10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bd14:	4299      	cmp	r1, r3
 801bd16:	d002      	beq.n	801bd1e <__sflush_r+0x92>
 801bd18:	4628      	mov	r0, r5
 801bd1a:	f000 f9ef 	bl	801c0fc <_free_r>
 801bd1e:	2000      	movs	r0, #0
 801bd20:	6360      	str	r0, [r4, #52]	; 0x34
 801bd22:	e7c1      	b.n	801bca8 <__sflush_r+0x1c>
 801bd24:	6a21      	ldr	r1, [r4, #32]
 801bd26:	2301      	movs	r3, #1
 801bd28:	4628      	mov	r0, r5
 801bd2a:	47b0      	blx	r6
 801bd2c:	1c41      	adds	r1, r0, #1
 801bd2e:	d1c7      	bne.n	801bcc0 <__sflush_r+0x34>
 801bd30:	682b      	ldr	r3, [r5, #0]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d0c4      	beq.n	801bcc0 <__sflush_r+0x34>
 801bd36:	2b1d      	cmp	r3, #29
 801bd38:	d001      	beq.n	801bd3e <__sflush_r+0xb2>
 801bd3a:	2b16      	cmp	r3, #22
 801bd3c:	d101      	bne.n	801bd42 <__sflush_r+0xb6>
 801bd3e:	602f      	str	r7, [r5, #0]
 801bd40:	e7b1      	b.n	801bca6 <__sflush_r+0x1a>
 801bd42:	89a3      	ldrh	r3, [r4, #12]
 801bd44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd48:	81a3      	strh	r3, [r4, #12]
 801bd4a:	e7ad      	b.n	801bca8 <__sflush_r+0x1c>
 801bd4c:	690f      	ldr	r7, [r1, #16]
 801bd4e:	2f00      	cmp	r7, #0
 801bd50:	d0a9      	beq.n	801bca6 <__sflush_r+0x1a>
 801bd52:	0793      	lsls	r3, r2, #30
 801bd54:	680e      	ldr	r6, [r1, #0]
 801bd56:	bf08      	it	eq
 801bd58:	694b      	ldreq	r3, [r1, #20]
 801bd5a:	600f      	str	r7, [r1, #0]
 801bd5c:	bf18      	it	ne
 801bd5e:	2300      	movne	r3, #0
 801bd60:	eba6 0807 	sub.w	r8, r6, r7
 801bd64:	608b      	str	r3, [r1, #8]
 801bd66:	f1b8 0f00 	cmp.w	r8, #0
 801bd6a:	dd9c      	ble.n	801bca6 <__sflush_r+0x1a>
 801bd6c:	6a21      	ldr	r1, [r4, #32]
 801bd6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bd70:	4643      	mov	r3, r8
 801bd72:	463a      	mov	r2, r7
 801bd74:	4628      	mov	r0, r5
 801bd76:	47b0      	blx	r6
 801bd78:	2800      	cmp	r0, #0
 801bd7a:	dc06      	bgt.n	801bd8a <__sflush_r+0xfe>
 801bd7c:	89a3      	ldrh	r3, [r4, #12]
 801bd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd82:	81a3      	strh	r3, [r4, #12]
 801bd84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd88:	e78e      	b.n	801bca8 <__sflush_r+0x1c>
 801bd8a:	4407      	add	r7, r0
 801bd8c:	eba8 0800 	sub.w	r8, r8, r0
 801bd90:	e7e9      	b.n	801bd66 <__sflush_r+0xda>
 801bd92:	bf00      	nop
 801bd94:	20400001 	.word	0x20400001

0801bd98 <_fflush_r>:
 801bd98:	b538      	push	{r3, r4, r5, lr}
 801bd9a:	690b      	ldr	r3, [r1, #16]
 801bd9c:	4605      	mov	r5, r0
 801bd9e:	460c      	mov	r4, r1
 801bda0:	b913      	cbnz	r3, 801bda8 <_fflush_r+0x10>
 801bda2:	2500      	movs	r5, #0
 801bda4:	4628      	mov	r0, r5
 801bda6:	bd38      	pop	{r3, r4, r5, pc}
 801bda8:	b118      	cbz	r0, 801bdb2 <_fflush_r+0x1a>
 801bdaa:	6983      	ldr	r3, [r0, #24]
 801bdac:	b90b      	cbnz	r3, 801bdb2 <_fflush_r+0x1a>
 801bdae:	f000 f887 	bl	801bec0 <__sinit>
 801bdb2:	4b14      	ldr	r3, [pc, #80]	; (801be04 <_fflush_r+0x6c>)
 801bdb4:	429c      	cmp	r4, r3
 801bdb6:	d11b      	bne.n	801bdf0 <_fflush_r+0x58>
 801bdb8:	686c      	ldr	r4, [r5, #4]
 801bdba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d0ef      	beq.n	801bda2 <_fflush_r+0xa>
 801bdc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bdc4:	07d0      	lsls	r0, r2, #31
 801bdc6:	d404      	bmi.n	801bdd2 <_fflush_r+0x3a>
 801bdc8:	0599      	lsls	r1, r3, #22
 801bdca:	d402      	bmi.n	801bdd2 <_fflush_r+0x3a>
 801bdcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bdce:	f000 f927 	bl	801c020 <__retarget_lock_acquire_recursive>
 801bdd2:	4628      	mov	r0, r5
 801bdd4:	4621      	mov	r1, r4
 801bdd6:	f7ff ff59 	bl	801bc8c <__sflush_r>
 801bdda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bddc:	07da      	lsls	r2, r3, #31
 801bdde:	4605      	mov	r5, r0
 801bde0:	d4e0      	bmi.n	801bda4 <_fflush_r+0xc>
 801bde2:	89a3      	ldrh	r3, [r4, #12]
 801bde4:	059b      	lsls	r3, r3, #22
 801bde6:	d4dd      	bmi.n	801bda4 <_fflush_r+0xc>
 801bde8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bdea:	f000 f91a 	bl	801c022 <__retarget_lock_release_recursive>
 801bdee:	e7d9      	b.n	801bda4 <_fflush_r+0xc>
 801bdf0:	4b05      	ldr	r3, [pc, #20]	; (801be08 <_fflush_r+0x70>)
 801bdf2:	429c      	cmp	r4, r3
 801bdf4:	d101      	bne.n	801bdfa <_fflush_r+0x62>
 801bdf6:	68ac      	ldr	r4, [r5, #8]
 801bdf8:	e7df      	b.n	801bdba <_fflush_r+0x22>
 801bdfa:	4b04      	ldr	r3, [pc, #16]	; (801be0c <_fflush_r+0x74>)
 801bdfc:	429c      	cmp	r4, r3
 801bdfe:	bf08      	it	eq
 801be00:	68ec      	ldreq	r4, [r5, #12]
 801be02:	e7da      	b.n	801bdba <_fflush_r+0x22>
 801be04:	08020d84 	.word	0x08020d84
 801be08:	08020da4 	.word	0x08020da4
 801be0c:	08020d64 	.word	0x08020d64

0801be10 <std>:
 801be10:	2300      	movs	r3, #0
 801be12:	b510      	push	{r4, lr}
 801be14:	4604      	mov	r4, r0
 801be16:	e9c0 3300 	strd	r3, r3, [r0]
 801be1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801be1e:	6083      	str	r3, [r0, #8]
 801be20:	8181      	strh	r1, [r0, #12]
 801be22:	6643      	str	r3, [r0, #100]	; 0x64
 801be24:	81c2      	strh	r2, [r0, #14]
 801be26:	6183      	str	r3, [r0, #24]
 801be28:	4619      	mov	r1, r3
 801be2a:	2208      	movs	r2, #8
 801be2c:	305c      	adds	r0, #92	; 0x5c
 801be2e:	f7ff fd67 	bl	801b900 <memset>
 801be32:	4b05      	ldr	r3, [pc, #20]	; (801be48 <std+0x38>)
 801be34:	6263      	str	r3, [r4, #36]	; 0x24
 801be36:	4b05      	ldr	r3, [pc, #20]	; (801be4c <std+0x3c>)
 801be38:	62a3      	str	r3, [r4, #40]	; 0x28
 801be3a:	4b05      	ldr	r3, [pc, #20]	; (801be50 <std+0x40>)
 801be3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801be3e:	4b05      	ldr	r3, [pc, #20]	; (801be54 <std+0x44>)
 801be40:	6224      	str	r4, [r4, #32]
 801be42:	6323      	str	r3, [r4, #48]	; 0x30
 801be44:	bd10      	pop	{r4, pc}
 801be46:	bf00      	nop
 801be48:	0801c84d 	.word	0x0801c84d
 801be4c:	0801c86f 	.word	0x0801c86f
 801be50:	0801c8a7 	.word	0x0801c8a7
 801be54:	0801c8cb 	.word	0x0801c8cb

0801be58 <_cleanup_r>:
 801be58:	4901      	ldr	r1, [pc, #4]	; (801be60 <_cleanup_r+0x8>)
 801be5a:	f000 b8c1 	b.w	801bfe0 <_fwalk_reent>
 801be5e:	bf00      	nop
 801be60:	0801bd99 	.word	0x0801bd99

0801be64 <__sfmoreglue>:
 801be64:	b570      	push	{r4, r5, r6, lr}
 801be66:	1e4a      	subs	r2, r1, #1
 801be68:	2568      	movs	r5, #104	; 0x68
 801be6a:	4355      	muls	r5, r2
 801be6c:	460e      	mov	r6, r1
 801be6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801be72:	f000 f993 	bl	801c19c <_malloc_r>
 801be76:	4604      	mov	r4, r0
 801be78:	b140      	cbz	r0, 801be8c <__sfmoreglue+0x28>
 801be7a:	2100      	movs	r1, #0
 801be7c:	e9c0 1600 	strd	r1, r6, [r0]
 801be80:	300c      	adds	r0, #12
 801be82:	60a0      	str	r0, [r4, #8]
 801be84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801be88:	f7ff fd3a 	bl	801b900 <memset>
 801be8c:	4620      	mov	r0, r4
 801be8e:	bd70      	pop	{r4, r5, r6, pc}

0801be90 <__sfp_lock_acquire>:
 801be90:	4801      	ldr	r0, [pc, #4]	; (801be98 <__sfp_lock_acquire+0x8>)
 801be92:	f000 b8c5 	b.w	801c020 <__retarget_lock_acquire_recursive>
 801be96:	bf00      	nop
 801be98:	200106b8 	.word	0x200106b8

0801be9c <__sfp_lock_release>:
 801be9c:	4801      	ldr	r0, [pc, #4]	; (801bea4 <__sfp_lock_release+0x8>)
 801be9e:	f000 b8c0 	b.w	801c022 <__retarget_lock_release_recursive>
 801bea2:	bf00      	nop
 801bea4:	200106b8 	.word	0x200106b8

0801bea8 <__sinit_lock_acquire>:
 801bea8:	4801      	ldr	r0, [pc, #4]	; (801beb0 <__sinit_lock_acquire+0x8>)
 801beaa:	f000 b8b9 	b.w	801c020 <__retarget_lock_acquire_recursive>
 801beae:	bf00      	nop
 801beb0:	200106b3 	.word	0x200106b3

0801beb4 <__sinit_lock_release>:
 801beb4:	4801      	ldr	r0, [pc, #4]	; (801bebc <__sinit_lock_release+0x8>)
 801beb6:	f000 b8b4 	b.w	801c022 <__retarget_lock_release_recursive>
 801beba:	bf00      	nop
 801bebc:	200106b3 	.word	0x200106b3

0801bec0 <__sinit>:
 801bec0:	b510      	push	{r4, lr}
 801bec2:	4604      	mov	r4, r0
 801bec4:	f7ff fff0 	bl	801bea8 <__sinit_lock_acquire>
 801bec8:	69a3      	ldr	r3, [r4, #24]
 801beca:	b11b      	cbz	r3, 801bed4 <__sinit+0x14>
 801becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bed0:	f7ff bff0 	b.w	801beb4 <__sinit_lock_release>
 801bed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bed8:	6523      	str	r3, [r4, #80]	; 0x50
 801beda:	4b13      	ldr	r3, [pc, #76]	; (801bf28 <__sinit+0x68>)
 801bedc:	4a13      	ldr	r2, [pc, #76]	; (801bf2c <__sinit+0x6c>)
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	62a2      	str	r2, [r4, #40]	; 0x28
 801bee2:	42a3      	cmp	r3, r4
 801bee4:	bf04      	itt	eq
 801bee6:	2301      	moveq	r3, #1
 801bee8:	61a3      	streq	r3, [r4, #24]
 801beea:	4620      	mov	r0, r4
 801beec:	f000 f820 	bl	801bf30 <__sfp>
 801bef0:	6060      	str	r0, [r4, #4]
 801bef2:	4620      	mov	r0, r4
 801bef4:	f000 f81c 	bl	801bf30 <__sfp>
 801bef8:	60a0      	str	r0, [r4, #8]
 801befa:	4620      	mov	r0, r4
 801befc:	f000 f818 	bl	801bf30 <__sfp>
 801bf00:	2200      	movs	r2, #0
 801bf02:	60e0      	str	r0, [r4, #12]
 801bf04:	2104      	movs	r1, #4
 801bf06:	6860      	ldr	r0, [r4, #4]
 801bf08:	f7ff ff82 	bl	801be10 <std>
 801bf0c:	68a0      	ldr	r0, [r4, #8]
 801bf0e:	2201      	movs	r2, #1
 801bf10:	2109      	movs	r1, #9
 801bf12:	f7ff ff7d 	bl	801be10 <std>
 801bf16:	68e0      	ldr	r0, [r4, #12]
 801bf18:	2202      	movs	r2, #2
 801bf1a:	2112      	movs	r1, #18
 801bf1c:	f7ff ff78 	bl	801be10 <std>
 801bf20:	2301      	movs	r3, #1
 801bf22:	61a3      	str	r3, [r4, #24]
 801bf24:	e7d2      	b.n	801becc <__sinit+0xc>
 801bf26:	bf00      	nop
 801bf28:	08020cac 	.word	0x08020cac
 801bf2c:	0801be59 	.word	0x0801be59

0801bf30 <__sfp>:
 801bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf32:	4607      	mov	r7, r0
 801bf34:	f7ff ffac 	bl	801be90 <__sfp_lock_acquire>
 801bf38:	4b1e      	ldr	r3, [pc, #120]	; (801bfb4 <__sfp+0x84>)
 801bf3a:	681e      	ldr	r6, [r3, #0]
 801bf3c:	69b3      	ldr	r3, [r6, #24]
 801bf3e:	b913      	cbnz	r3, 801bf46 <__sfp+0x16>
 801bf40:	4630      	mov	r0, r6
 801bf42:	f7ff ffbd 	bl	801bec0 <__sinit>
 801bf46:	3648      	adds	r6, #72	; 0x48
 801bf48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bf4c:	3b01      	subs	r3, #1
 801bf4e:	d503      	bpl.n	801bf58 <__sfp+0x28>
 801bf50:	6833      	ldr	r3, [r6, #0]
 801bf52:	b30b      	cbz	r3, 801bf98 <__sfp+0x68>
 801bf54:	6836      	ldr	r6, [r6, #0]
 801bf56:	e7f7      	b.n	801bf48 <__sfp+0x18>
 801bf58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bf5c:	b9d5      	cbnz	r5, 801bf94 <__sfp+0x64>
 801bf5e:	4b16      	ldr	r3, [pc, #88]	; (801bfb8 <__sfp+0x88>)
 801bf60:	60e3      	str	r3, [r4, #12]
 801bf62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bf66:	6665      	str	r5, [r4, #100]	; 0x64
 801bf68:	f000 f859 	bl	801c01e <__retarget_lock_init_recursive>
 801bf6c:	f7ff ff96 	bl	801be9c <__sfp_lock_release>
 801bf70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bf74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bf78:	6025      	str	r5, [r4, #0]
 801bf7a:	61a5      	str	r5, [r4, #24]
 801bf7c:	2208      	movs	r2, #8
 801bf7e:	4629      	mov	r1, r5
 801bf80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bf84:	f7ff fcbc 	bl	801b900 <memset>
 801bf88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bf8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bf90:	4620      	mov	r0, r4
 801bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf94:	3468      	adds	r4, #104	; 0x68
 801bf96:	e7d9      	b.n	801bf4c <__sfp+0x1c>
 801bf98:	2104      	movs	r1, #4
 801bf9a:	4638      	mov	r0, r7
 801bf9c:	f7ff ff62 	bl	801be64 <__sfmoreglue>
 801bfa0:	4604      	mov	r4, r0
 801bfa2:	6030      	str	r0, [r6, #0]
 801bfa4:	2800      	cmp	r0, #0
 801bfa6:	d1d5      	bne.n	801bf54 <__sfp+0x24>
 801bfa8:	f7ff ff78 	bl	801be9c <__sfp_lock_release>
 801bfac:	230c      	movs	r3, #12
 801bfae:	603b      	str	r3, [r7, #0]
 801bfb0:	e7ee      	b.n	801bf90 <__sfp+0x60>
 801bfb2:	bf00      	nop
 801bfb4:	08020cac 	.word	0x08020cac
 801bfb8:	ffff0001 	.word	0xffff0001

0801bfbc <fiprintf>:
 801bfbc:	b40e      	push	{r1, r2, r3}
 801bfbe:	b503      	push	{r0, r1, lr}
 801bfc0:	4601      	mov	r1, r0
 801bfc2:	ab03      	add	r3, sp, #12
 801bfc4:	4805      	ldr	r0, [pc, #20]	; (801bfdc <fiprintf+0x20>)
 801bfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 801bfca:	6800      	ldr	r0, [r0, #0]
 801bfcc:	9301      	str	r3, [sp, #4]
 801bfce:	f000 f969 	bl	801c2a4 <_vfiprintf_r>
 801bfd2:	b002      	add	sp, #8
 801bfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 801bfd8:	b003      	add	sp, #12
 801bfda:	4770      	bx	lr
 801bfdc:	20000020 	.word	0x20000020

0801bfe0 <_fwalk_reent>:
 801bfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bfe4:	4606      	mov	r6, r0
 801bfe6:	4688      	mov	r8, r1
 801bfe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bfec:	2700      	movs	r7, #0
 801bfee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bff2:	f1b9 0901 	subs.w	r9, r9, #1
 801bff6:	d505      	bpl.n	801c004 <_fwalk_reent+0x24>
 801bff8:	6824      	ldr	r4, [r4, #0]
 801bffa:	2c00      	cmp	r4, #0
 801bffc:	d1f7      	bne.n	801bfee <_fwalk_reent+0xe>
 801bffe:	4638      	mov	r0, r7
 801c000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c004:	89ab      	ldrh	r3, [r5, #12]
 801c006:	2b01      	cmp	r3, #1
 801c008:	d907      	bls.n	801c01a <_fwalk_reent+0x3a>
 801c00a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c00e:	3301      	adds	r3, #1
 801c010:	d003      	beq.n	801c01a <_fwalk_reent+0x3a>
 801c012:	4629      	mov	r1, r5
 801c014:	4630      	mov	r0, r6
 801c016:	47c0      	blx	r8
 801c018:	4307      	orrs	r7, r0
 801c01a:	3568      	adds	r5, #104	; 0x68
 801c01c:	e7e9      	b.n	801bff2 <_fwalk_reent+0x12>

0801c01e <__retarget_lock_init_recursive>:
 801c01e:	4770      	bx	lr

0801c020 <__retarget_lock_acquire_recursive>:
 801c020:	4770      	bx	lr

0801c022 <__retarget_lock_release_recursive>:
 801c022:	4770      	bx	lr

0801c024 <__swhatbuf_r>:
 801c024:	b570      	push	{r4, r5, r6, lr}
 801c026:	460e      	mov	r6, r1
 801c028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c02c:	2900      	cmp	r1, #0
 801c02e:	b096      	sub	sp, #88	; 0x58
 801c030:	4614      	mov	r4, r2
 801c032:	461d      	mov	r5, r3
 801c034:	da07      	bge.n	801c046 <__swhatbuf_r+0x22>
 801c036:	2300      	movs	r3, #0
 801c038:	602b      	str	r3, [r5, #0]
 801c03a:	89b3      	ldrh	r3, [r6, #12]
 801c03c:	061a      	lsls	r2, r3, #24
 801c03e:	d410      	bmi.n	801c062 <__swhatbuf_r+0x3e>
 801c040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c044:	e00e      	b.n	801c064 <__swhatbuf_r+0x40>
 801c046:	466a      	mov	r2, sp
 801c048:	f000 fc6e 	bl	801c928 <_fstat_r>
 801c04c:	2800      	cmp	r0, #0
 801c04e:	dbf2      	blt.n	801c036 <__swhatbuf_r+0x12>
 801c050:	9a01      	ldr	r2, [sp, #4]
 801c052:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c056:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c05a:	425a      	negs	r2, r3
 801c05c:	415a      	adcs	r2, r3
 801c05e:	602a      	str	r2, [r5, #0]
 801c060:	e7ee      	b.n	801c040 <__swhatbuf_r+0x1c>
 801c062:	2340      	movs	r3, #64	; 0x40
 801c064:	2000      	movs	r0, #0
 801c066:	6023      	str	r3, [r4, #0]
 801c068:	b016      	add	sp, #88	; 0x58
 801c06a:	bd70      	pop	{r4, r5, r6, pc}

0801c06c <__smakebuf_r>:
 801c06c:	898b      	ldrh	r3, [r1, #12]
 801c06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c070:	079d      	lsls	r5, r3, #30
 801c072:	4606      	mov	r6, r0
 801c074:	460c      	mov	r4, r1
 801c076:	d507      	bpl.n	801c088 <__smakebuf_r+0x1c>
 801c078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c07c:	6023      	str	r3, [r4, #0]
 801c07e:	6123      	str	r3, [r4, #16]
 801c080:	2301      	movs	r3, #1
 801c082:	6163      	str	r3, [r4, #20]
 801c084:	b002      	add	sp, #8
 801c086:	bd70      	pop	{r4, r5, r6, pc}
 801c088:	ab01      	add	r3, sp, #4
 801c08a:	466a      	mov	r2, sp
 801c08c:	f7ff ffca 	bl	801c024 <__swhatbuf_r>
 801c090:	9900      	ldr	r1, [sp, #0]
 801c092:	4605      	mov	r5, r0
 801c094:	4630      	mov	r0, r6
 801c096:	f000 f881 	bl	801c19c <_malloc_r>
 801c09a:	b948      	cbnz	r0, 801c0b0 <__smakebuf_r+0x44>
 801c09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0a0:	059a      	lsls	r2, r3, #22
 801c0a2:	d4ef      	bmi.n	801c084 <__smakebuf_r+0x18>
 801c0a4:	f023 0303 	bic.w	r3, r3, #3
 801c0a8:	f043 0302 	orr.w	r3, r3, #2
 801c0ac:	81a3      	strh	r3, [r4, #12]
 801c0ae:	e7e3      	b.n	801c078 <__smakebuf_r+0xc>
 801c0b0:	4b0d      	ldr	r3, [pc, #52]	; (801c0e8 <__smakebuf_r+0x7c>)
 801c0b2:	62b3      	str	r3, [r6, #40]	; 0x28
 801c0b4:	89a3      	ldrh	r3, [r4, #12]
 801c0b6:	6020      	str	r0, [r4, #0]
 801c0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c0bc:	81a3      	strh	r3, [r4, #12]
 801c0be:	9b00      	ldr	r3, [sp, #0]
 801c0c0:	6163      	str	r3, [r4, #20]
 801c0c2:	9b01      	ldr	r3, [sp, #4]
 801c0c4:	6120      	str	r0, [r4, #16]
 801c0c6:	b15b      	cbz	r3, 801c0e0 <__smakebuf_r+0x74>
 801c0c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c0cc:	4630      	mov	r0, r6
 801c0ce:	f000 fc3d 	bl	801c94c <_isatty_r>
 801c0d2:	b128      	cbz	r0, 801c0e0 <__smakebuf_r+0x74>
 801c0d4:	89a3      	ldrh	r3, [r4, #12]
 801c0d6:	f023 0303 	bic.w	r3, r3, #3
 801c0da:	f043 0301 	orr.w	r3, r3, #1
 801c0de:	81a3      	strh	r3, [r4, #12]
 801c0e0:	89a0      	ldrh	r0, [r4, #12]
 801c0e2:	4305      	orrs	r5, r0
 801c0e4:	81a5      	strh	r5, [r4, #12]
 801c0e6:	e7cd      	b.n	801c084 <__smakebuf_r+0x18>
 801c0e8:	0801be59 	.word	0x0801be59

0801c0ec <malloc>:
 801c0ec:	4b02      	ldr	r3, [pc, #8]	; (801c0f8 <malloc+0xc>)
 801c0ee:	4601      	mov	r1, r0
 801c0f0:	6818      	ldr	r0, [r3, #0]
 801c0f2:	f000 b853 	b.w	801c19c <_malloc_r>
 801c0f6:	bf00      	nop
 801c0f8:	20000020 	.word	0x20000020

0801c0fc <_free_r>:
 801c0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c0fe:	2900      	cmp	r1, #0
 801c100:	d048      	beq.n	801c194 <_free_r+0x98>
 801c102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c106:	9001      	str	r0, [sp, #4]
 801c108:	2b00      	cmp	r3, #0
 801c10a:	f1a1 0404 	sub.w	r4, r1, #4
 801c10e:	bfb8      	it	lt
 801c110:	18e4      	addlt	r4, r4, r3
 801c112:	f000 fc3d 	bl	801c990 <__malloc_lock>
 801c116:	4a20      	ldr	r2, [pc, #128]	; (801c198 <_free_r+0x9c>)
 801c118:	9801      	ldr	r0, [sp, #4]
 801c11a:	6813      	ldr	r3, [r2, #0]
 801c11c:	4615      	mov	r5, r2
 801c11e:	b933      	cbnz	r3, 801c12e <_free_r+0x32>
 801c120:	6063      	str	r3, [r4, #4]
 801c122:	6014      	str	r4, [r2, #0]
 801c124:	b003      	add	sp, #12
 801c126:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c12a:	f000 bc37 	b.w	801c99c <__malloc_unlock>
 801c12e:	42a3      	cmp	r3, r4
 801c130:	d90b      	bls.n	801c14a <_free_r+0x4e>
 801c132:	6821      	ldr	r1, [r4, #0]
 801c134:	1862      	adds	r2, r4, r1
 801c136:	4293      	cmp	r3, r2
 801c138:	bf04      	itt	eq
 801c13a:	681a      	ldreq	r2, [r3, #0]
 801c13c:	685b      	ldreq	r3, [r3, #4]
 801c13e:	6063      	str	r3, [r4, #4]
 801c140:	bf04      	itt	eq
 801c142:	1852      	addeq	r2, r2, r1
 801c144:	6022      	streq	r2, [r4, #0]
 801c146:	602c      	str	r4, [r5, #0]
 801c148:	e7ec      	b.n	801c124 <_free_r+0x28>
 801c14a:	461a      	mov	r2, r3
 801c14c:	685b      	ldr	r3, [r3, #4]
 801c14e:	b10b      	cbz	r3, 801c154 <_free_r+0x58>
 801c150:	42a3      	cmp	r3, r4
 801c152:	d9fa      	bls.n	801c14a <_free_r+0x4e>
 801c154:	6811      	ldr	r1, [r2, #0]
 801c156:	1855      	adds	r5, r2, r1
 801c158:	42a5      	cmp	r5, r4
 801c15a:	d10b      	bne.n	801c174 <_free_r+0x78>
 801c15c:	6824      	ldr	r4, [r4, #0]
 801c15e:	4421      	add	r1, r4
 801c160:	1854      	adds	r4, r2, r1
 801c162:	42a3      	cmp	r3, r4
 801c164:	6011      	str	r1, [r2, #0]
 801c166:	d1dd      	bne.n	801c124 <_free_r+0x28>
 801c168:	681c      	ldr	r4, [r3, #0]
 801c16a:	685b      	ldr	r3, [r3, #4]
 801c16c:	6053      	str	r3, [r2, #4]
 801c16e:	4421      	add	r1, r4
 801c170:	6011      	str	r1, [r2, #0]
 801c172:	e7d7      	b.n	801c124 <_free_r+0x28>
 801c174:	d902      	bls.n	801c17c <_free_r+0x80>
 801c176:	230c      	movs	r3, #12
 801c178:	6003      	str	r3, [r0, #0]
 801c17a:	e7d3      	b.n	801c124 <_free_r+0x28>
 801c17c:	6825      	ldr	r5, [r4, #0]
 801c17e:	1961      	adds	r1, r4, r5
 801c180:	428b      	cmp	r3, r1
 801c182:	bf04      	itt	eq
 801c184:	6819      	ldreq	r1, [r3, #0]
 801c186:	685b      	ldreq	r3, [r3, #4]
 801c188:	6063      	str	r3, [r4, #4]
 801c18a:	bf04      	itt	eq
 801c18c:	1949      	addeq	r1, r1, r5
 801c18e:	6021      	streq	r1, [r4, #0]
 801c190:	6054      	str	r4, [r2, #4]
 801c192:	e7c7      	b.n	801c124 <_free_r+0x28>
 801c194:	b003      	add	sp, #12
 801c196:	bd30      	pop	{r4, r5, pc}
 801c198:	20008c30 	.word	0x20008c30

0801c19c <_malloc_r>:
 801c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c19e:	1ccd      	adds	r5, r1, #3
 801c1a0:	f025 0503 	bic.w	r5, r5, #3
 801c1a4:	3508      	adds	r5, #8
 801c1a6:	2d0c      	cmp	r5, #12
 801c1a8:	bf38      	it	cc
 801c1aa:	250c      	movcc	r5, #12
 801c1ac:	2d00      	cmp	r5, #0
 801c1ae:	4606      	mov	r6, r0
 801c1b0:	db01      	blt.n	801c1b6 <_malloc_r+0x1a>
 801c1b2:	42a9      	cmp	r1, r5
 801c1b4:	d903      	bls.n	801c1be <_malloc_r+0x22>
 801c1b6:	230c      	movs	r3, #12
 801c1b8:	6033      	str	r3, [r6, #0]
 801c1ba:	2000      	movs	r0, #0
 801c1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1be:	f000 fbe7 	bl	801c990 <__malloc_lock>
 801c1c2:	4921      	ldr	r1, [pc, #132]	; (801c248 <_malloc_r+0xac>)
 801c1c4:	680a      	ldr	r2, [r1, #0]
 801c1c6:	4614      	mov	r4, r2
 801c1c8:	b99c      	cbnz	r4, 801c1f2 <_malloc_r+0x56>
 801c1ca:	4f20      	ldr	r7, [pc, #128]	; (801c24c <_malloc_r+0xb0>)
 801c1cc:	683b      	ldr	r3, [r7, #0]
 801c1ce:	b923      	cbnz	r3, 801c1da <_malloc_r+0x3e>
 801c1d0:	4621      	mov	r1, r4
 801c1d2:	4630      	mov	r0, r6
 801c1d4:	f000 fb2a 	bl	801c82c <_sbrk_r>
 801c1d8:	6038      	str	r0, [r7, #0]
 801c1da:	4629      	mov	r1, r5
 801c1dc:	4630      	mov	r0, r6
 801c1de:	f000 fb25 	bl	801c82c <_sbrk_r>
 801c1e2:	1c43      	adds	r3, r0, #1
 801c1e4:	d123      	bne.n	801c22e <_malloc_r+0x92>
 801c1e6:	230c      	movs	r3, #12
 801c1e8:	6033      	str	r3, [r6, #0]
 801c1ea:	4630      	mov	r0, r6
 801c1ec:	f000 fbd6 	bl	801c99c <__malloc_unlock>
 801c1f0:	e7e3      	b.n	801c1ba <_malloc_r+0x1e>
 801c1f2:	6823      	ldr	r3, [r4, #0]
 801c1f4:	1b5b      	subs	r3, r3, r5
 801c1f6:	d417      	bmi.n	801c228 <_malloc_r+0x8c>
 801c1f8:	2b0b      	cmp	r3, #11
 801c1fa:	d903      	bls.n	801c204 <_malloc_r+0x68>
 801c1fc:	6023      	str	r3, [r4, #0]
 801c1fe:	441c      	add	r4, r3
 801c200:	6025      	str	r5, [r4, #0]
 801c202:	e004      	b.n	801c20e <_malloc_r+0x72>
 801c204:	6863      	ldr	r3, [r4, #4]
 801c206:	42a2      	cmp	r2, r4
 801c208:	bf0c      	ite	eq
 801c20a:	600b      	streq	r3, [r1, #0]
 801c20c:	6053      	strne	r3, [r2, #4]
 801c20e:	4630      	mov	r0, r6
 801c210:	f000 fbc4 	bl	801c99c <__malloc_unlock>
 801c214:	f104 000b 	add.w	r0, r4, #11
 801c218:	1d23      	adds	r3, r4, #4
 801c21a:	f020 0007 	bic.w	r0, r0, #7
 801c21e:	1ac2      	subs	r2, r0, r3
 801c220:	d0cc      	beq.n	801c1bc <_malloc_r+0x20>
 801c222:	1a1b      	subs	r3, r3, r0
 801c224:	50a3      	str	r3, [r4, r2]
 801c226:	e7c9      	b.n	801c1bc <_malloc_r+0x20>
 801c228:	4622      	mov	r2, r4
 801c22a:	6864      	ldr	r4, [r4, #4]
 801c22c:	e7cc      	b.n	801c1c8 <_malloc_r+0x2c>
 801c22e:	1cc4      	adds	r4, r0, #3
 801c230:	f024 0403 	bic.w	r4, r4, #3
 801c234:	42a0      	cmp	r0, r4
 801c236:	d0e3      	beq.n	801c200 <_malloc_r+0x64>
 801c238:	1a21      	subs	r1, r4, r0
 801c23a:	4630      	mov	r0, r6
 801c23c:	f000 faf6 	bl	801c82c <_sbrk_r>
 801c240:	3001      	adds	r0, #1
 801c242:	d1dd      	bne.n	801c200 <_malloc_r+0x64>
 801c244:	e7cf      	b.n	801c1e6 <_malloc_r+0x4a>
 801c246:	bf00      	nop
 801c248:	20008c30 	.word	0x20008c30
 801c24c:	20008c34 	.word	0x20008c34

0801c250 <__sfputc_r>:
 801c250:	6893      	ldr	r3, [r2, #8]
 801c252:	3b01      	subs	r3, #1
 801c254:	2b00      	cmp	r3, #0
 801c256:	b410      	push	{r4}
 801c258:	6093      	str	r3, [r2, #8]
 801c25a:	da08      	bge.n	801c26e <__sfputc_r+0x1e>
 801c25c:	6994      	ldr	r4, [r2, #24]
 801c25e:	42a3      	cmp	r3, r4
 801c260:	db01      	blt.n	801c266 <__sfputc_r+0x16>
 801c262:	290a      	cmp	r1, #10
 801c264:	d103      	bne.n	801c26e <__sfputc_r+0x1e>
 801c266:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c26a:	f7ff bc31 	b.w	801bad0 <__swbuf_r>
 801c26e:	6813      	ldr	r3, [r2, #0]
 801c270:	1c58      	adds	r0, r3, #1
 801c272:	6010      	str	r0, [r2, #0]
 801c274:	7019      	strb	r1, [r3, #0]
 801c276:	4608      	mov	r0, r1
 801c278:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c27c:	4770      	bx	lr

0801c27e <__sfputs_r>:
 801c27e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c280:	4606      	mov	r6, r0
 801c282:	460f      	mov	r7, r1
 801c284:	4614      	mov	r4, r2
 801c286:	18d5      	adds	r5, r2, r3
 801c288:	42ac      	cmp	r4, r5
 801c28a:	d101      	bne.n	801c290 <__sfputs_r+0x12>
 801c28c:	2000      	movs	r0, #0
 801c28e:	e007      	b.n	801c2a0 <__sfputs_r+0x22>
 801c290:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c294:	463a      	mov	r2, r7
 801c296:	4630      	mov	r0, r6
 801c298:	f7ff ffda 	bl	801c250 <__sfputc_r>
 801c29c:	1c43      	adds	r3, r0, #1
 801c29e:	d1f3      	bne.n	801c288 <__sfputs_r+0xa>
 801c2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c2a4 <_vfiprintf_r>:
 801c2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2a8:	460d      	mov	r5, r1
 801c2aa:	b09d      	sub	sp, #116	; 0x74
 801c2ac:	4614      	mov	r4, r2
 801c2ae:	4698      	mov	r8, r3
 801c2b0:	4606      	mov	r6, r0
 801c2b2:	b118      	cbz	r0, 801c2bc <_vfiprintf_r+0x18>
 801c2b4:	6983      	ldr	r3, [r0, #24]
 801c2b6:	b90b      	cbnz	r3, 801c2bc <_vfiprintf_r+0x18>
 801c2b8:	f7ff fe02 	bl	801bec0 <__sinit>
 801c2bc:	4b89      	ldr	r3, [pc, #548]	; (801c4e4 <_vfiprintf_r+0x240>)
 801c2be:	429d      	cmp	r5, r3
 801c2c0:	d11b      	bne.n	801c2fa <_vfiprintf_r+0x56>
 801c2c2:	6875      	ldr	r5, [r6, #4]
 801c2c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c2c6:	07d9      	lsls	r1, r3, #31
 801c2c8:	d405      	bmi.n	801c2d6 <_vfiprintf_r+0x32>
 801c2ca:	89ab      	ldrh	r3, [r5, #12]
 801c2cc:	059a      	lsls	r2, r3, #22
 801c2ce:	d402      	bmi.n	801c2d6 <_vfiprintf_r+0x32>
 801c2d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c2d2:	f7ff fea5 	bl	801c020 <__retarget_lock_acquire_recursive>
 801c2d6:	89ab      	ldrh	r3, [r5, #12]
 801c2d8:	071b      	lsls	r3, r3, #28
 801c2da:	d501      	bpl.n	801c2e0 <_vfiprintf_r+0x3c>
 801c2dc:	692b      	ldr	r3, [r5, #16]
 801c2de:	b9eb      	cbnz	r3, 801c31c <_vfiprintf_r+0x78>
 801c2e0:	4629      	mov	r1, r5
 801c2e2:	4630      	mov	r0, r6
 801c2e4:	f7ff fc46 	bl	801bb74 <__swsetup_r>
 801c2e8:	b1c0      	cbz	r0, 801c31c <_vfiprintf_r+0x78>
 801c2ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c2ec:	07dc      	lsls	r4, r3, #31
 801c2ee:	d50e      	bpl.n	801c30e <_vfiprintf_r+0x6a>
 801c2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c2f4:	b01d      	add	sp, #116	; 0x74
 801c2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2fa:	4b7b      	ldr	r3, [pc, #492]	; (801c4e8 <_vfiprintf_r+0x244>)
 801c2fc:	429d      	cmp	r5, r3
 801c2fe:	d101      	bne.n	801c304 <_vfiprintf_r+0x60>
 801c300:	68b5      	ldr	r5, [r6, #8]
 801c302:	e7df      	b.n	801c2c4 <_vfiprintf_r+0x20>
 801c304:	4b79      	ldr	r3, [pc, #484]	; (801c4ec <_vfiprintf_r+0x248>)
 801c306:	429d      	cmp	r5, r3
 801c308:	bf08      	it	eq
 801c30a:	68f5      	ldreq	r5, [r6, #12]
 801c30c:	e7da      	b.n	801c2c4 <_vfiprintf_r+0x20>
 801c30e:	89ab      	ldrh	r3, [r5, #12]
 801c310:	0598      	lsls	r0, r3, #22
 801c312:	d4ed      	bmi.n	801c2f0 <_vfiprintf_r+0x4c>
 801c314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c316:	f7ff fe84 	bl	801c022 <__retarget_lock_release_recursive>
 801c31a:	e7e9      	b.n	801c2f0 <_vfiprintf_r+0x4c>
 801c31c:	2300      	movs	r3, #0
 801c31e:	9309      	str	r3, [sp, #36]	; 0x24
 801c320:	2320      	movs	r3, #32
 801c322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c326:	f8cd 800c 	str.w	r8, [sp, #12]
 801c32a:	2330      	movs	r3, #48	; 0x30
 801c32c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c4f0 <_vfiprintf_r+0x24c>
 801c330:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c334:	f04f 0901 	mov.w	r9, #1
 801c338:	4623      	mov	r3, r4
 801c33a:	469a      	mov	sl, r3
 801c33c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c340:	b10a      	cbz	r2, 801c346 <_vfiprintf_r+0xa2>
 801c342:	2a25      	cmp	r2, #37	; 0x25
 801c344:	d1f9      	bne.n	801c33a <_vfiprintf_r+0x96>
 801c346:	ebba 0b04 	subs.w	fp, sl, r4
 801c34a:	d00b      	beq.n	801c364 <_vfiprintf_r+0xc0>
 801c34c:	465b      	mov	r3, fp
 801c34e:	4622      	mov	r2, r4
 801c350:	4629      	mov	r1, r5
 801c352:	4630      	mov	r0, r6
 801c354:	f7ff ff93 	bl	801c27e <__sfputs_r>
 801c358:	3001      	adds	r0, #1
 801c35a:	f000 80aa 	beq.w	801c4b2 <_vfiprintf_r+0x20e>
 801c35e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c360:	445a      	add	r2, fp
 801c362:	9209      	str	r2, [sp, #36]	; 0x24
 801c364:	f89a 3000 	ldrb.w	r3, [sl]
 801c368:	2b00      	cmp	r3, #0
 801c36a:	f000 80a2 	beq.w	801c4b2 <_vfiprintf_r+0x20e>
 801c36e:	2300      	movs	r3, #0
 801c370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c378:	f10a 0a01 	add.w	sl, sl, #1
 801c37c:	9304      	str	r3, [sp, #16]
 801c37e:	9307      	str	r3, [sp, #28]
 801c380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c384:	931a      	str	r3, [sp, #104]	; 0x68
 801c386:	4654      	mov	r4, sl
 801c388:	2205      	movs	r2, #5
 801c38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c38e:	4858      	ldr	r0, [pc, #352]	; (801c4f0 <_vfiprintf_r+0x24c>)
 801c390:	f7e3 ff6e 	bl	8000270 <memchr>
 801c394:	9a04      	ldr	r2, [sp, #16]
 801c396:	b9d8      	cbnz	r0, 801c3d0 <_vfiprintf_r+0x12c>
 801c398:	06d1      	lsls	r1, r2, #27
 801c39a:	bf44      	itt	mi
 801c39c:	2320      	movmi	r3, #32
 801c39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c3a2:	0713      	lsls	r3, r2, #28
 801c3a4:	bf44      	itt	mi
 801c3a6:	232b      	movmi	r3, #43	; 0x2b
 801c3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c3ac:	f89a 3000 	ldrb.w	r3, [sl]
 801c3b0:	2b2a      	cmp	r3, #42	; 0x2a
 801c3b2:	d015      	beq.n	801c3e0 <_vfiprintf_r+0x13c>
 801c3b4:	9a07      	ldr	r2, [sp, #28]
 801c3b6:	4654      	mov	r4, sl
 801c3b8:	2000      	movs	r0, #0
 801c3ba:	f04f 0c0a 	mov.w	ip, #10
 801c3be:	4621      	mov	r1, r4
 801c3c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c3c4:	3b30      	subs	r3, #48	; 0x30
 801c3c6:	2b09      	cmp	r3, #9
 801c3c8:	d94e      	bls.n	801c468 <_vfiprintf_r+0x1c4>
 801c3ca:	b1b0      	cbz	r0, 801c3fa <_vfiprintf_r+0x156>
 801c3cc:	9207      	str	r2, [sp, #28]
 801c3ce:	e014      	b.n	801c3fa <_vfiprintf_r+0x156>
 801c3d0:	eba0 0308 	sub.w	r3, r0, r8
 801c3d4:	fa09 f303 	lsl.w	r3, r9, r3
 801c3d8:	4313      	orrs	r3, r2
 801c3da:	9304      	str	r3, [sp, #16]
 801c3dc:	46a2      	mov	sl, r4
 801c3de:	e7d2      	b.n	801c386 <_vfiprintf_r+0xe2>
 801c3e0:	9b03      	ldr	r3, [sp, #12]
 801c3e2:	1d19      	adds	r1, r3, #4
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	9103      	str	r1, [sp, #12]
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	bfbb      	ittet	lt
 801c3ec:	425b      	neglt	r3, r3
 801c3ee:	f042 0202 	orrlt.w	r2, r2, #2
 801c3f2:	9307      	strge	r3, [sp, #28]
 801c3f4:	9307      	strlt	r3, [sp, #28]
 801c3f6:	bfb8      	it	lt
 801c3f8:	9204      	strlt	r2, [sp, #16]
 801c3fa:	7823      	ldrb	r3, [r4, #0]
 801c3fc:	2b2e      	cmp	r3, #46	; 0x2e
 801c3fe:	d10c      	bne.n	801c41a <_vfiprintf_r+0x176>
 801c400:	7863      	ldrb	r3, [r4, #1]
 801c402:	2b2a      	cmp	r3, #42	; 0x2a
 801c404:	d135      	bne.n	801c472 <_vfiprintf_r+0x1ce>
 801c406:	9b03      	ldr	r3, [sp, #12]
 801c408:	1d1a      	adds	r2, r3, #4
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	9203      	str	r2, [sp, #12]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	bfb8      	it	lt
 801c412:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c416:	3402      	adds	r4, #2
 801c418:	9305      	str	r3, [sp, #20]
 801c41a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c500 <_vfiprintf_r+0x25c>
 801c41e:	7821      	ldrb	r1, [r4, #0]
 801c420:	2203      	movs	r2, #3
 801c422:	4650      	mov	r0, sl
 801c424:	f7e3 ff24 	bl	8000270 <memchr>
 801c428:	b140      	cbz	r0, 801c43c <_vfiprintf_r+0x198>
 801c42a:	2340      	movs	r3, #64	; 0x40
 801c42c:	eba0 000a 	sub.w	r0, r0, sl
 801c430:	fa03 f000 	lsl.w	r0, r3, r0
 801c434:	9b04      	ldr	r3, [sp, #16]
 801c436:	4303      	orrs	r3, r0
 801c438:	3401      	adds	r4, #1
 801c43a:	9304      	str	r3, [sp, #16]
 801c43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c440:	482c      	ldr	r0, [pc, #176]	; (801c4f4 <_vfiprintf_r+0x250>)
 801c442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c446:	2206      	movs	r2, #6
 801c448:	f7e3 ff12 	bl	8000270 <memchr>
 801c44c:	2800      	cmp	r0, #0
 801c44e:	d03f      	beq.n	801c4d0 <_vfiprintf_r+0x22c>
 801c450:	4b29      	ldr	r3, [pc, #164]	; (801c4f8 <_vfiprintf_r+0x254>)
 801c452:	bb1b      	cbnz	r3, 801c49c <_vfiprintf_r+0x1f8>
 801c454:	9b03      	ldr	r3, [sp, #12]
 801c456:	3307      	adds	r3, #7
 801c458:	f023 0307 	bic.w	r3, r3, #7
 801c45c:	3308      	adds	r3, #8
 801c45e:	9303      	str	r3, [sp, #12]
 801c460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c462:	443b      	add	r3, r7
 801c464:	9309      	str	r3, [sp, #36]	; 0x24
 801c466:	e767      	b.n	801c338 <_vfiprintf_r+0x94>
 801c468:	fb0c 3202 	mla	r2, ip, r2, r3
 801c46c:	460c      	mov	r4, r1
 801c46e:	2001      	movs	r0, #1
 801c470:	e7a5      	b.n	801c3be <_vfiprintf_r+0x11a>
 801c472:	2300      	movs	r3, #0
 801c474:	3401      	adds	r4, #1
 801c476:	9305      	str	r3, [sp, #20]
 801c478:	4619      	mov	r1, r3
 801c47a:	f04f 0c0a 	mov.w	ip, #10
 801c47e:	4620      	mov	r0, r4
 801c480:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c484:	3a30      	subs	r2, #48	; 0x30
 801c486:	2a09      	cmp	r2, #9
 801c488:	d903      	bls.n	801c492 <_vfiprintf_r+0x1ee>
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d0c5      	beq.n	801c41a <_vfiprintf_r+0x176>
 801c48e:	9105      	str	r1, [sp, #20]
 801c490:	e7c3      	b.n	801c41a <_vfiprintf_r+0x176>
 801c492:	fb0c 2101 	mla	r1, ip, r1, r2
 801c496:	4604      	mov	r4, r0
 801c498:	2301      	movs	r3, #1
 801c49a:	e7f0      	b.n	801c47e <_vfiprintf_r+0x1da>
 801c49c:	ab03      	add	r3, sp, #12
 801c49e:	9300      	str	r3, [sp, #0]
 801c4a0:	462a      	mov	r2, r5
 801c4a2:	4b16      	ldr	r3, [pc, #88]	; (801c4fc <_vfiprintf_r+0x258>)
 801c4a4:	a904      	add	r1, sp, #16
 801c4a6:	4630      	mov	r0, r6
 801c4a8:	f3af 8000 	nop.w
 801c4ac:	4607      	mov	r7, r0
 801c4ae:	1c78      	adds	r0, r7, #1
 801c4b0:	d1d6      	bne.n	801c460 <_vfiprintf_r+0x1bc>
 801c4b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c4b4:	07d9      	lsls	r1, r3, #31
 801c4b6:	d405      	bmi.n	801c4c4 <_vfiprintf_r+0x220>
 801c4b8:	89ab      	ldrh	r3, [r5, #12]
 801c4ba:	059a      	lsls	r2, r3, #22
 801c4bc:	d402      	bmi.n	801c4c4 <_vfiprintf_r+0x220>
 801c4be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c4c0:	f7ff fdaf 	bl	801c022 <__retarget_lock_release_recursive>
 801c4c4:	89ab      	ldrh	r3, [r5, #12]
 801c4c6:	065b      	lsls	r3, r3, #25
 801c4c8:	f53f af12 	bmi.w	801c2f0 <_vfiprintf_r+0x4c>
 801c4cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c4ce:	e711      	b.n	801c2f4 <_vfiprintf_r+0x50>
 801c4d0:	ab03      	add	r3, sp, #12
 801c4d2:	9300      	str	r3, [sp, #0]
 801c4d4:	462a      	mov	r2, r5
 801c4d6:	4b09      	ldr	r3, [pc, #36]	; (801c4fc <_vfiprintf_r+0x258>)
 801c4d8:	a904      	add	r1, sp, #16
 801c4da:	4630      	mov	r0, r6
 801c4dc:	f000 f880 	bl	801c5e0 <_printf_i>
 801c4e0:	e7e4      	b.n	801c4ac <_vfiprintf_r+0x208>
 801c4e2:	bf00      	nop
 801c4e4:	08020d84 	.word	0x08020d84
 801c4e8:	08020da4 	.word	0x08020da4
 801c4ec:	08020d64 	.word	0x08020d64
 801c4f0:	08020dc4 	.word	0x08020dc4
 801c4f4:	08020dce 	.word	0x08020dce
 801c4f8:	00000000 	.word	0x00000000
 801c4fc:	0801c27f 	.word	0x0801c27f
 801c500:	08020dca 	.word	0x08020dca

0801c504 <_printf_common>:
 801c504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c508:	4616      	mov	r6, r2
 801c50a:	4699      	mov	r9, r3
 801c50c:	688a      	ldr	r2, [r1, #8]
 801c50e:	690b      	ldr	r3, [r1, #16]
 801c510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c514:	4293      	cmp	r3, r2
 801c516:	bfb8      	it	lt
 801c518:	4613      	movlt	r3, r2
 801c51a:	6033      	str	r3, [r6, #0]
 801c51c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c520:	4607      	mov	r7, r0
 801c522:	460c      	mov	r4, r1
 801c524:	b10a      	cbz	r2, 801c52a <_printf_common+0x26>
 801c526:	3301      	adds	r3, #1
 801c528:	6033      	str	r3, [r6, #0]
 801c52a:	6823      	ldr	r3, [r4, #0]
 801c52c:	0699      	lsls	r1, r3, #26
 801c52e:	bf42      	ittt	mi
 801c530:	6833      	ldrmi	r3, [r6, #0]
 801c532:	3302      	addmi	r3, #2
 801c534:	6033      	strmi	r3, [r6, #0]
 801c536:	6825      	ldr	r5, [r4, #0]
 801c538:	f015 0506 	ands.w	r5, r5, #6
 801c53c:	d106      	bne.n	801c54c <_printf_common+0x48>
 801c53e:	f104 0a19 	add.w	sl, r4, #25
 801c542:	68e3      	ldr	r3, [r4, #12]
 801c544:	6832      	ldr	r2, [r6, #0]
 801c546:	1a9b      	subs	r3, r3, r2
 801c548:	42ab      	cmp	r3, r5
 801c54a:	dc26      	bgt.n	801c59a <_printf_common+0x96>
 801c54c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c550:	1e13      	subs	r3, r2, #0
 801c552:	6822      	ldr	r2, [r4, #0]
 801c554:	bf18      	it	ne
 801c556:	2301      	movne	r3, #1
 801c558:	0692      	lsls	r2, r2, #26
 801c55a:	d42b      	bmi.n	801c5b4 <_printf_common+0xb0>
 801c55c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c560:	4649      	mov	r1, r9
 801c562:	4638      	mov	r0, r7
 801c564:	47c0      	blx	r8
 801c566:	3001      	adds	r0, #1
 801c568:	d01e      	beq.n	801c5a8 <_printf_common+0xa4>
 801c56a:	6823      	ldr	r3, [r4, #0]
 801c56c:	68e5      	ldr	r5, [r4, #12]
 801c56e:	6832      	ldr	r2, [r6, #0]
 801c570:	f003 0306 	and.w	r3, r3, #6
 801c574:	2b04      	cmp	r3, #4
 801c576:	bf08      	it	eq
 801c578:	1aad      	subeq	r5, r5, r2
 801c57a:	68a3      	ldr	r3, [r4, #8]
 801c57c:	6922      	ldr	r2, [r4, #16]
 801c57e:	bf0c      	ite	eq
 801c580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c584:	2500      	movne	r5, #0
 801c586:	4293      	cmp	r3, r2
 801c588:	bfc4      	itt	gt
 801c58a:	1a9b      	subgt	r3, r3, r2
 801c58c:	18ed      	addgt	r5, r5, r3
 801c58e:	2600      	movs	r6, #0
 801c590:	341a      	adds	r4, #26
 801c592:	42b5      	cmp	r5, r6
 801c594:	d11a      	bne.n	801c5cc <_printf_common+0xc8>
 801c596:	2000      	movs	r0, #0
 801c598:	e008      	b.n	801c5ac <_printf_common+0xa8>
 801c59a:	2301      	movs	r3, #1
 801c59c:	4652      	mov	r2, sl
 801c59e:	4649      	mov	r1, r9
 801c5a0:	4638      	mov	r0, r7
 801c5a2:	47c0      	blx	r8
 801c5a4:	3001      	adds	r0, #1
 801c5a6:	d103      	bne.n	801c5b0 <_printf_common+0xac>
 801c5a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5b0:	3501      	adds	r5, #1
 801c5b2:	e7c6      	b.n	801c542 <_printf_common+0x3e>
 801c5b4:	18e1      	adds	r1, r4, r3
 801c5b6:	1c5a      	adds	r2, r3, #1
 801c5b8:	2030      	movs	r0, #48	; 0x30
 801c5ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c5be:	4422      	add	r2, r4
 801c5c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c5c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c5c8:	3302      	adds	r3, #2
 801c5ca:	e7c7      	b.n	801c55c <_printf_common+0x58>
 801c5cc:	2301      	movs	r3, #1
 801c5ce:	4622      	mov	r2, r4
 801c5d0:	4649      	mov	r1, r9
 801c5d2:	4638      	mov	r0, r7
 801c5d4:	47c0      	blx	r8
 801c5d6:	3001      	adds	r0, #1
 801c5d8:	d0e6      	beq.n	801c5a8 <_printf_common+0xa4>
 801c5da:	3601      	adds	r6, #1
 801c5dc:	e7d9      	b.n	801c592 <_printf_common+0x8e>
	...

0801c5e0 <_printf_i>:
 801c5e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c5e4:	460c      	mov	r4, r1
 801c5e6:	4691      	mov	r9, r2
 801c5e8:	7e27      	ldrb	r7, [r4, #24]
 801c5ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c5ec:	2f78      	cmp	r7, #120	; 0x78
 801c5ee:	4680      	mov	r8, r0
 801c5f0:	469a      	mov	sl, r3
 801c5f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c5f6:	d807      	bhi.n	801c608 <_printf_i+0x28>
 801c5f8:	2f62      	cmp	r7, #98	; 0x62
 801c5fa:	d80a      	bhi.n	801c612 <_printf_i+0x32>
 801c5fc:	2f00      	cmp	r7, #0
 801c5fe:	f000 80d8 	beq.w	801c7b2 <_printf_i+0x1d2>
 801c602:	2f58      	cmp	r7, #88	; 0x58
 801c604:	f000 80a3 	beq.w	801c74e <_printf_i+0x16e>
 801c608:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c60c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c610:	e03a      	b.n	801c688 <_printf_i+0xa8>
 801c612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c616:	2b15      	cmp	r3, #21
 801c618:	d8f6      	bhi.n	801c608 <_printf_i+0x28>
 801c61a:	a001      	add	r0, pc, #4	; (adr r0, 801c620 <_printf_i+0x40>)
 801c61c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c620:	0801c679 	.word	0x0801c679
 801c624:	0801c68d 	.word	0x0801c68d
 801c628:	0801c609 	.word	0x0801c609
 801c62c:	0801c609 	.word	0x0801c609
 801c630:	0801c609 	.word	0x0801c609
 801c634:	0801c609 	.word	0x0801c609
 801c638:	0801c68d 	.word	0x0801c68d
 801c63c:	0801c609 	.word	0x0801c609
 801c640:	0801c609 	.word	0x0801c609
 801c644:	0801c609 	.word	0x0801c609
 801c648:	0801c609 	.word	0x0801c609
 801c64c:	0801c799 	.word	0x0801c799
 801c650:	0801c6bd 	.word	0x0801c6bd
 801c654:	0801c77b 	.word	0x0801c77b
 801c658:	0801c609 	.word	0x0801c609
 801c65c:	0801c609 	.word	0x0801c609
 801c660:	0801c7bb 	.word	0x0801c7bb
 801c664:	0801c609 	.word	0x0801c609
 801c668:	0801c6bd 	.word	0x0801c6bd
 801c66c:	0801c609 	.word	0x0801c609
 801c670:	0801c609 	.word	0x0801c609
 801c674:	0801c783 	.word	0x0801c783
 801c678:	680b      	ldr	r3, [r1, #0]
 801c67a:	1d1a      	adds	r2, r3, #4
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	600a      	str	r2, [r1, #0]
 801c680:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c688:	2301      	movs	r3, #1
 801c68a:	e0a3      	b.n	801c7d4 <_printf_i+0x1f4>
 801c68c:	6825      	ldr	r5, [r4, #0]
 801c68e:	6808      	ldr	r0, [r1, #0]
 801c690:	062e      	lsls	r6, r5, #24
 801c692:	f100 0304 	add.w	r3, r0, #4
 801c696:	d50a      	bpl.n	801c6ae <_printf_i+0xce>
 801c698:	6805      	ldr	r5, [r0, #0]
 801c69a:	600b      	str	r3, [r1, #0]
 801c69c:	2d00      	cmp	r5, #0
 801c69e:	da03      	bge.n	801c6a8 <_printf_i+0xc8>
 801c6a0:	232d      	movs	r3, #45	; 0x2d
 801c6a2:	426d      	negs	r5, r5
 801c6a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c6a8:	485e      	ldr	r0, [pc, #376]	; (801c824 <_printf_i+0x244>)
 801c6aa:	230a      	movs	r3, #10
 801c6ac:	e019      	b.n	801c6e2 <_printf_i+0x102>
 801c6ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c6b2:	6805      	ldr	r5, [r0, #0]
 801c6b4:	600b      	str	r3, [r1, #0]
 801c6b6:	bf18      	it	ne
 801c6b8:	b22d      	sxthne	r5, r5
 801c6ba:	e7ef      	b.n	801c69c <_printf_i+0xbc>
 801c6bc:	680b      	ldr	r3, [r1, #0]
 801c6be:	6825      	ldr	r5, [r4, #0]
 801c6c0:	1d18      	adds	r0, r3, #4
 801c6c2:	6008      	str	r0, [r1, #0]
 801c6c4:	0628      	lsls	r0, r5, #24
 801c6c6:	d501      	bpl.n	801c6cc <_printf_i+0xec>
 801c6c8:	681d      	ldr	r5, [r3, #0]
 801c6ca:	e002      	b.n	801c6d2 <_printf_i+0xf2>
 801c6cc:	0669      	lsls	r1, r5, #25
 801c6ce:	d5fb      	bpl.n	801c6c8 <_printf_i+0xe8>
 801c6d0:	881d      	ldrh	r5, [r3, #0]
 801c6d2:	4854      	ldr	r0, [pc, #336]	; (801c824 <_printf_i+0x244>)
 801c6d4:	2f6f      	cmp	r7, #111	; 0x6f
 801c6d6:	bf0c      	ite	eq
 801c6d8:	2308      	moveq	r3, #8
 801c6da:	230a      	movne	r3, #10
 801c6dc:	2100      	movs	r1, #0
 801c6de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c6e2:	6866      	ldr	r6, [r4, #4]
 801c6e4:	60a6      	str	r6, [r4, #8]
 801c6e6:	2e00      	cmp	r6, #0
 801c6e8:	bfa2      	ittt	ge
 801c6ea:	6821      	ldrge	r1, [r4, #0]
 801c6ec:	f021 0104 	bicge.w	r1, r1, #4
 801c6f0:	6021      	strge	r1, [r4, #0]
 801c6f2:	b90d      	cbnz	r5, 801c6f8 <_printf_i+0x118>
 801c6f4:	2e00      	cmp	r6, #0
 801c6f6:	d04d      	beq.n	801c794 <_printf_i+0x1b4>
 801c6f8:	4616      	mov	r6, r2
 801c6fa:	fbb5 f1f3 	udiv	r1, r5, r3
 801c6fe:	fb03 5711 	mls	r7, r3, r1, r5
 801c702:	5dc7      	ldrb	r7, [r0, r7]
 801c704:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c708:	462f      	mov	r7, r5
 801c70a:	42bb      	cmp	r3, r7
 801c70c:	460d      	mov	r5, r1
 801c70e:	d9f4      	bls.n	801c6fa <_printf_i+0x11a>
 801c710:	2b08      	cmp	r3, #8
 801c712:	d10b      	bne.n	801c72c <_printf_i+0x14c>
 801c714:	6823      	ldr	r3, [r4, #0]
 801c716:	07df      	lsls	r7, r3, #31
 801c718:	d508      	bpl.n	801c72c <_printf_i+0x14c>
 801c71a:	6923      	ldr	r3, [r4, #16]
 801c71c:	6861      	ldr	r1, [r4, #4]
 801c71e:	4299      	cmp	r1, r3
 801c720:	bfde      	ittt	le
 801c722:	2330      	movle	r3, #48	; 0x30
 801c724:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c728:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801c72c:	1b92      	subs	r2, r2, r6
 801c72e:	6122      	str	r2, [r4, #16]
 801c730:	f8cd a000 	str.w	sl, [sp]
 801c734:	464b      	mov	r3, r9
 801c736:	aa03      	add	r2, sp, #12
 801c738:	4621      	mov	r1, r4
 801c73a:	4640      	mov	r0, r8
 801c73c:	f7ff fee2 	bl	801c504 <_printf_common>
 801c740:	3001      	adds	r0, #1
 801c742:	d14c      	bne.n	801c7de <_printf_i+0x1fe>
 801c744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c748:	b004      	add	sp, #16
 801c74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c74e:	4835      	ldr	r0, [pc, #212]	; (801c824 <_printf_i+0x244>)
 801c750:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c754:	6823      	ldr	r3, [r4, #0]
 801c756:	680e      	ldr	r6, [r1, #0]
 801c758:	061f      	lsls	r7, r3, #24
 801c75a:	f856 5b04 	ldr.w	r5, [r6], #4
 801c75e:	600e      	str	r6, [r1, #0]
 801c760:	d514      	bpl.n	801c78c <_printf_i+0x1ac>
 801c762:	07d9      	lsls	r1, r3, #31
 801c764:	bf44      	itt	mi
 801c766:	f043 0320 	orrmi.w	r3, r3, #32
 801c76a:	6023      	strmi	r3, [r4, #0]
 801c76c:	b91d      	cbnz	r5, 801c776 <_printf_i+0x196>
 801c76e:	6823      	ldr	r3, [r4, #0]
 801c770:	f023 0320 	bic.w	r3, r3, #32
 801c774:	6023      	str	r3, [r4, #0]
 801c776:	2310      	movs	r3, #16
 801c778:	e7b0      	b.n	801c6dc <_printf_i+0xfc>
 801c77a:	6823      	ldr	r3, [r4, #0]
 801c77c:	f043 0320 	orr.w	r3, r3, #32
 801c780:	6023      	str	r3, [r4, #0]
 801c782:	2378      	movs	r3, #120	; 0x78
 801c784:	4828      	ldr	r0, [pc, #160]	; (801c828 <_printf_i+0x248>)
 801c786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c78a:	e7e3      	b.n	801c754 <_printf_i+0x174>
 801c78c:	065e      	lsls	r6, r3, #25
 801c78e:	bf48      	it	mi
 801c790:	b2ad      	uxthmi	r5, r5
 801c792:	e7e6      	b.n	801c762 <_printf_i+0x182>
 801c794:	4616      	mov	r6, r2
 801c796:	e7bb      	b.n	801c710 <_printf_i+0x130>
 801c798:	680b      	ldr	r3, [r1, #0]
 801c79a:	6826      	ldr	r6, [r4, #0]
 801c79c:	6960      	ldr	r0, [r4, #20]
 801c79e:	1d1d      	adds	r5, r3, #4
 801c7a0:	600d      	str	r5, [r1, #0]
 801c7a2:	0635      	lsls	r5, r6, #24
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	d501      	bpl.n	801c7ac <_printf_i+0x1cc>
 801c7a8:	6018      	str	r0, [r3, #0]
 801c7aa:	e002      	b.n	801c7b2 <_printf_i+0x1d2>
 801c7ac:	0671      	lsls	r1, r6, #25
 801c7ae:	d5fb      	bpl.n	801c7a8 <_printf_i+0x1c8>
 801c7b0:	8018      	strh	r0, [r3, #0]
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	6123      	str	r3, [r4, #16]
 801c7b6:	4616      	mov	r6, r2
 801c7b8:	e7ba      	b.n	801c730 <_printf_i+0x150>
 801c7ba:	680b      	ldr	r3, [r1, #0]
 801c7bc:	1d1a      	adds	r2, r3, #4
 801c7be:	600a      	str	r2, [r1, #0]
 801c7c0:	681e      	ldr	r6, [r3, #0]
 801c7c2:	6862      	ldr	r2, [r4, #4]
 801c7c4:	2100      	movs	r1, #0
 801c7c6:	4630      	mov	r0, r6
 801c7c8:	f7e3 fd52 	bl	8000270 <memchr>
 801c7cc:	b108      	cbz	r0, 801c7d2 <_printf_i+0x1f2>
 801c7ce:	1b80      	subs	r0, r0, r6
 801c7d0:	6060      	str	r0, [r4, #4]
 801c7d2:	6863      	ldr	r3, [r4, #4]
 801c7d4:	6123      	str	r3, [r4, #16]
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c7dc:	e7a8      	b.n	801c730 <_printf_i+0x150>
 801c7de:	6923      	ldr	r3, [r4, #16]
 801c7e0:	4632      	mov	r2, r6
 801c7e2:	4649      	mov	r1, r9
 801c7e4:	4640      	mov	r0, r8
 801c7e6:	47d0      	blx	sl
 801c7e8:	3001      	adds	r0, #1
 801c7ea:	d0ab      	beq.n	801c744 <_printf_i+0x164>
 801c7ec:	6823      	ldr	r3, [r4, #0]
 801c7ee:	079b      	lsls	r3, r3, #30
 801c7f0:	d413      	bmi.n	801c81a <_printf_i+0x23a>
 801c7f2:	68e0      	ldr	r0, [r4, #12]
 801c7f4:	9b03      	ldr	r3, [sp, #12]
 801c7f6:	4298      	cmp	r0, r3
 801c7f8:	bfb8      	it	lt
 801c7fa:	4618      	movlt	r0, r3
 801c7fc:	e7a4      	b.n	801c748 <_printf_i+0x168>
 801c7fe:	2301      	movs	r3, #1
 801c800:	4632      	mov	r2, r6
 801c802:	4649      	mov	r1, r9
 801c804:	4640      	mov	r0, r8
 801c806:	47d0      	blx	sl
 801c808:	3001      	adds	r0, #1
 801c80a:	d09b      	beq.n	801c744 <_printf_i+0x164>
 801c80c:	3501      	adds	r5, #1
 801c80e:	68e3      	ldr	r3, [r4, #12]
 801c810:	9903      	ldr	r1, [sp, #12]
 801c812:	1a5b      	subs	r3, r3, r1
 801c814:	42ab      	cmp	r3, r5
 801c816:	dcf2      	bgt.n	801c7fe <_printf_i+0x21e>
 801c818:	e7eb      	b.n	801c7f2 <_printf_i+0x212>
 801c81a:	2500      	movs	r5, #0
 801c81c:	f104 0619 	add.w	r6, r4, #25
 801c820:	e7f5      	b.n	801c80e <_printf_i+0x22e>
 801c822:	bf00      	nop
 801c824:	08020dd5 	.word	0x08020dd5
 801c828:	08020de6 	.word	0x08020de6

0801c82c <_sbrk_r>:
 801c82c:	b538      	push	{r3, r4, r5, lr}
 801c82e:	4d06      	ldr	r5, [pc, #24]	; (801c848 <_sbrk_r+0x1c>)
 801c830:	2300      	movs	r3, #0
 801c832:	4604      	mov	r4, r0
 801c834:	4608      	mov	r0, r1
 801c836:	602b      	str	r3, [r5, #0]
 801c838:	f7e4 fb3e 	bl	8000eb8 <_sbrk>
 801c83c:	1c43      	adds	r3, r0, #1
 801c83e:	d102      	bne.n	801c846 <_sbrk_r+0x1a>
 801c840:	682b      	ldr	r3, [r5, #0]
 801c842:	b103      	cbz	r3, 801c846 <_sbrk_r+0x1a>
 801c844:	6023      	str	r3, [r4, #0]
 801c846:	bd38      	pop	{r3, r4, r5, pc}
 801c848:	200106a4 	.word	0x200106a4

0801c84c <__sread>:
 801c84c:	b510      	push	{r4, lr}
 801c84e:	460c      	mov	r4, r1
 801c850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c854:	f000 f8a8 	bl	801c9a8 <_read_r>
 801c858:	2800      	cmp	r0, #0
 801c85a:	bfab      	itete	ge
 801c85c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c85e:	89a3      	ldrhlt	r3, [r4, #12]
 801c860:	181b      	addge	r3, r3, r0
 801c862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c866:	bfac      	ite	ge
 801c868:	6563      	strge	r3, [r4, #84]	; 0x54
 801c86a:	81a3      	strhlt	r3, [r4, #12]
 801c86c:	bd10      	pop	{r4, pc}

0801c86e <__swrite>:
 801c86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c872:	461f      	mov	r7, r3
 801c874:	898b      	ldrh	r3, [r1, #12]
 801c876:	05db      	lsls	r3, r3, #23
 801c878:	4605      	mov	r5, r0
 801c87a:	460c      	mov	r4, r1
 801c87c:	4616      	mov	r6, r2
 801c87e:	d505      	bpl.n	801c88c <__swrite+0x1e>
 801c880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c884:	2302      	movs	r3, #2
 801c886:	2200      	movs	r2, #0
 801c888:	f000 f870 	bl	801c96c <_lseek_r>
 801c88c:	89a3      	ldrh	r3, [r4, #12]
 801c88e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c896:	81a3      	strh	r3, [r4, #12]
 801c898:	4632      	mov	r2, r6
 801c89a:	463b      	mov	r3, r7
 801c89c:	4628      	mov	r0, r5
 801c89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c8a2:	f000 b817 	b.w	801c8d4 <_write_r>

0801c8a6 <__sseek>:
 801c8a6:	b510      	push	{r4, lr}
 801c8a8:	460c      	mov	r4, r1
 801c8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8ae:	f000 f85d 	bl	801c96c <_lseek_r>
 801c8b2:	1c43      	adds	r3, r0, #1
 801c8b4:	89a3      	ldrh	r3, [r4, #12]
 801c8b6:	bf15      	itete	ne
 801c8b8:	6560      	strne	r0, [r4, #84]	; 0x54
 801c8ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c8be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c8c2:	81a3      	strheq	r3, [r4, #12]
 801c8c4:	bf18      	it	ne
 801c8c6:	81a3      	strhne	r3, [r4, #12]
 801c8c8:	bd10      	pop	{r4, pc}

0801c8ca <__sclose>:
 801c8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8ce:	f000 b81b 	b.w	801c908 <_close_r>
	...

0801c8d4 <_write_r>:
 801c8d4:	b538      	push	{r3, r4, r5, lr}
 801c8d6:	4d07      	ldr	r5, [pc, #28]	; (801c8f4 <_write_r+0x20>)
 801c8d8:	4604      	mov	r4, r0
 801c8da:	4608      	mov	r0, r1
 801c8dc:	4611      	mov	r1, r2
 801c8de:	2200      	movs	r2, #0
 801c8e0:	602a      	str	r2, [r5, #0]
 801c8e2:	461a      	mov	r2, r3
 801c8e4:	f7e4 f8e1 	bl	8000aaa <_write>
 801c8e8:	1c43      	adds	r3, r0, #1
 801c8ea:	d102      	bne.n	801c8f2 <_write_r+0x1e>
 801c8ec:	682b      	ldr	r3, [r5, #0]
 801c8ee:	b103      	cbz	r3, 801c8f2 <_write_r+0x1e>
 801c8f0:	6023      	str	r3, [r4, #0]
 801c8f2:	bd38      	pop	{r3, r4, r5, pc}
 801c8f4:	200106a4 	.word	0x200106a4

0801c8f8 <abort>:
 801c8f8:	b508      	push	{r3, lr}
 801c8fa:	2006      	movs	r0, #6
 801c8fc:	f000 f88e 	bl	801ca1c <raise>
 801c900:	2001      	movs	r0, #1
 801c902:	f7e4 fa7d 	bl	8000e00 <_exit>
	...

0801c908 <_close_r>:
 801c908:	b538      	push	{r3, r4, r5, lr}
 801c90a:	4d06      	ldr	r5, [pc, #24]	; (801c924 <_close_r+0x1c>)
 801c90c:	2300      	movs	r3, #0
 801c90e:	4604      	mov	r4, r0
 801c910:	4608      	mov	r0, r1
 801c912:	602b      	str	r3, [r5, #0]
 801c914:	f7e4 fa9b 	bl	8000e4e <_close>
 801c918:	1c43      	adds	r3, r0, #1
 801c91a:	d102      	bne.n	801c922 <_close_r+0x1a>
 801c91c:	682b      	ldr	r3, [r5, #0]
 801c91e:	b103      	cbz	r3, 801c922 <_close_r+0x1a>
 801c920:	6023      	str	r3, [r4, #0]
 801c922:	bd38      	pop	{r3, r4, r5, pc}
 801c924:	200106a4 	.word	0x200106a4

0801c928 <_fstat_r>:
 801c928:	b538      	push	{r3, r4, r5, lr}
 801c92a:	4d07      	ldr	r5, [pc, #28]	; (801c948 <_fstat_r+0x20>)
 801c92c:	2300      	movs	r3, #0
 801c92e:	4604      	mov	r4, r0
 801c930:	4608      	mov	r0, r1
 801c932:	4611      	mov	r1, r2
 801c934:	602b      	str	r3, [r5, #0]
 801c936:	f7e4 fa96 	bl	8000e66 <_fstat>
 801c93a:	1c43      	adds	r3, r0, #1
 801c93c:	d102      	bne.n	801c944 <_fstat_r+0x1c>
 801c93e:	682b      	ldr	r3, [r5, #0]
 801c940:	b103      	cbz	r3, 801c944 <_fstat_r+0x1c>
 801c942:	6023      	str	r3, [r4, #0]
 801c944:	bd38      	pop	{r3, r4, r5, pc}
 801c946:	bf00      	nop
 801c948:	200106a4 	.word	0x200106a4

0801c94c <_isatty_r>:
 801c94c:	b538      	push	{r3, r4, r5, lr}
 801c94e:	4d06      	ldr	r5, [pc, #24]	; (801c968 <_isatty_r+0x1c>)
 801c950:	2300      	movs	r3, #0
 801c952:	4604      	mov	r4, r0
 801c954:	4608      	mov	r0, r1
 801c956:	602b      	str	r3, [r5, #0]
 801c958:	f7e4 fa95 	bl	8000e86 <_isatty>
 801c95c:	1c43      	adds	r3, r0, #1
 801c95e:	d102      	bne.n	801c966 <_isatty_r+0x1a>
 801c960:	682b      	ldr	r3, [r5, #0]
 801c962:	b103      	cbz	r3, 801c966 <_isatty_r+0x1a>
 801c964:	6023      	str	r3, [r4, #0]
 801c966:	bd38      	pop	{r3, r4, r5, pc}
 801c968:	200106a4 	.word	0x200106a4

0801c96c <_lseek_r>:
 801c96c:	b538      	push	{r3, r4, r5, lr}
 801c96e:	4d07      	ldr	r5, [pc, #28]	; (801c98c <_lseek_r+0x20>)
 801c970:	4604      	mov	r4, r0
 801c972:	4608      	mov	r0, r1
 801c974:	4611      	mov	r1, r2
 801c976:	2200      	movs	r2, #0
 801c978:	602a      	str	r2, [r5, #0]
 801c97a:	461a      	mov	r2, r3
 801c97c:	f7e4 fa8e 	bl	8000e9c <_lseek>
 801c980:	1c43      	adds	r3, r0, #1
 801c982:	d102      	bne.n	801c98a <_lseek_r+0x1e>
 801c984:	682b      	ldr	r3, [r5, #0]
 801c986:	b103      	cbz	r3, 801c98a <_lseek_r+0x1e>
 801c988:	6023      	str	r3, [r4, #0]
 801c98a:	bd38      	pop	{r3, r4, r5, pc}
 801c98c:	200106a4 	.word	0x200106a4

0801c990 <__malloc_lock>:
 801c990:	4801      	ldr	r0, [pc, #4]	; (801c998 <__malloc_lock+0x8>)
 801c992:	f7ff bb45 	b.w	801c020 <__retarget_lock_acquire_recursive>
 801c996:	bf00      	nop
 801c998:	200106b4 	.word	0x200106b4

0801c99c <__malloc_unlock>:
 801c99c:	4801      	ldr	r0, [pc, #4]	; (801c9a4 <__malloc_unlock+0x8>)
 801c99e:	f7ff bb40 	b.w	801c022 <__retarget_lock_release_recursive>
 801c9a2:	bf00      	nop
 801c9a4:	200106b4 	.word	0x200106b4

0801c9a8 <_read_r>:
 801c9a8:	b538      	push	{r3, r4, r5, lr}
 801c9aa:	4d07      	ldr	r5, [pc, #28]	; (801c9c8 <_read_r+0x20>)
 801c9ac:	4604      	mov	r4, r0
 801c9ae:	4608      	mov	r0, r1
 801c9b0:	4611      	mov	r1, r2
 801c9b2:	2200      	movs	r2, #0
 801c9b4:	602a      	str	r2, [r5, #0]
 801c9b6:	461a      	mov	r2, r3
 801c9b8:	f7e4 fa2c 	bl	8000e14 <_read>
 801c9bc:	1c43      	adds	r3, r0, #1
 801c9be:	d102      	bne.n	801c9c6 <_read_r+0x1e>
 801c9c0:	682b      	ldr	r3, [r5, #0]
 801c9c2:	b103      	cbz	r3, 801c9c6 <_read_r+0x1e>
 801c9c4:	6023      	str	r3, [r4, #0]
 801c9c6:	bd38      	pop	{r3, r4, r5, pc}
 801c9c8:	200106a4 	.word	0x200106a4

0801c9cc <_raise_r>:
 801c9cc:	291f      	cmp	r1, #31
 801c9ce:	b538      	push	{r3, r4, r5, lr}
 801c9d0:	4604      	mov	r4, r0
 801c9d2:	460d      	mov	r5, r1
 801c9d4:	d904      	bls.n	801c9e0 <_raise_r+0x14>
 801c9d6:	2316      	movs	r3, #22
 801c9d8:	6003      	str	r3, [r0, #0]
 801c9da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c9de:	bd38      	pop	{r3, r4, r5, pc}
 801c9e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c9e2:	b112      	cbz	r2, 801c9ea <_raise_r+0x1e>
 801c9e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c9e8:	b94b      	cbnz	r3, 801c9fe <_raise_r+0x32>
 801c9ea:	4620      	mov	r0, r4
 801c9ec:	f000 f830 	bl	801ca50 <_getpid_r>
 801c9f0:	462a      	mov	r2, r5
 801c9f2:	4601      	mov	r1, r0
 801c9f4:	4620      	mov	r0, r4
 801c9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c9fa:	f000 b817 	b.w	801ca2c <_kill_r>
 801c9fe:	2b01      	cmp	r3, #1
 801ca00:	d00a      	beq.n	801ca18 <_raise_r+0x4c>
 801ca02:	1c59      	adds	r1, r3, #1
 801ca04:	d103      	bne.n	801ca0e <_raise_r+0x42>
 801ca06:	2316      	movs	r3, #22
 801ca08:	6003      	str	r3, [r0, #0]
 801ca0a:	2001      	movs	r0, #1
 801ca0c:	e7e7      	b.n	801c9de <_raise_r+0x12>
 801ca0e:	2400      	movs	r4, #0
 801ca10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ca14:	4628      	mov	r0, r5
 801ca16:	4798      	blx	r3
 801ca18:	2000      	movs	r0, #0
 801ca1a:	e7e0      	b.n	801c9de <_raise_r+0x12>

0801ca1c <raise>:
 801ca1c:	4b02      	ldr	r3, [pc, #8]	; (801ca28 <raise+0xc>)
 801ca1e:	4601      	mov	r1, r0
 801ca20:	6818      	ldr	r0, [r3, #0]
 801ca22:	f7ff bfd3 	b.w	801c9cc <_raise_r>
 801ca26:	bf00      	nop
 801ca28:	20000020 	.word	0x20000020

0801ca2c <_kill_r>:
 801ca2c:	b538      	push	{r3, r4, r5, lr}
 801ca2e:	4d07      	ldr	r5, [pc, #28]	; (801ca4c <_kill_r+0x20>)
 801ca30:	2300      	movs	r3, #0
 801ca32:	4604      	mov	r4, r0
 801ca34:	4608      	mov	r0, r1
 801ca36:	4611      	mov	r1, r2
 801ca38:	602b      	str	r3, [r5, #0]
 801ca3a:	f7e4 f9cf 	bl	8000ddc <_kill>
 801ca3e:	1c43      	adds	r3, r0, #1
 801ca40:	d102      	bne.n	801ca48 <_kill_r+0x1c>
 801ca42:	682b      	ldr	r3, [r5, #0]
 801ca44:	b103      	cbz	r3, 801ca48 <_kill_r+0x1c>
 801ca46:	6023      	str	r3, [r4, #0]
 801ca48:	bd38      	pop	{r3, r4, r5, pc}
 801ca4a:	bf00      	nop
 801ca4c:	200106a4 	.word	0x200106a4

0801ca50 <_getpid_r>:
 801ca50:	f7e4 b9bc 	b.w	8000dcc <_getpid>

0801ca54 <_init>:
 801ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca56:	bf00      	nop
 801ca58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ca5a:	bc08      	pop	{r3}
 801ca5c:	469e      	mov	lr, r3
 801ca5e:	4770      	bx	lr

0801ca60 <_fini>:
 801ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca62:	bf00      	nop
 801ca64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ca66:	bc08      	pop	{r3}
 801ca68:	469e      	mov	lr, r3
 801ca6a:	4770      	bx	lr
